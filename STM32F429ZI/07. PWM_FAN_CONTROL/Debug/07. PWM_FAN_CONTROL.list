
07. PWM_FAN_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b14  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000a38  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aac  20000aac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2cc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b4  00000000  00000000  0003b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003e928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  0003ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027776  00000000  00000000  000414d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b588  00000000  00000000  00068c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e72a1  00000000  00000000  000841d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016b477  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065fc  00000000  00000000  0016b4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007ca8 	.word	0x08007ca8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	08007ca8 	.word	0x08007ca8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <DHT11_Init>:
		lcd_string(lcd_buff);
	}
}

void DHT11_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <DHT11_Init+0x1c>)
 80004fa:	f002 fb4b 	bl	8002b94 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80004fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000502:	f001 fc93 	bl	8001e2c <HAL_Delay>
	return;
 8000506:	bf00      	nop
}
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40020000 	.word	0x40020000

08000510 <get_button>:
{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};

// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
 800051c:	4613      	mov	r3, r2
 800051e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 fb1d 	bl	8002b64 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d10d      	bne.n	8000550 <get_button+0x40>
 8000534:	787b      	ldrb	r3, [r7, #1]
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <get_button+0x6c>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d108      	bne.n	8000550 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 800053e:	2050      	movs	r0, #80	; 0x50
 8000540:	f001 fc74 	bl	8001e2c <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 8000544:	787b      	ldrb	r3, [r7, #1]
 8000546:	4a0d      	ldr	r2, [pc, #52]	; (800057c <get_button+0x6c>)
 8000548:	2100      	movs	r1, #0
 800054a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 800054c:	2301      	movs	r3, #1
 800054e:	e011      	b.n	8000574 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d10d      	bne.n	8000572 <get_button+0x62>
 8000556:	787b      	ldrb	r3, [r7, #1]
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <get_button+0x6c>)
 800055a:	5cd3      	ldrb	r3, [r2, r3]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d108      	bne.n	8000572 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 8000560:	201e      	movs	r0, #30
 8000562:	f001 fc63 	bl	8001e2c <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 8000566:	787b      	ldrb	r3, [r7, #1]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <get_button+0x6c>)
 800056a:	2101      	movs	r1, #1
 800056c:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000000 	.word	0x20000000

08000580 <dcmotor_pwm_control>:
uint8_t pwm_start_flag = 0;	// dcmotor start/stop indicator flag
uint16_t CCR_Value = 0;	// PWM control
uint16_t forward_back_dcmotor = 0;	// 초기 세팅은 정방향 forward

void dcmotor_pwm_control(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	// start/stop : button0
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058c:	489b      	ldr	r0, [pc, #620]	; (80007fc <dcmotor_pwm_control+0x27c>)
 800058e:	f7ff ffbf 	bl	8000510 <get_button>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	f040 8081 	bne.w	800069c <dcmotor_pwm_control+0x11c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);	// LD1
 800059a:	2101      	movs	r1, #1
 800059c:	4898      	ldr	r0, [pc, #608]	; (8000800 <dcmotor_pwm_control+0x280>)
 800059e:	f002 fb12 	bl	8002bc6 <HAL_GPIO_TogglePin>

		if (pwm_start_flag == 0)
 80005a2:	4b98      	ldr	r3, [pc, #608]	; (8000804 <dcmotor_pwm_control+0x284>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d166      	bne.n	8000678 <dcmotor_pwm_control+0xf8>
		{
			pwm_start_flag = 1;
 80005aa:	4b96      	ldr	r3, [pc, #600]	; (8000804 <dcmotor_pwm_control+0x284>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
			if (forward_back_dcmotor == 0)
 80005b0:	4b95      	ldr	r3, [pc, #596]	; (8000808 <dcmotor_pwm_control+0x288>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d12d      	bne.n	8000614 <dcmotor_pwm_control+0x94>
			{
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	488f      	ldr	r0, [pc, #572]	; (80007fc <dcmotor_pwm_control+0x27c>)
 80005c0:	f002 fae8 	bl	8002b94 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	488c      	ldr	r0, [pc, #560]	; (80007fc <dcmotor_pwm_control+0x27c>)
 80005cc:	f002 fae2 	bl	8002b94 <HAL_GPIO_WritePin>
				CCR_Value = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 80005d0:	4b8e      	ldr	r3, [pc, #568]	; (800080c <dcmotor_pwm_control+0x28c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b8d      	ldr	r3, [pc, #564]	; (8000810 <dcmotor_pwm_control+0x290>)
 80005da:	801a      	strh	r2, [r3, #0]
				for(int i = 0; i < CCR_Value/10-2; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e00c      	b.n	80005fc <dcmotor_pwm_control+0x7c>
					HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	4888      	ldr	r0, [pc, #544]	; (8000814 <dcmotor_pwm_control+0x294>)
 80005f2:	f002 facf 	bl	8002b94 <HAL_GPIO_WritePin>
				for(int i = 0; i < CCR_Value/10-2; i++)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4b84      	ldr	r3, [pc, #528]	; (8000810 <dcmotor_pwm_control+0x290>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	4a85      	ldr	r2, [pc, #532]	; (8000818 <dcmotor_pwm_control+0x298>)
 8000602:	fba2 2303 	umull	r2, r3, r2, r3
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	b29b      	uxth	r3, r3
 800060a:	3b02      	subs	r3, #2
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	429a      	cmp	r2, r3
 8000610:	dbe7      	blt.n	80005e2 <dcmotor_pwm_control+0x62>
 8000612:	e02c      	b.n	800066e <dcmotor_pwm_control+0xee>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061a:	4878      	ldr	r0, [pc, #480]	; (80007fc <dcmotor_pwm_control+0x27c>)
 800061c:	f002 faba 	bl	8002b94 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	4875      	ldr	r0, [pc, #468]	; (80007fc <dcmotor_pwm_control+0x27c>)
 8000628:	f002 fab4 	bl	8002b94 <HAL_GPIO_WritePin>
				CCR_Value = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 800062c:	4b77      	ldr	r3, [pc, #476]	; (800080c <dcmotor_pwm_control+0x28c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b76      	ldr	r3, [pc, #472]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000636:	801a      	strh	r2, [r3, #0]
				for(int i = 0; i < CCR_Value/10-2; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	e00c      	b.n	8000658 <dcmotor_pwm_control+0xd8>
					HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	b29b      	uxth	r3, r3
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	4871      	ldr	r0, [pc, #452]	; (8000814 <dcmotor_pwm_control+0x294>)
 800064e:	f002 faa1 	bl	8002b94 <HAL_GPIO_WritePin>
				for(int i = 0; i < CCR_Value/10-2; i++)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	3301      	adds	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b6d      	ldr	r3, [pc, #436]	; (8000810 <dcmotor_pwm_control+0x290>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4a6e      	ldr	r2, [pc, #440]	; (8000818 <dcmotor_pwm_control+0x298>)
 800065e:	fba2 2303 	umull	r2, r3, r2, r3
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	b29b      	uxth	r3, r3
 8000666:	3b02      	subs	r3, #2
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	429a      	cmp	r2, r3
 800066c:	dbe7      	blt.n	800063e <dcmotor_pwm_control+0xbe>
			}
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	4866      	ldr	r0, [pc, #408]	; (800080c <dcmotor_pwm_control+0x28c>)
 8000672:	f003 fe4f 	bl	8004314 <HAL_TIM_PWM_Start>
 8000676:	e011      	b.n	800069c <dcmotor_pwm_control+0x11c>
		}
		else
		{
			pwm_start_flag = 0;
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <dcmotor_pwm_control+0x284>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	4862      	ldr	r0, [pc, #392]	; (800080c <dcmotor_pwm_control+0x28c>)
 8000682:	f003 ff0f 	bl	80044a4 <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	485b      	ldr	r0, [pc, #364]	; (80007fc <dcmotor_pwm_control+0x27c>)
 800068e:	f002 fa81 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	21ff      	movs	r1, #255	; 0xff
 8000696:	485f      	ldr	r0, [pc, #380]	; (8000814 <dcmotor_pwm_control+0x294>)
 8000698:	f002 fa7c 	bl	8002b94 <HAL_GPIO_WritePin>
		}

	}
	// speed-up : button1
	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	4856      	ldr	r0, [pc, #344]	; (80007fc <dcmotor_pwm_control+0x27c>)
 80006a4:	f7ff ff34 	bl	8000510 <get_button>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d136      	bne.n	800071c <dcmotor_pwm_control+0x19c>
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	// LED2
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4853      	ldr	r0, [pc, #332]	; (8000800 <dcmotor_pwm_control+0x280>)
 80006b2:	f002 fa88 	bl	8002bc6 <HAL_GPIO_TogglePin>
		CCR_Value = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 80006b6:	4b55      	ldr	r3, [pc, #340]	; (800080c <dcmotor_pwm_control+0x28c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b54      	ldr	r3, [pc, #336]	; (8000810 <dcmotor_pwm_control+0x290>)
 80006c0:	801a      	strh	r2, [r3, #0]
		CCR_Value += 10;
 80006c2:	4b53      	ldr	r3, [pc, #332]	; (8000810 <dcmotor_pwm_control+0x290>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	330a      	adds	r3, #10
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b51      	ldr	r3, [pc, #324]	; (8000810 <dcmotor_pwm_control+0x290>)
 80006cc:	801a      	strh	r2, [r3, #0]
		if (CCR_Value > 100) CCR_Value = 100;
 80006ce:	4b50      	ldr	r3, [pc, #320]	; (8000810 <dcmotor_pwm_control+0x290>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b64      	cmp	r3, #100	; 0x64
 80006d4:	d902      	bls.n	80006dc <dcmotor_pwm_control+0x15c>
 80006d6:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <dcmotor_pwm_control+0x290>)
 80006d8:	2264      	movs	r2, #100	; 0x64
 80006da:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR_Value);
 80006dc:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <dcmotor_pwm_control+0x290>)
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	4b4a      	ldr	r3, [pc, #296]	; (800080c <dcmotor_pwm_control+0x28c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
		for (int i = 0; i < CCR_Value/10-2; i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	e00c      	b.n	8000706 <dcmotor_pwm_control+0x186>
		{
			HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	4846      	ldr	r0, [pc, #280]	; (8000814 <dcmotor_pwm_control+0x294>)
 80006fc:	f002 fa4a 	bl	8002b94 <HAL_GPIO_WritePin>
		for (int i = 0; i < CCR_Value/10-2; i++)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <dcmotor_pwm_control+0x298>)
 800070c:	fba2 2303 	umull	r2, r3, r2, r3
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	b29b      	uxth	r3, r3
 8000714:	3b02      	subs	r3, #2
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbe7      	blt.n	80006ec <dcmotor_pwm_control+0x16c>
		}

	}

	// speed-down : button1
	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800071c:	2202      	movs	r2, #2
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	4836      	ldr	r0, [pc, #216]	; (80007fc <dcmotor_pwm_control+0x27c>)
 8000724:	f7ff fef4 	bl	8000510 <get_button>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d13c      	bne.n	80007a8 <dcmotor_pwm_control+0x228>
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED14
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	4833      	ldr	r0, [pc, #204]	; (8000800 <dcmotor_pwm_control+0x280>)
 8000734:	f002 fa47 	bl	8002bc6 <HAL_GPIO_TogglePin>
		CCR_Value = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <dcmotor_pwm_control+0x28c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b33      	ldr	r3, [pc, #204]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000742:	801a      	strh	r2, [r3, #0]
		CCR_Value -= 10;
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	3b0a      	subs	r3, #10
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <dcmotor_pwm_control+0x290>)
 800074e:	801a      	strh	r2, [r3, #0]
		if (CCR_Value < 30) CCR_Value = 30;
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b1d      	cmp	r3, #29
 8000756:	d802      	bhi.n	800075e <dcmotor_pwm_control+0x1de>
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <dcmotor_pwm_control+0x290>)
 800075a:	221e      	movs	r2, #30
 800075c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR_Value);
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <dcmotor_pwm_control+0x28c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	21ff      	movs	r1, #255	; 0xff
 800076c:	4829      	ldr	r0, [pc, #164]	; (8000814 <dcmotor_pwm_control+0x294>)
 800076e:	f002 fa11 	bl	8002b94 <HAL_GPIO_WritePin>
		for (int i = 0; i < CCR_Value/10-2; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	e00c      	b.n	8000792 <dcmotor_pwm_control+0x212>
		{
			HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	b29b      	uxth	r3, r3
 8000782:	2201      	movs	r2, #1
 8000784:	4619      	mov	r1, r3
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <dcmotor_pwm_control+0x294>)
 8000788:	f002 fa04 	bl	8002b94 <HAL_GPIO_WritePin>
		for (int i = 0; i < CCR_Value/10-2; i++)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <dcmotor_pwm_control+0x290>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <dcmotor_pwm_control+0x298>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	3b02      	subs	r3, #2
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	dbe7      	blt.n	8000778 <dcmotor_pwm_control+0x1f8>
		}

	}

	// forward_back : button3
	if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80007a8:	2203      	movs	r2, #3
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4813      	ldr	r0, [pc, #76]	; (80007fc <dcmotor_pwm_control+0x27c>)
 80007b0:	f7ff feae 	bl	8000510 <get_button>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d13f      	bne.n	800083a <dcmotor_pwm_control+0x2ba>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80007ba:	2101      	movs	r1, #1
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <dcmotor_pwm_control+0x280>)
 80007be:	f002 fa02 	bl	8002bc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <dcmotor_pwm_control+0x280>)
 80007c6:	f002 f9fe 	bl	8002bc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <dcmotor_pwm_control+0x280>)
 80007d0:	f002 f9f9 	bl	8002bc6 <HAL_GPIO_TogglePin>
		if (forward_back_dcmotor == 0)	// forward -> backward
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <dcmotor_pwm_control+0x288>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d11f      	bne.n	800081c <dcmotor_pwm_control+0x29c>
		{
			forward_back_dcmotor = 1;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <dcmotor_pwm_control+0x288>)
 80007de:	2201      	movs	r2, #1
 80007e0:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <dcmotor_pwm_control+0x27c>)
 80007ea:	f002 f9d3 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	4801      	ldr	r0, [pc, #4]	; (80007fc <dcmotor_pwm_control+0x27c>)
 80007f6:	f002 f9cd 	bl	8002b94 <HAL_GPIO_WritePin>
 80007fa:	e01e      	b.n	800083a <dcmotor_pwm_control+0x2ba>
 80007fc:	40021000 	.word	0x40021000
 8000800:	40020400 	.word	0x40020400
 8000804:	20000090 	.word	0x20000090
 8000808:	20000094 	.word	0x20000094
 800080c:	200003a4 	.word	0x200003a4
 8000810:	20000092 	.word	0x20000092
 8000814:	40020c00 	.word	0x40020c00
 8000818:	cccccccd 	.word	0xcccccccd
		}
		else							// backward -> forward
		{
			forward_back_dcmotor = 0;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <dcmotor_pwm_control+0x304>)
 800081e:	2200      	movs	r2, #0
 8000820:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <dcmotor_pwm_control+0x308>)
 800082a:	f002 f9b3 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000834:	4814      	ldr	r0, [pc, #80]	; (8000888 <dcmotor_pwm_control+0x308>)
 8000836:	f002 f9ad 	bl	8002b94 <HAL_GPIO_WritePin>
		}
	}
	if (pwm_start_flag == 1)
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <dcmotor_pwm_control+0x30c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d11c      	bne.n	800087c <dcmotor_pwm_control+0x2fc>
	{
		if (forward_back_dcmotor == 0)		//forward
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <dcmotor_pwm_control+0x304>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10c      	bne.n	8000864 <dcmotor_pwm_control+0x2e4>
		{
			if (t1ms_counter >= 50)
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <dcmotor_pwm_control+0x310>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b31      	cmp	r3, #49	; 0x31
 8000850:	dd14      	ble.n	800087c <dcmotor_pwm_control+0x2fc>
			{
				t1ms_counter = 0;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <dcmotor_pwm_control+0x310>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <dcmotor_pwm_control+0x308>)
 800085e:	f002 f9b2 	bl	8002bc6 <HAL_GPIO_TogglePin>
				t1ms_counter = 0;
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
			}
		}
	}
}
 8000862:	e00b      	b.n	800087c <dcmotor_pwm_control+0x2fc>
			if (t1ms_counter >= 100)		//backward
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <dcmotor_pwm_control+0x310>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b63      	cmp	r3, #99	; 0x63
 800086a:	dd07      	ble.n	800087c <dcmotor_pwm_control+0x2fc>
				t1ms_counter = 0;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <dcmotor_pwm_control+0x310>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <dcmotor_pwm_control+0x308>)
 8000878:	f002 f9a5 	bl	8002bc6 <HAL_GPIO_TogglePin>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000094 	.word	0x20000094
 8000888:	40021000 	.word	0x40021000
 800088c:	20000090 	.word	0x20000090
 8000890:	20000a1c 	.word	0x20000a1c

08000894 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af02      	add	r7, sp, #8
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f023 030f 	bic.w	r3, r3, #15
 80008a4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	f043 030c 	orr.w	r3, r3, #12
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	f043 030c 	orr.w	r3, r3, #12
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80008d4:	bf00      	nop
 80008d6:	f107 0208 	add.w	r2, r7, #8
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2304      	movs	r3, #4
 80008e0:	214e      	movs	r1, #78	; 0x4e
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <lcd_command+0x64>)
 80008e4:	f002 face 	bl	8002e84 <HAL_I2C_Master_Transmit>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f3      	bne.n	80008d6 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80008ee:	bf00      	nop
}
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002c0 	.word	0x200002c0

080008fc <i2c_lcd_init>:
	}
	return;
}
// lcd 초기화
void i2c_lcd_init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000900:	2033      	movs	r0, #51	; 0x33
 8000902:	f7ff ffc7 	bl	8000894 <lcd_command>
	lcd_command(0x32);
 8000906:	2032      	movs	r0, #50	; 0x32
 8000908:	f7ff ffc4 	bl	8000894 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 800090c:	2028      	movs	r0, #40	; 0x28
 800090e:	f7ff ffc1 	bl	8000894 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000912:	200c      	movs	r0, #12
 8000914:	f7ff ffbe 	bl	8000894 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000918:	2006      	movs	r0, #6
 800091a:	f7ff ffbb 	bl	8000894 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff ffb8 	bl	8000894 <lcd_command>
	HAL_Delay(2);
 8000924:	2002      	movs	r0, #2
 8000926:	f001 fa81 	bl	8001e2c <HAL_Delay>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <HAL_SYSTICK_Handler+0x18>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_SYSTICK_Handler+0x18>)
 800093c:	6013      	str	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	20000a1c 	.word	0x20000a1c

0800094c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000954:	1d39      	adds	r1, r7, #4
 8000956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095a:	2201      	movs	r2, #1
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <__io_putchar+0x20>)
 800095e:	f005 f946 	bl	8005bee <HAL_UART_Transmit>

  return ch;
 8000962:	687b      	ldr	r3, [r7, #4]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000047c 	.word	0x2000047c

08000970 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d109      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800098a:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000994:	6013      	str	r3, [r2, #0]
	}
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40014400 	.word	0x40014400
 80009a8:	20000a14 	.word	0x20000a14
 80009ac:	20000a18 	.word	0x20000a18

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f001 f9c8 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f84a 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 fb2e 	bl	800101c <MX_GPIO_Init>
  MX_ETH_Init();
 80009c0:	f000 f8b0 	bl	8000b24 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c4:	f000 faa8 	bl	8000f18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c8:	f000 fafa 	bl	8000fc0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80009cc:	f000 face 	bl	8000f6c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80009d0:	f000 fa5a 	bl	8000e88 <MX_TIM10_Init>
  MX_TIM11_Init();
 80009d4:	f000 fa7c 	bl	8000ed0 <MX_TIM11_Init>
  MX_TIM3_Init();
 80009d8:	f000 f98c 	bl	8000cf4 <MX_TIM3_Init>
  MX_I2C1_Init();
 80009dc:	f000 f8f0 	bl	8000bc0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80009e0:	f000 f9dc 	bl	8000d9c <MX_TIM4_Init>
  MX_TIM2_Init();
 80009e4:	f000 f92c 	bl	8000c40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80009e8:	2201      	movs	r2, #1
 80009ea:	4910      	ldr	r1, [pc, #64]	; (8000a2c <main+0x7c>)
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <main+0x80>)
 80009ee:	f005 f990 	bl	8005d12 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 80009f2:	2201      	movs	r2, #1
 80009f4:	490f      	ldr	r1, [pc, #60]	; (8000a34 <main+0x84>)
 80009f6:	4810      	ldr	r0, [pc, #64]	; (8000a38 <main+0x88>)
 80009f8:	f005 f98b 	bl	8005d12 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <main+0x8c>)
 80009fe:	f003 fbc9 	bl	8004194 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <main+0x90>)
 8000a04:	f003 fbc6 	bl	8004194 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <main+0x94>)
 8000a0c:	f003 ff20 	bl	8004850 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);	// for DC motor PWM cont
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <main+0x98>)
 8000a14:	f003 fdb6 	bl	8004584 <HAL_TIM_PWM_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  DHT11_Init();
 8000a18:	f7ff fd6a 	bl	80004f0 <DHT11_Init>
  i2c_lcd_init();
 8000a1c:	f7ff ff6e 	bl	80008fc <i2c_lcd_init>

  TIM10_10ms_counter=0;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <main+0x9c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
  {
//	DHT11_processing();
// 	pc_command_processing();
// 	bt_command_processing();
// 	ultrasonic_processing();
 	dcmotor_pwm_control();
 8000a26:	f7ff fdab 	bl	8000580 <dcmotor_pwm_control>
 8000a2a:	e7fc      	b.n	8000a26 <main+0x76>
 8000a2c:	20000a10 	.word	0x20000a10
 8000a30:	2000047c 	.word	0x2000047c
 8000a34:	20000a11 	.word	0x20000a11
 8000a38:	200004c0 	.word	0x200004c0
 8000a3c:	200003ec 	.word	0x200003ec
 8000a40:	20000434 	.word	0x20000434
 8000a44:	2000035c 	.word	0x2000035c
 8000a48:	200003a4 	.word	0x200003a4
 8000a4c:	20000a14 	.word	0x20000a14

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f006 fc1c 	bl	800729c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac4:	23a8      	movs	r3, #168	; 0xa8
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000acc:	2307      	movs	r3, #7
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fe75 	bl	80037c4 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae0:	f000 fbca 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2105      	movs	r1, #5
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 f8d6 	bl	8003cb4 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b0e:	f000 fbb3 	bl	8001278 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <MX_ETH_Init+0x88>)
 8000b2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b3c:	22e1      	movs	r2, #225	; 0xe1
 8000b3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b5e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <MX_ETH_Init+0x90>)
 8000b64:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_ETH_Init+0x94>)
 8000b6a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b72:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b76:	f001 fb21 	bl	80021bc <HAL_ETH_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b80:	f000 fb7a 	bl	8001278 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b84:	2238      	movs	r2, #56	; 0x38
 8000b86:	2100      	movs	r1, #0
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_ETH_Init+0x98>)
 8000b8a:	f006 fb87 	bl	800729c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_ETH_Init+0x98>)
 8000b90:	2221      	movs	r2, #33	; 0x21
 8000b92:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_ETH_Init+0x98>)
 8000b96:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b9a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_ETH_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000210 	.word	0x20000210
 8000bac:	40028000 	.word	0x40028000
 8000bb0:	20000a20 	.word	0x20000a20
 8000bb4:	20000170 	.word	0x20000170
 8000bb8:	200000d0 	.word	0x200000d0
 8000bbc:	20000098 	.word	0x20000098

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_I2C1_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_I2C1_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bfe:	f001 fffd 	bl	8002bfc <HAL_I2C_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 fb36 	bl	8001278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c10:	f002 fc3f 	bl	8003492 <HAL_I2CEx_ConfigAnalogFilter>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c1a:	f000 fb2d 	bl	8001278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c22:	f002 fc72 	bl	800350a <HAL_I2CEx_ConfigDigitalFilter>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 fb24 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200002c0 	.word	0x200002c0
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	000186a0 	.word	0x000186a0

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c6c:	f240 628f 	movw	r2, #1679	; 0x68f
 8000c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c8c:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000c8e:	f003 faf1 	bl	8004274 <HAL_TIM_PWM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 faee 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000cac:	f004 fec2 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cb6:	f000 fadf 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000cbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000cd4:	f004 f888 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000cde:	f000 facb 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <MX_TIM2_Init+0xb0>)
 8000ce4:	f000 fcde 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000314 	.word	0x20000314

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d12:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <MX_TIM3_Init+0xa4>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d18:	2253      	movs	r2, #83	; 0x53
 8000d1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d36:	4817      	ldr	r0, [pc, #92]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d38:	f003 fd3a 	bl	80047b0 <HAL_TIM_IC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 fa99 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	480f      	ldr	r0, [pc, #60]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d56:	f004 fe6d 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 fa8a 	bl	8001278 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d64:	230a      	movs	r3, #10
 8000d66:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_TIM3_Init+0xa0>)
 8000d7c:	f003 ff98 	bl	8004cb0 <HAL_TIM_IC_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d86:	f000 fa77 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000035c 	.word	0x2000035c
 8000d98:	40000400 	.word	0x40000400

08000d9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <MX_TIM4_Init+0xe8>)
 8000dd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000dd4:	f240 3247 	movw	r2, #839	; 0x347
 8000dd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000de2:	2263      	movs	r2, #99	; 0x63
 8000de4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000df2:	4823      	ldr	r0, [pc, #140]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000df4:	f003 f97e 	bl	80040f4 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000dfe:	f000 fa3b 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481c      	ldr	r0, [pc, #112]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000e10:	f004 f8ac 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e1a:	f000 fa2d 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000e20:	f003 fa28 	bl	8004274 <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e2a:	f000 fa25 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4810      	ldr	r0, [pc, #64]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000e3e:	f004 fdf9 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e48:	f000 fa16 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	; 0x60
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8000e50:	2345      	movs	r3, #69	; 0x45
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000e64:	f003 ffc0 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e6e:	f000 fa03 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <MX_TIM4_Init+0xe4>)
 8000e74:	f000 fc16 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000e78:	bf00      	nop
 8000e7a:	3738      	adds	r7, #56	; 0x38
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200003a4 	.word	0x200003a4
 8000e84:	40000800 	.word	0x40000800

08000e88 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <MX_TIM10_Init+0x44>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000e94:	22a7      	movs	r2, #167	; 0xa7
 8000e96:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000ea0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ea4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM10_Init+0x40>)
 8000eb4:	f003 f91e 	bl	80040f4 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000ebe:	f000 f9db 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200003ec 	.word	0x200003ec
 8000ecc:	40014400 	.word	0x40014400

08000ed0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <MX_TIM11_Init+0x44>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000edc:	22a7      	movs	r2, #167	; 0xa7
 8000ede:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM11_Init+0x40>)
 8000efc:	f003 f8fa 	bl	80040f4 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f06:	f000 f9b7 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000434 	.word	0x20000434
 8000f14:	40014800 	.word	0x40014800

08000f18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MX_USART3_UART_Init+0x50>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART3_UART_Init+0x4c>)
 8000f50:	f004 fe00 	bl	8005b54 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f98d 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000047c 	.word	0x2000047c
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_USART6_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART6_UART_Init+0x4c>)
 8000fa4:	f004 fdd6 	bl	8005b54 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 f963 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200004c0 	.word	0x200004c0
 8000fbc:	40011400 	.word	0x40011400

08000fc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	f002 fac0 	bl	8003588 <HAL_PCD_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 f933 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000504 	.word	0x20000504

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a87      	ldr	r2, [pc, #540]	; (8001258 <MX_GPIO_Init+0x23c>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	4b81      	ldr	r3, [pc, #516]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a80      	ldr	r2, [pc, #512]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a79      	ldr	r2, [pc, #484]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b77      	ldr	r3, [pc, #476]	; (8001258 <MX_GPIO_Init+0x23c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	4b73      	ldr	r3, [pc, #460]	; (8001258 <MX_GPIO_Init+0x23c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a72      	ldr	r2, [pc, #456]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b70      	ldr	r3, [pc, #448]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a6b      	ldr	r2, [pc, #428]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b69      	ldr	r3, [pc, #420]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b65      	ldr	r3, [pc, #404]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a64      	ldr	r2, [pc, #400]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b62      	ldr	r3, [pc, #392]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <MX_GPIO_Init+0x23c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a56      	ldr	r2, [pc, #344]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <MX_GPIO_Init+0x23c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2101      	movs	r1, #1
 8001116:	4851      	ldr	r0, [pc, #324]	; (800125c <MX_GPIO_Init+0x240>)
 8001118:	f001 fd3c 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001122:	484f      	ldr	r0, [pc, #316]	; (8001260 <MX_GPIO_Init+0x244>)
 8001124:	f001 fd36 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112e:	484d      	ldr	r0, [pc, #308]	; (8001264 <MX_GPIO_Init+0x248>)
 8001130:	f001 fd30 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|LED_LIGHT_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800113a:	484b      	ldr	r0, [pc, #300]	; (8001268 <MX_GPIO_Init+0x24c>)
 800113c:	f001 fd2a 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4849      	ldr	r0, [pc, #292]	; (800126c <MX_GPIO_Init+0x250>)
 8001146:	f001 fd25 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800114a:	2200      	movs	r2, #0
 800114c:	21ff      	movs	r1, #255	; 0xff
 800114e:	4848      	ldr	r0, [pc, #288]	; (8001270 <MX_GPIO_Init+0x254>)
 8001150:	f001 fd20 	bl	8002b94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4842      	ldr	r0, [pc, #264]	; (8001274 <MX_GPIO_Init+0x258>)
 800116c:	f001 fb4e 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4835      	ldr	r0, [pc, #212]	; (800125c <MX_GPIO_Init+0x240>)
 8001188:	f001 fb40 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800118c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_GPIO_Init+0x244>)
 80011a6:	f001 fb31 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4828      	ldr	r0, [pc, #160]	; (8001264 <MX_GPIO_Init+0x248>)
 80011c4:	f001 fb22 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin LED_LIGHT_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|LED_LIGHT_Pin;
 80011c8:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <MX_GPIO_Init+0x24c>)
 80011e2:	f001 fb13 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80011e6:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	481b      	ldr	r0, [pc, #108]	; (8001268 <MX_GPIO_Init+0x24c>)
 80011fc:	f001 fb06 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4815      	ldr	r0, [pc, #84]	; (800126c <MX_GPIO_Init+0x250>)
 8001218:	f001 faf8 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <MX_GPIO_Init+0x250>)
 8001230:	f001 faec 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_GPIO_Init+0x254>)
 800124c:	f001 fade 	bl	800280c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001250:	bf00      	nop
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40021400 	.word	0x40021400
 8001268:	40021000 	.word	0x40021000
 800126c:	40021800 	.word	0x40021800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40020800 	.word	0x40020800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_MspInit+0x4c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a55      	ldr	r2, [pc, #340]	; (8001448 <HAL_ETH_MspInit+0x174>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f040 80a4 	bne.w	8001440 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_ETH_MspInit+0x178>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_ETH_MspInit+0x178>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	623b      	str	r3, [r7, #32]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_ETH_MspInit+0x178>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_ETH_MspInit+0x178>)
 800131e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	4b45      	ldr	r3, [pc, #276]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <HAL_ETH_MspInit+0x178>)
 800133a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b42      	ldr	r3, [pc, #264]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_ETH_MspInit+0x178>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_ETH_MspInit+0x178>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_ETH_MspInit+0x178>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_ETH_MspInit+0x178>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_ETH_MspInit+0x178>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_ETH_MspInit+0x178>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_ETH_MspInit+0x178>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a28      	ldr	r2, [pc, #160]	; (800144c <HAL_ETH_MspInit+0x178>)
 80013aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_ETH_MspInit+0x178>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013bc:	2332      	movs	r3, #50	; 0x32
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013cc:	230b      	movs	r3, #11
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	481e      	ldr	r0, [pc, #120]	; (8001450 <HAL_ETH_MspInit+0x17c>)
 80013d8:	f001 fa18 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013dc:	2386      	movs	r3, #134	; 0x86
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ec:	230b      	movs	r3, #11
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <HAL_ETH_MspInit+0x180>)
 80013f8:	f001 fa08 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140e:	230b      	movs	r3, #11
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <HAL_ETH_MspInit+0x184>)
 800141a:	f001 f9f7 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800141e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001430:	230b      	movs	r3, #11
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <HAL_ETH_MspInit+0x188>)
 800143c:	f001 f9e6 	bl	800280c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3738      	adds	r7, #56	; 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40028000 	.word	0x40028000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40021800 	.word	0x40021800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_I2C_MspInit+0x8c>)
 80014bc:	f001 f9a6 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d115      	bne.n	800152e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_TIM_PWM_MspInit+0x48>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_PWM_MspInit+0x48>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_TIM_PWM_MspInit+0x48>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201c      	movs	r0, #28
 8001524:	f000 fd81 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001528:	201c      	movs	r0, #28
 800152a:	f000 fd9a 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_TIM_IC_MspInit+0x94>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d133      	bne.n	80015c6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_TIM_IC_MspInit+0x98>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_TIM_IC_MspInit+0x98>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_TIM_IC_MspInit+0x98>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_TIM_IC_MspInit+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_TIM_IC_MspInit+0x98>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_TIM_IC_MspInit+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_TIM_IC_MspInit+0x9c>)
 80015b2:	f001 f92b 	bl	800280c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201d      	movs	r0, #29
 80015bc:	f000 fd35 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c0:	201d      	movs	r0, #29
 80015c2:	f000 fd4e 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <HAL_TIM_Base_MspInit+0xb8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d116      	bne.n	800161c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201e      	movs	r0, #30
 8001610:	f000 fd0b 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001614:	201e      	movs	r0, #30
 8001616:	f000 fd24 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800161a:	e036      	b.n	800168a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_TIM_Base_MspInit+0xc0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d116      	bne.n	8001654 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2019      	movs	r0, #25
 8001648:	f000 fcef 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800164c:	2019      	movs	r0, #25
 800164e:	f000 fd08 	bl	8002062 <HAL_NVIC_EnableIRQ>
}
 8001652:	e01a      	b.n	800168a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_TIM_Base_MspInit+0xc4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d115      	bne.n	800168a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_TIM_Base_MspInit+0xbc>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	201a      	movs	r0, #26
 8001680:	f000 fcd3 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001684:	201a      	movs	r0, #26
 8001686:	f000 fcec 	bl	8002062 <HAL_NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40000800 	.word	0x40000800
 8001698:	40023800 	.word	0x40023800
 800169c:	40014400 	.word	0x40014400
 80016a0:	40014800 	.word	0x40014800

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c4:	d11e      	bne.n	8001704 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 80016e2:	2320      	movs	r3, #32
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016f2:	2301      	movs	r3, #1
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <HAL_TIM_MspPostInit+0xb4>)
 80016fe:	f001 f885 	bl	800280c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001702:	e023      	b.n	800174c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_TIM_MspPostInit+0xb8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11e      	bne.n	800174c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_TIM_MspPostInit+0xb0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800173c:	2302      	movs	r3, #2
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_TIM_MspPostInit+0xbc>)
 8001748:	f001 f860 	bl	800280c <HAL_GPIO_Init>
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	40000800 	.word	0x40000800
 8001760:	40020c00 	.word	0x40020c00

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3a      	ldr	r2, [pc, #232]	; (800186c <HAL_UART_MspInit+0x108>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d135      	bne.n	80017f2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_UART_MspInit+0x10c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a38      	ldr	r2, [pc, #224]	; (8001870 <HAL_UART_MspInit+0x10c>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_UART_MspInit+0x10c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_UART_MspInit+0x10c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <HAL_UART_MspInit+0x10c>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_UART_MspInit+0x10c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d0:	2307      	movs	r3, #7
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4826      	ldr	r0, [pc, #152]	; (8001874 <HAL_UART_MspInit+0x110>)
 80017dc:	f001 f816 	bl	800280c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2027      	movs	r0, #39	; 0x27
 80017e6:	f000 fc20 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ea:	2027      	movs	r0, #39	; 0x27
 80017ec:	f000 fc39 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017f0:	e038      	b.n	8001864 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_UART_MspInit+0x114>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d133      	bne.n	8001864 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_UART_MspInit+0x10c>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_UART_MspInit+0x10c>)
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_UART_MspInit+0x10c>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x10c>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <HAL_UART_MspInit+0x10c>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x10c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001834:	23c0      	movs	r3, #192	; 0xc0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001844:	2308      	movs	r3, #8
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <HAL_UART_MspInit+0x118>)
 8001850:	f000 ffdc 	bl	800280c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2047      	movs	r0, #71	; 0x47
 800185a:	f000 fbe6 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800185e:	2047      	movs	r0, #71	; 0x47
 8001860:	f000 fbff 	bl	8002062 <HAL_NVIC_EnableIRQ>
}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004800 	.word	0x40004800
 8001870:	40023800 	.word	0x40023800
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40011400 	.word	0x40011400
 800187c:	40020800 	.word	0x40020800

08001880 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a0:	d13f      	bne.n	8001922 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_PCD_MspInit+0xac>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_PCD_MspInit+0xac>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_PCD_MspInit+0xac>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d0:	230a      	movs	r3, #10
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <HAL_PCD_MspInit+0xb0>)
 80018dc:	f000 ff96 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <HAL_PCD_MspInit+0xb0>)
 80018f6:	f000 ff89 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_PCD_MspInit+0xac>)
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_PCD_MspInit+0xac>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6353      	str	r3, [r2, #52]	; 0x34
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_PCD_MspInit+0xac>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_PCD_MspInit+0xac>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_PCD_MspInit+0xac>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fa34 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001984:	f7fe ffd4 	bl	8000930 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001992:	f003 f885 	bl	8004aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200003ec 	.word	0x200003ec

080019a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80019a6:	f003 f87b 	bl	8004aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000434 	.word	0x20000434

080019b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM2_IRQHandler+0x10>)
 80019ba:	f003 f871 	bl	8004aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000314 	.word	0x20000314

080019c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM3_IRQHandler+0x10>)
 80019ce:	f003 f867 	bl	8004aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000035c 	.word	0x2000035c

080019dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM4_IRQHandler+0x10>)
 80019e2:	f003 f85d 	bl	8004aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200003a4 	.word	0x200003a4

080019f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <USART3_IRQHandler+0x10>)
 80019f6:	f004 f9bd 	bl	8005d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000047c 	.word	0x2000047c

08001a04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <USART6_IRQHandler+0x10>)
 8001a0a:	f004 f9b3 	bl	8005d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200004c0 	.word	0x200004c0

08001a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e00a      	b.n	8001a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2a:	f3af 8000 	nop.w
 8001a2e:	4601      	mov	r1, r0
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf0      	blt.n	8001a2a <_read+0x12>
  }

  return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e009      	b.n	8001a78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe ff6d 	bl	800094c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf1      	blt.n	8001a64 <_write+0x12>
  }
  return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_close>:

int _close(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <_isatty>:

int _isatty(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f005 fb90 	bl	8007248 <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20030000 	.word	0x20030000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	20000a28 	.word	0x20000a28
 8001b5c:	20000ab0 	.word	0x20000ab0

08001b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <SystemInit+0x20>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <SystemInit+0x20>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_UART_RxCpltCallback+0xd4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d12c      	bne.n	8001bee <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b27      	cmp	r3, #39	; 0x27
 8001b9a:	dc1d      	bgt.n	8001bd8 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_UART_RxCpltCallback+0xdc>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b0a      	cmp	r3, #10
 8001ba2:	d003      	beq.n	8001bac <HAL_UART_RxCpltCallback+0x28>
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_UART_RxCpltCallback+0xdc>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b0d      	cmp	r3, #13
 8001baa:	d10b      	bne.n	8001bc4 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	; (8001c64 <HAL_UART_RxCpltCallback+0xe0>)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_UART_RxCpltCallback+0xe4>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e00f      	b.n	8001be4 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	4924      	ldr	r1, [pc, #144]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001bcc:	600a      	str	r2, [r1, #0]
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_UART_RxCpltCallback+0xdc>)
 8001bd0:	7811      	ldrb	r1, [r2, #0]
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_UART_RxCpltCallback+0xe0>)
 8001bd4:	54d1      	strb	r1, [r2, r3]
 8001bd6:	e005      	b.n	8001be4 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <HAL_UART_RxCpltCallback+0xe8>)
 8001be0:	f005 fbd2 	bl	8007388 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	491e      	ldr	r1, [pc, #120]	; (8001c60 <HAL_UART_RxCpltCallback+0xdc>)
 8001be8:	481b      	ldr	r0, [pc, #108]	; (8001c58 <HAL_UART_RxCpltCallback+0xd4>)
 8001bea:	f004 f892 	bl	8005d12 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_UART_RxCpltCallback+0xec>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12c      	bne.n	8001c50 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_UART_RxCpltCallback+0xf0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b27      	cmp	r3, #39	; 0x27
 8001bfc:	dc1d      	bgt.n	8001c3a <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_UART_RxCpltCallback+0xf4>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b0a      	cmp	r3, #10
 8001c04:	d003      	beq.n	8001c0e <HAL_UART_RxCpltCallback+0x8a>
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_UART_RxCpltCallback+0xf4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b0d      	cmp	r3, #13
 8001c0c:	d10b      	bne.n	8001c26 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_UART_RxCpltCallback+0xd8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1a      	ldr	r2, [pc, #104]	; (8001c7c <HAL_UART_RxCpltCallback+0xf8>)
 8001c14:	2100      	movs	r1, #0
 8001c16:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_RxCpltCallback+0xfc>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_RxCpltCallback+0xf0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e00f      	b.n	8001c46 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_UART_RxCpltCallback+0xf0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	4911      	ldr	r1, [pc, #68]	; (8001c74 <HAL_UART_RxCpltCallback+0xf0>)
 8001c2e:	600a      	str	r2, [r1, #0]
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_UART_RxCpltCallback+0xf4>)
 8001c32:	7811      	ldrb	r1, [r2, #0]
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_UART_RxCpltCallback+0xf8>)
 8001c36:	54d1      	strb	r1, [r2, r3]
 8001c38:	e005      	b.n	8001c46 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_UART_RxCpltCallback+0xf0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8001c40:	4810      	ldr	r0, [pc, #64]	; (8001c84 <HAL_UART_RxCpltCallback+0x100>)
 8001c42:	f005 fba1 	bl	8007388 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001c46:	2201      	movs	r2, #1
 8001c48:	490b      	ldr	r1, [pc, #44]	; (8001c78 <HAL_UART_RxCpltCallback+0xf4>)
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <HAL_UART_RxCpltCallback+0xec>)
 8001c4c:	f004 f861 	bl	8005d12 <HAL_UART_Receive_IT>
	}
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000047c 	.word	0x2000047c
 8001c5c:	20000a54 	.word	0x20000a54
 8001c60:	20000a10 	.word	0x20000a10
 8001c64:	20000a2c 	.word	0x20000a2c
 8001c68:	20000a58 	.word	0x20000a58
 8001c6c:	08007cc0 	.word	0x08007cc0
 8001c70:	200004c0 	.word	0x200004c0
 8001c74:	20000a84 	.word	0x20000a84
 8001c78:	20000a11 	.word	0x20000a11
 8001c7c:	20000a5c 	.word	0x20000a5c
 8001c80:	20000a88 	.word	0x20000a88
 8001c84:	08007cd8 	.word	0x08007cd8

08001c88 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11f      	bne.n	8001cda <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8001cb2:	e012      	b.n	8001cda <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10d      	bne.n	8001cda <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f003 fa18 	bl	80050fc <HAL_TIM_ReadCapturedValue>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_TIM_IC_CaptureCallback+0x64>)
 8001cd2:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	20000a94 	.word	0x20000a94
 8001cec:	20000a8c 	.word	0x20000a8c
 8001cf0:	20000a90 	.word	0x20000a90

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cfa:	490e      	ldr	r1, [pc, #56]	; (8001d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d10:	4c0b      	ldr	r4, [pc, #44]	; (8001d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d1e:	f7ff ff1f 	bl	8001b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f005 fa97 	bl	8007254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7fe fe43 	bl	80009b0 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d38:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 8001d3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d40:	20000aac 	.word	0x20000aac

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f94f 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fa82 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f967 	bl	800207e <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f92f 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000004 	.word	0x20000004
 8001de4:	2000000c 	.word	0x2000000c
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000a98 	.word	0x20000a98

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000a98 	.word	0x20000a98

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000000c 	.word	0x2000000c

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff feb6 	bl	8001e14 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d008      	beq.n	80020c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e052      	b.n	800216e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0216 	bic.w	r2, r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <HAL_DMA_Abort+0x62>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0208 	bic.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002118:	e013      	b.n	8002142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211a:	f7ff fe7b 	bl	8001e14 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b05      	cmp	r3, #5
 8002126:	d90c      	bls.n	8002142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e015      	b.n	800216e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e4      	bne.n	800211a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e00c      	b.n	80021ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2205      	movs	r2, #5
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06c      	b.n	80022a8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2223      	movs	r2, #35	; 0x23
 80021dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff f877 	bl	80012d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_ETH_Init+0xf4>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <HAL_ETH_Init+0xf4>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_ETH_Init+0xf4>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <HAL_ETH_Init+0xf8>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <HAL_ETH_Init+0xf8>)
 8002208:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800220c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_ETH_Init+0xf8>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4927      	ldr	r1, [pc, #156]	; (80022b4 <HAL_ETH_Init+0xf8>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_ETH_Init+0xf8>)
 800221e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002236:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7ff fdec 	bl	8001e14 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800223e:	e011      	b.n	8002264 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002240:	f7ff fde8 	bl	8001e14 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800224e:	d909      	bls.n	8002264 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2204      	movs	r2, #4
 8002254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	22e0      	movs	r2, #224	; 0xe0
 800225c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e021      	b.n	80022a8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e4      	bne.n	8002240 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f958 	bl	800252c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9ff 	bl	8002680 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa55 	bl	8002732 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	461a      	mov	r2, r3
 800228e:	2100      	movs	r1, #0
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9bd 	bl	8002610 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2210      	movs	r2, #16
 80022a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800

080022b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4b51      	ldr	r3, [pc, #324]	; (8002414 <ETH_SetMACConfig+0x15c>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7c1b      	ldrb	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <ETH_SetMACConfig+0x28>
 80022da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022de:	e000      	b.n	80022e2 <ETH_SetMACConfig+0x2a>
 80022e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	7c5b      	ldrb	r3, [r3, #17]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <ETH_SetMACConfig+0x38>
 80022ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ee:	e000      	b.n	80022f2 <ETH_SetMACConfig+0x3a>
 80022f0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	7fdb      	ldrb	r3, [r3, #31]
 80022fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002300:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	7f92      	ldrb	r2, [r2, #30]
 800230c:	2a00      	cmp	r2, #0
 800230e:	d102      	bne.n	8002316 <ETH_SetMACConfig+0x5e>
 8002310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002314:	e000      	b.n	8002318 <ETH_SetMACConfig+0x60>
 8002316:	2200      	movs	r2, #0
                        macconf->Speed |
 8002318:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7f1b      	ldrb	r3, [r3, #28]
 800231e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002320:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002326:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800232e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002336:	2a00      	cmp	r2, #0
 8002338:	d102      	bne.n	8002340 <ETH_SetMACConfig+0x88>
 800233a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233e:	e000      	b.n	8002342 <ETH_SetMACConfig+0x8a>
 8002340:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002342:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	7bdb      	ldrb	r3, [r3, #15]
 8002348:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800234a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002350:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002358:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800235a:	4313      	orrs	r3, r2
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fd5a 	bl	8001e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800238e:	4013      	ands	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d101      	bne.n	80023a6 <ETH_SetMACConfig+0xee>
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	e000      	b.n	80023a8 <ETH_SetMACConfig+0xf0>
 80023a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80023b6:	2a01      	cmp	r2, #1
 80023b8:	d101      	bne.n	80023be <ETH_SetMACConfig+0x106>
 80023ba:	2208      	movs	r2, #8
 80023bc:	e000      	b.n	80023c0 <ETH_SetMACConfig+0x108>
 80023be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80023c8:	2a01      	cmp	r2, #1
 80023ca:	d101      	bne.n	80023d0 <ETH_SetMACConfig+0x118>
 80023cc:	2204      	movs	r2, #4
 80023ce:	e000      	b.n	80023d2 <ETH_SetMACConfig+0x11a>
 80023d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d101      	bne.n	80023e2 <ETH_SetMACConfig+0x12a>
 80023de:	2202      	movs	r2, #2
 80023e0:	e000      	b.n	80023e4 <ETH_SetMACConfig+0x12c>
 80023e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023e4:	4313      	orrs	r3, r2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7ff fd15 	bl	8001e2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	619a      	str	r2, [r3, #24]
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	ff20810f 	.word	0xff20810f

08002418 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <ETH_SetDMAConfig+0x110>)
 8002432:	4013      	ands	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	7b1b      	ldrb	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <ETH_SetDMAConfig+0x2c>
 800243e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002442:	e000      	b.n	8002446 <ETH_SetDMAConfig+0x2e>
 8002444:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7b5b      	ldrb	r3, [r3, #13]
 800244a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800244c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	7f52      	ldrb	r2, [r2, #29]
 8002452:	2a00      	cmp	r2, #0
 8002454:	d102      	bne.n	800245c <ETH_SetDMAConfig+0x44>
 8002456:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800245a:	e000      	b.n	800245e <ETH_SetDMAConfig+0x46>
 800245c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800245e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	7b9b      	ldrb	r3, [r3, #14]
 8002464:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002466:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800246c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7f1b      	ldrb	r3, [r3, #28]
 8002472:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002474:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7f9b      	ldrb	r3, [r3, #30]
 800247a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800247c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002482:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800248c:	4313      	orrs	r3, r2
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249c:	461a      	mov	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff fcbc 	bl	8001e2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	461a      	mov	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	791b      	ldrb	r3, [r3, #4]
 80024c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fc8d 	bl	8001e2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	f8de3f23 	.word	0xf8de3f23

0800252c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0a6      	sub	sp, #152	; 0x98
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002540:	2300      	movs	r3, #0
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002568:	2300      	movs	r3, #0
 800256a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002572:	2300      	movs	r3, #0
 8002574:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800258e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002598:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fe86 	bl	80022b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025d8:	2301      	movs	r3, #1
 80025da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ff08 	bl	8002418 <ETH_SetDMAConfig>
}
 8002608:	bf00      	nop
 800260a:	3798      	adds	r7, #152	; 0x98
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3305      	adds	r3, #5
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	3204      	adds	r2, #4
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <ETH_MACAddressConfig+0x68>)
 8002632:	4413      	add	r3, r2
 8002634:	461a      	mov	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3303      	adds	r3, #3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	061a      	lsls	r2, r3, #24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3302      	adds	r3, #2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3301      	adds	r3, #1
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4313      	orrs	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <ETH_MACAddressConfig+0x6c>)
 8002662:	4413      	add	r3, r2
 8002664:	461a      	mov	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	6013      	str	r3, [r2, #0]
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40028040 	.word	0x40028040
 800267c:	40028044 	.word	0x40028044

08002680 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e03e      	b.n	800270c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68d9      	ldr	r1, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	3206      	adds	r2, #6
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d80c      	bhi.n	80026f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68d9      	ldr	r1, [r3, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	e004      	b.n	80026fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3301      	adds	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d9bd      	bls.n	800268e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002724:	611a      	str	r2, [r3, #16]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e046      	b.n	80027ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800277c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002784:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	3212      	adds	r2, #18
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d80c      	bhi.n	80027be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6919      	ldr	r1, [r3, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	e004      	b.n	80027c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d9b5      	bls.n	8002740 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e177      	b.n	8002b18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	f040 8166 	bne.w	8002b12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d005      	beq.n	800285e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	2b02      	cmp	r3, #2
 800285c:	d130      	bne.n	80028c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 0201 	and.w	r2, r3, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d017      	beq.n	80028fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d123      	bne.n	8002950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	08da      	lsrs	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3208      	adds	r2, #8
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80c0 	beq.w	8002b12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_GPIO_Init+0x324>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <HAL_GPIO_Init+0x324>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ae:	4a61      	ldr	r2, [pc, #388]	; (8002b34 <HAL_GPIO_Init+0x328>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_GPIO_Init+0x32c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d037      	beq.n	8002a4a <HAL_GPIO_Init+0x23e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_GPIO_Init+0x330>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_GPIO_Init+0x23a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_GPIO_Init+0x334>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x236>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a55      	ldr	r2, [pc, #340]	; (8002b44 <HAL_GPIO_Init+0x338>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x232>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <HAL_GPIO_Init+0x33c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x22e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_GPIO_Init+0x340>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x22a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x344>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <HAL_GPIO_Init+0x348>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x222>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_GPIO_Init+0x34c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x21e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4f      	ldr	r2, [pc, #316]	; (8002b5c <HAL_GPIO_Init+0x350>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x21a>
 8002a22:	2309      	movs	r3, #9
 8002a24:	e012      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a26:	230a      	movs	r3, #10
 8002a28:	e010      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	e00e      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00c      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a32:	2306      	movs	r3, #6
 8002a34:	e00a      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a36:	2305      	movs	r3, #5
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5c:	4935      	ldr	r1, [pc, #212]	; (8002b34 <HAL_GPIO_Init+0x328>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	f67f ae84 	bls.w	8002828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40020c00 	.word	0x40020c00
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40021400 	.word	0x40021400
 8002b50:	40021800 	.word	0x40021800
 8002b54:	40021c00 	.word	0x40021c00
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022400 	.word	0x40022400
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e001      	b.n	8002b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd8:	887a      	ldrh	r2, [r7, #2]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	041a      	lsls	r2, r3, #16
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	400b      	ands	r3, r1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e12b      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fc1c 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c60:	f001 fa20 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a81      	ldr	r2, [pc, #516]	; (8002e70 <HAL_I2C_Init+0x274>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d807      	bhi.n	8002c80 <HAL_I2C_Init+0x84>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a80      	ldr	r2, [pc, #512]	; (8002e74 <HAL_I2C_Init+0x278>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	bf94      	ite	ls
 8002c78:	2301      	movls	r3, #1
 8002c7a:	2300      	movhi	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e006      	b.n	8002c8e <HAL_I2C_Init+0x92>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a7d      	ldr	r2, [pc, #500]	; (8002e78 <HAL_I2C_Init+0x27c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0e7      	b.n	8002e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a78      	ldr	r2, [pc, #480]	; (8002e7c <HAL_I2C_Init+0x280>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	; (8002e70 <HAL_I2C_Init+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d802      	bhi.n	8002cd0 <HAL_I2C_Init+0xd4>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	e009      	b.n	8002ce4 <HAL_I2C_Init+0xe8>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	4a69      	ldr	r2, [pc, #420]	; (8002e80 <HAL_I2C_Init+0x284>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	495c      	ldr	r1, [pc, #368]	; (8002e70 <HAL_I2C_Init+0x274>)
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d819      	bhi.n	8002d38 <HAL_I2C_Init+0x13c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e59      	subs	r1, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d18:	400b      	ands	r3, r1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_I2C_Init+0x138>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1e59      	subs	r1, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	e051      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d34:	2304      	movs	r3, #4
 8002d36:	e04f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_I2C_Init+0x168>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e012      	b.n	8002d8a <HAL_I2C_Init+0x18e>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Init+0x196>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e022      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <HAL_I2C_Init+0x1bc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e58      	subs	r0, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	440b      	add	r3, r1
 8002da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Init+0x1dc>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6809      	ldr	r1, [r1, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6911      	ldr	r1, [r2, #16]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	000186a0 	.word	0x000186a0
 8002e74:	001e847f 	.word	0x001e847f
 8002e78:	003d08ff 	.word	0x003d08ff
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7fe ffbc 	bl	8001e14 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 80e0 	bne.w	800306c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4970      	ldr	r1, [pc, #448]	; (8003078 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f964 	bl	8003184 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0d3      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x50>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0cc      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d007      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	; 0x21
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2210      	movs	r2, #16
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	893a      	ldrh	r2, [r7, #8]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f89c 	bl	8003080 <I2C_MasterRequestWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e08d      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f68:	e066      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f9de 	bl	8003330 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06b      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11b      	bne.n	800300c <HAL_I2C_Master_Transmit+0x188>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f9ce 	bl	80033b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b04      	cmp	r3, #4
 8003022:	d107      	bne.n	8003034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01a      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d194      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	00100002 	.word	0x00100002
 800307c:	ffff0000 	.word	0xffff0000

08003080 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	460b      	mov	r3, r1
 800308e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d006      	beq.n	80030aa <I2C_MasterRequestWrite+0x2a>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d003      	beq.n	80030aa <I2C_MasterRequestWrite+0x2a>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a8:	d108      	bne.n	80030bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00b      	b.n	80030d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	2b12      	cmp	r3, #18
 80030c2:	d107      	bne.n	80030d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f84f 	bl	8003184 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d103      	bne.n	8003104 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e035      	b.n	8003174 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003110:	d108      	bne.n	8003124 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e01b      	b.n	800315c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003124:	897b      	ldrh	r3, [r7, #10]
 8003126:	11db      	asrs	r3, r3, #7
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0306 	and.w	r3, r3, #6
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f063 030f 	orn	r3, r3, #15
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	490e      	ldr	r1, [pc, #56]	; (800317c <I2C_MasterRequestWrite+0xfc>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f875 	bl	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e010      	b.n	8003174 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <I2C_MasterRequestWrite+0x100>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f865 	bl	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	00010008 	.word	0x00010008
 8003180:	00010002 	.word	0x00010002

08003184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003194:	e025      	b.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d021      	beq.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe fe39 	bl	8001e14 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d116      	bne.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e023      	b.n	800322a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10d      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	43da      	mvns	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	e00c      	b.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d0b6      	beq.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003240:	e051      	b.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d123      	bne.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800326a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e046      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d021      	beq.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe fdb7 	bl	8001e14 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e020      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10c      	bne.n	800330a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e00b      	b.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	43da      	mvns	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4013      	ands	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d18d      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333c:	e02d      	b.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f878 	bl	8003434 <I2C_IsAcknowledgeFailed>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e02d      	b.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d021      	beq.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fe fd5d 	bl	8001e14 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d116      	bne.n	800339a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e007      	b.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d1ca      	bne.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033be:	e02d      	b.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f837 	bl	8003434 <I2C_IsAcknowledgeFailed>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e02d      	b.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d021      	beq.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fe fd1c 	bl	8001e14 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e007      	b.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d1ca      	bne.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d11b      	bne.n	8003484 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003454:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d129      	bne.n	80034fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0210 	bic.w	r2, r2, #16
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	d12a      	bne.n	800357a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	f023 030f 	bic.w	r3, r3, #15
 800354a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b29a      	uxth	r2, r3
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	4313      	orrs	r3, r2
 8003554:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	89fa      	ldrh	r2, [r7, #14]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358a:	b08f      	sub	sp, #60	; 0x3c
 800358c:	af0a      	add	r7, sp, #40	; 0x28
 800358e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e10f      	b.n	80037ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fe f963 	bl	8001880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fb94 	bl	8006d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	687e      	ldr	r6, [r7, #4]
 80035e6:	466d      	mov	r5, sp
 80035e8:	f106 0410 	add.w	r4, r6, #16
 80035ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80035fc:	1d33      	adds	r3, r6, #4
 80035fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003600:	6838      	ldr	r0, [r7, #0]
 8003602:	f003 fb1f 	bl	8006c44 <USB_CoreInit>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d0      	b.n	80037ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fb82 	bl	8006d28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003624:	2300      	movs	r3, #0
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	e04a      	b.n	80036c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	333d      	adds	r3, #61	; 0x3d
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	333c      	adds	r3, #60	; 0x3c
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	b298      	uxth	r0, r3
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3344      	adds	r3, #68	; 0x44
 8003666:	4602      	mov	r2, r0
 8003668:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3340      	adds	r3, #64	; 0x40
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3348      	adds	r3, #72	; 0x48
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	334c      	adds	r3, #76	; 0x4c
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3354      	adds	r3, #84	; 0x54
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	3301      	adds	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3af      	bcc.n	800362a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e044      	b.n	800375a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	3301      	adds	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d3b5      	bcc.n	80036d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	687e      	ldr	r6, [r7, #4]
 800376c:	466d      	mov	r5, sp
 800376e:	f106 0410 	add.w	r4, r6, #16
 8003772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800377a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800377e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003782:	1d33      	adds	r3, r6, #4
 8003784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	f003 fb1a 	bl	8006dc0 <USB_DevInit>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00d      	b.n	80037ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 fce5 	bl	8007182 <USB_DevDisconnect>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e267      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d075      	beq.n	80038ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e2:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d00c      	beq.n	8003808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d112      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b82      	ldr	r3, [pc, #520]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05b      	beq.n	80038cc <HAL_RCC_OscConfig+0x108>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d157      	bne.n	80038cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e242      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x74>
 800382a:	4b76      	ldr	r3, [pc, #472]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a75      	ldr	r2, [pc, #468]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b70      	ldr	r3, [pc, #448]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6f      	ldr	r2, [pc, #444]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b6d      	ldr	r3, [pc, #436]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6c      	ldr	r2, [pc, #432]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 800385c:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a68      	ldr	r2, [pc, #416]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe faca 	bl	8001e14 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fac6 	bl	8001e14 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e207      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xc0>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fab6 	bl	8001e14 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe fab2 	bl	8001e14 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1f3      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0xe8>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038da:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f2:	4b44      	ldr	r3, [pc, #272]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x152>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1c7      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b3b      	ldr	r3, [pc, #236]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4937      	ldr	r1, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e03a      	b.n	80039a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_OscConfig+0x244>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fe fa6b 	bl	8001e14 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003942:	f7fe fa67 	bl	8001e14 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1a8      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4925      	ldr	r1, [pc, #148]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e015      	b.n	80039a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_OscConfig+0x244>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fa4a 	bl	8001e14 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003984:	f7fe fa46 	bl	8001e14 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e187      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d036      	beq.n	8003a1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_RCC_OscConfig+0x248>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe fa2a 	bl	8001e14 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fe fa26 	bl	8001e14 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e167      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_OscConfig+0x240>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x200>
 80039e2:	e01b      	b.n	8003a1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCC_OscConfig+0x248>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fa13 	bl	8001e14 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	e00e      	b.n	8003a10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fe fa0f 	bl	8001e14 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d907      	bls.n	8003a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e150      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
 8003a04:	40023800 	.word	0x40023800
 8003a08:	42470000 	.word	0x42470000
 8003a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ea      	bne.n	80039f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8097 	beq.w	8003b58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2e:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	4b7d      	ldr	r3, [pc, #500]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a73      	ldr	r2, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7fe f9cf 	bl	8001e14 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fe f9cb 	bl	8001e14 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e10c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x474>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x2ea>
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	e01c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x324>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x30c>
 8003ab6:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a5b      	ldr	r2, [pc, #364]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x324>
 8003ad0:	4b58      	ldr	r3, [pc, #352]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a54      	ldr	r2, [pc, #336]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe f990 	bl	8001e14 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7fe f98c 	bl	8001e14 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0cb      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ee      	beq.n	8003af8 <HAL_RCC_OscConfig+0x334>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1c:	f7fe f97a 	bl	8001e14 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe f976 	bl	8001e14 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0b5      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ee      	bne.n	8003b24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4c:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4a38      	ldr	r2, [pc, #224]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a1 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b62:	4b34      	ldr	r3, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d05c      	beq.n	8003c28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d141      	bne.n	8003bfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_RCC_OscConfig+0x478>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f94a 	bl	8001e14 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe f946 	bl	8001e14 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e087      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	491b      	ldr	r1, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x478>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe f91f 	bl	8001e14 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe f91b 	bl	8001e14 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e05c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x416>
 8003bf8:	e054      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCC_OscConfig+0x478>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe f908 	bl	8001e14 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe f904 	bl	8001e14 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e045      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x444>
 8003c26:	e03d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e038      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x4ec>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d028      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d121      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800

08003cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0cc      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d90c      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b63      	ldr	r3, [pc, #396]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0b8      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d08:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	494d      	ldr	r1, [pc, #308]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d044      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d119      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e067      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 0203 	bic.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4934      	ldr	r1, [pc, #208]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da4:	f7fe f836 	bl	8001e14 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fe f832 	bl	8001e14 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 020c 	and.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1eb      	bne.n	8003dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d20c      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e032      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4916      	ldr	r1, [pc, #88]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	490e      	ldr	r1, [pc, #56]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e3a:	f000 f821 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	490a      	ldr	r1, [pc, #40]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd ff96 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023c00 	.word	0x40023c00
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08007d68 	.word	0x08007d68
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	20000008 	.word	0x20000008

08003e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e84:	b094      	sub	sp, #80	; 0x50
 8003e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e90:	2300      	movs	r3, #0
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e98:	4b79      	ldr	r3, [pc, #484]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	f200 80e1 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb2:	e0db      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003eb8:	e0db      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eba:	4b73      	ldr	r3, [pc, #460]	; (8004088 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ebc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ebe:	e0d8      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eca:	4b6d      	ldr	r3, [pc, #436]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	2200      	movs	r2, #0
 8003ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
 8003eee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	0159      	lsls	r1, r3, #5
 8003f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f04:	0150      	lsls	r0, r2, #5
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	6139      	str	r1, [r7, #16]
 8003f10:	4629      	mov	r1, r5
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f24:	4659      	mov	r1, fp
 8003f26:	018b      	lsls	r3, r1, #6
 8003f28:	4651      	mov	r1, sl
 8003f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2e:	4651      	mov	r1, sl
 8003f30:	018a      	lsls	r2, r1, #6
 8003f32:	4651      	mov	r1, sl
 8003f34:	ebb2 0801 	subs.w	r8, r2, r1
 8003f38:	4659      	mov	r1, fp
 8003f3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f52:	4690      	mov	r8, r2
 8003f54:	4699      	mov	r9, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	eb18 0303 	adds.w	r3, r8, r3
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	462b      	mov	r3, r5
 8003f60:	eb49 0303 	adc.w	r3, r9, r3
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f72:	4629      	mov	r1, r5
 8003f74:	024b      	lsls	r3, r1, #9
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	024a      	lsls	r2, r1, #9
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f90:	f7fc f92c 	bl	80001ec <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f9c:	e058      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9e:	4b38      	ldr	r3, [pc, #224]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	4611      	mov	r1, r2
 8003faa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb8:	4642      	mov	r2, r8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0159      	lsls	r1, r3, #5
 8003fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fca:	0150      	lsls	r0, r2, #5
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	00eb      	lsls	r3, r5, #3
 8004002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004006:	00e2      	lsls	r2, r4, #3
 8004008:	4614      	mov	r4, r2
 800400a:	461d      	mov	r5, r3
 800400c:	4643      	mov	r3, r8
 800400e:	18e3      	adds	r3, r4, r3
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	464b      	mov	r3, r9
 8004014:	eb45 0303 	adc.w	r3, r5, r3
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004026:	4629      	mov	r1, r5
 8004028:	028b      	lsls	r3, r1, #10
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004030:	4621      	mov	r1, r4
 8004032:	028a      	lsls	r2, r1, #10
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	61fa      	str	r2, [r7, #28]
 8004040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004044:	f7fc f8d2 	bl	80001ec <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	3301      	adds	r3, #1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800406a:	e002      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetSysClockFreq+0x204>)
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004074:	4618      	mov	r0, r3
 8004076:	3750      	adds	r7, #80	; 0x50
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400
 8004088:	007a1200 	.word	0x007a1200

0800408c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040a8:	f7ff fff0 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0a9b      	lsrs	r3, r3, #10
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	08007d78 	.word	0x08007d78

080040cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040d0:	f7ff ffdc 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0b5b      	lsrs	r3, r3, #13
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	08007d78 	.word	0x08007d78

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fa5e 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f001 f844 	bl	80051c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e04e      	b.n	800424a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <HAL_TIM_Base_Start_IT+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d01d      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	; (800425c <HAL_TIM_Base_Start_IT+0xc8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_TIM_Base_Start_IT+0xcc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_TIM_Base_Start_IT+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_TIM_Base_Start_IT+0xd4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_TIM_Base_Start_IT+0xd8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x80>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_TIM_Base_Start_IT+0xdc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d111      	bne.n	8004238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b06      	cmp	r3, #6
 8004224:	d010      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	e007      	b.n	8004248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40010400 	.word	0x40010400
 800426c:	40014000 	.word	0x40014000
 8004270:	40001800 	.word	0x40001800

08004274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e041      	b.n	800430a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd f928 	bl	80014f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f000 ff84 	bl	80051c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_TIM_PWM_Start+0x24>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e022      	b.n	800437e <HAL_TIM_PWM_Start+0x6a>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b04      	cmp	r3, #4
 800433c:	d109      	bne.n	8004352 <HAL_TIM_PWM_Start+0x3e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e015      	b.n	800437e <HAL_TIM_PWM_Start+0x6a>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x58>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e008      	b.n	800437e <HAL_TIM_PWM_Start+0x6a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07c      	b.n	8004480 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Start+0x82>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	e013      	b.n	80043be <HAL_TIM_PWM_Start+0xaa>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x92>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a4:	e00b      	b.n	80043be <HAL_TIM_PWM_Start+0xaa>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b4:	e003      	b.n	80043be <HAL_TIM_PWM_Start+0xaa>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fb0e 	bl	80059e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <HAL_TIM_PWM_Start+0x174>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIM_PWM_Start+0xcc>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	; (800448c <HAL_TIM_PWM_Start+0x178>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_TIM_PWM_Start+0xd0>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_PWM_Start+0xd2>
 80043e4:	2300      	movs	r3, #0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_TIM_PWM_Start+0x174>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d01d      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_TIM_PWM_Start+0x17c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d018      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_TIM_PWM_Start+0x180>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <HAL_TIM_PWM_Start+0x184>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <HAL_TIM_PWM_Start+0x178>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_TIM_PWM_Start+0x188>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_TIM_PWM_Start+0x136>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <HAL_TIM_PWM_Start+0x18c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d111      	bne.n	800446e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b06      	cmp	r3, #6
 800445a:	d010      	beq.n	800447e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	e007      	b.n	800447e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40010000 	.word	0x40010000
 800448c:	40010400 	.word	0x40010400
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40001800 	.word	0x40001800

080044a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fa96 	bl	80059e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	; (800457c <HAL_TIM_PWM_Stop+0xd8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_PWM_Stop+0x2c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_TIM_PWM_Stop+0xdc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_PWM_Stop+0x30>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_TIM_PWM_Stop+0x32>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d017      	beq.n	800450a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_TIM_PWM_Stop+0x66>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	f240 4344 	movw	r3, #1092	; 0x444
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_TIM_PWM_Stop+0x66>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	f241 1311 	movw	r3, #4369	; 0x1111
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_TIM_PWM_Stop+0x96>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a1a      	ldr	r2, [r3, #32]
 8004520:	f240 4344 	movw	r3, #1092	; 0x444
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_TIM_PWM_Stop+0x96>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Stop+0xa6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	e013      	b.n	8004572 <HAL_TIM_PWM_Stop+0xce>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Stop+0xb6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	e00b      	b.n	8004572 <HAL_TIM_PWM_Stop+0xce>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Stop+0xc6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	e003      	b.n	8004572 <HAL_TIM_PWM_Stop+0xce>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40010000 	.word	0x40010000
 8004580:	40010400 	.word	0x40010400

08004584 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_TIM_PWM_Start_IT+0x28>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e022      	b.n	80045f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d109      	bne.n	80045c6 <HAL_TIM_PWM_Start_IT+0x42>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e015      	b.n	80045f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start_IT+0x5c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e008      	b.n	80045f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0c7      	b.n	800478a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_TIM_PWM_Start_IT+0x86>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	e013      	b.n	8004632 <HAL_TIM_PWM_Start_IT+0xae>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Start_IT+0x96>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004618:	e00b      	b.n	8004632 <HAL_TIM_PWM_Start_IT+0xae>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Start_IT+0xa6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004628:	e003      	b.n	8004632 <HAL_TIM_PWM_Start_IT+0xae>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b0c      	cmp	r3, #12
 8004636:	d841      	bhi.n	80046bc <HAL_TIM_PWM_Start_IT+0x138>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_TIM_PWM_Start_IT+0xbc>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004675 	.word	0x08004675
 8004644:	080046bd 	.word	0x080046bd
 8004648:	080046bd 	.word	0x080046bd
 800464c:	080046bd 	.word	0x080046bd
 8004650:	08004687 	.word	0x08004687
 8004654:	080046bd 	.word	0x080046bd
 8004658:	080046bd 	.word	0x080046bd
 800465c:	080046bd 	.word	0x080046bd
 8004660:	08004699 	.word	0x08004699
 8004664:	080046bd 	.word	0x080046bd
 8004668:	080046bd 	.word	0x080046bd
 800466c:	080046bd 	.word	0x080046bd
 8004670:	080046ab 	.word	0x080046ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0202 	orr.w	r2, r2, #2
 8004682:	60da      	str	r2, [r3, #12]
      break;
 8004684:	e01d      	b.n	80046c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0204 	orr.w	r2, r2, #4
 8004694:	60da      	str	r2, [r3, #12]
      break;
 8004696:	e014      	b.n	80046c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	60da      	str	r2, [r3, #12]
      break;
 80046a8:	e00b      	b.n	80046c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0210 	orr.w	r2, r2, #16
 80046b8:	60da      	str	r2, [r3, #12]
      break;
 80046ba:	e002      	b.n	80046c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      break;
 80046c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d15f      	bne.n	8004788 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f989 	bl	80059e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <HAL_TIM_PWM_Start_IT+0x210>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIM_PWM_Start_IT+0x166>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <HAL_TIM_PWM_Start_IT+0x214>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_Start_IT+0x16a>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_TIM_PWM_Start_IT+0x16c>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004702:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <HAL_TIM_PWM_Start_IT+0x210>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d01d      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1f      	ldr	r2, [pc, #124]	; (800479c <HAL_TIM_PWM_Start_IT+0x218>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_TIM_PWM_Start_IT+0x220>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_TIM_PWM_Start_IT+0x214>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_TIM_PWM_Start_IT+0x224>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_PWM_Start_IT+0x1d0>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_TIM_PWM_Start_IT+0x228>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d010      	beq.n	8004788 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e007      	b.n	8004788 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40010400 	.word	0x40010400
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40001800 	.word	0x40001800

080047b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e041      	b.n	8004846 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc feb0 	bl	800153c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f000 fce6 	bl	80051c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <HAL_TIM_IC_Start_IT+0x1e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e013      	b.n	8004896 <HAL_TIM_IC_Start_IT+0x46>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d104      	bne.n	800487e <HAL_TIM_IC_Start_IT+0x2e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e00b      	b.n	8004896 <HAL_TIM_IC_Start_IT+0x46>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d104      	bne.n	800488e <HAL_TIM_IC_Start_IT+0x3e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e003      	b.n	8004896 <HAL_TIM_IC_Start_IT+0x46>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <HAL_TIM_IC_Start_IT+0x58>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e013      	b.n	80048d0 <HAL_TIM_IC_Start_IT+0x80>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d104      	bne.n	80048b8 <HAL_TIM_IC_Start_IT+0x68>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e00b      	b.n	80048d0 <HAL_TIM_IC_Start_IT+0x80>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d104      	bne.n	80048c8 <HAL_TIM_IC_Start_IT+0x78>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e003      	b.n	80048d0 <HAL_TIM_IC_Start_IT+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d2:	7bbb      	ldrb	r3, [r7, #14]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d102      	bne.n	80048de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80048d8:	7b7b      	ldrb	r3, [r7, #13]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0cc      	b.n	8004a7c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_IC_Start_IT+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f0:	e013      	b.n	800491a <HAL_TIM_IC_Start_IT+0xca>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_IC_Start_IT+0xb2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004900:	e00b      	b.n	800491a <HAL_TIM_IC_Start_IT+0xca>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d104      	bne.n	8004912 <HAL_TIM_IC_Start_IT+0xc2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004910:	e003      	b.n	800491a <HAL_TIM_IC_Start_IT+0xca>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_IC_Start_IT+0xda>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004928:	e013      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x102>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_IC_Start_IT+0xea>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004938:	e00b      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x102>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_IC_Start_IT+0xfa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004948:	e003      	b.n	8004952 <HAL_TIM_IC_Start_IT+0x102>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d841      	bhi.n	80049dc <HAL_TIM_IC_Start_IT+0x18c>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <HAL_TIM_IC_Start_IT+0x110>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004995 	.word	0x08004995
 8004964:	080049dd 	.word	0x080049dd
 8004968:	080049dd 	.word	0x080049dd
 800496c:	080049dd 	.word	0x080049dd
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049dd 	.word	0x080049dd
 8004978:	080049dd 	.word	0x080049dd
 800497c:	080049dd 	.word	0x080049dd
 8004980:	080049b9 	.word	0x080049b9
 8004984:	080049dd 	.word	0x080049dd
 8004988:	080049dd 	.word	0x080049dd
 800498c:	080049dd 	.word	0x080049dd
 8004990:	080049cb 	.word	0x080049cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0202 	orr.w	r2, r2, #2
 80049a2:	60da      	str	r2, [r3, #12]
      break;
 80049a4:	e01d      	b.n	80049e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0204 	orr.w	r2, r2, #4
 80049b4:	60da      	str	r2, [r3, #12]
      break;
 80049b6:	e014      	b.n	80049e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	60da      	str	r2, [r3, #12]
      break;
 80049c8:	e00b      	b.n	80049e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0210 	orr.w	r2, r2, #16
 80049d8:	60da      	str	r2, [r3, #12]
      break;
 80049da:	e002      	b.n	80049e2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d148      	bne.n	8004a7a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	6839      	ldr	r1, [r7, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fff9 	bl	80059e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <HAL_TIM_IC_Start_IT+0x234>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d01d      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_TIM_IC_Start_IT+0x238>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_TIM_IC_Start_IT+0x23c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <HAL_TIM_IC_Start_IT+0x240>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <HAL_TIM_IC_Start_IT+0x244>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <HAL_TIM_IC_Start_IT+0x248>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <HAL_TIM_IC_Start_IT+0x24c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d111      	bne.n	8004a6a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b06      	cmp	r3, #6
 8004a56:	d010      	beq.n	8004a7a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a68:	e007      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40001800 	.word	0x40001800

08004aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0202 	mvn.w	r2, #2
 8004acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd f8d0 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fb4a 	bl	8005184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fb51 	bl	8005198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0204 	mvn.w	r2, #4
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd f8a6 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb20 	bl	8005184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fb27 	bl	8005198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0208 	mvn.w	r2, #8
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd f87c 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 faf6 	bl	8005184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fafd 	bl	8005198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0210 	mvn.w	r2, #16
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd f852 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 facc 	bl	8005184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fad3 	bl	8005198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0201 	mvn.w	r2, #1
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fb fea6 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 ff78 	bl	8005b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa98 	bl	80051ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0220 	mvn.w	r2, #32
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 ff42 	bl	8005b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e088      	b.n	8004de0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11b      	bne.n	8004d14 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f000 fcb8 	bl	8005660 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 020c 	bic.w	r2, r2, #12
 8004cfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	619a      	str	r2, [r3, #24]
 8004d12:	e060      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d11c      	bne.n	8004d54 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f000 fd3c 	bl	80057a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	021a      	lsls	r2, r3, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	619a      	str	r2, [r3, #24]
 8004d52:	e040      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d11b      	bne.n	8004d92 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f000 fd89 	bl	8005880 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 020c 	bic.w	r2, r2, #12
 8004d7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69d9      	ldr	r1, [r3, #28]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	61da      	str	r2, [r3, #28]
 8004d90:	e021      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d11c      	bne.n	8004dd2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f000 fda6 	bl	80058f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69d9      	ldr	r1, [r3, #28]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]
 8004dd0:	e001      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0ae      	b.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	f200 809f 	bhi.w	8004f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004f55 	.word	0x08004f55
 8004e24:	08004f55 	.word	0x08004f55
 8004e28:	08004f55 	.word	0x08004f55
 8004e2c:	08004e91 	.word	0x08004e91
 8004e30:	08004f55 	.word	0x08004f55
 8004e34:	08004f55 	.word	0x08004f55
 8004e38:	08004f55 	.word	0x08004f55
 8004e3c:	08004ed3 	.word	0x08004ed3
 8004e40:	08004f55 	.word	0x08004f55
 8004e44:	08004f55 	.word	0x08004f55
 8004e48:	08004f55 	.word	0x08004f55
 8004e4c:	08004f13 	.word	0x08004f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa52 	bl	8005300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	619a      	str	r2, [r3, #24]
      break;
 8004e8e:	e064      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 faa2 	bl	80053e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	619a      	str	r2, [r3, #24]
      break;
 8004ed0:	e043      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 faf7 	bl	80054cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0208 	orr.w	r2, r2, #8
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0204 	bic.w	r2, r2, #4
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	61da      	str	r2, [r3, #28]
      break;
 8004f10:	e023      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fb4b 	bl	80055b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	021a      	lsls	r2, r3, #8
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	61da      	str	r2, [r3, #28]
      break;
 8004f52:	e002      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_ConfigClockSource+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e0b4      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x186>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d03e      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0xd4>
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	f200 8087 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	f000 8086 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x172>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d87f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b70      	cmp	r3, #112	; 0x70
 8004fda:	d01a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xa6>
 8004fdc:	2b70      	cmp	r3, #112	; 0x70
 8004fde:	d87b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d050      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x11a>
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d877      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b50      	cmp	r3, #80	; 0x50
 8004fea:	d03c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xfa>
 8004fec:	2b50      	cmp	r3, #80	; 0x50
 8004fee:	d873      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d058      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d86f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d064      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d86b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d060      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d867      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d05a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	e062      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f000 fcc1 	bl	80059a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	609a      	str	r2, [r3, #8]
      break;
 800503e:	e04f      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f000 fcaa 	bl	80059a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e03c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fb68 	bl	8005748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2150      	movs	r1, #80	; 0x50
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fc77 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 8005084:	e02c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fbc4 	bl	8005820 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	; 0x60
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fc67 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e01c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 fb48 	bl	8005748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fc57 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 fc4e 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d831      	bhi.n	8005174 <HAL_TIM_ReadCapturedValue+0x78>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800514d 	.word	0x0800514d
 800511c:	08005175 	.word	0x08005175
 8005120:	08005175 	.word	0x08005175
 8005124:	08005175 	.word	0x08005175
 8005128:	08005157 	.word	0x08005157
 800512c:	08005175 	.word	0x08005175
 8005130:	08005175 	.word	0x08005175
 8005134:	08005175 	.word	0x08005175
 8005138:	08005161 	.word	0x08005161
 800513c:	08005175 	.word	0x08005175
 8005140:	08005175 	.word	0x08005175
 8005144:	08005175 	.word	0x08005175
 8005148:	0800516b 	.word	0x0800516b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	60fb      	str	r3, [r7, #12]

      break;
 8005154:	e00f      	b.n	8005176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	60fb      	str	r3, [r7, #12]

      break;
 800515e:	e00a      	b.n	8005176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	60fb      	str	r3, [r7, #12]

      break;
 8005168:	e005      	b.n	8005176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	60fb      	str	r3, [r7, #12]

      break;
 8005172:	e000      	b.n	8005176 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005174:	bf00      	nop
  }

  return tmpreg;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a40      	ldr	r2, [pc, #256]	; (80052d4 <TIM_Base_SetConfig+0x114>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3d      	ldr	r2, [pc, #244]	; (80052d8 <TIM_Base_SetConfig+0x118>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <TIM_Base_SetConfig+0x11c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3b      	ldr	r2, [pc, #236]	; (80052e0 <TIM_Base_SetConfig+0x120>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3a      	ldr	r2, [pc, #232]	; (80052e4 <TIM_Base_SetConfig+0x124>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <TIM_Base_SetConfig+0x114>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d02b      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005220:	d027      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <TIM_Base_SetConfig+0x118>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d023      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2b      	ldr	r2, [pc, #172]	; (80052dc <TIM_Base_SetConfig+0x11c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01f      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <TIM_Base_SetConfig+0x120>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01b      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <TIM_Base_SetConfig+0x124>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d017      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <TIM_Base_SetConfig+0x128>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a27      	ldr	r2, [pc, #156]	; (80052ec <TIM_Base_SetConfig+0x12c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <TIM_Base_SetConfig+0x130>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <TIM_Base_SetConfig+0x134>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <TIM_Base_SetConfig+0x138>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a23      	ldr	r2, [pc, #140]	; (80052fc <TIM_Base_SetConfig+0x13c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <TIM_Base_SetConfig+0x114>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0xf8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0c      	ldr	r2, [pc, #48]	; (80052e4 <TIM_Base_SetConfig+0x124>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d103      	bne.n	80052c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	615a      	str	r2, [r3, #20]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800
 80052f4:	40001800 	.word	0x40001800
 80052f8:	40001c00 	.word	0x40001c00
 80052fc:	40002000 	.word	0x40002000

08005300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 0302 	bic.w	r3, r3, #2
 8005348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <TIM_OC1_SetConfig+0xd8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC1_SetConfig+0x64>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <TIM_OC1_SetConfig+0xdc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10c      	bne.n	800537e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0308 	bic.w	r3, r3, #8
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 0304 	bic.w	r3, r3, #4
 800537c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <TIM_OC1_SetConfig+0xd8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC1_SetConfig+0x8e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a14      	ldr	r2, [pc, #80]	; (80053dc <TIM_OC1_SetConfig+0xdc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d111      	bne.n	80053b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800539c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400

080053e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0320 	bic.w	r3, r3, #32
 800542a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <TIM_OC2_SetConfig+0xe4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC2_SetConfig+0x68>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a21      	ldr	r2, [pc, #132]	; (80054c8 <TIM_OC2_SetConfig+0xe8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10d      	bne.n	8005464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <TIM_OC2_SetConfig+0xe4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC2_SetConfig+0x94>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <TIM_OC2_SetConfig+0xe8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d113      	bne.n	800549c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a21      	ldr	r2, [pc, #132]	; (80055ac <TIM_OC3_SetConfig+0xe0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC3_SetConfig+0x66>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <TIM_OC3_SetConfig+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d10d      	bne.n	800554e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a16      	ldr	r2, [pc, #88]	; (80055ac <TIM_OC3_SetConfig+0xe0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_OC3_SetConfig+0x92>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <TIM_OC3_SetConfig+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d113      	bne.n	8005586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40010400 	.word	0x40010400

080055b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <TIM_OC4_SetConfig+0xa4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_OC4_SetConfig+0x68>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a11      	ldr	r2, [pc, #68]	; (800565c <TIM_OC4_SetConfig+0xa8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d109      	bne.n	8005630 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40010400 	.word	0x40010400

08005660 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <TIM_TI1_SetConfig+0xcc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01b      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d017      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a25      	ldr	r2, [pc, #148]	; (8005730 <TIM_TI1_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a24      	ldr	r2, [pc, #144]	; (8005734 <TIM_TI1_SetConfig+0xd4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a23      	ldr	r2, [pc, #140]	; (8005738 <TIM_TI1_SetConfig+0xd8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <TIM_TI1_SetConfig+0xdc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a21      	ldr	r2, [pc, #132]	; (8005740 <TIM_TI1_SetConfig+0xe0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_TI1_SetConfig+0x66>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a20      	ldr	r2, [pc, #128]	; (8005744 <TIM_TI1_SetConfig+0xe4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <TIM_TI1_SetConfig+0x6a>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <TIM_TI1_SetConfig+0x6c>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e003      	b.n	80056ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 030a 	bic.w	r3, r3, #10
 8005704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f003 030a 	and.w	r3, r3, #10
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40001800 	.word	0x40001800

08005748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 030a 	bic.w	r3, r3, #10
 8005784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f023 0210 	bic.w	r2, r3, #16
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	031b      	lsls	r3, r3, #12
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0210 	bic.w	r2, r3, #16
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800584a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	031b      	lsls	r3, r3, #12
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0303 	bic.w	r3, r3, #3
 80058ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005936:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	031b      	lsls	r3, r3, #12
 800593c:	b29b      	uxth	r3, r3
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800594a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	031b      	lsls	r3, r3, #12
 8005950:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	f043 0307 	orr.w	r3, r3, #7
 8005994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2201      	movs	r2, #1
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e05a      	b.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d022      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a98:	d01d      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d018      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10c      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40001800 	.word	0x40001800

08005b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e03f      	b.n	8005be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb fdf2 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fddf 	bl	800675c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695a      	ldr	r2, [r3, #20]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b08a      	sub	sp, #40	; 0x28
 8005bf2:	af02      	add	r7, sp, #8
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d17c      	bne.n	8005d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_UART_Transmit+0x2c>
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e075      	b.n	8005d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_UART_Transmit+0x3e>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e06e      	b.n	8005d0a <HAL_UART_Transmit+0x11c>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2221      	movs	r2, #33	; 0x21
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c42:	f7fc f8e7 	bl	8001e14 <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5c:	d108      	bne.n	8005c70 <HAL_UART_Transmit+0x82>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e003      	b.n	8005c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c80:	e02a      	b.n	8005cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fb1f 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e036      	b.n	8005d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e007      	b.n	8005cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	781a      	ldrb	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1cf      	bne.n	8005c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2140      	movs	r1, #64	; 0x40
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 faef 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e006      	b.n	8005d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d11d      	bne.n	8005d68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Receive_IT+0x26>
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e016      	b.n	8005d6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_UART_Receive_IT+0x38>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e00f      	b.n	8005d6a <HAL_UART_Receive_IT+0x58>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fb24 	bl	80063ac <UART_Start_Receive_IT>
 8005d64:	4603      	mov	r3, r0
 8005d66:	e000      	b.n	8005d6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b0ba      	sub	sp, #232	; 0xe8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10f      	bne.n	8005dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_UART_IRQHandler+0x66>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fc07 	bl	80065e6 <UART_Receive_IT>
      return;
 8005dd8:	e256      	b.n	8006288 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80de 	beq.w	8005fa0 <HAL_UART_IRQHandler+0x22c>
 8005de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80d1 	beq.w	8005fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_UART_IRQHandler+0xae>
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_UART_IRQHandler+0xd2>
 8005e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_UART_IRQHandler+0xf6>
 8005e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f043 0204 	orr.w	r2, r3, #4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d011      	beq.n	8005e9a <HAL_UART_IRQHandler+0x126>
 8005e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0208 	orr.w	r2, r3, #8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 81ed 	beq.w	800627e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x14e>
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb92 	bl	80065e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2300      	movne	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <HAL_UART_IRQHandler+0x17a>
 8005ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d04f      	beq.n	8005f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa9a 	bl	8006428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d141      	bne.n	8005f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3314      	adds	r3, #20
 8005f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1d9      	bne.n	8005f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d013      	beq.n	8005f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	4a7d      	ldr	r2, [pc, #500]	; (8006150 <HAL_UART_IRQHandler+0x3dc>)
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fc f907 	bl	8002176 <HAL_DMA_Abort_IT>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	e00e      	b.n	8005f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f990 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	e00a      	b.n	8005f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f98c 	bl	80062a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	e006      	b.n	8005f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f988 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f9a:	e170      	b.n	800627e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	bf00      	nop
    return;
 8005f9e:	e16e      	b.n	800627e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	f040 814a 	bne.w	800623e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8143 	beq.w	800623e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 813c 	beq.w	800623e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	f040 80b4 	bne.w	8006154 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8140 	beq.w	8006282 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800600a:	429a      	cmp	r2, r3
 800600c:	f080 8139 	bcs.w	8006282 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006016:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006022:	f000 8088 	beq.w	8006136 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	330c      	adds	r3, #12
 800602c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800603c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800605e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800606a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1d9      	bne.n	8006026 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3314      	adds	r3, #20
 8006092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006096:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800609a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800609e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e1      	bne.n	8006072 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e3      	bne.n	80060ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006106:	f023 0310 	bic.w	r3, r3, #16
 800610a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006118:	65ba      	str	r2, [r7, #88]	; 0x58
 800611a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800611e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e3      	bne.n	80060f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	4618      	mov	r0, r3
 8006132:	f7fb ffb0 	bl	8002096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613e:	b29b      	uxth	r3, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	b29b      	uxth	r3, r3
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8b6 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800614c:	e099      	b.n	8006282 <HAL_UART_IRQHandler+0x50e>
 800614e:	bf00      	nop
 8006150:	080064ef 	.word	0x080064ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800615c:	b29b      	uxth	r3, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 808b 	beq.w	8006286 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8086 	beq.w	8006286 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800619e:	647a      	str	r2, [r7, #68]	; 0x44
 80061a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e3      	bne.n	800617a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	623b      	str	r3, [r7, #32]
   return(result);
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061d6:	633a      	str	r2, [r7, #48]	; 0x30
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e3      	bne.n	80061b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	60fb      	str	r3, [r7, #12]
   return(result);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0310 	bic.w	r3, r3, #16
 800620e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800621c:	61fa      	str	r2, [r7, #28]
 800621e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	69b9      	ldr	r1, [r7, #24]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	617b      	str	r3, [r7, #20]
   return(result);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e3      	bne.n	80061f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f83e 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800623c:	e023      	b.n	8006286 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <HAL_UART_IRQHandler+0x4ea>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f95d 	bl	8006516 <UART_Transmit_IT>
    return;
 800625c:	e014      	b.n	8006288 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00e      	beq.n	8006288 <HAL_UART_IRQHandler+0x514>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f99d 	bl	80065b6 <UART_EndTransmit_IT>
    return;
 800627c:	e004      	b.n	8006288 <HAL_UART_IRQHandler+0x514>
    return;
 800627e:	bf00      	nop
 8006280:	e002      	b.n	8006288 <HAL_UART_IRQHandler+0x514>
      return;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <HAL_UART_IRQHandler+0x514>
      return;
 8006286:	bf00      	nop
  }
}
 8006288:	37e8      	adds	r7, #232	; 0xe8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop

08006290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b090      	sub	sp, #64	; 0x40
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	e050      	b.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d04c      	beq.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
 80062f0:	f7fb fd90 	bl	8001e14 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d241      	bcs.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006320:	637a      	str	r2, [r7, #52]	; 0x34
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e5      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	613b      	str	r3, [r7, #16]
   return(result);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006354:	623a      	str	r2, [r7, #32]
 8006356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	61bb      	str	r3, [r7, #24]
   return(result);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e00f      	b.n	80063a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4013      	ands	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d09f      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3740      	adds	r7, #64	; 0x40
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2222      	movs	r2, #34	; 0x22
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0220 	orr.w	r2, r2, #32
 8006418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b095      	sub	sp, #84	; 0x54
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006450:	643a      	str	r2, [r7, #64]	; 0x40
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3314      	adds	r3, #20
 800646a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	61fb      	str	r3, [r7, #28]
   return(result);
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	64bb      	str	r3, [r7, #72]	; 0x48
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006484:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e5      	bne.n	8006464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d119      	bne.n	80064d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	647b      	str	r3, [r7, #68]	; 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064c0:	61ba      	str	r2, [r7, #24]
 80064c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6979      	ldr	r1, [r7, #20]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	613b      	str	r3, [r7, #16]
   return(result);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064e2:	bf00      	nop
 80064e4:	3754      	adds	r7, #84	; 0x54
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff fecb 	bl	80062a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b21      	cmp	r3, #33	; 0x21
 8006528:	d13e      	bne.n	80065a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006532:	d114      	bne.n	800655e <UART_Transmit_IT+0x48>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d110      	bne.n	800655e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006550:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	1c9a      	adds	r2, r3, #2
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	621a      	str	r2, [r3, #32]
 800655c:	e008      	b.n	8006570 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6211      	str	r1, [r2, #32]
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29b      	uxth	r3, r3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4619      	mov	r1, r3
 800657e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10f      	bne.n	80065a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006592:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	e000      	b.n	80065aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065a8:	2302      	movs	r3, #2
  }
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fe5a 	bl	8006290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b08c      	sub	sp, #48	; 0x30
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b22      	cmp	r3, #34	; 0x22
 80065f8:	f040 80ab 	bne.w	8006752 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	d117      	bne.n	8006636 <UART_Receive_IT+0x50>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d113      	bne.n	8006636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	b29a      	uxth	r2, r3
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	1c9a      	adds	r2, r3, #2
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	629a      	str	r2, [r3, #40]	; 0x28
 8006634:	e026      	b.n	8006684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006648:	d007      	beq.n	800665a <UART_Receive_IT+0x74>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <UART_Receive_IT+0x82>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e008      	b.n	800667a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006674:	b2da      	uxtb	r2, r3
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29b      	uxth	r3, r3
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4619      	mov	r1, r3
 8006692:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006694:	2b00      	cmp	r3, #0
 8006696:	d15a      	bne.n	800674e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0220 	bic.w	r2, r2, #32
 80066a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d135      	bne.n	8006744 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	613b      	str	r3, [r7, #16]
   return(result);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f023 0310 	bic.w	r3, r3, #16
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fe:	623a      	str	r2, [r7, #32]
 8006700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	69f9      	ldr	r1, [r7, #28]
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	61bb      	str	r3, [r7, #24]
   return(result);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e5      	bne.n	80066de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b10      	cmp	r3, #16
 800671e:	d10a      	bne.n	8006736 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fdbb 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
 8006742:	e002      	b.n	800674a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fb fa1d 	bl	8001b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	e002      	b.n	8006754 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	e000      	b.n	8006754 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006752:	2302      	movs	r3, #2
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3730      	adds	r7, #48	; 0x30
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800675c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006760:	b0c0      	sub	sp, #256	; 0x100
 8006762:	af00      	add	r7, sp, #0
 8006764:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	68d9      	ldr	r1, [r3, #12]
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	ea40 0301 	orr.w	r3, r0, r1
 8006784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	431a      	orrs	r2, r3
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	431a      	orrs	r2, r3
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067b4:	f021 010c 	bic.w	r1, r1, #12
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067c2:	430b      	orrs	r3, r1
 80067c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	6999      	ldr	r1, [r3, #24]
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	ea40 0301 	orr.w	r3, r0, r1
 80067e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b8f      	ldr	r3, [pc, #572]	; (8006a28 <UART_SetConfig+0x2cc>)
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d005      	beq.n	80067fc <UART_SetConfig+0xa0>
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b8d      	ldr	r3, [pc, #564]	; (8006a2c <UART_SetConfig+0x2d0>)
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d104      	bne.n	8006806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067fc:	f7fd fc66 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 8006800:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006804:	e003      	b.n	800680e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006806:	f7fd fc4d 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 800680a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006818:	f040 810c 	bne.w	8006a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800681c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006820:	2200      	movs	r2, #0
 8006822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006826:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800682a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800682e:	4622      	mov	r2, r4
 8006830:	462b      	mov	r3, r5
 8006832:	1891      	adds	r1, r2, r2
 8006834:	65b9      	str	r1, [r7, #88]	; 0x58
 8006836:	415b      	adcs	r3, r3
 8006838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800683a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800683e:	4621      	mov	r1, r4
 8006840:	eb12 0801 	adds.w	r8, r2, r1
 8006844:	4629      	mov	r1, r5
 8006846:	eb43 0901 	adc.w	r9, r3, r1
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800685a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800685e:	4690      	mov	r8, r2
 8006860:	4699      	mov	r9, r3
 8006862:	4623      	mov	r3, r4
 8006864:	eb18 0303 	adds.w	r3, r8, r3
 8006868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800686c:	462b      	mov	r3, r5
 800686e:	eb49 0303 	adc.w	r3, r9, r3
 8006872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800688a:	460b      	mov	r3, r1
 800688c:	18db      	adds	r3, r3, r3
 800688e:	653b      	str	r3, [r7, #80]	; 0x50
 8006890:	4613      	mov	r3, r2
 8006892:	eb42 0303 	adc.w	r3, r2, r3
 8006896:	657b      	str	r3, [r7, #84]	; 0x54
 8006898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800689c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068a0:	f7f9 fca4 	bl	80001ec <__aeabi_uldivmod>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4b61      	ldr	r3, [pc, #388]	; (8006a30 <UART_SetConfig+0x2d4>)
 80068aa:	fba3 2302 	umull	r2, r3, r3, r2
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	011c      	lsls	r4, r3, #4
 80068b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068c4:	4642      	mov	r2, r8
 80068c6:	464b      	mov	r3, r9
 80068c8:	1891      	adds	r1, r2, r2
 80068ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80068cc:	415b      	adcs	r3, r3
 80068ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068d4:	4641      	mov	r1, r8
 80068d6:	eb12 0a01 	adds.w	sl, r2, r1
 80068da:	4649      	mov	r1, r9
 80068dc:	eb43 0b01 	adc.w	fp, r3, r1
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f4:	4692      	mov	sl, r2
 80068f6:	469b      	mov	fp, r3
 80068f8:	4643      	mov	r3, r8
 80068fa:	eb1a 0303 	adds.w	r3, sl, r3
 80068fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006902:	464b      	mov	r3, r9
 8006904:	eb4b 0303 	adc.w	r3, fp, r3
 8006908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006918:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800691c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006920:	460b      	mov	r3, r1
 8006922:	18db      	adds	r3, r3, r3
 8006924:	643b      	str	r3, [r7, #64]	; 0x40
 8006926:	4613      	mov	r3, r2
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	647b      	str	r3, [r7, #68]	; 0x44
 800692e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006936:	f7f9 fc59 	bl	80001ec <__aeabi_uldivmod>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4611      	mov	r1, r2
 8006940:	4b3b      	ldr	r3, [pc, #236]	; (8006a30 <UART_SetConfig+0x2d4>)
 8006942:	fba3 2301 	umull	r2, r3, r3, r1
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2264      	movs	r2, #100	; 0x64
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	1acb      	subs	r3, r1, r3
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006956:	4b36      	ldr	r3, [pc, #216]	; (8006a30 <UART_SetConfig+0x2d4>)
 8006958:	fba3 2302 	umull	r2, r3, r3, r2
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006964:	441c      	add	r4, r3
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696a:	2200      	movs	r2, #0
 800696c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006970:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	1891      	adds	r1, r2, r2
 800697e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006980:	415b      	adcs	r3, r3
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006988:	4641      	mov	r1, r8
 800698a:	1851      	adds	r1, r2, r1
 800698c:	6339      	str	r1, [r7, #48]	; 0x30
 800698e:	4649      	mov	r1, r9
 8006990:	414b      	adcs	r3, r1
 8006992:	637b      	str	r3, [r7, #52]	; 0x34
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069a0:	4659      	mov	r1, fp
 80069a2:	00cb      	lsls	r3, r1, #3
 80069a4:	4651      	mov	r1, sl
 80069a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069aa:	4651      	mov	r1, sl
 80069ac:	00ca      	lsls	r2, r1, #3
 80069ae:	4610      	mov	r0, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	4642      	mov	r2, r8
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069bc:	464b      	mov	r3, r9
 80069be:	460a      	mov	r2, r1
 80069c0:	eb42 0303 	adc.w	r3, r2, r3
 80069c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069dc:	460b      	mov	r3, r1
 80069de:	18db      	adds	r3, r3, r3
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	4613      	mov	r3, r2
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069f2:	f7f9 fbfb 	bl	80001ec <__aeabi_uldivmod>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <UART_SetConfig+0x2d4>)
 80069fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	2164      	movs	r1, #100	; 0x64
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	3332      	adds	r3, #50	; 0x32
 8006a0e:	4a08      	ldr	r2, [pc, #32]	; (8006a30 <UART_SetConfig+0x2d4>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	f003 0207 	and.w	r2, r3, #7
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4422      	add	r2, r4
 8006a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a24:	e105      	b.n	8006c32 <UART_SetConfig+0x4d6>
 8006a26:	bf00      	nop
 8006a28:	40011000 	.word	0x40011000
 8006a2c:	40011400 	.word	0x40011400
 8006a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a46:	4642      	mov	r2, r8
 8006a48:	464b      	mov	r3, r9
 8006a4a:	1891      	adds	r1, r2, r2
 8006a4c:	6239      	str	r1, [r7, #32]
 8006a4e:	415b      	adcs	r3, r3
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a56:	4641      	mov	r1, r8
 8006a58:	1854      	adds	r4, r2, r1
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	eb43 0501 	adc.w	r5, r3, r1
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	00eb      	lsls	r3, r5, #3
 8006a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a6e:	00e2      	lsls	r2, r4, #3
 8006a70:	4614      	mov	r4, r2
 8006a72:	461d      	mov	r5, r3
 8006a74:	4643      	mov	r3, r8
 8006a76:	18e3      	adds	r3, r4, r3
 8006a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	eb45 0303 	adc.w	r3, r5, r3
 8006a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	008b      	lsls	r3, r1, #2
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aac:	4621      	mov	r1, r4
 8006aae:	008a      	lsls	r2, r1, #2
 8006ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ab4:	f7f9 fb9a 	bl	80001ec <__aeabi_uldivmod>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4b60      	ldr	r3, [pc, #384]	; (8006c40 <UART_SetConfig+0x4e4>)
 8006abe:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	011c      	lsls	r4, r3, #4
 8006ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ad0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	1891      	adds	r1, r2, r2
 8006ade:	61b9      	str	r1, [r7, #24]
 8006ae0:	415b      	adcs	r3, r3
 8006ae2:	61fb      	str	r3, [r7, #28]
 8006ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae8:	4641      	mov	r1, r8
 8006aea:	1851      	adds	r1, r2, r1
 8006aec:	6139      	str	r1, [r7, #16]
 8006aee:	4649      	mov	r1, r9
 8006af0:	414b      	adcs	r3, r1
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b00:	4659      	mov	r1, fp
 8006b02:	00cb      	lsls	r3, r1, #3
 8006b04:	4651      	mov	r1, sl
 8006b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b0a:	4651      	mov	r1, sl
 8006b0c:	00ca      	lsls	r2, r1, #3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	4642      	mov	r2, r8
 8006b16:	189b      	adds	r3, r3, r2
 8006b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	460a      	mov	r2, r1
 8006b20:	eb42 0303 	adc.w	r3, r2, r3
 8006b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b40:	4649      	mov	r1, r9
 8006b42:	008b      	lsls	r3, r1, #2
 8006b44:	4641      	mov	r1, r8
 8006b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b4a:	4641      	mov	r1, r8
 8006b4c:	008a      	lsls	r2, r1, #2
 8006b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b52:	f7f9 fb4b 	bl	80001ec <__aeabi_uldivmod>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <UART_SetConfig+0x4e4>)
 8006b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	2164      	movs	r1, #100	; 0x64
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	3332      	adds	r3, #50	; 0x32
 8006b6e:	4a34      	ldr	r2, [pc, #208]	; (8006c40 <UART_SetConfig+0x4e4>)
 8006b70:	fba2 2303 	umull	r2, r3, r2, r3
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b7a:	441c      	add	r4, r3
 8006b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b80:	2200      	movs	r2, #0
 8006b82:	673b      	str	r3, [r7, #112]	; 0x70
 8006b84:	677a      	str	r2, [r7, #116]	; 0x74
 8006b86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	1891      	adds	r1, r2, r2
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	415b      	adcs	r3, r3
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	1851      	adds	r1, r2, r1
 8006b9e:	6039      	str	r1, [r7, #0]
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	414b      	adcs	r3, r1
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	00cb      	lsls	r3, r1, #3
 8006bb6:	4651      	mov	r1, sl
 8006bb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bbc:	4651      	mov	r1, sl
 8006bbe:	00ca      	lsls	r2, r1, #3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bcc:	464b      	mov	r3, r9
 8006bce:	460a      	mov	r2, r1
 8006bd0:	eb42 0303 	adc.w	r3, r2, r3
 8006bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	663b      	str	r3, [r7, #96]	; 0x60
 8006be0:	667a      	str	r2, [r7, #100]	; 0x64
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bee:	4649      	mov	r1, r9
 8006bf0:	008b      	lsls	r3, r1, #2
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	008a      	lsls	r2, r1, #2
 8006bfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c00:	f7f9 faf4 	bl	80001ec <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <UART_SetConfig+0x4e4>)
 8006c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2164      	movs	r1, #100	; 0x64
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	3332      	adds	r3, #50	; 0x32
 8006c1c:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <UART_SetConfig+0x4e4>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4422      	add	r2, r4
 8006c30:	609a      	str	r2, [r3, #8]
}
 8006c32:	bf00      	nop
 8006c34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3e:	bf00      	nop
 8006c40:	51eb851f 	.word	0x51eb851f

08006c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c44:	b084      	sub	sp, #16
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	f107 001c 	add.w	r0, r7, #28
 8006c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d122      	bne.n	8006ca2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 faa2 	bl	80071e0 <USB_CoreReset>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	e01a      	b.n	8006cd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa96 	bl	80071e0 <USB_CoreReset>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cca:	e005      	b.n	8006cd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10b      	bne.n	8006cf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f043 0206 	orr.w	r2, r3, #6
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d02:	b004      	add	sp, #16
 8006d04:	4770      	bx	lr

08006d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d115      	bne.n	8006d76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d56:	2001      	movs	r0, #1
 8006d58:	f7fb f868 	bl	8001e2c <HAL_Delay>
      ms++;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa2e 	bl	80071c4 <USB_GetMode>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d01e      	beq.n	8006dac <USB_SetCurrentMode+0x84>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b31      	cmp	r3, #49	; 0x31
 8006d72:	d9f0      	bls.n	8006d56 <USB_SetCurrentMode+0x2e>
 8006d74:	e01a      	b.n	8006dac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d115      	bne.n	8006da8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f7fb f84f 	bl	8001e2c <HAL_Delay>
      ms++;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fa15 	bl	80071c4 <USB_GetMode>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <USB_SetCurrentMode+0x84>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b31      	cmp	r3, #49	; 0x31
 8006da4:	d9f0      	bls.n	8006d88 <USB_SetCurrentMode+0x60>
 8006da6:	e001      	b.n	8006dac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e005      	b.n	8006db8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b32      	cmp	r3, #50	; 0x32
 8006db0:	d101      	bne.n	8006db6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	e009      	b.n	8006df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	3340      	adds	r3, #64	; 0x40
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	2200      	movs	r2, #0
 8006dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3301      	adds	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b0e      	cmp	r3, #14
 8006df8:	d9f2      	bls.n	8006de0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11c      	bne.n	8006e3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e0e:	f043 0302 	orr.w	r3, r3, #2
 8006e12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
 8006e38:	e00b      	b.n	8006e52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e64:	4619      	mov	r1, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	680b      	ldr	r3, [r1, #0]
 8006e70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d10c      	bne.n	8006e92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e7e:	2100      	movs	r1, #0
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f965 	bl	8007150 <USB_SetDevSpeed>
 8006e86:	e008      	b.n	8006e9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e88:	2101      	movs	r1, #1
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f960 	bl	8007150 <USB_SetDevSpeed>
 8006e90:	e003      	b.n	8006e9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e92:	2103      	movs	r1, #3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f95b 	bl	8007150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8f3 	bl	8007088 <USB_FlushTxFifo>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f91f 	bl	80070f0 <USB_FlushRxFifo>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	461a      	mov	r2, r3
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	461a      	mov	r2, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	e043      	b.n	8006f6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efc:	d118      	bne.n	8006f30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	461a      	mov	r2, r3
 8006f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e013      	b.n	8006f42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	461a      	mov	r2, r3
 8006f28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e008      	b.n	8006f42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f60:	461a      	mov	r2, r3
 8006f62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d3b7      	bcc.n	8006ee6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	e043      	b.n	8007004 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f92:	d118      	bne.n	8006fc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e013      	b.n	8006fd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	e008      	b.n	8006fd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	3301      	adds	r3, #1
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d3b7      	bcc.n	8006f7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800701a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800701e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800702c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f043 0210 	orr.w	r2, r3, #16
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <USB_DevInit+0x2c4>)
 8007046:	4313      	orrs	r3, r2
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f043 0208 	orr.w	r2, r3, #8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800705e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d107      	bne.n	8007074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800706c:	f043 0304 	orr.w	r3, r3, #4
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007080:	b004      	add	sp, #16
 8007082:	4770      	bx	lr
 8007084:	803c3800 	.word	0x803c3800

08007088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a13      	ldr	r2, [pc, #76]	; (80070ec <USB_FlushTxFifo+0x64>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d901      	bls.n	80070a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e01b      	b.n	80070e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	daf2      	bge.n	8007096 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	019b      	lsls	r3, r3, #6
 80070b8:	f043 0220 	orr.w	r2, r3, #32
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a08      	ldr	r2, [pc, #32]	; (80070ec <USB_FlushTxFifo+0x64>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e006      	b.n	80070e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d0f0      	beq.n	80070c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	00030d40 	.word	0x00030d40

080070f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4a11      	ldr	r2, [pc, #68]	; (800714c <USB_FlushRxFifo+0x5c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d901      	bls.n	800710e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e018      	b.n	8007140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	daf2      	bge.n	80070fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2210      	movs	r2, #16
 800711e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <USB_FlushRxFifo+0x5c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e006      	b.n	8007140 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	2b10      	cmp	r3, #16
 800713c:	d0f0      	beq.n	8007120 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	00030d40 	.word	0x00030d40

08007150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007170:	4313      	orrs	r3, r2
 8007172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f003 0301 	and.w	r3, r3, #1
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a13      	ldr	r2, [pc, #76]	; (8007244 <USB_CoreReset+0x64>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e01b      	b.n	8007236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	daf2      	bge.n	80071ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f043 0201 	orr.w	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a09      	ldr	r2, [pc, #36]	; (8007244 <USB_CoreReset+0x64>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d901      	bls.n	8007228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e006      	b.n	8007236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b01      	cmp	r3, #1
 8007232:	d0f0      	beq.n	8007216 <USB_CoreReset+0x36>

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	00030d40 	.word	0x00030d40

08007248 <__errno>:
 8007248:	4b01      	ldr	r3, [pc, #4]	; (8007250 <__errno+0x8>)
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000010 	.word	0x20000010

08007254 <__libc_init_array>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	4d0d      	ldr	r5, [pc, #52]	; (800728c <__libc_init_array+0x38>)
 8007258:	4c0d      	ldr	r4, [pc, #52]	; (8007290 <__libc_init_array+0x3c>)
 800725a:	1b64      	subs	r4, r4, r5
 800725c:	10a4      	asrs	r4, r4, #2
 800725e:	2600      	movs	r6, #0
 8007260:	42a6      	cmp	r6, r4
 8007262:	d109      	bne.n	8007278 <__libc_init_array+0x24>
 8007264:	4d0b      	ldr	r5, [pc, #44]	; (8007294 <__libc_init_array+0x40>)
 8007266:	4c0c      	ldr	r4, [pc, #48]	; (8007298 <__libc_init_array+0x44>)
 8007268:	f000 fd1e 	bl	8007ca8 <_init>
 800726c:	1b64      	subs	r4, r4, r5
 800726e:	10a4      	asrs	r4, r4, #2
 8007270:	2600      	movs	r6, #0
 8007272:	42a6      	cmp	r6, r4
 8007274:	d105      	bne.n	8007282 <__libc_init_array+0x2e>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	f855 3b04 	ldr.w	r3, [r5], #4
 800727c:	4798      	blx	r3
 800727e:	3601      	adds	r6, #1
 8007280:	e7ee      	b.n	8007260 <__libc_init_array+0xc>
 8007282:	f855 3b04 	ldr.w	r3, [r5], #4
 8007286:	4798      	blx	r3
 8007288:	3601      	adds	r6, #1
 800728a:	e7f2      	b.n	8007272 <__libc_init_array+0x1e>
 800728c:	08007dec 	.word	0x08007dec
 8007290:	08007dec 	.word	0x08007dec
 8007294:	08007dec 	.word	0x08007dec
 8007298:	08007df0 	.word	0x08007df0

0800729c <memset>:
 800729c:	4402      	add	r2, r0
 800729e:	4603      	mov	r3, r0
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d100      	bne.n	80072a6 <memset+0xa>
 80072a4:	4770      	bx	lr
 80072a6:	f803 1b01 	strb.w	r1, [r3], #1
 80072aa:	e7f9      	b.n	80072a0 <memset+0x4>

080072ac <_puts_r>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	4605      	mov	r5, r0
 80072b2:	b118      	cbz	r0, 80072bc <_puts_r+0x10>
 80072b4:	6983      	ldr	r3, [r0, #24]
 80072b6:	b90b      	cbnz	r3, 80072bc <_puts_r+0x10>
 80072b8:	f000 fa48 	bl	800774c <__sinit>
 80072bc:	69ab      	ldr	r3, [r5, #24]
 80072be:	68ac      	ldr	r4, [r5, #8]
 80072c0:	b913      	cbnz	r3, 80072c8 <_puts_r+0x1c>
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fa42 	bl	800774c <__sinit>
 80072c8:	4b2c      	ldr	r3, [pc, #176]	; (800737c <_puts_r+0xd0>)
 80072ca:	429c      	cmp	r4, r3
 80072cc:	d120      	bne.n	8007310 <_puts_r+0x64>
 80072ce:	686c      	ldr	r4, [r5, #4]
 80072d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072d2:	07db      	lsls	r3, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_puts_r+0x36>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	0598      	lsls	r0, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_puts_r+0x36>
 80072dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072de:	f000 fad3 	bl	8007888 <__retarget_lock_acquire_recursive>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	0719      	lsls	r1, r3, #28
 80072e6:	d51d      	bpl.n	8007324 <_puts_r+0x78>
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	b1db      	cbz	r3, 8007324 <_puts_r+0x78>
 80072ec:	3e01      	subs	r6, #1
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072f4:	3b01      	subs	r3, #1
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	bb39      	cbnz	r1, 800734a <_puts_r+0x9e>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da38      	bge.n	8007370 <_puts_r+0xc4>
 80072fe:	4622      	mov	r2, r4
 8007300:	210a      	movs	r1, #10
 8007302:	4628      	mov	r0, r5
 8007304:	f000 f848 	bl	8007398 <__swbuf_r>
 8007308:	3001      	adds	r0, #1
 800730a:	d011      	beq.n	8007330 <_puts_r+0x84>
 800730c:	250a      	movs	r5, #10
 800730e:	e011      	b.n	8007334 <_puts_r+0x88>
 8007310:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <_puts_r+0xd4>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <_puts_r+0x6e>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7da      	b.n	80072d0 <_puts_r+0x24>
 800731a:	4b1a      	ldr	r3, [pc, #104]	; (8007384 <_puts_r+0xd8>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7d5      	b.n	80072d0 <_puts_r+0x24>
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f888 	bl	800743c <__swsetup_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d0dd      	beq.n	80072ec <_puts_r+0x40>
 8007330:	f04f 35ff 	mov.w	r5, #4294967295
 8007334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007336:	07da      	lsls	r2, r3, #31
 8007338:	d405      	bmi.n	8007346 <_puts_r+0x9a>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	059b      	lsls	r3, r3, #22
 800733e:	d402      	bmi.n	8007346 <_puts_r+0x9a>
 8007340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007342:	f000 faa2 	bl	800788a <__retarget_lock_release_recursive>
 8007346:	4628      	mov	r0, r5
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	2b00      	cmp	r3, #0
 800734c:	da04      	bge.n	8007358 <_puts_r+0xac>
 800734e:	69a2      	ldr	r2, [r4, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	dc06      	bgt.n	8007362 <_puts_r+0xb6>
 8007354:	290a      	cmp	r1, #10
 8007356:	d004      	beq.n	8007362 <_puts_r+0xb6>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	7019      	strb	r1, [r3, #0]
 8007360:	e7c5      	b.n	80072ee <_puts_r+0x42>
 8007362:	4622      	mov	r2, r4
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f817 	bl	8007398 <__swbuf_r>
 800736a:	3001      	adds	r0, #1
 800736c:	d1bf      	bne.n	80072ee <_puts_r+0x42>
 800736e:	e7df      	b.n	8007330 <_puts_r+0x84>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	250a      	movs	r5, #10
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	6022      	str	r2, [r4, #0]
 8007378:	701d      	strb	r5, [r3, #0]
 800737a:	e7db      	b.n	8007334 <_puts_r+0x88>
 800737c:	08007da4 	.word	0x08007da4
 8007380:	08007dc4 	.word	0x08007dc4
 8007384:	08007d84 	.word	0x08007d84

08007388 <puts>:
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <puts+0xc>)
 800738a:	4601      	mov	r1, r0
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f7ff bf8d 	b.w	80072ac <_puts_r>
 8007392:	bf00      	nop
 8007394:	20000010 	.word	0x20000010

08007398 <__swbuf_r>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	460e      	mov	r6, r1
 800739c:	4614      	mov	r4, r2
 800739e:	4605      	mov	r5, r0
 80073a0:	b118      	cbz	r0, 80073aa <__swbuf_r+0x12>
 80073a2:	6983      	ldr	r3, [r0, #24]
 80073a4:	b90b      	cbnz	r3, 80073aa <__swbuf_r+0x12>
 80073a6:	f000 f9d1 	bl	800774c <__sinit>
 80073aa:	4b21      	ldr	r3, [pc, #132]	; (8007430 <__swbuf_r+0x98>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	d12b      	bne.n	8007408 <__swbuf_r+0x70>
 80073b0:	686c      	ldr	r4, [r5, #4]
 80073b2:	69a3      	ldr	r3, [r4, #24]
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	071a      	lsls	r2, r3, #28
 80073ba:	d52f      	bpl.n	800741c <__swbuf_r+0x84>
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	b36b      	cbz	r3, 800741c <__swbuf_r+0x84>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	1ac0      	subs	r0, r0, r3
 80073c6:	6963      	ldr	r3, [r4, #20]
 80073c8:	b2f6      	uxtb	r6, r6
 80073ca:	4283      	cmp	r3, r0
 80073cc:	4637      	mov	r7, r6
 80073ce:	dc04      	bgt.n	80073da <__swbuf_r+0x42>
 80073d0:	4621      	mov	r1, r4
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 f926 	bl	8007624 <_fflush_r>
 80073d8:	bb30      	cbnz	r0, 8007428 <__swbuf_r+0x90>
 80073da:	68a3      	ldr	r3, [r4, #8]
 80073dc:	3b01      	subs	r3, #1
 80073de:	60a3      	str	r3, [r4, #8]
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	6022      	str	r2, [r4, #0]
 80073e6:	701e      	strb	r6, [r3, #0]
 80073e8:	6963      	ldr	r3, [r4, #20]
 80073ea:	3001      	adds	r0, #1
 80073ec:	4283      	cmp	r3, r0
 80073ee:	d004      	beq.n	80073fa <__swbuf_r+0x62>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	07db      	lsls	r3, r3, #31
 80073f4:	d506      	bpl.n	8007404 <__swbuf_r+0x6c>
 80073f6:	2e0a      	cmp	r6, #10
 80073f8:	d104      	bne.n	8007404 <__swbuf_r+0x6c>
 80073fa:	4621      	mov	r1, r4
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 f911 	bl	8007624 <_fflush_r>
 8007402:	b988      	cbnz	r0, 8007428 <__swbuf_r+0x90>
 8007404:	4638      	mov	r0, r7
 8007406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <__swbuf_r+0x9c>)
 800740a:	429c      	cmp	r4, r3
 800740c:	d101      	bne.n	8007412 <__swbuf_r+0x7a>
 800740e:	68ac      	ldr	r4, [r5, #8]
 8007410:	e7cf      	b.n	80073b2 <__swbuf_r+0x1a>
 8007412:	4b09      	ldr	r3, [pc, #36]	; (8007438 <__swbuf_r+0xa0>)
 8007414:	429c      	cmp	r4, r3
 8007416:	bf08      	it	eq
 8007418:	68ec      	ldreq	r4, [r5, #12]
 800741a:	e7ca      	b.n	80073b2 <__swbuf_r+0x1a>
 800741c:	4621      	mov	r1, r4
 800741e:	4628      	mov	r0, r5
 8007420:	f000 f80c 	bl	800743c <__swsetup_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	d0cb      	beq.n	80073c0 <__swbuf_r+0x28>
 8007428:	f04f 37ff 	mov.w	r7, #4294967295
 800742c:	e7ea      	b.n	8007404 <__swbuf_r+0x6c>
 800742e:	bf00      	nop
 8007430:	08007da4 	.word	0x08007da4
 8007434:	08007dc4 	.word	0x08007dc4
 8007438:	08007d84 	.word	0x08007d84

0800743c <__swsetup_r>:
 800743c:	4b32      	ldr	r3, [pc, #200]	; (8007508 <__swsetup_r+0xcc>)
 800743e:	b570      	push	{r4, r5, r6, lr}
 8007440:	681d      	ldr	r5, [r3, #0]
 8007442:	4606      	mov	r6, r0
 8007444:	460c      	mov	r4, r1
 8007446:	b125      	cbz	r5, 8007452 <__swsetup_r+0x16>
 8007448:	69ab      	ldr	r3, [r5, #24]
 800744a:	b913      	cbnz	r3, 8007452 <__swsetup_r+0x16>
 800744c:	4628      	mov	r0, r5
 800744e:	f000 f97d 	bl	800774c <__sinit>
 8007452:	4b2e      	ldr	r3, [pc, #184]	; (800750c <__swsetup_r+0xd0>)
 8007454:	429c      	cmp	r4, r3
 8007456:	d10f      	bne.n	8007478 <__swsetup_r+0x3c>
 8007458:	686c      	ldr	r4, [r5, #4]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007460:	0719      	lsls	r1, r3, #28
 8007462:	d42c      	bmi.n	80074be <__swsetup_r+0x82>
 8007464:	06dd      	lsls	r5, r3, #27
 8007466:	d411      	bmi.n	800748c <__swsetup_r+0x50>
 8007468:	2309      	movs	r3, #9
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	e03e      	b.n	80074f6 <__swsetup_r+0xba>
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <__swsetup_r+0xd4>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <__swsetup_r+0x46>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7eb      	b.n	800745a <__swsetup_r+0x1e>
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <__swsetup_r+0xd8>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7e6      	b.n	800745a <__swsetup_r+0x1e>
 800748c:	0758      	lsls	r0, r3, #29
 800748e:	d512      	bpl.n	80074b6 <__swsetup_r+0x7a>
 8007490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007492:	b141      	cbz	r1, 80074a6 <__swsetup_r+0x6a>
 8007494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <__swsetup_r+0x66>
 800749c:	4630      	mov	r0, r6
 800749e:	f000 fa5b 	bl	8007958 <_free_r>
 80074a2:	2300      	movs	r3, #0
 80074a4:	6363      	str	r3, [r4, #52]	; 0x34
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	2300      	movs	r3, #0
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f043 0308 	orr.w	r3, r3, #8
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	b94b      	cbnz	r3, 80074d6 <__swsetup_r+0x9a>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074cc:	d003      	beq.n	80074d6 <__swsetup_r+0x9a>
 80074ce:	4621      	mov	r1, r4
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 fa01 	bl	80078d8 <__smakebuf_r>
 80074d6:	89a0      	ldrh	r0, [r4, #12]
 80074d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074dc:	f010 0301 	ands.w	r3, r0, #1
 80074e0:	d00a      	beq.n	80074f8 <__swsetup_r+0xbc>
 80074e2:	2300      	movs	r3, #0
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6963      	ldr	r3, [r4, #20]
 80074e8:	425b      	negs	r3, r3
 80074ea:	61a3      	str	r3, [r4, #24]
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	b943      	cbnz	r3, 8007502 <__swsetup_r+0xc6>
 80074f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074f4:	d1ba      	bne.n	800746c <__swsetup_r+0x30>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	0781      	lsls	r1, r0, #30
 80074fa:	bf58      	it	pl
 80074fc:	6963      	ldrpl	r3, [r4, #20]
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	e7f4      	b.n	80074ec <__swsetup_r+0xb0>
 8007502:	2000      	movs	r0, #0
 8007504:	e7f7      	b.n	80074f6 <__swsetup_r+0xba>
 8007506:	bf00      	nop
 8007508:	20000010 	.word	0x20000010
 800750c:	08007da4 	.word	0x08007da4
 8007510:	08007dc4 	.word	0x08007dc4
 8007514:	08007d84 	.word	0x08007d84

08007518 <__sflush_r>:
 8007518:	898a      	ldrh	r2, [r1, #12]
 800751a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	4605      	mov	r5, r0
 8007520:	0710      	lsls	r0, r2, #28
 8007522:	460c      	mov	r4, r1
 8007524:	d458      	bmi.n	80075d8 <__sflush_r+0xc0>
 8007526:	684b      	ldr	r3, [r1, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	dc05      	bgt.n	8007538 <__sflush_r+0x20>
 800752c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	dc02      	bgt.n	8007538 <__sflush_r+0x20>
 8007532:	2000      	movs	r0, #0
 8007534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800753a:	2e00      	cmp	r6, #0
 800753c:	d0f9      	beq.n	8007532 <__sflush_r+0x1a>
 800753e:	2300      	movs	r3, #0
 8007540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007544:	682f      	ldr	r7, [r5, #0]
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	d032      	beq.n	80075b0 <__sflush_r+0x98>
 800754a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	075a      	lsls	r2, r3, #29
 8007550:	d505      	bpl.n	800755e <__sflush_r+0x46>
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	1ac0      	subs	r0, r0, r3
 8007556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007558:	b10b      	cbz	r3, 800755e <__sflush_r+0x46>
 800755a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800755c:	1ac0      	subs	r0, r0, r3
 800755e:	2300      	movs	r3, #0
 8007560:	4602      	mov	r2, r0
 8007562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007564:	6a21      	ldr	r1, [r4, #32]
 8007566:	4628      	mov	r0, r5
 8007568:	47b0      	blx	r6
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	d106      	bne.n	800757e <__sflush_r+0x66>
 8007570:	6829      	ldr	r1, [r5, #0]
 8007572:	291d      	cmp	r1, #29
 8007574:	d82c      	bhi.n	80075d0 <__sflush_r+0xb8>
 8007576:	4a2a      	ldr	r2, [pc, #168]	; (8007620 <__sflush_r+0x108>)
 8007578:	40ca      	lsrs	r2, r1
 800757a:	07d6      	lsls	r6, r2, #31
 800757c:	d528      	bpl.n	80075d0 <__sflush_r+0xb8>
 800757e:	2200      	movs	r2, #0
 8007580:	6062      	str	r2, [r4, #4]
 8007582:	04d9      	lsls	r1, r3, #19
 8007584:	6922      	ldr	r2, [r4, #16]
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	d504      	bpl.n	8007594 <__sflush_r+0x7c>
 800758a:	1c42      	adds	r2, r0, #1
 800758c:	d101      	bne.n	8007592 <__sflush_r+0x7a>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	b903      	cbnz	r3, 8007594 <__sflush_r+0x7c>
 8007592:	6560      	str	r0, [r4, #84]	; 0x54
 8007594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007596:	602f      	str	r7, [r5, #0]
 8007598:	2900      	cmp	r1, #0
 800759a:	d0ca      	beq.n	8007532 <__sflush_r+0x1a>
 800759c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d002      	beq.n	80075aa <__sflush_r+0x92>
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 f9d7 	bl	8007958 <_free_r>
 80075aa:	2000      	movs	r0, #0
 80075ac:	6360      	str	r0, [r4, #52]	; 0x34
 80075ae:	e7c1      	b.n	8007534 <__sflush_r+0x1c>
 80075b0:	6a21      	ldr	r1, [r4, #32]
 80075b2:	2301      	movs	r3, #1
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b0      	blx	r6
 80075b8:	1c41      	adds	r1, r0, #1
 80075ba:	d1c7      	bne.n	800754c <__sflush_r+0x34>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0c4      	beq.n	800754c <__sflush_r+0x34>
 80075c2:	2b1d      	cmp	r3, #29
 80075c4:	d001      	beq.n	80075ca <__sflush_r+0xb2>
 80075c6:	2b16      	cmp	r3, #22
 80075c8:	d101      	bne.n	80075ce <__sflush_r+0xb6>
 80075ca:	602f      	str	r7, [r5, #0]
 80075cc:	e7b1      	b.n	8007532 <__sflush_r+0x1a>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	e7ad      	b.n	8007534 <__sflush_r+0x1c>
 80075d8:	690f      	ldr	r7, [r1, #16]
 80075da:	2f00      	cmp	r7, #0
 80075dc:	d0a9      	beq.n	8007532 <__sflush_r+0x1a>
 80075de:	0793      	lsls	r3, r2, #30
 80075e0:	680e      	ldr	r6, [r1, #0]
 80075e2:	bf08      	it	eq
 80075e4:	694b      	ldreq	r3, [r1, #20]
 80075e6:	600f      	str	r7, [r1, #0]
 80075e8:	bf18      	it	ne
 80075ea:	2300      	movne	r3, #0
 80075ec:	eba6 0807 	sub.w	r8, r6, r7
 80075f0:	608b      	str	r3, [r1, #8]
 80075f2:	f1b8 0f00 	cmp.w	r8, #0
 80075f6:	dd9c      	ble.n	8007532 <__sflush_r+0x1a>
 80075f8:	6a21      	ldr	r1, [r4, #32]
 80075fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075fc:	4643      	mov	r3, r8
 80075fe:	463a      	mov	r2, r7
 8007600:	4628      	mov	r0, r5
 8007602:	47b0      	blx	r6
 8007604:	2800      	cmp	r0, #0
 8007606:	dc06      	bgt.n	8007616 <__sflush_r+0xfe>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760e:	81a3      	strh	r3, [r4, #12]
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	e78e      	b.n	8007534 <__sflush_r+0x1c>
 8007616:	4407      	add	r7, r0
 8007618:	eba8 0800 	sub.w	r8, r8, r0
 800761c:	e7e9      	b.n	80075f2 <__sflush_r+0xda>
 800761e:	bf00      	nop
 8007620:	20400001 	.word	0x20400001

08007624 <_fflush_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	690b      	ldr	r3, [r1, #16]
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	b913      	cbnz	r3, 8007634 <_fflush_r+0x10>
 800762e:	2500      	movs	r5, #0
 8007630:	4628      	mov	r0, r5
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	b118      	cbz	r0, 800763e <_fflush_r+0x1a>
 8007636:	6983      	ldr	r3, [r0, #24]
 8007638:	b90b      	cbnz	r3, 800763e <_fflush_r+0x1a>
 800763a:	f000 f887 	bl	800774c <__sinit>
 800763e:	4b14      	ldr	r3, [pc, #80]	; (8007690 <_fflush_r+0x6c>)
 8007640:	429c      	cmp	r4, r3
 8007642:	d11b      	bne.n	800767c <_fflush_r+0x58>
 8007644:	686c      	ldr	r4, [r5, #4]
 8007646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0ef      	beq.n	800762e <_fflush_r+0xa>
 800764e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007650:	07d0      	lsls	r0, r2, #31
 8007652:	d404      	bmi.n	800765e <_fflush_r+0x3a>
 8007654:	0599      	lsls	r1, r3, #22
 8007656:	d402      	bmi.n	800765e <_fflush_r+0x3a>
 8007658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800765a:	f000 f915 	bl	8007888 <__retarget_lock_acquire_recursive>
 800765e:	4628      	mov	r0, r5
 8007660:	4621      	mov	r1, r4
 8007662:	f7ff ff59 	bl	8007518 <__sflush_r>
 8007666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007668:	07da      	lsls	r2, r3, #31
 800766a:	4605      	mov	r5, r0
 800766c:	d4e0      	bmi.n	8007630 <_fflush_r+0xc>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	059b      	lsls	r3, r3, #22
 8007672:	d4dd      	bmi.n	8007630 <_fflush_r+0xc>
 8007674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007676:	f000 f908 	bl	800788a <__retarget_lock_release_recursive>
 800767a:	e7d9      	b.n	8007630 <_fflush_r+0xc>
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <_fflush_r+0x70>)
 800767e:	429c      	cmp	r4, r3
 8007680:	d101      	bne.n	8007686 <_fflush_r+0x62>
 8007682:	68ac      	ldr	r4, [r5, #8]
 8007684:	e7df      	b.n	8007646 <_fflush_r+0x22>
 8007686:	4b04      	ldr	r3, [pc, #16]	; (8007698 <_fflush_r+0x74>)
 8007688:	429c      	cmp	r4, r3
 800768a:	bf08      	it	eq
 800768c:	68ec      	ldreq	r4, [r5, #12]
 800768e:	e7da      	b.n	8007646 <_fflush_r+0x22>
 8007690:	08007da4 	.word	0x08007da4
 8007694:	08007dc4 	.word	0x08007dc4
 8007698:	08007d84 	.word	0x08007d84

0800769c <std>:
 800769c:	2300      	movs	r3, #0
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	e9c0 3300 	strd	r3, r3, [r0]
 80076a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	8181      	strh	r1, [r0, #12]
 80076ae:	6643      	str	r3, [r0, #100]	; 0x64
 80076b0:	81c2      	strh	r2, [r0, #14]
 80076b2:	6183      	str	r3, [r0, #24]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2208      	movs	r2, #8
 80076b8:	305c      	adds	r0, #92	; 0x5c
 80076ba:	f7ff fdef 	bl	800729c <memset>
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <std+0x38>)
 80076c0:	6263      	str	r3, [r4, #36]	; 0x24
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <std+0x3c>)
 80076c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076c6:	4b05      	ldr	r3, [pc, #20]	; (80076dc <std+0x40>)
 80076c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <std+0x44>)
 80076cc:	6224      	str	r4, [r4, #32]
 80076ce:	6323      	str	r3, [r4, #48]	; 0x30
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	08007b39 	.word	0x08007b39
 80076d8:	08007b5b 	.word	0x08007b5b
 80076dc:	08007b93 	.word	0x08007b93
 80076e0:	08007bb7 	.word	0x08007bb7

080076e4 <_cleanup_r>:
 80076e4:	4901      	ldr	r1, [pc, #4]	; (80076ec <_cleanup_r+0x8>)
 80076e6:	f000 b8af 	b.w	8007848 <_fwalk_reent>
 80076ea:	bf00      	nop
 80076ec:	08007625 	.word	0x08007625

080076f0 <__sfmoreglue>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	2268      	movs	r2, #104	; 0x68
 80076f4:	1e4d      	subs	r5, r1, #1
 80076f6:	4355      	muls	r5, r2
 80076f8:	460e      	mov	r6, r1
 80076fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076fe:	f000 f997 	bl	8007a30 <_malloc_r>
 8007702:	4604      	mov	r4, r0
 8007704:	b140      	cbz	r0, 8007718 <__sfmoreglue+0x28>
 8007706:	2100      	movs	r1, #0
 8007708:	e9c0 1600 	strd	r1, r6, [r0]
 800770c:	300c      	adds	r0, #12
 800770e:	60a0      	str	r0, [r4, #8]
 8007710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007714:	f7ff fdc2 	bl	800729c <memset>
 8007718:	4620      	mov	r0, r4
 800771a:	bd70      	pop	{r4, r5, r6, pc}

0800771c <__sfp_lock_acquire>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__sfp_lock_acquire+0x8>)
 800771e:	f000 b8b3 	b.w	8007888 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	20000a9d 	.word	0x20000a9d

08007728 <__sfp_lock_release>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__sfp_lock_release+0x8>)
 800772a:	f000 b8ae 	b.w	800788a <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	20000a9d 	.word	0x20000a9d

08007734 <__sinit_lock_acquire>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__sinit_lock_acquire+0x8>)
 8007736:	f000 b8a7 	b.w	8007888 <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20000a9e 	.word	0x20000a9e

08007740 <__sinit_lock_release>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__sinit_lock_release+0x8>)
 8007742:	f000 b8a2 	b.w	800788a <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20000a9e 	.word	0x20000a9e

0800774c <__sinit>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4604      	mov	r4, r0
 8007750:	f7ff fff0 	bl	8007734 <__sinit_lock_acquire>
 8007754:	69a3      	ldr	r3, [r4, #24]
 8007756:	b11b      	cbz	r3, 8007760 <__sinit+0x14>
 8007758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800775c:	f7ff bff0 	b.w	8007740 <__sinit_lock_release>
 8007760:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007764:	6523      	str	r3, [r4, #80]	; 0x50
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <__sinit+0x68>)
 8007768:	4a13      	ldr	r2, [pc, #76]	; (80077b8 <__sinit+0x6c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	62a2      	str	r2, [r4, #40]	; 0x28
 800776e:	42a3      	cmp	r3, r4
 8007770:	bf04      	itt	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	61a3      	streq	r3, [r4, #24]
 8007776:	4620      	mov	r0, r4
 8007778:	f000 f820 	bl	80077bc <__sfp>
 800777c:	6060      	str	r0, [r4, #4]
 800777e:	4620      	mov	r0, r4
 8007780:	f000 f81c 	bl	80077bc <__sfp>
 8007784:	60a0      	str	r0, [r4, #8]
 8007786:	4620      	mov	r0, r4
 8007788:	f000 f818 	bl	80077bc <__sfp>
 800778c:	2200      	movs	r2, #0
 800778e:	60e0      	str	r0, [r4, #12]
 8007790:	2104      	movs	r1, #4
 8007792:	6860      	ldr	r0, [r4, #4]
 8007794:	f7ff ff82 	bl	800769c <std>
 8007798:	68a0      	ldr	r0, [r4, #8]
 800779a:	2201      	movs	r2, #1
 800779c:	2109      	movs	r1, #9
 800779e:	f7ff ff7d 	bl	800769c <std>
 80077a2:	68e0      	ldr	r0, [r4, #12]
 80077a4:	2202      	movs	r2, #2
 80077a6:	2112      	movs	r1, #18
 80077a8:	f7ff ff78 	bl	800769c <std>
 80077ac:	2301      	movs	r3, #1
 80077ae:	61a3      	str	r3, [r4, #24]
 80077b0:	e7d2      	b.n	8007758 <__sinit+0xc>
 80077b2:	bf00      	nop
 80077b4:	08007d80 	.word	0x08007d80
 80077b8:	080076e5 	.word	0x080076e5

080077bc <__sfp>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	4607      	mov	r7, r0
 80077c0:	f7ff ffac 	bl	800771c <__sfp_lock_acquire>
 80077c4:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <__sfp+0x84>)
 80077c6:	681e      	ldr	r6, [r3, #0]
 80077c8:	69b3      	ldr	r3, [r6, #24]
 80077ca:	b913      	cbnz	r3, 80077d2 <__sfp+0x16>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff ffbd 	bl	800774c <__sinit>
 80077d2:	3648      	adds	r6, #72	; 0x48
 80077d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077d8:	3b01      	subs	r3, #1
 80077da:	d503      	bpl.n	80077e4 <__sfp+0x28>
 80077dc:	6833      	ldr	r3, [r6, #0]
 80077de:	b30b      	cbz	r3, 8007824 <__sfp+0x68>
 80077e0:	6836      	ldr	r6, [r6, #0]
 80077e2:	e7f7      	b.n	80077d4 <__sfp+0x18>
 80077e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077e8:	b9d5      	cbnz	r5, 8007820 <__sfp+0x64>
 80077ea:	4b16      	ldr	r3, [pc, #88]	; (8007844 <__sfp+0x88>)
 80077ec:	60e3      	str	r3, [r4, #12]
 80077ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077f2:	6665      	str	r5, [r4, #100]	; 0x64
 80077f4:	f000 f847 	bl	8007886 <__retarget_lock_init_recursive>
 80077f8:	f7ff ff96 	bl	8007728 <__sfp_lock_release>
 80077fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007804:	6025      	str	r5, [r4, #0]
 8007806:	61a5      	str	r5, [r4, #24]
 8007808:	2208      	movs	r2, #8
 800780a:	4629      	mov	r1, r5
 800780c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007810:	f7ff fd44 	bl	800729c <memset>
 8007814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800781c:	4620      	mov	r0, r4
 800781e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007820:	3468      	adds	r4, #104	; 0x68
 8007822:	e7d9      	b.n	80077d8 <__sfp+0x1c>
 8007824:	2104      	movs	r1, #4
 8007826:	4638      	mov	r0, r7
 8007828:	f7ff ff62 	bl	80076f0 <__sfmoreglue>
 800782c:	4604      	mov	r4, r0
 800782e:	6030      	str	r0, [r6, #0]
 8007830:	2800      	cmp	r0, #0
 8007832:	d1d5      	bne.n	80077e0 <__sfp+0x24>
 8007834:	f7ff ff78 	bl	8007728 <__sfp_lock_release>
 8007838:	230c      	movs	r3, #12
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	e7ee      	b.n	800781c <__sfp+0x60>
 800783e:	bf00      	nop
 8007840:	08007d80 	.word	0x08007d80
 8007844:	ffff0001 	.word	0xffff0001

08007848 <_fwalk_reent>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4606      	mov	r6, r0
 800784e:	4688      	mov	r8, r1
 8007850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007854:	2700      	movs	r7, #0
 8007856:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800785a:	f1b9 0901 	subs.w	r9, r9, #1
 800785e:	d505      	bpl.n	800786c <_fwalk_reent+0x24>
 8007860:	6824      	ldr	r4, [r4, #0]
 8007862:	2c00      	cmp	r4, #0
 8007864:	d1f7      	bne.n	8007856 <_fwalk_reent+0xe>
 8007866:	4638      	mov	r0, r7
 8007868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786c:	89ab      	ldrh	r3, [r5, #12]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d907      	bls.n	8007882 <_fwalk_reent+0x3a>
 8007872:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007876:	3301      	adds	r3, #1
 8007878:	d003      	beq.n	8007882 <_fwalk_reent+0x3a>
 800787a:	4629      	mov	r1, r5
 800787c:	4630      	mov	r0, r6
 800787e:	47c0      	blx	r8
 8007880:	4307      	orrs	r7, r0
 8007882:	3568      	adds	r5, #104	; 0x68
 8007884:	e7e9      	b.n	800785a <_fwalk_reent+0x12>

08007886 <__retarget_lock_init_recursive>:
 8007886:	4770      	bx	lr

08007888 <__retarget_lock_acquire_recursive>:
 8007888:	4770      	bx	lr

0800788a <__retarget_lock_release_recursive>:
 800788a:	4770      	bx	lr

0800788c <__swhatbuf_r>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	460e      	mov	r6, r1
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	2900      	cmp	r1, #0
 8007896:	b096      	sub	sp, #88	; 0x58
 8007898:	4614      	mov	r4, r2
 800789a:	461d      	mov	r5, r3
 800789c:	da08      	bge.n	80078b0 <__swhatbuf_r+0x24>
 800789e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	602a      	str	r2, [r5, #0]
 80078a6:	061a      	lsls	r2, r3, #24
 80078a8:	d410      	bmi.n	80078cc <__swhatbuf_r+0x40>
 80078aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ae:	e00e      	b.n	80078ce <__swhatbuf_r+0x42>
 80078b0:	466a      	mov	r2, sp
 80078b2:	f000 f9a7 	bl	8007c04 <_fstat_r>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	dbf1      	blt.n	800789e <__swhatbuf_r+0x12>
 80078ba:	9a01      	ldr	r2, [sp, #4]
 80078bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078c4:	425a      	negs	r2, r3
 80078c6:	415a      	adcs	r2, r3
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	e7ee      	b.n	80078aa <__swhatbuf_r+0x1e>
 80078cc:	2340      	movs	r3, #64	; 0x40
 80078ce:	2000      	movs	r0, #0
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	b016      	add	sp, #88	; 0x58
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080078d8 <__smakebuf_r>:
 80078d8:	898b      	ldrh	r3, [r1, #12]
 80078da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078dc:	079d      	lsls	r5, r3, #30
 80078de:	4606      	mov	r6, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	d507      	bpl.n	80078f4 <__smakebuf_r+0x1c>
 80078e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	2301      	movs	r3, #1
 80078ee:	6163      	str	r3, [r4, #20]
 80078f0:	b002      	add	sp, #8
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	ab01      	add	r3, sp, #4
 80078f6:	466a      	mov	r2, sp
 80078f8:	f7ff ffc8 	bl	800788c <__swhatbuf_r>
 80078fc:	9900      	ldr	r1, [sp, #0]
 80078fe:	4605      	mov	r5, r0
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f895 	bl	8007a30 <_malloc_r>
 8007906:	b948      	cbnz	r0, 800791c <__smakebuf_r+0x44>
 8007908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790c:	059a      	lsls	r2, r3, #22
 800790e:	d4ef      	bmi.n	80078f0 <__smakebuf_r+0x18>
 8007910:	f023 0303 	bic.w	r3, r3, #3
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	e7e3      	b.n	80078e4 <__smakebuf_r+0xc>
 800791c:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <__smakebuf_r+0x7c>)
 800791e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	6020      	str	r0, [r4, #0]
 8007924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	6163      	str	r3, [r4, #20]
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	6120      	str	r0, [r4, #16]
 8007932:	b15b      	cbz	r3, 800794c <__smakebuf_r+0x74>
 8007934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007938:	4630      	mov	r0, r6
 800793a:	f000 f975 	bl	8007c28 <_isatty_r>
 800793e:	b128      	cbz	r0, 800794c <__smakebuf_r+0x74>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	89a0      	ldrh	r0, [r4, #12]
 800794e:	4305      	orrs	r5, r0
 8007950:	81a5      	strh	r5, [r4, #12]
 8007952:	e7cd      	b.n	80078f0 <__smakebuf_r+0x18>
 8007954:	080076e5 	.word	0x080076e5

08007958 <_free_r>:
 8007958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800795a:	2900      	cmp	r1, #0
 800795c:	d044      	beq.n	80079e8 <_free_r+0x90>
 800795e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007962:	9001      	str	r0, [sp, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f1a1 0404 	sub.w	r4, r1, #4
 800796a:	bfb8      	it	lt
 800796c:	18e4      	addlt	r4, r4, r3
 800796e:	f000 f97d 	bl	8007c6c <__malloc_lock>
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <_free_r+0x94>)
 8007974:	9801      	ldr	r0, [sp, #4]
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	b933      	cbnz	r3, 8007988 <_free_r+0x30>
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	6014      	str	r4, [r2, #0]
 800797e:	b003      	add	sp, #12
 8007980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007984:	f000 b978 	b.w	8007c78 <__malloc_unlock>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d908      	bls.n	800799e <_free_r+0x46>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf01      	itttt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	e7ed      	b.n	800797a <_free_r+0x22>
 800799e:	461a      	mov	r2, r3
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	b10b      	cbz	r3, 80079a8 <_free_r+0x50>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d9fa      	bls.n	800799e <_free_r+0x46>
 80079a8:	6811      	ldr	r1, [r2, #0]
 80079aa:	1855      	adds	r5, r2, r1
 80079ac:	42a5      	cmp	r5, r4
 80079ae:	d10b      	bne.n	80079c8 <_free_r+0x70>
 80079b0:	6824      	ldr	r4, [r4, #0]
 80079b2:	4421      	add	r1, r4
 80079b4:	1854      	adds	r4, r2, r1
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	6011      	str	r1, [r2, #0]
 80079ba:	d1e0      	bne.n	800797e <_free_r+0x26>
 80079bc:	681c      	ldr	r4, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	4421      	add	r1, r4
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	e7da      	b.n	800797e <_free_r+0x26>
 80079c8:	d902      	bls.n	80079d0 <_free_r+0x78>
 80079ca:	230c      	movs	r3, #12
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	e7d6      	b.n	800797e <_free_r+0x26>
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf04      	itt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	bf04      	itt	eq
 80079e0:	1949      	addeq	r1, r1, r5
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	6054      	str	r4, [r2, #4]
 80079e6:	e7ca      	b.n	800797e <_free_r+0x26>
 80079e8:	b003      	add	sp, #12
 80079ea:	bd30      	pop	{r4, r5, pc}
 80079ec:	20000aa0 	.word	0x20000aa0

080079f0 <sbrk_aligned>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	4e0e      	ldr	r6, [pc, #56]	; (8007a2c <sbrk_aligned+0x3c>)
 80079f4:	460c      	mov	r4, r1
 80079f6:	6831      	ldr	r1, [r6, #0]
 80079f8:	4605      	mov	r5, r0
 80079fa:	b911      	cbnz	r1, 8007a02 <sbrk_aligned+0x12>
 80079fc:	f000 f88c 	bl	8007b18 <_sbrk_r>
 8007a00:	6030      	str	r0, [r6, #0]
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f887 	bl	8007b18 <_sbrk_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	d00a      	beq.n	8007a24 <sbrk_aligned+0x34>
 8007a0e:	1cc4      	adds	r4, r0, #3
 8007a10:	f024 0403 	bic.w	r4, r4, #3
 8007a14:	42a0      	cmp	r0, r4
 8007a16:	d007      	beq.n	8007a28 <sbrk_aligned+0x38>
 8007a18:	1a21      	subs	r1, r4, r0
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 f87c 	bl	8007b18 <_sbrk_r>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d101      	bne.n	8007a28 <sbrk_aligned+0x38>
 8007a24:	f04f 34ff 	mov.w	r4, #4294967295
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	20000aa4 	.word	0x20000aa4

08007a30 <_malloc_r>:
 8007a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a34:	1ccd      	adds	r5, r1, #3
 8007a36:	f025 0503 	bic.w	r5, r5, #3
 8007a3a:	3508      	adds	r5, #8
 8007a3c:	2d0c      	cmp	r5, #12
 8007a3e:	bf38      	it	cc
 8007a40:	250c      	movcc	r5, #12
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	4607      	mov	r7, r0
 8007a46:	db01      	blt.n	8007a4c <_malloc_r+0x1c>
 8007a48:	42a9      	cmp	r1, r5
 8007a4a:	d905      	bls.n	8007a58 <_malloc_r+0x28>
 8007a4c:	230c      	movs	r3, #12
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	2600      	movs	r6, #0
 8007a52:	4630      	mov	r0, r6
 8007a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a58:	4e2e      	ldr	r6, [pc, #184]	; (8007b14 <_malloc_r+0xe4>)
 8007a5a:	f000 f907 	bl	8007c6c <__malloc_lock>
 8007a5e:	6833      	ldr	r3, [r6, #0]
 8007a60:	461c      	mov	r4, r3
 8007a62:	bb34      	cbnz	r4, 8007ab2 <_malloc_r+0x82>
 8007a64:	4629      	mov	r1, r5
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff ffc2 	bl	80079f0 <sbrk_aligned>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	4604      	mov	r4, r0
 8007a70:	d14d      	bne.n	8007b0e <_malloc_r+0xde>
 8007a72:	6834      	ldr	r4, [r6, #0]
 8007a74:	4626      	mov	r6, r4
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d140      	bne.n	8007afc <_malloc_r+0xcc>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4638      	mov	r0, r7
 8007a80:	eb04 0803 	add.w	r8, r4, r3
 8007a84:	f000 f848 	bl	8007b18 <_sbrk_r>
 8007a88:	4580      	cmp	r8, r0
 8007a8a:	d13a      	bne.n	8007b02 <_malloc_r+0xd2>
 8007a8c:	6821      	ldr	r1, [r4, #0]
 8007a8e:	3503      	adds	r5, #3
 8007a90:	1a6d      	subs	r5, r5, r1
 8007a92:	f025 0503 	bic.w	r5, r5, #3
 8007a96:	3508      	adds	r5, #8
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	bf38      	it	cc
 8007a9c:	250c      	movcc	r5, #12
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7ff ffa5 	bl	80079f0 <sbrk_aligned>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d02b      	beq.n	8007b02 <_malloc_r+0xd2>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	442b      	add	r3, r5
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	e00e      	b.n	8007ad0 <_malloc_r+0xa0>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	1b52      	subs	r2, r2, r5
 8007ab6:	d41e      	bmi.n	8007af6 <_malloc_r+0xc6>
 8007ab8:	2a0b      	cmp	r2, #11
 8007aba:	d916      	bls.n	8007aea <_malloc_r+0xba>
 8007abc:	1961      	adds	r1, r4, r5
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	6025      	str	r5, [r4, #0]
 8007ac2:	bf18      	it	ne
 8007ac4:	6059      	strne	r1, [r3, #4]
 8007ac6:	6863      	ldr	r3, [r4, #4]
 8007ac8:	bf08      	it	eq
 8007aca:	6031      	streq	r1, [r6, #0]
 8007acc:	5162      	str	r2, [r4, r5]
 8007ace:	604b      	str	r3, [r1, #4]
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f104 060b 	add.w	r6, r4, #11
 8007ad6:	f000 f8cf 	bl	8007c78 <__malloc_unlock>
 8007ada:	f026 0607 	bic.w	r6, r6, #7
 8007ade:	1d23      	adds	r3, r4, #4
 8007ae0:	1af2      	subs	r2, r6, r3
 8007ae2:	d0b6      	beq.n	8007a52 <_malloc_r+0x22>
 8007ae4:	1b9b      	subs	r3, r3, r6
 8007ae6:	50a3      	str	r3, [r4, r2]
 8007ae8:	e7b3      	b.n	8007a52 <_malloc_r+0x22>
 8007aea:	6862      	ldr	r2, [r4, #4]
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	bf0c      	ite	eq
 8007af0:	6032      	streq	r2, [r6, #0]
 8007af2:	605a      	strne	r2, [r3, #4]
 8007af4:	e7ec      	b.n	8007ad0 <_malloc_r+0xa0>
 8007af6:	4623      	mov	r3, r4
 8007af8:	6864      	ldr	r4, [r4, #4]
 8007afa:	e7b2      	b.n	8007a62 <_malloc_r+0x32>
 8007afc:	4634      	mov	r4, r6
 8007afe:	6876      	ldr	r6, [r6, #4]
 8007b00:	e7b9      	b.n	8007a76 <_malloc_r+0x46>
 8007b02:	230c      	movs	r3, #12
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	4638      	mov	r0, r7
 8007b08:	f000 f8b6 	bl	8007c78 <__malloc_unlock>
 8007b0c:	e7a1      	b.n	8007a52 <_malloc_r+0x22>
 8007b0e:	6025      	str	r5, [r4, #0]
 8007b10:	e7de      	b.n	8007ad0 <_malloc_r+0xa0>
 8007b12:	bf00      	nop
 8007b14:	20000aa0 	.word	0x20000aa0

08007b18 <_sbrk_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	; (8007b34 <_sbrk_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7f9 ffe6 	bl	8001af4 <_sbrk>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_sbrk_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_sbrk_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20000aa8 	.word	0x20000aa8

08007b38 <__sread>:
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b40:	f000 f8a0 	bl	8007c84 <_read_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	bfab      	itete	ge
 8007b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b4c:	181b      	addge	r3, r3, r0
 8007b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b52:	bfac      	ite	ge
 8007b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b56:	81a3      	strhlt	r3, [r4, #12]
 8007b58:	bd10      	pop	{r4, pc}

08007b5a <__swrite>:
 8007b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5e:	461f      	mov	r7, r3
 8007b60:	898b      	ldrh	r3, [r1, #12]
 8007b62:	05db      	lsls	r3, r3, #23
 8007b64:	4605      	mov	r5, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	4616      	mov	r6, r2
 8007b6a:	d505      	bpl.n	8007b78 <__swrite+0x1e>
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	2302      	movs	r3, #2
 8007b72:	2200      	movs	r2, #0
 8007b74:	f000 f868 	bl	8007c48 <_lseek_r>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	4632      	mov	r2, r6
 8007b86:	463b      	mov	r3, r7
 8007b88:	4628      	mov	r0, r5
 8007b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	f000 b817 	b.w	8007bc0 <_write_r>

08007b92 <__sseek>:
 8007b92:	b510      	push	{r4, lr}
 8007b94:	460c      	mov	r4, r1
 8007b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9a:	f000 f855 	bl	8007c48 <_lseek_r>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	bf15      	itete	ne
 8007ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bae:	81a3      	strheq	r3, [r4, #12]
 8007bb0:	bf18      	it	ne
 8007bb2:	81a3      	strhne	r3, [r4, #12]
 8007bb4:	bd10      	pop	{r4, pc}

08007bb6 <__sclose>:
 8007bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bba:	f000 b813 	b.w	8007be4 <_close_r>
	...

08007bc0 <_write_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d07      	ldr	r5, [pc, #28]	; (8007be0 <_write_r+0x20>)
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	4611      	mov	r1, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	602a      	str	r2, [r5, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f7f9 ff3f 	bl	8001a52 <_write>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_write_r+0x1e>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_write_r+0x1e>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20000aa8 	.word	0x20000aa8

08007be4 <_close_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d06      	ldr	r5, [pc, #24]	; (8007c00 <_close_r+0x1c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	f7f9 ff4b 	bl	8001a8a <_close>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_close_r+0x1a>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_close_r+0x1a>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	20000aa8 	.word	0x20000aa8

08007c04 <_fstat_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4d07      	ldr	r5, [pc, #28]	; (8007c24 <_fstat_r+0x20>)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	f7f9 ff46 	bl	8001aa2 <_fstat>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	d102      	bne.n	8007c20 <_fstat_r+0x1c>
 8007c1a:	682b      	ldr	r3, [r5, #0]
 8007c1c:	b103      	cbz	r3, 8007c20 <_fstat_r+0x1c>
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	bf00      	nop
 8007c24:	20000aa8 	.word	0x20000aa8

08007c28 <_isatty_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d06      	ldr	r5, [pc, #24]	; (8007c44 <_isatty_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7f9 ff45 	bl	8001ac2 <_isatty>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_isatty_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_isatty_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20000aa8 	.word	0x20000aa8

08007c48 <_lseek_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d07      	ldr	r5, [pc, #28]	; (8007c68 <_lseek_r+0x20>)
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4611      	mov	r1, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f7f9 ff3e 	bl	8001ad8 <_lseek>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_lseek_r+0x1e>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_lseek_r+0x1e>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	20000aa8 	.word	0x20000aa8

08007c6c <__malloc_lock>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	; (8007c74 <__malloc_lock+0x8>)
 8007c6e:	f7ff be0b 	b.w	8007888 <__retarget_lock_acquire_recursive>
 8007c72:	bf00      	nop
 8007c74:	20000a9c 	.word	0x20000a9c

08007c78 <__malloc_unlock>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__malloc_unlock+0x8>)
 8007c7a:	f7ff be06 	b.w	800788a <__retarget_lock_release_recursive>
 8007c7e:	bf00      	nop
 8007c80:	20000a9c 	.word	0x20000a9c

08007c84 <_read_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d07      	ldr	r5, [pc, #28]	; (8007ca4 <_read_r+0x20>)
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	602a      	str	r2, [r5, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f7f9 fec0 	bl	8001a18 <_read>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_read_r+0x1e>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_read_r+0x1e>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	20000aa8 	.word	0x20000aa8

08007ca8 <_init>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr

08007cb4 <_fini>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr
