
14.TCPIP_SOCKET_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a450  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003058  0801a600  0801a600  0002a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d658  0801d658  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d658  0801d658  0002d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d660  0801d660  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d660  0801d660  0002d660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d664  0801d664  0002d664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0801d668  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301d0  2**0
                  CONTENTS
 10 .bss          0000da38  200001d0  200001d0  000301d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000dc08  2000dc08  000301d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003fc25  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009695  00000000  00000000  0006fe25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f10  00000000  00000000  000794c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002cd8  00000000  00000000  0007c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039c99  00000000  00000000  0007f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000476f4  00000000  00000000  000b8d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118dd4  00000000  00000000  00100435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00219209  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cf24  00000000  00000000  0021925c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a5e8 	.word	0x0801a5e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	0801a5e8 	.word	0x0801a5e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <get_button>:
	}
}
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f004 ff15 	bl	80053e8 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10d      	bne.n	80005e4 <get_button+0x40>
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <get_button+0x6c>)
 80005cc:	5cd3      	ldrb	r3, [r2, r3]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d108      	bne.n	80005e4 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 80005d2:	2050      	movs	r0, #80	; 0x50
 80005d4:	f002 fce8 	bl	8002fa8 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 80005d8:	787b      	ldrb	r3, [r7, #1]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <get_button+0x6c>)
 80005dc:	2100      	movs	r1, #0
 80005de:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 80005e0:	2301      	movs	r3, #1
 80005e2:	e011      	b.n	8000608 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d10d      	bne.n	8000606 <get_button+0x62>
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <get_button+0x6c>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d108      	bne.n	8000606 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 80005f4:	201e      	movs	r0, #30
 80005f6:	f002 fcd7 	bl	8002fa8 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 80005fa:	787b      	ldrb	r3, [r7, #1]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <get_button+0x6c>)
 80005fe:	2101      	movs	r1, #1
 8000600:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000004 	.word	0x20000004

08000614 <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmatrix의 led를 off
void init_dotmatrix(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e00f      	b.n	8000640 <init_dotmatrix+0x2c>
	{
		display_data[i] = number_data[i];
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <init_dotmatrix+0xb4>)
 800062c:	4413      	add	r3, r2
 800062e:	b2d9      	uxtb	r1, r3
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <init_dotmatrix+0xb8>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	460a      	mov	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 8; i++)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b07      	cmp	r3, #7
 8000644:	ddec      	ble.n	8000620 <init_dotmatrix+0xc>
	}
	for (int i=1; i < number_of_character+1; i++)
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	e01e      	b.n	800068a <init_dotmatrix+0x76>
	{
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e015      	b.n	800067e <init_dotmatrix+0x6a>
		{
			scroll_buffer[i][j] = number_data[i-1][j];
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	491c      	ldr	r1, [pc, #112]	; (80006c8 <init_dotmatrix+0xb4>)
 8000658:	4613      	mov	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	18ca      	adds	r2, r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	7819      	ldrb	r1, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <init_dotmatrix+0xbc>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	441a      	add	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
		for (int j=0; j < 8; j++) // scroll_buffer[0] = blank
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b07      	cmp	r3, #7
 8000682:	dde6      	ble.n	8000652 <init_dotmatrix+0x3e>
	for (int i=1; i < number_of_character+1; i++)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <init_dotmatrix+0xc0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	429a      	cmp	r2, r3
 8000692:	dddb      	ble.n	800064c <init_dotmatrix+0x38>
		}
	}
	for (int i=0; i < 8; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	e00e      	b.n	80006b8 <init_dotmatrix+0xa4>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // led all off
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <init_dotmatrix+0xc4>)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <init_dotmatrix+0xc8>)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4619      	mov	r1, r3
 80006ae:	f004 feb3 	bl	8005418 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	dded      	ble.n	800069a <init_dotmatrix+0x86>
	}
}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000006c 	.word	0x2000006c
 80006cc:	200001ec 	.word	0x200001ec
 80006d0:	200001f4 	.word	0x200001f4
 80006d4:	20000134 	.word	0x20000134
 80006d8:	2000000c 	.word	0x2000000c
 80006dc:	2000005c 	.word	0x2000005c

080006e0 <write_column_data>:
void write_column_data(int col)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 8; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e01f      	b.n	800072e <write_column_data+0x4e>
		if (i == col)
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // on
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // off
#else
//---------- common 캐소우드 방식
		if (i == col)
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d10c      	bne.n	8000710 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // on
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <write_column_data+0x60>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <write_column_data+0x64>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	f004 fe85 	bl	8005418 <HAL_GPIO_WritePin>
 800070e:	e00b      	b.n	8000728 <write_column_data+0x48>
		else HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // off
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <write_column_data+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <write_column_data+0x64>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	f004 fe78 	bl	8005418 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b07      	cmp	r3, #7
 8000732:	dddc      	ble.n	80006ee <write_column_data+0xe>
#endif
	}
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000000c 	.word	0x2000000c
 8000744:	2000005c 	.word	0x2000005c

08000748 <write_row_data>:
// 0b00111110
void write_row_data(unsigned char data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	unsigned char d;

	d = data;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	72fb      	strb	r3, [r7, #11]

	for (int i=0; i < 8; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e023      	b.n	80007a4 <write_row_data+0x5c>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
#else
//-common 캐소우드
		if ( d & (1 << i))   // 1인경우
 800075c:	7afa      	ldrb	r2, [r7, #11]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	fa42 f303 	asr.w	r3, r2, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00c      	beq.n	8000786 <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 800076c:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <write_row_data+0x6c>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <write_row_data+0x70>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f004 fe4a 	bl	8005418 <HAL_GPIO_WritePin>
 8000784:	e00b      	b.n	800079e <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <write_row_data+0x6c>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <write_row_data+0x70>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000796:	2201      	movs	r2, #1
 8000798:	4619      	mov	r1, r3
 800079a:	f004 fe3d 	bl	8005418 <HAL_GPIO_WritePin>
	for (int i=0; i < 8; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	ddd8      	ble.n	800075c <write_row_data+0x14>
#endif
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	2000004c 	.word	0x2000004c

080007bc <dotmatrix_main>:
#if 1
// scroll 문자 출력 프로그램
extern osMutexId_t myMutex01Handle;
int dotmatrix_main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
    char lcd_buff[40];

	// init_dotmatrix();


	uint32_t now = HAL_GetTick();  // 1ms
 80007c2:	f002 fbe5 	bl	8002f90 <HAL_GetTick>
 80007c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	// 1.처음시작시 past_time=0; now: 500 --> past_time=500
	if (now - past_time >= 500) // 500ms scroll
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <dotmatrix_main+0xec>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007d4:	d34d      	bcc.n	8000872 <dotmatrix_main+0xb6>
	{
		past_time = now;
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <dotmatrix_main+0xec>)
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007da:	6013      	str	r3, [r2, #0]
		for (int i=0; i < 8; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
 80007e0:	e029      	b.n	8000836 <dotmatrix_main+0x7a>
		{

			display_data[i] = (scroll_buffer[index][i] >> count) |
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <dotmatrix_main+0xf0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <dotmatrix_main+0xf4>)
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	441a      	add	r2, r3
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <dotmatrix_main+0xf8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	fa42 f303 	asr.w	r3, r2, r3
 80007fc:	b25a      	sxtb	r2, r3
					(scroll_buffer[index+1][i] << 8 - count);
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <dotmatrix_main+0xf0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	492a      	ldr	r1, [pc, #168]	; (80008b0 <dotmatrix_main+0xf4>)
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4419      	add	r1, r3
 800080a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080c:	440b      	add	r3, r1
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <dotmatrix_main+0xf8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f1c3 0308 	rsb	r3, r3, #8
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
			display_data[i] = (scroll_buffer[index][i] >> count) |
 800081e:	b25b      	sxtb	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b25b      	sxtb	r3, r3
 8000824:	b2d9      	uxtb	r1, r3
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <dotmatrix_main+0xfc>)
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	4413      	add	r3, r2
 800082c:	460a      	mov	r2, r1
 800082e:	701a      	strb	r2, [r3, #0]
		for (int i=0; i < 8; i++)
 8000830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000832:	3301      	adds	r3, #1
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
 8000836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000838:	2b07      	cmp	r3, #7
 800083a:	ddd2      	ble.n	80007e2 <dotmatrix_main+0x26>
		}
		if (++count == 8) // 8칼람을 다 처리 했으면 다음 scroll_buffer로 이동
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <dotmatrix_main+0xf8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <dotmatrix_main+0xf8>)
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <dotmatrix_main+0xf8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b08      	cmp	r3, #8
 800084c:	d111      	bne.n	8000872 <dotmatrix_main+0xb6>
		{
			count =0;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <dotmatrix_main+0xf8>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
			index++;  // 다음 scroll_buffer로 이동
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <dotmatrix_main+0xf0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <dotmatrix_main+0xf0>)
 800085c:	6013      	str	r3, [r2, #0]
			if (index == number_of_character+1) index=0;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <dotmatrix_main+0x100>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <dotmatrix_main+0xf0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d102      	bne.n	8000872 <dotmatrix_main+0xb6>
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <dotmatrix_main+0xf0>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
			// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
		}
	}
	for (int i=0; i < 8; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
 8000876:	e00f      	b.n	8000898 <dotmatrix_main+0xdc>
	{
		// 공통 양극 방식
		// column에는 0을 ROW에는 1을 출력해야 해당 LED가 on된다.
		write_column_data(i);
 8000878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087a:	f7ff ff31 	bl	80006e0 <write_column_data>
		write_row_data(display_data[i]);
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <dotmatrix_main+0xfc>)
 8000880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff5e 	bl	8000748 <write_row_data>
		HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f002 fb8b 	bl	8002fa8 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000894:	3301      	adds	r3, #1
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
 8000898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089a:	2b07      	cmp	r3, #7
 800089c:	ddec      	ble.n	8000878 <dotmatrix_main+0xbc>
	}

	return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000384 	.word	0x20000384
 80008ac:	20000388 	.word	0x20000388
 80008b0:	200001f4 	.word	0x200001f4
 80008b4:	2000038c 	.word	0x2000038c
 80008b8:	200001ec 	.word	0x200001ec
 80008bc:	20000134 	.word	0x20000134

080008c0 <dec2bin>:

	return high + low;
}
// decimal --> BCD  ex) 23: 001 0111
unsigned char dec2bin(unsigned char byte)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <dec2bin+0x44>)
 80008ce:	fba2 2303 	umull	r2, r3, r2, r3
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <dec2bin+0x44>)
 80008de:	fba3 1302 	umull	r1, r3, r3, r2
 80008e2:	08d9      	lsrs	r1, r3, #3
 80008e4:	460b      	mov	r3, r1
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	73bb      	strb	r3, [r7, #14]

	return high + low;
 80008f0:	7bfa      	ldrb	r2, [r7, #15]
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2db      	uxtb	r3, r3

}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	cccccccd 	.word	0xcccccccd

08000908 <set_rtc>:
	 oldTime.Seconds=sTime.Seconds;
}
// setrtc231016103800
//       678901234567
void set_rtc(char *date_time)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4];  // date
	char hh[4], min[4], ss[4];  // time

	strncpy(yy, date_time+6, 2); // yy[0] = '2' yy[1]='3' yy[2]=0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1d99      	adds	r1, r3, #6
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2202      	movs	r2, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f018 fe11 	bl	8019542 <strncpy>
	strncpy(mm, date_time+8, 2);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f103 0108 	add.w	r1, r3, #8
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	2202      	movs	r2, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f018 fe08 	bl	8019542 <strncpy>
	strncpy(dd, date_time+10, 2);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f103 010a 	add.w	r1, r3, #10
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2202      	movs	r2, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f018 fdff 	bl	8019542 <strncpy>

	strncpy(hh, date_time+12, 2);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f103 010c 	add.w	r1, r3, #12
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2202      	movs	r2, #2
 8000950:	4618      	mov	r0, r3
 8000952:	f018 fdf6 	bl	8019542 <strncpy>
	strncpy(min, date_time+14, 2);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f103 010e 	add.w	r1, r3, #14
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2202      	movs	r2, #2
 8000962:	4618      	mov	r0, r3
 8000964:	f018 fded 	bl	8019542 <strncpy>
	strncpy(ss, date_time+16, 2);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f103 0110 	add.w	r1, r3, #16
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2202      	movs	r2, #2
 8000974:	4618      	mov	r0, r3
 8000976:	f018 fde4 	bl	8019542 <strncpy>

	// ascii --> int --> bcd
	sDate.Year=dec2bin(atoi(yy));
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4618      	mov	r0, r3
 8000980:	f018 fa2c 	bl	8018ddc <atoi>
 8000984:	4603      	mov	r3, r0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff99 	bl	80008c0 <dec2bin>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <set_rtc+0x138>)
 8000994:	70da      	strb	r2, [r3, #3]
	sDate.Month=dec2bin(atoi(mm));
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	4618      	mov	r0, r3
 800099c:	f018 fa1e 	bl	8018ddc <atoi>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff8b 	bl	80008c0 <dec2bin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <set_rtc+0x138>)
 80009b0:	705a      	strb	r2, [r3, #1]
	sDate.Date=dec2bin(atoi(dd));
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f018 fa10 	bl	8018ddc <atoi>
 80009bc:	4603      	mov	r3, r0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff7d 	bl	80008c0 <dec2bin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <set_rtc+0x138>)
 80009cc:	709a      	strb	r2, [r3, #2]

	sTime.Hours=dec2bin(atoi(hh));
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4618      	mov	r0, r3
 80009d4:	f018 fa02 	bl	8018ddc <atoi>
 80009d8:	4603      	mov	r3, r0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff6f 	bl	80008c0 <dec2bin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <set_rtc+0x13c>)
 80009e8:	701a      	strb	r2, [r3, #0]
	sTime.Minutes=dec2bin(atoi(min));
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4618      	mov	r0, r3
 80009f0:	f018 f9f4 	bl	8018ddc <atoi>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff61 	bl	80008c0 <dec2bin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <set_rtc+0x13c>)
 8000a04:	705a      	strb	r2, [r3, #1]
	sTime.Seconds=dec2bin(atoi(ss));
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f018 f9e6 	bl	8018ddc <atoi>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff53 	bl	80008c0 <dec2bin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <set_rtc+0x13c>)
 8000a20:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000a22:	2201      	movs	r2, #1
 8000a24:	4906      	ldr	r1, [pc, #24]	; (8000a40 <set_rtc+0x138>)
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <set_rtc+0x140>)
 8000a28:	f005 ff9e 	bl	8006968 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4905      	ldr	r1, [pc, #20]	; (8000a44 <set_rtc+0x13c>)
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <set_rtc+0x140>)
 8000a32:	f005 feff 	bl	8006834 <HAL_RTC_SetTime>
}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200003a4 	.word	0x200003a4
 8000a44:	20000390 	.word	0x20000390
 8000a48:	20000450 	.word	0x20000450

08000a4c <flower_on>:
#endif
	}
}

void flower_on()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	21ff      	movs	r1, #255	; 0xff
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <flower_on+0x5c>)
 8000a58:	f004 fcde 	bl	8005418 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	e01a      	b.n	8000a98 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8000a62:	2210      	movs	r2, #16
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <flower_on+0x5c>)
 8000a72:	f004 fcd1 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8000a76:	2208      	movs	r2, #8
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	fa42 f303 	asr.w	r3, r2, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <flower_on+0x5c>)
 8000a86:	f004 fcc7 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000a8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a8e:	f002 fa8b 	bl	8002fa8 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3301      	adds	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dde1      	ble.n	8000a62 <flower_on+0x16>
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <flower_off>:


void flower_off()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	21ff      	movs	r1, #255	; 0xff
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <flower_off+0x5c>)
 8000ab8:	f004 fcae 	bl	8005418 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	e01a      	b.n	8000af8 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fa42 f303 	asr.w	r3, r2, r3
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <flower_off+0x5c>)
 8000ad2:	f004 fca1 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <flower_off+0x5c>)
 8000ae6:	f004 fc97 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000aea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aee:	f002 fa5b 	bl	8002fa8 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3301      	adds	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	dde1      	ble.n	8000ac2 <flower_off+0x16>
	}
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40020c00 	.word	0x40020c00

08000b0c <led_keepon_up>:

void led_keepon_up()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	e00f      	b.n	8000b38 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <led_keepon_up+0x3c>)
 8000b28:	f004 fc76 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b2c:	20c8      	movs	r0, #200	; 0xc8
 8000b2e:	f002 fa3b 	bl	8002fa8 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3301      	adds	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b07      	cmp	r3, #7
 8000b3c:	ddec      	ble.n	8000b18 <led_keepon_up+0xc>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <led_keepon_down>:

void led_keepon_down()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	e00f      	b.n	8000b78 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	fa42 f303 	asr.w	r3, r2, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <led_keepon_down+0x3c>)
 8000b68:	f004 fc56 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000b6c:	20c8      	movs	r0, #200	; 0xc8
 8000b6e:	f002 fa1b 	bl	8002fa8 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	ddec      	ble.n	8000b58 <led_keepon_down+0xc>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <led_on_up+0x50>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2bc7      	cmp	r3, #199	; 0xc7
 8000b96:	dd1e      	ble.n	8000bd6 <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <led_on_up+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000b9e:	f000 f861 	bl	8000c64 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <led_on_up+0x54>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <led_on_up+0x58>)
 8000bb4:	f004 fc30 	bl	8005418 <HAL_GPIO_WritePin>
		i++;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <led_on_up+0x54>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <led_on_up+0x54>)
 8000bc0:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <led_on_up+0x54>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	dd05      	ble.n	8000bd6 <led_on_up+0x4a>
		{
			i=0;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <led_on_up+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <led_on_up+0x5c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000bd4 	.word	0x20000bd4
 8000be0:	200003ac 	.word	0x200003ac
 8000be4:	40020c00 	.word	0x40020c00
 8000be8:	200003a8 	.word	0x200003a8

08000bec <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <led_on_down+0x50>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2bc7      	cmp	r3, #199	; 0xc7
 8000bf6:	dd1e      	ble.n	8000c36 <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <led_on_down+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000bfe:	f000 f831 	bl	8000c64 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <led_on_down+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	fa42 f303 	asr.w	r3, r2, r3
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <led_on_down+0x58>)
 8000c14:	f004 fc00 	bl	8005418 <HAL_GPIO_WritePin>
		i++;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <led_on_down+0x54>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <led_on_down+0x54>)
 8000c20:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <led_on_down+0x54>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b07      	cmp	r3, #7
 8000c28:	dd05      	ble.n	8000c36 <led_on_down+0x4a>
		{
			i=0;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <led_on_down+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <led_on_down+0x5c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000bd4 	.word	0x20000bd4
 8000c40:	200003b0 	.word	0x200003b0
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	200003a8 	.word	0x200003a8

08000c4c <led_all_on>:

void led_all_on(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <led_all_on+0x14>)
 8000c56:	f004 fbdf 	bl	8005418 <HAL_GPIO_WritePin>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <led_all_off>:

void led_all_off(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	21ff      	movs	r1, #255	; 0xff
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <led_all_off+0x14>)
 8000c6e:	f004 fbd3 	bl	8005418 <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c84:	1d39      	adds	r1, r7, #4
 8000c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <__io_putchar+0x20>)
 8000c8e:	f007 fc9c 	bl	80085ca <HAL_UART_Transmit>

  return ch;
 8000c92:	687b      	ldr	r3, [r7, #4]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000620 	.word	0x20000620

08000ca0 <delay_us>:
//----------  printf end ----------

void delay_us(unsigned long us)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <delay_us+0x2c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8000cb0:	bf00      	nop
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <delay_us+0x2c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d8f9      	bhi.n	8000cb2 <delay_us+0x12>
		;
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200005d8 	.word	0x200005d8

08000cd0 <HAL_GPIO_EXTI_Callback>:
// 1. move from Driver/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c to here
// 2. enter here every external interrupt
volatile int ext_int_no = -1;  // GPIO_Pin?�� 0번도 존재?��?���????? 구분?���????? ?��?��?��
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
printf("EXT INT\0");
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x70>)
 8000cdc:	f018 fa74 	bl	80191c8 <iprintf>
	switch(GPIO_Pin)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d01c      	beq.n	8000d20 <HAL_GPIO_EXTI_Callback+0x50>
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	dc26      	bgt.n	8000d38 <HAL_GPIO_EXTI_Callback+0x68>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d002      	beq.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x24>
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d00b      	beq.n	8000d0a <HAL_GPIO_EXTI_Callback+0x3a>
		ext_int_no=GPIO_Pin;
		nucleo_stm32f429zi_led_off();
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);  // LED3
		break;
	}
}
 8000cf2:	e021      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x68>
		ext_int_no=GPIO_Pin;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000cf8:	6013      	str	r3, [r2, #0]
		nucleo_stm32f429zi_led_off();
 8000cfa:	f000 f845 	bl	8000d88 <nucleo_stm32f429zi_led_off>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); // LED1
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2101      	movs	r1, #1
 8000d02:	4811      	ldr	r0, [pc, #68]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d04:	f004 fb88 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8000d08:	e016      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x68>
		ext_int_no=GPIO_Pin;
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d0e:	6013      	str	r3, [r2, #0]
		nucleo_stm32f429zi_led_off();
 8000d10:	f000 f83a 	bl	8000d88 <nucleo_stm32f429zi_led_off>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);   // LED2
 8000d14:	2201      	movs	r2, #1
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d1a:	f004 fb7d 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8000d1e:	e00b      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x68>
		ext_int_no=GPIO_Pin;
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d24:	6013      	str	r3, [r2, #0]
		nucleo_stm32f429zi_led_off();
 8000d26:	f000 f82f 	bl	8000d88 <nucleo_stm32f429zi_led_off>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);  // LED3
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d32:	f004 fb71 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8000d36:	bf00      	nop
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0801a630 	.word	0x0801a630
 8000d44:	20000138 	.word	0x20000138
 8000d48:	40020400 	.word	0x40020400

08000d4c <HAL_ADC_ConvCpltCallback>:
uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_ADC_ConvCpltCallback+0x30>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d109      	bne.n	8000d72 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <HAL_ADC_ConvCpltCallback+0x34>)
 8000d60:	f002 fb78 	bl	8003454 <HAL_ADC_GetValue>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_ADC_ConvCpltCallback+0x38>)
 8000d6a:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <HAL_ADC_ConvCpltCallback+0x34>)
 8000d6e:	f002 f983 	bl	8003078 <HAL_ADC_Start_IT>
	}
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40012000 	.word	0x40012000
 8000d80:	200003b4 	.word	0x200003b4
 8000d84:	20000bd8 	.word	0x20000bd8

08000d88 <nucleo_stm32f429zi_led_off>:
// led off on STM32F429ZI
void nucleo_stm32f429zi_led_off()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <nucleo_stm32f429zi_led_off+0x28>)
 8000d92:	f004 fb41 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <nucleo_stm32f429zi_led_off+0x28>)
 8000d9c:	f004 fb3c 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <nucleo_stm32f429zi_led_off+0x28>)
 8000da8:	f004 fb36 	bl	8005418 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020400 	.word	0x40020400

08000db4 <nucleo_stm32f429zi_led_on>:
void nucleo_stm32f429zi_led_on()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <nucleo_stm32f429zi_led_on+0x28>)
 8000dbe:	f004 fb2b 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <nucleo_stm32f429zi_led_on+0x28>)
 8000dc8:	f004 fb26 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd2:	4802      	ldr	r0, [pc, #8]	; (8000ddc <nucleo_stm32f429zi_led_on+0x28>)
 8000dd4:	f004 fb20 	bl	8005418 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020400 	.word	0x40020400

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f002 f89e 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f8ba 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f000 fc4c 	bl	8001688 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000df0:	f000 fbc8 	bl	8001584 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000df4:	f000 fc1a 	bl	800162c <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000df8:	f000 fbee 	bl	80015d8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000dfc:	f000 fb7a 	bl	80014f4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e00:	f000 fb9c 	bl	800153c <MX_TIM11_Init>
  MX_TIM3_Init();
 8000e04:	f000 fa5e 	bl	80012c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e08:	f000 fab0 	bl	800136c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000e0c:	f000 fa00 	bl	8001210 <MX_TIM2_Init>
  MX_RTC_Init();
 8000e10:	f000 f9a4 	bl	800115c <MX_RTC_Init>
  MX_TIM5_Init();
 8000e14:	f000 faf8 	bl	8001408 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000e18:	f000 f960 	bl	80010dc <MX_I2C1_Init>
  MX_ADC1_Init();
 8000e1c:	f000 f90c 	bl	8001038 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000e20:	2201      	movs	r2, #1
 8000e22:	4933      	ldr	r1, [pc, #204]	; (8000ef0 <main+0x110>)
 8000e24:	4833      	ldr	r0, [pc, #204]	; (8000ef4 <main+0x114>)
 8000e26:	f007 fc62 	bl	80086ee <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4932      	ldr	r1, [pc, #200]	; (8000ef8 <main+0x118>)
 8000e2e:	4833      	ldr	r0, [pc, #204]	; (8000efc <main+0x11c>)
 8000e30:	f007 fc5d 	bl	80086ee <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000e34:	4832      	ldr	r0, [pc, #200]	; (8000f00 <main+0x120>)
 8000e36:	f005 ff0b 	bl	8006c50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000e3a:	4832      	ldr	r0, [pc, #200]	; (8000f04 <main+0x124>)
 8000e3c:	f005 ff08 	bl	8006c50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4831      	ldr	r0, [pc, #196]	; (8000f08 <main+0x128>)
 8000e44:	f006 f9f2 	bl	800722c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4830      	ldr	r0, [pc, #192]	; (8000f0c <main+0x12c>)
 8000e4c:	f006 f888 	bl	8006f60 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000e50:	2100      	movs	r1, #0
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <main+0x130>)
 8000e54:	f005 ffbc 	bl	8006dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000e58:	210c      	movs	r1, #12
 8000e5a:	482e      	ldr	r0, [pc, #184]	; (8000f14 <main+0x134>)
 8000e5c:	f005 ffb8 	bl	8006dd0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000e60:	482d      	ldr	r0, [pc, #180]	; (8000f18 <main+0x138>)
 8000e62:	f002 f909 	bl	8003078 <HAL_ADC_Start_IT>

//  DHT11_Init();
//  i2c_lcd_init();
  init_dotmatrix();
 8000e66:	f7ff fbd5 	bl	8000614 <init_dotmatrix>

  TIM10_10ms_counter=0;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <main+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
//    buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e70:	f009 fd40 	bl	800a8f4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000e74:	482a      	ldr	r0, [pc, #168]	; (8000f20 <main+0x140>)
 8000e76:	f009 fe49 	bl	800ab0c <osMutexNew>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <main+0x144>)
 8000e7e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e80:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <main+0x148>)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4829      	ldr	r0, [pc, #164]	; (8000f2c <main+0x14c>)
 8000e86:	f009 fd94 	bl	800a9b2 <osThreadNew>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <main+0x150>)
 8000e8e:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8000e90:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <main+0x154>)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4828      	ldr	r0, [pc, #160]	; (8000f38 <main+0x158>)
 8000e96:	f009 fd8c 	bl	800a9b2 <osThreadNew>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <main+0x15c>)
 8000e9e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <main+0x160>)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4827      	ldr	r0, [pc, #156]	; (8000f44 <main+0x164>)
 8000ea6:	f009 fd84 	bl	800a9b2 <osThreadNew>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a26      	ldr	r2, [pc, #152]	; (8000f48 <main+0x168>)
 8000eae:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <main+0x16c>)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4826      	ldr	r0, [pc, #152]	; (8000f50 <main+0x170>)
 8000eb6:	f009 fd7c 	bl	800a9b2 <osThreadNew>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <main+0x174>)
 8000ebe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ec0:	f009 fd3c 	bl	800a93c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("cds sensor: %d\n", adcValue[0]);
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <main+0x178>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4824      	ldr	r0, [pc, #144]	; (8000f5c <main+0x17c>)
 8000ecc:	f018 f97c 	bl	80191c8 <iprintf>
	  if (adcValue[0] < 2500)
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <main+0x178>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d802      	bhi.n	8000ee2 <main+0x102>
	  {
		  nucleo_stm32f429zi_led_on();
 8000edc:	f7ff ff6a 	bl	8000db4 <nucleo_stm32f429zi_led_on>
 8000ee0:	e001      	b.n	8000ee6 <main+0x106>
	  }
	  else
	  {
		  nucleo_stm32f429zi_led_off();
 8000ee2:	f7ff ff51 	bl	8000d88 <nucleo_stm32f429zi_led_off>
	  }
	  HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f002 f85e 	bl	8002fa8 <HAL_Delay>
	  printf("cds sensor: %d\n", adcValue[0]);
 8000eec:	e7ea      	b.n	8000ec4 <main+0xe4>
 8000eee:	bf00      	nop
 8000ef0:	20000bc8 	.word	0x20000bc8
 8000ef4:	20000620 	.word	0x20000620
 8000ef8:	20000bc9 	.word	0x20000bc9
 8000efc:	20000664 	.word	0x20000664
 8000f00:	20000590 	.word	0x20000590
 8000f04:	200005d8 	.word	0x200005d8
 8000f08:	200004b8 	.word	0x200004b8
 8000f0c:	20000500 	.word	0x20000500
 8000f10:	20000470 	.word	0x20000470
 8000f14:	20000548 	.word	0x20000548
 8000f18:	200003b4 	.word	0x200003b4
 8000f1c:	20000bcc 	.word	0x20000bcc
 8000f20:	0801d2b8 	.word	0x0801d2b8
 8000f24:	20000bc4 	.word	0x20000bc4
 8000f28:	0801d228 	.word	0x0801d228
 8000f2c:	08001919 	.word	0x08001919
 8000f30:	20000bb4 	.word	0x20000bb4
 8000f34:	0801d24c 	.word	0x0801d24c
 8000f38:	08001a09 	.word	0x08001a09
 8000f3c:	20000bb8 	.word	0x20000bb8
 8000f40:	0801d270 	.word	0x0801d270
 8000f44:	08001a1d 	.word	0x08001a1d
 8000f48:	20000bbc 	.word	0x20000bbc
 8000f4c:	0801d294 	.word	0x0801d294
 8000f50:	08001a31 	.word	0x08001a31
 8000f54:	20000bc0 	.word	0x20000bc0
 8000f58:	20000bd8 	.word	0x20000bd8
 8000f5c:	0801a63c 	.word	0x0801a63c

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f018 f88d 	bl	801908e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <SystemClock_Config+0xd0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <SystemClock_Config+0xd0>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <SystemClock_Config+0xd0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <SystemClock_Config+0xd4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <SystemClock_Config+0xd4>)
 8000faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <SystemClock_Config+0xd4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd8:	23a8      	movs	r3, #168	; 0xa8
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 fd23 	bl	8005a34 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff4:	f000 fd4e 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001004:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2105      	movs	r1, #5
 8001016:	4618      	mov	r0, r3
 8001018:	f004 ff84 	bl	8005f24 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001022:	f000 fd37 	bl	8001a94 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	; 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <MX_ADC1_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001066:	2201      	movs	r2, #1
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_ADC1_Init+0x98>)
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_ADC1_Init+0xa0>)
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_ADC1_Init+0x98>)
 800109a:	f001 ffa9 	bl	8002ff0 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a4:	f000 fcf6 	bl	8001a94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010b0:	2307      	movs	r3, #7
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_ADC1_Init+0x98>)
 80010ba:	f002 f9ed 	bl	8003498 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c4:	f000 fce6 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200003b4 	.word	0x200003b4
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_I2C1_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_I2C1_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_I2C1_Init+0x74>)
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <MX_I2C1_Init+0x7c>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_I2C1_Init+0x74>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_I2C1_Init+0x74>)
 800111a:	f004 f9af 	bl	800547c <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fcb6 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_I2C1_Init+0x74>)
 800112c:	f004 faea 	bl	8005704 <HAL_I2CEx_ConfigAnalogFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001136:	f000 fcad 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C1_Init+0x74>)
 800113e:	f004 fb1d 	bl	800577c <HAL_I2CEx_ConfigDigitalFilter>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001148:	f000 fca4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200003fc 	.word	0x200003fc
 8001154:	40005400 	.word	0x40005400
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_RTC_Init+0xac>)
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <MX_RTC_Init+0xb0>)
 8001178:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_RTC_Init+0xac>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_RTC_Init+0xac>)
 8001182:	227f      	movs	r2, #127	; 0x7f
 8001184:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_RTC_Init+0xac>)
 8001188:	22ff      	movs	r2, #255	; 0xff
 800118a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_RTC_Init+0xac>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_RTC_Init+0xac>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_RTC_Init+0xac>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800119e:	481a      	ldr	r0, [pc, #104]	; (8001208 <MX_RTC_Init+0xac>)
 80011a0:	f005 fad2 	bl	8006748 <HAL_RTC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011aa:	f000 fc73 	bl	8001a94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 80011ae:	2309      	movs	r3, #9
 80011b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 80011b2:	2338      	movs	r3, #56	; 0x38
 80011b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <MX_RTC_Init+0xac>)
 80011ca:	f005 fb33 	bl	8006834 <HAL_RTC_SetTime>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80011d4:	f000 fc5e 	bl	8001a94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011d8:	2301      	movs	r3, #1
 80011da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 80011dc:	2310      	movs	r3, #16
 80011de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 80011e0:	2316      	movs	r3, #22
 80011e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80011e4:	2323      	movs	r3, #35	; 0x23
 80011e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_RTC_Init+0xac>)
 80011f0:	f005 fbba 	bl	8006968 <HAL_RTC_SetDate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011fa:	f000 fc4b 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000450 	.word	0x20000450
 800120c:	40002800 	.word	0x40002800

08001210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_TIM2_Init+0xb0>)
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_TIM2_Init+0xb0>)
 800123c:	f240 628f 	movw	r2, #1679	; 0x68f
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_TIM2_Init+0xb0>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM2_Init+0xb0>)
 800124a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM2_Init+0xb0>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM2_Init+0xb0>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <MX_TIM2_Init+0xb0>)
 800125e:	f005 fd67 	bl	8006d30 <HAL_TIM_PWM_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 fc14 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4619      	mov	r1, r3
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_TIM2_Init+0xb0>)
 800127c:	f007 f8c8 	bl	8008410 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001286:	f000 fc05 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128a:	2360      	movs	r3, #96	; 0x60
 800128c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800128e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001292:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM2_Init+0xb0>)
 80012a4:	f006 fa8e 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80012ae:	f000 fbf1 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM2_Init+0xb0>)
 80012b4:	f000 ff5e 	bl	8002174 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000470 	.word	0x20000470

080012c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <MX_TIM3_Init+0xa0>)
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MX_TIM3_Init+0xa4>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_TIM3_Init+0xa0>)
 80012e8:	2253      	movs	r2, #83	; 0x53
 80012ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM3_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM3_Init+0xa0>)
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM3_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM3_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <MX_TIM3_Init+0xa0>)
 8001308:	f005 ff40 	bl	800718c <HAL_TIM_IC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 fbbf 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_TIM3_Init+0xa0>)
 8001326:	f007 f873 	bl	8008410 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001330:	f000 fbb0 	bl	8001a94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001334:	230a      	movs	r3, #10
 8001336:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_TIM3_Init+0xa0>)
 800134c:	f006 f99e 	bl	800768c <HAL_TIM_IC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001356:	f000 fb9d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200004b8 	.word	0x200004b8
 8001368:	40000400 	.word	0x40000400

0800136c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_TIM4_Init+0x94>)
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <MX_TIM4_Init+0x98>)
 800138c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_TIM4_Init+0x94>)
 8001390:	f240 3247 	movw	r2, #839	; 0x347
 8001394:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_TIM4_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM4_Init+0x94>)
 800139e:	2263      	movs	r2, #99	; 0x63
 80013a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_TIM4_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_TIM4_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <MX_TIM4_Init+0x94>)
 80013b0:	f005 fbff 	bl	8006bb2 <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013ba:	f000 fb6b 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_TIM4_Init+0x94>)
 80013cc:	f006 fabc 	bl	8007948 <HAL_TIM_ConfigClockSource>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f000 fb5d 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_TIM4_Init+0x94>)
 80013e8:	f007 f812 	bl	8008410 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013f2:	f000 fb4f 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000500 	.word	0x20000500
 8001404:	40000800 	.word	0x40000800

08001408 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <MX_TIM5_Init+0xe4>)
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_TIM5_Init+0xe8>)
 800143c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_TIM5_Init+0xe4>)
 8001440:	2233      	movs	r2, #51	; 0x33
 8001442:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_TIM5_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <MX_TIM5_Init+0xe4>)
 800144c:	f240 128f 	movw	r2, #399	; 0x18f
 8001450:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_TIM5_Init+0xe4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <MX_TIM5_Init+0xe4>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <MX_TIM5_Init+0xe4>)
 8001460:	f005 fba7 	bl	8006bb2 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800146a:	f000 fb13 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	4619      	mov	r1, r3
 800147a:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_TIM5_Init+0xe4>)
 800147c:	f006 fa64 	bl	8007948 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001486:	f000 fb05 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_TIM5_Init+0xe4>)
 800148c:	f005 fc50 	bl	8006d30 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001496:	f000 fafd 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	4619      	mov	r1, r3
 80014a8:	4810      	ldr	r0, [pc, #64]	; (80014ec <MX_TIM5_Init+0xe4>)
 80014aa:	f006 ffb1 	bl	8008410 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80014b4:	f000 faee 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	2360      	movs	r3, #96	; 0x60
 80014ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 80014bc:	23c7      	movs	r3, #199	; 0xc7
 80014be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	220c      	movs	r2, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM5_Init+0xe4>)
 80014d0:	f006 f978 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80014da:	f000 fadb 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM5_Init+0xe4>)
 80014e0:	f000 fe48 	bl	8002174 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3738      	adds	r7, #56	; 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000548 	.word	0x20000548
 80014f0:	40000c00 	.word	0x40000c00

080014f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_TIM10_Init+0x40>)
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <MX_TIM10_Init+0x44>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_TIM10_Init+0x40>)
 8001500:	22a7      	movs	r2, #167	; 0xa7
 8001502:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_TIM10_Init+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_TIM10_Init+0x40>)
 800150c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001510:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_TIM10_Init+0x40>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_TIM10_Init+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_TIM10_Init+0x40>)
 8001520:	f005 fb47 	bl	8006bb2 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800152a:	f000 fab3 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000590 	.word	0x20000590
 8001538:	40014400 	.word	0x40014400

0800153c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM11_Init+0x40>)
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <MX_TIM11_Init+0x44>)
 8001544:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_TIM11_Init+0x40>)
 8001548:	22a7      	movs	r2, #167	; 0xa7
 800154a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_TIM11_Init+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_TIM11_Init+0x40>)
 8001554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001558:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_TIM11_Init+0x40>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_TIM11_Init+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM11_Init+0x40>)
 8001568:	f005 fb23 	bl	8006bb2 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001572:	f000 fa8f 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200005d8 	.word	0x200005d8
 8001580:	40014800 	.word	0x40014800

08001584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART3_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001590:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART3_UART_Init+0x4c>)
 80015bc:	f006 ffb8 	bl	8008530 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 fa65 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000620 	.word	0x20000620
 80015d4:	40004800 	.word	0x40004800

080015d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_USART6_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 80015e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART6_UART_Init+0x4c>)
 8001610:	f006 ff8e 	bl	8008530 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 fa3b 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000664 	.word	0x20000664
 8001628:	40011400 	.word	0x40011400

0800162c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001636:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800163a:	2204      	movs	r2, #4
 800163c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001640:	2202      	movs	r2, #2
 8001642:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800164c:	2202      	movs	r2, #2
 800164e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001652:	2201      	movs	r2, #1
 8001654:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001664:	2201      	movs	r2, #1
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001670:	f004 f8c3 	bl	80057fa <HAL_PCD_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 fa0b 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200006a8 	.word	0x200006a8

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
 80016a2:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a94      	ldr	r2, [pc, #592]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a8d      	ldr	r2, [pc, #564]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b87      	ldr	r3, [pc, #540]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <MX_GPIO_Init+0x270>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a78      	ldr	r2, [pc, #480]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a71      	ldr	r2, [pc, #452]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <MX_GPIO_Init+0x270>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <MX_GPIO_Init+0x270>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <MX_GPIO_Init+0x270>)
 800176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <MX_GPIO_Init+0x270>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001784:	485d      	ldr	r0, [pc, #372]	; (80018fc <MX_GPIO_Init+0x274>)
 8001786:	f003 fe47 	bl	8005418 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	485c      	ldr	r0, [pc, #368]	; (8001900 <MX_GPIO_Init+0x278>)
 8001790:	f003 fe42 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f244 0181 	movw	r1, #16513	; 0x4081
 800179a:	485a      	ldr	r0, [pc, #360]	; (8001904 <MX_GPIO_Init+0x27c>)
 800179c:	f003 fe3c 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a6:	4858      	ldr	r0, [pc, #352]	; (8001908 <MX_GPIO_Init+0x280>)
 80017a8:	f003 fe36 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80017ac:	2200      	movs	r2, #0
 80017ae:	f647 01ff 	movw	r1, #30975	; 0x78ff
 80017b2:	4856      	ldr	r0, [pc, #344]	; (800190c <MX_GPIO_Init+0x284>)
 80017b4:	f003 fe30 	bl	8005418 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	; 0x40
 80017bc:	4854      	ldr	r0, [pc, #336]	; (8001910 <MX_GPIO_Init+0x288>)
 80017be:	f003 fe2b 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80017c2:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	4848      	ldr	r0, [pc, #288]	; (80018fc <MX_GPIO_Init+0x274>)
 80017dc:	f003 fc58 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 80017e0:	f242 030d 	movw	r3, #8205	; 0x200d
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	4847      	ldr	r0, [pc, #284]	; (8001914 <MX_GPIO_Init+0x28c>)
 80017f8:	f003 fc4a 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80017fc:	2301      	movs	r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	483b      	ldr	r0, [pc, #236]	; (8001900 <MX_GPIO_Init+0x278>)
 8001814:	f003 fc3c 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001818:	f244 0381 	movw	r3, #16513	; 0x4081
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4834      	ldr	r0, [pc, #208]	; (8001904 <MX_GPIO_Init+0x27c>)
 8001832:	f003 fc2d 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	482e      	ldr	r0, [pc, #184]	; (8001908 <MX_GPIO_Init+0x280>)
 8001850:	f003 fc1e 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001854:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4824      	ldr	r0, [pc, #144]	; (80018fc <MX_GPIO_Init+0x274>)
 800186a:	f003 fc11 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800186e:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	4821      	ldr	r0, [pc, #132]	; (800190c <MX_GPIO_Init+0x284>)
 8001888:	f003 fc02 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0x288>)
 80018a4:	f003 fbf4 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4815      	ldr	r0, [pc, #84]	; (8001910 <MX_GPIO_Init+0x288>)
 80018bc:	f003 fbe8 	bl	8005090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2105      	movs	r1, #5
 80018c4:	2006      	movs	r0, #6
 80018c6:	f002 f8d7 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018ca:	2006      	movs	r0, #6
 80018cc:	f002 f8f0 	bl	8003ab0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2105      	movs	r1, #5
 80018d4:	2008      	movs	r0, #8
 80018d6:	f002 f8cf 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018da:	2008      	movs	r0, #8
 80018dc:	f002 f8e8 	bl	8003ab0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2105      	movs	r1, #5
 80018e4:	2009      	movs	r0, #9
 80018e6:	f002 f8c7 	bl	8003a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018ea:	2009      	movs	r0, #9
 80018ec:	f002 f8e0 	bl	8003ab0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40021000 	.word	0x40021000
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40021400 	.word	0x40021400
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40021800 	.word	0x40021800
 8001914:	40020800 	.word	0x40020800

08001918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001920:	f008 f980 	bl	8009c24 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  udp_echoserver_init();  // ADD_SIKWON
 8001924:	f001 f902 	bl	8002b2c <udp_echoserver_init>
  upcb1 = udp_new();	// ADD create new UDP control block
 8001928:	f014 fe58 	bl	80165dc <udp_new>
 800192c:	4603      	mov	r3, r0
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <StartDefaultTask+0xc8>)
 8001930:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&addr1, 10,10,15,52);	// client PC IP address
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <StartDefaultTask+0xcc>)
 8001934:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <StartDefaultTask+0xd0>)
 8001936:	601a      	str	r2, [r3, #0]
  udp_bind(upcb1, IP_ADDR_ANY,9999);	// ADD S/W port
 8001938:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <StartDefaultTask+0xc8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001940:	492a      	ldr	r1, [pc, #168]	; (80019ec <StartDefaultTask+0xd4>)
 8001942:	4618      	mov	r0, r3
 8001944:	f014 fd0c 	bl	8016360 <udp_bind>
  //-----------------------TCP/IP END ------------------------------------
  /* Infinite loop */
  for(;;)
  {
	ethernetif_input(&gnetif);  // ADD_SIKWON
 8001948:	4829      	ldr	r0, [pc, #164]	; (80019f0 <StartDefaultTask+0xd8>)
 800194a:	f008 fce1 	bl	800a310 <ethernetif_input>
	sys_check_timeouts();   // ADD_SIKWON
 800194e:	f014 f8e9 	bl	8015b24 <sys_check_timeouts>

	udp_connect(upcb1, &addr1, 9999);
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <StartDefaultTask+0xc8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f242 720f 	movw	r2, #9999	; 0x270f
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <StartDefaultTask+0xcc>)
 800195c:	4618      	mov	r0, r3
 800195e:	f014 fd87 	bl	8016470 <udp_connect>
	sprintf(temp_str, "Hello JINWUK !!!\n");
 8001962:	4924      	ldr	r1, [pc, #144]	; (80019f4 <StartDefaultTask+0xdc>)
 8001964:	4824      	ldr	r0, [pc, #144]	; (80019f8 <StartDefaultTask+0xe0>)
 8001966:	f017 fd75 	bl	8019454 <siprintf>
	p1 = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)temp_str), PBUF_POOL);
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <StartDefaultTask+0xe0>)
 800196c:	f7fe fc40 	bl	80001f0 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	b29b      	uxth	r3, r3
 8001974:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001978:	4619      	mov	r1, r3
 800197a:	2036      	movs	r0, #54	; 0x36
 800197c:	f00e f84e 	bl	800fa1c <pbuf_alloc>
 8001980:	4603      	mov	r3, r0
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <StartDefaultTask+0xe4>)
 8001984:	6013      	str	r3, [r2, #0]
	if(p1 != NULL)	// OK alloc
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <StartDefaultTask+0xe4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d01e      	beq.n	80019cc <StartDefaultTask+0xb4>
	{
		// 1. copy data to pbuf
		pbuf_take(p1, (char*)temp_str, strlen((char*)temp_str));
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <StartDefaultTask+0xe4>)
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <StartDefaultTask+0xe0>)
 8001994:	f7fe fc2c 	bl	80001f0 <strlen>
 8001998:	4603      	mov	r3, r0
 800199a:	b29b      	uxth	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4916      	ldr	r1, [pc, #88]	; (80019f8 <StartDefaultTask+0xe0>)
 80019a0:	4620      	mov	r0, r4
 80019a2:	f00e fd97 	bl	80104d4 <pbuf_take>
		// 2. send udp data
		udp_send(upcb1, p1);
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <StartDefaultTask+0xc8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a14      	ldr	r2, [pc, #80]	; (80019fc <StartDefaultTask+0xe4>)
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f014 faeb 	bl	8015f8c <udp_send>
		// 3. free the UDP connection
		udp_disconnect(upcb1);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <StartDefaultTask+0xc8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f014 fdc6 	bl	801654c <udp_disconnect>

		// 4. free pbuf
		pbuf_free(p1);
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <StartDefaultTask+0xe4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00e fb0d 	bl	800ffe4 <pbuf_free>
 80019ca:	e005      	b.n	80019d8 <StartDefaultTask+0xc0>
	}
	else
	{
		HAL_UART_Transmit(&huart3, "pbuf not alloc!!\n", strlen("pbuf not alloc!!\n"), 10);
 80019cc:	230a      	movs	r3, #10
 80019ce:	2211      	movs	r2, #17
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <StartDefaultTask+0xe8>)
 80019d2:	480c      	ldr	r0, [pc, #48]	; (8001a04 <StartDefaultTask+0xec>)
 80019d4:	f006 fdf9 	bl	80085ca <HAL_UART_Transmit>
	}

    osDelay(100);
 80019d8:	2064      	movs	r0, #100	; 0x64
 80019da:	f009 f87c 	bl	800aad6 <osDelay>
  {
 80019de:	e7b3      	b.n	8001948 <StartDefaultTask+0x30>
 80019e0:	20000c10 	.word	0x20000c10
 80019e4:	20000be0 	.word	0x20000be0
 80019e8:	340f0a0a 	.word	0x340f0a0a
 80019ec:	0801d3fc 	.word	0x0801d3fc
 80019f0:	20000cd8 	.word	0x20000cd8
 80019f4:	0801a64c 	.word	0x0801a64c
 80019f8:	20000be8 	.word	0x20000be8
 80019fc:	20000be4 	.word	0x20000be4
 8001a00:	0801a660 	.word	0x0801a660
 8001a04:	20000620 	.word	0x20000620

08001a08 <Task1_func>:
* @retval None
*/
extern void init_dotmatrix(void);
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
  /* Infinite loop */
  for(;;)
  {
    dotmatrix_main();
 8001a10:	f7fe fed4 	bl	80007bc <dotmatrix_main>
    osDelay(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f009 f85e 	bl	800aad6 <osDelay>
    dotmatrix_main();
 8001a1a:	e7f9      	b.n	8001a10 <Task1_func+0x8>

08001a1c <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main_test();
 8001a24:	f000 f84c 	bl	8001ac0 <stepmotor_main_test>
    osDelay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f009 f854 	bl	800aad6 <osDelay>
	stepmotor_main_test();
 8001a2e:	e7f9      	b.n	8001a24 <Task2_func+0x8>

08001a30 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
 	pc_command_processing();
 8001a38:	f000 ff60 	bl	80028fc <pc_command_processing>
    bt_command_processing();
 8001a3c:	f000 fffc 	bl	8002a38 <bt_command_processing>
    osDelay(1);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f009 f848 	bl	800aad6 <osDelay>
 	pc_command_processing();
 8001a46:	e7f7      	b.n	8001a38 <Task3_func+0x8>

08001a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a5a:	f001 fa85 	bl	8002f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM10)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d109      	bne.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a70:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a7a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40001000 	.word	0x40001000
 8001a88:	40014400 	.word	0x40014400
 8001a8c:	20000bcc 	.word	0x20000bcc
 8001a90:	20000bd0 	.word	0x20000bd0

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>

08001a9e <set_rpm>:
//                           = 4612ms
//                           = 4.6초
// 60초 / 4.6(1회전시 소요시간 초) ==> 13회전
// 시계방향으로 1회전 <---> 반시계방향으로 1회전
void set_rpm(int rpm) // rpm 1~ 13
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 8001aa6:	f643 1238 	movw	r2, #14648	; 0x3938
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f8f5 	bl	8000ca0 <delay_us>
	// 최대 speed 기준(13) : delay_us(1126);
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <stepmotor_main_test>:
#define IDLE     0
#define FORWARD  1
#define BACKWARD 2
int stepmotor_state=IDLE;
void stepmotor_main_test(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
#if 1
// 버튼 처리에 의한 스텝모터 구동 프로그램 작성
	switch(stepmotor_state)
 8001ac4:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d034      	beq.n	8001b36 <stepmotor_main_test+0x76>
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	dc58      	bgt.n	8001b82 <stepmotor_main_test+0xc2>
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <stepmotor_main_test+0x1a>
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d00d      	beq.n	8001af4 <stepmotor_main_test+0x34>
			set_rpm(13);  // rpm값만큼 wait
		}
	}

#endif
}
 8001ad8:	e053      	b.n	8001b82 <stepmotor_main_test+0xc2>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae0:	482a      	ldr	r0, [pc, #168]	; (8001b8c <stepmotor_main_test+0xcc>)
 8001ae2:	f7fe fd5f 	bl	80005a4 <get_button>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d145      	bne.n	8001b78 <stepmotor_main_test+0xb8>
			stepmotor_state = FORWARD;
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
		break;
 8001af2:	e041      	b.n	8001b78 <stepmotor_main_test+0xb8>
		stepmotor_drive(stepmotor_state);
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f849 	bl	8001b90 <stepmotor_drive>
		set_rpm(10);    // rpm 속도 조절
 8001afe:	200a      	movs	r0, #10
 8001b00:	f7ff ffcd 	bl	8001a9e <set_rpm>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0a:	4820      	ldr	r0, [pc, #128]	; (8001b8c <stepmotor_main_test+0xcc>)
 8001b0c:	f7fe fd4a 	bl	80005a4 <get_button>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <stepmotor_main_test+0x5c>
			stepmotor_state = BACKWARD;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b22:	481a      	ldr	r0, [pc, #104]	; (8001b8c <stepmotor_main_test+0xcc>)
 8001b24:	f7fe fd3e 	bl	80005a4 <get_button>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d126      	bne.n	8001b7c <stepmotor_main_test+0xbc>
			stepmotor_state = IDLE;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
		break;
 8001b34:	e022      	b.n	8001b7c <stepmotor_main_test+0xbc>
		stepmotor_drive(stepmotor_state);
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f828 	bl	8001b90 <stepmotor_drive>
		set_rpm(10);    // rpm 속도 조절
 8001b40:	200a      	movs	r0, #10
 8001b42:	f7ff ffac 	bl	8001a9e <set_rpm>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <stepmotor_main_test+0xcc>)
 8001b4e:	f7fe fd29 	bl	80005a4 <get_button>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <stepmotor_main_test+0x9e>
			stepmotor_state = FORWARD;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <stepmotor_main_test+0xcc>)
 8001b66:	f7fe fd1d 	bl	80005a4 <get_button>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <stepmotor_main_test+0xc0>
			stepmotor_state = IDLE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <stepmotor_main_test+0xc8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
		break;
 8001b76:	e003      	b.n	8001b80 <stepmotor_main_test+0xc0>
		break;
 8001b78:	bf00      	nop
 8001b7a:	e002      	b.n	8001b82 <stepmotor_main_test+0xc2>
		break;
 8001b7c:	bf00      	nop
 8001b7e:	e000      	b.n	8001b82 <stepmotor_main_test+0xc2>
		break;
 8001b80:	bf00      	nop
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000c14 	.word	0x20000c14
 8001b8c:	40021000 	.word	0x40021000

08001b90 <stepmotor_drive>:
//
// direction : 1 == 시계방향 회전
//             2 ---> 반시계
//             0 : idle
void stepmotor_drive(int direction)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	static int step=0;   // static을 쓰면 전역변수 처럼 동작

	switch(step){
 8001b98:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <stepmotor_drive+0x218>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	f200 80db 	bhi.w	8001d58 <stepmotor_drive+0x1c8>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <stepmotor_drive+0x18>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bc9 	.word	0x08001bc9
 8001bac:	08001bfb 	.word	0x08001bfb
 8001bb0:	08001c2d 	.word	0x08001c2d
 8001bb4:	08001c5f 	.word	0x08001c5f
 8001bb8:	08001c91 	.word	0x08001c91
 8001bbc:	08001cc3 	.word	0x08001cc3
 8001bc0:	08001cf5 	.word	0x08001cf5
 8001bc4:	08001d27 	.word	0x08001d27
	case 0:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bce:	4877      	ldr	r0, [pc, #476]	; (8001dac <stepmotor_drive+0x21c>)
 8001bd0:	f003 fc22 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bda:	4874      	ldr	r0, [pc, #464]	; (8001dac <stepmotor_drive+0x21c>)
 8001bdc:	f003 fc1c 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	4871      	ldr	r0, [pc, #452]	; (8001dac <stepmotor_drive+0x21c>)
 8001be8:	f003 fc16 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf2:	486e      	ldr	r0, [pc, #440]	; (8001dac <stepmotor_drive+0x21c>)
 8001bf4:	f003 fc10 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001bf8:	e0ae      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 1:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c00:	486a      	ldr	r0, [pc, #424]	; (8001dac <stepmotor_drive+0x21c>)
 8001c02:	f003 fc09 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001c06:	2201      	movs	r2, #1
 8001c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0c:	4867      	ldr	r0, [pc, #412]	; (8001dac <stepmotor_drive+0x21c>)
 8001c0e:	f003 fc03 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c18:	4864      	ldr	r0, [pc, #400]	; (8001dac <stepmotor_drive+0x21c>)
 8001c1a:	f003 fbfd 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c24:	4861      	ldr	r0, [pc, #388]	; (8001dac <stepmotor_drive+0x21c>)
 8001c26:	f003 fbf7 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001c2a:	e095      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 2:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c32:	485e      	ldr	r0, [pc, #376]	; (8001dac <stepmotor_drive+0x21c>)
 8001c34:	f003 fbf0 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c3e:	485b      	ldr	r0, [pc, #364]	; (8001dac <stepmotor_drive+0x21c>)
 8001c40:	f003 fbea 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4858      	ldr	r0, [pc, #352]	; (8001dac <stepmotor_drive+0x21c>)
 8001c4c:	f003 fbe4 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c56:	4855      	ldr	r0, [pc, #340]	; (8001dac <stepmotor_drive+0x21c>)
 8001c58:	f003 fbde 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001c5c:	e07c      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 3:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c64:	4851      	ldr	r0, [pc, #324]	; (8001dac <stepmotor_drive+0x21c>)
 8001c66:	f003 fbd7 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c70:	484e      	ldr	r0, [pc, #312]	; (8001dac <stepmotor_drive+0x21c>)
 8001c72:	f003 fbd1 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7c:	484b      	ldr	r0, [pc, #300]	; (8001dac <stepmotor_drive+0x21c>)
 8001c7e:	f003 fbcb 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c88:	4848      	ldr	r0, [pc, #288]	; (8001dac <stepmotor_drive+0x21c>)
 8001c8a:	f003 fbc5 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001c8e:	e063      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 4:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c96:	4845      	ldr	r0, [pc, #276]	; (8001dac <stepmotor_drive+0x21c>)
 8001c98:	f003 fbbe 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	4842      	ldr	r0, [pc, #264]	; (8001dac <stepmotor_drive+0x21c>)
 8001ca4:	f003 fbb8 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	483f      	ldr	r0, [pc, #252]	; (8001dac <stepmotor_drive+0x21c>)
 8001cb0:	f003 fbb2 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cba:	483c      	ldr	r0, [pc, #240]	; (8001dac <stepmotor_drive+0x21c>)
 8001cbc:	f003 fbac 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001cc0:	e04a      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 5:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc8:	4838      	ldr	r0, [pc, #224]	; (8001dac <stepmotor_drive+0x21c>)
 8001cca:	f003 fba5 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd4:	4835      	ldr	r0, [pc, #212]	; (8001dac <stepmotor_drive+0x21c>)
 8001cd6:	f003 fb9f 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce0:	4832      	ldr	r0, [pc, #200]	; (8001dac <stepmotor_drive+0x21c>)
 8001ce2:	f003 fb99 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cec:	482f      	ldr	r0, [pc, #188]	; (8001dac <stepmotor_drive+0x21c>)
 8001cee:	f003 fb93 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001cf2:	e031      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 6:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cfa:	482c      	ldr	r0, [pc, #176]	; (8001dac <stepmotor_drive+0x21c>)
 8001cfc:	f003 fb8c 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d06:	4829      	ldr	r0, [pc, #164]	; (8001dac <stepmotor_drive+0x21c>)
 8001d08:	f003 fb86 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d12:	4826      	ldr	r0, [pc, #152]	; (8001dac <stepmotor_drive+0x21c>)
 8001d14:	f003 fb80 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1e:	4823      	ldr	r0, [pc, #140]	; (8001dac <stepmotor_drive+0x21c>)
 8001d20:	f003 fb7a 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001d24:	e018      	b.n	8001d58 <stepmotor_drive+0x1c8>
	case 7:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2c:	481f      	ldr	r0, [pc, #124]	; (8001dac <stepmotor_drive+0x21c>)
 8001d2e:	f003 fb73 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <stepmotor_drive+0x21c>)
 8001d3a:	f003 fb6d 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d44:	4819      	ldr	r0, [pc, #100]	; (8001dac <stepmotor_drive+0x21c>)
 8001d46:	f003 fb67 	bl	8005418 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d50:	4816      	ldr	r0, [pc, #88]	; (8001dac <stepmotor_drive+0x21c>)
 8001d52:	f003 fb61 	bl	8005418 <HAL_GPIO_WritePin>
		break;
 8001d56:	bf00      	nop
	}
	if (direction == 1)  // 정회전
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d110      	bne.n	8001d80 <stepmotor_drive+0x1f0>
	{
		step++;   // for (step=0; step < 8; step++)
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <stepmotor_drive+0x218>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <stepmotor_drive+0x218>)
 8001d66:	6013      	str	r3, [r2, #0]
		step %= 8;  // 다음 진행할 step 준비
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <stepmotor_drive+0x218>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	f002 0207 	and.w	r2, r2, #7
 8001d76:	bf58      	it	pl
 8001d78:	4253      	negpl	r3, r2
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <stepmotor_drive+0x218>)
 8001d7c:	6013      	str	r3, [r2, #0]
	else if (direction == 2) // 역회전
	{
		step--;
		if (step < 0) step = 7;
	}
}
 8001d7e:	e00e      	b.n	8001d9e <stepmotor_drive+0x20e>
	else if (direction == 2) // 역회전
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d10b      	bne.n	8001d9e <stepmotor_drive+0x20e>
		step--;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <stepmotor_drive+0x218>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <stepmotor_drive+0x218>)
 8001d8e:	6013      	str	r3, [r2, #0]
		if (step < 0) step = 7;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <stepmotor_drive+0x218>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da02      	bge.n	8001d9e <stepmotor_drive+0x20e>
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <stepmotor_drive+0x218>)
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000c18 	.word	0x20000c18
 8001dac:	40020c00 	.word	0x40020c00

08001db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_MspInit+0x54>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_MspInit+0x54>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_MspInit+0x54>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_MspInit+0x54>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_MspInit+0x54>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_MspInit+0x54>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	210f      	movs	r1, #15
 8001df2:	f06f 0001 	mvn.w	r0, #1
 8001df6:	f001 fe3f 	bl	8003a78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_ADC_MspInit+0x8c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d12f      	bne.n	8001e8a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_ADC_MspInit+0x90>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_ADC_MspInit+0x90>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_ADC_MspInit+0x90>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_ADC_MspInit+0x90>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_ADC_MspInit+0x90>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_ADC_MspInit+0x90>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e62:	2310      	movs	r3, #16
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e66:	2303      	movs	r3, #3
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4809      	ldr	r0, [pc, #36]	; (8001e9c <HAL_ADC_MspInit+0x94>)
 8001e76:	f003 f90b 	bl	8005090 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	2012      	movs	r0, #18
 8001e80:	f001 fdfa 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e84:	2012      	movs	r0, #18
 8001e86:	f001 fe13 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012000 	.word	0x40012000
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_I2C_MspInit+0x84>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12c      	bne.n	8001f1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_I2C_MspInit+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_I2C_MspInit+0x88>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_I2C_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <HAL_I2C_MspInit+0x8c>)
 8001efc:	f003 f8c8 	bl	8005090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_I2C_MspInit+0x88>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_I2C_MspInit+0x88>)
 8001f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_I2C_MspInit+0x88>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40005400 	.word	0x40005400
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	2230      	movs	r2, #48	; 0x30
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f017 f8a4 	bl	801908e <memset>
  if(hrtc->Instance==RTC)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_RTC_MspInit+0x4c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d111      	bne.n	8001f74 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f50:	2320      	movs	r3, #32
 8001f52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 fa32 	bl	80063c8 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f6a:	f7ff fd93 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <HAL_RTC_MspInit+0x50>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3738      	adds	r7, #56	; 0x38
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40002800 	.word	0x40002800
 8001f80:	42470e3c 	.word	0x42470e3c

08001f84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d115      	bne.n	8001fc2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_TIM_PWM_MspInit+0x48>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_TIM_PWM_MspInit+0x48>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_TIM_PWM_MspInit+0x48>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	201c      	movs	r0, #28
 8001fb8:	f001 fd5e 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fbc:	201c      	movs	r0, #28
 8001fbe:	f001 fd77 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_TIM_IC_MspInit+0x94>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d133      	bne.n	800205a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_TIM_IC_MspInit+0x98>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_TIM_IC_MspInit+0x98>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_TIM_IC_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_TIM_IC_MspInit+0x98>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_TIM_IC_MspInit+0x98>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_TIM_IC_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800203a:	2302      	movs	r3, #2
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_TIM_IC_MspInit+0x9c>)
 8002046:	f003 f823 	bl	8005090 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	201d      	movs	r0, #29
 8002050:	f001 fd12 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002054:	201d      	movs	r0, #29
 8002056:	f001 fd2b 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40000400 	.word	0x40000400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_TIM_Base_MspInit+0xf0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d116      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a36      	ldr	r2, [pc, #216]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2105      	movs	r1, #5
 80020a2:	201e      	movs	r0, #30
 80020a4:	f001 fce8 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020a8:	201e      	movs	r0, #30
 80020aa:	f001 fd01 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80020ae:	e052      	b.n	8002156 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <HAL_TIM_Base_MspInit+0xf8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d116      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2105      	movs	r1, #5
 80020da:	2032      	movs	r0, #50	; 0x32
 80020dc:	f001 fccc 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020e0:	2032      	movs	r0, #50	; 0x32
 80020e2:	f001 fce5 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 80020e6:	e036      	b.n	8002156 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_TIM_Base_MspInit+0xfc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d116      	bne.n	8002120 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	2019      	movs	r0, #25
 8002114:	f001 fcb0 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002118:	2019      	movs	r0, #25
 800211a:	f001 fcc9 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 800211e:	e01a      	b.n	8002156 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_Base_MspInit+0x100>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d115      	bne.n	8002156 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_TIM_Base_MspInit+0xf4>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2105      	movs	r1, #5
 800214a:	201a      	movs	r0, #26
 800214c:	f001 fc94 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002150:	201a      	movs	r0, #26
 8002152:	f001 fcad 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40000800 	.word	0x40000800
 8002164:	40023800 	.word	0x40023800
 8002168:	40000c00 	.word	0x40000c00
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800

08002174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d11e      	bne.n	80021d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_TIM_MspPostInit+0xb0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <HAL_TIM_MspPostInit+0xb0>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <HAL_TIM_MspPostInit+0xb0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 80021b2:	2320      	movs	r3, #32
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c2:	2301      	movs	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4816      	ldr	r0, [pc, #88]	; (8002228 <HAL_TIM_MspPostInit+0xb4>)
 80021ce:	f002 ff5f 	bl	8005090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021d2:	e022      	b.n	800221a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_TIM_MspPostInit+0xb8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11d      	bne.n	800221a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_TIM_MspPostInit+0xb0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_TIM_MspPostInit+0xb0>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_TIM_MspPostInit+0xb0>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021fa:	2308      	movs	r3, #8
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800220a:	2302      	movs	r3, #2
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <HAL_TIM_MspPostInit+0xb4>)
 8002216:	f002 ff3b 	bl	8005090 <HAL_GPIO_Init>
}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40000c00 	.word	0x40000c00

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_UART_MspInit+0x108>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d135      	bne.n	80022be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_UART_MspInit+0x10c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a38      	ldr	r2, [pc, #224]	; (800233c <HAL_UART_MspInit+0x10c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_UART_MspInit+0x10c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_UART_MspInit+0x10c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_UART_MspInit+0x10c>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_UART_MspInit+0x10c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800228a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800228e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800229c:	2307      	movs	r3, #7
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4826      	ldr	r0, [pc, #152]	; (8002340 <HAL_UART_MspInit+0x110>)
 80022a8:	f002 fef2 	bl	8005090 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2105      	movs	r1, #5
 80022b0:	2027      	movs	r0, #39	; 0x27
 80022b2:	f001 fbe1 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022b6:	2027      	movs	r0, #39	; 0x27
 80022b8:	f001 fbfa 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80022bc:	e038      	b.n	8002330 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_UART_MspInit+0x114>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d133      	bne.n	8002330 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_UART_MspInit+0x10c>)
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_UART_MspInit+0x10c>)
 80022d2:	f043 0320 	orr.w	r3, r3, #32
 80022d6:	6453      	str	r3, [r2, #68]	; 0x44
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_UART_MspInit+0x10c>)
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_UART_MspInit+0x10c>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_UART_MspInit+0x10c>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_UART_MspInit+0x10c>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002300:	23c0      	movs	r3, #192	; 0xc0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002310:	2308      	movs	r3, #8
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <HAL_UART_MspInit+0x118>)
 800231c:	f002 feb8 	bl	8005090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2105      	movs	r1, #5
 8002324:	2047      	movs	r0, #71	; 0x47
 8002326:	f001 fba7 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800232a:	2047      	movs	r0, #71	; 0x47
 800232c:	f001 fbc0 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	; 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40004800 	.word	0x40004800
 800233c:	40023800 	.word	0x40023800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40011400 	.word	0x40011400
 8002348:	40020800 	.word	0x40020800

0800234c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236c:	d13f      	bne.n	80023ee <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800238a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800239c:	230a      	movs	r3, #10
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4815      	ldr	r0, [pc, #84]	; (80023fc <HAL_PCD_MspInit+0xb0>)
 80023a8:	f002 fe72 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	480e      	ldr	r0, [pc, #56]	; (80023fc <HAL_PCD_MspInit+0xb0>)
 80023c2:	f002 fe65 	bl	8005090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 80023cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d0:	6353      	str	r3, [r2, #52]	; 0x34
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_PCD_MspInit+0xac>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_InitTick+0xe4>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_InitTick+0xe4>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_InitTick+0xe4>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800242c:	f107 0210 	add.w	r2, r7, #16
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f003 ff94 	bl	8006364 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002446:	f003 ff65 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 800244a:	6378      	str	r0, [r7, #52]	; 0x34
 800244c:	e004      	b.n	8002458 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800244e:	f003 ff61 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8002452:	4603      	mov	r3, r0
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_InitTick+0xe8>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9b      	lsrs	r3, r3, #18
 8002462:	3b01      	subs	r3, #1
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_InitTick+0xec>)
 8002468:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_InitTick+0xf0>)
 800246a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_InitTick+0xec>)
 800246e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002472:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_InitTick+0xec>)
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_InitTick+0xec>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_InitTick+0xec>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_InitTick+0xec>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800248c:	4817      	ldr	r0, [pc, #92]	; (80024ec <HAL_InitTick+0xec>)
 800248e:	f004 fb90 	bl	8006bb2 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800249c:	2b00      	cmp	r3, #0
 800249e:	d11b      	bne.n	80024d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <HAL_InitTick+0xec>)
 80024a2:	f004 fbd5 	bl	8006c50 <HAL_TIM_Base_Start_IT>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b4:	2036      	movs	r0, #54	; 0x36
 80024b6:	f001 fafb 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d808      	bhi.n	80024d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	2036      	movs	r0, #54	; 0x36
 80024c6:	f001 fad7 	bl	8003a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_InitTick+0xf4>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	e002      	b.n	80024d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3738      	adds	r7, #56	; 0x38
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	431bde83 	.word	0x431bde83
 80024ec:	20000c1c 	.word	0x20000c1c
 80024f0:	40001000 	.word	0x40001000
 80024f4:	20000140 	.word	0x20000140

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <NMI_Handler+0x4>

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 8002528:	2001      	movs	r0, #1
 800252a:	f002 ff8f 	bl	800544c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}

08002532 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 8002536:	2004      	movs	r0, #4
 8002538:	f002 ff88 	bl	800544c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 8002544:	2008      	movs	r0, #8
 8002546:	f002 ff81 	bl	800544c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <ADC_IRQHandler+0x10>)
 8002556:	f000 fe6d 	bl	8003234 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003b4 	.word	0x200003b4

08002564 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800256a:	f004 ff87 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000590 	.word	0x20000590

08002578 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800257e:	f004 ff7d 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200005d8 	.word	0x200005d8

0800258c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM2_IRQHandler+0x10>)
 8002592:	f004 ff73 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000470 	.word	0x20000470

080025a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM3_IRQHandler+0x10>)
 80025a6:	f004 ff69 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200004b8 	.word	0x200004b8

080025b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM4_IRQHandler+0x10>)
 80025ba:	f004 ff5f 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000500 	.word	0x20000500

080025c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <USART3_IRQHandler+0x10>)
 80025ce:	f006 f8bf 	bl	8008750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000620 	.word	0x20000620

080025dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM5_IRQHandler+0x10>)
 80025e2:	f004 ff4b 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000548 	.word	0x20000548

080025f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM6_DAC_IRQHandler+0x10>)
 80025f6:	f004 ff41 	bl	800747c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000c1c 	.word	0x20000c1c

08002604 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <ETH_IRQHandler+0x10>)
 800260a:	f001 fe6b 	bl	80042e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000581c 	.word	0x2000581c

08002618 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <ETH_WKUP_IRQHandler+0x10>)
 800261e:	f001 fe61 	bl	80042e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000581c 	.word	0x2000581c

0800262c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <USART6_IRQHandler+0x10>)
 8002632:	f006 f88d 	bl	8008750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000664 	.word	0x20000664

08002640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_kill>:

int _kill(int pid, int sig)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <_kill+0x20>)
 800265c:	2216      	movs	r2, #22
 800265e:	601a      	str	r2, [r3, #0]
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	2000dc04 	.word	0x2000dc04

08002674 <_exit>:

void _exit (int status)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffe5 	bl	8002650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002686:	e7fe      	b.n	8002686 <_exit+0x12>

08002688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e00a      	b.n	80026b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800269a:	f3af 8000 	nop.w
 800269e:	4601      	mov	r1, r0
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	60ba      	str	r2, [r7, #8]
 80026a6:	b2ca      	uxtb	r2, r1
 80026a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbf0      	blt.n	800269a <_read+0x12>
  }

  return len;
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e009      	b.n	80026e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	60ba      	str	r2, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe facd 	bl	8000c7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dbf1      	blt.n	80026d4 <_write+0x12>
  }
  return len;
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_close>:

int _close(int file)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002722:	605a      	str	r2, [r3, #4]
  return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_isatty>:

int _isatty(int file)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d205      	bcs.n	80027a0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_sbrk+0x6c>)
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	e009      	b.n	80027b4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <_sbrk+0x64>)
 80027b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20030000 	.word	0x20030000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	20000c64 	.word	0x20000c64
 80027cc:	2000dc08 	.word	0x2000dc08
 80027d0:	2000dc04 	.word	0x2000dc04

080027d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <SystemInit+0x20>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <SystemInit+0x20>)
 80027e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a32      	ldr	r2, [pc, #200]	; (80028cc <HAL_UART_RxCpltCallback+0xd4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d12c      	bne.n	8002862 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b27      	cmp	r3, #39	; 0x27
 800280e:	dc1d      	bgt.n	800284c <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002810:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_UART_RxCpltCallback+0xdc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b0a      	cmp	r3, #10
 8002816:	d003      	beq.n	8002820 <HAL_UART_RxCpltCallback+0x28>
 8002818:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_UART_RxCpltCallback+0xdc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b0d      	cmp	r3, #13
 800281e:	d10b      	bne.n	8002838 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <HAL_UART_RxCpltCallback+0xe0>)
 8002826:	2100      	movs	r1, #0
 8002828:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 800282a:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_UART_RxCpltCallback+0xe4>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e00f      	b.n	8002858 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	4924      	ldr	r1, [pc, #144]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 8002840:	600a      	str	r2, [r1, #0]
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_UART_RxCpltCallback+0xdc>)
 8002844:	7811      	ldrb	r1, [r2, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <HAL_UART_RxCpltCallback+0xe0>)
 8002848:	54d1      	strb	r1, [r2, r3]
 800284a:	e005      	b.n	8002858 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8002852:	4823      	ldr	r0, [pc, #140]	; (80028e0 <HAL_UART_RxCpltCallback+0xe8>)
 8002854:	f016 fd3e 	bl	80192d4 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002858:	2201      	movs	r2, #1
 800285a:	491e      	ldr	r1, [pc, #120]	; (80028d4 <HAL_UART_RxCpltCallback+0xdc>)
 800285c:	481b      	ldr	r0, [pc, #108]	; (80028cc <HAL_UART_RxCpltCallback+0xd4>)
 800285e:	f005 ff46 	bl	80086ee <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <HAL_UART_RxCpltCallback+0xec>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12c      	bne.n	80028c4 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_UART_RxCpltCallback+0xf0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b27      	cmp	r3, #39	; 0x27
 8002870:	dc1d      	bgt.n	80028ae <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_UART_RxCpltCallback+0xf4>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b0a      	cmp	r3, #10
 8002878:	d003      	beq.n	8002882 <HAL_UART_RxCpltCallback+0x8a>
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_UART_RxCpltCallback+0xf4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b0d      	cmp	r3, #13
 8002880:	d10b      	bne.n	800289a <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_UART_RxCpltCallback+0xd8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <HAL_UART_RxCpltCallback+0xf8>)
 8002888:	2100      	movs	r1, #0
 800288a:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_UART_RxCpltCallback+0xfc>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_UART_RxCpltCallback+0xf0>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e00f      	b.n	80028ba <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_UART_RxCpltCallback+0xf0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4911      	ldr	r1, [pc, #68]	; (80028e8 <HAL_UART_RxCpltCallback+0xf0>)
 80028a2:	600a      	str	r2, [r1, #0]
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_UART_RxCpltCallback+0xf4>)
 80028a6:	7811      	ldrb	r1, [r2, #0]
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_UART_RxCpltCallback+0xf8>)
 80028aa:	54d1      	strb	r1, [r2, r3]
 80028ac:	e005      	b.n	80028ba <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_UART_RxCpltCallback+0xf0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 80028b4:	4810      	ldr	r0, [pc, #64]	; (80028f8 <HAL_UART_RxCpltCallback+0x100>)
 80028b6:	f016 fd0d 	bl	80192d4 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80028ba:	2201      	movs	r2, #1
 80028bc:	490b      	ldr	r1, [pc, #44]	; (80028ec <HAL_UART_RxCpltCallback+0xf4>)
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <HAL_UART_RxCpltCallback+0xec>)
 80028c0:	f005 ff15 	bl	80086ee <HAL_UART_Receive_IT>
	}
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000620 	.word	0x20000620
 80028d0:	20000c90 	.word	0x20000c90
 80028d4:	20000bc8 	.word	0x20000bc8
 80028d8:	20000c68 	.word	0x20000c68
 80028dc:	20000c94 	.word	0x20000c94
 80028e0:	0801a674 	.word	0x0801a674
 80028e4:	20000664 	.word	0x20000664
 80028e8:	20000cc0 	.word	0x20000cc0
 80028ec:	20000bc9 	.word	0x20000bc9
 80028f0:	20000c98 	.word	0x20000c98
 80028f4:	20000cc4 	.word	0x20000cc4
 80028f8:	0801a68c 	.word	0x0801a68c

080028fc <pc_command_processing>:

void pc_command_processing(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <pc_command_processing+0x104>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d079      	beq.n	80029fc <pc_command_processing+0x100>
	{
		newline_detect_flag=0;
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <pc_command_processing+0x104>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 800290e:	483d      	ldr	r0, [pc, #244]	; (8002a04 <pc_command_processing+0x108>)
 8002910:	f016 fce0 	bl	80192d4 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002914:	220a      	movs	r2, #10
 8002916:	493c      	ldr	r1, [pc, #240]	; (8002a08 <pc_command_processing+0x10c>)
 8002918:	483a      	ldr	r0, [pc, #232]	; (8002a04 <pc_command_processing+0x108>)
 800291a:	f016 fdfe 	bl	801951a <strncmp>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <pc_command_processing+0x2e>
		{
			led_all_on();
 8002924:	f7fe f992 	bl	8000c4c <led_all_on>
			return;
 8002928:	e068      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800292a:	220b      	movs	r2, #11
 800292c:	4937      	ldr	r1, [pc, #220]	; (8002a0c <pc_command_processing+0x110>)
 800292e:	4835      	ldr	r0, [pc, #212]	; (8002a04 <pc_command_processing+0x108>)
 8002930:	f016 fdf3 	bl	801951a <strncmp>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <pc_command_processing+0x44>
		{
			led_all_off();
 800293a:	f7fe f993 	bl	8000c64 <led_all_off>
			return;
 800293e:	e05d      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002940:	220b      	movs	r2, #11
 8002942:	4933      	ldr	r1, [pc, #204]	; (8002a10 <pc_command_processing+0x114>)
 8002944:	482f      	ldr	r0, [pc, #188]	; (8002a04 <pc_command_processing+0x108>)
 8002946:	f016 fde8 	bl	801951a <strncmp>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <pc_command_processing+0x5a>
		{
			led_on_down();
 8002950:	f7fe f94c 	bl	8000bec <led_on_down>
			return;
 8002954:	e052      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002956:	2209      	movs	r2, #9
 8002958:	492e      	ldr	r1, [pc, #184]	; (8002a14 <pc_command_processing+0x118>)
 800295a:	482a      	ldr	r0, [pc, #168]	; (8002a04 <pc_command_processing+0x108>)
 800295c:	f016 fddd 	bl	801951a <strncmp>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <pc_command_processing+0x70>
		{
			led_on_up();
 8002966:	f7fe f911 	bl	8000b8c <led_on_up>
			return;
 800296a:	e047      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800296c:	2209      	movs	r2, #9
 800296e:	492a      	ldr	r1, [pc, #168]	; (8002a18 <pc_command_processing+0x11c>)
 8002970:	4824      	ldr	r0, [pc, #144]	; (8002a04 <pc_command_processing+0x108>)
 8002972:	f016 fdd2 	bl	801951a <strncmp>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <pc_command_processing+0x86>
		{
			flower_on();
 800297c:	f7fe f866 	bl	8000a4c <flower_on>
			return;
 8002980:	e03c      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002982:	220a      	movs	r2, #10
 8002984:	4925      	ldr	r1, [pc, #148]	; (8002a1c <pc_command_processing+0x120>)
 8002986:	481f      	ldr	r0, [pc, #124]	; (8002a04 <pc_command_processing+0x108>)
 8002988:	f016 fdc7 	bl	801951a <strncmp>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <pc_command_processing+0x9c>
		{
			flower_off();
 8002992:	f7fe f88b 	bl	8000aac <flower_off>
			return;
 8002996:	e031      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002998:	220d      	movs	r2, #13
 800299a:	4921      	ldr	r1, [pc, #132]	; (8002a20 <pc_command_processing+0x124>)
 800299c:	4819      	ldr	r0, [pc, #100]	; (8002a04 <pc_command_processing+0x108>)
 800299e:	f016 fdbc 	bl	801951a <strncmp>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <pc_command_processing+0xb2>
		{
			led_keepon_up();
 80029a8:	f7fe f8b0 	bl	8000b0c <led_keepon_up>
			return;
 80029ac:	e026      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029ae:	220f      	movs	r2, #15
 80029b0:	491c      	ldr	r1, [pc, #112]	; (8002a24 <pc_command_processing+0x128>)
 80029b2:	4814      	ldr	r0, [pc, #80]	; (8002a04 <pc_command_processing+0x108>)
 80029b4:	f016 fdb1 	bl	801951a <strncmp>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <pc_command_processing+0xc8>
		{
			led_keepon_down();
 80029be:	f7fe f8c5 	bl	8000b4c <led_keepon_down>
			return;
 80029c2:	e01b      	b.n	80029fc <pc_command_processing+0x100>
		}
		//dht11time150
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029c4:	2209      	movs	r2, #9
 80029c6:	4918      	ldr	r1, [pc, #96]	; (8002a28 <pc_command_processing+0x12c>)
 80029c8:	480e      	ldr	r0, [pc, #56]	; (8002a04 <pc_command_processing+0x108>)
 80029ca:	f016 fda6 	bl	801951a <strncmp>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff+9);
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <pc_command_processing+0x130>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f016 fa00 	bl	8018ddc <atoi>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <pc_command_processing+0x134>)
 80029e0:	6013      	str	r3, [r2, #0]
			return;
 80029e2:	e00b      	b.n	80029fc <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80029e4:	2206      	movs	r2, #6
 80029e6:	4913      	ldr	r1, [pc, #76]	; (8002a34 <pc_command_processing+0x138>)
 80029e8:	4806      	ldr	r0, [pc, #24]	; (8002a04 <pc_command_processing+0x108>)
 80029ea:	f016 fd96 	bl	801951a <strncmp>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <pc_command_processing+0x100>
		{
			set_rtc(rx_buff);
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <pc_command_processing+0x108>)
 80029f6:	f7fd ff87 	bl	8000908 <set_rtc>
			return;
 80029fa:	bf00      	nop
		}

	}
}
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000c94 	.word	0x20000c94
 8002a04:	20000c68 	.word	0x20000c68
 8002a08:	0801a6a8 	.word	0x0801a6a8
 8002a0c:	0801a6b4 	.word	0x0801a6b4
 8002a10:	0801a6c0 	.word	0x0801a6c0
 8002a14:	0801a6cc 	.word	0x0801a6cc
 8002a18:	0801a6d8 	.word	0x0801a6d8
 8002a1c:	0801a6e4 	.word	0x0801a6e4
 8002a20:	0801a6f0 	.word	0x0801a6f0
 8002a24:	0801a700 	.word	0x0801a700
 8002a28:	0801a710 	.word	0x0801a710
 8002a2c:	20000c71 	.word	0x20000c71
 8002a30:	20000000 	.word	0x20000000
 8002a34:	0801a71c 	.word	0x0801a71c

08002a38 <bt_command_processing>:

void bt_command_processing(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002a3c:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <bt_command_processing+0xcc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05d      	beq.n	8002b00 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 8002a44:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <bt_command_processing+0xcc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002a4a:	482f      	ldr	r0, [pc, #188]	; (8002b08 <bt_command_processing+0xd0>)
 8002a4c:	f016 fc42 	bl	80192d4 <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a50:	220a      	movs	r2, #10
 8002a52:	492e      	ldr	r1, [pc, #184]	; (8002b0c <bt_command_processing+0xd4>)
 8002a54:	482c      	ldr	r0, [pc, #176]	; (8002b08 <bt_command_processing+0xd0>)
 8002a56:	f016 fd60 	bl	801951a <strncmp>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <bt_command_processing+0x2e>
		{
			led_all_on();
 8002a60:	f7fe f8f4 	bl	8000c4c <led_all_on>
			return;
 8002a64:	e04c      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a66:	220b      	movs	r2, #11
 8002a68:	4929      	ldr	r1, [pc, #164]	; (8002b10 <bt_command_processing+0xd8>)
 8002a6a:	4827      	ldr	r0, [pc, #156]	; (8002b08 <bt_command_processing+0xd0>)
 8002a6c:	f016 fd55 	bl	801951a <strncmp>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <bt_command_processing+0x44>
		{
			led_all_off();
 8002a76:	f7fe f8f5 	bl	8000c64 <led_all_off>
			return;
 8002a7a:	e041      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a7c:	220b      	movs	r2, #11
 8002a7e:	4925      	ldr	r1, [pc, #148]	; (8002b14 <bt_command_processing+0xdc>)
 8002a80:	4821      	ldr	r0, [pc, #132]	; (8002b08 <bt_command_processing+0xd0>)
 8002a82:	f016 fd4a 	bl	801951a <strncmp>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <bt_command_processing+0x5a>
		{
			led_on_down();
 8002a8c:	f7fe f8ae 	bl	8000bec <led_on_down>
			return;
 8002a90:	e036      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002a92:	2209      	movs	r2, #9
 8002a94:	4920      	ldr	r1, [pc, #128]	; (8002b18 <bt_command_processing+0xe0>)
 8002a96:	481c      	ldr	r0, [pc, #112]	; (8002b08 <bt_command_processing+0xd0>)
 8002a98:	f016 fd3f 	bl	801951a <strncmp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <bt_command_processing+0x70>
		{
			led_on_up();
 8002aa2:	f7fe f873 	bl	8000b8c <led_on_up>
			return;
 8002aa6:	e02b      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002aa8:	2209      	movs	r2, #9
 8002aaa:	491c      	ldr	r1, [pc, #112]	; (8002b1c <bt_command_processing+0xe4>)
 8002aac:	4816      	ldr	r0, [pc, #88]	; (8002b08 <bt_command_processing+0xd0>)
 8002aae:	f016 fd34 	bl	801951a <strncmp>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <bt_command_processing+0x86>
		{
			flower_on();
 8002ab8:	f7fd ffc8 	bl	8000a4c <flower_on>
			return;
 8002abc:	e020      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002abe:	220a      	movs	r2, #10
 8002ac0:	4917      	ldr	r1, [pc, #92]	; (8002b20 <bt_command_processing+0xe8>)
 8002ac2:	4811      	ldr	r0, [pc, #68]	; (8002b08 <bt_command_processing+0xd0>)
 8002ac4:	f016 fd29 	bl	801951a <strncmp>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <bt_command_processing+0x9c>
		{
			flower_off();
 8002ace:	f7fd ffed 	bl	8000aac <flower_off>
			return;
 8002ad2:	e015      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002ad4:	220d      	movs	r2, #13
 8002ad6:	4913      	ldr	r1, [pc, #76]	; (8002b24 <bt_command_processing+0xec>)
 8002ad8:	480b      	ldr	r0, [pc, #44]	; (8002b08 <bt_command_processing+0xd0>)
 8002ada:	f016 fd1e 	bl	801951a <strncmp>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <bt_command_processing+0xb2>
		{
			led_keepon_up();
 8002ae4:	f7fe f812 	bl	8000b0c <led_keepon_up>
			return;
 8002ae8:	e00a      	b.n	8002b00 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002aea:	220f      	movs	r2, #15
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <bt_command_processing+0xf0>)
 8002aee:	4806      	ldr	r0, [pc, #24]	; (8002b08 <bt_command_processing+0xd0>)
 8002af0:	f016 fd13 	bl	801951a <strncmp>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002afa:	f7fe f827 	bl	8000b4c <led_keepon_down>
			return;
 8002afe:	bf00      	nop
		}
	}
}
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000cc4 	.word	0x20000cc4
 8002b08:	20000c98 	.word	0x20000c98
 8002b0c:	0801a6a8 	.word	0x0801a6a8
 8002b10:	0801a6b4 	.word	0x0801a6b4
 8002b14:	0801a6c0 	.word	0x0801a6c0
 8002b18:	0801a6cc 	.word	0x0801a6cc
 8002b1c:	0801a6d8 	.word	0x0801a6d8
 8002b20:	0801a6e4 	.word	0x0801a6e4
 8002b24:	0801a6f0 	.word	0x0801a6f0
 8002b28:	0801a700 	.word	0x0801a700

08002b2c <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8002b32:	f013 fd53 	bl	80165dc <udp_new>
 8002b36:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00f      	beq.n	8002b5e <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8002b3e:	2207      	movs	r2, #7
 8002b40:	4909      	ldr	r1, [pc, #36]	; (8002b68 <udp_echoserver_init+0x3c>)
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f013 fc0c 	bl	8016360 <udp_bind>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8002b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8002b54:	2200      	movs	r2, #0
 8002b56:	4905      	ldr	r1, [pc, #20]	; (8002b6c <udp_echoserver_init+0x40>)
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f013 fd1f 	bl	801659c <udp_recv>
      }
   }
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0801d3fc 	.word	0x0801d3fc
 8002b6c:	08002b71 	.word	0x08002b71

08002b70 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8002b7e:	2207      	movs	r2, #7
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	68b8      	ldr	r0, [r7, #8]
 8002b84:	f013 fc74 	bl	8016470 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68b8      	ldr	r0, [r7, #8]
 8002b8c:	f013 f9fe 	bl	8015f8c <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8002b90:	68b8      	ldr	r0, [r7, #8]
 8002b92:	f013 fcdb 	bl	801654c <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f00d fa24 	bl	800ffe4 <pbuf_free>
   
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11f      	bne.n	8002bf6 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002bce:	e012      	b.n	8002bf6 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002be0:	2100      	movs	r1, #0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f004 ff78 	bl	8007ad8 <HAL_TIM_ReadCapturedValue>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002bee:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_TIM_IC_CaptureCallback+0x68>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40000400 	.word	0x40000400
 8002c04:	20000cd0 	.word	0x20000cd0
 8002c08:	20000cc8 	.word	0x20000cc8
 8002c0c:	20000ccc 	.word	0x20000ccc

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c1c:	e002      	b.n	8002c24 <LoopCopyDataInit>

08002c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c22:	3304      	adds	r3, #4

08002c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c28:	d3f9      	bcc.n	8002c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c2c:	4c0b      	ldr	r4, [pc, #44]	; (8002c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c30:	e001      	b.n	8002c36 <LoopFillZerobss>

08002c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c34:	3204      	adds	r2, #4

08002c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c38:	d3fb      	bcc.n	8002c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c3a:	f7ff fdcb 	bl	80027d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f016 f9c7 	bl	8018fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7fe f8cd 	bl	8000de0 <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002c54:	0801d668 	.word	0x0801d668
  ldr r2, =_sbss
 8002c58:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002c5c:	2000dc08 	.word	0x2000dc08

08002c60 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <CAN1_RX0_IRQHandler>

08002c62 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <LAN8742_RegisterBusIO+0x28>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <LAN8742_RegisterBusIO+0x28>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <LAN8742_RegisterBusIO+0x28>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e014      	b.n	8002cba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d17c      	bne.n	8002de0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e01c      	b.n	8002d3a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f107 0208 	add.w	r2, r7, #8
 8002d08:	2112      	movs	r1, #18
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	4798      	blx	r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da03      	bge.n	8002d1c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002d14:	f06f 0304 	mvn.w	r3, #4
 8002d18:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002d1a:	e00b      	b.n	8002d34 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d105      	bne.n	8002d34 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
         break;
 8002d32:	e005      	b.n	8002d40 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b1f      	cmp	r3, #31
 8002d3e:	d9df      	bls.n	8002d00 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b1f      	cmp	r3, #31
 8002d46:	d902      	bls.n	8002d4e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002d48:	f06f 0302 	mvn.w	r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d145      	bne.n	8002de0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6810      	ldr	r0, [r2, #0]
 8002d5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d60:	2100      	movs	r1, #0
 8002d62:	4798      	blx	r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db37      	blt.n	8002dda <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6810      	ldr	r0, [r2, #0]
 8002d72:	f107 0208 	add.w	r2, r7, #8
 8002d76:	2100      	movs	r1, #0
 8002d78:	4798      	blx	r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db28      	blt.n	8002dd2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4798      	blx	r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002d8a:	e01c      	b.n	8002dc6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4798      	blx	r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d9e:	d80e      	bhi.n	8002dbe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6810      	ldr	r0, [r2, #0]
 8002da8:	f107 0208 	add.w	r2, r7, #8
 8002dac:	2100      	movs	r1, #0
 8002dae:	4798      	blx	r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da07      	bge.n	8002dc6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002db6:	f06f 0304 	mvn.w	r3, #4
 8002dba:	613b      	str	r3, [r7, #16]
                 break;
 8002dbc:	e010      	b.n	8002de0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002dbe:	f06f 0301 	mvn.w	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
               break;
 8002dc4:	e00c      	b.n	8002de0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1dd      	bne.n	8002d8c <LAN8742_Init+0xc6>
 8002dd0:	e006      	b.n	8002de0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002dd2:	f06f 0304 	mvn.w	r3, #4
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e002      	b.n	8002de0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002dda:	f06f 0303 	mvn.w	r3, #3
 8002dde:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d112      	bne.n	8002e0c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	4798      	blx	r3
 8002dec:	4603      	mov	r3, r0
 8002dee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002df0:	bf00      	nop
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	4798      	blx	r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e04:	d9f5      	bls.n	8002df2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 }
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6810      	ldr	r0, [r2, #0]
 8002e2a:	f107 020c 	add.w	r2, r7, #12
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4798      	blx	r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	da02      	bge.n	8002e3e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002e38:	f06f 0304 	mvn.w	r3, #4
 8002e3c:	e06e      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6810      	ldr	r0, [r2, #0]
 8002e46:	f107 020c 	add.w	r2, r7, #12
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4798      	blx	r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da02      	bge.n	8002e5a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002e54:	f06f 0304 	mvn.w	r3, #4
 8002e58:	e060      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002e64:	2301      	movs	r3, #1
 8002e66:	e059      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6810      	ldr	r0, [r2, #0]
 8002e70:	f107 020c 	add.w	r2, r7, #12
 8002e74:	2100      	movs	r1, #0
 8002e76:	4798      	blx	r3
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da02      	bge.n	8002e84 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002e7e:	f06f 0304 	mvn.w	r3, #4
 8002e82:	e04b      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d11b      	bne.n	8002ec6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <LAN8742_GetLinkState+0x90>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e03a      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e033      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e02c      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002ec2:	2305      	movs	r3, #5
 8002ec4:	e02a      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6810      	ldr	r0, [r2, #0]
 8002ece:	f107 020c 	add.w	r2, r7, #12
 8002ed2:	211f      	movs	r1, #31
 8002ed4:	4798      	blx	r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da02      	bge.n	8002ee2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002edc:	f06f 0304 	mvn.w	r3, #4
 8002ee0:	e01c      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002eec:	2306      	movs	r3, #6
 8002eee:	e015      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 031c 	and.w	r3, r3, #28
 8002ef6:	2b18      	cmp	r3, #24
 8002ef8:	d101      	bne.n	8002efe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002efa:	2302      	movs	r3, #2
 8002efc:	e00e      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 031c 	and.w	r3, r3, #28
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d101      	bne.n	8002f0c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e007      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 031c 	and.w	r3, r3, #28
 8002f12:	2b14      	cmp	r3, #20
 8002f14:	d101      	bne.n	8002f1a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002f16:	2304      	movs	r3, #4
 8002f18:	e000      	b.n	8002f1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002f1a:	2305      	movs	r3, #5
    }				
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <HAL_Init+0x40>)
 8002f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_Init+0x40>)
 8002f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_Init+0x40>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f000 fd88 	bl	8003a62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f52:	200f      	movs	r0, #15
 8002f54:	f7ff fa54 	bl	8002400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f58:	f7fe ff2a 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x20>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_IncTick+0x24>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000144 	.word	0x20000144
 8002f8c:	20000cd4 	.word	0x20000cd4

08002f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return uwTick;
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_GetTick+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000cd4 	.word	0x20000cd4

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff ffee 	bl	8002f90 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000144 	.word	0x20000144

08002ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e033      	b.n	800306e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fefa 	bl	8001e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003036:	f023 0302 	bic.w	r3, r3, #2
 800303a:	f043 0202 	orr.w	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb5a 	bl	80036fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
 800305e:	e001      	b.n	8003064 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Start_IT+0x1a>
 800308e:	2302      	movs	r3, #2
 8003090:	e0bd      	b.n	800320e <HAL_ADC_Start_IT+0x196>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d018      	beq.n	80030da <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030b8:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_ADC_Start_IT+0x1a4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_ADC_Start_IT+0x1a8>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9a      	lsrs	r2, r3, #18
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030cc:	e002      	b.n	80030d4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f9      	bne.n	80030ce <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f040 8085 	bne.w	80031f4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003114:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003128:	d106      	bne.n	8003138 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f023 0206 	bic.w	r2, r3, #6
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
 8003136:	e002      	b.n	800313e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003146:	4b37      	ldr	r3, [pc, #220]	; (8003224 <HAL_ADC_Start_IT+0x1ac>)
 8003148:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003152:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003162:	f043 0320 	orr.w	r3, r3, #32
 8003166:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12a      	bne.n	80031ca <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <HAL_ADC_Start_IT+0x1b0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d015      	beq.n	80031aa <HAL_ADC_Start_IT+0x132>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_ADC_Start_IT+0x1b4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d105      	bne.n	8003194 <HAL_ADC_Start_IT+0x11c>
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_ADC_Start_IT+0x1ac>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a25      	ldr	r2, [pc, #148]	; (8003230 <HAL_ADC_Start_IT+0x1b8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d136      	bne.n	800320c <HAL_ADC_Start_IT+0x194>
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <HAL_ADC_Start_IT+0x1ac>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d130      	bne.n	800320c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d129      	bne.n	800320c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e020      	b.n	800320c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_ADC_Start_IT+0x1b0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d11b      	bne.n	800320c <HAL_ADC_Start_IT+0x194>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d114      	bne.n	800320c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	e00b      	b.n	800320c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0210 	orr.w	r2, r3, #16
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000013c 	.word	0x2000013c
 8003220:	431bde83 	.word	0x431bde83
 8003224:	40012300 	.word	0x40012300
 8003228:	40012000 	.word	0x40012000
 800322c:	40012100 	.word	0x40012100
 8003230:	40012200 	.word	0x40012200

08003234 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d049      	beq.n	80032fe <HAL_ADC_IRQHandler+0xca>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d046      	beq.n	80032fe <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d12b      	bne.n	80032ee <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	d127      	bne.n	80032ee <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d119      	bne.n	80032ee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0220 	bic.w	r2, r2, #32
 80032c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fd2c 	bl	8000d4c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0212 	mvn.w	r2, #18
 80032fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d057      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x190>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d054      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d139      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003358:	2b00      	cmp	r3, #0
 800335a:	d12b      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d124      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11d      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800337c:	2b00      	cmp	r3, #0
 800337e:	d119      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800338e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa9d 	bl	80038f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 020c 	mvn.w	r2, #12
 80033c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <HAL_ADC_IRQHandler+0x1d6>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d014      	beq.n	800340a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10d      	bne.n	800340a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f837 	bl	800346e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0201 	mvn.w	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003418:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_ADC_IRQHandler+0x218>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0220 	mvn.w	r2, #32
 800343a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f820 	bl	8003482 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f06f 0220 	mvn.w	r2, #32
 800344a:	601a      	str	r2, [r3, #0]
  }
}
 800344c:	bf00      	nop
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1c>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e113      	b.n	80036dc <HAL_ADC_ConfigChannel+0x244>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b09      	cmp	r3, #9
 80034c2:	d925      	bls.n	8003510 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68d9      	ldr	r1, [r3, #12]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	3b1e      	subs	r3, #30
 80034da:	2207      	movs	r2, #7
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43da      	mvns	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	400a      	ands	r2, r1
 80034e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	4603      	mov	r3, r0
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4403      	add	r3, r0
 8003502:	3b1e      	subs	r3, #30
 8003504:	409a      	lsls	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e022      	b.n	8003556 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6919      	ldr	r1, [r3, #16]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	2207      	movs	r2, #7
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	400a      	ands	r2, r1
 8003532:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6919      	ldr	r1, [r3, #16]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4618      	mov	r0, r3
 8003546:	4603      	mov	r3, r0
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4403      	add	r3, r0
 800354c:	409a      	lsls	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d824      	bhi.n	80035a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	3b05      	subs	r3, #5
 8003570:	221f      	movs	r2, #31
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	400a      	ands	r2, r1
 800357e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	3b05      	subs	r3, #5
 800359a:	fa00 f203 	lsl.w	r2, r0, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34
 80035a6:	e04c      	b.n	8003642 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d824      	bhi.n	80035fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	3b23      	subs	r3, #35	; 0x23
 80035c2:	221f      	movs	r2, #31
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43da      	mvns	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	400a      	ands	r2, r1
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	3b23      	subs	r3, #35	; 0x23
 80035ec:	fa00 f203 	lsl.w	r2, r0, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
 80035f8:	e023      	b.n	8003642 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	3b41      	subs	r3, #65	; 0x41
 800360c:	221f      	movs	r2, #31
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	400a      	ands	r2, r1
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	3b41      	subs	r3, #65	; 0x41
 8003636:	fa00 f203 	lsl.w	r2, r0, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_ADC_ConfigChannel+0x250>)
 8003644:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <HAL_ADC_ConfigChannel+0x254>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10f      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1d8>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b12      	cmp	r3, #18
 8003656:	d10b      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_ADC_ConfigChannel+0x254>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d12b      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x23a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_ADC_ConfigChannel+0x258>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <HAL_ADC_ConfigChannel+0x1f4>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b11      	cmp	r3, #17
 800368a:	d122      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_ADC_ConfigChannel+0x258>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d111      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_ADC_ConfigChannel+0x25c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_ADC_ConfigChannel+0x260>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	0c9a      	lsrs	r2, r3, #18
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036c4:	e002      	b.n	80036cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f9      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012300 	.word	0x40012300
 80036ec:	40012000 	.word	0x40012000
 80036f0:	10000012 	.word	0x10000012
 80036f4:	2000013c 	.word	0x2000013c
 80036f8:	431bde83 	.word	0x431bde83

080036fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003704:	4b79      	ldr	r3, [pc, #484]	; (80038ec <ADC_Init+0x1f0>)
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	021a      	lsls	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <ADC_Init+0x1f4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	e00f      	b.n	80037fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0202 	bic.w	r2, r2, #2
 8003808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	7e1b      	ldrb	r3, [r3, #24]
 8003814:	005a      	lsls	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003836:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003846:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	3b01      	subs	r3, #1
 8003854:	035a      	lsls	r2, r3, #13
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	e007      	b.n	8003870 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	3b01      	subs	r3, #1
 800388c:	051a      	lsls	r2, r3, #20
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6899      	ldr	r1, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038b2:	025a      	lsls	r2, r3, #9
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	029a      	lsls	r2, r3, #10
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	40012300 	.word	0x40012300
 80038f0:	0f000001 	.word	0x0f000001

080038f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff4c 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8a:	f7ff ff61 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f7ff ffb1 	bl	80039fc <NVIC_EncodePriority>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff80 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff54 	bl	800396c <__NVIC_EnableIRQ>
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ada:	f7ff fa59 	bl	8002f90 <HAL_GetTick>
 8003ade:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d008      	beq.n	8003afe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e052      	b.n	8003ba4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0216 	bic.w	r2, r2, #22
 8003b0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_DMA_Abort+0x62>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0208 	bic.w	r2, r2, #8
 8003b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4e:	e013      	b.n	8003b78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b50:	f7ff fa1e 	bl	8002f90 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d90c      	bls.n	8003b78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2203      	movs	r2, #3
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e015      	b.n	8003ba4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e4      	bne.n	8003b50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	223f      	movs	r2, #63	; 0x3f
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e00c      	b.n	8003be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2205      	movs	r2, #5
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06c      	b.n	8003cdc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2223      	movs	r2, #35	; 0x23
 8003c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f006 fbfb 	bl	800a410 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_ETH_Init+0xf4>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	4a30      	ldr	r2, [pc, #192]	; (8003ce4 <HAL_ETH_Init+0xf4>)
 8003c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c28:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_ETH_Init+0xf4>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <HAL_ETH_Init+0xf8>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_ETH_Init+0xf8>)
 8003c3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c40:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c42:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <HAL_ETH_Init+0xf8>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4927      	ldr	r1, [pc, #156]	; (8003ce8 <HAL_ETH_Init+0xf8>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <HAL_ETH_Init+0xf8>)
 8003c52:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c6c:	f7ff f990 	bl	8002f90 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c72:	e011      	b.n	8003c98 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c74:	f7ff f98c 	bl	8002f90 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c82:	d909      	bls.n	8003c98 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2204      	movs	r2, #4
 8003c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	22e0      	movs	r2, #224	; 0xe0
 8003c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e021      	b.n	8003cdc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e4      	bne.n	8003c74 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 ff4a 	bl	8004b44 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fff1 	bl	8004c98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f001 f847 	bl	8004d4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 ffaf 	bl	8004c28 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40013800 	.word	0x40013800

08003cec <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d17f      	bne.n	8003dfe <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2223      	movs	r2, #35	; 0x23
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d30:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003d44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9f8 	bl	8004144 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7ff f91b 	bl	8002fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0204 	orr.w	r2, r2, #4
 8003d88:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff f908 	bl	8002fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fd70 	bl	8004886 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dbc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dd4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8003de8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8003dec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003df0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2223      	movs	r2, #35	; 0x23
 8003df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	2b23      	cmp	r3, #35	; 0x23
 8003e18:	d170      	bne.n	8003efc <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2223      	movs	r2, #35	; 0x23
 8003e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8003e34:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8003e38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e3c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e54:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e6c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0204 	bic.w	r2, r2, #4
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e86:	2001      	movs	r0, #1
 8003e88:	f7ff f88e 	bl	8002fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fcf6 	bl	8004886 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7ff f878 	bl	8002fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e00e      	b.n	8003ee4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	3212      	adds	r2, #18
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d9ed      	bls.n	8003ec6 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e045      	b.n	8003fb6 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f30:	2b23      	cmp	r3, #35	; 0x23
 8003f32:	d13f      	bne.n	8003fb4 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 ff6f 	bl	8004e24 <ETH_Prepare_Tx_Descriptors>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e02a      	b.n	8003fb6 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f60:	f3bf 8f4f 	dsb	sy
}
 8003f64:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d904      	bls.n	8003f82 <HAL_ETH_Transmit_IT+0x7c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	1f1a      	subs	r2, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003faa:	461a      	mov	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0a8      	b.n	800413c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff0:	2b23      	cmp	r3, #35	; 0x23
 8003ff2:	d001      	beq.n	8003ff8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0a1      	b.n	800413c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	3212      	adds	r2, #18
 8004004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004008:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	f1c3 0304 	rsb	r3, r3, #4
 8004012:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004014:	e06a      	b.n	80040ec <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_ETH_ReadData+0x88>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d040      	beq.n	80040c8 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800407a:	3b04      	subs	r3, #4
 800407c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040a2:	461a      	mov	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f006 fb94 	bl	800a7d4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2200      	movs	r2, #0
 80040c6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d902      	bls.n	80040da <HAL_ETH_ReadData+0x11c>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3b04      	subs	r3, #4
 80040d8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	3212      	adds	r2, #18
 80040e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3301      	adds	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db06      	blt.n	8004102 <HAL_ETH_ReadData+0x144>
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d202      	bcs.n	8004102 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d089      	beq.n	8004016 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f814 	bl	8004144 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d108      	bne.n	800413a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004150:	2301      	movs	r3, #1
 8004152:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004158:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	3212      	adds	r2, #18
 8004160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004164:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800416c:	e040      	b.n	80041f0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d112      	bne.n	800419c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	4618      	mov	r0, r3
 800417c:	f006 fafa 	bl	800a774 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	74fb      	strb	r3, [r7, #19]
 800418a:	e007      	b.n	800419c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d026      	beq.n	80041f0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <ETH_UpdateDescriptor+0xe4>)
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e003      	b.n	80041ba <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80041b8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041ba:	f3bf 8f5f 	dmb	sy
}
 80041be:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d902      	bls.n	80041de <ETH_UpdateDescriptor+0x9a>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3b04      	subs	r3, #4
 80041dc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	3212      	adds	r2, #18
 80041e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e8:	617b      	str	r3, [r7, #20]
      desccount--;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <ETH_UpdateDescriptor+0xb8>
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1b8      	bne.n	800416e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	d00c      	beq.n	8004220 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	80004600 	.word	0x80004600

0800422c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3318      	adds	r3, #24
 8004238:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800424a:	e03f      	b.n	80042cc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800424c:	2301      	movs	r3, #1
 800424e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3b01      	subs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	3304      	adds	r3, #4
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3301      	adds	r3, #1
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004274:	7bbb      	ldrb	r3, [r7, #14]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68d9      	ldr	r1, [r3, #12]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	440b      	add	r3, r1
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db1b      	blt.n	80042c8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3304      	adds	r3, #4
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f006 fad9 	bl	800a854 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3304      	adds	r3, #4
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3301      	adds	r3, #1
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80042c6:	e001      	b.n	80042cc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_ETH_ReleaseTxPacket+0xac>
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1b9      	bne.n	800424c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d112      	bne.n	8004324 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d109      	bne.n	8004324 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	461a      	mov	r2, r3
 800431a:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_ETH_IRQHandler+0x178>)
 800431c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f005 fdd8 	bl	8009ed4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d113      	bne.n	800435e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10a      	bne.n	800435e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004350:	461a      	mov	r2, r3
 8004352:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004356:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f005 fdcb 	bl	8009ef4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d14c      	bne.n	800440c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004384:	d142      	bne.n	800440c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f043 0208 	orr.w	r2, r3, #8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a8:	d11a      	bne.n	80043e0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_ETH_IRQHandler+0x17c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80043d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043d4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	22e0      	movs	r2, #224	; 0xe0
 80043da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80043de:	e012      	b.n	8004406 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	f248 6380 	movw	r3, #34432	; 0x8680
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	461a      	mov	r2, r3
 8004400:	f248 6380 	movw	r3, #34432	; 0x8680
 8004404:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f005 fd84 	bl	8009f14 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b08      	cmp	r3, #8
 8004418:	d10e      	bne.n	8004438 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f81c 	bl	8004468 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_ETH_IRQHandler+0x180>)
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_ETH_IRQHandler+0x180>)
 8004446:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800444a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f815 	bl	800447c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	00010040 	.word	0x00010040
 8004460:	007e2000 	.word	0x007e2000
 8004464:	40013c00 	.word	0x40013c00

08004468 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 031c 	and.w	r3, r3, #28
 80044ac:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	02db      	lsls	r3, r3, #11
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0302 	bic.w	r3, r3, #2
 80044ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80044e0:	f7fe fd56 	bl	8002f90 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044e6:	e00d      	b.n	8004504 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80044e8:	f7fe fd52 	bl	8002f90 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d301      	bcc.n	80044fc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e010      	b.n	800451e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ec      	bne.n	80044e8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	b29b      	uxth	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 031c 	and.w	r3, r3, #28
 8004542:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	02db      	lsls	r3, r3, #11
 8004548:	b29b      	uxth	r3, r3
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	019b      	lsls	r3, r3, #6
 8004554:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004580:	f7fe fd06 	bl	8002f90 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004586:	e00d      	b.n	80045a4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004588:	f7fe fd02 	bl	8002f90 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d301      	bcc.n	800459c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e009      	b.n	80045b0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1ec      	bne.n	8004588 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0d9      	b.n	8004780 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	b29a      	uxth	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e00b      	b.n	80047b8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d105      	bne.n	80047b6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f88f 	bl	80048d0 <ETH_SetMACConfig>

    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 031c 	bic.w	r3, r3, #28
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047d8:	f001 fd90 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 80047dc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4a1d      	ldr	r2, [pc, #116]	; (8004858 <HAL_ETH_SetMDIOClockRange+0x98>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d908      	bls.n	80047f8 <HAL_ETH_SetMDIOClockRange+0x38>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d804      	bhi.n	80047f8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f043 0308 	orr.w	r3, r3, #8
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e027      	b.n	8004848 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d908      	bls.n	8004812 <HAL_ETH_SetMDIOClockRange+0x52>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d204      	bcs.n	8004812 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f043 030c 	orr.w	r3, r3, #12
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e01a      	b.n	8004848 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4a12      	ldr	r2, [pc, #72]	; (8004860 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d303      	bcc.n	8004822 <HAL_ETH_SetMDIOClockRange+0x62>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4a11      	ldr	r2, [pc, #68]	; (8004864 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d911      	bls.n	8004846 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d908      	bls.n	800483c <HAL_ETH_SetMDIOClockRange+0x7c>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d804      	bhi.n	800483c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e005      	b.n	8004848 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f043 0310 	orr.w	r3, r3, #16
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e000      	b.n	8004848 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004846:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	611a      	str	r2, [r3, #16]
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	01312cff 	.word	0x01312cff
 800485c:	02160ebf 	.word	0x02160ebf
 8004860:	03938700 	.word	0x03938700
 8004864:	05f5e0ff 	.word	0x05f5e0ff
 8004868:	08f0d17f 	.word	0x08f0d17f

0800486c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f7fe fb76 	bl	8002fa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048c6:	6193      	str	r3, [r2, #24]
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4b51      	ldr	r3, [pc, #324]	; (8004a2c <ETH_SetMACConfig+0x15c>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	7c1b      	ldrb	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <ETH_SetMACConfig+0x28>
 80048f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048f6:	e000      	b.n	80048fa <ETH_SetMACConfig+0x2a>
 80048f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	7c5b      	ldrb	r3, [r3, #17]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <ETH_SetMACConfig+0x38>
 8004902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004906:	e000      	b.n	800490a <ETH_SetMACConfig+0x3a>
 8004908:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800490a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004910:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	7fdb      	ldrb	r3, [r3, #31]
 8004916:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004918:	431a      	orrs	r2, r3
                        macconf->Speed |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800491e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	7f92      	ldrb	r2, [r2, #30]
 8004924:	2a00      	cmp	r2, #0
 8004926:	d102      	bne.n	800492e <ETH_SetMACConfig+0x5e>
 8004928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800492c:	e000      	b.n	8004930 <ETH_SetMACConfig+0x60>
 800492e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004930:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	7f1b      	ldrb	r3, [r3, #28]
 8004936:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004938:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800493e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004946:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800494e:	2a00      	cmp	r2, #0
 8004950:	d102      	bne.n	8004958 <ETH_SetMACConfig+0x88>
 8004952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004956:	e000      	b.n	800495a <ETH_SetMACConfig+0x8a>
 8004958:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800495a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	7bdb      	ldrb	r3, [r3, #15]
 8004960:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004962:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004968:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004970:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004972:	4313      	orrs	r3, r2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800498a:	2001      	movs	r0, #1
 800498c:	f7fe fb0c 	bl	8002fa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80049a6:	4013      	ands	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	d101      	bne.n	80049be <ETH_SetMACConfig+0xee>
 80049ba:	2280      	movs	r2, #128	; 0x80
 80049bc:	e000      	b.n	80049c0 <ETH_SetMACConfig+0xf0>
 80049be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80049ce:	2a01      	cmp	r2, #1
 80049d0:	d101      	bne.n	80049d6 <ETH_SetMACConfig+0x106>
 80049d2:	2208      	movs	r2, #8
 80049d4:	e000      	b.n	80049d8 <ETH_SetMACConfig+0x108>
 80049d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80049e0:	2a01      	cmp	r2, #1
 80049e2:	d101      	bne.n	80049e8 <ETH_SetMACConfig+0x118>
 80049e4:	2204      	movs	r2, #4
 80049e6:	e000      	b.n	80049ea <ETH_SetMACConfig+0x11a>
 80049e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80049f2:	2a01      	cmp	r2, #1
 80049f4:	d101      	bne.n	80049fa <ETH_SetMACConfig+0x12a>
 80049f6:	2202      	movs	r2, #2
 80049f8:	e000      	b.n	80049fc <ETH_SetMACConfig+0x12c>
 80049fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049fc:	4313      	orrs	r3, r2
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a14:	2001      	movs	r0, #1
 8004a16:	f7fe fac7 	bl	8002fa8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	ff20810f 	.word	0xff20810f

08004a30 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <ETH_SetDMAConfig+0x110>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	7b1b      	ldrb	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <ETH_SetDMAConfig+0x2c>
 8004a56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a5a:	e000      	b.n	8004a5e <ETH_SetDMAConfig+0x2e>
 8004a5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	7b5b      	ldrb	r3, [r3, #13]
 8004a62:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a64:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	7f52      	ldrb	r2, [r2, #29]
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d102      	bne.n	8004a74 <ETH_SetDMAConfig+0x44>
 8004a6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a72:	e000      	b.n	8004a76 <ETH_SetDMAConfig+0x46>
 8004a74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	7b9b      	ldrb	r3, [r3, #14]
 8004a7c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a7e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	7f1b      	ldrb	r3, [r3, #28]
 8004a8a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	7f9b      	ldrb	r3, [r3, #30]
 8004a92:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a94:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a9a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f7fe fa6e 	bl	8002fa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	791b      	ldrb	r3, [r3, #4]
 8004ade:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ae4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004aea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004af0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004af8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004afa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b02:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b08:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b16:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b24:	2001      	movs	r0, #1
 8004b26:	f7fe fa3f 	bl	8002fa8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	f8de3f23 	.word	0xf8de3f23

08004b44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b0a6      	sub	sp, #152	; 0x98
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b80:	2300      	movs	r3, #0
 8004b82:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ba6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004baa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004bac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fe86 	bl	80048d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bf8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff ff08 	bl	8004a30 <ETH_SetDMAConfig>
}
 8004c20:	bf00      	nop
 8004c22:	3798      	adds	r7, #152	; 0x98
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3305      	adds	r3, #5
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	3204      	adds	r2, #4
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <ETH_MACAddressConfig+0x68>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3303      	adds	r3, #3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	061a      	lsls	r2, r3, #24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3301      	adds	r3, #1
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <ETH_MACAddressConfig+0x6c>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6013      	str	r3, [r2, #0]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40028040 	.word	0x40028040
 8004c94:	40028044 	.word	0x40028044

08004c98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e03e      	b.n	8004d24 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	3206      	adds	r2, #6
 8004cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d80c      	bhi.n	8004d08 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68d9      	ldr	r1, [r3, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	e004      	b.n	8004d12 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d9bd      	bls.n	8004ca6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3c:	611a      	str	r2, [r3, #16]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e046      	b.n	8004de6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6919      	ldr	r1, [r3, #16]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	440b      	add	r3, r1
 8004d68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d94:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004d9c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	3212      	adds	r2, #18
 8004db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d80c      	bhi.n	8004dd6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6919      	ldr	r1, [r3, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	e004      	b.n	8004de0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d9b5      	bls.n	8004d58 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e16:	60da      	str	r2, [r3, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b08d      	sub	sp, #52	; 0x34
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3318      	adds	r3, #24
 8004e34:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e66:	d007      	beq.n	8004e78 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e103      	b.n	8005084 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	3301      	adds	r3, #1
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004e94:	f023 031f 	bic.w	r3, r3, #31
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	6852      	ldr	r2, [r2, #4]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f02:	f3bf 8f5f 	dmb	sy
}
 8004f06:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f14:	e084      	b.n	8005020 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e005      	b.n	8004f42 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	3301      	adds	r3, #1
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d902      	bls.n	8004f54 <ETH_Prepare_Tx_Descriptors+0x130>
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	3b04      	subs	r3, #4
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f76:	d007      	beq.n	8004f88 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d029      	beq.n	8004fdc <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9a:	e019      	b.n	8004fd0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f9c:	f3bf 8f5f 	dmb	sy
}
 8004fa0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d902      	bls.n	8004fc0 <ETH_Prepare_Tx_Descriptors+0x19c>
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	3301      	adds	r3, #1
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d3e1      	bcc.n	8004f9c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e053      	b.n	8005084 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004ffa:	f023 031f 	bic.w	r3, r3, #31
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	6852      	ldr	r2, [r2, #4]
 8005002:	431a      	orrs	r2, r3
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	3301      	adds	r3, #1
 800500c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800500e:	f3bf 8f5f 	dmb	sy
}
 8005012:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f47f af76 	bne.w	8004f16 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e005      	b.n	800504a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	3304      	adds	r3, #4
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800506c:	b672      	cpsid	i
}
 800506e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	4413      	add	r3, r2
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800507e:	b662      	cpsie	i
}
 8005080:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3734      	adds	r7, #52	; 0x34
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e177      	b.n	800539c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050ac:	2201      	movs	r2, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f040 8166 	bne.w	8005396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d005      	beq.n	80050e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d130      	bne.n	8005144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005118:	2201      	movs	r2, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 0201 	and.w	r2, r3, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d017      	beq.n	8005180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2203      	movs	r2, #3
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d123      	bne.n	80051d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80c0 	beq.w	8005396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	4b66      	ldr	r3, [pc, #408]	; (80053b4 <HAL_GPIO_Init+0x324>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <HAL_GPIO_Init+0x324>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_GPIO_Init+0x324>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005232:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <HAL_GPIO_Init+0x328>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_GPIO_Init+0x32c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d037      	beq.n	80052ce <HAL_GPIO_Init+0x23e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_GPIO_Init+0x330>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_GPIO_Init+0x23a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a56      	ldr	r2, [pc, #344]	; (80053c4 <HAL_GPIO_Init+0x334>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_Init+0x236>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a55      	ldr	r2, [pc, #340]	; (80053c8 <HAL_GPIO_Init+0x338>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_Init+0x232>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a54      	ldr	r2, [pc, #336]	; (80053cc <HAL_GPIO_Init+0x33c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_Init+0x22e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a53      	ldr	r2, [pc, #332]	; (80053d0 <HAL_GPIO_Init+0x340>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_Init+0x22a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a52      	ldr	r2, [pc, #328]	; (80053d4 <HAL_GPIO_Init+0x344>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_Init+0x226>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a51      	ldr	r2, [pc, #324]	; (80053d8 <HAL_GPIO_Init+0x348>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_Init+0x222>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a50      	ldr	r2, [pc, #320]	; (80053dc <HAL_GPIO_Init+0x34c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_Init+0x21e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	; (80053e0 <HAL_GPIO_Init+0x350>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_Init+0x21a>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e012      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e010      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ae:	2308      	movs	r3, #8
 80052b0:	e00e      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00c      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e00a      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052be:	2304      	movs	r3, #4
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ce:	2300      	movs	r3, #0
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e0:	4935      	ldr	r1, [pc, #212]	; (80053b8 <HAL_GPIO_Init+0x328>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <HAL_GPIO_Init+0x354>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005312:	4a34      	ldr	r2, [pc, #208]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005318:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800533c:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005342:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	f67f ae84 	bls.w	80050ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40021400 	.word	0x40021400
 80053d4:	40021800 	.word	0x40021800
 80053d8:	40021c00 	.word	0x40021c00
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022400 	.word	0x40022400
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e001      	b.n	800540a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
 8005424:	4613      	mov	r3, r2
 8005426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005434:	e003      	b.n	800543e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	619a      	str	r2, [r3, #24]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d006      	beq.n	8005470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005462:	4a05      	ldr	r2, [pc, #20]	; (8005478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fb fc30 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40013c00 	.word	0x40013c00

0800547c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e12b      	b.n	80056e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fc fcfc 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054e0:	f000 ff18 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 80054e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4a81      	ldr	r2, [pc, #516]	; (80056f0 <HAL_I2C_Init+0x274>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d807      	bhi.n	8005500 <HAL_I2C_Init+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a80      	ldr	r2, [pc, #512]	; (80056f4 <HAL_I2C_Init+0x278>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bf94      	ite	ls
 80054f8:	2301      	movls	r3, #1
 80054fa:	2300      	movhi	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e006      	b.n	800550e <HAL_I2C_Init+0x92>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a7d      	ldr	r2, [pc, #500]	; (80056f8 <HAL_I2C_Init+0x27c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	bf94      	ite	ls
 8005508:	2301      	movls	r3, #1
 800550a:	2300      	movhi	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0e7      	b.n	80056e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a78      	ldr	r2, [pc, #480]	; (80056fc <HAL_I2C_Init+0x280>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0c9b      	lsrs	r3, r3, #18
 8005520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a6a      	ldr	r2, [pc, #424]	; (80056f0 <HAL_I2C_Init+0x274>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <HAL_I2C_Init+0xd4>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3301      	adds	r3, #1
 800554e:	e009      	b.n	8005564 <HAL_I2C_Init+0xe8>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	4a69      	ldr	r2, [pc, #420]	; (8005700 <HAL_I2C_Init+0x284>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	099b      	lsrs	r3, r3, #6
 8005562:	3301      	adds	r3, #1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	430b      	orrs	r3, r1
 800556a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	495c      	ldr	r1, [pc, #368]	; (80056f0 <HAL_I2C_Init+0x274>)
 8005580:	428b      	cmp	r3, r1
 8005582:	d819      	bhi.n	80055b8 <HAL_I2C_Init+0x13c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e59      	subs	r1, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005598:	400b      	ands	r3, r1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_I2C_Init+0x138>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1e59      	subs	r1, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b2:	e051      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 80055b4:	2304      	movs	r3, #4
 80055b6:	e04f      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d111      	bne.n	80055e4 <HAL_I2C_Init+0x168>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1e58      	subs	r0, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6859      	ldr	r1, [r3, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	440b      	add	r3, r1
 80055ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e012      	b.n	800560a <HAL_I2C_Init+0x18e>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1e58      	subs	r0, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	0099      	lsls	r1, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Init+0x196>
 800560e:	2301      	movs	r3, #1
 8005610:	e022      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10e      	bne.n	8005638 <HAL_I2C_Init+0x1bc>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e58      	subs	r0, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6859      	ldr	r1, [r3, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	440b      	add	r3, r1
 8005628:	fbb0 f3f3 	udiv	r3, r0, r3
 800562c:	3301      	adds	r3, #1
 800562e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	e00f      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1e58      	subs	r0, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	0099      	lsls	r1, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	6809      	ldr	r1, [r1, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6911      	ldr	r1, [r2, #16]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68d2      	ldr	r2, [r2, #12]
 8005692:	4311      	orrs	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	430b      	orrs	r3, r1
 800569a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	000186a0 	.word	0x000186a0
 80056f4:	001e847f 	.word	0x001e847f
 80056f8:	003d08ff 	.word	0x003d08ff
 80056fc:	431bde83 	.word	0x431bde83
 8005700:	10624dd3 	.word	0x10624dd3

08005704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b20      	cmp	r3, #32
 8005718:	d129      	bne.n	800576e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2224      	movs	r2, #36	; 0x24
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0210 	bic.w	r2, r2, #16
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e000      	b.n	8005770 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800576e:	2302      	movs	r3, #2
  }
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b20      	cmp	r3, #32
 8005794:	d12a      	bne.n	80057ec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2224      	movs	r2, #36	; 0x24
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80057b6:	89fb      	ldrh	r3, [r7, #14]
 80057b8:	f023 030f 	bic.w	r3, r3, #15
 80057bc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	89fb      	ldrh	r3, [r7, #14]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	89fa      	ldrh	r2, [r7, #14]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fc:	b08f      	sub	sp, #60	; 0x3c
 80057fe:	af0a      	add	r7, sp, #40	; 0x28
 8005800:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e10f      	b.n	8005a2c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc fd90 	bl	800234c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2203      	movs	r2, #3
 8005830:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f003 ff49 	bl	80096e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	687e      	ldr	r6, [r7, #4]
 8005858:	466d      	mov	r5, sp
 800585a:	f106 0410 	add.w	r4, r6, #16
 800585e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005866:	e894 0003 	ldmia.w	r4, {r0, r1}
 800586a:	e885 0003 	stmia.w	r5, {r0, r1}
 800586e:	1d33      	adds	r3, r6, #4
 8005870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005872:	6838      	ldr	r0, [r7, #0]
 8005874:	f003 fed4 	bl	8009620 <USB_CoreInit>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0d0      	b.n	8005a2c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f003 ff37 	bl	8009704 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	e04a      	b.n	8005932 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800589c:	7bfa      	ldrb	r2, [r7, #15]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	333d      	adds	r3, #61	; 0x3d
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	333c      	adds	r3, #60	; 0x3c
 80058c0:	7bfa      	ldrb	r2, [r7, #15]
 80058c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058c4:	7bfa      	ldrb	r2, [r7, #15]
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	b298      	uxth	r0, r3
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	3344      	adds	r3, #68	; 0x44
 80058d8:	4602      	mov	r2, r0
 80058da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	3340      	adds	r3, #64	; 0x40
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	3348      	adds	r3, #72	; 0x48
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005904:	7bfa      	ldrb	r2, [r7, #15]
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	334c      	adds	r3, #76	; 0x4c
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	3354      	adds	r3, #84	; 0x54
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	3301      	adds	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d3af      	bcc.n	800589c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
 8005940:	e044      	b.n	80059cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005984:	7bfa      	ldrb	r2, [r7, #15]
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800599a:	7bfa      	ldrb	r2, [r7, #15]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059b0:	7bfa      	ldrb	r2, [r7, #15]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3301      	adds	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3b5      	bcc.n	8005942 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	687e      	ldr	r6, [r7, #4]
 80059de:	466d      	mov	r5, sp
 80059e0:	f106 0410 	add.w	r4, r6, #16
 80059e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80059f4:	1d33      	adds	r3, r6, #4
 80059f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f8:	6838      	ldr	r0, [r7, #0]
 80059fa:	f003 fecf 	bl	800979c <USB_DevInit>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e00d      	b.n	8005a2c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f004 f89a 	bl	8009b5e <USB_DevDisconnect>

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e267      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d075      	beq.n	8005b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a52:	4b88      	ldr	r3, [pc, #544]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d00c      	beq.n	8005a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5e:	4b85      	ldr	r3, [pc, #532]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d112      	bne.n	8005a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a6a:	4b82      	ldr	r3, [pc, #520]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a76:	d10b      	bne.n	8005a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a78:	4b7e      	ldr	r3, [pc, #504]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05b      	beq.n	8005b3c <HAL_RCC_OscConfig+0x108>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d157      	bne.n	8005b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e242      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x74>
 8005a9a:	4b76      	ldr	r3, [pc, #472]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a75      	ldr	r2, [pc, #468]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e01d      	b.n	8005ae4 <HAL_RCC_OscConfig+0xb0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0x98>
 8005ab2:	4b70      	ldr	r3, [pc, #448]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6f      	ldr	r2, [pc, #444]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b6d      	ldr	r3, [pc, #436]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6c      	ldr	r2, [pc, #432]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e00b      	b.n	8005ae4 <HAL_RCC_OscConfig+0xb0>
 8005acc:	4b69      	ldr	r3, [pc, #420]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a68      	ldr	r2, [pc, #416]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a65      	ldr	r2, [pc, #404]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d013      	beq.n	8005b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fd fa50 	bl	8002f90 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005af4:	f7fd fa4c 	bl	8002f90 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e207      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	4b5b      	ldr	r3, [pc, #364]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0xc0>
 8005b12:	e014      	b.n	8005b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fd fa3c 	bl	8002f90 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fa38 	bl	8002f90 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e1f3      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	4b51      	ldr	r3, [pc, #324]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0xe8>
 8005b3a:	e000      	b.n	8005b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d063      	beq.n	8005c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b4a:	4b4a      	ldr	r3, [pc, #296]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b56:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d11c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b62:	4b44      	ldr	r3, [pc, #272]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6e:	4b41      	ldr	r3, [pc, #260]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_RCC_OscConfig+0x152>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e1c7      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4937      	ldr	r1, [pc, #220]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9a:	e03a      	b.n	8005c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba4:	4b34      	ldr	r3, [pc, #208]	; (8005c78 <HAL_RCC_OscConfig+0x244>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fd f9f1 	bl	8002f90 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb2:	f7fd f9ed 	bl	8002f90 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1a8      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd0:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4925      	ldr	r1, [pc, #148]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	600b      	str	r3, [r1, #0]
 8005be4:	e015      	b.n	8005c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005be6:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <HAL_RCC_OscConfig+0x244>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd f9d0 	bl	8002f90 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf4:	f7fd f9cc 	bl	8002f90 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e187      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d036      	beq.n	8005c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <HAL_RCC_OscConfig+0x248>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7fd f9b0 	bl	8002f90 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c34:	f7fd f9ac 	bl	8002f90 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e167      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_OscConfig+0x240>)
 8005c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x200>
 8005c52:	e01b      	b.n	8005c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_RCC_OscConfig+0x248>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5a:	f7fd f999 	bl	8002f90 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c60:	e00e      	b.n	8005c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c62:	f7fd f995 	bl	8002f90 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d907      	bls.n	8005c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e150      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
 8005c74:	40023800 	.word	0x40023800
 8005c78:	42470000 	.word	0x42470000
 8005c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c80:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1ea      	bne.n	8005c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8097 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9e:	4b81      	ldr	r3, [pc, #516]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10f      	bne.n	8005cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	4b7d      	ldr	r3, [pc, #500]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	4a7c      	ldr	r2, [pc, #496]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cba:	4b7a      	ldr	r3, [pc, #488]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	60bb      	str	r3, [r7, #8]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cca:	4b77      	ldr	r3, [pc, #476]	; (8005ea8 <HAL_RCC_OscConfig+0x474>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d118      	bne.n	8005d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cd6:	4b74      	ldr	r3, [pc, #464]	; (8005ea8 <HAL_RCC_OscConfig+0x474>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a73      	ldr	r2, [pc, #460]	; (8005ea8 <HAL_RCC_OscConfig+0x474>)
 8005cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ce2:	f7fd f955 	bl	8002f90 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cea:	f7fd f951 	bl	8002f90 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e10c      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfc:	4b6a      	ldr	r3, [pc, #424]	; (8005ea8 <HAL_RCC_OscConfig+0x474>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d106      	bne.n	8005d1e <HAL_RCC_OscConfig+0x2ea>
 8005d10:	4b64      	ldr	r3, [pc, #400]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	4a63      	ldr	r2, [pc, #396]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1c:	e01c      	b.n	8005d58 <HAL_RCC_OscConfig+0x324>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCC_OscConfig+0x30c>
 8005d26:	4b5f      	ldr	r3, [pc, #380]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	4a5e      	ldr	r2, [pc, #376]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	f043 0304 	orr.w	r3, r3, #4
 8005d30:	6713      	str	r3, [r2, #112]	; 0x70
 8005d32:	4b5c      	ldr	r3, [pc, #368]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	4a5b      	ldr	r2, [pc, #364]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3e:	e00b      	b.n	8005d58 <HAL_RCC_OscConfig+0x324>
 8005d40:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d44:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4c:	4b55      	ldr	r3, [pc, #340]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	4a54      	ldr	r2, [pc, #336]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d52:	f023 0304 	bic.w	r3, r3, #4
 8005d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d015      	beq.n	8005d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d60:	f7fd f916 	bl	8002f90 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d66:	e00a      	b.n	8005d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d68:	f7fd f912 	bl	8002f90 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e0cb      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7e:	4b49      	ldr	r3, [pc, #292]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0ee      	beq.n	8005d68 <HAL_RCC_OscConfig+0x334>
 8005d8a:	e014      	b.n	8005db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8c:	f7fd f900 	bl	8002f90 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d92:	e00a      	b.n	8005daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d94:	f7fd f8fc 	bl	8002f90 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e0b5      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005daa:	4b3e      	ldr	r3, [pc, #248]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ee      	bne.n	8005d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d105      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dbc:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	4a38      	ldr	r2, [pc, #224]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80a1 	beq.w	8005f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dd2:	4b34      	ldr	r3, [pc, #208]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d05c      	beq.n	8005e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d141      	bne.n	8005e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de6:	4b31      	ldr	r3, [pc, #196]	; (8005eac <HAL_RCC_OscConfig+0x478>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dec:	f7fd f8d0 	bl	8002f90 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df4:	f7fd f8cc 	bl	8002f90 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e087      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	019b      	lsls	r3, r3, #6
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	491b      	ldr	r1, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x478>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e42:	f7fd f8a5 	bl	8002f90 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fd f8a1 	bl	8002f90 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e05c      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x416>
 8005e68:	e054      	b.n	8005f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <HAL_RCC_OscConfig+0x478>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd f88e 	bl	8002f90 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e78:	f7fd f88a 	bl	8002f90 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e045      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x444>
 8005e96:	e03d      	b.n	8005f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e038      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <HAL_RCC_OscConfig+0x4ec>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d028      	beq.n	8005f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d121      	bne.n	8005f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d11a      	bne.n	8005f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d111      	bne.n	8005f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d107      	bne.n	8005f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800

08005f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0cc      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f38:	4b68      	ldr	r3, [pc, #416]	; (80060dc <HAL_RCC_ClockConfig+0x1b8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d90c      	bls.n	8005f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b65      	ldr	r3, [pc, #404]	; (80060dc <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b63      	ldr	r3, [pc, #396]	; (80060dc <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0b8      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d020      	beq.n	8005fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f78:	4b59      	ldr	r3, [pc, #356]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a58      	ldr	r2, [pc, #352]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f90:	4b53      	ldr	r3, [pc, #332]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4a52      	ldr	r2, [pc, #328]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9c:	4b50      	ldr	r3, [pc, #320]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	494d      	ldr	r1, [pc, #308]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d044      	beq.n	8006044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	4b47      	ldr	r3, [pc, #284]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d119      	bne.n	8006002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e07f      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe2:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e06f      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff2:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e067      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006002:	4b37      	ldr	r3, [pc, #220]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f023 0203 	bic.w	r2, r3, #3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4934      	ldr	r1, [pc, #208]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006014:	f7fc ffbc 	bl	8002f90 <HAL_GetTick>
 8006018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601a:	e00a      	b.n	8006032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800601c:	f7fc ffb8 	bl	8002f90 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	; 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e04f      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006032:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 020c 	and.w	r2, r3, #12
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	429a      	cmp	r2, r3
 8006042:	d1eb      	bne.n	800601c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006044:	4b25      	ldr	r3, [pc, #148]	; (80060dc <HAL_RCC_ClockConfig+0x1b8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d20c      	bcs.n	800606c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006052:	4b22      	ldr	r3, [pc, #136]	; (80060dc <HAL_RCC_ClockConfig+0x1b8>)
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	4b20      	ldr	r3, [pc, #128]	; (80060dc <HAL_RCC_ClockConfig+0x1b8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d001      	beq.n	800606c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e032      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006078:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4916      	ldr	r1, [pc, #88]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006086:	4313      	orrs	r3, r2
 8006088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	490e      	ldr	r1, [pc, #56]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060aa:	f000 f821 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 80060ae:	4602      	mov	r2, r0
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	490a      	ldr	r1, [pc, #40]	; (80060e4 <HAL_RCC_ClockConfig+0x1c0>)
 80060bc:	5ccb      	ldrb	r3, [r1, r3]
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <HAL_RCC_ClockConfig+0x1c4>)
 80060c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCC_ClockConfig+0x1c8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fc f998 	bl	8002400 <HAL_InitTick>

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40023c00 	.word	0x40023c00
 80060e0:	40023800 	.word	0x40023800
 80060e4:	0801d2c8 	.word	0x0801d2c8
 80060e8:	2000013c 	.word	0x2000013c
 80060ec:	20000140 	.word	0x20000140

080060f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f4:	b094      	sub	sp, #80	; 0x50
 80060f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	647b      	str	r3, [r7, #68]	; 0x44
 80060fc:	2300      	movs	r3, #0
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	2300      	movs	r3, #0
 8006102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006108:	4b79      	ldr	r3, [pc, #484]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 030c 	and.w	r3, r3, #12
 8006110:	2b08      	cmp	r3, #8
 8006112:	d00d      	beq.n	8006130 <HAL_RCC_GetSysClockFreq+0x40>
 8006114:	2b08      	cmp	r3, #8
 8006116:	f200 80e1 	bhi.w	80062dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0x34>
 800611e:	2b04      	cmp	r3, #4
 8006120:	d003      	beq.n	800612a <HAL_RCC_GetSysClockFreq+0x3a>
 8006122:	e0db      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006124:	4b73      	ldr	r3, [pc, #460]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006128:	e0db      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800612a:	4b73      	ldr	r3, [pc, #460]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800612c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800612e:	e0d8      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006130:	4b6f      	ldr	r3, [pc, #444]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006138:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800613a:	4b6d      	ldr	r3, [pc, #436]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d063      	beq.n	800620e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006146:	4b6a      	ldr	r3, [pc, #424]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	099b      	lsrs	r3, r3, #6
 800614c:	2200      	movs	r2, #0
 800614e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006158:	633b      	str	r3, [r7, #48]	; 0x30
 800615a:	2300      	movs	r3, #0
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
 800615e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006162:	4622      	mov	r2, r4
 8006164:	462b      	mov	r3, r5
 8006166:	f04f 0000 	mov.w	r0, #0
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	0159      	lsls	r1, r3, #5
 8006170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006174:	0150      	lsls	r0, r2, #5
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4621      	mov	r1, r4
 800617c:	1a51      	subs	r1, r2, r1
 800617e:	6139      	str	r1, [r7, #16]
 8006180:	4629      	mov	r1, r5
 8006182:	eb63 0301 	sbc.w	r3, r3, r1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006194:	4659      	mov	r1, fp
 8006196:	018b      	lsls	r3, r1, #6
 8006198:	4651      	mov	r1, sl
 800619a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800619e:	4651      	mov	r1, sl
 80061a0:	018a      	lsls	r2, r1, #6
 80061a2:	4651      	mov	r1, sl
 80061a4:	ebb2 0801 	subs.w	r8, r2, r1
 80061a8:	4659      	mov	r1, fp
 80061aa:	eb63 0901 	sbc.w	r9, r3, r1
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c2:	4690      	mov	r8, r2
 80061c4:	4699      	mov	r9, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	eb18 0303 	adds.w	r3, r8, r3
 80061cc:	60bb      	str	r3, [r7, #8]
 80061ce:	462b      	mov	r3, r5
 80061d0:	eb49 0303 	adc.w	r3, r9, r3
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061e2:	4629      	mov	r1, r5
 80061e4:	024b      	lsls	r3, r1, #9
 80061e6:	4621      	mov	r1, r4
 80061e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061ec:	4621      	mov	r1, r4
 80061ee:	024a      	lsls	r2, r1, #9
 80061f0:	4610      	mov	r0, r2
 80061f2:	4619      	mov	r1, r3
 80061f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f6:	2200      	movs	r2, #0
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006200:	f7fa f84e 	bl	80002a0 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4613      	mov	r3, r2
 800620a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620c:	e058      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620e:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	099b      	lsrs	r3, r3, #6
 8006214:	2200      	movs	r2, #0
 8006216:	4618      	mov	r0, r3
 8006218:	4611      	mov	r1, r2
 800621a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	2300      	movs	r3, #0
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
 8006224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	f04f 0000 	mov.w	r0, #0
 8006230:	f04f 0100 	mov.w	r1, #0
 8006234:	0159      	lsls	r1, r3, #5
 8006236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800623a:	0150      	lsls	r0, r2, #5
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4641      	mov	r1, r8
 8006242:	ebb2 0a01 	subs.w	sl, r2, r1
 8006246:	4649      	mov	r1, r9
 8006248:	eb63 0b01 	sbc.w	fp, r3, r1
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800625c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006260:	ebb2 040a 	subs.w	r4, r2, sl
 8006264:	eb63 050b 	sbc.w	r5, r3, fp
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	00eb      	lsls	r3, r5, #3
 8006272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006276:	00e2      	lsls	r2, r4, #3
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	4643      	mov	r3, r8
 800627e:	18e3      	adds	r3, r4, r3
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	464b      	mov	r3, r9
 8006284:	eb45 0303 	adc.w	r3, r5, r3
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006296:	4629      	mov	r1, r5
 8006298:	028b      	lsls	r3, r1, #10
 800629a:	4621      	mov	r1, r4
 800629c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062a0:	4621      	mov	r1, r4
 80062a2:	028a      	lsls	r2, r1, #10
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062aa:	2200      	movs	r2, #0
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	61fa      	str	r2, [r7, #28]
 80062b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062b4:	f7f9 fff4 	bl	80002a0 <__aeabi_uldivmod>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4613      	mov	r3, r2
 80062be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	3301      	adds	r3, #1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062da:	e002      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3750      	adds	r7, #80	; 0x50
 80062e8:	46bd      	mov	sp, r7
 80062ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	007a1200 	.word	0x007a1200

080062fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_RCC_GetHCLKFreq+0x14>)
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	2000013c 	.word	0x2000013c

08006314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006318:	f7ff fff0 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 800631c:	4602      	mov	r2, r0
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	0a9b      	lsrs	r3, r3, #10
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	4903      	ldr	r1, [pc, #12]	; (8006338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800632a:	5ccb      	ldrb	r3, [r1, r3]
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40023800 	.word	0x40023800
 8006338:	0801d2d8 	.word	0x0801d2d8

0800633c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006340:	f7ff ffdc 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	0b5b      	lsrs	r3, r3, #13
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	4903      	ldr	r1, [pc, #12]	; (8006360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40023800 	.word	0x40023800
 8006360:	0801d2d8 	.word	0x0801d2d8

08006364 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	220f      	movs	r2, #15
 8006372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 0203 	and.w	r2, r3, #3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <HAL_RCC_GetClockConfig+0x5c>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006398:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCC_GetClockConfig+0x5c>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	08db      	lsrs	r3, r3, #3
 800639e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_RCC_GetClockConfig+0x60>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40023c00 	.word	0x40023c00

080063c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d075      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063fc:	4b91      	ldr	r3, [pc, #580]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006402:	f7fc fdc5 	bl	8002f90 <HAL_GetTick>
 8006406:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006408:	e008      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800640a:	f7fc fdc1 	bl	8002f90 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e189      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800641c:	4b8a      	ldr	r3, [pc, #552]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	019a      	lsls	r2, r3, #6
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	071b      	lsls	r3, r3, #28
 8006440:	4981      	ldr	r1, [pc, #516]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01f      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006454:	4b7c      	ldr	r3, [pc, #496]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645a:	0f1b      	lsrs	r3, r3, #28
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	019a      	lsls	r2, r3, #6
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	061b      	lsls	r3, r3, #24
 800646e:	431a      	orrs	r2, r3
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	071b      	lsls	r3, r3, #28
 8006474:	4974      	ldr	r1, [pc, #464]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800647c:	4b72      	ldr	r3, [pc, #456]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800647e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006482:	f023 021f 	bic.w	r2, r3, #31
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	3b01      	subs	r3, #1
 800648c:	496e      	ldr	r1, [pc, #440]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00d      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	019a      	lsls	r2, r3, #6
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	061b      	lsls	r3, r3, #24
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	071b      	lsls	r3, r3, #28
 80064b4:	4964      	ldr	r1, [pc, #400]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064bc:	4b61      	ldr	r3, [pc, #388]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064c2:	f7fc fd65 	bl	8002f90 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064c8:	e008      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ca:	f7fc fd61 	bl	8002f90 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e129      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064dc:	4b5a      	ldr	r3, [pc, #360]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0f0      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d079      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006500:	4b52      	ldr	r3, [pc, #328]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006506:	f7fc fd43 	bl	8002f90 <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800650c:	e008      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800650e:	f7fc fd3f 	bl	8002f90 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e107      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006520:	4b49      	ldr	r3, [pc, #292]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652c:	d0ef      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d020      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800653a:	4b43      	ldr	r3, [pc, #268]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006540:	0f1b      	lsrs	r3, r3, #28
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	019a      	lsls	r2, r3, #6
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	061b      	lsls	r3, r3, #24
 8006554:	431a      	orrs	r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	071b      	lsls	r3, r3, #28
 800655a:	493b      	ldr	r1, [pc, #236]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006562:	4b39      	ldr	r3, [pc, #228]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006568:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	3b01      	subs	r3, #1
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	4934      	ldr	r1, [pc, #208]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01e      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006588:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	0e1b      	lsrs	r3, r3, #24
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	019a      	lsls	r2, r3, #6
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	061b      	lsls	r3, r3, #24
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	071b      	lsls	r3, r3, #28
 80065a8:	4927      	ldr	r1, [pc, #156]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065b0:	4b25      	ldr	r3, [pc, #148]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	4922      	ldr	r1, [pc, #136]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065cc:	f7fc fce0 	bl	8002f90 <HAL_GetTick>
 80065d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065d4:	f7fc fcdc 	bl	8002f90 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e0a4      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065e6:	4b18      	ldr	r3, [pc, #96]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065f2:	d1ef      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 808b 	beq.w	8006718 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	4a0f      	ldr	r2, [pc, #60]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800660c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006610:	6413      	str	r3, [r2, #64]	; 0x40
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800661e:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a0b      	ldr	r2, [pc, #44]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006628:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800662a:	f7fc fcb1 	bl	8002f90 <HAL_GetTick>
 800662e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006630:	e010      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006632:	f7fc fcad 	bl	8002f90 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d909      	bls.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e075      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006644:	42470068 	.word	0x42470068
 8006648:	40023800 	.word	0x40023800
 800664c:	42470070 	.word	0x42470070
 8006650:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006654:	4b38      	ldr	r3, [pc, #224]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0e8      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006660:	4b36      	ldr	r3, [pc, #216]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006668:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d02f      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d028      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800667e:	4b2f      	ldr	r3, [pc, #188]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006686:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006688:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800668e:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006694:	4a29      	ldr	r2, [pc, #164]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800669a:	4b28      	ldr	r3, [pc, #160]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d114      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066a6:	f7fc fc73 	bl	8002f90 <HAL_GetTick>
 80066aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ac:	e00a      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ae:	f7fc fc6f 	bl	8002f90 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e035      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ee      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066dc:	d10d      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066de:	4b17      	ldr	r3, [pc, #92]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f2:	4912      	ldr	r1, [pc, #72]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	608b      	str	r3, [r1, #8]
 80066f8:	e005      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80066fa:	4b10      	ldr	r3, [pc, #64]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4a0f      	ldr	r2, [pc, #60]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006700:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006704:	6093      	str	r3, [r2, #8]
 8006706:	4b0d      	ldr	r3, [pc, #52]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006708:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006712:	490a      	ldr	r1, [pc, #40]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006714:	4313      	orrs	r3, r2
 8006716:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800672c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40007000 	.word	0x40007000
 800673c:	40023800 	.word	0x40023800
 8006740:	42470e40 	.word	0x42470e40
 8006744:	424711e0 	.word	0x424711e0

08006748 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e066      	b.n	800682c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7f5b      	ldrb	r3, [r3, #29]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fb fbde 	bl	8001f30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	22ca      	movs	r2, #202	; 0xca
 8006780:	625a      	str	r2, [r3, #36]	; 0x24
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2253      	movs	r2, #83	; 0x53
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f998 	bl	8006ac0 <RTC_EnterInitMode>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d12c      	bne.n	80067f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6899      	ldr	r1, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	68d2      	ldr	r2, [r2, #12]
 80067d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6919      	ldr	r1, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	041a      	lsls	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f99f 	bl	8006b2e <RTC_ExitInitMode>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d113      	bne.n	8006822 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006808:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006834:	b590      	push	{r4, r7, lr}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	7f1b      	ldrb	r3, [r3, #28]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_RTC_SetTime+0x1c>
 800684c:	2302      	movs	r3, #2
 800684e:	e087      	b.n	8006960 <HAL_RTC_SetTime+0x12c>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2202      	movs	r2, #2
 800685a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d126      	bne.n	80068b0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f97c 	bl	8006b78 <RTC_ByteToBcd2>
 8006880:	4603      	mov	r3, r0
 8006882:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	4618      	mov	r0, r3
 800688a:	f000 f975 	bl	8006b78 <RTC_ByteToBcd2>
 800688e:	4603      	mov	r3, r0
 8006890:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006892:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	789b      	ldrb	r3, [r3, #2]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f96d 	bl	8006b78 <RTC_ByteToBcd2>
 800689e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	78db      	ldrb	r3, [r3, #3]
 80068a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e018      	b.n	80068e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2200      	movs	r2, #0
 80068c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068d0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	78db      	ldrb	r3, [r3, #3]
 80068dc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	22ca      	movs	r2, #202	; 0xca
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2253      	movs	r2, #83	; 0x53
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f8e4 	bl	8006ac0 <RTC_EnterInitMode>
 80068f8:	4603      	mov	r3, r0
 80068fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80068fc:	7cfb      	ldrb	r3, [r7, #19]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d120      	bne.n	8006944 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800690c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006910:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006920:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6899      	ldr	r1, [r3, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f8f7 	bl	8006b2e <RTC_ExitInitMode>
 8006940:	4603      	mov	r3, r0
 8006942:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006944:	7cfb      	ldrb	r3, [r7, #19]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	22ff      	movs	r2, #255	; 0xff
 8006956:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	771a      	strb	r2, [r3, #28]

  return status;
 800695e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006960:	4618      	mov	r0, r3
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd90      	pop	{r4, r7, pc}

08006968 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	7f1b      	ldrb	r3, [r3, #28]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_RTC_SetDate+0x1c>
 8006980:	2302      	movs	r3, #2
 8006982:	e071      	b.n	8006a68 <HAL_RTC_SetDate+0x100>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2202      	movs	r2, #2
 800698e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10e      	bne.n	80069b4 <HAL_RTC_SetDate+0x4c>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	330a      	adds	r3, #10
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11c      	bne.n	80069f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	78db      	ldrb	r3, [r3, #3]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f8da 	bl	8006b78 <RTC_ByteToBcd2>
 80069c4:	4603      	mov	r3, r0
 80069c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f8d3 	bl	8006b78 <RTC_ByteToBcd2>
 80069d2:	4603      	mov	r3, r0
 80069d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	789b      	ldrb	r3, [r3, #2]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f8cb 	bl	8006b78 <RTC_ByteToBcd2>
 80069e2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069e4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e00e      	b.n	8006a12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	78db      	ldrb	r3, [r3, #3]
 80069f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a00:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	22ca      	movs	r2, #202	; 0xca
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2253      	movs	r2, #83	; 0x53
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f84c 	bl	8006ac0 <RTC_EnterInitMode>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a2c:	7cfb      	ldrb	r3, [r7, #19]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10c      	bne.n	8006a4c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f873 	bl	8006b2e <RTC_ExitInitMode>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	22ff      	movs	r2, #255	; 0xff
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	771a      	strb	r2, [r3, #28]

  return status;
 8006a66:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd90      	pop	{r4, r7, pc}

08006a70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a8c:	f7fc fa80 	bl	8002f90 <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a92:	e009      	b.n	8006aa8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a94:	f7fc fa7c 	bl	8002f90 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e007      	b.n	8006ab8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0ee      	beq.n	8006a94 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d122      	bne.n	8006b24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aee:	f7fc fa4f 	bl	8002f90 <HAL_GetTick>
 8006af2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006af4:	e00c      	b.n	8006b10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006af6:	f7fc fa4b 	bl	8002f90 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b04:	d904      	bls.n	8006b10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <RTC_EnterInitMode+0x64>
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d1e8      	bne.n	8006af6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ff89 	bl	8006a70 <HAL_RTC_WaitForSynchro>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2204      	movs	r2, #4
 8006b68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006b86:	e005      	b.n	8006b94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	3b0a      	subs	r3, #10
 8006b92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d8f6      	bhi.n	8006b88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b2db      	uxtb	r3, r3
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e041      	b.n	8006c48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fb fa49 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f000 ffd3 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d001      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e04e      	b.n	8006d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a23      	ldr	r2, [pc, #140]	; (8006d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d022      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c92:	d01d      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1f      	ldr	r2, [pc, #124]	; (8006d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d018      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00e      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x80>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d111      	bne.n	8006cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b06      	cmp	r3, #6
 8006ce0:	d010      	beq.n	8006d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf2:	e007      	b.n	8006d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40001800 	.word	0x40001800

08006d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e041      	b.n	8006dc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb f914 	bl	8001f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f000 ff14 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_TIM_PWM_Start+0x24>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	bf14      	ite	ne
 8006dec:	2301      	movne	r3, #1
 8006dee:	2300      	moveq	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	e022      	b.n	8006e3a <HAL_TIM_PWM_Start+0x6a>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d109      	bne.n	8006e0e <HAL_TIM_PWM_Start+0x3e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	bf14      	ite	ne
 8006e06:	2301      	movne	r3, #1
 8006e08:	2300      	moveq	r3, #0
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	e015      	b.n	8006e3a <HAL_TIM_PWM_Start+0x6a>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d109      	bne.n	8006e28 <HAL_TIM_PWM_Start+0x58>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	bf14      	ite	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	2300      	moveq	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	e008      	b.n	8006e3a <HAL_TIM_PWM_Start+0x6a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	bf14      	ite	ne
 8006e34:	2301      	movne	r3, #1
 8006e36:	2300      	moveq	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e07c      	b.n	8006f3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_PWM_Start+0x82>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e50:	e013      	b.n	8006e7a <HAL_TIM_PWM_Start+0xaa>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_PWM_Start+0x92>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e60:	e00b      	b.n	8006e7a <HAL_TIM_PWM_Start+0xaa>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d104      	bne.n	8006e72 <HAL_TIM_PWM_Start+0xa2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e70:	e003      	b.n	8006e7a <HAL_TIM_PWM_Start+0xaa>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fa9e 	bl	80083c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2d      	ldr	r2, [pc, #180]	; (8006f44 <HAL_TIM_PWM_Start+0x174>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_TIM_PWM_Start+0xcc>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2c      	ldr	r2, [pc, #176]	; (8006f48 <HAL_TIM_PWM_Start+0x178>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_PWM_Start+0xd0>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_TIM_PWM_Start+0xd2>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a22      	ldr	r2, [pc, #136]	; (8006f44 <HAL_TIM_PWM_Start+0x174>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d01d      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1f      	ldr	r2, [pc, #124]	; (8006f4c <HAL_TIM_PWM_Start+0x17c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <HAL_TIM_PWM_Start+0x180>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <HAL_TIM_PWM_Start+0x184>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a16      	ldr	r2, [pc, #88]	; (8006f48 <HAL_TIM_PWM_Start+0x178>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <HAL_TIM_PWM_Start+0x188>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIM_PWM_Start+0x136>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a16      	ldr	r2, [pc, #88]	; (8006f5c <HAL_TIM_PWM_Start+0x18c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d111      	bne.n	8006f2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b06      	cmp	r3, #6
 8006f16:	d010      	beq.n	8006f3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	e007      	b.n	8006f3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0201 	orr.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40010400 	.word	0x40010400
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40001800 	.word	0x40001800

08006f60 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_TIM_PWM_Start_IT+0x28>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e022      	b.n	8006fce <HAL_TIM_PWM_Start_IT+0x6e>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d109      	bne.n	8006fa2 <HAL_TIM_PWM_Start_IT+0x42>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	e015      	b.n	8006fce <HAL_TIM_PWM_Start_IT+0x6e>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d109      	bne.n	8006fbc <HAL_TIM_PWM_Start_IT+0x5c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e008      	b.n	8006fce <HAL_TIM_PWM_Start_IT+0x6e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e0c7      	b.n	8007166 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIM_PWM_Start_IT+0x86>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe4:	e013      	b.n	800700e <HAL_TIM_PWM_Start_IT+0xae>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_PWM_Start_IT+0x96>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff4:	e00b      	b.n	800700e <HAL_TIM_PWM_Start_IT+0xae>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_PWM_Start_IT+0xa6>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007004:	e003      	b.n	800700e <HAL_TIM_PWM_Start_IT+0xae>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b0c      	cmp	r3, #12
 8007012:	d841      	bhi.n	8007098 <HAL_TIM_PWM_Start_IT+0x138>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <HAL_TIM_PWM_Start_IT+0xbc>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007051 	.word	0x08007051
 8007020:	08007099 	.word	0x08007099
 8007024:	08007099 	.word	0x08007099
 8007028:	08007099 	.word	0x08007099
 800702c:	08007063 	.word	0x08007063
 8007030:	08007099 	.word	0x08007099
 8007034:	08007099 	.word	0x08007099
 8007038:	08007099 	.word	0x08007099
 800703c:	08007075 	.word	0x08007075
 8007040:	08007099 	.word	0x08007099
 8007044:	08007099 	.word	0x08007099
 8007048:	08007099 	.word	0x08007099
 800704c:	08007087 	.word	0x08007087
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0202 	orr.w	r2, r2, #2
 800705e:	60da      	str	r2, [r3, #12]
      break;
 8007060:	e01d      	b.n	800709e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0204 	orr.w	r2, r2, #4
 8007070:	60da      	str	r2, [r3, #12]
      break;
 8007072:	e014      	b.n	800709e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0208 	orr.w	r2, r2, #8
 8007082:	60da      	str	r2, [r3, #12]
      break;
 8007084:	e00b      	b.n	800709e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0210 	orr.w	r2, r2, #16
 8007094:	60da      	str	r2, [r3, #12]
      break;
 8007096:	e002      	b.n	800709e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
      break;
 800709c:	bf00      	nop
  }

  if (status == HAL_OK)
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15f      	bne.n	8007164 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 f989 	bl	80083c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2e      	ldr	r2, [pc, #184]	; (8007170 <HAL_TIM_PWM_Start_IT+0x210>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIM_PWM_Start_IT+0x166>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <HAL_TIM_PWM_Start_IT+0x214>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_PWM_Start_IT+0x16a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <HAL_TIM_PWM_Start_IT+0x16c>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a22      	ldr	r2, [pc, #136]	; (8007170 <HAL_TIM_PWM_Start_IT+0x210>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d022      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f2:	d01d      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1f      	ldr	r2, [pc, #124]	; (8007178 <HAL_TIM_PWM_Start_IT+0x218>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d018      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1e      	ldr	r2, [pc, #120]	; (800717c <HAL_TIM_PWM_Start_IT+0x21c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <HAL_TIM_PWM_Start_IT+0x220>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00e      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a17      	ldr	r2, [pc, #92]	; (8007174 <HAL_TIM_PWM_Start_IT+0x214>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d009      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_TIM_PWM_Start_IT+0x224>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d004      	beq.n	8007130 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a17      	ldr	r2, [pc, #92]	; (8007188 <HAL_TIM_PWM_Start_IT+0x228>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d111      	bne.n	8007154 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b06      	cmp	r3, #6
 8007140:	d010      	beq.n	8007164 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0201 	orr.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007152:	e007      	b.n	8007164 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40014000 	.word	0x40014000
 8007188:	40001800 	.word	0x40001800

0800718c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e041      	b.n	8007222 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fa ff0c 	bl	8001fd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f000 fce6 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <HAL_TIM_IC_Start_IT+0x1e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007246:	b2db      	uxtb	r3, r3
 8007248:	e013      	b.n	8007272 <HAL_TIM_IC_Start_IT+0x46>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b04      	cmp	r3, #4
 800724e:	d104      	bne.n	800725a <HAL_TIM_IC_Start_IT+0x2e>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007256:	b2db      	uxtb	r3, r3
 8007258:	e00b      	b.n	8007272 <HAL_TIM_IC_Start_IT+0x46>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b08      	cmp	r3, #8
 800725e:	d104      	bne.n	800726a <HAL_TIM_IC_Start_IT+0x3e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007266:	b2db      	uxtb	r3, r3
 8007268:	e003      	b.n	8007272 <HAL_TIM_IC_Start_IT+0x46>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007270:	b2db      	uxtb	r3, r3
 8007272:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_TIM_IC_Start_IT+0x58>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e013      	b.n	80072ac <HAL_TIM_IC_Start_IT+0x80>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b04      	cmp	r3, #4
 8007288:	d104      	bne.n	8007294 <HAL_TIM_IC_Start_IT+0x68>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007290:	b2db      	uxtb	r3, r3
 8007292:	e00b      	b.n	80072ac <HAL_TIM_IC_Start_IT+0x80>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b08      	cmp	r3, #8
 8007298:	d104      	bne.n	80072a4 <HAL_TIM_IC_Start_IT+0x78>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e003      	b.n	80072ac <HAL_TIM_IC_Start_IT+0x80>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d102      	bne.n	80072ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80072b4:	7b7b      	ldrb	r3, [r7, #13]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d001      	beq.n	80072be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0cc      	b.n	8007458 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <HAL_TIM_IC_Start_IT+0xa2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072cc:	e013      	b.n	80072f6 <HAL_TIM_IC_Start_IT+0xca>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d104      	bne.n	80072de <HAL_TIM_IC_Start_IT+0xb2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072dc:	e00b      	b.n	80072f6 <HAL_TIM_IC_Start_IT+0xca>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_IC_Start_IT+0xc2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072ec:	e003      	b.n	80072f6 <HAL_TIM_IC_Start_IT+0xca>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <HAL_TIM_IC_Start_IT+0xda>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007304:	e013      	b.n	800732e <HAL_TIM_IC_Start_IT+0x102>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d104      	bne.n	8007316 <HAL_TIM_IC_Start_IT+0xea>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007314:	e00b      	b.n	800732e <HAL_TIM_IC_Start_IT+0x102>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b08      	cmp	r3, #8
 800731a:	d104      	bne.n	8007326 <HAL_TIM_IC_Start_IT+0xfa>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007324:	e003      	b.n	800732e <HAL_TIM_IC_Start_IT+0x102>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b0c      	cmp	r3, #12
 8007332:	d841      	bhi.n	80073b8 <HAL_TIM_IC_Start_IT+0x18c>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_TIM_IC_Start_IT+0x110>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	08007371 	.word	0x08007371
 8007340:	080073b9 	.word	0x080073b9
 8007344:	080073b9 	.word	0x080073b9
 8007348:	080073b9 	.word	0x080073b9
 800734c:	08007383 	.word	0x08007383
 8007350:	080073b9 	.word	0x080073b9
 8007354:	080073b9 	.word	0x080073b9
 8007358:	080073b9 	.word	0x080073b9
 800735c:	08007395 	.word	0x08007395
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073b9 	.word	0x080073b9
 8007368:	080073b9 	.word	0x080073b9
 800736c:	080073a7 	.word	0x080073a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0202 	orr.w	r2, r2, #2
 800737e:	60da      	str	r2, [r3, #12]
      break;
 8007380:	e01d      	b.n	80073be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0204 	orr.w	r2, r2, #4
 8007390:	60da      	str	r2, [r3, #12]
      break;
 8007392:	e014      	b.n	80073be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0208 	orr.w	r2, r2, #8
 80073a2:	60da      	str	r2, [r3, #12]
      break;
 80073a4:	e00b      	b.n	80073be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0210 	orr.w	r2, r2, #16
 80073b4:	60da      	str	r2, [r3, #12]
      break;
 80073b6:	e002      	b.n	80073be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
      break;
 80073bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d148      	bne.n	8007456 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2201      	movs	r2, #1
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fff9 	bl	80083c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a22      	ldr	r2, [pc, #136]	; (8007460 <HAL_TIM_IC_Start_IT+0x234>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d022      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e4:	d01d      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <HAL_TIM_IC_Start_IT+0x238>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d018      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <HAL_TIM_IC_Start_IT+0x23c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HAL_TIM_IC_Start_IT+0x240>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a19      	ldr	r2, [pc, #100]	; (8007470 <HAL_TIM_IC_Start_IT+0x244>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a18      	ldr	r2, [pc, #96]	; (8007474 <HAL_TIM_IC_Start_IT+0x248>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x1f6>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a16      	ldr	r2, [pc, #88]	; (8007478 <HAL_TIM_IC_Start_IT+0x24c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d111      	bne.n	8007446 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b06      	cmp	r3, #6
 8007432:	d010      	beq.n	8007456 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	e007      	b.n	8007456 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0201 	orr.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40010400 	.word	0x40010400
 8007474:	40014000 	.word	0x40014000
 8007478:	40001800 	.word	0x40001800

0800747c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b02      	cmp	r3, #2
 8007490:	d122      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b02      	cmp	r3, #2
 800749e:	d11b      	bne.n	80074d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0202 	mvn.w	r2, #2
 80074a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fb fb70 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fb4a 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fb51 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d122      	bne.n	800752c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d11b      	bne.n	800752c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0204 	mvn.w	r2, #4
 80074fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fb fb46 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 8007518:	e005      	b.n	8007526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb20 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb27 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b08      	cmp	r3, #8
 8007538:	d122      	bne.n	8007580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b08      	cmp	r3, #8
 8007546:	d11b      	bne.n	8007580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0208 	mvn.w	r2, #8
 8007550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2204      	movs	r2, #4
 8007556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fb fb1c 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 800756c:	e005      	b.n	800757a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 faf6 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fafd 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b10      	cmp	r3, #16
 800758c:	d122      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b10      	cmp	r3, #16
 800759a:	d11b      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0210 	mvn.w	r2, #16
 80075a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2208      	movs	r2, #8
 80075aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fb faf2 	bl	8002ba4 <HAL_TIM_IC_CaptureCallback>
 80075c0:	e005      	b.n	80075ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 facc 	bl	8007b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fad3 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d10e      	bne.n	8007600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d107      	bne.n	8007600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0201 	mvn.w	r2, #1
 80075f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa fa24 	bl	8001a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d10e      	bne.n	800762c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007618:	2b80      	cmp	r3, #128	; 0x80
 800761a:	d107      	bne.n	800762c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 ff78 	bl	800851c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d10e      	bne.n	8007658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d107      	bne.n	8007658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa98 	bl	8007b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b20      	cmp	r3, #32
 8007664:	d10e      	bne.n	8007684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0320 	and.w	r3, r3, #32
 8007670:	2b20      	cmp	r3, #32
 8007672:	d107      	bne.n	8007684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0220 	mvn.w	r2, #32
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 ff42 	bl	8008508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e088      	b.n	80077bc <HAL_TIM_IC_ConfigChannel+0x130>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11b      	bne.n	80076f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f000 fcb8 	bl	800803c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 020c 	bic.w	r2, r2, #12
 80076da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6999      	ldr	r1, [r3, #24]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	619a      	str	r2, [r3, #24]
 80076ee:	e060      	b.n	80077b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d11c      	bne.n	8007730 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f000 fd3c 	bl	8008182 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007718:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6999      	ldr	r1, [r3, #24]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	021a      	lsls	r2, r3, #8
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	619a      	str	r2, [r3, #24]
 800772e:	e040      	b.n	80077b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b08      	cmp	r3, #8
 8007734:	d11b      	bne.n	800776e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f000 fd89 	bl	800825c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 020c 	bic.w	r2, r2, #12
 8007758:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	61da      	str	r2, [r3, #28]
 800776c:	e021      	b.n	80077b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b0c      	cmp	r3, #12
 8007772:	d11c      	bne.n	80077ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6819      	ldr	r1, [r3, #0]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f000 fda6 	bl	80082d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007796:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69d9      	ldr	r1, [r3, #28]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	021a      	lsls	r2, r3, #8
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	61da      	str	r2, [r3, #28]
 80077ac:	e001      	b.n	80077b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077de:	2302      	movs	r3, #2
 80077e0:	e0ae      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b0c      	cmp	r3, #12
 80077ee:	f200 809f 	bhi.w	8007930 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	0800782d 	.word	0x0800782d
 80077fc:	08007931 	.word	0x08007931
 8007800:	08007931 	.word	0x08007931
 8007804:	08007931 	.word	0x08007931
 8007808:	0800786d 	.word	0x0800786d
 800780c:	08007931 	.word	0x08007931
 8007810:	08007931 	.word	0x08007931
 8007814:	08007931 	.word	0x08007931
 8007818:	080078af 	.word	0x080078af
 800781c:	08007931 	.word	0x08007931
 8007820:	08007931 	.word	0x08007931
 8007824:	08007931 	.word	0x08007931
 8007828:	080078ef 	.word	0x080078ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fa52 	bl	8007cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0208 	orr.w	r2, r2, #8
 8007846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0204 	bic.w	r2, r2, #4
 8007856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6999      	ldr	r1, [r3, #24]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	619a      	str	r2, [r3, #24]
      break;
 800786a:	e064      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 faa2 	bl	8007dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6999      	ldr	r1, [r3, #24]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	021a      	lsls	r2, r3, #8
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	619a      	str	r2, [r3, #24]
      break;
 80078ac:	e043      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 faf7 	bl	8007ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0208 	orr.w	r2, r2, #8
 80078c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0204 	bic.w	r2, r2, #4
 80078d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69d9      	ldr	r1, [r3, #28]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	61da      	str	r2, [r3, #28]
      break;
 80078ec:	e023      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fb4b 	bl	8007f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69d9      	ldr	r1, [r3, #28]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	021a      	lsls	r2, r3, #8
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	61da      	str	r2, [r3, #28]
      break;
 800792e:	e002      	b.n	8007936 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
      break;
 8007934:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_TIM_ConfigClockSource+0x1c>
 8007960:	2302      	movs	r3, #2
 8007962:	e0b4      	b.n	8007ace <HAL_TIM_ConfigClockSource+0x186>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800798a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799c:	d03e      	beq.n	8007a1c <HAL_TIM_ConfigClockSource+0xd4>
 800799e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a2:	f200 8087 	bhi.w	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079aa:	f000 8086 	beq.w	8007aba <HAL_TIM_ConfigClockSource+0x172>
 80079ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b2:	d87f      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079b4:	2b70      	cmp	r3, #112	; 0x70
 80079b6:	d01a      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0xa6>
 80079b8:	2b70      	cmp	r3, #112	; 0x70
 80079ba:	d87b      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079bc:	2b60      	cmp	r3, #96	; 0x60
 80079be:	d050      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x11a>
 80079c0:	2b60      	cmp	r3, #96	; 0x60
 80079c2:	d877      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079c4:	2b50      	cmp	r3, #80	; 0x50
 80079c6:	d03c      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0xfa>
 80079c8:	2b50      	cmp	r3, #80	; 0x50
 80079ca:	d873      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d058      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0x13a>
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	d86f      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d064      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80079d8:	2b30      	cmp	r3, #48	; 0x30
 80079da:	d86b      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d060      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d867      	bhi.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d05c      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d05a      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80079ec:	e062      	b.n	8007ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6899      	ldr	r1, [r3, #8]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f000 fcc1 	bl	8008384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	609a      	str	r2, [r3, #8]
      break;
 8007a1a:	e04f      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	6899      	ldr	r1, [r3, #8]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f000 fcaa 	bl	8008384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a3e:	609a      	str	r2, [r3, #8]
      break;
 8007a40:	e03c      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f000 fb68 	bl	8008124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2150      	movs	r1, #80	; 0x50
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fc77 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007a60:	e02c      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f000 fbc4 	bl	80081fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2160      	movs	r1, #96	; 0x60
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fc67 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007a80:	e01c      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 fb48 	bl	8008124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2140      	movs	r1, #64	; 0x40
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fc57 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007aa0:	e00c      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f000 fc4e 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007ab2:	e003      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab8:	e000      	b.n	8007abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b0c      	cmp	r3, #12
 8007aea:	d831      	bhi.n	8007b50 <HAL_TIM_ReadCapturedValue+0x78>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b29 	.word	0x08007b29
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007b51 	.word	0x08007b51
 8007b04:	08007b33 	.word	0x08007b33
 8007b08:	08007b51 	.word	0x08007b51
 8007b0c:	08007b51 	.word	0x08007b51
 8007b10:	08007b51 	.word	0x08007b51
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007b51 	.word	0x08007b51
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b47 	.word	0x08007b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	60fb      	str	r3, [r7, #12]

      break;
 8007b30:	e00f      	b.n	8007b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	60fb      	str	r3, [r7, #12]

      break;
 8007b3a:	e00a      	b.n	8007b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	60fb      	str	r3, [r7, #12]

      break;
 8007b44:	e005      	b.n	8007b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	60fb      	str	r3, [r7, #12]

      break;
 8007b4e:	e000      	b.n	8007b52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007b50:	bf00      	nop
  }

  return tmpreg;
 8007b52:	68fb      	ldr	r3, [r7, #12]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a40      	ldr	r2, [pc, #256]	; (8007cb0 <TIM_Base_SetConfig+0x114>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d013      	beq.n	8007bdc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bba:	d00f      	beq.n	8007bdc <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3d      	ldr	r2, [pc, #244]	; (8007cb4 <TIM_Base_SetConfig+0x118>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00b      	beq.n	8007bdc <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3c      	ldr	r2, [pc, #240]	; (8007cb8 <TIM_Base_SetConfig+0x11c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d007      	beq.n	8007bdc <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a3b      	ldr	r2, [pc, #236]	; (8007cbc <TIM_Base_SetConfig+0x120>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a3a      	ldr	r2, [pc, #232]	; (8007cc0 <TIM_Base_SetConfig+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d108      	bne.n	8007bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2f      	ldr	r2, [pc, #188]	; (8007cb0 <TIM_Base_SetConfig+0x114>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d02b      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfc:	d027      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2c      	ldr	r2, [pc, #176]	; (8007cb4 <TIM_Base_SetConfig+0x118>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d023      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2b      	ldr	r2, [pc, #172]	; (8007cb8 <TIM_Base_SetConfig+0x11c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01f      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2a      	ldr	r2, [pc, #168]	; (8007cbc <TIM_Base_SetConfig+0x120>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d01b      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a29      	ldr	r2, [pc, #164]	; (8007cc0 <TIM_Base_SetConfig+0x124>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d017      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a28      	ldr	r2, [pc, #160]	; (8007cc4 <TIM_Base_SetConfig+0x128>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a27      	ldr	r2, [pc, #156]	; (8007cc8 <TIM_Base_SetConfig+0x12c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a26      	ldr	r2, [pc, #152]	; (8007ccc <TIM_Base_SetConfig+0x130>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a25      	ldr	r2, [pc, #148]	; (8007cd0 <TIM_Base_SetConfig+0x134>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a24      	ldr	r2, [pc, #144]	; (8007cd4 <TIM_Base_SetConfig+0x138>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a23      	ldr	r2, [pc, #140]	; (8007cd8 <TIM_Base_SetConfig+0x13c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d108      	bne.n	8007c60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <TIM_Base_SetConfig+0x114>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_Base_SetConfig+0xf8>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a0c      	ldr	r2, [pc, #48]	; (8007cc0 <TIM_Base_SetConfig+0x124>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d103      	bne.n	8007c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	615a      	str	r2, [r3, #20]
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	40000c00 	.word	0x40000c00
 8007cc0:	40010400 	.word	0x40010400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40014400 	.word	0x40014400
 8007ccc:	40014800 	.word	0x40014800
 8007cd0:	40001800 	.word	0x40001800
 8007cd4:	40001c00 	.word	0x40001c00
 8007cd8:	40002000 	.word	0x40002000

08007cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	f023 0201 	bic.w	r2, r3, #1
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f023 0302 	bic.w	r3, r3, #2
 8007d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a20      	ldr	r2, [pc, #128]	; (8007db4 <TIM_OC1_SetConfig+0xd8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC1_SetConfig+0x64>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1f      	ldr	r2, [pc, #124]	; (8007db8 <TIM_OC1_SetConfig+0xdc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10c      	bne.n	8007d5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0308 	bic.w	r3, r3, #8
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f023 0304 	bic.w	r3, r3, #4
 8007d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <TIM_OC1_SetConfig+0xd8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_OC1_SetConfig+0x8e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <TIM_OC1_SetConfig+0xdc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d111      	bne.n	8007d8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	621a      	str	r2, [r3, #32]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	40010000 	.word	0x40010000
 8007db8:	40010400 	.word	0x40010400

08007dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f023 0210 	bic.w	r2, r3, #16
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f023 0320 	bic.w	r3, r3, #32
 8007e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a22      	ldr	r2, [pc, #136]	; (8007ea0 <TIM_OC2_SetConfig+0xe4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_OC2_SetConfig+0x68>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a21      	ldr	r2, [pc, #132]	; (8007ea4 <TIM_OC2_SetConfig+0xe8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d10d      	bne.n	8007e40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a17      	ldr	r2, [pc, #92]	; (8007ea0 <TIM_OC2_SetConfig+0xe4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_OC2_SetConfig+0x94>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a16      	ldr	r2, [pc, #88]	; (8007ea4 <TIM_OC2_SetConfig+0xe8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d113      	bne.n	8007e78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400

08007ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a21      	ldr	r2, [pc, #132]	; (8007f88 <TIM_OC3_SetConfig+0xe0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d003      	beq.n	8007f0e <TIM_OC3_SetConfig+0x66>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <TIM_OC3_SetConfig+0xe4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d10d      	bne.n	8007f2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <TIM_OC3_SetConfig+0xe0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d003      	beq.n	8007f3a <TIM_OC3_SetConfig+0x92>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a15      	ldr	r2, [pc, #84]	; (8007f8c <TIM_OC3_SetConfig+0xe4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d113      	bne.n	8007f62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	621a      	str	r2, [r3, #32]
}
 8007f7c:	bf00      	nop
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	40010000 	.word	0x40010000
 8007f8c:	40010400 	.word	0x40010400

08007f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	031b      	lsls	r3, r3, #12
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a12      	ldr	r2, [pc, #72]	; (8008034 <TIM_OC4_SetConfig+0xa4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_OC4_SetConfig+0x68>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a11      	ldr	r2, [pc, #68]	; (8008038 <TIM_OC4_SetConfig+0xa8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d109      	bne.n	800800c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	019b      	lsls	r3, r3, #6
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40010000 	.word	0x40010000
 8008038:	40010400 	.word	0x40010400

0800803c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4a28      	ldr	r2, [pc, #160]	; (8008108 <TIM_TI1_SetConfig+0xcc>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01b      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008070:	d017      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4a25      	ldr	r2, [pc, #148]	; (800810c <TIM_TI1_SetConfig+0xd0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a24      	ldr	r2, [pc, #144]	; (8008110 <TIM_TI1_SetConfig+0xd4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00f      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a23      	ldr	r2, [pc, #140]	; (8008114 <TIM_TI1_SetConfig+0xd8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4a22      	ldr	r2, [pc, #136]	; (8008118 <TIM_TI1_SetConfig+0xdc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a21      	ldr	r2, [pc, #132]	; (800811c <TIM_TI1_SetConfig+0xe0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_TI1_SetConfig+0x66>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a20      	ldr	r2, [pc, #128]	; (8008120 <TIM_TI1_SetConfig+0xe4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d101      	bne.n	80080a6 <TIM_TI1_SetConfig+0x6a>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <TIM_TI1_SetConfig+0x6c>
 80080a6:	2300      	movs	r3, #0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0303 	bic.w	r3, r3, #3
 80080b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	e003      	b.n	80080c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f023 030a 	bic.w	r3, r3, #10
 80080e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f003 030a 	and.w	r3, r3, #10
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	bf00      	nop
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	40010000 	.word	0x40010000
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800
 8008114:	40000c00 	.word	0x40000c00
 8008118:	40010400 	.word	0x40010400
 800811c:	40014000 	.word	0x40014000
 8008120:	40001800 	.word	0x40001800

08008124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	f023 0201 	bic.w	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800814e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 030a 	bic.w	r3, r3, #10
 8008160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	621a      	str	r2, [r3, #32]
}
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008182:	b480      	push	{r7}
 8008184:	b087      	sub	sp, #28
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	f023 0210 	bic.w	r2, r3, #16
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	031b      	lsls	r3, r3, #12
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	621a      	str	r2, [r3, #32]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	f023 0210 	bic.w	r2, r3, #16
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	031b      	lsls	r3, r3, #12
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	621a      	str	r2, [r3, #32]
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80082ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	621a      	str	r2, [r3, #32]
}
 80082c8:	bf00      	nop
 80082ca:	371c      	adds	r7, #28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008300:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008312:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	031b      	lsls	r3, r3, #12
 8008318:	b29b      	uxth	r3, r3
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008326:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	031b      	lsls	r3, r3, #12
 800832c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	f043 0307 	orr.w	r3, r3, #7
 8008370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	609a      	str	r2, [r3, #8]
}
 8008378:	bf00      	nop
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800839e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	021a      	lsls	r2, r3, #8
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	609a      	str	r2, [r3, #8]
}
 80083b8:	bf00      	nop
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	2201      	movs	r2, #1
 80083d8:	fa02 f303 	lsl.w	r3, r2, r3
 80083dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a1a      	ldr	r2, [r3, #32]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	43db      	mvns	r3, r3
 80083e6:	401a      	ands	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1a      	ldr	r2, [r3, #32]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	fa01 f303 	lsl.w	r3, r1, r3
 80083fc:	431a      	orrs	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
	...

08008410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008424:	2302      	movs	r3, #2
 8008426:	e05a      	b.n	80084de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a21      	ldr	r2, [pc, #132]	; (80084ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d022      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008474:	d01d      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1d      	ldr	r2, [pc, #116]	; (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d018      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1a      	ldr	r2, [pc, #104]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00e      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a18      	ldr	r2, [pc, #96]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d009      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a17      	ldr	r2, [pc, #92]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d004      	beq.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d10c      	bne.n	80084cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40010400 	.word	0x40010400
 8008500:	40014000 	.word	0x40014000
 8008504:	40001800 	.word	0x40001800

08008508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e03f      	b.n	80085c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7f9 fe6a 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2224      	movs	r2, #36	; 0x24
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fddf 	bl	8009138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695a      	ldr	r2, [r3, #20]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b08a      	sub	sp, #40	; 0x28
 80085ce:	af02      	add	r7, sp, #8
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	d17c      	bne.n	80086e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <HAL_UART_Transmit+0x2c>
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e075      	b.n	80086e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_UART_Transmit+0x3e>
 8008604:	2302      	movs	r3, #2
 8008606:	e06e      	b.n	80086e6 <HAL_UART_Transmit+0x11c>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2221      	movs	r2, #33	; 0x21
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800861e:	f7fa fcb7 	bl	8002f90 <HAL_GetTick>
 8008622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	88fa      	ldrh	r2, [r7, #6]
 800862e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008638:	d108      	bne.n	800864c <HAL_UART_Transmit+0x82>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	e003      	b.n	8008654 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008650:	2300      	movs	r3, #0
 8008652:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800865c:	e02a      	b.n	80086b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fb1f 	bl	8008cac <UART_WaitOnFlagUntilTimeout>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e036      	b.n	80086e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10b      	bne.n	8008696 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800868c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	3302      	adds	r3, #2
 8008692:	61bb      	str	r3, [r7, #24]
 8008694:	e007      	b.n	80086a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	781a      	ldrb	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	3301      	adds	r3, #1
 80086a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1cf      	bne.n	800865e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2200      	movs	r2, #0
 80086c6:	2140      	movs	r1, #64	; 0x40
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 faef 	bl	8008cac <UART_WaitOnFlagUntilTimeout>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e006      	b.n	80086e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e000      	b.n	80086e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80086e4:	2302      	movs	r3, #2
  }
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	4613      	mov	r3, r2
 80086fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b20      	cmp	r3, #32
 8008706:	d11d      	bne.n	8008744 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <HAL_UART_Receive_IT+0x26>
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e016      	b.n	8008746 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UART_Receive_IT+0x38>
 8008722:	2302      	movs	r3, #2
 8008724:	e00f      	b.n	8008746 <HAL_UART_Receive_IT+0x58>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008734:	88fb      	ldrh	r3, [r7, #6]
 8008736:	461a      	mov	r2, r3
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 fb24 	bl	8008d88 <UART_Start_Receive_IT>
 8008740:	4603      	mov	r3, r0
 8008742:	e000      	b.n	8008746 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008744:	2302      	movs	r3, #2
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b0ba      	sub	sp, #232	; 0xe8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008776:	2300      	movs	r3, #0
 8008778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800877c:	2300      	movs	r3, #0
 800877e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800878e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10f      	bne.n	80087b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <HAL_UART_IRQHandler+0x66>
 80087a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fc07 	bl	8008fc2 <UART_Receive_IT>
      return;
 80087b4:	e256      	b.n	8008c64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80de 	beq.w	800897c <HAL_UART_IRQHandler+0x22c>
 80087c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 80d1 	beq.w	800897c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00b      	beq.n	80087fe <HAL_UART_IRQHandler+0xae>
 80087e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f6:	f043 0201 	orr.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0304 	and.w	r3, r3, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <HAL_UART_IRQHandler+0xd2>
 800880a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	f043 0202 	orr.w	r2, r3, #2
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00b      	beq.n	8008846 <HAL_UART_IRQHandler+0xf6>
 800882e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	f043 0204 	orr.w	r2, r3, #4
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	2b00      	cmp	r3, #0
 8008850:	d011      	beq.n	8008876 <HAL_UART_IRQHandler+0x126>
 8008852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d105      	bne.n	800886a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800885e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f043 0208 	orr.w	r2, r3, #8
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 81ed 	beq.w	8008c5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <HAL_UART_IRQHandler+0x14e>
 800888c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fb92 	bl	8008fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b40      	cmp	r3, #64	; 0x40
 80088aa:	bf0c      	ite	eq
 80088ac:	2301      	moveq	r3, #1
 80088ae:	2300      	movne	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <HAL_UART_IRQHandler+0x17a>
 80088c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d04f      	beq.n	800896a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa9a 	bl	8008e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d141      	bne.n	8008962 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3314      	adds	r3, #20
 80088e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3314      	adds	r3, #20
 8008906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800890a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800890e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1d9      	bne.n	80088de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	2b00      	cmp	r3, #0
 8008930:	d013      	beq.n	800895a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	4a7d      	ldr	r2, [pc, #500]	; (8008b2c <HAL_UART_IRQHandler+0x3dc>)
 8008938:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	4618      	mov	r0, r3
 8008940:	f7fb f934 	bl	8003bac <HAL_DMA_Abort_IT>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008958:	e00e      	b.n	8008978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f990 	bl	8008c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	e00a      	b.n	8008978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f98c 	bl	8008c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	e006      	b.n	8008978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f988 	bl	8008c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008976:	e170      	b.n	8008c5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	bf00      	nop
    return;
 800897a:	e16e      	b.n	8008c5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	2b01      	cmp	r3, #1
 8008982:	f040 814a 	bne.w	8008c1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800898a:	f003 0310 	and.w	r3, r3, #16
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 8143 	beq.w	8008c1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 813c 	beq.w	8008c1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089a2:	2300      	movs	r3, #0
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60bb      	str	r3, [r7, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	60bb      	str	r3, [r7, #8]
 80089b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c2:	2b40      	cmp	r3, #64	; 0x40
 80089c4:	f040 80b4 	bne.w	8008b30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8140 	beq.w	8008c5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089e6:	429a      	cmp	r2, r3
 80089e8:	f080 8139 	bcs.w	8008c5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fe:	f000 8088 	beq.w	8008b12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	330c      	adds	r3, #12
 8008a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	330c      	adds	r3, #12
 8008a2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1d9      	bne.n	8008a02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3314      	adds	r3, #20
 8008a54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a60:	f023 0301 	bic.w	r3, r3, #1
 8008a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3314      	adds	r3, #20
 8008a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e1      	bne.n	8008a4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3314      	adds	r3, #20
 8008a90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3314      	adds	r3, #20
 8008aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e3      	bne.n	8008a8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae2:	f023 0310 	bic.w	r3, r3, #16
 8008ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	330c      	adds	r3, #12
 8008af0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008af4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008af6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008afc:	e841 2300 	strex	r3, r2, [r1]
 8008b00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e3      	bne.n	8008ad0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fa ffdd 	bl	8003acc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8b6 	bl	8008c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b28:	e099      	b.n	8008c5e <HAL_UART_IRQHandler+0x50e>
 8008b2a:	bf00      	nop
 8008b2c:	08008ecb 	.word	0x08008ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 808b 	beq.w	8008c62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8086 	beq.w	8008c62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	330c      	adds	r3, #12
 8008b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	330c      	adds	r3, #12
 8008b76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b7a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e3      	bne.n	8008b56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3314      	adds	r3, #20
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3314      	adds	r3, #20
 8008bae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e3      	bne.n	8008b8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0310 	bic.w	r3, r3, #16
 8008bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	330c      	adds	r3, #12
 8008bf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008bf8:	61fa      	str	r2, [r7, #28]
 8008bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	69b9      	ldr	r1, [r7, #24]
 8008bfe:	69fa      	ldr	r2, [r7, #28]
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	617b      	str	r3, [r7, #20]
   return(result);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e3      	bne.n	8008bd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f83e 	bl	8008c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c18:	e023      	b.n	8008c62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <HAL_UART_IRQHandler+0x4ea>
 8008c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f95d 	bl	8008ef2 <UART_Transmit_IT>
    return;
 8008c38:	e014      	b.n	8008c64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <HAL_UART_IRQHandler+0x514>
 8008c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d008      	beq.n	8008c64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f99d 	bl	8008f92 <UART_EndTransmit_IT>
    return;
 8008c58:	e004      	b.n	8008c64 <HAL_UART_IRQHandler+0x514>
    return;
 8008c5a:	bf00      	nop
 8008c5c:	e002      	b.n	8008c64 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5e:	bf00      	nop
 8008c60:	e000      	b.n	8008c64 <HAL_UART_IRQHandler+0x514>
      return;
 8008c62:	bf00      	nop
  }
}
 8008c64:	37e8      	adds	r7, #232	; 0xe8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop

08008c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b090      	sub	sp, #64	; 0x40
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbc:	e050      	b.n	8008d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc4:	d04c      	beq.n	8008d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ccc:	f7fa f960 	bl	8002f90 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d241      	bcs.n	8008d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	330c      	adds	r3, #12
 8008cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e5      	bne.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3314      	adds	r3, #20
 8008d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f023 0301 	bic.w	r3, r3, #1
 8008d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3314      	adds	r3, #20
 8008d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d30:	623a      	str	r2, [r7, #32]
 8008d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	69f9      	ldr	r1, [r7, #28]
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e5      	bne.n	8008d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e00f      	b.n	8008d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	bf0c      	ite	eq
 8008d70:	2301      	moveq	r3, #1
 8008d72:	2300      	movne	r3, #0
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	79fb      	ldrb	r3, [r7, #7]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d09f      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3740      	adds	r7, #64	; 0x40
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	88fa      	ldrh	r2, [r7, #6]
 8008da6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2222      	movs	r2, #34	; 0x22
 8008db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695a      	ldr	r2, [r3, #20]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0220 	orr.w	r2, r2, #32
 8008df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b095      	sub	sp, #84	; 0x54
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	330c      	adds	r3, #12
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e2c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e5      	bne.n	8008e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3314      	adds	r3, #20
 8008e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	f023 0301 	bic.w	r3, r3, #1
 8008e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e5      	bne.n	8008e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d119      	bne.n	8008eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f023 0310 	bic.w	r3, r3, #16
 8008e92:	647b      	str	r3, [r7, #68]	; 0x44
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9c:	61ba      	str	r2, [r7, #24]
 8008e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	6979      	ldr	r1, [r7, #20]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e5      	bne.n	8008e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ebe:	bf00      	nop
 8008ec0:	3754      	adds	r7, #84	; 0x54
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fecb 	bl	8008c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b21      	cmp	r3, #33	; 0x21
 8008f04:	d13e      	bne.n	8008f84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0e:	d114      	bne.n	8008f3a <UART_Transmit_IT+0x48>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d110      	bne.n	8008f3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	1c9a      	adds	r2, r3, #2
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	621a      	str	r2, [r3, #32]
 8008f38:	e008      	b.n	8008f4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	1c59      	adds	r1, r3, #1
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6211      	str	r1, [r2, #32]
 8008f44:	781a      	ldrb	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10f      	bne.n	8008f80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e000      	b.n	8008f86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f84:	2302      	movs	r3, #2
  }
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff fe5a 	bl	8008c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b08c      	sub	sp, #48	; 0x30
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b22      	cmp	r3, #34	; 0x22
 8008fd4:	f040 80ab 	bne.w	800912e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe0:	d117      	bne.n	8009012 <UART_Receive_IT+0x50>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d113      	bne.n	8009012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009000:	b29a      	uxth	r2, r3
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	1c9a      	adds	r2, r3, #2
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	629a      	str	r2, [r3, #40]	; 0x28
 8009010:	e026      	b.n	8009060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009018:	2300      	movs	r3, #0
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009024:	d007      	beq.n	8009036 <UART_Receive_IT+0x74>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <UART_Receive_IT+0x82>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	b2da      	uxtb	r2, r3
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	e008      	b.n	8009056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009050:	b2da      	uxtb	r2, r3
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009064:	b29b      	uxth	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	b29b      	uxth	r3, r3
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	4619      	mov	r1, r3
 800906e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009070:	2b00      	cmp	r3, #0
 8009072:	d15a      	bne.n	800912a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0220 	bic.w	r2, r2, #32
 8009082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695a      	ldr	r2, [r3, #20]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0201 	bic.w	r2, r2, #1
 80090a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d135      	bne.n	8009120 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f023 0310 	bic.w	r3, r3, #16
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	330c      	adds	r3, #12
 80090d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090da:	623a      	str	r2, [r7, #32]
 80090dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	69f9      	ldr	r1, [r7, #28]
 80090e0:	6a3a      	ldr	r2, [r7, #32]
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e5      	bne.n	80090ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d10a      	bne.n	8009112 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fdbb 	bl	8008c94 <HAL_UARTEx_RxEventCallback>
 800911e:	e002      	b.n	8009126 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7f9 fb69 	bl	80027f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e002      	b.n	8009130 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	e000      	b.n	8009130 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800912e:	2302      	movs	r3, #2
  }
}
 8009130:	4618      	mov	r0, r3
 8009132:	3730      	adds	r7, #48	; 0x30
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800913c:	b0c0      	sub	sp, #256	; 0x100
 800913e:	af00      	add	r7, sp, #0
 8009140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009154:	68d9      	ldr	r1, [r3, #12]
 8009156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	ea40 0301 	orr.w	r3, r0, r1
 8009160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	431a      	orrs	r2, r3
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	431a      	orrs	r2, r3
 8009178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	4313      	orrs	r3, r2
 8009180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009190:	f021 010c 	bic.w	r1, r1, #12
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800919e:	430b      	orrs	r3, r1
 80091a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b2:	6999      	ldr	r1, [r3, #24]
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	ea40 0301 	orr.w	r3, r0, r1
 80091be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	4b8f      	ldr	r3, [pc, #572]	; (8009404 <UART_SetConfig+0x2cc>)
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d005      	beq.n	80091d8 <UART_SetConfig+0xa0>
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b8d      	ldr	r3, [pc, #564]	; (8009408 <UART_SetConfig+0x2d0>)
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d104      	bne.n	80091e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091d8:	f7fd f8b0 	bl	800633c <HAL_RCC_GetPCLK2Freq>
 80091dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091e0:	e003      	b.n	80091ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091e2:	f7fd f897 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 80091e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f4:	f040 810c 	bne.w	8009410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800920a:	4622      	mov	r2, r4
 800920c:	462b      	mov	r3, r5
 800920e:	1891      	adds	r1, r2, r2
 8009210:	65b9      	str	r1, [r7, #88]	; 0x58
 8009212:	415b      	adcs	r3, r3
 8009214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800921a:	4621      	mov	r1, r4
 800921c:	eb12 0801 	adds.w	r8, r2, r1
 8009220:	4629      	mov	r1, r5
 8009222:	eb43 0901 	adc.w	r9, r3, r1
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800923a:	4690      	mov	r8, r2
 800923c:	4699      	mov	r9, r3
 800923e:	4623      	mov	r3, r4
 8009240:	eb18 0303 	adds.w	r3, r8, r3
 8009244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009248:	462b      	mov	r3, r5
 800924a:	eb49 0303 	adc.w	r3, r9, r3
 800924e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800925e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009266:	460b      	mov	r3, r1
 8009268:	18db      	adds	r3, r3, r3
 800926a:	653b      	str	r3, [r7, #80]	; 0x50
 800926c:	4613      	mov	r3, r2
 800926e:	eb42 0303 	adc.w	r3, r2, r3
 8009272:	657b      	str	r3, [r7, #84]	; 0x54
 8009274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800927c:	f7f7 f810 	bl	80002a0 <__aeabi_uldivmod>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4b61      	ldr	r3, [pc, #388]	; (800940c <UART_SetConfig+0x2d4>)
 8009286:	fba3 2302 	umull	r2, r3, r3, r2
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	011c      	lsls	r4, r3, #4
 800928e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009292:	2200      	movs	r2, #0
 8009294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800929c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	1891      	adds	r1, r2, r2
 80092a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80092a8:	415b      	adcs	r3, r3
 80092aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092b0:	4641      	mov	r1, r8
 80092b2:	eb12 0a01 	adds.w	sl, r2, r1
 80092b6:	4649      	mov	r1, r9
 80092b8:	eb43 0b01 	adc.w	fp, r3, r1
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092d0:	4692      	mov	sl, r2
 80092d2:	469b      	mov	fp, r3
 80092d4:	4643      	mov	r3, r8
 80092d6:	eb1a 0303 	adds.w	r3, sl, r3
 80092da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092de:	464b      	mov	r3, r9
 80092e0:	eb4b 0303 	adc.w	r3, fp, r3
 80092e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092fc:	460b      	mov	r3, r1
 80092fe:	18db      	adds	r3, r3, r3
 8009300:	643b      	str	r3, [r7, #64]	; 0x40
 8009302:	4613      	mov	r3, r2
 8009304:	eb42 0303 	adc.w	r3, r2, r3
 8009308:	647b      	str	r3, [r7, #68]	; 0x44
 800930a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800930e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009312:	f7f6 ffc5 	bl	80002a0 <__aeabi_uldivmod>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4611      	mov	r1, r2
 800931c:	4b3b      	ldr	r3, [pc, #236]	; (800940c <UART_SetConfig+0x2d4>)
 800931e:	fba3 2301 	umull	r2, r3, r3, r1
 8009322:	095b      	lsrs	r3, r3, #5
 8009324:	2264      	movs	r2, #100	; 0x64
 8009326:	fb02 f303 	mul.w	r3, r2, r3
 800932a:	1acb      	subs	r3, r1, r3
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009332:	4b36      	ldr	r3, [pc, #216]	; (800940c <UART_SetConfig+0x2d4>)
 8009334:	fba3 2302 	umull	r2, r3, r3, r2
 8009338:	095b      	lsrs	r3, r3, #5
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009340:	441c      	add	r4, r3
 8009342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009346:	2200      	movs	r2, #0
 8009348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800934c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009354:	4642      	mov	r2, r8
 8009356:	464b      	mov	r3, r9
 8009358:	1891      	adds	r1, r2, r2
 800935a:	63b9      	str	r1, [r7, #56]	; 0x38
 800935c:	415b      	adcs	r3, r3
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009364:	4641      	mov	r1, r8
 8009366:	1851      	adds	r1, r2, r1
 8009368:	6339      	str	r1, [r7, #48]	; 0x30
 800936a:	4649      	mov	r1, r9
 800936c:	414b      	adcs	r3, r1
 800936e:	637b      	str	r3, [r7, #52]	; 0x34
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800937c:	4659      	mov	r1, fp
 800937e:	00cb      	lsls	r3, r1, #3
 8009380:	4651      	mov	r1, sl
 8009382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009386:	4651      	mov	r1, sl
 8009388:	00ca      	lsls	r2, r1, #3
 800938a:	4610      	mov	r0, r2
 800938c:	4619      	mov	r1, r3
 800938e:	4603      	mov	r3, r0
 8009390:	4642      	mov	r2, r8
 8009392:	189b      	adds	r3, r3, r2
 8009394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009398:	464b      	mov	r3, r9
 800939a:	460a      	mov	r2, r1
 800939c:	eb42 0303 	adc.w	r3, r2, r3
 80093a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093b8:	460b      	mov	r3, r1
 80093ba:	18db      	adds	r3, r3, r3
 80093bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093be:	4613      	mov	r3, r2
 80093c0:	eb42 0303 	adc.w	r3, r2, r3
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093ce:	f7f6 ff67 	bl	80002a0 <__aeabi_uldivmod>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4b0d      	ldr	r3, [pc, #52]	; (800940c <UART_SetConfig+0x2d4>)
 80093d8:	fba3 1302 	umull	r1, r3, r3, r2
 80093dc:	095b      	lsrs	r3, r3, #5
 80093de:	2164      	movs	r1, #100	; 0x64
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	3332      	adds	r3, #50	; 0x32
 80093ea:	4a08      	ldr	r2, [pc, #32]	; (800940c <UART_SetConfig+0x2d4>)
 80093ec:	fba2 2303 	umull	r2, r3, r2, r3
 80093f0:	095b      	lsrs	r3, r3, #5
 80093f2:	f003 0207 	and.w	r2, r3, #7
 80093f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4422      	add	r2, r4
 80093fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009400:	e105      	b.n	800960e <UART_SetConfig+0x4d6>
 8009402:	bf00      	nop
 8009404:	40011000 	.word	0x40011000
 8009408:	40011400 	.word	0x40011400
 800940c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009414:	2200      	movs	r2, #0
 8009416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800941a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800941e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009422:	4642      	mov	r2, r8
 8009424:	464b      	mov	r3, r9
 8009426:	1891      	adds	r1, r2, r2
 8009428:	6239      	str	r1, [r7, #32]
 800942a:	415b      	adcs	r3, r3
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
 800942e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009432:	4641      	mov	r1, r8
 8009434:	1854      	adds	r4, r2, r1
 8009436:	4649      	mov	r1, r9
 8009438:	eb43 0501 	adc.w	r5, r3, r1
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	00eb      	lsls	r3, r5, #3
 8009446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800944a:	00e2      	lsls	r2, r4, #3
 800944c:	4614      	mov	r4, r2
 800944e:	461d      	mov	r5, r3
 8009450:	4643      	mov	r3, r8
 8009452:	18e3      	adds	r3, r4, r3
 8009454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009458:	464b      	mov	r3, r9
 800945a:	eb45 0303 	adc.w	r3, r5, r3
 800945e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800946e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800947e:	4629      	mov	r1, r5
 8009480:	008b      	lsls	r3, r1, #2
 8009482:	4621      	mov	r1, r4
 8009484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009488:	4621      	mov	r1, r4
 800948a:	008a      	lsls	r2, r1, #2
 800948c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009490:	f7f6 ff06 	bl	80002a0 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4b60      	ldr	r3, [pc, #384]	; (800961c <UART_SetConfig+0x4e4>)
 800949a:	fba3 2302 	umull	r2, r3, r3, r2
 800949e:	095b      	lsrs	r3, r3, #5
 80094a0:	011c      	lsls	r4, r3, #4
 80094a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	1891      	adds	r1, r2, r2
 80094ba:	61b9      	str	r1, [r7, #24]
 80094bc:	415b      	adcs	r3, r3
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094c4:	4641      	mov	r1, r8
 80094c6:	1851      	adds	r1, r2, r1
 80094c8:	6139      	str	r1, [r7, #16]
 80094ca:	4649      	mov	r1, r9
 80094cc:	414b      	adcs	r3, r1
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	f04f 0300 	mov.w	r3, #0
 80094d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094dc:	4659      	mov	r1, fp
 80094de:	00cb      	lsls	r3, r1, #3
 80094e0:	4651      	mov	r1, sl
 80094e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094e6:	4651      	mov	r1, sl
 80094e8:	00ca      	lsls	r2, r1, #3
 80094ea:	4610      	mov	r0, r2
 80094ec:	4619      	mov	r1, r3
 80094ee:	4603      	mov	r3, r0
 80094f0:	4642      	mov	r2, r8
 80094f2:	189b      	adds	r3, r3, r2
 80094f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094f8:	464b      	mov	r3, r9
 80094fa:	460a      	mov	r2, r1
 80094fc:	eb42 0303 	adc.w	r3, r2, r3
 8009500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	67bb      	str	r3, [r7, #120]	; 0x78
 800950e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800951c:	4649      	mov	r1, r9
 800951e:	008b      	lsls	r3, r1, #2
 8009520:	4641      	mov	r1, r8
 8009522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009526:	4641      	mov	r1, r8
 8009528:	008a      	lsls	r2, r1, #2
 800952a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800952e:	f7f6 feb7 	bl	80002a0 <__aeabi_uldivmod>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4b39      	ldr	r3, [pc, #228]	; (800961c <UART_SetConfig+0x4e4>)
 8009538:	fba3 1302 	umull	r1, r3, r3, r2
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	2164      	movs	r1, #100	; 0x64
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	3332      	adds	r3, #50	; 0x32
 800954a:	4a34      	ldr	r2, [pc, #208]	; (800961c <UART_SetConfig+0x4e4>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009556:	441c      	add	r4, r3
 8009558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800955c:	2200      	movs	r2, #0
 800955e:	673b      	str	r3, [r7, #112]	; 0x70
 8009560:	677a      	str	r2, [r7, #116]	; 0x74
 8009562:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009566:	4642      	mov	r2, r8
 8009568:	464b      	mov	r3, r9
 800956a:	1891      	adds	r1, r2, r2
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	415b      	adcs	r3, r3
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009576:	4641      	mov	r1, r8
 8009578:	1851      	adds	r1, r2, r1
 800957a:	6039      	str	r1, [r7, #0]
 800957c:	4649      	mov	r1, r9
 800957e:	414b      	adcs	r3, r1
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800958e:	4659      	mov	r1, fp
 8009590:	00cb      	lsls	r3, r1, #3
 8009592:	4651      	mov	r1, sl
 8009594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009598:	4651      	mov	r1, sl
 800959a:	00ca      	lsls	r2, r1, #3
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	4603      	mov	r3, r0
 80095a2:	4642      	mov	r2, r8
 80095a4:	189b      	adds	r3, r3, r2
 80095a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095a8:	464b      	mov	r3, r9
 80095aa:	460a      	mov	r2, r1
 80095ac:	eb42 0303 	adc.w	r3, r2, r3
 80095b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	663b      	str	r3, [r7, #96]	; 0x60
 80095bc:	667a      	str	r2, [r7, #100]	; 0x64
 80095be:	f04f 0200 	mov.w	r2, #0
 80095c2:	f04f 0300 	mov.w	r3, #0
 80095c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095ca:	4649      	mov	r1, r9
 80095cc:	008b      	lsls	r3, r1, #2
 80095ce:	4641      	mov	r1, r8
 80095d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095d4:	4641      	mov	r1, r8
 80095d6:	008a      	lsls	r2, r1, #2
 80095d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095dc:	f7f6 fe60 	bl	80002a0 <__aeabi_uldivmod>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4b0d      	ldr	r3, [pc, #52]	; (800961c <UART_SetConfig+0x4e4>)
 80095e6:	fba3 1302 	umull	r1, r3, r3, r2
 80095ea:	095b      	lsrs	r3, r3, #5
 80095ec:	2164      	movs	r1, #100	; 0x64
 80095ee:	fb01 f303 	mul.w	r3, r1, r3
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	3332      	adds	r3, #50	; 0x32
 80095f8:	4a08      	ldr	r2, [pc, #32]	; (800961c <UART_SetConfig+0x4e4>)
 80095fa:	fba2 2303 	umull	r2, r3, r2, r3
 80095fe:	095b      	lsrs	r3, r3, #5
 8009600:	f003 020f 	and.w	r2, r3, #15
 8009604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4422      	add	r2, r4
 800960c:	609a      	str	r2, [r3, #8]
}
 800960e:	bf00      	nop
 8009610:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009614:	46bd      	mov	sp, r7
 8009616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800961a:	bf00      	nop
 800961c:	51eb851f 	.word	0x51eb851f

08009620 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009620:	b084      	sub	sp, #16
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	f107 001c 	add.w	r0, r7, #28
 800962e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	2b01      	cmp	r3, #1
 8009636:	d122      	bne.n	800967e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800964c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009662:	2b01      	cmp	r3, #1
 8009664:	d105      	bne.n	8009672 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 faa2 	bl	8009bbc <USB_CoreReset>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
 800967c:	e01a      	b.n	80096b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa96 	bl	8009bbc <USB_CoreReset>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009696:	2b00      	cmp	r3, #0
 8009698:	d106      	bne.n	80096a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38
 80096a6:	e005      	b.n	80096b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d10b      	bne.n	80096d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f043 0206 	orr.w	r2, r3, #6
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f043 0220 	orr.w	r2, r3, #32
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096de:	b004      	add	sp, #16
 80096e0:	4770      	bx	lr

080096e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f023 0201 	bic.w	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d115      	bne.n	8009752 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009732:	2001      	movs	r0, #1
 8009734:	f7f9 fc38 	bl	8002fa8 <HAL_Delay>
      ms++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa2e 	bl	8009ba0 <USB_GetMode>
 8009744:	4603      	mov	r3, r0
 8009746:	2b01      	cmp	r3, #1
 8009748:	d01e      	beq.n	8009788 <USB_SetCurrentMode+0x84>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b31      	cmp	r3, #49	; 0x31
 800974e:	d9f0      	bls.n	8009732 <USB_SetCurrentMode+0x2e>
 8009750:	e01a      	b.n	8009788 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d115      	bne.n	8009784 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009764:	2001      	movs	r0, #1
 8009766:	f7f9 fc1f 	bl	8002fa8 <HAL_Delay>
      ms++;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fa15 	bl	8009ba0 <USB_GetMode>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <USB_SetCurrentMode+0x84>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b31      	cmp	r3, #49	; 0x31
 8009780:	d9f0      	bls.n	8009764 <USB_SetCurrentMode+0x60>
 8009782:	e001      	b.n	8009788 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e005      	b.n	8009794 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b32      	cmp	r3, #50	; 0x32
 800978c:	d101      	bne.n	8009792 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800979c:	b084      	sub	sp, #16
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	e009      	b.n	80097d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	3340      	adds	r3, #64	; 0x40
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	2200      	movs	r2, #0
 80097c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3301      	adds	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b0e      	cmp	r3, #14
 80097d4:	d9f2      	bls.n	80097bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d11c      	bne.n	8009816 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097ea:	f043 0302 	orr.w	r3, r3, #2
 80097ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	639a      	str	r2, [r3, #56]	; 0x38
 8009814:	e00b      	b.n	800982e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009826:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009834:	461a      	mov	r2, r3
 8009836:	2300      	movs	r3, #0
 8009838:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009840:	4619      	mov	r1, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009848:	461a      	mov	r2, r3
 800984a:	680b      	ldr	r3, [r1, #0]
 800984c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	2b01      	cmp	r3, #1
 8009852:	d10c      	bne.n	800986e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d104      	bne.n	8009864 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800985a:	2100      	movs	r1, #0
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f965 	bl	8009b2c <USB_SetDevSpeed>
 8009862:	e008      	b.n	8009876 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009864:	2101      	movs	r1, #1
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f960 	bl	8009b2c <USB_SetDevSpeed>
 800986c:	e003      	b.n	8009876 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800986e:	2103      	movs	r1, #3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f95b 	bl	8009b2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009876:	2110      	movs	r1, #16
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8f3 	bl	8009a64 <USB_FlushTxFifo>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f91f 	bl	8009acc <USB_FlushRxFifo>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	461a      	mov	r2, r3
 80098a0:	2300      	movs	r3, #0
 80098a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	461a      	mov	r2, r3
 80098ac:	2300      	movs	r3, #0
 80098ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b6:	461a      	mov	r2, r3
 80098b8:	2300      	movs	r3, #0
 80098ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098bc:	2300      	movs	r3, #0
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	e043      	b.n	800994a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d8:	d118      	bne.n	800990c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	461a      	mov	r2, r3
 80098ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	e013      	b.n	800991e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	461a      	mov	r2, r3
 8009904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e008      	b.n	800991e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009918:	461a      	mov	r2, r3
 800991a:	2300      	movs	r3, #0
 800991c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992a:	461a      	mov	r2, r3
 800992c:	2300      	movs	r3, #0
 800992e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993c:	461a      	mov	r2, r3
 800993e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3301      	adds	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	429a      	cmp	r2, r3
 8009950:	d3b7      	bcc.n	80098c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	e043      	b.n	80099e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800996a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800996e:	d118      	bne.n	80099a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	461a      	mov	r2, r3
 8009984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	e013      	b.n	80099b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009998:	461a      	mov	r2, r3
 800999a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	e008      	b.n	80099b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ae:	461a      	mov	r2, r3
 80099b0:	2300      	movs	r3, #0
 80099b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	461a      	mov	r2, r3
 80099c2:	2300      	movs	r3, #0
 80099c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d2:	461a      	mov	r2, r3
 80099d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	3301      	adds	r3, #1
 80099de:	613b      	str	r3, [r7, #16]
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d3b7      	bcc.n	8009958 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	f043 0210 	orr.w	r2, r3, #16
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <USB_DevInit+0x2c4>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d005      	beq.n	8009a3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f043 0208 	orr.w	r2, r3, #8
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d107      	bne.n	8009a50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a48:	f043 0304 	orr.w	r3, r3, #4
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a5c:	b004      	add	sp, #16
 8009a5e:	4770      	bx	lr
 8009a60:	803c3800 	.word	0x803c3800

08009a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3301      	adds	r3, #1
 8009a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4a13      	ldr	r2, [pc, #76]	; (8009ac8 <USB_FlushTxFifo+0x64>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d901      	bls.n	8009a84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e01b      	b.n	8009abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	daf2      	bge.n	8009a72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	019b      	lsls	r3, r3, #6
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a08      	ldr	r2, [pc, #32]	; (8009ac8 <USB_FlushTxFifo+0x64>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d901      	bls.n	8009aae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e006      	b.n	8009abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	d0f0      	beq.n	8009a9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	00030d40 	.word	0x00030d40

08009acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3301      	adds	r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <USB_FlushRxFifo+0x5c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d901      	bls.n	8009aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e018      	b.n	8009b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	daf2      	bge.n	8009ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2210      	movs	r2, #16
 8009afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4a08      	ldr	r2, [pc, #32]	; (8009b28 <USB_FlushRxFifo+0x5c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d901      	bls.n	8009b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e006      	b.n	8009b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d0f0      	beq.n	8009afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	00030d40 	.word	0x00030d40

08009b2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b085      	sub	sp, #20
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b78:	f023 0303 	bic.w	r3, r3, #3
 8009b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b8c:	f043 0302 	orr.w	r3, r3, #2
 8009b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	f003 0301 	and.w	r3, r3, #1
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <USB_CoreReset+0x64>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d901      	bls.n	8009bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e01b      	b.n	8009c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	daf2      	bge.n	8009bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f043 0201 	orr.w	r2, r3, #1
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <USB_CoreReset+0x64>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d901      	bls.n	8009c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e006      	b.n	8009c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d0f0      	beq.n	8009bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	00030d40 	.word	0x00030d40

08009c24 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8009c2a:	4b98      	ldr	r3, [pc, #608]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 8009c30:	4b96      	ldr	r3, [pc, #600]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c32:	220a      	movs	r2, #10
 8009c34:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 15;
 8009c36:	4b95      	ldr	r3, [pc, #596]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c38:	220f      	movs	r2, #15
 8009c3a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 89;
 8009c3c:	4b93      	ldr	r3, [pc, #588]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c3e:	2259      	movs	r2, #89	; 0x59
 8009c40:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009c42:	4b93      	ldr	r3, [pc, #588]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009c44:	22ff      	movs	r2, #255	; 0xff
 8009c46:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009c48:	4b91      	ldr	r3, [pc, #580]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009c4a:	22ff      	movs	r2, #255	; 0xff
 8009c4c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009c4e:	4b90      	ldr	r3, [pc, #576]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009c50:	22ff      	movs	r2, #255	; 0xff
 8009c52:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009c54:	4b8e      	ldr	r3, [pc, #568]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8009c5a:	4b8e      	ldr	r3, [pc, #568]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 8009c60:	4b8c      	ldr	r3, [pc, #560]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009c62:	220a      	movs	r2, #10
 8009c64:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 15;
 8009c66:	4b8b      	ldr	r3, [pc, #556]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009c68:	220f      	movs	r2, #15
 8009c6a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 8009c6c:	4b89      	ldr	r3, [pc, #548]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009c6e:	22fe      	movs	r2, #254	; 0xfe
 8009c70:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009c72:	2100      	movs	r1, #0
 8009c74:	2000      	movs	r0, #0
 8009c76:	f004 fd79 	bl	800e76c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009c7a:	4b84      	ldr	r3, [pc, #528]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	061a      	lsls	r2, r3, #24
 8009c80:	4b82      	ldr	r3, [pc, #520]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	431a      	orrs	r2, r3
 8009c88:	4b80      	ldr	r3, [pc, #512]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c8a:	789b      	ldrb	r3, [r3, #2]
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	4a7e      	ldr	r2, [pc, #504]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c92:	78d2      	ldrb	r2, [r2, #3]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	061a      	lsls	r2, r3, #24
 8009c98:	4b7c      	ldr	r3, [pc, #496]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	0619      	lsls	r1, r3, #24
 8009c9e:	4b7b      	ldr	r3, [pc, #492]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	041b      	lsls	r3, r3, #16
 8009ca4:	4319      	orrs	r1, r3
 8009ca6:	4b79      	ldr	r3, [pc, #484]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009ca8:	789b      	ldrb	r3, [r3, #2]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	430b      	orrs	r3, r1
 8009cae:	4977      	ldr	r1, [pc, #476]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009cb0:	78c9      	ldrb	r1, [r1, #3]
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	021b      	lsls	r3, r3, #8
 8009cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	4b73      	ldr	r3, [pc, #460]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	0619      	lsls	r1, r3, #24
 8009cc2:	4b72      	ldr	r3, [pc, #456]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	4319      	orrs	r1, r3
 8009cca:	4b70      	ldr	r3, [pc, #448]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009ccc:	789b      	ldrb	r3, [r3, #2]
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	496e      	ldr	r1, [pc, #440]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009cd4:	78c9      	ldrb	r1, [r1, #3]
 8009cd6:	430b      	orrs	r3, r1
 8009cd8:	0a1b      	lsrs	r3, r3, #8
 8009cda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	4b6a      	ldr	r3, [pc, #424]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	0619      	lsls	r1, r3, #24
 8009ce6:	4b69      	ldr	r3, [pc, #420]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009ce8:	785b      	ldrb	r3, [r3, #1]
 8009cea:	041b      	lsls	r3, r3, #16
 8009cec:	4319      	orrs	r1, r3
 8009cee:	4b67      	ldr	r3, [pc, #412]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009cf0:	789b      	ldrb	r3, [r3, #2]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	4965      	ldr	r1, [pc, #404]	; (8009e8c <MX_LWIP_Init+0x268>)
 8009cf8:	78c9      	ldrb	r1, [r1, #3]
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	0e1b      	lsrs	r3, r3, #24
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	4a65      	ldr	r2, [pc, #404]	; (8009e98 <MX_LWIP_Init+0x274>)
 8009d02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009d04:	4b62      	ldr	r3, [pc, #392]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	061a      	lsls	r2, r3, #24
 8009d0a:	4b61      	ldr	r3, [pc, #388]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	431a      	orrs	r2, r3
 8009d12:	4b5f      	ldr	r3, [pc, #380]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d14:	789b      	ldrb	r3, [r3, #2]
 8009d16:	021b      	lsls	r3, r3, #8
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	4a5d      	ldr	r2, [pc, #372]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d1c:	78d2      	ldrb	r2, [r2, #3]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	061a      	lsls	r2, r3, #24
 8009d22:	4b5b      	ldr	r3, [pc, #364]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	0619      	lsls	r1, r3, #24
 8009d28:	4b59      	ldr	r3, [pc, #356]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d2a:	785b      	ldrb	r3, [r3, #1]
 8009d2c:	041b      	lsls	r3, r3, #16
 8009d2e:	4319      	orrs	r1, r3
 8009d30:	4b57      	ldr	r3, [pc, #348]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d32:	789b      	ldrb	r3, [r3, #2]
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	430b      	orrs	r3, r1
 8009d38:	4955      	ldr	r1, [pc, #340]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d3a:	78c9      	ldrb	r1, [r1, #3]
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d44:	431a      	orrs	r2, r3
 8009d46:	4b52      	ldr	r3, [pc, #328]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	0619      	lsls	r1, r3, #24
 8009d4c:	4b50      	ldr	r3, [pc, #320]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	041b      	lsls	r3, r3, #16
 8009d52:	4319      	orrs	r1, r3
 8009d54:	4b4e      	ldr	r3, [pc, #312]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d56:	789b      	ldrb	r3, [r3, #2]
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	494c      	ldr	r1, [pc, #304]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d5e:	78c9      	ldrb	r1, [r1, #3]
 8009d60:	430b      	orrs	r3, r1
 8009d62:	0a1b      	lsrs	r3, r3, #8
 8009d64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	4b49      	ldr	r3, [pc, #292]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	0619      	lsls	r1, r3, #24
 8009d70:	4b47      	ldr	r3, [pc, #284]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	041b      	lsls	r3, r3, #16
 8009d76:	4319      	orrs	r1, r3
 8009d78:	4b45      	ldr	r3, [pc, #276]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d7a:	789b      	ldrb	r3, [r3, #2]
 8009d7c:	021b      	lsls	r3, r3, #8
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	4943      	ldr	r1, [pc, #268]	; (8009e90 <MX_LWIP_Init+0x26c>)
 8009d82:	78c9      	ldrb	r1, [r1, #3]
 8009d84:	430b      	orrs	r3, r1
 8009d86:	0e1b      	lsrs	r3, r3, #24
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	4a44      	ldr	r2, [pc, #272]	; (8009e9c <MX_LWIP_Init+0x278>)
 8009d8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009d8e:	4b41      	ldr	r3, [pc, #260]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	061a      	lsls	r2, r3, #24
 8009d94:	4b3f      	ldr	r3, [pc, #252]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	4b3d      	ldr	r3, [pc, #244]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009d9e:	789b      	ldrb	r3, [r3, #2]
 8009da0:	021b      	lsls	r3, r3, #8
 8009da2:	4313      	orrs	r3, r2
 8009da4:	4a3b      	ldr	r2, [pc, #236]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009da6:	78d2      	ldrb	r2, [r2, #3]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	061a      	lsls	r2, r3, #24
 8009dac:	4b39      	ldr	r3, [pc, #228]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	0619      	lsls	r1, r3, #24
 8009db2:	4b38      	ldr	r3, [pc, #224]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009db4:	785b      	ldrb	r3, [r3, #1]
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	4319      	orrs	r1, r3
 8009dba:	4b36      	ldr	r3, [pc, #216]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009dbc:	789b      	ldrb	r3, [r3, #2]
 8009dbe:	021b      	lsls	r3, r3, #8
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	4934      	ldr	r1, [pc, #208]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009dc4:	78c9      	ldrb	r1, [r1, #3]
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	021b      	lsls	r3, r3, #8
 8009dca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	4b30      	ldr	r3, [pc, #192]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	0619      	lsls	r1, r3, #24
 8009dd6:	4b2f      	ldr	r3, [pc, #188]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009dd8:	785b      	ldrb	r3, [r3, #1]
 8009dda:	041b      	lsls	r3, r3, #16
 8009ddc:	4319      	orrs	r1, r3
 8009dde:	4b2d      	ldr	r3, [pc, #180]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009de0:	789b      	ldrb	r3, [r3, #2]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	430b      	orrs	r3, r1
 8009de6:	492b      	ldr	r1, [pc, #172]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009de8:	78c9      	ldrb	r1, [r1, #3]
 8009dea:	430b      	orrs	r3, r1
 8009dec:	0a1b      	lsrs	r3, r3, #8
 8009dee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009df2:	431a      	orrs	r2, r3
 8009df4:	4b27      	ldr	r3, [pc, #156]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	0619      	lsls	r1, r3, #24
 8009dfa:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	041b      	lsls	r3, r3, #16
 8009e00:	4319      	orrs	r1, r3
 8009e02:	4b24      	ldr	r3, [pc, #144]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009e04:	789b      	ldrb	r3, [r3, #2]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	4922      	ldr	r1, [pc, #136]	; (8009e94 <MX_LWIP_Init+0x270>)
 8009e0c:	78c9      	ldrb	r1, [r1, #3]
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	0e1b      	lsrs	r3, r3, #24
 8009e12:	4313      	orrs	r3, r2
 8009e14:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <MX_LWIP_Init+0x27c>)
 8009e16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009e18:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <MX_LWIP_Init+0x280>)
 8009e1a:	9302      	str	r3, [sp, #8]
 8009e1c:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <MX_LWIP_Init+0x284>)
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	2300      	movs	r3, #0
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	4b1e      	ldr	r3, [pc, #120]	; (8009ea0 <MX_LWIP_Init+0x27c>)
 8009e26:	4a1d      	ldr	r2, [pc, #116]	; (8009e9c <MX_LWIP_Init+0x278>)
 8009e28:	491b      	ldr	r1, [pc, #108]	; (8009e98 <MX_LWIP_Init+0x274>)
 8009e2a:	4820      	ldr	r0, [pc, #128]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e2c:	f005 fa68 	bl	800f300 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009e30:	481e      	ldr	r0, [pc, #120]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e32:	f005 fc17 	bl	800f664 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009e36:	4b1d      	ldr	r3, [pc, #116]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e3c:	089b      	lsrs	r3, r3, #2
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009e48:	4818      	ldr	r0, [pc, #96]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e4a:	f005 fc1b 	bl	800f684 <netif_set_up>
 8009e4e:	e002      	b.n	8009e56 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009e50:	4816      	ldr	r0, [pc, #88]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e52:	f005 fc83 	bl	800f75c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009e56:	4916      	ldr	r1, [pc, #88]	; (8009eb0 <MX_LWIP_Init+0x28c>)
 8009e58:	4814      	ldr	r0, [pc, #80]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e5a:	f005 fd15 	bl	800f888 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009e5e:	2224      	movs	r2, #36	; 0x24
 8009e60:	2100      	movs	r1, #0
 8009e62:	4814      	ldr	r0, [pc, #80]	; (8009eb4 <MX_LWIP_Init+0x290>)
 8009e64:	f00f f913 	bl	801908e <memset>
  attributes.name = "EthLink";
 8009e68:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <MX_LWIP_Init+0x290>)
 8009e6a:	4a13      	ldr	r2, [pc, #76]	; (8009eb8 <MX_LWIP_Init+0x294>)
 8009e6c:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009e6e:	4b11      	ldr	r3, [pc, #68]	; (8009eb4 <MX_LWIP_Init+0x290>)
 8009e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e74:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009e76:	4b0f      	ldr	r3, [pc, #60]	; (8009eb4 <MX_LWIP_Init+0x290>)
 8009e78:	2210      	movs	r2, #16
 8009e7a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8009e7c:	4a0d      	ldr	r2, [pc, #52]	; (8009eb4 <MX_LWIP_Init+0x290>)
 8009e7e:	490b      	ldr	r1, [pc, #44]	; (8009eac <MX_LWIP_Init+0x288>)
 8009e80:	480e      	ldr	r0, [pc, #56]	; (8009ebc <MX_LWIP_Init+0x298>)
 8009e82:	f000 fd96 	bl	800a9b2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009e86:	bf00      	nop
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000d18 	.word	0x20000d18
 8009e90:	20000d1c 	.word	0x20000d1c
 8009e94:	20000d20 	.word	0x20000d20
 8009e98:	20000d0c 	.word	0x20000d0c
 8009e9c:	20000d10 	.word	0x20000d10
 8009ea0:	20000d14 	.word	0x20000d14
 8009ea4:	0800e6a9 	.word	0x0800e6a9
 8009ea8:	0800a365 	.word	0x0800a365
 8009eac:	20000cd8 	.word	0x20000cd8
 8009eb0:	08009ec1 	.word	0x08009ec1
 8009eb4:	20000d24 	.word	0x20000d24
 8009eb8:	0801a724 	.word	0x0801a724
 8009ebc:	0800a659 	.word	0x0800a659

08009ec0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <HAL_ETH_RxCpltCallback+0x1c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fffd 	bl	800aee0 <osSemaphoreRelease>
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20005814 	.word	0x20005814

08009ef4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <HAL_ETH_TxCpltCallback+0x1c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 ffed 	bl	800aee0 <osSemaphoreRelease>
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20005818 	.word	0x20005818

08009f14 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7fa fca5 	bl	800486c <HAL_ETH_GetDMAError>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f28:	2b80      	cmp	r3, #128	; 0x80
 8009f2a:	d104      	bne.n	8009f36 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <HAL_ETH_ErrorCallback+0x2c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 ffd5 	bl	800aee0 <osSemaphoreRelease>
  }
}
 8009f36:	bf00      	nop
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20005814 	.word	0x20005814

08009f44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b0aa      	sub	sp, #168	; 0xa8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8009f5e:	f107 0310 	add.w	r3, r7, #16
 8009f62:	2264      	movs	r2, #100	; 0x64
 8009f64:	2100      	movs	r1, #0
 8009f66:	4618      	mov	r0, r3
 8009f68:	f00f f891 	bl	801908e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009f6c:	4b85      	ldr	r3, [pc, #532]	; (800a184 <low_level_init+0x240>)
 8009f6e:	4a86      	ldr	r2, [pc, #536]	; (800a188 <low_level_init+0x244>)
 8009f70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009f72:	2300      	movs	r3, #0
 8009f74:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009f76:	2380      	movs	r3, #128	; 0x80
 8009f78:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009f7a:	23e1      	movs	r3, #225	; 0xe1
 8009f7c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009f82:	2300      	movs	r3, #0
 8009f84:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x98;
 8009f86:	2398      	movs	r3, #152	; 0x98
 8009f88:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009f8a:	4a7e      	ldr	r2, [pc, #504]	; (800a184 <low_level_init+0x240>)
 8009f8c:	f107 0308 	add.w	r3, r7, #8
 8009f90:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009f92:	4b7c      	ldr	r3, [pc, #496]	; (800a184 <low_level_init+0x240>)
 8009f94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009f98:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009f9a:	4b7a      	ldr	r3, [pc, #488]	; (800a184 <low_level_init+0x240>)
 8009f9c:	4a7b      	ldr	r2, [pc, #492]	; (800a18c <low_level_init+0x248>)
 8009f9e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009fa0:	4b78      	ldr	r3, [pc, #480]	; (800a184 <low_level_init+0x240>)
 8009fa2:	4a7b      	ldr	r2, [pc, #492]	; (800a190 <low_level_init+0x24c>)
 8009fa4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009fa6:	4b77      	ldr	r3, [pc, #476]	; (800a184 <low_level_init+0x240>)
 8009fa8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009fac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009fae:	4875      	ldr	r0, [pc, #468]	; (800a184 <low_level_init+0x240>)
 8009fb0:	f7f9 fe1e 	bl	8003bf0 <HAL_ETH_Init>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009fba:	2238      	movs	r2, #56	; 0x38
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4875      	ldr	r0, [pc, #468]	; (800a194 <low_level_init+0x250>)
 8009fc0:	f00f f865 	bl	801908e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009fc4:	4b73      	ldr	r3, [pc, #460]	; (800a194 <low_level_init+0x250>)
 8009fc6:	2221      	movs	r2, #33	; 0x21
 8009fc8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009fca:	4b72      	ldr	r3, [pc, #456]	; (800a194 <low_level_init+0x250>)
 8009fcc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009fd0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009fd2:	4b70      	ldr	r3, [pc, #448]	; (800a194 <low_level_init+0x250>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009fd8:	486f      	ldr	r0, [pc, #444]	; (800a198 <low_level_init+0x254>)
 8009fda:	f005 f84b 	bl	800f074 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2206      	movs	r2, #6
 8009fe2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009fe6:	4b67      	ldr	r3, [pc, #412]	; (800a184 <low_level_init+0x240>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	781a      	ldrb	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009ff2:	4b64      	ldr	r3, [pc, #400]	; (800a184 <low_level_init+0x240>)
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	785a      	ldrb	r2, [r3, #1]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009ffe:	4b61      	ldr	r3, [pc, #388]	; (800a184 <low_level_init+0x240>)
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	789a      	ldrb	r2, [r3, #2]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a00a:	4b5e      	ldr	r3, [pc, #376]	; (800a184 <low_level_init+0x240>)
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	78da      	ldrb	r2, [r3, #3]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a016:	4b5b      	ldr	r3, [pc, #364]	; (800a184 <low_level_init+0x240>)
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	791a      	ldrb	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a022:	4b58      	ldr	r3, [pc, #352]	; (800a184 <low_level_init+0x240>)
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	795a      	ldrb	r2, [r3, #5]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a034:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a03c:	f043 030a 	orr.w	r3, r3, #10
 800a040:	b2da      	uxtb	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a048:	2200      	movs	r2, #0
 800a04a:	2101      	movs	r1, #1
 800a04c:	2001      	movs	r0, #1
 800a04e:	f000 fe6b 	bl	800ad28 <osSemaphoreNew>
 800a052:	4603      	mov	r3, r0
 800a054:	4a51      	ldr	r2, [pc, #324]	; (800a19c <low_level_init+0x258>)
 800a056:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800a058:	2200      	movs	r2, #0
 800a05a:	2101      	movs	r1, #1
 800a05c:	2001      	movs	r0, #1
 800a05e:	f000 fe63 	bl	800ad28 <osSemaphoreNew>
 800a062:	4603      	mov	r3, r0
 800a064:	4a4e      	ldr	r2, [pc, #312]	; (800a1a0 <low_level_init+0x25c>)
 800a066:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a068:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a06c:	2224      	movs	r2, #36	; 0x24
 800a06e:	2100      	movs	r1, #0
 800a070:	4618      	mov	r0, r3
 800a072:	f00f f80c 	bl	801908e <memset>
  attributes.name = "EthIf";
 800a076:	4b4b      	ldr	r3, [pc, #300]	; (800a1a4 <low_level_init+0x260>)
 800a078:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a07a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800a07e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800a082:	2330      	movs	r3, #48	; 0x30
 800a084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800a088:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a08c:	461a      	mov	r2, r3
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4845      	ldr	r0, [pc, #276]	; (800a1a8 <low_level_init+0x264>)
 800a092:	f000 fc8e 	bl	800a9b2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a096:	4945      	ldr	r1, [pc, #276]	; (800a1ac <low_level_init+0x268>)
 800a098:	4845      	ldr	r0, [pc, #276]	; (800a1b0 <low_level_init+0x26c>)
 800a09a:	f7f8 fde2 	bl	8002c62 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a09e:	4844      	ldr	r0, [pc, #272]	; (800a1b0 <low_level_init+0x26c>)
 800a0a0:	f7f8 fe11 	bl	8002cc6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a0a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d164      	bne.n	800a176 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a0ac:	4840      	ldr	r0, [pc, #256]	; (800a1b0 <low_level_init+0x26c>)
 800a0ae:	f7f8 feb2 	bl	8002e16 <LAN8742_GetLinkState>
 800a0b2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a0b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	dc06      	bgt.n	800a0cc <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f005 fbb2 	bl	800f828 <netif_set_link_down>
      netif_set_down(netif);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f005 fb49 	bl	800f75c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a0ca:	e056      	b.n	800a17a <low_level_init+0x236>
      switch (PHYLinkState)
 800a0cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0d0:	3b02      	subs	r3, #2
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d82a      	bhi.n	800a12c <low_level_init+0x1e8>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <low_level_init+0x198>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0ff 	.word	0x0800a0ff
 800a0e4:	0800a10f 	.word	0x0800a10f
 800a0e8:	0800a11f 	.word	0x0800a11f
        duplex = ETH_FULLDUPLEX_MODE;
 800a0ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a0f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a0fc:	e01f      	b.n	800a13e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a104:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a10c:	e017      	b.n	800a13e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a10e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a116:	2300      	movs	r3, #0
 800a118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a11c:	e00f      	b.n	800a13e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a11e:	2300      	movs	r3, #0
 800a120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800a124:	2300      	movs	r3, #0
 800a126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a12a:	e008      	b.n	800a13e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a12c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800a134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800a13c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a13e:	f107 0310 	add.w	r3, r7, #16
 800a142:	4619      	mov	r1, r3
 800a144:	480f      	ldr	r0, [pc, #60]	; (800a184 <low_level_init+0x240>)
 800a146:	f7fa fa37 	bl	80045b8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a14a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a14e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800a150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a156:	f107 0310 	add.w	r3, r7, #16
 800a15a:	4619      	mov	r1, r3
 800a15c:	4809      	ldr	r0, [pc, #36]	; (800a184 <low_level_init+0x240>)
 800a15e:	f7fa fb15 	bl	800478c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a162:	4808      	ldr	r0, [pc, #32]	; (800a184 <low_level_init+0x240>)
 800a164:	f7f9 fdc2 	bl	8003cec <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f005 fa8b 	bl	800f684 <netif_set_up>
    netif_set_link_up(netif);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f005 fb26 	bl	800f7c0 <netif_set_link_up>
}
 800a174:	e001      	b.n	800a17a <low_level_init+0x236>
    Error_Handler();
 800a176:	f7f7 fc8d 	bl	8001a94 <Error_Handler>
}
 800a17a:	bf00      	nop
 800a17c:	37a8      	adds	r7, #168	; 0xa8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	2000581c 	.word	0x2000581c
 800a188:	40028000 	.word	0x40028000
 800a18c:	20005774 	.word	0x20005774
 800a190:	200056d4 	.word	0x200056d4
 800a194:	200058cc 	.word	0x200058cc
 800a198:	0801d2e0 	.word	0x0801d2e0
 800a19c:	20005814 	.word	0x20005814
 800a1a0:	20005818 	.word	0x20005818
 800a1a4:	0801a72c 	.word	0x0801a72c
 800a1a8:	0800a311 	.word	0x0800a311
 800a1ac:	20000148 	.word	0x20000148
 800a1b0:	20005904 	.word	0x20005904

0800a1b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b092      	sub	sp, #72	; 0x48
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a1cc:	f107 030c 	add.w	r3, r7, #12
 800a1d0:	2230      	movs	r2, #48	; 0x30
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f00e ff5a 	bl	801908e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a1da:	f107 030c 	add.w	r3, r7, #12
 800a1de:	2230      	movs	r2, #48	; 0x30
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f00e ff53 	bl	801908e <memset>

  for(q = p; q != NULL; q = q->next)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ec:	e045      	b.n	800a27a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d902      	bls.n	800a1fa <low_level_output+0x46>
      return ERR_IF;
 800a1f4:	f06f 030b 	mvn.w	r3, #11
 800a1f8:	e065      	b.n	800a2c6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a1fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1fc:	6859      	ldr	r1, [r3, #4]
 800a1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a200:	4613      	mov	r3, r2
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	3348      	adds	r3, #72	; 0x48
 800a20a:	443b      	add	r3, r7
 800a20c:	3b3c      	subs	r3, #60	; 0x3c
 800a20e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a212:	895b      	ldrh	r3, [r3, #10]
 800a214:	4619      	mov	r1, r3
 800a216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a218:	4613      	mov	r3, r2
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	3348      	adds	r3, #72	; 0x48
 800a222:	443b      	add	r3, r7
 800a224:	3b38      	subs	r3, #56	; 0x38
 800a226:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d011      	beq.n	800a252 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a230:	1e5a      	subs	r2, r3, #1
 800a232:	f107 000c 	add.w	r0, r7, #12
 800a236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a238:	460b      	mov	r3, r1
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	440b      	add	r3, r1
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	18c1      	adds	r1, r0, r3
 800a242:	4613      	mov	r3, r2
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	3348      	adds	r3, #72	; 0x48
 800a24c:	443b      	add	r3, r7
 800a24e:	3b34      	subs	r3, #52	; 0x34
 800a250:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d109      	bne.n	800a26e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a25c:	4613      	mov	r3, r2
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	3348      	adds	r3, #72	; 0x48
 800a266:	443b      	add	r3, r7
 800a268:	3b34      	subs	r3, #52	; 0x34
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a26e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a270:	3301      	adds	r3, #1
 800a272:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	643b      	str	r3, [r7, #64]	; 0x40
 800a27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1b6      	bne.n	800a1ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	891b      	ldrh	r3, [r3, #8]
 800a284:	461a      	mov	r2, r3
 800a286:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <low_level_output+0x11c>)
 800a288:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a28a:	4a11      	ldr	r2, [pc, #68]	; (800a2d0 <low_level_output+0x11c>)
 800a28c:	f107 030c 	add.w	r3, r7, #12
 800a290:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a292:	4a0f      	ldr	r2, [pc, #60]	; (800a2d0 <low_level_output+0x11c>)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800a298:	6838      	ldr	r0, [r7, #0]
 800a29a:	f005 ff49 	bl	8010130 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800a29e:	490c      	ldr	r1, [pc, #48]	; (800a2d0 <low_level_output+0x11c>)
 800a2a0:	480c      	ldr	r0, [pc, #48]	; (800a2d4 <low_level_output+0x120>)
 800a2a2:	f7f9 fe30 	bl	8003f06 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800a2a6:	bf00      	nop
 800a2a8:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <low_level_output+0x124>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fdc3 	bl	800ae3c <osSemaphoreAcquire>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1f5      	bne.n	800a2a8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800a2bc:	4805      	ldr	r0, [pc, #20]	; (800a2d4 <low_level_output+0x120>)
 800a2be:	f7f9 ffb5 	bl	800422c <HAL_ETH_ReleaseTxPacket>

  return errval;
 800a2c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3748      	adds	r7, #72	; 0x48
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200058cc 	.word	0x200058cc
 800a2d4:	2000581c 	.word	0x2000581c
 800a2d8:	20005818 	.word	0x20005818

0800a2dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a2e8:	4b07      	ldr	r3, [pc, #28]	; (800a308 <low_level_input+0x2c>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d105      	bne.n	800a2fc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4805      	ldr	r0, [pc, #20]	; (800a30c <low_level_input+0x30>)
 800a2f8:	f7f9 fe61 	bl	8003fbe <HAL_ETH_ReadData>
  }

  return p;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	200056d0 	.word	0x200056d0
 800a30c:	2000581c 	.word	0x2000581c

0800a310 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a320:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <ethernetif_input+0x50>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f04f 31ff 	mov.w	r1, #4294967295
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fd87 	bl	800ae3c <osSemaphoreAcquire>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1f5      	bne.n	800a320 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a334:	68b8      	ldr	r0, [r7, #8]
 800a336:	f7ff ffd1 	bl	800a2dc <low_level_input>
 800a33a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	4798      	blx	r3
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f005 fe46 	bl	800ffe4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1ea      	bne.n	800a334 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a35e:	e7df      	b.n	800a320 <ethernetif_input+0x10>
 800a360:	20005814 	.word	0x20005814

0800a364 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <ethernetif_init+0x1c>
 800a372:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <ethernetif_init+0x48>)
 800a374:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a378:	490d      	ldr	r1, [pc, #52]	; (800a3b0 <ethernetif_init+0x4c>)
 800a37a:	480e      	ldr	r0, [pc, #56]	; (800a3b4 <ethernetif_init+0x50>)
 800a37c:	f00e ff24 	bl	80191c8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2273      	movs	r2, #115	; 0x73
 800a384:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2274      	movs	r2, #116	; 0x74
 800a38c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a09      	ldr	r2, [pc, #36]	; (800a3b8 <ethernetif_init+0x54>)
 800a394:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <ethernetif_init+0x58>)
 800a39a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff fdd1 	bl	8009f44 <low_level_init>

  return ERR_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	0801a734 	.word	0x0801a734
 800a3b0:	0801a750 	.word	0x0801a750
 800a3b4:	0801a760 	.word	0x0801a760
 800a3b8:	08016f05 	.word	0x08016f05
 800a3bc:	0800a1b5 	.word	0x0800a1b5

0800a3c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a3cc:	68f9      	ldr	r1, [r7, #12]
 800a3ce:	4809      	ldr	r0, [pc, #36]	; (800a3f4 <pbuf_free_custom+0x34>)
 800a3d0:	f004 ff40 	bl	800f254 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a3d4:	4b08      	ldr	r3, [pc, #32]	; (800a3f8 <pbuf_free_custom+0x38>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d107      	bne.n	800a3ec <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <pbuf_free_custom+0x38>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <pbuf_free_custom+0x3c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fd7a 	bl	800aee0 <osSemaphoreRelease>
  }
}
 800a3ec:	bf00      	nop
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	0801d2e0 	.word	0x0801d2e0
 800a3f8:	200056d0 	.word	0x200056d0
 800a3fc:	20005814 	.word	0x20005814

0800a400 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a404:	f7f8 fdc4 	bl	8002f90 <HAL_GetTick>
 800a408:	4603      	mov	r3, r0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08e      	sub	sp, #56	; 0x38
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a41c:	2200      	movs	r2, #0
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	605a      	str	r2, [r3, #4]
 800a422:	609a      	str	r2, [r3, #8]
 800a424:	60da      	str	r2, [r3, #12]
 800a426:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a5d      	ldr	r2, [pc, #372]	; (800a5a4 <HAL_ETH_MspInit+0x194>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	f040 80b4 	bne.w	800a59c <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a434:	2300      	movs	r3, #0
 800a436:	623b      	str	r3, [r7, #32]
 800a438:	4b5b      	ldr	r3, [pc, #364]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	4a5a      	ldr	r2, [pc, #360]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a43e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a442:	6313      	str	r3, [r2, #48]	; 0x30
 800a444:	4b58      	ldr	r3, [pc, #352]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a44c:	623b      	str	r3, [r7, #32]
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	2300      	movs	r3, #0
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	4b54      	ldr	r3, [pc, #336]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	4a53      	ldr	r2, [pc, #332]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a45a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a45e:	6313      	str	r3, [r2, #48]	; 0x30
 800a460:	4b51      	ldr	r3, [pc, #324]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a468:	61fb      	str	r3, [r7, #28]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	2300      	movs	r3, #0
 800a46e:	61bb      	str	r3, [r7, #24]
 800a470:	4b4d      	ldr	r3, [pc, #308]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a474:	4a4c      	ldr	r2, [pc, #304]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a47a:	6313      	str	r3, [r2, #48]	; 0x30
 800a47c:	4b4a      	ldr	r3, [pc, #296]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	4b46      	ldr	r3, [pc, #280]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a490:	4a45      	ldr	r2, [pc, #276]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a492:	f043 0304 	orr.w	r3, r3, #4
 800a496:	6313      	str	r3, [r2, #48]	; 0x30
 800a498:	4b43      	ldr	r3, [pc, #268]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	613b      	str	r3, [r7, #16]
 800a4a8:	4b3f      	ldr	r3, [pc, #252]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ac:	4a3e      	ldr	r2, [pc, #248]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4ae:	f043 0301 	orr.w	r3, r3, #1
 800a4b2:	6313      	str	r3, [r2, #48]	; 0x30
 800a4b4:	4b3c      	ldr	r3, [pc, #240]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	613b      	str	r3, [r7, #16]
 800a4be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	4b38      	ldr	r3, [pc, #224]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c8:	4a37      	ldr	r2, [pc, #220]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4ca:	f043 0302 	orr.w	r3, r3, #2
 800a4ce:	6313      	str	r3, [r2, #48]	; 0x30
 800a4d0:	4b35      	ldr	r3, [pc, #212]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60bb      	str	r3, [r7, #8]
 800a4e0:	4b31      	ldr	r3, [pc, #196]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e4:	4a30      	ldr	r2, [pc, #192]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ea:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ec:	4b2e      	ldr	r3, [pc, #184]	; (800a5a8 <HAL_ETH_MspInit+0x198>)
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a4f8:	2332      	movs	r3, #50	; 0x32
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a500:	2300      	movs	r3, #0
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a504:	2303      	movs	r3, #3
 800a506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a508:	230b      	movs	r3, #11
 800a50a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a510:	4619      	mov	r1, r3
 800a512:	4826      	ldr	r0, [pc, #152]	; (800a5ac <HAL_ETH_MspInit+0x19c>)
 800a514:	f7fa fdbc 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a518:	2386      	movs	r3, #134	; 0x86
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a51c:	2302      	movs	r3, #2
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a520:	2300      	movs	r3, #0
 800a522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a524:	2303      	movs	r3, #3
 800a526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a528:	230b      	movs	r3, #11
 800a52a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a52c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a530:	4619      	mov	r1, r3
 800a532:	481f      	ldr	r0, [pc, #124]	; (800a5b0 <HAL_ETH_MspInit+0x1a0>)
 800a534:	f7fa fdac 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a53e:	2302      	movs	r3, #2
 800a540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a542:	2300      	movs	r3, #0
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a546:	2303      	movs	r3, #3
 800a548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a54a:	230b      	movs	r3, #11
 800a54c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a552:	4619      	mov	r1, r3
 800a554:	4817      	ldr	r0, [pc, #92]	; (800a5b4 <HAL_ETH_MspInit+0x1a4>)
 800a556:	f7fa fd9b 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a55a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a560:	2302      	movs	r3, #2
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a564:	2300      	movs	r3, #0
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a568:	2303      	movs	r3, #3
 800a56a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a56c:	230b      	movs	r3, #11
 800a56e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a574:	4619      	mov	r1, r3
 800a576:	4810      	ldr	r0, [pc, #64]	; (800a5b8 <HAL_ETH_MspInit+0x1a8>)
 800a578:	f7fa fd8a 	bl	8005090 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a57c:	2200      	movs	r2, #0
 800a57e:	2105      	movs	r1, #5
 800a580:	203d      	movs	r0, #61	; 0x3d
 800a582:	f7f9 fa79 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a586:	203d      	movs	r0, #61	; 0x3d
 800a588:	f7f9 fa92 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800a58c:	2200      	movs	r2, #0
 800a58e:	2105      	movs	r1, #5
 800a590:	203e      	movs	r0, #62	; 0x3e
 800a592:	f7f9 fa71 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a596:	203e      	movs	r0, #62	; 0x3e
 800a598:	f7f9 fa8a 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a59c:	bf00      	nop
 800a59e:	3738      	adds	r7, #56	; 0x38
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	40028000 	.word	0x40028000
 800a5a8:	40023800 	.word	0x40023800
 800a5ac:	40020800 	.word	0x40020800
 800a5b0:	40020000 	.word	0x40020000
 800a5b4:	40020400 	.word	0x40020400
 800a5b8:	40021800 	.word	0x40021800

0800a5bc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a5c0:	4802      	ldr	r0, [pc, #8]	; (800a5cc <ETH_PHY_IO_Init+0x10>)
 800a5c2:	f7fa f8fd 	bl	80047c0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	2000581c 	.word	0x2000581c

0800a5d0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
  return 0;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	68f9      	ldr	r1, [r7, #12]
 800a5f2:	4807      	ldr	r0, [pc, #28]	; (800a610 <ETH_PHY_IO_ReadReg+0x30>)
 800a5f4:	f7f9 ff4c 	bl	8004490 <HAL_ETH_ReadPHYRegister>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a602:	e000      	b.n	800a606 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	2000581c 	.word	0x2000581c

0800a614 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	68f9      	ldr	r1, [r7, #12]
 800a626:	4807      	ldr	r0, [pc, #28]	; (800a644 <ETH_PHY_IO_WriteReg+0x30>)
 800a628:	f7f9 ff7d 	bl	8004526 <HAL_ETH_WritePHYRegister>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a632:	f04f 33ff 	mov.w	r3, #4294967295
 800a636:	e000      	b.n	800a63a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	2000581c 	.word	0x2000581c

0800a648 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a64c:	f7f8 fca0 	bl	8002f90 <HAL_GetTick>
 800a650:	4603      	mov	r3, r0
}
 800a652:	4618      	mov	r0, r3
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b0a0      	sub	sp, #128	; 0x80
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	2264      	movs	r2, #100	; 0x64
 800a666:	2100      	movs	r1, #0
 800a668:	4618      	mov	r0, r3
 800a66a:	f00e fd10 	bl	801908e <memset>
  int32_t PHYLinkState = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a676:	2300      	movs	r3, #0
 800a678:	67bb      	str	r3, [r7, #120]	; 0x78
 800a67a:	2300      	movs	r3, #0
 800a67c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a682:	483a      	ldr	r0, [pc, #232]	; (800a76c <ethernet_link_thread+0x114>)
 800a684:	f7f8 fbc7 	bl	8002e16 <LAN8742_GetLinkState>
 800a688:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a68c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a690:	089b      	lsrs	r3, r3, #2
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <ethernet_link_thread+0x5e>
 800a69c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	dc09      	bgt.n	800a6b6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a6a2:	4833      	ldr	r0, [pc, #204]	; (800a770 <ethernet_link_thread+0x118>)
 800a6a4:	f7f9 fbb0 	bl	8003e08 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a6a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a6aa:	f005 f857 	bl	800f75c <netif_set_down>
    netif_set_link_down(netif);
 800a6ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a6b0:	f005 f8ba 	bl	800f828 <netif_set_link_down>
 800a6b4:	e055      	b.n	800a762 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d14e      	bne.n	800a762 <ethernet_link_thread+0x10a>
 800a6c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	dd4b      	ble.n	800a762 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800a6ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6cc:	3b02      	subs	r3, #2
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d82a      	bhi.n	800a728 <ethernet_link_thread+0xd0>
 800a6d2:	a201      	add	r2, pc, #4	; (adr r2, 800a6d8 <ethernet_link_thread+0x80>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6e9 	.word	0x0800a6e9
 800a6dc:	0800a6fb 	.word	0x0800a6fb
 800a6e0:	0800a70b 	.word	0x0800a70b
 800a6e4:	0800a71b 	.word	0x0800a71b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a6e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a6ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a6f8:	e017      	b.n	800a72a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a6fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a702:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a704:	2301      	movs	r3, #1
 800a706:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a708:	e00f      	b.n	800a72a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a70a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a70e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a710:	2300      	movs	r3, #0
 800a712:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a714:	2301      	movs	r3, #1
 800a716:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a718:	e007      	b.n	800a72a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a71a:	2300      	movs	r3, #0
 800a71c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a71e:	2300      	movs	r3, #0
 800a720:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a722:	2301      	movs	r3, #1
 800a724:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a726:	e000      	b.n	800a72a <ethernet_link_thread+0xd2>
    default:
      break;
 800a728:	bf00      	nop
    }

    if(linkchanged)
 800a72a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d018      	beq.n	800a762 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a730:	f107 0308 	add.w	r3, r7, #8
 800a734:	4619      	mov	r1, r3
 800a736:	480e      	ldr	r0, [pc, #56]	; (800a770 <ethernet_link_thread+0x118>)
 800a738:	f7f9 ff3e 	bl	80045b8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a73c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a73e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a742:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a744:	f107 0308 	add.w	r3, r7, #8
 800a748:	4619      	mov	r1, r3
 800a74a:	4809      	ldr	r0, [pc, #36]	; (800a770 <ethernet_link_thread+0x118>)
 800a74c:	f7fa f81e 	bl	800478c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a750:	4807      	ldr	r0, [pc, #28]	; (800a770 <ethernet_link_thread+0x118>)
 800a752:	f7f9 facb 	bl	8003cec <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a756:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a758:	f004 ff94 	bl	800f684 <netif_set_up>
      netif_set_link_up(netif);
 800a75c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a75e:	f005 f82f 	bl	800f7c0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a762:	2064      	movs	r0, #100	; 0x64
 800a764:	f000 f9b7 	bl	800aad6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a768:	e78b      	b.n	800a682 <ethernet_link_thread+0x2a>
 800a76a:	bf00      	nop
 800a76c:	20005904 	.word	0x20005904
 800a770:	2000581c 	.word	0x2000581c

0800a774 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af02      	add	r7, sp, #8
 800a77a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a77c:	4812      	ldr	r0, [pc, #72]	; (800a7c8 <HAL_ETH_RxAllocateCallback+0x54>)
 800a77e:	f004 fcf5 	bl	800f16c <memp_malloc_pool>
 800a782:	60f8      	str	r0, [r7, #12]
  if (p)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d014      	beq.n	800a7b4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f103 0220 	add.w	r2, r3, #32
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4a0d      	ldr	r2, [pc, #52]	; (800a7cc <HAL_ETH_RxAllocateCallback+0x58>)
 800a798:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a7a2:	9201      	str	r2, [sp, #4]
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2241      	movs	r2, #65	; 0x41
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f005 fa5f 	bl	800fc70 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a7b2:	e005      	b.n	800a7c0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	0801d2e0 	.word	0x0801d2e0
 800a7cc:	0800a3c1 	.word	0x0800a3c1
 800a7d0:	200056d0 	.word	0x200056d0

0800a7d4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b089      	sub	sp, #36	; 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3b20      	subs	r3, #32
 800a7f2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	887a      	ldrh	r2, [r7, #2]
 800a804:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e003      	b.n	800a81e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	69fa      	ldr	r2, [r7, #28]
 800a822:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	e009      	b.n	800a840 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	891a      	ldrh	r2, [r3, #8]
 800a830:	887b      	ldrh	r3, [r7, #2]
 800a832:	4413      	add	r3, r2
 800a834:	b29a      	uxth	r2, r3
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	61fb      	str	r3, [r7, #28]
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1f2      	bne.n	800a82c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a846:	bf00      	nop
 800a848:	bf00      	nop
 800a84a:	3724      	adds	r7, #36	; 0x24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f005 fbc1 	bl	800ffe4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <__NVIC_SetPriority>:
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	6039      	str	r1, [r7, #0]
 800a876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	db0a      	blt.n	800a896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	b2da      	uxtb	r2, r3
 800a884:	490c      	ldr	r1, [pc, #48]	; (800a8b8 <__NVIC_SetPriority+0x4c>)
 800a886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a88a:	0112      	lsls	r2, r2, #4
 800a88c:	b2d2      	uxtb	r2, r2
 800a88e:	440b      	add	r3, r1
 800a890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a894:	e00a      	b.n	800a8ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	4908      	ldr	r1, [pc, #32]	; (800a8bc <__NVIC_SetPriority+0x50>)
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	f003 030f 	and.w	r3, r3, #15
 800a8a2:	3b04      	subs	r3, #4
 800a8a4:	0112      	lsls	r2, r2, #4
 800a8a6:	b2d2      	uxtb	r2, r2
 800a8a8:	440b      	add	r3, r1
 800a8aa:	761a      	strb	r2, [r3, #24]
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	e000e100 	.word	0xe000e100
 800a8bc:	e000ed00 	.word	0xe000ed00

0800a8c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <SysTick_Handler+0x1c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a8c8:	f002 fc96 	bl	800d1f8 <xTaskGetSchedulerState>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d001      	beq.n	800a8d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a8d2:	f003 fb79 	bl	800dfc8 <xPortSysTickHandler>
  }
}
 800a8d6:	bf00      	nop
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	e000e010 	.word	0xe000e010

0800a8e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	f06f 0004 	mvn.w	r0, #4
 800a8ea:	f7ff ffbf 	bl	800a86c <__NVIC_SetPriority>
#endif
}
 800a8ee:	bf00      	nop
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fa:	f3ef 8305 	mrs	r3, IPSR
 800a8fe:	603b      	str	r3, [r7, #0]
  return(result);
 800a900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a906:	f06f 0305 	mvn.w	r3, #5
 800a90a:	607b      	str	r3, [r7, #4]
 800a90c:	e00c      	b.n	800a928 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a90e:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <osKernelInitialize+0x44>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a916:	4b08      	ldr	r3, [pc, #32]	; (800a938 <osKernelInitialize+0x44>)
 800a918:	2201      	movs	r2, #1
 800a91a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	607b      	str	r3, [r7, #4]
 800a920:	e002      	b.n	800a928 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a922:	f04f 33ff 	mov.w	r3, #4294967295
 800a926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a928:	687b      	ldr	r3, [r7, #4]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20005924 	.word	0x20005924

0800a93c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a942:	f3ef 8305 	mrs	r3, IPSR
 800a946:	603b      	str	r3, [r7, #0]
  return(result);
 800a948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a94e:	f06f 0305 	mvn.w	r3, #5
 800a952:	607b      	str	r3, [r7, #4]
 800a954:	e010      	b.n	800a978 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <osKernelStart+0x48>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d109      	bne.n	800a972 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a95e:	f7ff ffbf 	bl	800a8e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a962:	4b08      	ldr	r3, [pc, #32]	; (800a984 <osKernelStart+0x48>)
 800a964:	2202      	movs	r2, #2
 800a966:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a968:	f001 ffc8 	bl	800c8fc <vTaskStartScheduler>
      stat = osOK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	607b      	str	r3, [r7, #4]
 800a970:	e002      	b.n	800a978 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295
 800a976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a978:	687b      	ldr	r3, [r7, #4]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20005924 	.word	0x20005924

0800a988 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a98e:	f3ef 8305 	mrs	r3, IPSR
 800a992:	603b      	str	r3, [r7, #0]
  return(result);
 800a994:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a99a:	f002 f8db 	bl	800cb54 <xTaskGetTickCountFromISR>
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	e002      	b.n	800a9a8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a9a2:	f002 f8c7 	bl	800cb34 <xTaskGetTickCount>
 800a9a6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a9a8:	687b      	ldr	r3, [r7, #4]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b08e      	sub	sp, #56	; 0x38
 800a9b6:	af04      	add	r7, sp, #16
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9c2:	f3ef 8305 	mrs	r3, IPSR
 800a9c6:	617b      	str	r3, [r7, #20]
  return(result);
 800a9c8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d17e      	bne.n	800aacc <osThreadNew+0x11a>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d07b      	beq.n	800aacc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a9d4:	2380      	movs	r3, #128	; 0x80
 800a9d6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a9d8:	2318      	movs	r3, #24
 800a9da:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d045      	beq.n	800aa78 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <osThreadNew+0x48>
        name = attr->name;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d008      	beq.n	800aa20 <osThreadNew+0x6e>
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	2b38      	cmp	r3, #56	; 0x38
 800aa12:	d805      	bhi.n	800aa20 <osThreadNew+0x6e>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <osThreadNew+0x72>
        return (NULL);
 800aa20:	2300      	movs	r3, #0
 800aa22:	e054      	b.n	800aace <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	089b      	lsrs	r3, r3, #2
 800aa32:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00e      	beq.n	800aa5a <osThreadNew+0xa8>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	2bbb      	cmp	r3, #187	; 0xbb
 800aa42:	d90a      	bls.n	800aa5a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <osThreadNew+0xa8>
        mem = 1;
 800aa54:	2301      	movs	r3, #1
 800aa56:	61bb      	str	r3, [r7, #24]
 800aa58:	e010      	b.n	800aa7c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10c      	bne.n	800aa7c <osThreadNew+0xca>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d108      	bne.n	800aa7c <osThreadNew+0xca>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d104      	bne.n	800aa7c <osThreadNew+0xca>
          mem = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	61bb      	str	r3, [r7, #24]
 800aa76:	e001      	b.n	800aa7c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d110      	bne.n	800aaa4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa8a:	9202      	str	r2, [sp, #8]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	6a3a      	ldr	r2, [r7, #32]
 800aa96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f001 fd43 	bl	800c524 <xTaskCreateStatic>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	613b      	str	r3, [r7, #16]
 800aaa2:	e013      	b.n	800aacc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d110      	bne.n	800aacc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	f107 0310 	add.w	r3, r7, #16
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f001 fd8e 	bl	800c5de <xTaskCreate>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d001      	beq.n	800aacc <osThreadNew+0x11a>
            hTask = NULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aacc:	693b      	ldr	r3, [r7, #16]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3728      	adds	r7, #40	; 0x28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aade:	f3ef 8305 	mrs	r3, IPSR
 800aae2:	60bb      	str	r3, [r7, #8]
  return(result);
 800aae4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <osDelay+0x1c>
    stat = osErrorISR;
 800aaea:	f06f 0305 	mvn.w	r3, #5
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e007      	b.n	800ab02 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 fec9 	bl	800c894 <vTaskDelay>
    }
  }

  return (stat);
 800ab02:	68fb      	ldr	r3, [r7, #12]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ab14:	2300      	movs	r3, #0
 800ab16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab18:	f3ef 8305 	mrs	r3, IPSR
 800ab1c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab1e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d174      	bne.n	800ac0e <osMutexNew+0x102>
    if (attr != NULL) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	61bb      	str	r3, [r7, #24]
 800ab30:	e001      	b.n	800ab36 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <osMutexNew+0x3a>
      rmtx = 1U;
 800ab40:	2301      	movs	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	e001      	b.n	800ab4a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	f003 0308 	and.w	r3, r3, #8
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d15c      	bne.n	800ac0e <osMutexNew+0x102>
      mem = -1;
 800ab54:	f04f 33ff 	mov.w	r3, #4294967295
 800ab58:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d015      	beq.n	800ab8c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d006      	beq.n	800ab76 <osMutexNew+0x6a>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b4f      	cmp	r3, #79	; 0x4f
 800ab6e:	d902      	bls.n	800ab76 <osMutexNew+0x6a>
          mem = 1;
 800ab70:	2301      	movs	r3, #1
 800ab72:	613b      	str	r3, [r7, #16]
 800ab74:	e00c      	b.n	800ab90 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d108      	bne.n	800ab90 <osMutexNew+0x84>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d104      	bne.n	800ab90 <osMutexNew+0x84>
            mem = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	613b      	str	r3, [r7, #16]
 800ab8a:	e001      	b.n	800ab90 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d112      	bne.n	800abbc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	4619      	mov	r1, r3
 800aba2:	2004      	movs	r0, #4
 800aba4:	f000 fd69 	bl	800b67a <xQueueCreateMutexStatic>
 800aba8:	61f8      	str	r0, [r7, #28]
 800abaa:	e016      	b.n	800abda <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	4619      	mov	r1, r3
 800abb2:	2001      	movs	r0, #1
 800abb4:	f000 fd61 	bl	800b67a <xQueueCreateMutexStatic>
 800abb8:	61f8      	str	r0, [r7, #28]
 800abba:	e00e      	b.n	800abda <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10b      	bne.n	800abda <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d004      	beq.n	800abd2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800abc8:	2004      	movs	r0, #4
 800abca:	f000 fd3e 	bl	800b64a <xQueueCreateMutex>
 800abce:	61f8      	str	r0, [r7, #28]
 800abd0:	e003      	b.n	800abda <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800abd2:	2001      	movs	r0, #1
 800abd4:	f000 fd39 	bl	800b64a <xQueueCreateMutex>
 800abd8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00c      	beq.n	800abfa <osMutexNew+0xee>
        if (attr != NULL) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <osMutexNew+0xe2>
          name = attr->name;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	e001      	b.n	800abf2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800abf2:	68f9      	ldr	r1, [r7, #12]
 800abf4:	69f8      	ldr	r0, [r7, #28]
 800abf6:	f001 fc0d 	bl	800c414 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <osMutexNew+0x102>
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d003      	beq.n	800ac0e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f043 0301 	orr.w	r3, r3, #1
 800ac0c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ac0e:	69fb      	ldr	r3, [r7, #28]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f023 0301 	bic.w	r3, r3, #1
 800ac28:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac36:	f3ef 8305 	mrs	r3, IPSR
 800ac3a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac3c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ac42:	f06f 0305 	mvn.w	r3, #5
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	e02c      	b.n	800aca4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ac50:	f06f 0303 	mvn.w	r3, #3
 800ac54:	617b      	str	r3, [r7, #20]
 800ac56:	e025      	b.n	800aca4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d011      	beq.n	800ac82 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6938      	ldr	r0, [r7, #16]
 800ac62:	f000 fd59 	bl	800b718 <xQueueTakeMutexRecursive>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d01b      	beq.n	800aca4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ac72:	f06f 0301 	mvn.w	r3, #1
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e014      	b.n	800aca4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ac7a:	f06f 0302 	mvn.w	r3, #2
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	e010      	b.n	800aca4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6938      	ldr	r0, [r7, #16]
 800ac86:	f001 f8ed 	bl	800be64 <xQueueSemaphoreTake>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d009      	beq.n	800aca4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ac96:	f06f 0301 	mvn.w	r3, #1
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	e002      	b.n	800aca4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ac9e:	f06f 0302 	mvn.w	r3, #2
 800aca2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800aca4:	697b      	ldr	r3, [r7, #20]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800acae:	b580      	push	{r7, lr}
 800acb0:	b086      	sub	sp, #24
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acca:	f3ef 8305 	mrs	r3, IPSR
 800acce:	60bb      	str	r3, [r7, #8]
  return(result);
 800acd0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <osMutexRelease+0x30>
    stat = osErrorISR;
 800acd6:	f06f 0305 	mvn.w	r3, #5
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	e01f      	b.n	800ad1e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d103      	bne.n	800acec <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ace4:	f06f 0303 	mvn.w	r3, #3
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	e018      	b.n	800ad1e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d009      	beq.n	800ad06 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800acf2:	6938      	ldr	r0, [r7, #16]
 800acf4:	f000 fcdc 	bl	800b6b0 <xQueueGiveMutexRecursive>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d00f      	beq.n	800ad1e <osMutexRelease+0x70>
        stat = osErrorResource;
 800acfe:	f06f 0302 	mvn.w	r3, #2
 800ad02:	617b      	str	r3, [r7, #20]
 800ad04:	e00b      	b.n	800ad1e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ad06:	2300      	movs	r3, #0
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	6938      	ldr	r0, [r7, #16]
 800ad0e:	f000 fda3 	bl	800b858 <xQueueGenericSend>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d002      	beq.n	800ad1e <osMutexRelease+0x70>
        stat = osErrorResource;
 800ad18:	f06f 0302 	mvn.w	r3, #2
 800ad1c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ad1e:	697b      	ldr	r3, [r7, #20]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	; 0x28
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad38:	f3ef 8305 	mrs	r3, IPSR
 800ad3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ad3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d175      	bne.n	800ae30 <osSemaphoreNew+0x108>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d072      	beq.n	800ae30 <osSemaphoreNew+0x108>
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d86e      	bhi.n	800ae30 <osSemaphoreNew+0x108>
    mem = -1;
 800ad52:	f04f 33ff 	mov.w	r3, #4294967295
 800ad56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d015      	beq.n	800ad8a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d006      	beq.n	800ad74 <osSemaphoreNew+0x4c>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	2b4f      	cmp	r3, #79	; 0x4f
 800ad6c:	d902      	bls.n	800ad74 <osSemaphoreNew+0x4c>
        mem = 1;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	61bb      	str	r3, [r7, #24]
 800ad72:	e00c      	b.n	800ad8e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d108      	bne.n	800ad8e <osSemaphoreNew+0x66>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <osSemaphoreNew+0x66>
          mem = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	e001      	b.n	800ad8e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d04c      	beq.n	800ae30 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d128      	bne.n	800adee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d10a      	bne.n	800adb8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	2203      	movs	r2, #3
 800ada8:	9200      	str	r2, [sp, #0]
 800adaa:	2200      	movs	r2, #0
 800adac:	2100      	movs	r1, #0
 800adae:	2001      	movs	r0, #1
 800adb0:	f000 fb5c 	bl	800b46c <xQueueGenericCreateStatic>
 800adb4:	61f8      	str	r0, [r7, #28]
 800adb6:	e005      	b.n	800adc4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800adb8:	2203      	movs	r2, #3
 800adba:	2100      	movs	r1, #0
 800adbc:	2001      	movs	r0, #1
 800adbe:	f000 fbcd 	bl	800b55c <xQueueGenericCreate>
 800adc2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d022      	beq.n	800ae10 <osSemaphoreNew+0xe8>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d01f      	beq.n	800ae10 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800add0:	2300      	movs	r3, #0
 800add2:	2200      	movs	r2, #0
 800add4:	2100      	movs	r1, #0
 800add6:	69f8      	ldr	r0, [r7, #28]
 800add8:	f000 fd3e 	bl	800b858 <xQueueGenericSend>
 800addc:	4603      	mov	r3, r0
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d016      	beq.n	800ae10 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ade2:	69f8      	ldr	r0, [r7, #28]
 800ade4:	f001 f9ca 	bl	800c17c <vQueueDelete>
            hSemaphore = NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	e010      	b.n	800ae10 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d108      	bne.n	800ae06 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	461a      	mov	r2, r3
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 fcc1 	bl	800b784 <xQueueCreateCountingSemaphoreStatic>
 800ae02:	61f8      	str	r0, [r7, #28]
 800ae04:	e004      	b.n	800ae10 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f000 fcf2 	bl	800b7f2 <xQueueCreateCountingSemaphore>
 800ae0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00c      	beq.n	800ae30 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e001      	b.n	800ae28 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ae28:	6979      	ldr	r1, [r7, #20]
 800ae2a:	69f8      	ldr	r0, [r7, #28]
 800ae2c:	f001 faf2 	bl	800c414 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ae30:	69fb      	ldr	r3, [r7, #28]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d103      	bne.n	800ae5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ae54:	f06f 0303 	mvn.w	r3, #3
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	e039      	b.n	800aed0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae5c:	f3ef 8305 	mrs	r3, IPSR
 800ae60:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d022      	beq.n	800aeae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ae6e:	f06f 0303 	mvn.w	r3, #3
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e02c      	b.n	800aed0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	461a      	mov	r2, r3
 800ae80:	2100      	movs	r1, #0
 800ae82:	6938      	ldr	r0, [r7, #16]
 800ae84:	f001 f8fa 	bl	800c07c <xQueueReceiveFromISR>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d003      	beq.n	800ae96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ae8e:	f06f 0302 	mvn.w	r3, #2
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	e01c      	b.n	800aed0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d019      	beq.n	800aed0 <osSemaphoreAcquire+0x94>
 800ae9c:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <osSemaphoreAcquire+0xa0>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	e010      	b.n	800aed0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6938      	ldr	r0, [r7, #16]
 800aeb2:	f000 ffd7 	bl	800be64 <xQueueSemaphoreTake>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d009      	beq.n	800aed0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800aec2:	f06f 0301 	mvn.w	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e002      	b.n	800aed0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800aeca:	f06f 0302 	mvn.w	r3, #2
 800aece:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aed0:	697b      	ldr	r3, [r7, #20]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aef6:	f06f 0303 	mvn.w	r3, #3
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e02c      	b.n	800af58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aefe:	f3ef 8305 	mrs	r3, IPSR
 800af02:	60fb      	str	r3, [r7, #12]
  return(result);
 800af04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af06:	2b00      	cmp	r3, #0
 800af08:	d01a      	beq.n	800af40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800af0e:	f107 0308 	add.w	r3, r7, #8
 800af12:	4619      	mov	r1, r3
 800af14:	6938      	ldr	r0, [r7, #16]
 800af16:	f000 fe38 	bl	800bb8a <xQueueGiveFromISR>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d003      	beq.n	800af28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800af20:	f06f 0302 	mvn.w	r3, #2
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	e017      	b.n	800af58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d014      	beq.n	800af58 <osSemaphoreRelease+0x78>
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <osSemaphoreRelease+0x84>)
 800af30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	e00b      	b.n	800af58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af40:	2300      	movs	r3, #0
 800af42:	2200      	movs	r2, #0
 800af44:	2100      	movs	r1, #0
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f000 fc86 	bl	800b858 <xQueueGenericSend>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d002      	beq.n	800af58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800af52:	f06f 0302 	mvn.w	r3, #2
 800af56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800af58:	697b      	ldr	r3, [r7, #20]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	e000ed04 	.word	0xe000ed04

0800af68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800af74:	2300      	movs	r3, #0
 800af76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af78:	f3ef 8305 	mrs	r3, IPSR
 800af7c:	613b      	str	r3, [r7, #16]
  return(result);
 800af7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800af80:	2b00      	cmp	r3, #0
 800af82:	d15f      	bne.n	800b044 <osMessageQueueNew+0xdc>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d05c      	beq.n	800b044 <osMessageQueueNew+0xdc>
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d059      	beq.n	800b044 <osMessageQueueNew+0xdc>
    mem = -1;
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d029      	beq.n	800aff0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d012      	beq.n	800afca <osMessageQueueNew+0x62>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	2b4f      	cmp	r3, #79	; 0x4f
 800afaa:	d90e      	bls.n	800afca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00a      	beq.n	800afca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	695a      	ldr	r2, [r3, #20]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	fb01 f303 	mul.w	r3, r1, r3
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d302      	bcc.n	800afca <osMessageQueueNew+0x62>
        mem = 1;
 800afc4:	2301      	movs	r3, #1
 800afc6:	61bb      	str	r3, [r7, #24]
 800afc8:	e014      	b.n	800aff4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d110      	bne.n	800aff4 <osMessageQueueNew+0x8c>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10c      	bne.n	800aff4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d108      	bne.n	800aff4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d104      	bne.n	800aff4 <osMessageQueueNew+0x8c>
          mem = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	61bb      	str	r3, [r7, #24]
 800afee:	e001      	b.n	800aff4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d10b      	bne.n	800b012 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691a      	ldr	r2, [r3, #16]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	2100      	movs	r1, #0
 800b004:	9100      	str	r1, [sp, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 fa2f 	bl	800b46c <xQueueGenericCreateStatic>
 800b00e:	61f8      	str	r0, [r7, #28]
 800b010:	e008      	b.n	800b024 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d105      	bne.n	800b024 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b018:	2200      	movs	r2, #0
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 fa9d 	bl	800b55c <xQueueGenericCreate>
 800b022:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00c      	beq.n	800b044 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	617b      	str	r3, [r7, #20]
 800b036:	e001      	b.n	800b03c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b03c:	6979      	ldr	r1, [r7, #20]
 800b03e:	69f8      	ldr	r0, [r7, #28]
 800b040:	f001 f9e8 	bl	800c414 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b044:	69fb      	ldr	r3, [r7, #28]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3720      	adds	r7, #32
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	4613      	mov	r3, r2
 800b05e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b064:	2300      	movs	r3, #0
 800b066:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b068:	f3ef 8305 	mrs	r3, IPSR
 800b06c:	617b      	str	r3, [r7, #20]
  return(result);
 800b06e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b070:	2b00      	cmp	r3, #0
 800b072:	d028      	beq.n	800b0c6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d005      	beq.n	800b086 <osMessageQueuePut+0x36>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <osMessageQueuePut+0x36>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d003      	beq.n	800b08e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b086:	f06f 0303 	mvn.w	r3, #3
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e038      	b.n	800b100 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b08e:	2300      	movs	r3, #0
 800b090:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b092:	f107 0210 	add.w	r2, r7, #16
 800b096:	2300      	movs	r3, #0
 800b098:	68b9      	ldr	r1, [r7, #8]
 800b09a:	69b8      	ldr	r0, [r7, #24]
 800b09c:	f000 fcda 	bl	800ba54 <xQueueGenericSendFromISR>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d003      	beq.n	800b0ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b0a6:	f06f 0302 	mvn.w	r3, #2
 800b0aa:	61fb      	str	r3, [r7, #28]
 800b0ac:	e028      	b.n	800b100 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d025      	beq.n	800b100 <osMessageQueuePut+0xb0>
 800b0b4:	4b15      	ldr	r3, [pc, #84]	; (800b10c <osMessageQueuePut+0xbc>)
 800b0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	e01c      	b.n	800b100 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <osMessageQueuePut+0x82>
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d103      	bne.n	800b0da <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b0d2:	f06f 0303 	mvn.w	r3, #3
 800b0d6:	61fb      	str	r3, [r7, #28]
 800b0d8:	e012      	b.n	800b100 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0da:	2300      	movs	r3, #0
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	68b9      	ldr	r1, [r7, #8]
 800b0e0:	69b8      	ldr	r0, [r7, #24]
 800b0e2:	f000 fbb9 	bl	800b858 <xQueueGenericSend>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d009      	beq.n	800b100 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b0f2:	f06f 0301 	mvn.w	r3, #1
 800b0f6:	61fb      	str	r3, [r7, #28]
 800b0f8:	e002      	b.n	800b100 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b0fa:	f06f 0302 	mvn.w	r3, #2
 800b0fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b100:	69fb      	ldr	r3, [r7, #28]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	e000ed04 	.word	0xe000ed04

0800b110 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b126:	f3ef 8305 	mrs	r3, IPSR
 800b12a:	617b      	str	r3, [r7, #20]
  return(result);
 800b12c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d028      	beq.n	800b184 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d005      	beq.n	800b144 <osMessageQueueGet+0x34>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <osMessageQueueGet+0x34>
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b144:	f06f 0303 	mvn.w	r3, #3
 800b148:	61fb      	str	r3, [r7, #28]
 800b14a:	e037      	b.n	800b1bc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b150:	f107 0310 	add.w	r3, r7, #16
 800b154:	461a      	mov	r2, r3
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	69b8      	ldr	r0, [r7, #24]
 800b15a:	f000 ff8f 	bl	800c07c <xQueueReceiveFromISR>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d003      	beq.n	800b16c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b164:	f06f 0302 	mvn.w	r3, #2
 800b168:	61fb      	str	r3, [r7, #28]
 800b16a:	e027      	b.n	800b1bc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d024      	beq.n	800b1bc <osMessageQueueGet+0xac>
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <osMessageQueueGet+0xb8>)
 800b174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	e01b      	b.n	800b1bc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <osMessageQueueGet+0x80>
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d103      	bne.n	800b198 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b190:	f06f 0303 	mvn.w	r3, #3
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	e011      	b.n	800b1bc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	69b8      	ldr	r0, [r7, #24]
 800b19e:	f000 fd81 	bl	800bca4 <xQueueReceive>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d009      	beq.n	800b1bc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b1ae:	f06f 0301 	mvn.w	r3, #1
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	e002      	b.n	800b1bc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b1b6:	f06f 0302 	mvn.w	r3, #2
 800b1ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b1bc:	69fb      	ldr	r3, [r7, #28]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4a07      	ldr	r2, [pc, #28]	; (800b1f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	4a06      	ldr	r2, [pc, #24]	; (800b1fc <vApplicationGetIdleTaskMemory+0x30>)
 800b1e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2280      	movs	r2, #128	; 0x80
 800b1e8:	601a      	str	r2, [r3, #0]
}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	20005928 	.word	0x20005928
 800b1fc:	200059e4 	.word	0x200059e4

0800b200 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4a07      	ldr	r2, [pc, #28]	; (800b22c <vApplicationGetTimerTaskMemory+0x2c>)
 800b210:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4a06      	ldr	r2, [pc, #24]	; (800b230 <vApplicationGetTimerTaskMemory+0x30>)
 800b216:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b21e:	601a      	str	r2, [r3, #0]
}
 800b220:	bf00      	nop
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20005be4 	.word	0x20005be4
 800b230:	20005ca0 	.word	0x20005ca0

0800b234 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f103 0208 	add.w	r2, r3, #8
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f04f 32ff 	mov.w	r2, #4294967295
 800b24c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f103 0208 	add.w	r2, r3, #8
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f103 0208 	add.w	r2, r3, #8
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b28e:	b480      	push	{r7}
 800b290:	b085      	sub	sp, #20
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	601a      	str	r2, [r3, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b085      	sub	sp, #20
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ec:	d103      	bne.n	800b2f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e00c      	b.n	800b310 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	e002      	b.n	800b304 <vListInsert+0x2e>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d2f6      	bcs.n	800b2fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	1c5a      	adds	r2, r3, #1
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	601a      	str	r2, [r3, #0]
}
 800b33c:	bf00      	nop
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	6892      	ldr	r2, [r2, #8]
 800b35e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	6852      	ldr	r2, [r2, #4]
 800b368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d103      	bne.n	800b37c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	1e5a      	subs	r2, r3, #1
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3c6:	f002 fd6d 	bl	800dea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3d6:	fb01 f303 	mul.w	r3, r1, r3
 800b3da:	441a      	add	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	68f9      	ldr	r1, [r7, #12]
 800b3fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3fc:	fb01 f303 	mul.w	r3, r1, r3
 800b400:	441a      	add	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	22ff      	movs	r2, #255	; 0xff
 800b40a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	22ff      	movs	r2, #255	; 0xff
 800b412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d114      	bne.n	800b446 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01a      	beq.n	800b45a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3310      	adds	r3, #16
 800b428:	4618      	mov	r0, r3
 800b42a:	f001 fd13 	bl	800ce54 <xTaskRemoveFromEventList>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d012      	beq.n	800b45a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b434:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <xQueueGenericReset+0xcc>)
 800b436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	e009      	b.n	800b45a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3310      	adds	r3, #16
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fef2 	bl	800b234 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3324      	adds	r3, #36	; 0x24
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff feed 	bl	800b234 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b45a:	f002 fd53 	bl	800df04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b45e:	2301      	movs	r3, #1
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08e      	sub	sp, #56	; 0x38
 800b470:	af02      	add	r7, sp, #8
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <xQueueGenericCreateStatic+0x52>
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <xQueueGenericCreateStatic+0x56>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e000      	b.n	800b4c4 <xQueueGenericCreateStatic+0x58>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	623b      	str	r3, [r7, #32]
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <xQueueGenericCreateStatic+0x7e>
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <xQueueGenericCreateStatic+0x82>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e000      	b.n	800b4f0 <xQueueGenericCreateStatic+0x84>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	61fb      	str	r3, [r7, #28]
}
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b50a:	2350      	movs	r3, #80	; 0x50
 800b50c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b50      	cmp	r3, #80	; 0x50
 800b512:	d00a      	beq.n	800b52a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	61bb      	str	r3, [r7, #24]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b52a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00d      	beq.n	800b552 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b53e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	4613      	mov	r3, r2
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 f83f 	bl	800b5d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b554:	4618      	mov	r0, r3
 800b556:	3730      	adds	r7, #48	; 0x30
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	; 0x28
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	613b      	str	r3, [r7, #16]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	fb02 f303 	mul.w	r3, r2, r3
 800b58e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	3350      	adds	r3, #80	; 0x50
 800b594:	4618      	mov	r0, r3
 800b596:	f002 fda7 	bl	800e0e8 <pvPortMalloc>
 800b59a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d011      	beq.n	800b5c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	3350      	adds	r3, #80	; 0x50
 800b5aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5b4:	79fa      	ldrb	r2, [r7, #7]
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	68b9      	ldr	r1, [r7, #8]
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f000 f805 	bl	800b5d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
	}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3720      	adds	r7, #32
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d103      	bne.n	800b5ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	e002      	b.n	800b5f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5fe:	2101      	movs	r1, #1
 800b600:	69b8      	ldr	r0, [r7, #24]
 800b602:	f7ff fecb 	bl	800b39c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	78fa      	ldrb	r2, [r7, #3]
 800b60a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00e      	beq.n	800b642 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b636:	2300      	movs	r3, #0
 800b638:	2200      	movs	r2, #0
 800b63a:	2100      	movs	r1, #0
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f90b 	bl	800b858 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af00      	add	r7, sp, #0
 800b650:	4603      	mov	r3, r0
 800b652:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b654:	2301      	movs	r3, #1
 800b656:	617b      	str	r3, [r7, #20]
 800b658:	2300      	movs	r3, #0
 800b65a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	461a      	mov	r2, r3
 800b660:	6939      	ldr	r1, [r7, #16]
 800b662:	6978      	ldr	r0, [r7, #20]
 800b664:	f7ff ff7a 	bl	800b55c <xQueueGenericCreate>
 800b668:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff ffd3 	bl	800b616 <prvInitialiseMutex>

		return xNewQueue;
 800b670:	68fb      	ldr	r3, [r7, #12]
	}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b088      	sub	sp, #32
 800b67e:	af02      	add	r7, sp, #8
 800b680:	4603      	mov	r3, r0
 800b682:	6039      	str	r1, [r7, #0]
 800b684:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b686:	2301      	movs	r3, #1
 800b688:	617b      	str	r3, [r7, #20]
 800b68a:	2300      	movs	r3, #0
 800b68c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2200      	movs	r2, #0
 800b696:	6939      	ldr	r1, [r7, #16]
 800b698:	6978      	ldr	r0, [r7, #20]
 800b69a:	f7ff fee7 	bl	800b46c <xQueueGenericCreateStatic>
 800b69e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7ff ffb8 	bl	800b616 <prvInitialiseMutex>

		return xNewQueue;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
	}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b6b0:	b590      	push	{r4, r7, lr}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	60fb      	str	r3, [r7, #12]
}
 800b6d4:	bf00      	nop
 800b6d6:	e7fe      	b.n	800b6d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	689c      	ldr	r4, [r3, #8]
 800b6dc:	f001 fd7c 	bl	800d1d8 <xTaskGetCurrentTaskHandle>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	d111      	bne.n	800b70a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	1e5a      	subs	r2, r3, #1
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d105      	bne.n	800b704 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	6938      	ldr	r0, [r7, #16]
 800b700:	f000 f8aa 	bl	800b858 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b704:	2301      	movs	r3, #1
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e001      	b.n	800b70e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b70e:	697b      	ldr	r3, [r7, #20]
	}
 800b710:	4618      	mov	r0, r3
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	bd90      	pop	{r4, r7, pc}

0800b718 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	60fb      	str	r3, [r7, #12]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	689c      	ldr	r4, [r3, #8]
 800b746:	f001 fd47 	bl	800d1d8 <xTaskGetCurrentTaskHandle>
 800b74a:	4603      	mov	r3, r0
 800b74c:	429c      	cmp	r4, r3
 800b74e:	d107      	bne.n	800b760 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b75a:	2301      	movs	r3, #1
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e00c      	b.n	800b77a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6938      	ldr	r0, [r7, #16]
 800b764:	f000 fb7e 	bl	800be64 <xQueueSemaphoreTake>
 800b768:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d004      	beq.n	800b77a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b77a:	697b      	ldr	r3, [r7, #20]
	}
 800b77c:	4618      	mov	r0, r3
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	bd90      	pop	{r4, r7, pc}

0800b784 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08a      	sub	sp, #40	; 0x28
 800b788:	af02      	add	r7, sp, #8
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10a      	bne.n	800b7ac <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	61bb      	str	r3, [r7, #24]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d90a      	bls.n	800b7ca <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	617b      	str	r3, [r7, #20]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7ff fe49 	bl	800b46c <xQueueGenericCreateStatic>
 800b7da:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b7e8:	69fb      	ldr	r3, [r7, #28]
	}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3720      	adds	r7, #32
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b086      	sub	sp, #24
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	613b      	str	r3, [r7, #16]
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d90a      	bls.n	800b836 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	60fb      	str	r3, [r7, #12]
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b836:	2202      	movs	r2, #2
 800b838:	2100      	movs	r1, #0
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff fe8e 	bl	800b55c <xQueueGenericCreate>
 800b840:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b84e:	697b      	ldr	r3, [r7, #20]
	}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08e      	sub	sp, #56	; 0x38
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
 800b864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b866:	2300      	movs	r3, #0
 800b868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <xQueueGenericSend+0x32>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d103      	bne.n	800b898 <xQueueGenericSend+0x40>
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <xQueueGenericSend+0x44>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <xQueueGenericSend+0x46>
 800b89c:	2300      	movs	r3, #0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10a      	bne.n	800b8b8 <xQueueGenericSend+0x60>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8b4:	bf00      	nop
 800b8b6:	e7fe      	b.n	800b8b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d103      	bne.n	800b8c6 <xQueueGenericSend+0x6e>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d101      	bne.n	800b8ca <xQueueGenericSend+0x72>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e000      	b.n	800b8cc <xQueueGenericSend+0x74>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	623b      	str	r3, [r7, #32]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8e6:	f001 fc87 	bl	800d1f8 <xTaskGetSchedulerState>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <xQueueGenericSend+0x9e>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <xQueueGenericSend+0xa2>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <xQueueGenericSend+0xa4>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <xQueueGenericSend+0xbe>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	61fb      	str	r3, [r7, #28]
}
 800b912:	bf00      	nop
 800b914:	e7fe      	b.n	800b914 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b916:	f002 fac5 	bl	800dea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b922:	429a      	cmp	r2, r3
 800b924:	d302      	bcc.n	800b92c <xQueueGenericSend+0xd4>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d129      	bne.n	800b980 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	68b9      	ldr	r1, [r7, #8]
 800b930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b932:	f000 fc5e 	bl	800c1f2 <prvCopyDataToQueue>
 800b936:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d010      	beq.n	800b962 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	3324      	adds	r3, #36	; 0x24
 800b944:	4618      	mov	r0, r3
 800b946:	f001 fa85 	bl	800ce54 <xTaskRemoveFromEventList>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d013      	beq.n	800b978 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b950:	4b3f      	ldr	r3, [pc, #252]	; (800ba50 <xQueueGenericSend+0x1f8>)
 800b952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	e00a      	b.n	800b978 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d007      	beq.n	800b978 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b968:	4b39      	ldr	r3, [pc, #228]	; (800ba50 <xQueueGenericSend+0x1f8>)
 800b96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b978:	f002 fac4 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e063      	b.n	800ba48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b986:	f002 fabd 	bl	800df04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e05c      	b.n	800ba48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b994:	f107 0314 	add.w	r3, r7, #20
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 fabf 	bl	800cf1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9a2:	f002 faaf 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9a6:	f001 f819 	bl	800c9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9aa:	f002 fa7b 	bl	800dea4 <vPortEnterCritical>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9b4:	b25b      	sxtb	r3, r3
 800b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ba:	d103      	bne.n	800b9c4 <xQueueGenericSend+0x16c>
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9ca:	b25b      	sxtb	r3, r3
 800b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d0:	d103      	bne.n	800b9da <xQueueGenericSend+0x182>
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9da:	f002 fa93 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9de:	1d3a      	adds	r2, r7, #4
 800b9e0:	f107 0314 	add.w	r3, r7, #20
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f001 faae 	bl	800cf48 <xTaskCheckForTimeOut>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d124      	bne.n	800ba3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9f4:	f000 fcf5 	bl	800c3e2 <prvIsQueueFull>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d018      	beq.n	800ba30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	3310      	adds	r3, #16
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 f9d4 	bl	800cdb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba0e:	f000 fc80 	bl	800c312 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba12:	f000 fff1 	bl	800c9f8 <xTaskResumeAll>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f47f af7c 	bne.w	800b916 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba1e:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <xQueueGenericSend+0x1f8>)
 800ba20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	e772      	b.n	800b916 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba32:	f000 fc6e 	bl	800c312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba36:	f000 ffdf 	bl	800c9f8 <xTaskResumeAll>
 800ba3a:	e76c      	b.n	800b916 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba3e:	f000 fc68 	bl	800c312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba42:	f000 ffd9 	bl	800c9f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3738      	adds	r7, #56	; 0x38
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b090      	sub	sp, #64	; 0x40
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10a      	bne.n	800ba82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d103      	bne.n	800ba90 <xQueueGenericSendFromISR+0x3c>
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <xQueueGenericSendFromISR+0x40>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e000      	b.n	800ba96 <xQueueGenericSendFromISR+0x42>
 800ba94:	2300      	movs	r3, #0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10a      	bne.n	800bab0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d103      	bne.n	800babe <xQueueGenericSendFromISR+0x6a>
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <xQueueGenericSendFromISR+0x6e>
 800babe:	2301      	movs	r3, #1
 800bac0:	e000      	b.n	800bac4 <xQueueGenericSendFromISR+0x70>
 800bac2:	2300      	movs	r3, #0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	623b      	str	r3, [r7, #32]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bade:	f002 fac3 	bl	800e068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bae2:	f3ef 8211 	mrs	r2, BASEPRI
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	61fa      	str	r2, [r7, #28]
 800baf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bafa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bafc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d302      	bcc.n	800bb10 <xQueueGenericSendFromISR+0xbc>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d12f      	bne.n	800bb70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	68b9      	ldr	r1, [r7, #8]
 800bb24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb26:	f000 fb64 	bl	800c1f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb32:	d112      	bne.n	800bb5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d016      	beq.n	800bb6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3e:	3324      	adds	r3, #36	; 0x24
 800bb40:	4618      	mov	r0, r3
 800bb42:	f001 f987 	bl	800ce54 <xTaskRemoveFromEventList>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00e      	beq.n	800bb6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	e007      	b.n	800bb6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb5e:	3301      	adds	r3, #1
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	b25a      	sxtb	r2, r3
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bb6e:	e001      	b.n	800bb74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb70:	2300      	movs	r3, #0
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3740      	adds	r7, #64	; 0x40
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b08e      	sub	sp, #56	; 0x38
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	623b      	str	r3, [r7, #32]
}
 800bbb0:	bf00      	nop
 800bbb2:	e7fe      	b.n	800bbb2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	61fb      	str	r3, [r7, #28]
}
 800bbce:	bf00      	nop
 800bbd0:	e7fe      	b.n	800bbd0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d103      	bne.n	800bbe2 <xQueueGiveFromISR+0x58>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <xQueueGiveFromISR+0x5c>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e000      	b.n	800bbe8 <xQueueGiveFromISR+0x5e>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	61bb      	str	r3, [r7, #24]
}
 800bbfe:	bf00      	nop
 800bc00:	e7fe      	b.n	800bc00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc02:	f002 fa31 	bl	800e068 <vPortValidateInterruptPriority>
	__asm volatile
 800bc06:	f3ef 8211 	mrs	r2, BASEPRI
 800bc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	617a      	str	r2, [r7, #20]
 800bc1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bc1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d22b      	bcs.n	800bc8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4c:	d112      	bne.n	800bc74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d016      	beq.n	800bc84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	3324      	adds	r3, #36	; 0x24
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f001 f8fa 	bl	800ce54 <xTaskRemoveFromEventList>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00e      	beq.n	800bc84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00b      	beq.n	800bc84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	e007      	b.n	800bc84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc78:	3301      	adds	r3, #1
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	b25a      	sxtb	r2, r3
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc84:	2301      	movs	r3, #1
 800bc86:	637b      	str	r3, [r7, #52]	; 0x34
 800bc88:	e001      	b.n	800bc8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f383 8811 	msr	BASEPRI, r3
}
 800bc98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3738      	adds	r7, #56	; 0x38
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08c      	sub	sp, #48	; 0x30
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <xQueueReceive+0x30>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	623b      	str	r3, [r7, #32]
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d103      	bne.n	800bce2 <xQueueReceive+0x3e>
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <xQueueReceive+0x42>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e000      	b.n	800bce8 <xQueueReceive+0x44>
 800bce6:	2300      	movs	r3, #0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <xQueueReceive+0x5e>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	61fb      	str	r3, [r7, #28]
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd02:	f001 fa79 	bl	800d1f8 <xTaskGetSchedulerState>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <xQueueReceive+0x6e>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <xQueueReceive+0x72>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e000      	b.n	800bd18 <xQueueReceive+0x74>
 800bd16:	2300      	movs	r3, #0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <xQueueReceive+0x8e>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	61bb      	str	r3, [r7, #24]
}
 800bd2e:	bf00      	nop
 800bd30:	e7fe      	b.n	800bd30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd32:	f002 f8b7 	bl	800dea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d01f      	beq.n	800bd82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd46:	f000 fabe 	bl	800c2c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	1e5a      	subs	r2, r3, #1
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00f      	beq.n	800bd7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	3310      	adds	r3, #16
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f001 f878 	bl	800ce54 <xTaskRemoveFromEventList>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d007      	beq.n	800bd7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd6a:	4b3d      	ldr	r3, [pc, #244]	; (800be60 <xQueueReceive+0x1bc>)
 800bd6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd7a:	f002 f8c3 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e069      	b.n	800be56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d103      	bne.n	800bd90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd88:	f002 f8bc 	bl	800df04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	e062      	b.n	800be56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d106      	bne.n	800bda4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd96:	f107 0310 	add.w	r3, r7, #16
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f001 f8be 	bl	800cf1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bda4:	f002 f8ae 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bda8:	f000 fe18 	bl	800c9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdac:	f002 f87a 	bl	800dea4 <vPortEnterCritical>
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdb6:	b25b      	sxtb	r3, r3
 800bdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbc:	d103      	bne.n	800bdc6 <xQueueReceive+0x122>
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd2:	d103      	bne.n	800bddc <xQueueReceive+0x138>
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bddc:	f002 f892 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bde0:	1d3a      	adds	r2, r7, #4
 800bde2:	f107 0310 	add.w	r3, r7, #16
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 f8ad 	bl	800cf48 <xTaskCheckForTimeOut>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d123      	bne.n	800be3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdf6:	f000 fade 	bl	800c3b6 <prvIsQueueEmpty>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d017      	beq.n	800be30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	3324      	adds	r3, #36	; 0x24
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	4611      	mov	r1, r2
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 ffd3 	bl	800cdb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be10:	f000 fa7f 	bl	800c312 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be14:	f000 fdf0 	bl	800c9f8 <xTaskResumeAll>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d189      	bne.n	800bd32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800be1e:	4b10      	ldr	r3, [pc, #64]	; (800be60 <xQueueReceive+0x1bc>)
 800be20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	e780      	b.n	800bd32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be32:	f000 fa6e 	bl	800c312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be36:	f000 fddf 	bl	800c9f8 <xTaskResumeAll>
 800be3a:	e77a      	b.n	800bd32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be3e:	f000 fa68 	bl	800c312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be42:	f000 fdd9 	bl	800c9f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be48:	f000 fab5 	bl	800c3b6 <prvIsQueueEmpty>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f43f af6f 	beq.w	800bd32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be56:	4618      	mov	r0, r3
 800be58:	3730      	adds	r7, #48	; 0x30
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08e      	sub	sp, #56	; 0x38
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be6e:	2300      	movs	r3, #0
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be76:	2300      	movs	r3, #0
 800be78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10a      	bne.n	800be96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	623b      	str	r3, [r7, #32]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00a      	beq.n	800beb4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	61fb      	str	r3, [r7, #28]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beb4:	f001 f9a0 	bl	800d1f8 <xTaskGetSchedulerState>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d102      	bne.n	800bec4 <xQueueSemaphoreTake+0x60>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <xQueueSemaphoreTake+0x64>
 800bec4:	2301      	movs	r3, #1
 800bec6:	e000      	b.n	800beca <xQueueSemaphoreTake+0x66>
 800bec8:	2300      	movs	r3, #0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	61bb      	str	r3, [r7, #24]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bee4:	f001 ffde 	bl	800dea4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d024      	beq.n	800bf3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	1e5a      	subs	r2, r3, #1
 800bef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf04:	f001 faee 	bl	800d4e4 <pvTaskIncrementMutexHeldCount>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00f      	beq.n	800bf36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	3310      	adds	r3, #16
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 ff9a 	bl	800ce54 <xTaskRemoveFromEventList>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d007      	beq.n	800bf36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf26:	4b54      	ldr	r3, [pc, #336]	; (800c078 <xQueueSemaphoreTake+0x214>)
 800bf28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf36:	f001 ffe5 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e097      	b.n	800c06e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d111      	bne.n	800bf68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	617b      	str	r3, [r7, #20]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf60:	f001 ffd0 	bl	800df04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf64:	2300      	movs	r3, #0
 800bf66:	e082      	b.n	800c06e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf6e:	f107 030c 	add.w	r3, r7, #12
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 ffd2 	bl	800cf1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf7c:	f001 ffc2 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf80:	f000 fd2c 	bl	800c9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf84:	f001 ff8e 	bl	800dea4 <vPortEnterCritical>
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf94:	d103      	bne.n	800bf9e <xQueueSemaphoreTake+0x13a>
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfa4:	b25b      	sxtb	r3, r3
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfaa:	d103      	bne.n	800bfb4 <xQueueSemaphoreTake+0x150>
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfb4:	f001 ffa6 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfb8:	463a      	mov	r2, r7
 800bfba:	f107 030c 	add.w	r3, r7, #12
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 ffc1 	bl	800cf48 <xTaskCheckForTimeOut>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d132      	bne.n	800c032 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfce:	f000 f9f2 	bl	800c3b6 <prvIsQueueEmpty>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d026      	beq.n	800c026 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bfe0:	f001 ff60 	bl	800dea4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 f923 	bl	800d234 <xTaskPriorityInherit>
 800bfee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bff0:	f001 ff88 	bl	800df04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	3324      	adds	r3, #36	; 0x24
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	4611      	mov	r1, r2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fed9 	bl	800cdb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c004:	f000 f985 	bl	800c312 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c008:	f000 fcf6 	bl	800c9f8 <xTaskResumeAll>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f47f af68 	bne.w	800bee4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c014:	4b18      	ldr	r3, [pc, #96]	; (800c078 <xQueueSemaphoreTake+0x214>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	e75e      	b.n	800bee4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c028:	f000 f973 	bl	800c312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c02c:	f000 fce4 	bl	800c9f8 <xTaskResumeAll>
 800c030:	e758      	b.n	800bee4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c034:	f000 f96d 	bl	800c312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c038:	f000 fcde 	bl	800c9f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c03c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c03e:	f000 f9ba 	bl	800c3b6 <prvIsQueueEmpty>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	f43f af4d 	beq.w	800bee4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00d      	beq.n	800c06c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c050:	f001 ff28 	bl	800dea4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c056:	f000 f8b4 	bl	800c1c2 <prvGetDisinheritPriorityAfterTimeout>
 800c05a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c062:	4618      	mov	r0, r3
 800c064:	f001 f9bc 	bl	800d3e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c068:	f001 ff4c 	bl	800df04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c06c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3738      	adds	r7, #56	; 0x38
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08e      	sub	sp, #56	; 0x38
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d10a      	bne.n	800c0a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	623b      	str	r3, [r7, #32]
}
 800c0a4:	bf00      	nop
 800c0a6:	e7fe      	b.n	800c0a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d103      	bne.n	800c0b6 <xQueueReceiveFromISR+0x3a>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <xQueueReceiveFromISR+0x3e>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <xQueueReceiveFromISR+0x40>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10a      	bne.n	800c0d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	61fb      	str	r3, [r7, #28]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d6:	f001 ffc7 	bl	800e068 <vPortValidateInterruptPriority>
	__asm volatile
 800c0da:	f3ef 8211 	mrs	r2, BASEPRI
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	61ba      	str	r2, [r7, #24]
 800c0f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d02f      	beq.n	800c162 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c10c:	68b9      	ldr	r1, [r7, #8]
 800c10e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c110:	f000 f8d9 	bl	800c2c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	1e5a      	subs	r2, r3, #1
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c11c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c124:	d112      	bne.n	800c14c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d016      	beq.n	800c15c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	3310      	adds	r3, #16
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fe8e 	bl	800ce54 <xTaskRemoveFromEventList>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00e      	beq.n	800c15c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00b      	beq.n	800c15c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	e007      	b.n	800c15c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c150:	3301      	adds	r3, #1
 800c152:	b2db      	uxtb	r3, r3
 800c154:	b25a      	sxtb	r2, r3
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c15c:	2301      	movs	r3, #1
 800c15e:	637b      	str	r3, [r7, #52]	; 0x34
 800c160:	e001      	b.n	800c166 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c162:	2300      	movs	r3, #0
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f383 8811 	msr	BASEPRI, r3
}
 800c170:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c174:	4618      	mov	r0, r3
 800c176:	3738      	adds	r7, #56	; 0x38
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10a      	bne.n	800c1a4 <vQueueDelete+0x28>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	60bb      	str	r3, [r7, #8]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f95f 	bl	800c468 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f002 f863 	bl	800e280 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b085      	sub	sp, #20
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d006      	beq.n	800c1e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	e001      	b.n	800c1e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
	}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b086      	sub	sp, #24
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c206:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10d      	bne.n	800c22c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d14d      	bne.n	800c2b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f001 f871 	bl	800d304 <xTaskPriorityDisinherit>
 800c222:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	609a      	str	r2, [r3, #8]
 800c22a:	e043      	b.n	800c2b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d119      	bne.n	800c266 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6858      	ldr	r0, [r3, #4]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	461a      	mov	r2, r3
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	f00c fefe 	bl	801903e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24a:	441a      	add	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d32b      	bcc.n	800c2b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	605a      	str	r2, [r3, #4]
 800c264:	e026      	b.n	800c2b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	68d8      	ldr	r0, [r3, #12]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26e:	461a      	mov	r2, r3
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	f00c fee4 	bl	801903e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	68da      	ldr	r2, [r3, #12]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27e:	425b      	negs	r3, r3
 800c280:	441a      	add	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	68da      	ldr	r2, [r3, #12]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d207      	bcs.n	800c2a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	689a      	ldr	r2, [r3, #8]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	425b      	negs	r3, r3
 800c29c:	441a      	add	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d105      	bne.n	800c2b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2bc:	697b      	ldr	r3, [r7, #20]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d018      	beq.n	800c30a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68da      	ldr	r2, [r3, #12]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e0:	441a      	add	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d303      	bcc.n	800c2fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68d9      	ldr	r1, [r3, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c302:	461a      	mov	r2, r3
 800c304:	6838      	ldr	r0, [r7, #0]
 800c306:	f00c fe9a 	bl	801903e <memcpy>
	}
}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c31a:	f001 fdc3 	bl	800dea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c324:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c326:	e011      	b.n	800c34c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d012      	beq.n	800c356 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	3324      	adds	r3, #36	; 0x24
 800c334:	4618      	mov	r0, r3
 800c336:	f000 fd8d 	bl	800ce54 <xTaskRemoveFromEventList>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c340:	f000 fe64 	bl	800d00c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	3b01      	subs	r3, #1
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	dce9      	bgt.n	800c328 <prvUnlockQueue+0x16>
 800c354:	e000      	b.n	800c358 <prvUnlockQueue+0x46>
					break;
 800c356:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	22ff      	movs	r2, #255	; 0xff
 800c35c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c360:	f001 fdd0 	bl	800df04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c364:	f001 fd9e 	bl	800dea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c36e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c370:	e011      	b.n	800c396 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d012      	beq.n	800c3a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	3310      	adds	r3, #16
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 fd68 	bl	800ce54 <xTaskRemoveFromEventList>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c38a:	f000 fe3f 	bl	800d00c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	3b01      	subs	r3, #1
 800c392:	b2db      	uxtb	r3, r3
 800c394:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dce9      	bgt.n	800c372 <prvUnlockQueue+0x60>
 800c39e:	e000      	b.n	800c3a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	22ff      	movs	r2, #255	; 0xff
 800c3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c3aa:	f001 fdab 	bl	800df04 <vPortExitCritical>
}
 800c3ae:	bf00      	nop
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3be:	f001 fd71 	bl	800dea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d102      	bne.n	800c3d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	60fb      	str	r3, [r7, #12]
 800c3ce:	e001      	b.n	800c3d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3d4:	f001 fd96 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3ea:	f001 fd5b 	bl	800dea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d102      	bne.n	800c400 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e001      	b.n	800c404 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c400:	2300      	movs	r3, #0
 800c402:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c404:	f001 fd7e 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800c408:	68fb      	ldr	r3, [r7, #12]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c41e:	2300      	movs	r3, #0
 800c420:	60fb      	str	r3, [r7, #12]
 800c422:	e014      	b.n	800c44e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c424:	4a0f      	ldr	r2, [pc, #60]	; (800c464 <vQueueAddToRegistry+0x50>)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10b      	bne.n	800c448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c430:	490c      	ldr	r1, [pc, #48]	; (800c464 <vQueueAddToRegistry+0x50>)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c43a:	4a0a      	ldr	r2, [pc, #40]	; (800c464 <vQueueAddToRegistry+0x50>)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	4413      	add	r3, r2
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c446:	e006      	b.n	800c456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3301      	adds	r3, #1
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b07      	cmp	r3, #7
 800c452:	d9e7      	bls.n	800c424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	200060a0 	.word	0x200060a0

0800c468 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	e016      	b.n	800c4a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c476:	4a10      	ldr	r2, [pc, #64]	; (800c4b8 <vQueueUnregisterQueue+0x50>)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	4413      	add	r3, r2
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d10b      	bne.n	800c49e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c486:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <vQueueUnregisterQueue+0x50>)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2100      	movs	r1, #0
 800c48c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c490:	4a09      	ldr	r2, [pc, #36]	; (800c4b8 <vQueueUnregisterQueue+0x50>)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	4413      	add	r3, r2
 800c498:	2200      	movs	r2, #0
 800c49a:	605a      	str	r2, [r3, #4]
				break;
 800c49c:	e006      	b.n	800c4ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b07      	cmp	r3, #7
 800c4a8:	d9e5      	bls.n	800c476 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c4aa:	bf00      	nop
 800c4ac:	bf00      	nop
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	200060a0 	.word	0x200060a0

0800c4bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c4cc:	f001 fcea 	bl	800dea4 <vPortEnterCritical>
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4d6:	b25b      	sxtb	r3, r3
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4dc:	d103      	bne.n	800c4e6 <vQueueWaitForMessageRestricted+0x2a>
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4ec:	b25b      	sxtb	r3, r3
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d103      	bne.n	800c4fc <vQueueWaitForMessageRestricted+0x40>
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4fc:	f001 fd02 	bl	800df04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	3324      	adds	r3, #36	; 0x24
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	4618      	mov	r0, r3
 800c512:	f000 fc73 	bl	800cdfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c516:	6978      	ldr	r0, [r7, #20]
 800c518:	f7ff fefb 	bl	800c312 <prvUnlockQueue>
	}
 800c51c:	bf00      	nop
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c524:	b580      	push	{r7, lr}
 800c526:	b08e      	sub	sp, #56	; 0x38
 800c528:	af04      	add	r7, sp, #16
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	623b      	str	r3, [r7, #32]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <xTaskCreateStatic+0x46>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	61fb      	str	r3, [r7, #28]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c56a:	23bc      	movs	r3, #188	; 0xbc
 800c56c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	2bbc      	cmp	r3, #188	; 0xbc
 800c572:	d00a      	beq.n	800c58a <xTaskCreateStatic+0x66>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	61bb      	str	r3, [r7, #24]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c58a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d01e      	beq.n	800c5d0 <xTaskCreateStatic+0xac>
 800c592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01b      	beq.n	800c5d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9303      	str	r3, [sp, #12]
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	9302      	str	r3, [sp, #8]
 800c5b2:	f107 0314 	add.w	r3, r7, #20
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 f850 	bl	800c668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5ca:	f000 f8f3 	bl	800c7b4 <prvAddNewTaskToReadyList>
 800c5ce:	e001      	b.n	800c5d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c5d4:	697b      	ldr	r3, [r7, #20]
	}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3728      	adds	r7, #40	; 0x28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b08c      	sub	sp, #48	; 0x30
 800c5e2:	af04      	add	r7, sp, #16
 800c5e4:	60f8      	str	r0, [r7, #12]
 800c5e6:	60b9      	str	r1, [r7, #8]
 800c5e8:	603b      	str	r3, [r7, #0]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5ee:	88fb      	ldrh	r3, [r7, #6]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f001 fd78 	bl	800e0e8 <pvPortMalloc>
 800c5f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00e      	beq.n	800c61e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c600:	20bc      	movs	r0, #188	; 0xbc
 800c602:	f001 fd71 	bl	800e0e8 <pvPortMalloc>
 800c606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	631a      	str	r2, [r3, #48]	; 0x30
 800c614:	e005      	b.n	800c622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c616:	6978      	ldr	r0, [r7, #20]
 800c618:	f001 fe32 	bl	800e280 <vPortFree>
 800c61c:	e001      	b.n	800c622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d017      	beq.n	800c658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c630:	88fa      	ldrh	r2, [r7, #6]
 800c632:	2300      	movs	r3, #0
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	9301      	str	r3, [sp, #4]
 800c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 f80e 	bl	800c668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c64c:	69f8      	ldr	r0, [r7, #28]
 800c64e:	f000 f8b1 	bl	800c7b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c652:	2301      	movs	r3, #1
 800c654:	61bb      	str	r3, [r7, #24]
 800c656:	e002      	b.n	800c65e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c658:	f04f 33ff 	mov.w	r3, #4294967295
 800c65c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c65e:	69bb      	ldr	r3, [r7, #24]
	}
 800c660:	4618      	mov	r0, r3
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	461a      	mov	r2, r3
 800c680:	21a5      	movs	r1, #165	; 0xa5
 800c682:	f00c fd04 	bl	801908e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c690:	3b01      	subs	r3, #1
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4413      	add	r3, r2
 800c696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	f023 0307 	bic.w	r3, r3, #7
 800c69e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	617b      	str	r3, [r7, #20]
}
 800c6bc:	bf00      	nop
 800c6be:	e7fe      	b.n	800c6be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01f      	beq.n	800c706 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	e012      	b.n	800c6f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	7819      	ldrb	r1, [r3, #0]
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	4413      	add	r3, r2
 800c6da:	3334      	adds	r3, #52	; 0x34
 800c6dc:	460a      	mov	r2, r1
 800c6de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	61fb      	str	r3, [r7, #28]
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	2b0f      	cmp	r3, #15
 800c6f6:	d9e9      	bls.n	800c6cc <prvInitialiseNewTask+0x64>
 800c6f8:	e000      	b.n	800c6fc <prvInitialiseNewTask+0x94>
			{
				break;
 800c6fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c704:	e003      	b.n	800c70e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	2b37      	cmp	r3, #55	; 0x37
 800c712:	d901      	bls.n	800c718 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c714:	2337      	movs	r3, #55	; 0x37
 800c716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	2200      	movs	r2, #0
 800c728:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	3304      	adds	r3, #4
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fe fda0 	bl	800b274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c736:	3318      	adds	r3, #24
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fe fd9b 	bl	800b274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	3354      	adds	r3, #84	; 0x54
 800c768:	2260      	movs	r2, #96	; 0x60
 800c76a:	2100      	movs	r1, #0
 800c76c:	4618      	mov	r0, r3
 800c76e:	f00c fc8e 	bl	801908e <memset>
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	4a0c      	ldr	r2, [pc, #48]	; (800c7a8 <prvInitialiseNewTask+0x140>)
 800c776:	659a      	str	r2, [r3, #88]	; 0x58
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	4a0c      	ldr	r2, [pc, #48]	; (800c7ac <prvInitialiseNewTask+0x144>)
 800c77c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	4a0b      	ldr	r2, [pc, #44]	; (800c7b0 <prvInitialiseNewTask+0x148>)
 800c782:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	68f9      	ldr	r1, [r7, #12]
 800c788:	69b8      	ldr	r0, [r7, #24]
 800c78a:	f001 fa61 	bl	800dc50 <pxPortInitialiseStack>
 800c78e:	4602      	mov	r2, r0
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c79e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7a0:	bf00      	nop
 800c7a2:	3720      	adds	r7, #32
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	0801d530 	.word	0x0801d530
 800c7ac:	0801d550 	.word	0x0801d550
 800c7b0:	0801d510 	.word	0x0801d510

0800c7b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7bc:	f001 fb72 	bl	800dea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c7c0:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	4a2c      	ldr	r2, [pc, #176]	; (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c7ca:	4b2c      	ldr	r3, [pc, #176]	; (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c7d2:	4a2a      	ldr	r2, [pc, #168]	; (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c7d8:	4b27      	ldr	r3, [pc, #156]	; (800c878 <prvAddNewTaskToReadyList+0xc4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d110      	bne.n	800c802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7e0:	f000 fc38 	bl	800d054 <prvInitialiseTaskLists>
 800c7e4:	e00d      	b.n	800c802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7e6:	4b26      	ldr	r3, [pc, #152]	; (800c880 <prvAddNewTaskToReadyList+0xcc>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d109      	bne.n	800c802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7ee:	4b23      	ldr	r3, [pc, #140]	; (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d802      	bhi.n	800c802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7fc:	4a1f      	ldr	r2, [pc, #124]	; (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c802:	4b20      	ldr	r3, [pc, #128]	; (800c884 <prvAddNewTaskToReadyList+0xd0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3301      	adds	r3, #1
 800c808:	4a1e      	ldr	r2, [pc, #120]	; (800c884 <prvAddNewTaskToReadyList+0xd0>)
 800c80a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c80c:	4b1d      	ldr	r3, [pc, #116]	; (800c884 <prvAddNewTaskToReadyList+0xd0>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c818:	4b1b      	ldr	r3, [pc, #108]	; (800c888 <prvAddNewTaskToReadyList+0xd4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d903      	bls.n	800c828 <prvAddNewTaskToReadyList+0x74>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	4a18      	ldr	r2, [pc, #96]	; (800c888 <prvAddNewTaskToReadyList+0xd4>)
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4a15      	ldr	r2, [pc, #84]	; (800c88c <prvAddNewTaskToReadyList+0xd8>)
 800c836:	441a      	add	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	3304      	adds	r3, #4
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe fd25 	bl	800b28e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c844:	f001 fb5e 	bl	800df04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c848:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <prvAddNewTaskToReadyList+0xcc>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00e      	beq.n	800c86e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c850:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <prvAddNewTaskToReadyList+0xc8>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d207      	bcs.n	800c86e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c85e:	4b0c      	ldr	r3, [pc, #48]	; (800c890 <prvAddNewTaskToReadyList+0xdc>)
 800c860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c86e:	bf00      	nop
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	200065b4 	.word	0x200065b4
 800c87c:	200060e0 	.word	0x200060e0
 800c880:	200065c0 	.word	0x200065c0
 800c884:	200065d0 	.word	0x200065d0
 800c888:	200065bc 	.word	0x200065bc
 800c88c:	200060e4 	.word	0x200060e4
 800c890:	e000ed04 	.word	0xe000ed04

0800c894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d017      	beq.n	800c8d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8a6:	4b13      	ldr	r3, [pc, #76]	; (800c8f4 <vTaskDelay+0x60>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <vTaskDelay+0x30>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	60bb      	str	r3, [r7, #8]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c8c4:	f000 f88a 	bl	800c9dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fe1e 	bl	800d50c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c8d0:	f000 f892 	bl	800c9f8 <xTaskResumeAll>
 800c8d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d107      	bne.n	800c8ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c8dc:	4b06      	ldr	r3, [pc, #24]	; (800c8f8 <vTaskDelay+0x64>)
 800c8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8ec:	bf00      	nop
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	200065dc 	.word	0x200065dc
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08a      	sub	sp, #40	; 0x28
 800c900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c90a:	463a      	mov	r2, r7
 800c90c:	1d39      	adds	r1, r7, #4
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4618      	mov	r0, r3
 800c914:	f7fe fc5a 	bl	800b1cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	9202      	str	r2, [sp, #8]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	2300      	movs	r3, #0
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	2300      	movs	r3, #0
 800c928:	460a      	mov	r2, r1
 800c92a:	4924      	ldr	r1, [pc, #144]	; (800c9bc <vTaskStartScheduler+0xc0>)
 800c92c:	4824      	ldr	r0, [pc, #144]	; (800c9c0 <vTaskStartScheduler+0xc4>)
 800c92e:	f7ff fdf9 	bl	800c524 <xTaskCreateStatic>
 800c932:	4603      	mov	r3, r0
 800c934:	4a23      	ldr	r2, [pc, #140]	; (800c9c4 <vTaskStartScheduler+0xc8>)
 800c936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c938:	4b22      	ldr	r3, [pc, #136]	; (800c9c4 <vTaskStartScheduler+0xc8>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c940:	2301      	movs	r3, #1
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e001      	b.n	800c94a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d102      	bne.n	800c956 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c950:	f000 fe30 	bl	800d5b4 <xTimerCreateTimerTask>
 800c954:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d11b      	bne.n	800c994 <vTaskStartScheduler+0x98>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	613b      	str	r3, [r7, #16]
}
 800c96e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c970:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <vTaskStartScheduler+0xcc>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3354      	adds	r3, #84	; 0x54
 800c976:	4a15      	ldr	r2, [pc, #84]	; (800c9cc <vTaskStartScheduler+0xd0>)
 800c978:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c97a:	4b15      	ldr	r3, [pc, #84]	; (800c9d0 <vTaskStartScheduler+0xd4>)
 800c97c:	f04f 32ff 	mov.w	r2, #4294967295
 800c980:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c982:	4b14      	ldr	r3, [pc, #80]	; (800c9d4 <vTaskStartScheduler+0xd8>)
 800c984:	2201      	movs	r2, #1
 800c986:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c988:	4b13      	ldr	r3, [pc, #76]	; (800c9d8 <vTaskStartScheduler+0xdc>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c98e:	f001 f9e7 	bl	800dd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c992:	e00e      	b.n	800c9b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99a:	d10a      	bne.n	800c9b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	60fb      	str	r3, [r7, #12]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <vTaskStartScheduler+0xb4>
}
 800c9b2:	bf00      	nop
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	0801a788 	.word	0x0801a788
 800c9c0:	0800d025 	.word	0x0800d025
 800c9c4:	200065d8 	.word	0x200065d8
 800c9c8:	200060e0 	.word	0x200060e0
 800c9cc:	2000016c 	.word	0x2000016c
 800c9d0:	200065d4 	.word	0x200065d4
 800c9d4:	200065c0 	.word	0x200065c0
 800c9d8:	200065b8 	.word	0x200065b8

0800c9dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c9e0:	4b04      	ldr	r3, [pc, #16]	; (800c9f4 <vTaskSuspendAll+0x18>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	4a03      	ldr	r2, [pc, #12]	; (800c9f4 <vTaskSuspendAll+0x18>)
 800c9e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c9ea:	bf00      	nop
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	200065dc 	.word	0x200065dc

0800c9f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca06:	4b42      	ldr	r3, [pc, #264]	; (800cb10 <xTaskResumeAll+0x118>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10a      	bne.n	800ca24 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	603b      	str	r3, [r7, #0]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca24:	f001 fa3e 	bl	800dea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca28:	4b39      	ldr	r3, [pc, #228]	; (800cb10 <xTaskResumeAll+0x118>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	4a38      	ldr	r2, [pc, #224]	; (800cb10 <xTaskResumeAll+0x118>)
 800ca30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca32:	4b37      	ldr	r3, [pc, #220]	; (800cb10 <xTaskResumeAll+0x118>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d162      	bne.n	800cb00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca3a:	4b36      	ldr	r3, [pc, #216]	; (800cb14 <xTaskResumeAll+0x11c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d05e      	beq.n	800cb00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca42:	e02f      	b.n	800caa4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca44:	4b34      	ldr	r3, [pc, #208]	; (800cb18 <xTaskResumeAll+0x120>)
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3318      	adds	r3, #24
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe fc79 	bl	800b348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fc74 	bl	800b348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca64:	4b2d      	ldr	r3, [pc, #180]	; (800cb1c <xTaskResumeAll+0x124>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d903      	bls.n	800ca74 <xTaskResumeAll+0x7c>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	4a2a      	ldr	r2, [pc, #168]	; (800cb1c <xTaskResumeAll+0x124>)
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca78:	4613      	mov	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4a27      	ldr	r2, [pc, #156]	; (800cb20 <xTaskResumeAll+0x128>)
 800ca82:	441a      	add	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	f7fe fbff 	bl	800b28e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca94:	4b23      	ldr	r3, [pc, #140]	; (800cb24 <xTaskResumeAll+0x12c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d302      	bcc.n	800caa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca9e:	4b22      	ldr	r3, [pc, #136]	; (800cb28 <xTaskResumeAll+0x130>)
 800caa0:	2201      	movs	r2, #1
 800caa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caa4:	4b1c      	ldr	r3, [pc, #112]	; (800cb18 <xTaskResumeAll+0x120>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1cb      	bne.n	800ca44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cab2:	f000 fb71 	bl	800d198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cab6:	4b1d      	ldr	r3, [pc, #116]	; (800cb2c <xTaskResumeAll+0x134>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d010      	beq.n	800cae4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cac2:	f000 f859 	bl	800cb78 <xTaskIncrementTick>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cacc:	4b16      	ldr	r3, [pc, #88]	; (800cb28 <xTaskResumeAll+0x130>)
 800cace:	2201      	movs	r2, #1
 800cad0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1f1      	bne.n	800cac2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cade:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <xTaskResumeAll+0x134>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cae4:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <xTaskResumeAll+0x130>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d009      	beq.n	800cb00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800caec:	2301      	movs	r3, #1
 800caee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800caf0:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <xTaskResumeAll+0x138>)
 800caf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf6:	601a      	str	r2, [r3, #0]
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb00:	f001 fa00 	bl	800df04 <vPortExitCritical>

	return xAlreadyYielded;
 800cb04:	68bb      	ldr	r3, [r7, #8]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	200065dc 	.word	0x200065dc
 800cb14:	200065b4 	.word	0x200065b4
 800cb18:	20006574 	.word	0x20006574
 800cb1c:	200065bc 	.word	0x200065bc
 800cb20:	200060e4 	.word	0x200060e4
 800cb24:	200060e0 	.word	0x200060e0
 800cb28:	200065c8 	.word	0x200065c8
 800cb2c:	200065c4 	.word	0x200065c4
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb3a:	4b05      	ldr	r3, [pc, #20]	; (800cb50 <xTaskGetTickCount+0x1c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb40:	687b      	ldr	r3, [r7, #4]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	200065b8 	.word	0x200065b8

0800cb54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb5a:	f001 fa85 	bl	800e068 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cb5e:	2300      	movs	r3, #0
 800cb60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cb62:	4b04      	ldr	r3, [pc, #16]	; (800cb74 <xTaskGetTickCountFromISR+0x20>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb68:	683b      	ldr	r3, [r7, #0]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	200065b8 	.word	0x200065b8

0800cb78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb82:	4b4f      	ldr	r3, [pc, #316]	; (800ccc0 <xTaskIncrementTick+0x148>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f040 808f 	bne.w	800ccaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb8c:	4b4d      	ldr	r3, [pc, #308]	; (800ccc4 <xTaskIncrementTick+0x14c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb94:	4a4b      	ldr	r2, [pc, #300]	; (800ccc4 <xTaskIncrementTick+0x14c>)
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d120      	bne.n	800cbe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cba0:	4b49      	ldr	r3, [pc, #292]	; (800ccc8 <xTaskIncrementTick+0x150>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00a      	beq.n	800cbc0 <xTaskIncrementTick+0x48>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	603b      	str	r3, [r7, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	e7fe      	b.n	800cbbe <xTaskIncrementTick+0x46>
 800cbc0:	4b41      	ldr	r3, [pc, #260]	; (800ccc8 <xTaskIncrementTick+0x150>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	4b41      	ldr	r3, [pc, #260]	; (800cccc <xTaskIncrementTick+0x154>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a3f      	ldr	r2, [pc, #252]	; (800ccc8 <xTaskIncrementTick+0x150>)
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	4a3f      	ldr	r2, [pc, #252]	; (800cccc <xTaskIncrementTick+0x154>)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	4b3e      	ldr	r3, [pc, #248]	; (800ccd0 <xTaskIncrementTick+0x158>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	4a3d      	ldr	r2, [pc, #244]	; (800ccd0 <xTaskIncrementTick+0x158>)
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	f000 fadb 	bl	800d198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbe2:	4b3c      	ldr	r3, [pc, #240]	; (800ccd4 <xTaskIncrementTick+0x15c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	693a      	ldr	r2, [r7, #16]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d349      	bcc.n	800cc80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbec:	4b36      	ldr	r3, [pc, #216]	; (800ccc8 <xTaskIncrementTick+0x150>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d104      	bne.n	800cc00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbf6:	4b37      	ldr	r3, [pc, #220]	; (800ccd4 <xTaskIncrementTick+0x15c>)
 800cbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfc:	601a      	str	r2, [r3, #0]
					break;
 800cbfe:	e03f      	b.n	800cc80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc00:	4b31      	ldr	r3, [pc, #196]	; (800ccc8 <xTaskIncrementTick+0x150>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d203      	bcs.n	800cc20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc18:	4a2e      	ldr	r2, [pc, #184]	; (800ccd4 <xTaskIncrementTick+0x15c>)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc1e:	e02f      	b.n	800cc80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	3304      	adds	r3, #4
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fe fb8f 	bl	800b348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d004      	beq.n	800cc3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	3318      	adds	r3, #24
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fb86 	bl	800b348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	4b25      	ldr	r3, [pc, #148]	; (800ccd8 <xTaskIncrementTick+0x160>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d903      	bls.n	800cc50 <xTaskIncrementTick+0xd8>
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4c:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <xTaskIncrementTick+0x160>)
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc54:	4613      	mov	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4a1f      	ldr	r2, [pc, #124]	; (800ccdc <xTaskIncrementTick+0x164>)
 800cc5e:	441a      	add	r2, r3
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	3304      	adds	r3, #4
 800cc64:	4619      	mov	r1, r3
 800cc66:	4610      	mov	r0, r2
 800cc68:	f7fe fb11 	bl	800b28e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc70:	4b1b      	ldr	r3, [pc, #108]	; (800cce0 <xTaskIncrementTick+0x168>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d3b8      	bcc.n	800cbec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc7e:	e7b5      	b.n	800cbec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc80:	4b17      	ldr	r3, [pc, #92]	; (800cce0 <xTaskIncrementTick+0x168>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc86:	4915      	ldr	r1, [pc, #84]	; (800ccdc <xTaskIncrementTick+0x164>)
 800cc88:	4613      	mov	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	440b      	add	r3, r1
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d901      	bls.n	800cc9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc9c:	4b11      	ldr	r3, [pc, #68]	; (800cce4 <xTaskIncrementTick+0x16c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d007      	beq.n	800ccb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cca4:	2301      	movs	r3, #1
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	e004      	b.n	800ccb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccaa:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <xTaskIncrementTick+0x170>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	4a0d      	ldr	r2, [pc, #52]	; (800cce8 <xTaskIncrementTick+0x170>)
 800ccb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccb4:	697b      	ldr	r3, [r7, #20]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200065dc 	.word	0x200065dc
 800ccc4:	200065b8 	.word	0x200065b8
 800ccc8:	2000656c 	.word	0x2000656c
 800cccc:	20006570 	.word	0x20006570
 800ccd0:	200065cc 	.word	0x200065cc
 800ccd4:	200065d4 	.word	0x200065d4
 800ccd8:	200065bc 	.word	0x200065bc
 800ccdc:	200060e4 	.word	0x200060e4
 800cce0:	200060e0 	.word	0x200060e0
 800cce4:	200065c8 	.word	0x200065c8
 800cce8:	200065c4 	.word	0x200065c4

0800ccec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccf2:	4b2a      	ldr	r3, [pc, #168]	; (800cd9c <vTaskSwitchContext+0xb0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccfa:	4b29      	ldr	r3, [pc, #164]	; (800cda0 <vTaskSwitchContext+0xb4>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd00:	e046      	b.n	800cd90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd02:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <vTaskSwitchContext+0xb4>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd08:	4b26      	ldr	r3, [pc, #152]	; (800cda4 <vTaskSwitchContext+0xb8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]
 800cd0e:	e010      	b.n	800cd32 <vTaskSwitchContext+0x46>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <vTaskSwitchContext+0x40>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	607b      	str	r3, [r7, #4]
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <vTaskSwitchContext+0x3e>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	491d      	ldr	r1, [pc, #116]	; (800cda8 <vTaskSwitchContext+0xbc>)
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4613      	mov	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	440b      	add	r3, r1
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0e4      	beq.n	800cd10 <vTaskSwitchContext+0x24>
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4a15      	ldr	r2, [pc, #84]	; (800cda8 <vTaskSwitchContext+0xbc>)
 800cd52:	4413      	add	r3, r2
 800cd54:	60bb      	str	r3, [r7, #8]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	605a      	str	r2, [r3, #4]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	3308      	adds	r3, #8
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d104      	bne.n	800cd76 <vTaskSwitchContext+0x8a>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	605a      	str	r2, [r3, #4]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	4a0b      	ldr	r2, [pc, #44]	; (800cdac <vTaskSwitchContext+0xc0>)
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	4a08      	ldr	r2, [pc, #32]	; (800cda4 <vTaskSwitchContext+0xb8>)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd86:	4b09      	ldr	r3, [pc, #36]	; (800cdac <vTaskSwitchContext+0xc0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3354      	adds	r3, #84	; 0x54
 800cd8c:	4a08      	ldr	r2, [pc, #32]	; (800cdb0 <vTaskSwitchContext+0xc4>)
 800cd8e:	6013      	str	r3, [r2, #0]
}
 800cd90:	bf00      	nop
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	200065dc 	.word	0x200065dc
 800cda0:	200065c8 	.word	0x200065c8
 800cda4:	200065bc 	.word	0x200065bc
 800cda8:	200060e4 	.word	0x200060e4
 800cdac:	200060e0 	.word	0x200060e0
 800cdb0:	2000016c 	.word	0x2000016c

0800cdb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	60fb      	str	r3, [r7, #12]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <vTaskPlaceOnEventList+0x44>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3318      	adds	r3, #24
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7fe fa77 	bl	800b2d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cde8:	2101      	movs	r1, #1
 800cdea:	6838      	ldr	r0, [r7, #0]
 800cdec:	f000 fb8e 	bl	800d50c <prvAddCurrentTaskToDelayedList>
}
 800cdf0:	bf00      	nop
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	200060e0 	.word	0x200060e0

0800cdfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	617b      	str	r3, [r7, #20]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3318      	adds	r3, #24
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f7fe fa2e 	bl	800b28e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	68b8      	ldr	r0, [r7, #8]
 800ce42:	f000 fb63 	bl	800d50c <prvAddCurrentTaskToDelayedList>
	}
 800ce46:	bf00      	nop
 800ce48:	3718      	adds	r7, #24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	200060e0 	.word	0x200060e0

0800ce54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60fb      	str	r3, [r7, #12]
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	3318      	adds	r3, #24
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fa5f 	bl	800b348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce8a:	4b1e      	ldr	r3, [pc, #120]	; (800cf04 <xTaskRemoveFromEventList+0xb0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d11d      	bne.n	800cece <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	3304      	adds	r3, #4
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fa56 	bl	800b348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea0:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <xTaskRemoveFromEventList+0xb4>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d903      	bls.n	800ceb0 <xTaskRemoveFromEventList+0x5c>
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	4a16      	ldr	r2, [pc, #88]	; (800cf08 <xTaskRemoveFromEventList+0xb4>)
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4a13      	ldr	r2, [pc, #76]	; (800cf0c <xTaskRemoveFromEventList+0xb8>)
 800cebe:	441a      	add	r2, r3
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f7fe f9e1 	bl	800b28e <vListInsertEnd>
 800cecc:	e005      	b.n	800ceda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3318      	adds	r3, #24
 800ced2:	4619      	mov	r1, r3
 800ced4:	480e      	ldr	r0, [pc, #56]	; (800cf10 <xTaskRemoveFromEventList+0xbc>)
 800ced6:	f7fe f9da 	bl	800b28e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cede:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <xTaskRemoveFromEventList+0xc0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d905      	bls.n	800cef4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cee8:	2301      	movs	r3, #1
 800ceea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <xTaskRemoveFromEventList+0xc4>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e001      	b.n	800cef8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	200065dc 	.word	0x200065dc
 800cf08:	200065bc 	.word	0x200065bc
 800cf0c:	200060e4 	.word	0x200060e4
 800cf10:	20006574 	.word	0x20006574
 800cf14:	200060e0 	.word	0x200060e0
 800cf18:	200065c8 	.word	0x200065c8

0800cf1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf24:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <vTaskInternalSetTimeOutState+0x24>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf2c:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <vTaskInternalSetTimeOutState+0x28>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	605a      	str	r2, [r3, #4]
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	200065cc 	.word	0x200065cc
 800cf44:	200065b8 	.word	0x200065b8

0800cf48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10a      	bne.n	800cf6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	613b      	str	r3, [r7, #16]
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10a      	bne.n	800cf8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	60fb      	str	r3, [r7, #12]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf8a:	f000 ff8b 	bl	800dea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf8e:	4b1d      	ldr	r3, [pc, #116]	; (800d004 <xTaskCheckForTimeOut+0xbc>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	69ba      	ldr	r2, [r7, #24]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa6:	d102      	bne.n	800cfae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	e023      	b.n	800cff6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	4b15      	ldr	r3, [pc, #84]	; (800d008 <xTaskCheckForTimeOut+0xc0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d007      	beq.n	800cfca <xTaskCheckForTimeOut+0x82>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d302      	bcc.n	800cfca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	61fb      	str	r3, [r7, #28]
 800cfc8:	e015      	b.n	800cff6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d20b      	bcs.n	800cfec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	1ad2      	subs	r2, r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff ff9b 	bl	800cf1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	e004      	b.n	800cff6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2200      	movs	r2, #0
 800cff0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cff2:	2301      	movs	r3, #1
 800cff4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cff6:	f000 ff85 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800cffa:	69fb      	ldr	r3, [r7, #28]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	200065b8 	.word	0x200065b8
 800d008:	200065cc 	.word	0x200065cc

0800d00c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d010:	4b03      	ldr	r3, [pc, #12]	; (800d020 <vTaskMissedYield+0x14>)
 800d012:	2201      	movs	r2, #1
 800d014:	601a      	str	r2, [r3, #0]
}
 800d016:	bf00      	nop
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	200065c8 	.word	0x200065c8

0800d024 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d02c:	f000 f852 	bl	800d0d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d030:	4b06      	ldr	r3, [pc, #24]	; (800d04c <prvIdleTask+0x28>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d9f9      	bls.n	800d02c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <prvIdleTask+0x2c>)
 800d03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d048:	e7f0      	b.n	800d02c <prvIdleTask+0x8>
 800d04a:	bf00      	nop
 800d04c:	200060e4 	.word	0x200060e4
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d05a:	2300      	movs	r3, #0
 800d05c:	607b      	str	r3, [r7, #4]
 800d05e:	e00c      	b.n	800d07a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	4613      	mov	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4a12      	ldr	r2, [pc, #72]	; (800d0b4 <prvInitialiseTaskLists+0x60>)
 800d06c:	4413      	add	r3, r2
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe f8e0 	bl	800b234 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	3301      	adds	r3, #1
 800d078:	607b      	str	r3, [r7, #4]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2b37      	cmp	r3, #55	; 0x37
 800d07e:	d9ef      	bls.n	800d060 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d080:	480d      	ldr	r0, [pc, #52]	; (800d0b8 <prvInitialiseTaskLists+0x64>)
 800d082:	f7fe f8d7 	bl	800b234 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d086:	480d      	ldr	r0, [pc, #52]	; (800d0bc <prvInitialiseTaskLists+0x68>)
 800d088:	f7fe f8d4 	bl	800b234 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d08c:	480c      	ldr	r0, [pc, #48]	; (800d0c0 <prvInitialiseTaskLists+0x6c>)
 800d08e:	f7fe f8d1 	bl	800b234 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d092:	480c      	ldr	r0, [pc, #48]	; (800d0c4 <prvInitialiseTaskLists+0x70>)
 800d094:	f7fe f8ce 	bl	800b234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d098:	480b      	ldr	r0, [pc, #44]	; (800d0c8 <prvInitialiseTaskLists+0x74>)
 800d09a:	f7fe f8cb 	bl	800b234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d09e:	4b0b      	ldr	r3, [pc, #44]	; (800d0cc <prvInitialiseTaskLists+0x78>)
 800d0a0:	4a05      	ldr	r2, [pc, #20]	; (800d0b8 <prvInitialiseTaskLists+0x64>)
 800d0a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	; (800d0d0 <prvInitialiseTaskLists+0x7c>)
 800d0a6:	4a05      	ldr	r2, [pc, #20]	; (800d0bc <prvInitialiseTaskLists+0x68>)
 800d0a8:	601a      	str	r2, [r3, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200060e4 	.word	0x200060e4
 800d0b8:	20006544 	.word	0x20006544
 800d0bc:	20006558 	.word	0x20006558
 800d0c0:	20006574 	.word	0x20006574
 800d0c4:	20006588 	.word	0x20006588
 800d0c8:	200065a0 	.word	0x200065a0
 800d0cc:	2000656c 	.word	0x2000656c
 800d0d0:	20006570 	.word	0x20006570

0800d0d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0da:	e019      	b.n	800d110 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0dc:	f000 fee2 	bl	800dea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e0:	4b10      	ldr	r3, [pc, #64]	; (800d124 <prvCheckTasksWaitingTermination+0x50>)
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fe f92b 	bl	800b348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0f2:	4b0d      	ldr	r3, [pc, #52]	; (800d128 <prvCheckTasksWaitingTermination+0x54>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	4a0b      	ldr	r2, [pc, #44]	; (800d128 <prvCheckTasksWaitingTermination+0x54>)
 800d0fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0fc:	4b0b      	ldr	r3, [pc, #44]	; (800d12c <prvCheckTasksWaitingTermination+0x58>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3b01      	subs	r3, #1
 800d102:	4a0a      	ldr	r2, [pc, #40]	; (800d12c <prvCheckTasksWaitingTermination+0x58>)
 800d104:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d106:	f000 fefd 	bl	800df04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f810 	bl	800d130 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d110:	4b06      	ldr	r3, [pc, #24]	; (800d12c <prvCheckTasksWaitingTermination+0x58>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1e1      	bne.n	800d0dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d118:	bf00      	nop
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	20006588 	.word	0x20006588
 800d128:	200065b4 	.word	0x200065b4
 800d12c:	2000659c 	.word	0x2000659c

0800d130 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3354      	adds	r3, #84	; 0x54
 800d13c:	4618      	mov	r0, r3
 800d13e:	f00c f91d 	bl	801937c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d108      	bne.n	800d15e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d150:	4618      	mov	r0, r3
 800d152:	f001 f895 	bl	800e280 <vPortFree>
				vPortFree( pxTCB );
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 f892 	bl	800e280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d15c:	e018      	b.n	800d190 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d164:	2b01      	cmp	r3, #1
 800d166:	d103      	bne.n	800d170 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f001 f889 	bl	800e280 <vPortFree>
	}
 800d16e:	e00f      	b.n	800d190 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d176:	2b02      	cmp	r3, #2
 800d178:	d00a      	beq.n	800d190 <prvDeleteTCB+0x60>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	60fb      	str	r3, [r7, #12]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <prvDeleteTCB+0x5e>
	}
 800d190:	bf00      	nop
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d19e:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <prvResetNextTaskUnblockTime+0x38>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d104      	bne.n	800d1b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	; (800d1d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1b0:	e008      	b.n	800d1c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b2:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <prvResetNextTaskUnblockTime+0x38>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	4a04      	ldr	r2, [pc, #16]	; (800d1d4 <prvResetNextTaskUnblockTime+0x3c>)
 800d1c2:	6013      	str	r3, [r2, #0]
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	2000656c 	.word	0x2000656c
 800d1d4:	200065d4 	.word	0x200065d4

0800d1d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d1de:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <xTaskGetCurrentTaskHandle+0x1c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d1e4:	687b      	ldr	r3, [r7, #4]
	}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	200060e0 	.word	0x200060e0

0800d1f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1fe:	4b0b      	ldr	r3, [pc, #44]	; (800d22c <xTaskGetSchedulerState+0x34>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d102      	bne.n	800d20c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d206:	2301      	movs	r3, #1
 800d208:	607b      	str	r3, [r7, #4]
 800d20a:	e008      	b.n	800d21e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d20c:	4b08      	ldr	r3, [pc, #32]	; (800d230 <xTaskGetSchedulerState+0x38>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d214:	2302      	movs	r3, #2
 800d216:	607b      	str	r3, [r7, #4]
 800d218:	e001      	b.n	800d21e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d21e:	687b      	ldr	r3, [r7, #4]
	}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	200065c0 	.word	0x200065c0
 800d230:	200065dc 	.word	0x200065dc

0800d234 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d240:	2300      	movs	r3, #0
 800d242:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d051      	beq.n	800d2ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24e:	4b2a      	ldr	r3, [pc, #168]	; (800d2f8 <xTaskPriorityInherit+0xc4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	429a      	cmp	r2, r3
 800d256:	d241      	bcs.n	800d2dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	db06      	blt.n	800d26e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d260:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <xTaskPriorityInherit+0xc4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6959      	ldr	r1, [r3, #20]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d276:	4613      	mov	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4a1f      	ldr	r2, [pc, #124]	; (800d2fc <xTaskPriorityInherit+0xc8>)
 800d280:	4413      	add	r3, r2
 800d282:	4299      	cmp	r1, r3
 800d284:	d122      	bne.n	800d2cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	3304      	adds	r3, #4
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe f85c 	bl	800b348 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d290:	4b19      	ldr	r3, [pc, #100]	; (800d2f8 <xTaskPriorityInherit+0xc4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	4b18      	ldr	r3, [pc, #96]	; (800d300 <xTaskPriorityInherit+0xcc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d903      	bls.n	800d2ae <xTaskPriorityInherit+0x7a>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2aa:	4a15      	ldr	r2, [pc, #84]	; (800d300 <xTaskPriorityInherit+0xcc>)
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4a10      	ldr	r2, [pc, #64]	; (800d2fc <xTaskPriorityInherit+0xc8>)
 800d2bc:	441a      	add	r2, r3
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f7fd ffe2 	bl	800b28e <vListInsertEnd>
 800d2ca:	e004      	b.n	800d2d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <xTaskPriorityInherit+0xc4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	60fb      	str	r3, [r7, #12]
 800d2da:	e008      	b.n	800d2ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <xTaskPriorityInherit+0xc4>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d201      	bcs.n	800d2ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	200060e0 	.word	0x200060e0
 800d2fc:	200060e4 	.word	0x200060e4
 800d300:	200065bc 	.word	0x200065bc

0800d304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d056      	beq.n	800d3c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d31a:	4b2e      	ldr	r3, [pc, #184]	; (800d3d4 <xTaskPriorityDisinherit+0xd0>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	429a      	cmp	r2, r3
 800d322:	d00a      	beq.n	800d33a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	60fb      	str	r3, [r7, #12]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10a      	bne.n	800d358 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	60bb      	str	r3, [r7, #8]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d35c:	1e5a      	subs	r2, r3, #1
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d02c      	beq.n	800d3c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d372:	2b00      	cmp	r3, #0
 800d374:	d128      	bne.n	800d3c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	3304      	adds	r3, #4
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fd ffe4 	bl	800b348 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	4b0f      	ldr	r3, [pc, #60]	; (800d3d8 <xTaskPriorityDisinherit+0xd4>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d903      	bls.n	800d3a8 <xTaskPriorityDisinherit+0xa4>
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	4a0c      	ldr	r2, [pc, #48]	; (800d3d8 <xTaskPriorityDisinherit+0xd4>)
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4a09      	ldr	r2, [pc, #36]	; (800d3dc <xTaskPriorityDisinherit+0xd8>)
 800d3b6:	441a      	add	r2, r3
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	4619      	mov	r1, r3
 800d3be:	4610      	mov	r0, r2
 800d3c0:	f7fd ff65 	bl	800b28e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3c8:	697b      	ldr	r3, [r7, #20]
	}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3718      	adds	r7, #24
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	200060e0 	.word	0x200060e0
 800d3d8:	200065bc 	.word	0x200065bc
 800d3dc:	200060e4 	.word	0x200060e4

0800d3e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b088      	sub	sp, #32
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d06a      	beq.n	800d4ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	60fb      	str	r3, [r7, #12]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d902      	bls.n	800d426 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	61fb      	str	r3, [r7, #28]
 800d424:	e002      	b.n	800d42c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d42a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d430:	69fa      	ldr	r2, [r7, #28]
 800d432:	429a      	cmp	r2, r3
 800d434:	d04b      	beq.n	800d4ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d43a:	697a      	ldr	r2, [r7, #20]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d146      	bne.n	800d4ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d440:	4b25      	ldr	r3, [pc, #148]	; (800d4d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	429a      	cmp	r2, r3
 800d448:	d10a      	bne.n	800d460 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	60bb      	str	r3, [r7, #8]
}
 800d45c:	bf00      	nop
 800d45e:	e7fe      	b.n	800d45e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	69fa      	ldr	r2, [r7, #28]
 800d46a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	699b      	ldr	r3, [r3, #24]
 800d470:	2b00      	cmp	r3, #0
 800d472:	db04      	blt.n	800d47e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	6959      	ldr	r1, [r3, #20]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	4613      	mov	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4a13      	ldr	r2, [pc, #76]	; (800d4dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d48e:	4413      	add	r3, r2
 800d490:	4299      	cmp	r1, r3
 800d492:	d11c      	bne.n	800d4ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	3304      	adds	r3, #4
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fd ff55 	bl	800b348 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a2:	4b0f      	ldr	r3, [pc, #60]	; (800d4e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d903      	bls.n	800d4b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ae:	4a0c      	ldr	r2, [pc, #48]	; (800d4e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4b0:	6013      	str	r3, [r2, #0]
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4a07      	ldr	r2, [pc, #28]	; (800d4dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4c0:	441a      	add	r2, r3
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	f7fd fee0 	bl	800b28e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4ce:	bf00      	nop
 800d4d0:	3720      	adds	r7, #32
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	200060e0 	.word	0x200060e0
 800d4dc:	200060e4 	.word	0x200060e4
 800d4e0:	200065bc 	.word	0x200065bc

0800d4e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4e8:	4b07      	ldr	r3, [pc, #28]	; (800d508 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d004      	beq.n	800d4fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d4f0:	4b05      	ldr	r3, [pc, #20]	; (800d508 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4f6:	3201      	adds	r2, #1
 800d4f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d4fa:	4b03      	ldr	r3, [pc, #12]	; (800d508 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
	}
 800d4fe:	4618      	mov	r0, r3
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	200060e0 	.word	0x200060e0

0800d50c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d516:	4b21      	ldr	r3, [pc, #132]	; (800d59c <prvAddCurrentTaskToDelayedList+0x90>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d51c:	4b20      	ldr	r3, [pc, #128]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3304      	adds	r3, #4
 800d522:	4618      	mov	r0, r3
 800d524:	f7fd ff10 	bl	800b348 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52e:	d10a      	bne.n	800d546 <prvAddCurrentTaskToDelayedList+0x3a>
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d007      	beq.n	800d546 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d536:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3304      	adds	r3, #4
 800d53c:	4619      	mov	r1, r3
 800d53e:	4819      	ldr	r0, [pc, #100]	; (800d5a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d540:	f7fd fea5 	bl	800b28e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d544:	e026      	b.n	800d594 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4413      	add	r3, r2
 800d54c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d54e:	4b14      	ldr	r3, [pc, #80]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d209      	bcs.n	800d572 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	4b0f      	ldr	r3, [pc, #60]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3304      	adds	r3, #4
 800d568:	4619      	mov	r1, r3
 800d56a:	4610      	mov	r0, r2
 800d56c:	f7fd feb3 	bl	800b2d6 <vListInsert>
}
 800d570:	e010      	b.n	800d594 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d572:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	4b0a      	ldr	r3, [pc, #40]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3304      	adds	r3, #4
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7fd fea9 	bl	800b2d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d584:	4b0a      	ldr	r3, [pc, #40]	; (800d5b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d202      	bcs.n	800d594 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d58e:	4a08      	ldr	r2, [pc, #32]	; (800d5b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	6013      	str	r3, [r2, #0]
}
 800d594:	bf00      	nop
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	200065b8 	.word	0x200065b8
 800d5a0:	200060e0 	.word	0x200060e0
 800d5a4:	200065a0 	.word	0x200065a0
 800d5a8:	20006570 	.word	0x20006570
 800d5ac:	2000656c 	.word	0x2000656c
 800d5b0:	200065d4 	.word	0x200065d4

0800d5b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b08a      	sub	sp, #40	; 0x28
 800d5b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5be:	f000 fb07 	bl	800dbd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5c2:	4b1c      	ldr	r3, [pc, #112]	; (800d634 <xTimerCreateTimerTask+0x80>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d021      	beq.n	800d60e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d5d2:	1d3a      	adds	r2, r7, #4
 800d5d4:	f107 0108 	add.w	r1, r7, #8
 800d5d8:	f107 030c 	add.w	r3, r7, #12
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fd fe0f 	bl	800b200 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	9202      	str	r2, [sp, #8]
 800d5ea:	9301      	str	r3, [sp, #4]
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	9300      	str	r3, [sp, #0]
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	460a      	mov	r2, r1
 800d5f4:	4910      	ldr	r1, [pc, #64]	; (800d638 <xTimerCreateTimerTask+0x84>)
 800d5f6:	4811      	ldr	r0, [pc, #68]	; (800d63c <xTimerCreateTimerTask+0x88>)
 800d5f8:	f7fe ff94 	bl	800c524 <xTaskCreateStatic>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	4a10      	ldr	r2, [pc, #64]	; (800d640 <xTimerCreateTimerTask+0x8c>)
 800d600:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d602:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <xTimerCreateTimerTask+0x8c>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d60a:	2301      	movs	r3, #1
 800d60c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	613b      	str	r3, [r7, #16]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d62a:	697b      	ldr	r3, [r7, #20]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	20006610 	.word	0x20006610
 800d638:	0801a790 	.word	0x0801a790
 800d63c:	0800d779 	.word	0x0800d779
 800d640:	20006614 	.word	0x20006614

0800d644 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08a      	sub	sp, #40	; 0x28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d652:	2300      	movs	r3, #0
 800d654:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	623b      	str	r3, [r7, #32]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d672:	4b1a      	ldr	r3, [pc, #104]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d02a      	beq.n	800d6d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b05      	cmp	r3, #5
 800d68a:	dc18      	bgt.n	800d6be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d68c:	f7ff fdb4 	bl	800d1f8 <xTaskGetSchedulerState>
 800d690:	4603      	mov	r3, r0
 800d692:	2b02      	cmp	r3, #2
 800d694:	d109      	bne.n	800d6aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d696:	4b11      	ldr	r3, [pc, #68]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d698:	6818      	ldr	r0, [r3, #0]
 800d69a:	f107 0110 	add.w	r1, r7, #16
 800d69e:	2300      	movs	r3, #0
 800d6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a2:	f7fe f8d9 	bl	800b858 <xQueueGenericSend>
 800d6a6:	6278      	str	r0, [r7, #36]	; 0x24
 800d6a8:	e012      	b.n	800d6d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6aa:	4b0c      	ldr	r3, [pc, #48]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	f107 0110 	add.w	r1, r7, #16
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f7fe f8cf 	bl	800b858 <xQueueGenericSend>
 800d6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800d6bc:	e008      	b.n	800d6d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6be:	4b07      	ldr	r3, [pc, #28]	; (800d6dc <xTimerGenericCommand+0x98>)
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	f107 0110 	add.w	r1, r7, #16
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	f7fe f9c3 	bl	800ba54 <xQueueGenericSendFromISR>
 800d6ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3728      	adds	r7, #40	; 0x28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20006610 	.word	0x20006610

0800d6e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b22      	ldr	r3, [pc, #136]	; (800d774 <prvProcessExpiredTimer+0x94>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fd fe25 	bl	800b348 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d022      	beq.n	800d752 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	699a      	ldr	r2, [r3, #24]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	18d1      	adds	r1, r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	6978      	ldr	r0, [r7, #20]
 800d71a:	f000 f8d1 	bl	800d8c0 <prvInsertTimerInActiveList>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01f      	beq.n	800d764 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d724:	2300      	movs	r3, #0
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	2300      	movs	r3, #0
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	2100      	movs	r1, #0
 800d72e:	6978      	ldr	r0, [r7, #20]
 800d730:	f7ff ff88 	bl	800d644 <xTimerGenericCommand>
 800d734:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d113      	bne.n	800d764 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	60fb      	str	r3, [r7, #12]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	6a1b      	ldr	r3, [r3, #32]
 800d768:	6978      	ldr	r0, [r7, #20]
 800d76a:	4798      	blx	r3
}
 800d76c:	bf00      	nop
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	20006608 	.word	0x20006608

0800d778 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d780:	f107 0308 	add.w	r3, r7, #8
 800d784:	4618      	mov	r0, r3
 800d786:	f000 f857 	bl	800d838 <prvGetNextExpireTime>
 800d78a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	4619      	mov	r1, r3
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f000 f803 	bl	800d79c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d796:	f000 f8d5 	bl	800d944 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d79a:	e7f1      	b.n	800d780 <prvTimerTask+0x8>

0800d79c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7a6:	f7ff f919 	bl	800c9dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7aa:	f107 0308 	add.w	r3, r7, #8
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 f866 	bl	800d880 <prvSampleTimeNow>
 800d7b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d130      	bne.n	800d81e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10a      	bne.n	800d7d8 <prvProcessTimerOrBlockTask+0x3c>
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d806      	bhi.n	800d7d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7ca:	f7ff f915 	bl	800c9f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d7ce:	68f9      	ldr	r1, [r7, #12]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff ff85 	bl	800d6e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7d6:	e024      	b.n	800d822 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d008      	beq.n	800d7f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <prvProcessTimerOrBlockTask+0x90>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <prvProcessTimerOrBlockTask+0x50>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e000      	b.n	800d7ee <prvProcessTimerOrBlockTask+0x52>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d7f0:	4b0f      	ldr	r3, [pc, #60]	; (800d830 <prvProcessTimerOrBlockTask+0x94>)
 800d7f2:	6818      	ldr	r0, [r3, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	f7fe fe5d 	bl	800c4bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d802:	f7ff f8f9 	bl	800c9f8 <xTaskResumeAll>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d80c:	4b09      	ldr	r3, [pc, #36]	; (800d834 <prvProcessTimerOrBlockTask+0x98>)
 800d80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	f3bf 8f6f 	isb	sy
}
 800d81c:	e001      	b.n	800d822 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d81e:	f7ff f8eb 	bl	800c9f8 <xTaskResumeAll>
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	2000660c 	.word	0x2000660c
 800d830:	20006610 	.word	0x20006610
 800d834:	e000ed04 	.word	0xe000ed04

0800d838 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d840:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <prvGetNextExpireTime+0x44>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <prvGetNextExpireTime+0x16>
 800d84a:	2201      	movs	r2, #1
 800d84c:	e000      	b.n	800d850 <prvGetNextExpireTime+0x18>
 800d84e:	2200      	movs	r2, #0
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d105      	bne.n	800d868 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d85c:	4b07      	ldr	r3, [pc, #28]	; (800d87c <prvGetNextExpireTime+0x44>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	e001      	b.n	800d86c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d868:	2300      	movs	r3, #0
 800d86a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d86c:	68fb      	ldr	r3, [r7, #12]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	20006608 	.word	0x20006608

0800d880 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d888:	f7ff f954 	bl	800cb34 <xTaskGetTickCount>
 800d88c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d88e:	4b0b      	ldr	r3, [pc, #44]	; (800d8bc <prvSampleTimeNow+0x3c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	429a      	cmp	r2, r3
 800d896:	d205      	bcs.n	800d8a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d898:	f000 f936 	bl	800db08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	601a      	str	r2, [r3, #0]
 800d8a2:	e002      	b.n	800d8aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8aa:	4a04      	ldr	r2, [pc, #16]	; (800d8bc <prvSampleTimeNow+0x3c>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20006618 	.word	0x20006618

0800d8c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d812      	bhi.n	800d90c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	699b      	ldr	r3, [r3, #24]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d302      	bcc.n	800d8fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	617b      	str	r3, [r7, #20]
 800d8f8:	e01b      	b.n	800d932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d8fa:	4b10      	ldr	r3, [pc, #64]	; (800d93c <prvInsertTimerInActiveList+0x7c>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3304      	adds	r3, #4
 800d902:	4619      	mov	r1, r3
 800d904:	4610      	mov	r0, r2
 800d906:	f7fd fce6 	bl	800b2d6 <vListInsert>
 800d90a:	e012      	b.n	800d932 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	429a      	cmp	r2, r3
 800d912:	d206      	bcs.n	800d922 <prvInsertTimerInActiveList+0x62>
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d302      	bcc.n	800d922 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d91c:	2301      	movs	r3, #1
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e007      	b.n	800d932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d922:	4b07      	ldr	r3, [pc, #28]	; (800d940 <prvInsertTimerInActiveList+0x80>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3304      	adds	r3, #4
 800d92a:	4619      	mov	r1, r3
 800d92c:	4610      	mov	r0, r2
 800d92e:	f7fd fcd2 	bl	800b2d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d932:	697b      	ldr	r3, [r7, #20]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	2000660c 	.word	0x2000660c
 800d940:	20006608 	.word	0x20006608

0800d944 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08e      	sub	sp, #56	; 0x38
 800d948:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d94a:	e0ca      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	da18      	bge.n	800d984 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d952:	1d3b      	adds	r3, r7, #4
 800d954:	3304      	adds	r3, #4
 800d956:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	61fb      	str	r3, [r7, #28]
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97a:	6850      	ldr	r0, [r2, #4]
 800d97c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97e:	6892      	ldr	r2, [r2, #8]
 800d980:	4611      	mov	r1, r2
 800d982:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f2c0 80aa 	blt.w	800dae0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	695b      	ldr	r3, [r3, #20]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99a:	3304      	adds	r3, #4
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fd fcd3 	bl	800b348 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9a2:	463b      	mov	r3, r7
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff ff6b 	bl	800d880 <prvSampleTimeNow>
 800d9aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b09      	cmp	r3, #9
 800d9b0:	f200 8097 	bhi.w	800dae2 <prvProcessReceivedCommands+0x19e>
 800d9b4:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <prvProcessReceivedCommands+0x78>)
 800d9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ba:	bf00      	nop
 800d9bc:	0800d9e5 	.word	0x0800d9e5
 800d9c0:	0800d9e5 	.word	0x0800d9e5
 800d9c4:	0800d9e5 	.word	0x0800d9e5
 800d9c8:	0800da59 	.word	0x0800da59
 800d9cc:	0800da6d 	.word	0x0800da6d
 800d9d0:	0800dab7 	.word	0x0800dab7
 800d9d4:	0800d9e5 	.word	0x0800d9e5
 800d9d8:	0800d9e5 	.word	0x0800d9e5
 800d9dc:	0800da59 	.word	0x0800da59
 800d9e0:	0800da6d 	.word	0x0800da6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	18d1      	adds	r1, r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da04:	f7ff ff5c 	bl	800d8c0 <prvInsertTimerInActiveList>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d069      	beq.n	800dae2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d05e      	beq.n	800dae2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	441a      	add	r2, r3
 800da2c:	2300      	movs	r3, #0
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	2300      	movs	r3, #0
 800da32:	2100      	movs	r1, #0
 800da34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da36:	f7ff fe05 	bl	800d644 <xTimerGenericCommand>
 800da3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d14f      	bne.n	800dae2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	61bb      	str	r3, [r7, #24]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da5e:	f023 0301 	bic.w	r3, r3, #1
 800da62:	b2da      	uxtb	r2, r3
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800da6a:	e03a      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da72:	f043 0301 	orr.w	r3, r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10a      	bne.n	800daa2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	617b      	str	r3, [r7, #20]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800daa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa4:	699a      	ldr	r2, [r3, #24]
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	18d1      	adds	r1, r2, r3
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab0:	f7ff ff06 	bl	800d8c0 <prvInsertTimerInActiveList>
					break;
 800dab4:	e015      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d103      	bne.n	800dacc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac6:	f000 fbdb 	bl	800e280 <vPortFree>
 800daca:	e00a      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dad2:	f023 0301 	bic.w	r3, r3, #1
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dade:	e000      	b.n	800dae2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dae0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dae2:	4b08      	ldr	r3, [pc, #32]	; (800db04 <prvProcessReceivedCommands+0x1c0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	1d39      	adds	r1, r7, #4
 800dae8:	2200      	movs	r2, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe f8da 	bl	800bca4 <xQueueReceive>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f47f af2a 	bne.w	800d94c <prvProcessReceivedCommands+0x8>
	}
}
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	3730      	adds	r7, #48	; 0x30
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	20006610 	.word	0x20006610

0800db08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db0e:	e048      	b.n	800dba2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db10:	4b2d      	ldr	r3, [pc, #180]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db1a:	4b2b      	ldr	r3, [pc, #172]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3304      	adds	r3, #4
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fd fc0d 	bl	800b348 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db3c:	f003 0304 	and.w	r3, r3, #4
 800db40:	2b00      	cmp	r3, #0
 800db42:	d02e      	beq.n	800dba2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	4413      	add	r3, r2
 800db4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	d90e      	bls.n	800db74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db62:	4b19      	ldr	r3, [pc, #100]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3304      	adds	r3, #4
 800db6a:	4619      	mov	r1, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f7fd fbb2 	bl	800b2d6 <vListInsert>
 800db72:	e016      	b.n	800dba2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db74:	2300      	movs	r3, #0
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	2300      	movs	r3, #0
 800db7a:	693a      	ldr	r2, [r7, #16]
 800db7c:	2100      	movs	r1, #0
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f7ff fd60 	bl	800d644 <xTimerGenericCommand>
 800db84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10a      	bne.n	800dba2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	603b      	str	r3, [r7, #0]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dba2:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1b1      	bne.n	800db10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dbac:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbb2:	4b06      	ldr	r3, [pc, #24]	; (800dbcc <prvSwitchTimerLists+0xc4>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a04      	ldr	r2, [pc, #16]	; (800dbc8 <prvSwitchTimerLists+0xc0>)
 800dbb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dbba:	4a04      	ldr	r2, [pc, #16]	; (800dbcc <prvSwitchTimerLists+0xc4>)
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	6013      	str	r3, [r2, #0]
}
 800dbc0:	bf00      	nop
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	20006608 	.word	0x20006608
 800dbcc:	2000660c 	.word	0x2000660c

0800dbd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dbd6:	f000 f965 	bl	800dea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dbda:	4b15      	ldr	r3, [pc, #84]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d120      	bne.n	800dc24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dbe2:	4814      	ldr	r0, [pc, #80]	; (800dc34 <prvCheckForValidListAndQueue+0x64>)
 800dbe4:	f7fd fb26 	bl	800b234 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dbe8:	4813      	ldr	r0, [pc, #76]	; (800dc38 <prvCheckForValidListAndQueue+0x68>)
 800dbea:	f7fd fb23 	bl	800b234 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbee:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <prvCheckForValidListAndQueue+0x6c>)
 800dbf0:	4a10      	ldr	r2, [pc, #64]	; (800dc34 <prvCheckForValidListAndQueue+0x64>)
 800dbf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dbf4:	4b12      	ldr	r3, [pc, #72]	; (800dc40 <prvCheckForValidListAndQueue+0x70>)
 800dbf6:	4a10      	ldr	r2, [pc, #64]	; (800dc38 <prvCheckForValidListAndQueue+0x68>)
 800dbf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	4b11      	ldr	r3, [pc, #68]	; (800dc44 <prvCheckForValidListAndQueue+0x74>)
 800dc00:	4a11      	ldr	r2, [pc, #68]	; (800dc48 <prvCheckForValidListAndQueue+0x78>)
 800dc02:	2110      	movs	r1, #16
 800dc04:	200a      	movs	r0, #10
 800dc06:	f7fd fc31 	bl	800b46c <xQueueGenericCreateStatic>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	4a08      	ldr	r2, [pc, #32]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dc0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc10:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <prvCheckForValidListAndQueue+0x60>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	490b      	ldr	r1, [pc, #44]	; (800dc4c <prvCheckForValidListAndQueue+0x7c>)
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fe fbf8 	bl	800c414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc24:	f000 f96e 	bl	800df04 <vPortExitCritical>
}
 800dc28:	bf00      	nop
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	20006610 	.word	0x20006610
 800dc34:	200065e0 	.word	0x200065e0
 800dc38:	200065f4 	.word	0x200065f4
 800dc3c:	20006608 	.word	0x20006608
 800dc40:	2000660c 	.word	0x2000660c
 800dc44:	200066bc 	.word	0x200066bc
 800dc48:	2000661c 	.word	0x2000661c
 800dc4c:	0801a798 	.word	0x0801a798

0800dc50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	3b04      	subs	r3, #4
 800dc60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	3b04      	subs	r3, #4
 800dc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	f023 0201 	bic.w	r2, r3, #1
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	3b04      	subs	r3, #4
 800dc7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc80:	4a0c      	ldr	r2, [pc, #48]	; (800dcb4 <pxPortInitialiseStack+0x64>)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	3b14      	subs	r3, #20
 800dc8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3b04      	subs	r3, #4
 800dc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f06f 0202 	mvn.w	r2, #2
 800dc9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	3b20      	subs	r3, #32
 800dca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dca6:	68fb      	ldr	r3, [r7, #12]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3714      	adds	r7, #20
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	0800dcb9 	.word	0x0800dcb9

0800dcb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcc2:	4b12      	ldr	r3, [pc, #72]	; (800dd0c <prvTaskExitError+0x54>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcca:	d00a      	beq.n	800dce2 <prvTaskExitError+0x2a>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	60fb      	str	r3, [r7, #12]
}
 800dcde:	bf00      	nop
 800dce0:	e7fe      	b.n	800dce0 <prvTaskExitError+0x28>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	60bb      	str	r3, [r7, #8]
}
 800dcf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcf6:	bf00      	nop
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d0fc      	beq.n	800dcf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcfe:	bf00      	nop
 800dd00:	bf00      	nop
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	2000015c 	.word	0x2000015c

0800dd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <pxCurrentTCBConst2>)
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	6808      	ldr	r0, [r1, #0]
 800dd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1a:	f380 8809 	msr	PSP, r0
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f04f 0000 	mov.w	r0, #0
 800dd26:	f380 8811 	msr	BASEPRI, r0
 800dd2a:	4770      	bx	lr
 800dd2c:	f3af 8000 	nop.w

0800dd30 <pxCurrentTCBConst2>:
 800dd30:	200060e0 	.word	0x200060e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop

0800dd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd38:	4808      	ldr	r0, [pc, #32]	; (800dd5c <prvPortStartFirstTask+0x24>)
 800dd3a:	6800      	ldr	r0, [r0, #0]
 800dd3c:	6800      	ldr	r0, [r0, #0]
 800dd3e:	f380 8808 	msr	MSP, r0
 800dd42:	f04f 0000 	mov.w	r0, #0
 800dd46:	f380 8814 	msr	CONTROL, r0
 800dd4a:	b662      	cpsie	i
 800dd4c:	b661      	cpsie	f
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	df00      	svc	0
 800dd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd5a:	bf00      	nop
 800dd5c:	e000ed08 	.word	0xe000ed08

0800dd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd66:	4b46      	ldr	r3, [pc, #280]	; (800de80 <xPortStartScheduler+0x120>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a46      	ldr	r2, [pc, #280]	; (800de84 <xPortStartScheduler+0x124>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d10a      	bne.n	800dd86 <xPortStartScheduler+0x26>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	613b      	str	r3, [r7, #16]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd86:	4b3e      	ldr	r3, [pc, #248]	; (800de80 <xPortStartScheduler+0x120>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a3f      	ldr	r2, [pc, #252]	; (800de88 <xPortStartScheduler+0x128>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d10a      	bne.n	800dda6 <xPortStartScheduler+0x46>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	60fb      	str	r3, [r7, #12]
}
 800dda2:	bf00      	nop
 800dda4:	e7fe      	b.n	800dda4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dda6:	4b39      	ldr	r3, [pc, #228]	; (800de8c <xPortStartScheduler+0x12c>)
 800dda8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	22ff      	movs	r2, #255	; 0xff
 800ddb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ddc0:	78fb      	ldrb	r3, [r7, #3]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <xPortStartScheduler+0x130>)
 800ddcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddce:	4b31      	ldr	r3, [pc, #196]	; (800de94 <xPortStartScheduler+0x134>)
 800ddd0:	2207      	movs	r2, #7
 800ddd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddd4:	e009      	b.n	800ddea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ddd6:	4b2f      	ldr	r3, [pc, #188]	; (800de94 <xPortStartScheduler+0x134>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	4a2d      	ldr	r2, [pc, #180]	; (800de94 <xPortStartScheduler+0x134>)
 800ddde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddea:	78fb      	ldrb	r3, [r7, #3]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf2:	2b80      	cmp	r3, #128	; 0x80
 800ddf4:	d0ef      	beq.n	800ddd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddf6:	4b27      	ldr	r3, [pc, #156]	; (800de94 <xPortStartScheduler+0x134>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f1c3 0307 	rsb	r3, r3, #7
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d00a      	beq.n	800de18 <xPortStartScheduler+0xb8>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	60bb      	str	r3, [r7, #8]
}
 800de14:	bf00      	nop
 800de16:	e7fe      	b.n	800de16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de18:	4b1e      	ldr	r3, [pc, #120]	; (800de94 <xPortStartScheduler+0x134>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	021b      	lsls	r3, r3, #8
 800de1e:	4a1d      	ldr	r2, [pc, #116]	; (800de94 <xPortStartScheduler+0x134>)
 800de20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de22:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <xPortStartScheduler+0x134>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de2a:	4a1a      	ldr	r2, [pc, #104]	; (800de94 <xPortStartScheduler+0x134>)
 800de2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	b2da      	uxtb	r2, r3
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de36:	4b18      	ldr	r3, [pc, #96]	; (800de98 <xPortStartScheduler+0x138>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <xPortStartScheduler+0x138>)
 800de3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de42:	4b15      	ldr	r3, [pc, #84]	; (800de98 <xPortStartScheduler+0x138>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a14      	ldr	r2, [pc, #80]	; (800de98 <xPortStartScheduler+0x138>)
 800de48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de4e:	f000 f8dd 	bl	800e00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de52:	4b12      	ldr	r3, [pc, #72]	; (800de9c <xPortStartScheduler+0x13c>)
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de58:	f000 f8fc 	bl	800e054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de5c:	4b10      	ldr	r3, [pc, #64]	; (800dea0 <xPortStartScheduler+0x140>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a0f      	ldr	r2, [pc, #60]	; (800dea0 <xPortStartScheduler+0x140>)
 800de62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de68:	f7ff ff66 	bl	800dd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de6c:	f7fe ff3e 	bl	800ccec <vTaskSwitchContext>
	prvTaskExitError();
 800de70:	f7ff ff22 	bl	800dcb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	e000ed00 	.word	0xe000ed00
 800de84:	410fc271 	.word	0x410fc271
 800de88:	410fc270 	.word	0x410fc270
 800de8c:	e000e400 	.word	0xe000e400
 800de90:	2000670c 	.word	0x2000670c
 800de94:	20006710 	.word	0x20006710
 800de98:	e000ed20 	.word	0xe000ed20
 800de9c:	2000015c 	.word	0x2000015c
 800dea0:	e000ef34 	.word	0xe000ef34

0800dea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	607b      	str	r3, [r7, #4]
}
 800debc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <vPortEnterCritical+0x58>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3301      	adds	r3, #1
 800dec4:	4a0d      	ldr	r2, [pc, #52]	; (800defc <vPortEnterCritical+0x58>)
 800dec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dec8:	4b0c      	ldr	r3, [pc, #48]	; (800defc <vPortEnterCritical+0x58>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d10f      	bne.n	800def0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ded0:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <vPortEnterCritical+0x5c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00a      	beq.n	800def0 <vPortEnterCritical+0x4c>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	603b      	str	r3, [r7, #0]
}
 800deec:	bf00      	nop
 800deee:	e7fe      	b.n	800deee <vPortEnterCritical+0x4a>
	}
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	2000015c 	.word	0x2000015c
 800df00:	e000ed04 	.word	0xe000ed04

0800df04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df0a:	4b12      	ldr	r3, [pc, #72]	; (800df54 <vPortExitCritical+0x50>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <vPortExitCritical+0x24>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	607b      	str	r3, [r7, #4]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <vPortExitCritical+0x50>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	4a09      	ldr	r2, [pc, #36]	; (800df54 <vPortExitCritical+0x50>)
 800df30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df32:	4b08      	ldr	r3, [pc, #32]	; (800df54 <vPortExitCritical+0x50>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d105      	bne.n	800df46 <vPortExitCritical+0x42>
 800df3a:	2300      	movs	r3, #0
 800df3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	f383 8811 	msr	BASEPRI, r3
}
 800df44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df46:	bf00      	nop
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	2000015c 	.word	0x2000015c
	...

0800df60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df60:	f3ef 8009 	mrs	r0, PSP
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	4b15      	ldr	r3, [pc, #84]	; (800dfc0 <pxCurrentTCBConst>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	f01e 0f10 	tst.w	lr, #16
 800df70:	bf08      	it	eq
 800df72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7a:	6010      	str	r0, [r2, #0]
 800df7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df84:	f380 8811 	msr	BASEPRI, r0
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f7fe feac 	bl	800ccec <vTaskSwitchContext>
 800df94:	f04f 0000 	mov.w	r0, #0
 800df98:	f380 8811 	msr	BASEPRI, r0
 800df9c:	bc09      	pop	{r0, r3}
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	6808      	ldr	r0, [r1, #0]
 800dfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa6:	f01e 0f10 	tst.w	lr, #16
 800dfaa:	bf08      	it	eq
 800dfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfb0:	f380 8809 	msr	PSP, r0
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w

0800dfc0 <pxCurrentTCBConst>:
 800dfc0:	200060e0 	.word	0x200060e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop

0800dfc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	607b      	str	r3, [r7, #4]
}
 800dfe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfe2:	f7fe fdc9 	bl	800cb78 <xTaskIncrementTick>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <xPortSysTickHandler+0x40>)
 800dfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff2:	601a      	str	r2, [r3, #0]
 800dff4:	2300      	movs	r3, #0
 800dff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f383 8811 	msr	BASEPRI, r3
}
 800dffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	e000ed04 	.word	0xe000ed04

0800e00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e010:	4b0b      	ldr	r3, [pc, #44]	; (800e040 <vPortSetupTimerInterrupt+0x34>)
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <vPortSetupTimerInterrupt+0x38>)
 800e018:	2200      	movs	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <vPortSetupTimerInterrupt+0x3c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a0a      	ldr	r2, [pc, #40]	; (800e04c <vPortSetupTimerInterrupt+0x40>)
 800e022:	fba2 2303 	umull	r2, r3, r2, r3
 800e026:	099b      	lsrs	r3, r3, #6
 800e028:	4a09      	ldr	r2, [pc, #36]	; (800e050 <vPortSetupTimerInterrupt+0x44>)
 800e02a:	3b01      	subs	r3, #1
 800e02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e02e:	4b04      	ldr	r3, [pc, #16]	; (800e040 <vPortSetupTimerInterrupt+0x34>)
 800e030:	2207      	movs	r2, #7
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	e000e010 	.word	0xe000e010
 800e044:	e000e018 	.word	0xe000e018
 800e048:	2000013c 	.word	0x2000013c
 800e04c:	10624dd3 	.word	0x10624dd3
 800e050:	e000e014 	.word	0xe000e014

0800e054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e064 <vPortEnableVFP+0x10>
 800e058:	6801      	ldr	r1, [r0, #0]
 800e05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e05e:	6001      	str	r1, [r0, #0]
 800e060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e062:	bf00      	nop
 800e064:	e000ed88 	.word	0xe000ed88

0800e068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e06e:	f3ef 8305 	mrs	r3, IPSR
 800e072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b0f      	cmp	r3, #15
 800e078:	d914      	bls.n	800e0a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e07a:	4a17      	ldr	r2, [pc, #92]	; (800e0d8 <vPortValidateInterruptPriority+0x70>)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	4413      	add	r3, r2
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e084:	4b15      	ldr	r3, [pc, #84]	; (800e0dc <vPortValidateInterruptPriority+0x74>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	7afa      	ldrb	r2, [r7, #11]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d20a      	bcs.n	800e0a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	607b      	str	r3, [r7, #4]
}
 800e0a0:	bf00      	nop
 800e0a2:	e7fe      	b.n	800e0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0a4:	4b0e      	ldr	r3, [pc, #56]	; (800e0e0 <vPortValidateInterruptPriority+0x78>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0ac:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <vPortValidateInterruptPriority+0x7c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d90a      	bls.n	800e0ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	603b      	str	r3, [r7, #0]
}
 800e0c6:	bf00      	nop
 800e0c8:	e7fe      	b.n	800e0c8 <vPortValidateInterruptPriority+0x60>
	}
 800e0ca:	bf00      	nop
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop
 800e0d8:	e000e3f0 	.word	0xe000e3f0
 800e0dc:	2000670c 	.word	0x2000670c
 800e0e0:	e000ed0c 	.word	0xe000ed0c
 800e0e4:	20006710 	.word	0x20006710

0800e0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08a      	sub	sp, #40	; 0x28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e0f4:	f7fe fc72 	bl	800c9dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e0f8:	4b5b      	ldr	r3, [pc, #364]	; (800e268 <pvPortMalloc+0x180>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e100:	f000 f920 	bl	800e344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e104:	4b59      	ldr	r3, [pc, #356]	; (800e26c <pvPortMalloc+0x184>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4013      	ands	r3, r2
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f040 8093 	bne.w	800e238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d01d      	beq.n	800e154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e118:	2208      	movs	r2, #8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	2b00      	cmp	r3, #0
 800e128:	d014      	beq.n	800e154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f023 0307 	bic.w	r3, r3, #7
 800e130:	3308      	adds	r3, #8
 800e132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00a      	beq.n	800e154 <pvPortMalloc+0x6c>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	617b      	str	r3, [r7, #20]
}
 800e150:	bf00      	nop
 800e152:	e7fe      	b.n	800e152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d06e      	beq.n	800e238 <pvPortMalloc+0x150>
 800e15a:	4b45      	ldr	r3, [pc, #276]	; (800e270 <pvPortMalloc+0x188>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d869      	bhi.n	800e238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e164:	4b43      	ldr	r3, [pc, #268]	; (800e274 <pvPortMalloc+0x18c>)
 800e166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e168:	4b42      	ldr	r3, [pc, #264]	; (800e274 <pvPortMalloc+0x18c>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e16e:	e004      	b.n	800e17a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d903      	bls.n	800e18c <pvPortMalloc+0xa4>
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f1      	bne.n	800e170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e18c:	4b36      	ldr	r3, [pc, #216]	; (800e268 <pvPortMalloc+0x180>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	429a      	cmp	r2, r3
 800e194:	d050      	beq.n	800e238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2208      	movs	r2, #8
 800e19c:	4413      	add	r3, r2
 800e19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	1ad2      	subs	r2, r2, r3
 800e1b0:	2308      	movs	r3, #8
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d91f      	bls.n	800e1f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	f003 0307 	and.w	r3, r3, #7
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00a      	beq.n	800e1e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	613b      	str	r3, [r7, #16]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	1ad2      	subs	r2, r2, r3
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e1f2:	69b8      	ldr	r0, [r7, #24]
 800e1f4:	f000 f908 	bl	800e408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	; (800e270 <pvPortMalloc+0x188>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	4a1b      	ldr	r2, [pc, #108]	; (800e270 <pvPortMalloc+0x188>)
 800e204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e206:	4b1a      	ldr	r3, [pc, #104]	; (800e270 <pvPortMalloc+0x188>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <pvPortMalloc+0x190>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d203      	bcs.n	800e21a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e212:	4b17      	ldr	r3, [pc, #92]	; (800e270 <pvPortMalloc+0x188>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a18      	ldr	r2, [pc, #96]	; (800e278 <pvPortMalloc+0x190>)
 800e218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <pvPortMalloc+0x184>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	431a      	orrs	r2, r3
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e22e:	4b13      	ldr	r3, [pc, #76]	; (800e27c <pvPortMalloc+0x194>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	4a11      	ldr	r2, [pc, #68]	; (800e27c <pvPortMalloc+0x194>)
 800e236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e238:	f7fe fbde 	bl	800c9f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	f003 0307 	and.w	r3, r3, #7
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <pvPortMalloc+0x174>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	60fb      	str	r3, [r7, #12]
}
 800e258:	bf00      	nop
 800e25a:	e7fe      	b.n	800e25a <pvPortMalloc+0x172>
	return pvReturn;
 800e25c:	69fb      	ldr	r3, [r7, #28]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3728      	adds	r7, #40	; 0x28
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	2000a31c 	.word	0x2000a31c
 800e26c:	2000a330 	.word	0x2000a330
 800e270:	2000a320 	.word	0x2000a320
 800e274:	2000a314 	.word	0x2000a314
 800e278:	2000a324 	.word	0x2000a324
 800e27c:	2000a328 	.word	0x2000a328

0800e280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d04d      	beq.n	800e32e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e292:	2308      	movs	r3, #8
 800e294:	425b      	negs	r3, r3
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	4413      	add	r3, r2
 800e29a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	685a      	ldr	r2, [r3, #4]
 800e2a4:	4b24      	ldr	r3, [pc, #144]	; (800e338 <vPortFree+0xb8>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <vPortFree+0x44>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	60fb      	str	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00a      	beq.n	800e2e2 <vPortFree+0x62>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	60bb      	str	r3, [r7, #8]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <vPortFree+0xb8>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01e      	beq.n	800e32e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d11a      	bne.n	800e32e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	4b0e      	ldr	r3, [pc, #56]	; (800e338 <vPortFree+0xb8>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	43db      	mvns	r3, r3
 800e302:	401a      	ands	r2, r3
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e308:	f7fe fb68 	bl	800c9dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <vPortFree+0xbc>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4413      	add	r3, r2
 800e316:	4a09      	ldr	r2, [pc, #36]	; (800e33c <vPortFree+0xbc>)
 800e318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e31a:	6938      	ldr	r0, [r7, #16]
 800e31c:	f000 f874 	bl	800e408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <vPortFree+0xc0>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	4a06      	ldr	r2, [pc, #24]	; (800e340 <vPortFree+0xc0>)
 800e328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e32a:	f7fe fb65 	bl	800c9f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e32e:	bf00      	nop
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	2000a330 	.word	0x2000a330
 800e33c:	2000a320 	.word	0x2000a320
 800e340:	2000a32c 	.word	0x2000a32c

0800e344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e34a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e34e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e350:	4b27      	ldr	r3, [pc, #156]	; (800e3f0 <prvHeapInit+0xac>)
 800e352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f003 0307 	and.w	r3, r3, #7
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00c      	beq.n	800e378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3307      	adds	r3, #7
 800e362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 0307 	bic.w	r3, r3, #7
 800e36a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	4a1f      	ldr	r2, [pc, #124]	; (800e3f0 <prvHeapInit+0xac>)
 800e374:	4413      	add	r3, r2
 800e376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e37c:	4a1d      	ldr	r2, [pc, #116]	; (800e3f4 <prvHeapInit+0xb0>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e382:	4b1c      	ldr	r3, [pc, #112]	; (800e3f4 <prvHeapInit+0xb0>)
 800e384:	2200      	movs	r2, #0
 800e386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	4413      	add	r3, r2
 800e38e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e390:	2208      	movs	r2, #8
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	1a9b      	subs	r3, r3, r2
 800e396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f023 0307 	bic.w	r3, r3, #7
 800e39e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3a6:	4b14      	ldr	r3, [pc, #80]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3ae:	4b12      	ldr	r3, [pc, #72]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3c4:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvHeapInit+0xb4>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4a0a      	ldr	r2, [pc, #40]	; (800e3fc <prvHeapInit+0xb8>)
 800e3d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	4a09      	ldr	r2, [pc, #36]	; (800e400 <prvHeapInit+0xbc>)
 800e3da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e3dc:	4b09      	ldr	r3, [pc, #36]	; (800e404 <prvHeapInit+0xc0>)
 800e3de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3e2:	601a      	str	r2, [r3, #0]
}
 800e3e4:	bf00      	nop
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	20006714 	.word	0x20006714
 800e3f4:	2000a314 	.word	0x2000a314
 800e3f8:	2000a31c 	.word	0x2000a31c
 800e3fc:	2000a324 	.word	0x2000a324
 800e400:	2000a320 	.word	0x2000a320
 800e404:	2000a330 	.word	0x2000a330

0800e408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e410:	4b28      	ldr	r3, [pc, #160]	; (800e4b4 <prvInsertBlockIntoFreeList+0xac>)
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	e002      	b.n	800e41c <prvInsertBlockIntoFreeList+0x14>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	429a      	cmp	r2, r3
 800e424:	d8f7      	bhi.n	800e416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	4413      	add	r3, r2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d108      	bne.n	800e44a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	441a      	add	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	441a      	add	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d118      	bne.n	800e490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4b15      	ldr	r3, [pc, #84]	; (800e4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d00d      	beq.n	800e486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	441a      	add	r2, r3
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	e008      	b.n	800e498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e486:	4b0c      	ldr	r3, [pc, #48]	; (800e4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	e003      	b.n	800e498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d002      	beq.n	800e4a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4a6:	bf00      	nop
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	2000a314 	.word	0x2000a314
 800e4b8:	2000a31c 	.word	0x2000a31c

0800e4bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e4c6:	f007 fb67 	bl	8015b98 <sys_timeouts_sleeptime>
 800e4ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d2:	d10b      	bne.n	800e4ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e4d4:	4813      	ldr	r0, [pc, #76]	; (800e524 <tcpip_timeouts_mbox_fetch+0x68>)
 800e4d6:	f00a fc36 	bl	8018d46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e4da:	2200      	movs	r2, #0
 800e4dc:	6839      	ldr	r1, [r7, #0]
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f00a fbbe 	bl	8018c60 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e4e4:	480f      	ldr	r0, [pc, #60]	; (800e524 <tcpip_timeouts_mbox_fetch+0x68>)
 800e4e6:	f00a fc1f 	bl	8018d28 <sys_mutex_lock>
    return;
 800e4ea:	e018      	b.n	800e51e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d102      	bne.n	800e4f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e4f2:	f007 fb17 	bl	8015b24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e4f6:	e7e6      	b.n	800e4c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e4f8:	480a      	ldr	r0, [pc, #40]	; (800e524 <tcpip_timeouts_mbox_fetch+0x68>)
 800e4fa:	f00a fc24 	bl	8018d46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	6839      	ldr	r1, [r7, #0]
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f00a fbac 	bl	8018c60 <sys_arch_mbox_fetch>
 800e508:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e50a:	4806      	ldr	r0, [pc, #24]	; (800e524 <tcpip_timeouts_mbox_fetch+0x68>)
 800e50c:	f00a fc0c 	bl	8018d28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e516:	d102      	bne.n	800e51e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e518:	f007 fb04 	bl	8015b24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e51c:	e7d3      	b.n	800e4c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	2000a340 	.word	0x2000a340

0800e528 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e530:	4810      	ldr	r0, [pc, #64]	; (800e574 <tcpip_thread+0x4c>)
 800e532:	f00a fbf9 	bl	8018d28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e536:	4b10      	ldr	r3, [pc, #64]	; (800e578 <tcpip_thread+0x50>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d005      	beq.n	800e54a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e53e:	4b0e      	ldr	r3, [pc, #56]	; (800e578 <tcpip_thread+0x50>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a0e      	ldr	r2, [pc, #56]	; (800e57c <tcpip_thread+0x54>)
 800e544:	6812      	ldr	r2, [r2, #0]
 800e546:	4610      	mov	r0, r2
 800e548:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e54a:	f107 030c 	add.w	r3, r7, #12
 800e54e:	4619      	mov	r1, r3
 800e550:	480b      	ldr	r0, [pc, #44]	; (800e580 <tcpip_thread+0x58>)
 800e552:	f7ff ffb3 	bl	800e4bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d106      	bne.n	800e56a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e55c:	4b09      	ldr	r3, [pc, #36]	; (800e584 <tcpip_thread+0x5c>)
 800e55e:	2291      	movs	r2, #145	; 0x91
 800e560:	4909      	ldr	r1, [pc, #36]	; (800e588 <tcpip_thread+0x60>)
 800e562:	480a      	ldr	r0, [pc, #40]	; (800e58c <tcpip_thread+0x64>)
 800e564:	f00a fe30 	bl	80191c8 <iprintf>
      continue;
 800e568:	e003      	b.n	800e572 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f000 f80f 	bl	800e590 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e572:	e7ea      	b.n	800e54a <tcpip_thread+0x22>
 800e574:	2000a340 	.word	0x2000a340
 800e578:	2000a334 	.word	0x2000a334
 800e57c:	2000a338 	.word	0x2000a338
 800e580:	2000a33c 	.word	0x2000a33c
 800e584:	0801a7a0 	.word	0x0801a7a0
 800e588:	0801a7d0 	.word	0x0801a7d0
 800e58c:	0801a7f0 	.word	0x0801a7f0

0800e590 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d026      	beq.n	800e5ee <tcpip_thread_handle_msg+0x5e>
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	dc2b      	bgt.n	800e5fc <tcpip_thread_handle_msg+0x6c>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <tcpip_thread_handle_msg+0x1e>
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d015      	beq.n	800e5d8 <tcpip_thread_handle_msg+0x48>
 800e5ac:	e026      	b.n	800e5fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	6850      	ldr	r0, [r2, #4]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	6892      	ldr	r2, [r2, #8]
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	4798      	blx	r3
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d004      	beq.n	800e5ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f001 fd0b 	bl	800ffe4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	2009      	movs	r0, #9
 800e5d2:	f000 fe63 	bl	800f29c <memp_free>
      break;
 800e5d6:	e018      	b.n	800e60a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	6892      	ldr	r2, [r2, #8]
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e5e4:	6879      	ldr	r1, [r7, #4]
 800e5e6:	2008      	movs	r0, #8
 800e5e8:	f000 fe58 	bl	800f29c <memp_free>
      break;
 800e5ec:	e00d      	b.n	800e60a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	6892      	ldr	r2, [r2, #8]
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	4798      	blx	r3
      break;
 800e5fa:	e006      	b.n	800e60a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e5fc:	4b05      	ldr	r3, [pc, #20]	; (800e614 <tcpip_thread_handle_msg+0x84>)
 800e5fe:	22cf      	movs	r2, #207	; 0xcf
 800e600:	4905      	ldr	r1, [pc, #20]	; (800e618 <tcpip_thread_handle_msg+0x88>)
 800e602:	4806      	ldr	r0, [pc, #24]	; (800e61c <tcpip_thread_handle_msg+0x8c>)
 800e604:	f00a fde0 	bl	80191c8 <iprintf>
      break;
 800e608:	bf00      	nop
  }
}
 800e60a:	bf00      	nop
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	0801a7a0 	.word	0x0801a7a0
 800e618:	0801a7d0 	.word	0x0801a7d0
 800e61c:	0801a7f0 	.word	0x0801a7f0

0800e620 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e62c:	481a      	ldr	r0, [pc, #104]	; (800e698 <tcpip_inpkt+0x78>)
 800e62e:	f00a fb48 	bl	8018cc2 <sys_mbox_valid>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d105      	bne.n	800e644 <tcpip_inpkt+0x24>
 800e638:	4b18      	ldr	r3, [pc, #96]	; (800e69c <tcpip_inpkt+0x7c>)
 800e63a:	22fc      	movs	r2, #252	; 0xfc
 800e63c:	4918      	ldr	r1, [pc, #96]	; (800e6a0 <tcpip_inpkt+0x80>)
 800e63e:	4819      	ldr	r0, [pc, #100]	; (800e6a4 <tcpip_inpkt+0x84>)
 800e640:	f00a fdc2 	bl	80191c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e644:	2009      	movs	r0, #9
 800e646:	f000 fdb3 	bl	800f1b0 <memp_malloc>
 800e64a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d102      	bne.n	800e658 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e652:	f04f 33ff 	mov.w	r3, #4294967295
 800e656:	e01a      	b.n	800e68e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	2200      	movs	r2, #0
 800e65c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e670:	6979      	ldr	r1, [r7, #20]
 800e672:	4809      	ldr	r0, [pc, #36]	; (800e698 <tcpip_inpkt+0x78>)
 800e674:	f00a fada 	bl	8018c2c <sys_mbox_trypost>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d006      	beq.n	800e68c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e67e:	6979      	ldr	r1, [r7, #20]
 800e680:	2009      	movs	r0, #9
 800e682:	f000 fe0b 	bl	800f29c <memp_free>
    return ERR_MEM;
 800e686:	f04f 33ff 	mov.w	r3, #4294967295
 800e68a:	e000      	b.n	800e68e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e68c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3718      	adds	r7, #24
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	2000a33c 	.word	0x2000a33c
 800e69c:	0801a7a0 	.word	0x0801a7a0
 800e6a0:	0801a818 	.word	0x0801a818
 800e6a4:	0801a7f0 	.word	0x0801a7f0

0800e6a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6b8:	f003 0318 	and.w	r3, r3, #24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d006      	beq.n	800e6ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e6c0:	4a08      	ldr	r2, [pc, #32]	; (800e6e4 <tcpip_input+0x3c>)
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff ffab 	bl	800e620 <tcpip_inpkt>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	e005      	b.n	800e6da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e6ce:	4a06      	ldr	r2, [pc, #24]	; (800e6e8 <tcpip_input+0x40>)
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ffa4 	bl	800e620 <tcpip_inpkt>
 800e6d8:	4603      	mov	r3, r0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	08018a4d 	.word	0x08018a4d
 800e6e8:	08017955 	.word	0x08017955

0800e6ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e6f6:	4819      	ldr	r0, [pc, #100]	; (800e75c <tcpip_try_callback+0x70>)
 800e6f8:	f00a fae3 	bl	8018cc2 <sys_mbox_valid>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <tcpip_try_callback+0x24>
 800e702:	4b17      	ldr	r3, [pc, #92]	; (800e760 <tcpip_try_callback+0x74>)
 800e704:	f240 125d 	movw	r2, #349	; 0x15d
 800e708:	4916      	ldr	r1, [pc, #88]	; (800e764 <tcpip_try_callback+0x78>)
 800e70a:	4817      	ldr	r0, [pc, #92]	; (800e768 <tcpip_try_callback+0x7c>)
 800e70c:	f00a fd5c 	bl	80191c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e710:	2008      	movs	r0, #8
 800e712:	f000 fd4d 	bl	800f1b0 <memp_malloc>
 800e716:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d102      	bne.n	800e724 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e71e:	f04f 33ff 	mov.w	r3, #4294967295
 800e722:	e017      	b.n	800e754 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2201      	movs	r2, #1
 800e728:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	683a      	ldr	r2, [r7, #0]
 800e734:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	4808      	ldr	r0, [pc, #32]	; (800e75c <tcpip_try_callback+0x70>)
 800e73a:	f00a fa77 	bl	8018c2c <sys_mbox_trypost>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d006      	beq.n	800e752 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e744:	68f9      	ldr	r1, [r7, #12]
 800e746:	2008      	movs	r0, #8
 800e748:	f000 fda8 	bl	800f29c <memp_free>
    return ERR_MEM;
 800e74c:	f04f 33ff 	mov.w	r3, #4294967295
 800e750:	e000      	b.n	800e754 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	2000a33c 	.word	0x2000a33c
 800e760:	0801a7a0 	.word	0x0801a7a0
 800e764:	0801a818 	.word	0x0801a818
 800e768:	0801a7f0 	.word	0x0801a7f0

0800e76c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af02      	add	r7, sp, #8
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e776:	f000 f871 	bl	800e85c <lwip_init>

  tcpip_init_done = initfunc;
 800e77a:	4a17      	ldr	r2, [pc, #92]	; (800e7d8 <tcpip_init+0x6c>)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e780:	4a16      	ldr	r2, [pc, #88]	; (800e7dc <tcpip_init+0x70>)
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e786:	2106      	movs	r1, #6
 800e788:	4815      	ldr	r0, [pc, #84]	; (800e7e0 <tcpip_init+0x74>)
 800e78a:	f00a fa35 	bl	8018bf8 <sys_mbox_new>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d006      	beq.n	800e7a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e794:	4b13      	ldr	r3, [pc, #76]	; (800e7e4 <tcpip_init+0x78>)
 800e796:	f240 2261 	movw	r2, #609	; 0x261
 800e79a:	4913      	ldr	r1, [pc, #76]	; (800e7e8 <tcpip_init+0x7c>)
 800e79c:	4813      	ldr	r0, [pc, #76]	; (800e7ec <tcpip_init+0x80>)
 800e79e:	f00a fd13 	bl	80191c8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e7a2:	4813      	ldr	r0, [pc, #76]	; (800e7f0 <tcpip_init+0x84>)
 800e7a4:	f00a faaa 	bl	8018cfc <sys_mutex_new>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d006      	beq.n	800e7bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	; (800e7e4 <tcpip_init+0x78>)
 800e7b0:	f240 2265 	movw	r2, #613	; 0x265
 800e7b4:	490f      	ldr	r1, [pc, #60]	; (800e7f4 <tcpip_init+0x88>)
 800e7b6:	480d      	ldr	r0, [pc, #52]	; (800e7ec <tcpip_init+0x80>)
 800e7b8:	f00a fd06 	bl	80191c8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e7bc:	2318      	movs	r3, #24
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	490c      	ldr	r1, [pc, #48]	; (800e7f8 <tcpip_init+0x8c>)
 800e7c8:	480c      	ldr	r0, [pc, #48]	; (800e7fc <tcpip_init+0x90>)
 800e7ca:	f00a fac9 	bl	8018d60 <sys_thread_new>
}
 800e7ce:	bf00      	nop
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	2000a334 	.word	0x2000a334
 800e7dc:	2000a338 	.word	0x2000a338
 800e7e0:	2000a33c 	.word	0x2000a33c
 800e7e4:	0801a7a0 	.word	0x0801a7a0
 800e7e8:	0801a828 	.word	0x0801a828
 800e7ec:	0801a7f0 	.word	0x0801a7f0
 800e7f0:	2000a340 	.word	0x2000a340
 800e7f4:	0801a84c 	.word	0x0801a84c
 800e7f8:	0800e529 	.word	0x0800e529
 800e7fc:	0801a870 	.word	0x0801a870

0800e800 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e80a:	88fb      	ldrh	r3, [r7, #6]
 800e80c:	021b      	lsls	r3, r3, #8
 800e80e:	b21a      	sxth	r2, r3
 800e810:	88fb      	ldrh	r3, [r7, #6]
 800e812:	0a1b      	lsrs	r3, r3, #8
 800e814:	b29b      	uxth	r3, r3
 800e816:	b21b      	sxth	r3, r3
 800e818:	4313      	orrs	r3, r2
 800e81a:	b21b      	sxth	r3, r3
 800e81c:	b29b      	uxth	r3, r3
}
 800e81e:	4618      	mov	r0, r3
 800e820:	370c      	adds	r7, #12
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e82a:	b480      	push	{r7}
 800e82c:	b083      	sub	sp, #12
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	061a      	lsls	r2, r3, #24
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	021b      	lsls	r3, r3, #8
 800e83a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e83e:	431a      	orrs	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	0a1b      	lsrs	r3, r3, #8
 800e844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e848:	431a      	orrs	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	0e1b      	lsrs	r3, r3, #24
 800e84e:	4313      	orrs	r3, r2
}
 800e850:	4618      	mov	r0, r3
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e866:	f00a fa3d 	bl	8018ce4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e86a:	f000 f8d5 	bl	800ea18 <mem_init>
  memp_init();
 800e86e:	f000 fc31 	bl	800f0d4 <memp_init>
  pbuf_init();
  netif_init();
 800e872:	f000 fd3d 	bl	800f2f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e876:	f007 f9c7 	bl	8015c08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e87a:	f001 feef 	bl	801065c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e87e:	f007 f909 	bl	8015a94 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e882:	bf00      	nop
 800e884:	3708      	adds	r7, #8
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
	...

0800e88c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e896:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <ptr_to_mem+0x20>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	4413      	add	r3, r2
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	2000a9b0 	.word	0x2000a9b0

0800e8b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e8b8:	4b05      	ldr	r3, [pc, #20]	; (800e8d0 <mem_to_ptr+0x20>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	b29b      	uxth	r3, r3
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	2000a9b0 	.word	0x2000a9b0

0800e8d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e8d4:	b590      	push	{r4, r7, lr}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e8dc:	4b45      	ldr	r3, [pc, #276]	; (800e9f4 <plug_holes+0x120>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d206      	bcs.n	800e8f4 <plug_holes+0x20>
 800e8e6:	4b44      	ldr	r3, [pc, #272]	; (800e9f8 <plug_holes+0x124>)
 800e8e8:	f240 12df 	movw	r2, #479	; 0x1df
 800e8ec:	4943      	ldr	r1, [pc, #268]	; (800e9fc <plug_holes+0x128>)
 800e8ee:	4844      	ldr	r0, [pc, #272]	; (800ea00 <plug_holes+0x12c>)
 800e8f0:	f00a fc6a 	bl	80191c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e8f4:	4b43      	ldr	r3, [pc, #268]	; (800ea04 <plug_holes+0x130>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d306      	bcc.n	800e90c <plug_holes+0x38>
 800e8fe:	4b3e      	ldr	r3, [pc, #248]	; (800e9f8 <plug_holes+0x124>)
 800e900:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e904:	4940      	ldr	r1, [pc, #256]	; (800ea08 <plug_holes+0x134>)
 800e906:	483e      	ldr	r0, [pc, #248]	; (800ea00 <plug_holes+0x12c>)
 800e908:	f00a fc5e 	bl	80191c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	791b      	ldrb	r3, [r3, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d006      	beq.n	800e922 <plug_holes+0x4e>
 800e914:	4b38      	ldr	r3, [pc, #224]	; (800e9f8 <plug_holes+0x124>)
 800e916:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e91a:	493c      	ldr	r1, [pc, #240]	; (800ea0c <plug_holes+0x138>)
 800e91c:	4838      	ldr	r0, [pc, #224]	; (800ea00 <plug_holes+0x12c>)
 800e91e:	f00a fc53 	bl	80191c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e92a:	d906      	bls.n	800e93a <plug_holes+0x66>
 800e92c:	4b32      	ldr	r3, [pc, #200]	; (800e9f8 <plug_holes+0x124>)
 800e92e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e932:	4937      	ldr	r1, [pc, #220]	; (800ea10 <plug_holes+0x13c>)
 800e934:	4832      	ldr	r0, [pc, #200]	; (800ea00 <plug_holes+0x12c>)
 800e936:	f00a fc47 	bl	80191c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7ff ffa4 	bl	800e88c <ptr_to_mem>
 800e944:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d024      	beq.n	800e998 <plug_holes+0xc4>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	791b      	ldrb	r3, [r3, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d120      	bne.n	800e998 <plug_holes+0xc4>
 800e956:	4b2b      	ldr	r3, [pc, #172]	; (800ea04 <plug_holes+0x130>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d01b      	beq.n	800e998 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e960:	4b2c      	ldr	r3, [pc, #176]	; (800ea14 <plug_holes+0x140>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	429a      	cmp	r2, r3
 800e968:	d102      	bne.n	800e970 <plug_holes+0x9c>
      lfree = mem;
 800e96a:	4a2a      	ldr	r2, [pc, #168]	; (800ea14 <plug_holes+0x140>)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	881a      	ldrh	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e980:	d00a      	beq.n	800e998 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	4618      	mov	r0, r3
 800e988:	f7ff ff80 	bl	800e88c <ptr_to_mem>
 800e98c:	4604      	mov	r4, r0
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7ff ff8e 	bl	800e8b0 <mem_to_ptr>
 800e994:	4603      	mov	r3, r0
 800e996:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	885b      	ldrh	r3, [r3, #2]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff ff75 	bl	800e88c <ptr_to_mem>
 800e9a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d01f      	beq.n	800e9ec <plug_holes+0x118>
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	791b      	ldrb	r3, [r3, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d11b      	bne.n	800e9ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e9b4:	4b17      	ldr	r3, [pc, #92]	; (800ea14 <plug_holes+0x140>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d102      	bne.n	800e9c4 <plug_holes+0xf0>
      lfree = pmem;
 800e9be:	4a15      	ldr	r2, [pc, #84]	; (800ea14 <plug_holes+0x140>)
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	881a      	ldrh	r2, [r3, #0]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e9d4:	d00a      	beq.n	800e9ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff ff56 	bl	800e88c <ptr_to_mem>
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	68b8      	ldr	r0, [r7, #8]
 800e9e4:	f7ff ff64 	bl	800e8b0 <mem_to_ptr>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e9ec:	bf00      	nop
 800e9ee:	3714      	adds	r7, #20
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd90      	pop	{r4, r7, pc}
 800e9f4:	2000a9b0 	.word	0x2000a9b0
 800e9f8:	0801a880 	.word	0x0801a880
 800e9fc:	0801a8b0 	.word	0x0801a8b0
 800ea00:	0801a8c8 	.word	0x0801a8c8
 800ea04:	2000a9b4 	.word	0x2000a9b4
 800ea08:	0801a8f0 	.word	0x0801a8f0
 800ea0c:	0801a90c 	.word	0x0801a90c
 800ea10:	0801a928 	.word	0x0801a928
 800ea14:	2000a9bc 	.word	0x2000a9bc

0800ea18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ea1e:	4b1f      	ldr	r3, [pc, #124]	; (800ea9c <mem_init+0x84>)
 800ea20:	3303      	adds	r3, #3
 800ea22:	f023 0303 	bic.w	r3, r3, #3
 800ea26:	461a      	mov	r2, r3
 800ea28:	4b1d      	ldr	r3, [pc, #116]	; (800eaa0 <mem_init+0x88>)
 800ea2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ea2c:	4b1c      	ldr	r3, [pc, #112]	; (800eaa0 <mem_init+0x88>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ea38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ea46:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ea4a:	f7ff ff1f 	bl	800e88c <ptr_to_mem>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	4a14      	ldr	r2, [pc, #80]	; (800eaa4 <mem_init+0x8c>)
 800ea52:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ea54:	4b13      	ldr	r3, [pc, #76]	; (800eaa4 <mem_init+0x8c>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ea5c:	4b11      	ldr	r3, [pc, #68]	; (800eaa4 <mem_init+0x8c>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ea64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ea66:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <mem_init+0x8c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ea6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ea70:	4b0b      	ldr	r3, [pc, #44]	; (800eaa0 <mem_init+0x88>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a0c      	ldr	r2, [pc, #48]	; (800eaa8 <mem_init+0x90>)
 800ea76:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ea78:	480c      	ldr	r0, [pc, #48]	; (800eaac <mem_init+0x94>)
 800ea7a:	f00a f93f 	bl	8018cfc <sys_mutex_new>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d006      	beq.n	800ea92 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ea84:	4b0a      	ldr	r3, [pc, #40]	; (800eab0 <mem_init+0x98>)
 800ea86:	f240 221f 	movw	r2, #543	; 0x21f
 800ea8a:	490a      	ldr	r1, [pc, #40]	; (800eab4 <mem_init+0x9c>)
 800ea8c:	480a      	ldr	r0, [pc, #40]	; (800eab8 <mem_init+0xa0>)
 800ea8e:	f00a fb9b 	bl	80191c8 <iprintf>
  }
}
 800ea92:	bf00      	nop
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	2000a35c 	.word	0x2000a35c
 800eaa0:	2000a9b0 	.word	0x2000a9b0
 800eaa4:	2000a9b4 	.word	0x2000a9b4
 800eaa8:	2000a9bc 	.word	0x2000a9bc
 800eaac:	2000a9b8 	.word	0x2000a9b8
 800eab0:	0801a880 	.word	0x0801a880
 800eab4:	0801a954 	.word	0x0801a954
 800eab8:	0801a8c8 	.word	0x0801a8c8

0800eabc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fef3 	bl	800e8b0 <mem_to_ptr>
 800eaca:	4603      	mov	r3, r0
 800eacc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7ff feda 	bl	800e88c <ptr_to_mem>
 800ead8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	885b      	ldrh	r3, [r3, #2]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff fed4 	bl	800e88c <ptr_to_mem>
 800eae4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	881b      	ldrh	r3, [r3, #0]
 800eaea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eaee:	d818      	bhi.n	800eb22 <mem_link_valid+0x66>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	885b      	ldrh	r3, [r3, #2]
 800eaf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eaf8:	d813      	bhi.n	800eb22 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800eafe:	8afa      	ldrh	r2, [r7, #22]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d004      	beq.n	800eb0e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	881b      	ldrh	r3, [r3, #0]
 800eb08:	8afa      	ldrh	r2, [r7, #22]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d109      	bne.n	800eb22 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800eb0e:	4b08      	ldr	r3, [pc, #32]	; (800eb30 <mem_link_valid+0x74>)
 800eb10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d006      	beq.n	800eb26 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	885b      	ldrh	r3, [r3, #2]
 800eb1c:	8afa      	ldrh	r2, [r7, #22]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d001      	beq.n	800eb26 <mem_link_valid+0x6a>
    return 0;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e000      	b.n	800eb28 <mem_link_valid+0x6c>
  }
  return 1;
 800eb26:	2301      	movs	r3, #1
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3718      	adds	r7, #24
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	2000a9b4 	.word	0x2000a9b4

0800eb34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d070      	beq.n	800ec24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f003 0303 	and.w	r3, r3, #3
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00d      	beq.n	800eb68 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800eb4c:	4b37      	ldr	r3, [pc, #220]	; (800ec2c <mem_free+0xf8>)
 800eb4e:	f240 2273 	movw	r2, #627	; 0x273
 800eb52:	4937      	ldr	r1, [pc, #220]	; (800ec30 <mem_free+0xfc>)
 800eb54:	4837      	ldr	r0, [pc, #220]	; (800ec34 <mem_free+0x100>)
 800eb56:	f00a fb37 	bl	80191c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eb5a:	f00a f921 	bl	8018da0 <sys_arch_protect>
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	f00a f92b 	bl	8018dbc <sys_arch_unprotect>
    return;
 800eb66:	e05e      	b.n	800ec26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	3b08      	subs	r3, #8
 800eb6c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800eb6e:	4b32      	ldr	r3, [pc, #200]	; (800ec38 <mem_free+0x104>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d306      	bcc.n	800eb86 <mem_free+0x52>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f103 020c 	add.w	r2, r3, #12
 800eb7e:	4b2f      	ldr	r3, [pc, #188]	; (800ec3c <mem_free+0x108>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d90d      	bls.n	800eba2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800eb86:	4b29      	ldr	r3, [pc, #164]	; (800ec2c <mem_free+0xf8>)
 800eb88:	f240 227f 	movw	r2, #639	; 0x27f
 800eb8c:	492c      	ldr	r1, [pc, #176]	; (800ec40 <mem_free+0x10c>)
 800eb8e:	4829      	ldr	r0, [pc, #164]	; (800ec34 <mem_free+0x100>)
 800eb90:	f00a fb1a 	bl	80191c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eb94:	f00a f904 	bl	8018da0 <sys_arch_protect>
 800eb98:	6138      	str	r0, [r7, #16]
 800eb9a:	6938      	ldr	r0, [r7, #16]
 800eb9c:	f00a f90e 	bl	8018dbc <sys_arch_unprotect>
    return;
 800eba0:	e041      	b.n	800ec26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800eba2:	4828      	ldr	r0, [pc, #160]	; (800ec44 <mem_free+0x110>)
 800eba4:	f00a f8c0 	bl	8018d28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	791b      	ldrb	r3, [r3, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d110      	bne.n	800ebd2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ebb0:	4b1e      	ldr	r3, [pc, #120]	; (800ec2c <mem_free+0xf8>)
 800ebb2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ebb6:	4924      	ldr	r1, [pc, #144]	; (800ec48 <mem_free+0x114>)
 800ebb8:	481e      	ldr	r0, [pc, #120]	; (800ec34 <mem_free+0x100>)
 800ebba:	f00a fb05 	bl	80191c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ebbe:	4821      	ldr	r0, [pc, #132]	; (800ec44 <mem_free+0x110>)
 800ebc0:	f00a f8c1 	bl	8018d46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ebc4:	f00a f8ec 	bl	8018da0 <sys_arch_protect>
 800ebc8:	6178      	str	r0, [r7, #20]
 800ebca:	6978      	ldr	r0, [r7, #20]
 800ebcc:	f00a f8f6 	bl	8018dbc <sys_arch_unprotect>
    return;
 800ebd0:	e029      	b.n	800ec26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ebd2:	69f8      	ldr	r0, [r7, #28]
 800ebd4:	f7ff ff72 	bl	800eabc <mem_link_valid>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d110      	bne.n	800ec00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <mem_free+0xf8>)
 800ebe0:	f240 2295 	movw	r2, #661	; 0x295
 800ebe4:	4919      	ldr	r1, [pc, #100]	; (800ec4c <mem_free+0x118>)
 800ebe6:	4813      	ldr	r0, [pc, #76]	; (800ec34 <mem_free+0x100>)
 800ebe8:	f00a faee 	bl	80191c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ebec:	4815      	ldr	r0, [pc, #84]	; (800ec44 <mem_free+0x110>)
 800ebee:	f00a f8aa 	bl	8018d46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ebf2:	f00a f8d5 	bl	8018da0 <sys_arch_protect>
 800ebf6:	61b8      	str	r0, [r7, #24]
 800ebf8:	69b8      	ldr	r0, [r7, #24]
 800ebfa:	f00a f8df 	bl	8018dbc <sys_arch_unprotect>
    return;
 800ebfe:	e012      	b.n	800ec26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	2200      	movs	r2, #0
 800ec04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ec06:	4b12      	ldr	r3, [pc, #72]	; (800ec50 <mem_free+0x11c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	69fa      	ldr	r2, [r7, #28]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d202      	bcs.n	800ec16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ec10:	4a0f      	ldr	r2, [pc, #60]	; (800ec50 <mem_free+0x11c>)
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ec16:	69f8      	ldr	r0, [r7, #28]
 800ec18:	f7ff fe5c 	bl	800e8d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ec1c:	4809      	ldr	r0, [pc, #36]	; (800ec44 <mem_free+0x110>)
 800ec1e:	f00a f892 	bl	8018d46 <sys_mutex_unlock>
 800ec22:	e000      	b.n	800ec26 <mem_free+0xf2>
    return;
 800ec24:	bf00      	nop
}
 800ec26:	3720      	adds	r7, #32
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	0801a880 	.word	0x0801a880
 800ec30:	0801a970 	.word	0x0801a970
 800ec34:	0801a8c8 	.word	0x0801a8c8
 800ec38:	2000a9b0 	.word	0x2000a9b0
 800ec3c:	2000a9b4 	.word	0x2000a9b4
 800ec40:	0801a994 	.word	0x0801a994
 800ec44:	2000a9b8 	.word	0x2000a9b8
 800ec48:	0801a9b0 	.word	0x0801a9b0
 800ec4c:	0801a9d8 	.word	0x0801a9d8
 800ec50:	2000a9bc 	.word	0x2000a9bc

0800ec54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ec60:	887b      	ldrh	r3, [r7, #2]
 800ec62:	3303      	adds	r3, #3
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	f023 0303 	bic.w	r3, r3, #3
 800ec6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ec6c:	8bfb      	ldrh	r3, [r7, #30]
 800ec6e:	2b0b      	cmp	r3, #11
 800ec70:	d801      	bhi.n	800ec76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ec72:	230c      	movs	r3, #12
 800ec74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ec76:	8bfb      	ldrh	r3, [r7, #30]
 800ec78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec7c:	d803      	bhi.n	800ec86 <mem_trim+0x32>
 800ec7e:	8bfa      	ldrh	r2, [r7, #30]
 800ec80:	887b      	ldrh	r3, [r7, #2]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d201      	bcs.n	800ec8a <mem_trim+0x36>
    return NULL;
 800ec86:	2300      	movs	r3, #0
 800ec88:	e0d8      	b.n	800ee3c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ec8a:	4b6e      	ldr	r3, [pc, #440]	; (800ee44 <mem_trim+0x1f0>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d304      	bcc.n	800ec9e <mem_trim+0x4a>
 800ec94:	4b6c      	ldr	r3, [pc, #432]	; (800ee48 <mem_trim+0x1f4>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d306      	bcc.n	800ecac <mem_trim+0x58>
 800ec9e:	4b6b      	ldr	r3, [pc, #428]	; (800ee4c <mem_trim+0x1f8>)
 800eca0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800eca4:	496a      	ldr	r1, [pc, #424]	; (800ee50 <mem_trim+0x1fc>)
 800eca6:	486b      	ldr	r0, [pc, #428]	; (800ee54 <mem_trim+0x200>)
 800eca8:	f00a fa8e 	bl	80191c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ecac:	4b65      	ldr	r3, [pc, #404]	; (800ee44 <mem_trim+0x1f0>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d304      	bcc.n	800ecc0 <mem_trim+0x6c>
 800ecb6:	4b64      	ldr	r3, [pc, #400]	; (800ee48 <mem_trim+0x1f4>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d307      	bcc.n	800ecd0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ecc0:	f00a f86e 	bl	8018da0 <sys_arch_protect>
 800ecc4:	60b8      	str	r0, [r7, #8]
 800ecc6:	68b8      	ldr	r0, [r7, #8]
 800ecc8:	f00a f878 	bl	8018dbc <sys_arch_unprotect>
    return rmem;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	e0b5      	b.n	800ee3c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3b08      	subs	r3, #8
 800ecd4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ecd6:	69b8      	ldr	r0, [r7, #24]
 800ecd8:	f7ff fdea 	bl	800e8b0 <mem_to_ptr>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	881a      	ldrh	r2, [r3, #0]
 800ece4:	8afb      	ldrh	r3, [r7, #22]
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	3b08      	subs	r3, #8
 800ecec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ecee:	8bfa      	ldrh	r2, [r7, #30]
 800ecf0:	8abb      	ldrh	r3, [r7, #20]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d906      	bls.n	800ed04 <mem_trim+0xb0>
 800ecf6:	4b55      	ldr	r3, [pc, #340]	; (800ee4c <mem_trim+0x1f8>)
 800ecf8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ecfc:	4956      	ldr	r1, [pc, #344]	; (800ee58 <mem_trim+0x204>)
 800ecfe:	4855      	ldr	r0, [pc, #340]	; (800ee54 <mem_trim+0x200>)
 800ed00:	f00a fa62 	bl	80191c8 <iprintf>
  if (newsize > size) {
 800ed04:	8bfa      	ldrh	r2, [r7, #30]
 800ed06:	8abb      	ldrh	r3, [r7, #20]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d901      	bls.n	800ed10 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	e095      	b.n	800ee3c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ed10:	8bfa      	ldrh	r2, [r7, #30]
 800ed12:	8abb      	ldrh	r3, [r7, #20]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d101      	bne.n	800ed1c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	e08f      	b.n	800ee3c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ed1c:	484f      	ldr	r0, [pc, #316]	; (800ee5c <mem_trim+0x208>)
 800ed1e:	f00a f803 	bl	8018d28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff fdb0 	bl	800e88c <ptr_to_mem>
 800ed2c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	791b      	ldrb	r3, [r3, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d13f      	bne.n	800edb6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	881b      	ldrh	r3, [r3, #0]
 800ed3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed3e:	d106      	bne.n	800ed4e <mem_trim+0xfa>
 800ed40:	4b42      	ldr	r3, [pc, #264]	; (800ee4c <mem_trim+0x1f8>)
 800ed42:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ed46:	4946      	ldr	r1, [pc, #280]	; (800ee60 <mem_trim+0x20c>)
 800ed48:	4842      	ldr	r0, [pc, #264]	; (800ee54 <mem_trim+0x200>)
 800ed4a:	f00a fa3d 	bl	80191c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	881b      	ldrh	r3, [r3, #0]
 800ed52:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ed54:	8afa      	ldrh	r2, [r7, #22]
 800ed56:	8bfb      	ldrh	r3, [r7, #30]
 800ed58:	4413      	add	r3, r2
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ed60:	4b40      	ldr	r3, [pc, #256]	; (800ee64 <mem_trim+0x210>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d106      	bne.n	800ed78 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ed6a:	89fb      	ldrh	r3, [r7, #14]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff fd8d 	bl	800e88c <ptr_to_mem>
 800ed72:	4603      	mov	r3, r0
 800ed74:	4a3b      	ldr	r2, [pc, #236]	; (800ee64 <mem_trim+0x210>)
 800ed76:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ed78:	89fb      	ldrh	r3, [r7, #14]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7ff fd86 	bl	800e88c <ptr_to_mem>
 800ed80:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2200      	movs	r2, #0
 800ed86:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	89ba      	ldrh	r2, [r7, #12]
 800ed8c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	8afa      	ldrh	r2, [r7, #22]
 800ed92:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	89fa      	ldrh	r2, [r7, #14]
 800ed98:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eda2:	d047      	beq.n	800ee34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	881b      	ldrh	r3, [r3, #0]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7ff fd6f 	bl	800e88c <ptr_to_mem>
 800edae:	4602      	mov	r2, r0
 800edb0:	89fb      	ldrh	r3, [r7, #14]
 800edb2:	8053      	strh	r3, [r2, #2]
 800edb4:	e03e      	b.n	800ee34 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800edb6:	8bfb      	ldrh	r3, [r7, #30]
 800edb8:	f103 0214 	add.w	r2, r3, #20
 800edbc:	8abb      	ldrh	r3, [r7, #20]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d838      	bhi.n	800ee34 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800edc2:	8afa      	ldrh	r2, [r7, #22]
 800edc4:	8bfb      	ldrh	r3, [r7, #30]
 800edc6:	4413      	add	r3, r2
 800edc8:	b29b      	uxth	r3, r3
 800edca:	3308      	adds	r3, #8
 800edcc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800edd6:	d106      	bne.n	800ede6 <mem_trim+0x192>
 800edd8:	4b1c      	ldr	r3, [pc, #112]	; (800ee4c <mem_trim+0x1f8>)
 800edda:	f240 3216 	movw	r2, #790	; 0x316
 800edde:	4920      	ldr	r1, [pc, #128]	; (800ee60 <mem_trim+0x20c>)
 800ede0:	481c      	ldr	r0, [pc, #112]	; (800ee54 <mem_trim+0x200>)
 800ede2:	f00a f9f1 	bl	80191c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ede6:	89fb      	ldrh	r3, [r7, #14]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fd4f 	bl	800e88c <ptr_to_mem>
 800edee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800edf0:	4b1c      	ldr	r3, [pc, #112]	; (800ee64 <mem_trim+0x210>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d202      	bcs.n	800ee00 <mem_trim+0x1ac>
      lfree = mem2;
 800edfa:	4a1a      	ldr	r2, [pc, #104]	; (800ee64 <mem_trim+0x210>)
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	2200      	movs	r2, #0
 800ee04:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	881a      	ldrh	r2, [r3, #0]
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	8afa      	ldrh	r2, [r7, #22]
 800ee12:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	89fa      	ldrh	r2, [r7, #14]
 800ee18:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee22:	d007      	beq.n	800ee34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7ff fd2f 	bl	800e88c <ptr_to_mem>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	89fb      	ldrh	r3, [r7, #14]
 800ee32:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ee34:	4809      	ldr	r0, [pc, #36]	; (800ee5c <mem_trim+0x208>)
 800ee36:	f009 ff86 	bl	8018d46 <sys_mutex_unlock>
  return rmem;
 800ee3a:	687b      	ldr	r3, [r7, #4]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3720      	adds	r7, #32
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	2000a9b0 	.word	0x2000a9b0
 800ee48:	2000a9b4 	.word	0x2000a9b4
 800ee4c:	0801a880 	.word	0x0801a880
 800ee50:	0801aa0c 	.word	0x0801aa0c
 800ee54:	0801a8c8 	.word	0x0801a8c8
 800ee58:	0801aa24 	.word	0x0801aa24
 800ee5c:	2000a9b8 	.word	0x2000a9b8
 800ee60:	0801aa44 	.word	0x0801aa44
 800ee64:	2000a9bc 	.word	0x2000a9bc

0800ee68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ee72:	88fb      	ldrh	r3, [r7, #6]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d101      	bne.n	800ee7c <mem_malloc+0x14>
    return NULL;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e0e2      	b.n	800f042 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ee7c:	88fb      	ldrh	r3, [r7, #6]
 800ee7e:	3303      	adds	r3, #3
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	f023 0303 	bic.w	r3, r3, #3
 800ee86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ee88:	8bbb      	ldrh	r3, [r7, #28]
 800ee8a:	2b0b      	cmp	r3, #11
 800ee8c:	d801      	bhi.n	800ee92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ee8e:	230c      	movs	r3, #12
 800ee90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ee92:	8bbb      	ldrh	r3, [r7, #28]
 800ee94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee98:	d803      	bhi.n	800eea2 <mem_malloc+0x3a>
 800ee9a:	8bba      	ldrh	r2, [r7, #28]
 800ee9c:	88fb      	ldrh	r3, [r7, #6]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d201      	bcs.n	800eea6 <mem_malloc+0x3e>
    return NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	e0cd      	b.n	800f042 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800eea6:	4869      	ldr	r0, [pc, #420]	; (800f04c <mem_malloc+0x1e4>)
 800eea8:	f009 ff3e 	bl	8018d28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800eeac:	4b68      	ldr	r3, [pc, #416]	; (800f050 <mem_malloc+0x1e8>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fcfd 	bl	800e8b0 <mem_to_ptr>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	83fb      	strh	r3, [r7, #30]
 800eeba:	e0b7      	b.n	800f02c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800eebc:	8bfb      	ldrh	r3, [r7, #30]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff fce4 	bl	800e88c <ptr_to_mem>
 800eec4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	791b      	ldrb	r3, [r3, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f040 80a7 	bne.w	800f01e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	8bfb      	ldrh	r3, [r7, #30]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	f1a3 0208 	sub.w	r2, r3, #8
 800eede:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800eee0:	429a      	cmp	r2, r3
 800eee2:	f0c0 809c 	bcc.w	800f01e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	8bfb      	ldrh	r3, [r7, #30]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	f1a3 0208 	sub.w	r2, r3, #8
 800eef4:	8bbb      	ldrh	r3, [r7, #28]
 800eef6:	3314      	adds	r3, #20
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d333      	bcc.n	800ef64 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800eefc:	8bfa      	ldrh	r2, [r7, #30]
 800eefe:	8bbb      	ldrh	r3, [r7, #28]
 800ef00:	4413      	add	r3, r2
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	3308      	adds	r3, #8
 800ef06:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ef08:	8a7b      	ldrh	r3, [r7, #18]
 800ef0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef0e:	d106      	bne.n	800ef1e <mem_malloc+0xb6>
 800ef10:	4b50      	ldr	r3, [pc, #320]	; (800f054 <mem_malloc+0x1ec>)
 800ef12:	f240 3287 	movw	r2, #903	; 0x387
 800ef16:	4950      	ldr	r1, [pc, #320]	; (800f058 <mem_malloc+0x1f0>)
 800ef18:	4850      	ldr	r0, [pc, #320]	; (800f05c <mem_malloc+0x1f4>)
 800ef1a:	f00a f955 	bl	80191c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ef1e:	8a7b      	ldrh	r3, [r7, #18]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fcb3 	bl	800e88c <ptr_to_mem>
 800ef26:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	881a      	ldrh	r2, [r3, #0]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	8bfa      	ldrh	r2, [r7, #30]
 800ef3a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	8a7a      	ldrh	r2, [r7, #18]
 800ef40:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	2201      	movs	r2, #1
 800ef46:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef50:	d00b      	beq.n	800ef6a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7ff fc98 	bl	800e88c <ptr_to_mem>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	8a7b      	ldrh	r3, [r7, #18]
 800ef60:	8053      	strh	r3, [r2, #2]
 800ef62:	e002      	b.n	800ef6a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	2201      	movs	r2, #1
 800ef68:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ef6a:	4b39      	ldr	r3, [pc, #228]	; (800f050 <mem_malloc+0x1e8>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	697a      	ldr	r2, [r7, #20]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d127      	bne.n	800efc4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ef74:	4b36      	ldr	r3, [pc, #216]	; (800f050 <mem_malloc+0x1e8>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ef7a:	e005      	b.n	800ef88 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	881b      	ldrh	r3, [r3, #0]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fc83 	bl	800e88c <ptr_to_mem>
 800ef86:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	791b      	ldrb	r3, [r3, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d004      	beq.n	800ef9a <mem_malloc+0x132>
 800ef90:	4b33      	ldr	r3, [pc, #204]	; (800f060 <mem_malloc+0x1f8>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	69ba      	ldr	r2, [r7, #24]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d1f0      	bne.n	800ef7c <mem_malloc+0x114>
          }
          lfree = cur;
 800ef9a:	4a2d      	ldr	r2, [pc, #180]	; (800f050 <mem_malloc+0x1e8>)
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800efa0:	4b2b      	ldr	r3, [pc, #172]	; (800f050 <mem_malloc+0x1e8>)
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	4b2e      	ldr	r3, [pc, #184]	; (800f060 <mem_malloc+0x1f8>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d00b      	beq.n	800efc4 <mem_malloc+0x15c>
 800efac:	4b28      	ldr	r3, [pc, #160]	; (800f050 <mem_malloc+0x1e8>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	791b      	ldrb	r3, [r3, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d006      	beq.n	800efc4 <mem_malloc+0x15c>
 800efb6:	4b27      	ldr	r3, [pc, #156]	; (800f054 <mem_malloc+0x1ec>)
 800efb8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800efbc:	4929      	ldr	r1, [pc, #164]	; (800f064 <mem_malloc+0x1fc>)
 800efbe:	4827      	ldr	r0, [pc, #156]	; (800f05c <mem_malloc+0x1f4>)
 800efc0:	f00a f902 	bl	80191c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800efc4:	4821      	ldr	r0, [pc, #132]	; (800f04c <mem_malloc+0x1e4>)
 800efc6:	f009 febe 	bl	8018d46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800efca:	8bba      	ldrh	r2, [r7, #28]
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	4413      	add	r3, r2
 800efd0:	3308      	adds	r3, #8
 800efd2:	4a23      	ldr	r2, [pc, #140]	; (800f060 <mem_malloc+0x1f8>)
 800efd4:	6812      	ldr	r2, [r2, #0]
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d906      	bls.n	800efe8 <mem_malloc+0x180>
 800efda:	4b1e      	ldr	r3, [pc, #120]	; (800f054 <mem_malloc+0x1ec>)
 800efdc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800efe0:	4921      	ldr	r1, [pc, #132]	; (800f068 <mem_malloc+0x200>)
 800efe2:	481e      	ldr	r0, [pc, #120]	; (800f05c <mem_malloc+0x1f4>)
 800efe4:	f00a f8f0 	bl	80191c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	f003 0303 	and.w	r3, r3, #3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d006      	beq.n	800f000 <mem_malloc+0x198>
 800eff2:	4b18      	ldr	r3, [pc, #96]	; (800f054 <mem_malloc+0x1ec>)
 800eff4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800eff8:	491c      	ldr	r1, [pc, #112]	; (800f06c <mem_malloc+0x204>)
 800effa:	4818      	ldr	r0, [pc, #96]	; (800f05c <mem_malloc+0x1f4>)
 800effc:	f00a f8e4 	bl	80191c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	f003 0303 	and.w	r3, r3, #3
 800f006:	2b00      	cmp	r3, #0
 800f008:	d006      	beq.n	800f018 <mem_malloc+0x1b0>
 800f00a:	4b12      	ldr	r3, [pc, #72]	; (800f054 <mem_malloc+0x1ec>)
 800f00c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f010:	4917      	ldr	r1, [pc, #92]	; (800f070 <mem_malloc+0x208>)
 800f012:	4812      	ldr	r0, [pc, #72]	; (800f05c <mem_malloc+0x1f4>)
 800f014:	f00a f8d8 	bl	80191c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	3308      	adds	r3, #8
 800f01c:	e011      	b.n	800f042 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f01e:	8bfb      	ldrh	r3, [r7, #30]
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff fc33 	bl	800e88c <ptr_to_mem>
 800f026:	4603      	mov	r3, r0
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f02c:	8bfa      	ldrh	r2, [r7, #30]
 800f02e:	8bbb      	ldrh	r3, [r7, #28]
 800f030:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f034:	429a      	cmp	r2, r3
 800f036:	f4ff af41 	bcc.w	800eebc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f03a:	4804      	ldr	r0, [pc, #16]	; (800f04c <mem_malloc+0x1e4>)
 800f03c:	f009 fe83 	bl	8018d46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3720      	adds	r7, #32
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	2000a9b8 	.word	0x2000a9b8
 800f050:	2000a9bc 	.word	0x2000a9bc
 800f054:	0801a880 	.word	0x0801a880
 800f058:	0801aa44 	.word	0x0801aa44
 800f05c:	0801a8c8 	.word	0x0801a8c8
 800f060:	2000a9b4 	.word	0x2000a9b4
 800f064:	0801aa58 	.word	0x0801aa58
 800f068:	0801aa74 	.word	0x0801aa74
 800f06c:	0801aaa4 	.word	0x0801aaa4
 800f070:	0801aad4 	.word	0x0801aad4

0800f074 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	2200      	movs	r2, #0
 800f082:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	3303      	adds	r3, #3
 800f08a:	f023 0303 	bic.w	r3, r3, #3
 800f08e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f090:	2300      	movs	r3, #0
 800f092:	60fb      	str	r3, [r7, #12]
 800f094:	e011      	b.n	800f0ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	60fb      	str	r3, [r7, #12]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	885b      	ldrh	r3, [r3, #2]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	dbe7      	blt.n	800f096 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f0c6:	bf00      	nop
 800f0c8:	bf00      	nop
 800f0ca:	3714      	adds	r7, #20
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f0da:	2300      	movs	r3, #0
 800f0dc:	80fb      	strh	r3, [r7, #6]
 800f0de:	e009      	b.n	800f0f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f0e0:	88fb      	ldrh	r3, [r7, #6]
 800f0e2:	4a08      	ldr	r2, [pc, #32]	; (800f104 <memp_init+0x30>)
 800f0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7ff ffc3 	bl	800f074 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f0ee:	88fb      	ldrh	r3, [r7, #6]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	80fb      	strh	r3, [r7, #6]
 800f0f4:	88fb      	ldrh	r3, [r7, #6]
 800f0f6:	2b0c      	cmp	r3, #12
 800f0f8:	d9f2      	bls.n	800f0e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f0fa:	bf00      	nop
 800f0fc:	bf00      	nop
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	0801d388 	.word	0x0801d388

0800f108 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f110:	f009 fe46 	bl	8018da0 <sys_arch_protect>
 800f114:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d015      	beq.n	800f150 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	6812      	ldr	r2, [r2, #0]
 800f12c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d006      	beq.n	800f146 <do_memp_malloc_pool+0x3e>
 800f138:	4b09      	ldr	r3, [pc, #36]	; (800f160 <do_memp_malloc_pool+0x58>)
 800f13a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f13e:	4909      	ldr	r1, [pc, #36]	; (800f164 <do_memp_malloc_pool+0x5c>)
 800f140:	4809      	ldr	r0, [pc, #36]	; (800f168 <do_memp_malloc_pool+0x60>)
 800f142:	f00a f841 	bl	80191c8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f009 fe38 	bl	8018dbc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	e003      	b.n	800f158 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f009 fe33 	bl	8018dbc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	0801aaf8 	.word	0x0801aaf8
 800f164:	0801ab28 	.word	0x0801ab28
 800f168:	0801ab4c 	.word	0x0801ab4c

0800f16c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d106      	bne.n	800f188 <memp_malloc_pool+0x1c>
 800f17a:	4b0a      	ldr	r3, [pc, #40]	; (800f1a4 <memp_malloc_pool+0x38>)
 800f17c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f180:	4909      	ldr	r1, [pc, #36]	; (800f1a8 <memp_malloc_pool+0x3c>)
 800f182:	480a      	ldr	r0, [pc, #40]	; (800f1ac <memp_malloc_pool+0x40>)
 800f184:	f00a f820 	bl	80191c8 <iprintf>
  if (desc == NULL) {
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <memp_malloc_pool+0x26>
    return NULL;
 800f18e:	2300      	movs	r3, #0
 800f190:	e003      	b.n	800f19a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff ffb8 	bl	800f108 <do_memp_malloc_pool>
 800f198:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	0801aaf8 	.word	0x0801aaf8
 800f1a8:	0801ab74 	.word	0x0801ab74
 800f1ac:	0801ab4c 	.word	0x0801ab4c

0800f1b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	2b0c      	cmp	r3, #12
 800f1be:	d908      	bls.n	800f1d2 <memp_malloc+0x22>
 800f1c0:	4b0a      	ldr	r3, [pc, #40]	; (800f1ec <memp_malloc+0x3c>)
 800f1c2:	f240 1257 	movw	r2, #343	; 0x157
 800f1c6:	490a      	ldr	r1, [pc, #40]	; (800f1f0 <memp_malloc+0x40>)
 800f1c8:	480a      	ldr	r0, [pc, #40]	; (800f1f4 <memp_malloc+0x44>)
 800f1ca:	f009 fffd 	bl	80191c8 <iprintf>
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	e008      	b.n	800f1e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	4a08      	ldr	r2, [pc, #32]	; (800f1f8 <memp_malloc+0x48>)
 800f1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff ff94 	bl	800f108 <do_memp_malloc_pool>
 800f1e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	0801aaf8 	.word	0x0801aaf8
 800f1f0:	0801ab88 	.word	0x0801ab88
 800f1f4:	0801ab4c 	.word	0x0801ab4c
 800f1f8:	0801d388 	.word	0x0801d388

0800f1fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	f003 0303 	and.w	r3, r3, #3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d006      	beq.n	800f21e <do_memp_free_pool+0x22>
 800f210:	4b0d      	ldr	r3, [pc, #52]	; (800f248 <do_memp_free_pool+0x4c>)
 800f212:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f216:	490d      	ldr	r1, [pc, #52]	; (800f24c <do_memp_free_pool+0x50>)
 800f218:	480d      	ldr	r0, [pc, #52]	; (800f250 <do_memp_free_pool+0x54>)
 800f21a:	f009 ffd5 	bl	80191c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f222:	f009 fdbd 	bl	8018da0 <sys_arch_protect>
 800f226:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f23a:	68b8      	ldr	r0, [r7, #8]
 800f23c:	f009 fdbe 	bl	8018dbc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f240:	bf00      	nop
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	0801aaf8 	.word	0x0801aaf8
 800f24c:	0801aba8 	.word	0x0801aba8
 800f250:	0801ab4c 	.word	0x0801ab4c

0800f254 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d106      	bne.n	800f272 <memp_free_pool+0x1e>
 800f264:	4b0a      	ldr	r3, [pc, #40]	; (800f290 <memp_free_pool+0x3c>)
 800f266:	f240 1295 	movw	r2, #405	; 0x195
 800f26a:	490a      	ldr	r1, [pc, #40]	; (800f294 <memp_free_pool+0x40>)
 800f26c:	480a      	ldr	r0, [pc, #40]	; (800f298 <memp_free_pool+0x44>)
 800f26e:	f009 ffab 	bl	80191c8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d007      	beq.n	800f288 <memp_free_pool+0x34>
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7ff ffbb 	bl	800f1fc <do_memp_free_pool>
 800f286:	e000      	b.n	800f28a <memp_free_pool+0x36>
    return;
 800f288:	bf00      	nop
}
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	0801aaf8 	.word	0x0801aaf8
 800f294:	0801ab74 	.word	0x0801ab74
 800f298:	0801ab4c 	.word	0x0801ab4c

0800f29c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	6039      	str	r1, [r7, #0]
 800f2a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	2b0c      	cmp	r3, #12
 800f2ac:	d907      	bls.n	800f2be <memp_free+0x22>
 800f2ae:	4b0c      	ldr	r3, [pc, #48]	; (800f2e0 <memp_free+0x44>)
 800f2b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f2b4:	490b      	ldr	r1, [pc, #44]	; (800f2e4 <memp_free+0x48>)
 800f2b6:	480c      	ldr	r0, [pc, #48]	; (800f2e8 <memp_free+0x4c>)
 800f2b8:	f009 ff86 	bl	80191c8 <iprintf>
 800f2bc:	e00c      	b.n	800f2d8 <memp_free+0x3c>

  if (mem == NULL) {
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d008      	beq.n	800f2d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f2c4:	79fb      	ldrb	r3, [r7, #7]
 800f2c6:	4a09      	ldr	r2, [pc, #36]	; (800f2ec <memp_free+0x50>)
 800f2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7ff ff94 	bl	800f1fc <do_memp_free_pool>
 800f2d4:	e000      	b.n	800f2d8 <memp_free+0x3c>
    return;
 800f2d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	0801aaf8 	.word	0x0801aaf8
 800f2e4:	0801abc8 	.word	0x0801abc8
 800f2e8:	0801ab4c 	.word	0x0801ab4c
 800f2ec:	0801d388 	.word	0x0801d388

0800f2f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f2f4:	bf00      	nop
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
	...

0800f300 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d108      	bne.n	800f326 <netif_add+0x26>
 800f314:	4b57      	ldr	r3, [pc, #348]	; (800f474 <netif_add+0x174>)
 800f316:	f240 1227 	movw	r2, #295	; 0x127
 800f31a:	4957      	ldr	r1, [pc, #348]	; (800f478 <netif_add+0x178>)
 800f31c:	4857      	ldr	r0, [pc, #348]	; (800f47c <netif_add+0x17c>)
 800f31e:	f009 ff53 	bl	80191c8 <iprintf>
 800f322:	2300      	movs	r3, #0
 800f324:	e0a2      	b.n	800f46c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d108      	bne.n	800f33e <netif_add+0x3e>
 800f32c:	4b51      	ldr	r3, [pc, #324]	; (800f474 <netif_add+0x174>)
 800f32e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f332:	4953      	ldr	r1, [pc, #332]	; (800f480 <netif_add+0x180>)
 800f334:	4851      	ldr	r0, [pc, #324]	; (800f47c <netif_add+0x17c>)
 800f336:	f009 ff47 	bl	80191c8 <iprintf>
 800f33a:	2300      	movs	r3, #0
 800f33c:	e096      	b.n	800f46c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d101      	bne.n	800f348 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f344:	4b4f      	ldr	r3, [pc, #316]	; (800f484 <netif_add+0x184>)
 800f346:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f34e:	4b4d      	ldr	r3, [pc, #308]	; (800f484 <netif_add+0x184>)
 800f350:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f358:	4b4a      	ldr	r3, [pc, #296]	; (800f484 <netif_add+0x184>)
 800f35a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2200      	movs	r2, #0
 800f360:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2200      	movs	r2, #0
 800f36c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	4a45      	ldr	r2, [pc, #276]	; (800f488 <netif_add+0x188>)
 800f372:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2200      	movs	r2, #0
 800f378:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6a3a      	ldr	r2, [r7, #32]
 800f38c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f38e:	4b3f      	ldr	r3, [pc, #252]	; (800f48c <netif_add+0x18c>)
 800f390:	781a      	ldrb	r2, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f39c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	68b9      	ldr	r1, [r7, #8]
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f000 f913 	bl	800f5d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	4798      	blx	r3
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <netif_add+0xba>
    return NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	e058      	b.n	800f46c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3c0:	2bff      	cmp	r3, #255	; 0xff
 800f3c2:	d103      	bne.n	800f3cc <netif_add+0xcc>
        netif->num = 0;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f3d0:	4b2f      	ldr	r3, [pc, #188]	; (800f490 <netif_add+0x190>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	617b      	str	r3, [r7, #20]
 800f3d6:	e02b      	b.n	800f430 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f3d8:	697a      	ldr	r2, [r7, #20]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d106      	bne.n	800f3ee <netif_add+0xee>
 800f3e0:	4b24      	ldr	r3, [pc, #144]	; (800f474 <netif_add+0x174>)
 800f3e2:	f240 128b 	movw	r2, #395	; 0x18b
 800f3e6:	492b      	ldr	r1, [pc, #172]	; (800f494 <netif_add+0x194>)
 800f3e8:	4824      	ldr	r0, [pc, #144]	; (800f47c <netif_add+0x17c>)
 800f3ea:	f009 feed 	bl	80191c8 <iprintf>
        num_netifs++;
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2bff      	cmp	r3, #255	; 0xff
 800f3f8:	dd06      	ble.n	800f408 <netif_add+0x108>
 800f3fa:	4b1e      	ldr	r3, [pc, #120]	; (800f474 <netif_add+0x174>)
 800f3fc:	f240 128d 	movw	r2, #397	; 0x18d
 800f400:	4925      	ldr	r1, [pc, #148]	; (800f498 <netif_add+0x198>)
 800f402:	481e      	ldr	r0, [pc, #120]	; (800f47c <netif_add+0x17c>)
 800f404:	f009 fee0 	bl	80191c8 <iprintf>
        if (netif2->num == netif->num) {
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f414:	429a      	cmp	r2, r3
 800f416:	d108      	bne.n	800f42a <netif_add+0x12a>
          netif->num++;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f41e:	3301      	adds	r3, #1
 800f420:	b2da      	uxtb	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f428:	e005      	b.n	800f436 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	617b      	str	r3, [r7, #20]
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1d0      	bne.n	800f3d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1be      	bne.n	800f3ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f442:	2bfe      	cmp	r3, #254	; 0xfe
 800f444:	d103      	bne.n	800f44e <netif_add+0x14e>
    netif_num = 0;
 800f446:	4b11      	ldr	r3, [pc, #68]	; (800f48c <netif_add+0x18c>)
 800f448:	2200      	movs	r2, #0
 800f44a:	701a      	strb	r2, [r3, #0]
 800f44c:	e006      	b.n	800f45c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f454:	3301      	adds	r3, #1
 800f456:	b2da      	uxtb	r2, r3
 800f458:	4b0c      	ldr	r3, [pc, #48]	; (800f48c <netif_add+0x18c>)
 800f45a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f45c:	4b0c      	ldr	r3, [pc, #48]	; (800f490 <netif_add+0x190>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f464:	4a0a      	ldr	r2, [pc, #40]	; (800f490 <netif_add+0x190>)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f46a:	68fb      	ldr	r3, [r7, #12]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	0801abe4 	.word	0x0801abe4
 800f478:	0801ac78 	.word	0x0801ac78
 800f47c:	0801ac34 	.word	0x0801ac34
 800f480:	0801ac94 	.word	0x0801ac94
 800f484:	0801d3fc 	.word	0x0801d3fc
 800f488:	0800f8ab 	.word	0x0800f8ab
 800f48c:	2000da94 	.word	0x2000da94
 800f490:	2000da8c 	.word	0x2000da8c
 800f494:	0801acb8 	.word	0x0801acb8
 800f498:	0801accc 	.word	0x0801accc

0800f49c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f4a6:	6839      	ldr	r1, [r7, #0]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f002 fc1f 	bl	8011cec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f007 f8ab 	bl	801660c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f4b6:	bf00      	nop
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
	...

0800f4c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <netif_do_set_ipaddr+0x20>
 800f4d2:	4b1d      	ldr	r3, [pc, #116]	; (800f548 <netif_do_set_ipaddr+0x88>)
 800f4d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f4d8:	491c      	ldr	r1, [pc, #112]	; (800f54c <netif_do_set_ipaddr+0x8c>)
 800f4da:	481d      	ldr	r0, [pc, #116]	; (800f550 <netif_do_set_ipaddr+0x90>)
 800f4dc:	f009 fe74 	bl	80191c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <netif_do_set_ipaddr+0x34>
 800f4e6:	4b18      	ldr	r3, [pc, #96]	; (800f548 <netif_do_set_ipaddr+0x88>)
 800f4e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f4ec:	4917      	ldr	r1, [pc, #92]	; (800f54c <netif_do_set_ipaddr+0x8c>)
 800f4ee:	4818      	ldr	r0, [pc, #96]	; (800f550 <netif_do_set_ipaddr+0x90>)
 800f4f0:	f009 fe6a 	bl	80191c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3304      	adds	r3, #4
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d01c      	beq.n	800f53c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	3304      	adds	r3, #4
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f512:	f107 0314 	add.w	r3, r7, #20
 800f516:	4619      	mov	r1, r3
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7ff ffbf 	bl	800f49c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <netif_do_set_ipaddr+0x6a>
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	e000      	b.n	800f52c <netif_do_set_ipaddr+0x6c>
 800f52a:	2300      	movs	r3, #0
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f530:	2101      	movs	r1, #1
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	f000 f8d2 	bl	800f6dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f538:	2301      	movs	r3, #1
 800f53a:	e000      	b.n	800f53e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3718      	adds	r7, #24
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	0801abe4 	.word	0x0801abe4
 800f54c:	0801acfc 	.word	0x0801acfc
 800f550:	0801ac34 	.word	0x0801ac34

0800f554 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	3308      	adds	r3, #8
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d00a      	beq.n	800f584 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d002      	beq.n	800f57a <netif_do_set_netmask+0x26>
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	e000      	b.n	800f57c <netif_do_set_netmask+0x28>
 800f57a:	2300      	movs	r3, #0
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f580:	2301      	movs	r3, #1
 800f582:	e000      	b.n	800f586 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3714      	adds	r7, #20
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f592:	b480      	push	{r7}
 800f594:	b085      	sub	sp, #20
 800f596:	af00      	add	r7, sp, #0
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	60b9      	str	r1, [r7, #8]
 800f59c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	330c      	adds	r3, #12
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d00a      	beq.n	800f5c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <netif_do_set_gw+0x26>
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	e000      	b.n	800f5ba <netif_do_set_gw+0x28>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e000      	b.n	800f5c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3714      	adds	r7, #20
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d101      	bne.n	800f5f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f5ec:	4b1c      	ldr	r3, [pc, #112]	; (800f660 <netif_set_addr+0x90>)
 800f5ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f5f6:	4b1a      	ldr	r3, [pc, #104]	; (800f660 <netif_set_addr+0x90>)
 800f5f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f600:	4b17      	ldr	r3, [pc, #92]	; (800f660 <netif_set_addr+0x90>)
 800f602:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d003      	beq.n	800f612 <netif_set_addr+0x42>
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <netif_set_addr+0x46>
 800f612:	2301      	movs	r3, #1
 800f614:	e000      	b.n	800f618 <netif_set_addr+0x48>
 800f616:	2300      	movs	r3, #0
 800f618:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d006      	beq.n	800f62e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f620:	f107 0310 	add.w	r3, r7, #16
 800f624:	461a      	mov	r2, r3
 800f626:	68b9      	ldr	r1, [r7, #8]
 800f628:	68f8      	ldr	r0, [r7, #12]
 800f62a:	f7ff ff49 	bl	800f4c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f62e:	69fa      	ldr	r2, [r7, #28]
 800f630:	6879      	ldr	r1, [r7, #4]
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f7ff ff8e 	bl	800f554 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f638:	69ba      	ldr	r2, [r7, #24]
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7ff ffa8 	bl	800f592 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d106      	bne.n	800f656 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f648:	f107 0310 	add.w	r3, r7, #16
 800f64c:	461a      	mov	r2, r3
 800f64e:	68b9      	ldr	r1, [r7, #8]
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f7ff ff35 	bl	800f4c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f656:	bf00      	nop
 800f658:	3720      	adds	r7, #32
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	0801d3fc 	.word	0x0801d3fc

0800f664 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f66c:	4a04      	ldr	r2, [pc, #16]	; (800f680 <netif_set_default+0x1c>)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f672:	bf00      	nop
 800f674:	370c      	adds	r7, #12
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	2000da90 	.word	0x2000da90

0800f684 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d107      	bne.n	800f6a2 <netif_set_up+0x1e>
 800f692:	4b0f      	ldr	r3, [pc, #60]	; (800f6d0 <netif_set_up+0x4c>)
 800f694:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f698:	490e      	ldr	r1, [pc, #56]	; (800f6d4 <netif_set_up+0x50>)
 800f69a:	480f      	ldr	r0, [pc, #60]	; (800f6d8 <netif_set_up+0x54>)
 800f69c:	f009 fd94 	bl	80191c8 <iprintf>
 800f6a0:	e013      	b.n	800f6ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6a8:	f003 0301 	and.w	r3, r3, #1
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10c      	bne.n	800f6ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6b6:	f043 0301 	orr.w	r3, r3, #1
 800f6ba:	b2da      	uxtb	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f6c2:	2103      	movs	r1, #3
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f809 	bl	800f6dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	0801abe4 	.word	0x0801abe4
 800f6d4:	0801ad6c 	.word	0x0801ad6c
 800f6d8:	0801ac34 	.word	0x0801ac34

0800f6dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d106      	bne.n	800f6fc <netif_issue_reports+0x20>
 800f6ee:	4b18      	ldr	r3, [pc, #96]	; (800f750 <netif_issue_reports+0x74>)
 800f6f0:	f240 326d 	movw	r2, #877	; 0x36d
 800f6f4:	4917      	ldr	r1, [pc, #92]	; (800f754 <netif_issue_reports+0x78>)
 800f6f6:	4818      	ldr	r0, [pc, #96]	; (800f758 <netif_issue_reports+0x7c>)
 800f6f8:	f009 fd66 	bl	80191c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f702:	f003 0304 	and.w	r3, r3, #4
 800f706:	2b00      	cmp	r3, #0
 800f708:	d01e      	beq.n	800f748 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f710:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f714:	2b00      	cmp	r3, #0
 800f716:	d017      	beq.n	800f748 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f718:	78fb      	ldrb	r3, [r7, #3]
 800f71a:	f003 0301 	and.w	r3, r3, #1
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d013      	beq.n	800f74a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	3304      	adds	r3, #4
 800f726:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00e      	beq.n	800f74a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f732:	f003 0308 	and.w	r3, r3, #8
 800f736:	2b00      	cmp	r3, #0
 800f738:	d007      	beq.n	800f74a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3304      	adds	r3, #4
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f007 fecd 	bl	80174e0 <etharp_request>
 800f746:	e000      	b.n	800f74a <netif_issue_reports+0x6e>
    return;
 800f748:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	0801abe4 	.word	0x0801abe4
 800f754:	0801ad88 	.word	0x0801ad88
 800f758:	0801ac34 	.word	0x0801ac34

0800f75c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d107      	bne.n	800f77a <netif_set_down+0x1e>
 800f76a:	4b12      	ldr	r3, [pc, #72]	; (800f7b4 <netif_set_down+0x58>)
 800f76c:	f240 329b 	movw	r2, #923	; 0x39b
 800f770:	4911      	ldr	r1, [pc, #68]	; (800f7b8 <netif_set_down+0x5c>)
 800f772:	4812      	ldr	r0, [pc, #72]	; (800f7bc <netif_set_down+0x60>)
 800f774:	f009 fd28 	bl	80191c8 <iprintf>
 800f778:	e019      	b.n	800f7ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d012      	beq.n	800f7ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f78e:	f023 0301 	bic.w	r3, r3, #1
 800f792:	b2da      	uxtb	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7a0:	f003 0308 	and.w	r3, r3, #8
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f007 fa57 	bl	8016c5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	0801abe4 	.word	0x0801abe4
 800f7b8:	0801adac 	.word	0x0801adac
 800f7bc:	0801ac34 	.word	0x0801ac34

0800f7c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d107      	bne.n	800f7de <netif_set_link_up+0x1e>
 800f7ce:	4b13      	ldr	r3, [pc, #76]	; (800f81c <netif_set_link_up+0x5c>)
 800f7d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f7d4:	4912      	ldr	r1, [pc, #72]	; (800f820 <netif_set_link_up+0x60>)
 800f7d6:	4813      	ldr	r0, [pc, #76]	; (800f824 <netif_set_link_up+0x64>)
 800f7d8:	f009 fcf6 	bl	80191c8 <iprintf>
 800f7dc:	e01b      	b.n	800f816 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7e4:	f003 0304 	and.w	r3, r3, #4
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d114      	bne.n	800f816 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7f2:	f043 0304 	orr.w	r3, r3, #4
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f7fe:	2103      	movs	r1, #3
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7ff ff6b 	bl	800f6dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	69db      	ldr	r3, [r3, #28]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d003      	beq.n	800f816 <netif_set_link_up+0x56>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	69db      	ldr	r3, [r3, #28]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	0801abe4 	.word	0x0801abe4
 800f820:	0801adcc 	.word	0x0801adcc
 800f824:	0801ac34 	.word	0x0801ac34

0800f828 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d107      	bne.n	800f846 <netif_set_link_down+0x1e>
 800f836:	4b11      	ldr	r3, [pc, #68]	; (800f87c <netif_set_link_down+0x54>)
 800f838:	f240 4206 	movw	r2, #1030	; 0x406
 800f83c:	4910      	ldr	r1, [pc, #64]	; (800f880 <netif_set_link_down+0x58>)
 800f83e:	4811      	ldr	r0, [pc, #68]	; (800f884 <netif_set_link_down+0x5c>)
 800f840:	f009 fcc2 	bl	80191c8 <iprintf>
 800f844:	e017      	b.n	800f876 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f84c:	f003 0304 	and.w	r3, r3, #4
 800f850:	2b00      	cmp	r3, #0
 800f852:	d010      	beq.n	800f876 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f85a:	f023 0304 	bic.w	r3, r3, #4
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	69db      	ldr	r3, [r3, #28]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d003      	beq.n	800f876 <netif_set_link_down+0x4e>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	69db      	ldr	r3, [r3, #28]
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	0801abe4 	.word	0x0801abe4
 800f880:	0801adf0 	.word	0x0801adf0
 800f884:	0801ac34 	.word	0x0801ac34

0800f888 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d002      	beq.n	800f89e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	61da      	str	r2, [r3, #28]
  }
}
 800f89e:	bf00      	nop
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f8aa:	b480      	push	{r7}
 800f8ac:	b085      	sub	sp, #20
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	60f8      	str	r0, [r7, #12]
 800f8b2:	60b9      	str	r1, [r7, #8]
 800f8b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f8b6:	f06f 030b 	mvn.w	r3, #11
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3714      	adds	r7, #20
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
	...

0800f8c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d013      	beq.n	800f900 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f8d8:	4b0d      	ldr	r3, [pc, #52]	; (800f910 <netif_get_by_index+0x48>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	60fb      	str	r3, [r7, #12]
 800f8de:	e00c      	b.n	800f8fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	79fa      	ldrb	r2, [r7, #7]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d101      	bne.n	800f8f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	e006      	b.n	800f902 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1ef      	bne.n	800f8e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3714      	adds	r7, #20
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	2000da8c 	.word	0x2000da8c

0800f914 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f91a:	f009 fa41 	bl	8018da0 <sys_arch_protect>
 800f91e:	6038      	str	r0, [r7, #0]
 800f920:	4b0d      	ldr	r3, [pc, #52]	; (800f958 <pbuf_free_ooseq+0x44>)
 800f922:	2200      	movs	r2, #0
 800f924:	701a      	strb	r2, [r3, #0]
 800f926:	6838      	ldr	r0, [r7, #0]
 800f928:	f009 fa48 	bl	8018dbc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f92c:	4b0b      	ldr	r3, [pc, #44]	; (800f95c <pbuf_free_ooseq+0x48>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	607b      	str	r3, [r7, #4]
 800f932:	e00a      	b.n	800f94a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d003      	beq.n	800f944 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f002 fa13 	bl	8011d68 <tcp_free_ooseq>
      return;
 800f942:	e005      	b.n	800f950 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	607b      	str	r3, [r7, #4]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1f1      	bne.n	800f934 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	2000da95 	.word	0x2000da95
 800f95c:	2000daa4 	.word	0x2000daa4

0800f960 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f968:	f7ff ffd4 	bl	800f914 <pbuf_free_ooseq>
}
 800f96c:	bf00      	nop
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f97a:	f009 fa11 	bl	8018da0 <sys_arch_protect>
 800f97e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f980:	4b0f      	ldr	r3, [pc, #60]	; (800f9c0 <pbuf_pool_is_empty+0x4c>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f986:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <pbuf_pool_is_empty+0x4c>)
 800f988:	2201      	movs	r2, #1
 800f98a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f009 fa15 	bl	8018dbc <sys_arch_unprotect>

  if (!queued) {
 800f992:	78fb      	ldrb	r3, [r7, #3]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10f      	bne.n	800f9b8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f998:	2100      	movs	r1, #0
 800f99a:	480a      	ldr	r0, [pc, #40]	; (800f9c4 <pbuf_pool_is_empty+0x50>)
 800f99c:	f7fe fea6 	bl	800e6ec <tcpip_try_callback>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d008      	beq.n	800f9b8 <pbuf_pool_is_empty+0x44>
 800f9a6:	f009 f9fb 	bl	8018da0 <sys_arch_protect>
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	4b04      	ldr	r3, [pc, #16]	; (800f9c0 <pbuf_pool_is_empty+0x4c>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	701a      	strb	r2, [r3, #0]
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f009 fa02 	bl	8018dbc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f9b8:	bf00      	nop
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	2000da95 	.word	0x2000da95
 800f9c4:	0800f961 	.word	0x0800f961

0800f9c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	4611      	mov	r1, r2
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	80fb      	strh	r3, [r7, #6]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	88ba      	ldrh	r2, [r7, #4]
 800f9f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f9f6:	8b3b      	ldrh	r3, [r7, #24]
 800f9f8:	b2da      	uxtb	r2, r3
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	7f3a      	ldrb	r2, [r7, #28]
 800fa02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2201      	movs	r2, #1
 800fa08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	73da      	strb	r2, [r3, #15]
}
 800fa10:	bf00      	nop
 800fa12:	3714      	adds	r7, #20
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b08c      	sub	sp, #48	; 0x30
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	4603      	mov	r3, r0
 800fa24:	71fb      	strb	r3, [r7, #7]
 800fa26:	460b      	mov	r3, r1
 800fa28:	80bb      	strh	r3, [r7, #4]
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fa2e:	79fb      	ldrb	r3, [r7, #7]
 800fa30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fa32:	887b      	ldrh	r3, [r7, #2]
 800fa34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fa38:	d07f      	beq.n	800fb3a <pbuf_alloc+0x11e>
 800fa3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fa3e:	f300 80c8 	bgt.w	800fbd2 <pbuf_alloc+0x1b6>
 800fa42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fa46:	d010      	beq.n	800fa6a <pbuf_alloc+0x4e>
 800fa48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fa4c:	f300 80c1 	bgt.w	800fbd2 <pbuf_alloc+0x1b6>
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d002      	beq.n	800fa5a <pbuf_alloc+0x3e>
 800fa54:	2b41      	cmp	r3, #65	; 0x41
 800fa56:	f040 80bc 	bne.w	800fbd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fa5a:	887a      	ldrh	r2, [r7, #2]
 800fa5c:	88bb      	ldrh	r3, [r7, #4]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	2000      	movs	r0, #0
 800fa62:	f000 f8d1 	bl	800fc08 <pbuf_alloc_reference>
 800fa66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fa68:	e0bd      	b.n	800fbe6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fa72:	88bb      	ldrh	r3, [r7, #4]
 800fa74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fa76:	200c      	movs	r0, #12
 800fa78:	f7ff fb9a 	bl	800f1b0 <memp_malloc>
 800fa7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d109      	bne.n	800fa98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fa84:	f7ff ff76 	bl	800f974 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d002      	beq.n	800fa94 <pbuf_alloc+0x78>
            pbuf_free(p);
 800fa8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa90:	f000 faa8 	bl	800ffe4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fa94:	2300      	movs	r3, #0
 800fa96:	e0a7      	b.n	800fbe8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fa98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa9a:	3303      	adds	r3, #3
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	f023 0303 	bic.w	r3, r3, #3
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	8b7a      	ldrh	r2, [r7, #26]
 800faac:	4293      	cmp	r3, r2
 800faae:	bf28      	it	cs
 800fab0:	4613      	movcs	r3, r2
 800fab2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fab6:	3310      	adds	r3, #16
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	4413      	add	r3, r2
 800fabc:	3303      	adds	r3, #3
 800fabe:	f023 0303 	bic.w	r3, r3, #3
 800fac2:	4618      	mov	r0, r3
 800fac4:	89f9      	ldrh	r1, [r7, #14]
 800fac6:	8b7a      	ldrh	r2, [r7, #26]
 800fac8:	2300      	movs	r3, #0
 800faca:	9301      	str	r3, [sp, #4]
 800facc:	887b      	ldrh	r3, [r7, #2]
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	460b      	mov	r3, r1
 800fad2:	4601      	mov	r1, r0
 800fad4:	6938      	ldr	r0, [r7, #16]
 800fad6:	f7ff ff77 	bl	800f9c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	f003 0303 	and.w	r3, r3, #3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d006      	beq.n	800faf4 <pbuf_alloc+0xd8>
 800fae6:	4b42      	ldr	r3, [pc, #264]	; (800fbf0 <pbuf_alloc+0x1d4>)
 800fae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800faec:	4941      	ldr	r1, [pc, #260]	; (800fbf4 <pbuf_alloc+0x1d8>)
 800faee:	4842      	ldr	r0, [pc, #264]	; (800fbf8 <pbuf_alloc+0x1dc>)
 800faf0:	f009 fb6a 	bl	80191c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800faf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800faf6:	3303      	adds	r3, #3
 800faf8:	f023 0303 	bic.w	r3, r3, #3
 800fafc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fb00:	d106      	bne.n	800fb10 <pbuf_alloc+0xf4>
 800fb02:	4b3b      	ldr	r3, [pc, #236]	; (800fbf0 <pbuf_alloc+0x1d4>)
 800fb04:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fb08:	493c      	ldr	r1, [pc, #240]	; (800fbfc <pbuf_alloc+0x1e0>)
 800fb0a:	483b      	ldr	r0, [pc, #236]	; (800fbf8 <pbuf_alloc+0x1dc>)
 800fb0c:	f009 fb5c 	bl	80191c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d102      	bne.n	800fb1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	627b      	str	r3, [r7, #36]	; 0x24
 800fb1a:	e002      	b.n	800fb22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fb26:	8b7a      	ldrh	r2, [r7, #26]
 800fb28:	89fb      	ldrh	r3, [r7, #14]
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fb32:	8b7b      	ldrh	r3, [r7, #26]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d19e      	bne.n	800fa76 <pbuf_alloc+0x5a>
      break;
 800fb38:	e055      	b.n	800fbe6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fb3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb3c:	3303      	adds	r3, #3
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	f023 0303 	bic.w	r3, r3, #3
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	88bb      	ldrh	r3, [r7, #4]
 800fb48:	3303      	adds	r3, #3
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	f023 0303 	bic.w	r3, r3, #3
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	4413      	add	r3, r2
 800fb54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fb56:	8b3b      	ldrh	r3, [r7, #24]
 800fb58:	3310      	adds	r3, #16
 800fb5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fb5c:	8b3a      	ldrh	r2, [r7, #24]
 800fb5e:	88bb      	ldrh	r3, [r7, #4]
 800fb60:	3303      	adds	r3, #3
 800fb62:	f023 0303 	bic.w	r3, r3, #3
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d306      	bcc.n	800fb78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fb6a:	8afa      	ldrh	r2, [r7, #22]
 800fb6c:	88bb      	ldrh	r3, [r7, #4]
 800fb6e:	3303      	adds	r3, #3
 800fb70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d201      	bcs.n	800fb7c <pbuf_alloc+0x160>
        return NULL;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e035      	b.n	800fbe8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fb7c:	8afb      	ldrh	r3, [r7, #22]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7ff f972 	bl	800ee68 <mem_malloc>
 800fb84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <pbuf_alloc+0x174>
        return NULL;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e02b      	b.n	800fbe8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fb90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb92:	3310      	adds	r3, #16
 800fb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb96:	4413      	add	r3, r2
 800fb98:	3303      	adds	r3, #3
 800fb9a:	f023 0303 	bic.w	r3, r3, #3
 800fb9e:	4618      	mov	r0, r3
 800fba0:	88b9      	ldrh	r1, [r7, #4]
 800fba2:	88ba      	ldrh	r2, [r7, #4]
 800fba4:	2300      	movs	r3, #0
 800fba6:	9301      	str	r3, [sp, #4]
 800fba8:	887b      	ldrh	r3, [r7, #2]
 800fbaa:	9300      	str	r3, [sp, #0]
 800fbac:	460b      	mov	r3, r1
 800fbae:	4601      	mov	r1, r0
 800fbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbb2:	f7ff ff09 	bl	800f9c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	f003 0303 	and.w	r3, r3, #3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d010      	beq.n	800fbe4 <pbuf_alloc+0x1c8>
 800fbc2:	4b0b      	ldr	r3, [pc, #44]	; (800fbf0 <pbuf_alloc+0x1d4>)
 800fbc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fbc8:	490d      	ldr	r1, [pc, #52]	; (800fc00 <pbuf_alloc+0x1e4>)
 800fbca:	480b      	ldr	r0, [pc, #44]	; (800fbf8 <pbuf_alloc+0x1dc>)
 800fbcc:	f009 fafc 	bl	80191c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fbd0:	e008      	b.n	800fbe4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fbd2:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <pbuf_alloc+0x1d4>)
 800fbd4:	f240 1227 	movw	r2, #295	; 0x127
 800fbd8:	490a      	ldr	r1, [pc, #40]	; (800fc04 <pbuf_alloc+0x1e8>)
 800fbda:	4807      	ldr	r0, [pc, #28]	; (800fbf8 <pbuf_alloc+0x1dc>)
 800fbdc:	f009 faf4 	bl	80191c8 <iprintf>
      return NULL;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	e001      	b.n	800fbe8 <pbuf_alloc+0x1cc>
      break;
 800fbe4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3728      	adds	r7, #40	; 0x28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	0801ae14 	.word	0x0801ae14
 800fbf4:	0801ae44 	.word	0x0801ae44
 800fbf8:	0801ae74 	.word	0x0801ae74
 800fbfc:	0801ae9c 	.word	0x0801ae9c
 800fc00:	0801aed0 	.word	0x0801aed0
 800fc04:	0801aefc 	.word	0x0801aefc

0800fc08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af02      	add	r7, sp, #8
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	460b      	mov	r3, r1
 800fc12:	807b      	strh	r3, [r7, #2]
 800fc14:	4613      	mov	r3, r2
 800fc16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fc18:	883b      	ldrh	r3, [r7, #0]
 800fc1a:	2b41      	cmp	r3, #65	; 0x41
 800fc1c:	d009      	beq.n	800fc32 <pbuf_alloc_reference+0x2a>
 800fc1e:	883b      	ldrh	r3, [r7, #0]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d006      	beq.n	800fc32 <pbuf_alloc_reference+0x2a>
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <pbuf_alloc_reference+0x5c>)
 800fc26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fc2a:	490f      	ldr	r1, [pc, #60]	; (800fc68 <pbuf_alloc_reference+0x60>)
 800fc2c:	480f      	ldr	r0, [pc, #60]	; (800fc6c <pbuf_alloc_reference+0x64>)
 800fc2e:	f009 facb 	bl	80191c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fc32:	200b      	movs	r0, #11
 800fc34:	f7ff fabc 	bl	800f1b0 <memp_malloc>
 800fc38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d101      	bne.n	800fc44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fc40:	2300      	movs	r3, #0
 800fc42:	e00b      	b.n	800fc5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fc44:	8879      	ldrh	r1, [r7, #2]
 800fc46:	887a      	ldrh	r2, [r7, #2]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	883b      	ldrh	r3, [r7, #0]
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	460b      	mov	r3, r1
 800fc52:	6879      	ldr	r1, [r7, #4]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff feb7 	bl	800f9c8 <pbuf_init_alloced_pbuf>
  return p;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3710      	adds	r7, #16
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	0801ae14 	.word	0x0801ae14
 800fc68:	0801af18 	.word	0x0801af18
 800fc6c:	0801ae74 	.word	0x0801ae74

0800fc70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b088      	sub	sp, #32
 800fc74:	af02      	add	r7, sp, #8
 800fc76:	607b      	str	r3, [r7, #4]
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73fb      	strb	r3, [r7, #15]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	81bb      	strh	r3, [r7, #12]
 800fc80:	4613      	mov	r3, r2
 800fc82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fc84:	7bfb      	ldrb	r3, [r7, #15]
 800fc86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fc88:	8a7b      	ldrh	r3, [r7, #18]
 800fc8a:	3303      	adds	r3, #3
 800fc8c:	f023 0203 	bic.w	r2, r3, #3
 800fc90:	89bb      	ldrh	r3, [r7, #12]
 800fc92:	441a      	add	r2, r3
 800fc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d901      	bls.n	800fc9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e018      	b.n	800fcd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fc9e:	6a3b      	ldr	r3, [r7, #32]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d007      	beq.n	800fcb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fca4:	8a7b      	ldrh	r3, [r7, #18]
 800fca6:	3303      	adds	r3, #3
 800fca8:	f023 0303 	bic.w	r3, r3, #3
 800fcac:	6a3a      	ldr	r2, [r7, #32]
 800fcae:	4413      	add	r3, r2
 800fcb0:	617b      	str	r3, [r7, #20]
 800fcb2:	e001      	b.n	800fcb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	89b9      	ldrh	r1, [r7, #12]
 800fcbc:	89ba      	ldrh	r2, [r7, #12]
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	897b      	ldrh	r3, [r7, #10]
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	6979      	ldr	r1, [r7, #20]
 800fcca:	f7ff fe7d 	bl	800f9c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fcce:	687b      	ldr	r3, [r7, #4]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	460b      	mov	r3, r1
 800fce2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d106      	bne.n	800fcf8 <pbuf_realloc+0x20>
 800fcea:	4b3a      	ldr	r3, [pc, #232]	; (800fdd4 <pbuf_realloc+0xfc>)
 800fcec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fcf0:	4939      	ldr	r1, [pc, #228]	; (800fdd8 <pbuf_realloc+0x100>)
 800fcf2:	483a      	ldr	r0, [pc, #232]	; (800fddc <pbuf_realloc+0x104>)
 800fcf4:	f009 fa68 	bl	80191c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	891b      	ldrh	r3, [r3, #8]
 800fcfc:	887a      	ldrh	r2, [r7, #2]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d263      	bcs.n	800fdca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	891a      	ldrh	r2, [r3, #8]
 800fd06:	887b      	ldrh	r3, [r7, #2]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fd0c:	887b      	ldrh	r3, [r7, #2]
 800fd0e:	817b      	strh	r3, [r7, #10]
  q = p;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fd14:	e018      	b.n	800fd48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	895b      	ldrh	r3, [r3, #10]
 800fd1a:	897a      	ldrh	r2, [r7, #10]
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	891a      	ldrh	r2, [r3, #8]
 800fd24:	893b      	ldrh	r3, [r7, #8]
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d106      	bne.n	800fd48 <pbuf_realloc+0x70>
 800fd3a:	4b26      	ldr	r3, [pc, #152]	; (800fdd4 <pbuf_realloc+0xfc>)
 800fd3c:	f240 12af 	movw	r2, #431	; 0x1af
 800fd40:	4927      	ldr	r1, [pc, #156]	; (800fde0 <pbuf_realloc+0x108>)
 800fd42:	4826      	ldr	r0, [pc, #152]	; (800fddc <pbuf_realloc+0x104>)
 800fd44:	f009 fa40 	bl	80191c8 <iprintf>
  while (rem_len > q->len) {
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	895b      	ldrh	r3, [r3, #10]
 800fd4c:	897a      	ldrh	r2, [r7, #10]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d8e1      	bhi.n	800fd16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	7b1b      	ldrb	r3, [r3, #12]
 800fd56:	f003 030f 	and.w	r3, r3, #15
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d121      	bne.n	800fda2 <pbuf_realloc+0xca>
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	895b      	ldrh	r3, [r3, #10]
 800fd62:	897a      	ldrh	r2, [r7, #10]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d01c      	beq.n	800fda2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	7b5b      	ldrb	r3, [r3, #13]
 800fd6c:	f003 0302 	and.w	r3, r3, #2
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d116      	bne.n	800fda2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	685a      	ldr	r2, [r3, #4]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	897b      	ldrh	r3, [r7, #10]
 800fd80:	4413      	add	r3, r2
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	4619      	mov	r1, r3
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7fe ff64 	bl	800ec54 <mem_trim>
 800fd8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d106      	bne.n	800fda2 <pbuf_realloc+0xca>
 800fd94:	4b0f      	ldr	r3, [pc, #60]	; (800fdd4 <pbuf_realloc+0xfc>)
 800fd96:	f240 12bd 	movw	r2, #445	; 0x1bd
 800fd9a:	4912      	ldr	r1, [pc, #72]	; (800fde4 <pbuf_realloc+0x10c>)
 800fd9c:	480f      	ldr	r0, [pc, #60]	; (800fddc <pbuf_realloc+0x104>)
 800fd9e:	f009 fa13 	bl	80191c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	897a      	ldrh	r2, [r7, #10]
 800fda6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	895a      	ldrh	r2, [r3, #10]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d004      	beq.n	800fdc2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 f911 	bl	800ffe4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	601a      	str	r2, [r3, #0]
 800fdc8:	e000      	b.n	800fdcc <pbuf_realloc+0xf4>
    return;
 800fdca:	bf00      	nop

}
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	0801ae14 	.word	0x0801ae14
 800fdd8:	0801af2c 	.word	0x0801af2c
 800fddc:	0801ae74 	.word	0x0801ae74
 800fde0:	0801af44 	.word	0x0801af44
 800fde4:	0801af5c 	.word	0x0801af5c

0800fde8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d106      	bne.n	800fe0a <pbuf_add_header_impl+0x22>
 800fdfc:	4b2b      	ldr	r3, [pc, #172]	; (800feac <pbuf_add_header_impl+0xc4>)
 800fdfe:	f240 12df 	movw	r2, #479	; 0x1df
 800fe02:	492b      	ldr	r1, [pc, #172]	; (800feb0 <pbuf_add_header_impl+0xc8>)
 800fe04:	482b      	ldr	r0, [pc, #172]	; (800feb4 <pbuf_add_header_impl+0xcc>)
 800fe06:	f009 f9df 	bl	80191c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d003      	beq.n	800fe18 <pbuf_add_header_impl+0x30>
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe16:	d301      	bcc.n	800fe1c <pbuf_add_header_impl+0x34>
    return 1;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e043      	b.n	800fea4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d101      	bne.n	800fe26 <pbuf_add_header_impl+0x3e>
    return 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	e03e      	b.n	800fea4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	891a      	ldrh	r2, [r3, #8]
 800fe2e:	8a7b      	ldrh	r3, [r7, #18]
 800fe30:	4413      	add	r3, r2
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	8a7a      	ldrh	r2, [r7, #18]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d901      	bls.n	800fe3e <pbuf_add_header_impl+0x56>
    return 1;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e032      	b.n	800fea4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	7b1b      	ldrb	r3, [r3, #12]
 800fe42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800fe44:	8a3b      	ldrh	r3, [r7, #16]
 800fe46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00c      	beq.n	800fe68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	425b      	negs	r3, r3
 800fe56:	4413      	add	r3, r2
 800fe58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3310      	adds	r3, #16
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d20d      	bcs.n	800fe80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800fe64:	2301      	movs	r3, #1
 800fe66:	e01d      	b.n	800fea4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d006      	beq.n	800fe7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	425b      	negs	r3, r3
 800fe76:	4413      	add	r3, r2
 800fe78:	617b      	str	r3, [r7, #20]
 800fe7a:	e001      	b.n	800fe80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	e011      	b.n	800fea4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	697a      	ldr	r2, [r7, #20]
 800fe84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	895a      	ldrh	r2, [r3, #10]
 800fe8a:	8a7b      	ldrh	r3, [r7, #18]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	891a      	ldrh	r2, [r3, #8]
 800fe98:	8a7b      	ldrh	r3, [r7, #18]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	811a      	strh	r2, [r3, #8]


  return 0;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	0801ae14 	.word	0x0801ae14
 800feb0:	0801af78 	.word	0x0801af78
 800feb4:	0801ae74 	.word	0x0801ae74

0800feb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800fec2:	2200      	movs	r2, #0
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff ff8e 	bl	800fde8 <pbuf_add_header_impl>
 800fecc:	4603      	mov	r3, r0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d106      	bne.n	800fef6 <pbuf_remove_header+0x1e>
 800fee8:	4b20      	ldr	r3, [pc, #128]	; (800ff6c <pbuf_remove_header+0x94>)
 800feea:	f240 224b 	movw	r2, #587	; 0x24b
 800feee:	4920      	ldr	r1, [pc, #128]	; (800ff70 <pbuf_remove_header+0x98>)
 800fef0:	4820      	ldr	r0, [pc, #128]	; (800ff74 <pbuf_remove_header+0x9c>)
 800fef2:	f009 f969 	bl	80191c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d003      	beq.n	800ff04 <pbuf_remove_header+0x2c>
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff02:	d301      	bcc.n	800ff08 <pbuf_remove_header+0x30>
    return 1;
 800ff04:	2301      	movs	r3, #1
 800ff06:	e02c      	b.n	800ff62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d101      	bne.n	800ff12 <pbuf_remove_header+0x3a>
    return 0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	e027      	b.n	800ff62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	895b      	ldrh	r3, [r3, #10]
 800ff1a:	89fa      	ldrh	r2, [r7, #14]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d908      	bls.n	800ff32 <pbuf_remove_header+0x5a>
 800ff20:	4b12      	ldr	r3, [pc, #72]	; (800ff6c <pbuf_remove_header+0x94>)
 800ff22:	f240 2255 	movw	r2, #597	; 0x255
 800ff26:	4914      	ldr	r1, [pc, #80]	; (800ff78 <pbuf_remove_header+0xa0>)
 800ff28:	4812      	ldr	r0, [pc, #72]	; (800ff74 <pbuf_remove_header+0x9c>)
 800ff2a:	f009 f94d 	bl	80191c8 <iprintf>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e017      	b.n	800ff62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685a      	ldr	r2, [r3, #4]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	441a      	add	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	895a      	ldrh	r2, [r3, #10]
 800ff48:	89fb      	ldrh	r3, [r7, #14]
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	891a      	ldrh	r2, [r3, #8]
 800ff56:	89fb      	ldrh	r3, [r7, #14]
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ff60:	2300      	movs	r3, #0
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	0801ae14 	.word	0x0801ae14
 800ff70:	0801af78 	.word	0x0801af78
 800ff74:	0801ae74 	.word	0x0801ae74
 800ff78:	0801af84 	.word	0x0801af84

0800ff7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	460b      	mov	r3, r1
 800ff86:	807b      	strh	r3, [r7, #2]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ff8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	da08      	bge.n	800ffa6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ff94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff98:	425b      	negs	r3, r3
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7ff ff9b 	bl	800fed8 <pbuf_remove_header>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	e007      	b.n	800ffb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ffa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ffaa:	787a      	ldrb	r2, [r7, #1]
 800ffac:	4619      	mov	r1, r3
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7ff ff1a 	bl	800fde8 <pbuf_add_header_impl>
 800ffb4:	4603      	mov	r3, r0
  }
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ffca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7ff ffd2 	bl	800ff7c <pbuf_header_impl>
 800ffd8:	4603      	mov	r3, r0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3708      	adds	r7, #8
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10b      	bne.n	801000a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d106      	bne.n	8010006 <pbuf_free+0x22>
 800fff8:	4b3b      	ldr	r3, [pc, #236]	; (80100e8 <pbuf_free+0x104>)
 800fffa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800fffe:	493b      	ldr	r1, [pc, #236]	; (80100ec <pbuf_free+0x108>)
 8010000:	483b      	ldr	r0, [pc, #236]	; (80100f0 <pbuf_free+0x10c>)
 8010002:	f009 f8e1 	bl	80191c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010006:	2300      	movs	r3, #0
 8010008:	e069      	b.n	80100de <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801000e:	e062      	b.n	80100d6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010010:	f008 fec6 	bl	8018da0 <sys_arch_protect>
 8010014:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7b9b      	ldrb	r3, [r3, #14]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <pbuf_free+0x48>
 801001e:	4b32      	ldr	r3, [pc, #200]	; (80100e8 <pbuf_free+0x104>)
 8010020:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010024:	4933      	ldr	r1, [pc, #204]	; (80100f4 <pbuf_free+0x110>)
 8010026:	4832      	ldr	r0, [pc, #200]	; (80100f0 <pbuf_free+0x10c>)
 8010028:	f009 f8ce 	bl	80191c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	7b9b      	ldrb	r3, [r3, #14]
 8010030:	3b01      	subs	r3, #1
 8010032:	b2da      	uxtb	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	739a      	strb	r2, [r3, #14]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7b9b      	ldrb	r3, [r3, #14]
 801003c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801003e:	69b8      	ldr	r0, [r7, #24]
 8010040:	f008 febc 	bl	8018dbc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010044:	7dfb      	ldrb	r3, [r7, #23]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d143      	bne.n	80100d2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7b1b      	ldrb	r3, [r3, #12]
 8010054:	f003 030f 	and.w	r3, r3, #15
 8010058:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	7b5b      	ldrb	r3, [r3, #13]
 801005e:	f003 0302 	and.w	r3, r3, #2
 8010062:	2b00      	cmp	r3, #0
 8010064:	d011      	beq.n	801008a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <pbuf_free+0x9c>
 8010072:	4b1d      	ldr	r3, [pc, #116]	; (80100e8 <pbuf_free+0x104>)
 8010074:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010078:	491f      	ldr	r1, [pc, #124]	; (80100f8 <pbuf_free+0x114>)
 801007a:	481d      	ldr	r0, [pc, #116]	; (80100f0 <pbuf_free+0x10c>)
 801007c:	f009 f8a4 	bl	80191c8 <iprintf>
        pc->custom_free_function(p);
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	4798      	blx	r3
 8010088:	e01d      	b.n	80100c6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801008a:	7bfb      	ldrb	r3, [r7, #15]
 801008c:	2b02      	cmp	r3, #2
 801008e:	d104      	bne.n	801009a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010090:	6879      	ldr	r1, [r7, #4]
 8010092:	200c      	movs	r0, #12
 8010094:	f7ff f902 	bl	800f29c <memp_free>
 8010098:	e015      	b.n	80100c6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801009a:	7bfb      	ldrb	r3, [r7, #15]
 801009c:	2b01      	cmp	r3, #1
 801009e:	d104      	bne.n	80100aa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	200b      	movs	r0, #11
 80100a4:	f7ff f8fa 	bl	800f29c <memp_free>
 80100a8:	e00d      	b.n	80100c6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80100aa:	7bfb      	ldrb	r3, [r7, #15]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d103      	bne.n	80100b8 <pbuf_free+0xd4>
          mem_free(p);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7fe fd3f 	bl	800eb34 <mem_free>
 80100b6:	e006      	b.n	80100c6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80100b8:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <pbuf_free+0x104>)
 80100ba:	f240 320f 	movw	r2, #783	; 0x30f
 80100be:	490f      	ldr	r1, [pc, #60]	; (80100fc <pbuf_free+0x118>)
 80100c0:	480b      	ldr	r0, [pc, #44]	; (80100f0 <pbuf_free+0x10c>)
 80100c2:	f009 f881 	bl	80191c8 <iprintf>
        }
      }
      count++;
 80100c6:	7ffb      	ldrb	r3, [r7, #31]
 80100c8:	3301      	adds	r3, #1
 80100ca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	607b      	str	r3, [r7, #4]
 80100d0:	e001      	b.n	80100d6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d199      	bne.n	8010010 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80100dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3720      	adds	r7, #32
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	0801ae14 	.word	0x0801ae14
 80100ec:	0801af78 	.word	0x0801af78
 80100f0:	0801ae74 	.word	0x0801ae74
 80100f4:	0801afa4 	.word	0x0801afa4
 80100f8:	0801afbc 	.word	0x0801afbc
 80100fc:	0801afe0 	.word	0x0801afe0

08010100 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010108:	2300      	movs	r3, #0
 801010a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801010c:	e005      	b.n	801011a <pbuf_clen+0x1a>
    ++len;
 801010e:	89fb      	ldrh	r3, [r7, #14]
 8010110:	3301      	adds	r3, #1
 8010112:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1f6      	bne.n	801010e <pbuf_clen+0xe>
  }
  return len;
 8010120:	89fb      	ldrh	r3, [r7, #14]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
	...

08010130 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d016      	beq.n	801016c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801013e:	f008 fe2f 	bl	8018da0 <sys_arch_protect>
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	7b9b      	ldrb	r3, [r3, #14]
 8010148:	3301      	adds	r3, #1
 801014a:	b2da      	uxtb	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	739a      	strb	r2, [r3, #14]
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f008 fe33 	bl	8018dbc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	7b9b      	ldrb	r3, [r3, #14]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <pbuf_ref+0x3c>
 801015e:	4b05      	ldr	r3, [pc, #20]	; (8010174 <pbuf_ref+0x44>)
 8010160:	f240 3242 	movw	r2, #834	; 0x342
 8010164:	4904      	ldr	r1, [pc, #16]	; (8010178 <pbuf_ref+0x48>)
 8010166:	4805      	ldr	r0, [pc, #20]	; (801017c <pbuf_ref+0x4c>)
 8010168:	f009 f82e 	bl	80191c8 <iprintf>
  }
}
 801016c:	bf00      	nop
 801016e:	3710      	adds	r7, #16
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	0801ae14 	.word	0x0801ae14
 8010178:	0801aff4 	.word	0x0801aff4
 801017c:	0801ae74 	.word	0x0801ae74

08010180 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <pbuf_cat+0x16>
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d107      	bne.n	80101a6 <pbuf_cat+0x26>
 8010196:	4b20      	ldr	r3, [pc, #128]	; (8010218 <pbuf_cat+0x98>)
 8010198:	f240 3259 	movw	r2, #857	; 0x359
 801019c:	491f      	ldr	r1, [pc, #124]	; (801021c <pbuf_cat+0x9c>)
 801019e:	4820      	ldr	r0, [pc, #128]	; (8010220 <pbuf_cat+0xa0>)
 80101a0:	f009 f812 	bl	80191c8 <iprintf>
 80101a4:	e034      	b.n	8010210 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	e00a      	b.n	80101c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	891a      	ldrh	r2, [r3, #8]
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	891b      	ldrh	r3, [r3, #8]
 80101b4:	4413      	add	r3, r2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1f0      	bne.n	80101ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	891a      	ldrh	r2, [r3, #8]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	895b      	ldrh	r3, [r3, #10]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d006      	beq.n	80101e4 <pbuf_cat+0x64>
 80101d6:	4b10      	ldr	r3, [pc, #64]	; (8010218 <pbuf_cat+0x98>)
 80101d8:	f240 3262 	movw	r2, #866	; 0x362
 80101dc:	4911      	ldr	r1, [pc, #68]	; (8010224 <pbuf_cat+0xa4>)
 80101de:	4810      	ldr	r0, [pc, #64]	; (8010220 <pbuf_cat+0xa0>)
 80101e0:	f008 fff2 	bl	80191c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d006      	beq.n	80101fa <pbuf_cat+0x7a>
 80101ec:	4b0a      	ldr	r3, [pc, #40]	; (8010218 <pbuf_cat+0x98>)
 80101ee:	f240 3263 	movw	r2, #867	; 0x363
 80101f2:	490d      	ldr	r1, [pc, #52]	; (8010228 <pbuf_cat+0xa8>)
 80101f4:	480a      	ldr	r0, [pc, #40]	; (8010220 <pbuf_cat+0xa0>)
 80101f6:	f008 ffe7 	bl	80191c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	891a      	ldrh	r2, [r3, #8]
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	891b      	ldrh	r3, [r3, #8]
 8010202:	4413      	add	r3, r2
 8010204:	b29a      	uxth	r2, r3
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	683a      	ldr	r2, [r7, #0]
 801020e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	0801ae14 	.word	0x0801ae14
 801021c:	0801b008 	.word	0x0801b008
 8010220:	0801ae74 	.word	0x0801ae74
 8010224:	0801b040 	.word	0x0801b040
 8010228:	0801b070 	.word	0x0801b070

0801022c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010236:	6839      	ldr	r1, [r7, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff ffa1 	bl	8010180 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801023e:	6838      	ldr	r0, [r7, #0]
 8010240:	f7ff ff76 	bl	8010130 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010244:	bf00      	nop
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b086      	sub	sp, #24
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010256:	2300      	movs	r3, #0
 8010258:	617b      	str	r3, [r7, #20]
 801025a:	2300      	movs	r3, #0
 801025c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d008      	beq.n	8010276 <pbuf_copy+0x2a>
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d005      	beq.n	8010276 <pbuf_copy+0x2a>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	891a      	ldrh	r2, [r3, #8]
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	891b      	ldrh	r3, [r3, #8]
 8010272:	429a      	cmp	r2, r3
 8010274:	d209      	bcs.n	801028a <pbuf_copy+0x3e>
 8010276:	4b57      	ldr	r3, [pc, #348]	; (80103d4 <pbuf_copy+0x188>)
 8010278:	f240 32c9 	movw	r2, #969	; 0x3c9
 801027c:	4956      	ldr	r1, [pc, #344]	; (80103d8 <pbuf_copy+0x18c>)
 801027e:	4857      	ldr	r0, [pc, #348]	; (80103dc <pbuf_copy+0x190>)
 8010280:	f008 ffa2 	bl	80191c8 <iprintf>
 8010284:	f06f 030f 	mvn.w	r3, #15
 8010288:	e09f      	b.n	80103ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	895b      	ldrh	r3, [r3, #10]
 801028e:	461a      	mov	r2, r3
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	1ad2      	subs	r2, r2, r3
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	895b      	ldrh	r3, [r3, #10]
 8010298:	4619      	mov	r1, r3
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	1acb      	subs	r3, r1, r3
 801029e:	429a      	cmp	r2, r3
 80102a0:	d306      	bcc.n	80102b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	895b      	ldrh	r3, [r3, #10]
 80102a6:	461a      	mov	r2, r3
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	1ad3      	subs	r3, r2, r3
 80102ac:	60fb      	str	r3, [r7, #12]
 80102ae:	e005      	b.n	80102bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	895b      	ldrh	r3, [r3, #10]
 80102b4:	461a      	mov	r2, r3
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685a      	ldr	r2, [r3, #4]
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	18d0      	adds	r0, r2, r3
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	4413      	add	r3, r2
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	4619      	mov	r1, r3
 80102d0:	f008 feb5 	bl	801903e <memcpy>
    offset_to += len;
 80102d4:	697a      	ldr	r2, [r7, #20]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	4413      	add	r3, r2
 80102da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	4413      	add	r3, r2
 80102e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	895b      	ldrh	r3, [r3, #10]
 80102e8:	461a      	mov	r2, r3
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d906      	bls.n	80102fe <pbuf_copy+0xb2>
 80102f0:	4b38      	ldr	r3, [pc, #224]	; (80103d4 <pbuf_copy+0x188>)
 80102f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80102f6:	493a      	ldr	r1, [pc, #232]	; (80103e0 <pbuf_copy+0x194>)
 80102f8:	4838      	ldr	r0, [pc, #224]	; (80103dc <pbuf_copy+0x190>)
 80102fa:	f008 ff65 	bl	80191c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	895b      	ldrh	r3, [r3, #10]
 8010302:	461a      	mov	r2, r3
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	4293      	cmp	r3, r2
 8010308:	d906      	bls.n	8010318 <pbuf_copy+0xcc>
 801030a:	4b32      	ldr	r3, [pc, #200]	; (80103d4 <pbuf_copy+0x188>)
 801030c:	f240 32da 	movw	r2, #986	; 0x3da
 8010310:	4934      	ldr	r1, [pc, #208]	; (80103e4 <pbuf_copy+0x198>)
 8010312:	4832      	ldr	r0, [pc, #200]	; (80103dc <pbuf_copy+0x190>)
 8010314:	f008 ff58 	bl	80191c8 <iprintf>
    if (offset_from >= p_from->len) {
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	895b      	ldrh	r3, [r3, #10]
 801031c:	461a      	mov	r2, r3
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	4293      	cmp	r3, r2
 8010322:	d304      	bcc.n	801032e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010324:	2300      	movs	r3, #0
 8010326:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	895b      	ldrh	r3, [r3, #10]
 8010332:	461a      	mov	r2, r3
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	4293      	cmp	r3, r2
 8010338:	d114      	bne.n	8010364 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d10c      	bne.n	8010364 <pbuf_copy+0x118>
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d009      	beq.n	8010364 <pbuf_copy+0x118>
 8010350:	4b20      	ldr	r3, [pc, #128]	; (80103d4 <pbuf_copy+0x188>)
 8010352:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010356:	4924      	ldr	r1, [pc, #144]	; (80103e8 <pbuf_copy+0x19c>)
 8010358:	4820      	ldr	r0, [pc, #128]	; (80103dc <pbuf_copy+0x190>)
 801035a:	f008 ff35 	bl	80191c8 <iprintf>
 801035e:	f06f 030f 	mvn.w	r3, #15
 8010362:	e032      	b.n	80103ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d013      	beq.n	8010392 <pbuf_copy+0x146>
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	895a      	ldrh	r2, [r3, #10]
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	891b      	ldrh	r3, [r3, #8]
 8010372:	429a      	cmp	r2, r3
 8010374:	d10d      	bne.n	8010392 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d009      	beq.n	8010392 <pbuf_copy+0x146>
 801037e:	4b15      	ldr	r3, [pc, #84]	; (80103d4 <pbuf_copy+0x188>)
 8010380:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010384:	4919      	ldr	r1, [pc, #100]	; (80103ec <pbuf_copy+0x1a0>)
 8010386:	4815      	ldr	r0, [pc, #84]	; (80103dc <pbuf_copy+0x190>)
 8010388:	f008 ff1e 	bl	80191c8 <iprintf>
 801038c:	f06f 0305 	mvn.w	r3, #5
 8010390:	e01b      	b.n	80103ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d013      	beq.n	80103c0 <pbuf_copy+0x174>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	895a      	ldrh	r2, [r3, #10]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	891b      	ldrh	r3, [r3, #8]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d10d      	bne.n	80103c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d009      	beq.n	80103c0 <pbuf_copy+0x174>
 80103ac:	4b09      	ldr	r3, [pc, #36]	; (80103d4 <pbuf_copy+0x188>)
 80103ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80103b2:	490e      	ldr	r1, [pc, #56]	; (80103ec <pbuf_copy+0x1a0>)
 80103b4:	4809      	ldr	r0, [pc, #36]	; (80103dc <pbuf_copy+0x190>)
 80103b6:	f008 ff07 	bl	80191c8 <iprintf>
 80103ba:	f06f 0305 	mvn.w	r3, #5
 80103be:	e004      	b.n	80103ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f47f af61 	bne.w	801028a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3718      	adds	r7, #24
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	0801ae14 	.word	0x0801ae14
 80103d8:	0801b0bc 	.word	0x0801b0bc
 80103dc:	0801ae74 	.word	0x0801ae74
 80103e0:	0801b0ec 	.word	0x0801b0ec
 80103e4:	0801b104 	.word	0x0801b104
 80103e8:	0801b120 	.word	0x0801b120
 80103ec:	0801b130 	.word	0x0801b130

080103f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b088      	sub	sp, #32
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	4611      	mov	r1, r2
 80103fc:	461a      	mov	r2, r3
 80103fe:	460b      	mov	r3, r1
 8010400:	80fb      	strh	r3, [r7, #6]
 8010402:	4613      	mov	r3, r2
 8010404:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010406:	2300      	movs	r3, #0
 8010408:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d108      	bne.n	8010426 <pbuf_copy_partial+0x36>
 8010414:	4b2b      	ldr	r3, [pc, #172]	; (80104c4 <pbuf_copy_partial+0xd4>)
 8010416:	f240 420a 	movw	r2, #1034	; 0x40a
 801041a:	492b      	ldr	r1, [pc, #172]	; (80104c8 <pbuf_copy_partial+0xd8>)
 801041c:	482b      	ldr	r0, [pc, #172]	; (80104cc <pbuf_copy_partial+0xdc>)
 801041e:	f008 fed3 	bl	80191c8 <iprintf>
 8010422:	2300      	movs	r3, #0
 8010424:	e04a      	b.n	80104bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d108      	bne.n	801043e <pbuf_copy_partial+0x4e>
 801042c:	4b25      	ldr	r3, [pc, #148]	; (80104c4 <pbuf_copy_partial+0xd4>)
 801042e:	f240 420b 	movw	r2, #1035	; 0x40b
 8010432:	4927      	ldr	r1, [pc, #156]	; (80104d0 <pbuf_copy_partial+0xe0>)
 8010434:	4825      	ldr	r0, [pc, #148]	; (80104cc <pbuf_copy_partial+0xdc>)
 8010436:	f008 fec7 	bl	80191c8 <iprintf>
 801043a:	2300      	movs	r3, #0
 801043c:	e03e      	b.n	80104bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	61fb      	str	r3, [r7, #28]
 8010442:	e034      	b.n	80104ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010444:	88bb      	ldrh	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00a      	beq.n	8010460 <pbuf_copy_partial+0x70>
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	895b      	ldrh	r3, [r3, #10]
 801044e:	88ba      	ldrh	r2, [r7, #4]
 8010450:	429a      	cmp	r2, r3
 8010452:	d305      	bcc.n	8010460 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	895b      	ldrh	r3, [r3, #10]
 8010458:	88ba      	ldrh	r2, [r7, #4]
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	80bb      	strh	r3, [r7, #4]
 801045e:	e023      	b.n	80104a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	895a      	ldrh	r2, [r3, #10]
 8010464:	88bb      	ldrh	r3, [r7, #4]
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801046a:	8b3a      	ldrh	r2, [r7, #24]
 801046c:	88fb      	ldrh	r3, [r7, #6]
 801046e:	429a      	cmp	r2, r3
 8010470:	d901      	bls.n	8010476 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010472:	88fb      	ldrh	r3, [r7, #6]
 8010474:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010476:	8b7b      	ldrh	r3, [r7, #26]
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	18d0      	adds	r0, r2, r3
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	685a      	ldr	r2, [r3, #4]
 8010480:	88bb      	ldrh	r3, [r7, #4]
 8010482:	4413      	add	r3, r2
 8010484:	8b3a      	ldrh	r2, [r7, #24]
 8010486:	4619      	mov	r1, r3
 8010488:	f008 fdd9 	bl	801903e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801048c:	8afa      	ldrh	r2, [r7, #22]
 801048e:	8b3b      	ldrh	r3, [r7, #24]
 8010490:	4413      	add	r3, r2
 8010492:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010494:	8b7a      	ldrh	r2, [r7, #26]
 8010496:	8b3b      	ldrh	r3, [r7, #24]
 8010498:	4413      	add	r3, r2
 801049a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801049c:	88fa      	ldrh	r2, [r7, #6]
 801049e:	8b3b      	ldrh	r3, [r7, #24]
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80104a4:	2300      	movs	r3, #0
 80104a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	61fb      	str	r3, [r7, #28]
 80104ae:	88fb      	ldrh	r3, [r7, #6]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d002      	beq.n	80104ba <pbuf_copy_partial+0xca>
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1c4      	bne.n	8010444 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80104ba:	8afb      	ldrh	r3, [r7, #22]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3720      	adds	r7, #32
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	0801ae14 	.word	0x0801ae14
 80104c8:	0801b15c 	.word	0x0801b15c
 80104cc:	0801ae74 	.word	0x0801ae74
 80104d0:	0801b17c 	.word	0x0801b17c

080104d4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b088      	sub	sp, #32
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	4613      	mov	r3, r2
 80104e0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80104e2:	88fb      	ldrh	r3, [r7, #6]
 80104e4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80104e6:	2300      	movs	r3, #0
 80104e8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d109      	bne.n	8010504 <pbuf_take+0x30>
 80104f0:	4b3a      	ldr	r3, [pc, #232]	; (80105dc <pbuf_take+0x108>)
 80104f2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80104f6:	493a      	ldr	r1, [pc, #232]	; (80105e0 <pbuf_take+0x10c>)
 80104f8:	483a      	ldr	r0, [pc, #232]	; (80105e4 <pbuf_take+0x110>)
 80104fa:	f008 fe65 	bl	80191c8 <iprintf>
 80104fe:	f06f 030f 	mvn.w	r3, #15
 8010502:	e067      	b.n	80105d4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d109      	bne.n	801051e <pbuf_take+0x4a>
 801050a:	4b34      	ldr	r3, [pc, #208]	; (80105dc <pbuf_take+0x108>)
 801050c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8010510:	4935      	ldr	r1, [pc, #212]	; (80105e8 <pbuf_take+0x114>)
 8010512:	4834      	ldr	r0, [pc, #208]	; (80105e4 <pbuf_take+0x110>)
 8010514:	f008 fe58 	bl	80191c8 <iprintf>
 8010518:	f06f 030f 	mvn.w	r3, #15
 801051c:	e05a      	b.n	80105d4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	891b      	ldrh	r3, [r3, #8]
 8010522:	88fa      	ldrh	r2, [r7, #6]
 8010524:	429a      	cmp	r2, r3
 8010526:	d909      	bls.n	801053c <pbuf_take+0x68>
 8010528:	4b2c      	ldr	r3, [pc, #176]	; (80105dc <pbuf_take+0x108>)
 801052a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801052e:	492f      	ldr	r1, [pc, #188]	; (80105ec <pbuf_take+0x118>)
 8010530:	482c      	ldr	r0, [pc, #176]	; (80105e4 <pbuf_take+0x110>)
 8010532:	f008 fe49 	bl	80191c8 <iprintf>
 8010536:	f04f 33ff 	mov.w	r3, #4294967295
 801053a:	e04b      	b.n	80105d4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d007      	beq.n	8010552 <pbuf_take+0x7e>
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d004      	beq.n	8010552 <pbuf_take+0x7e>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	891b      	ldrh	r3, [r3, #8]
 801054c:	88fa      	ldrh	r2, [r7, #6]
 801054e:	429a      	cmp	r2, r3
 8010550:	d902      	bls.n	8010558 <pbuf_take+0x84>
    return ERR_ARG;
 8010552:	f06f 030f 	mvn.w	r3, #15
 8010556:	e03d      	b.n	80105d4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	61fb      	str	r3, [r7, #28]
 801055c:	e028      	b.n	80105b0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d106      	bne.n	8010572 <pbuf_take+0x9e>
 8010564:	4b1d      	ldr	r3, [pc, #116]	; (80105dc <pbuf_take+0x108>)
 8010566:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801056a:	4921      	ldr	r1, [pc, #132]	; (80105f0 <pbuf_take+0x11c>)
 801056c:	481d      	ldr	r0, [pc, #116]	; (80105e4 <pbuf_take+0x110>)
 801056e:	f008 fe2b 	bl	80191c8 <iprintf>
    buf_copy_len = total_copy_len;
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	895b      	ldrh	r3, [r3, #10]
 801057a:	461a      	mov	r2, r3
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	4293      	cmp	r3, r2
 8010580:	d902      	bls.n	8010588 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	895b      	ldrh	r3, [r3, #10]
 8010586:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	6858      	ldr	r0, [r3, #4]
 801058c:	68ba      	ldr	r2, [r7, #8]
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	4413      	add	r3, r2
 8010592:	69ba      	ldr	r2, [r7, #24]
 8010594:	4619      	mov	r1, r3
 8010596:	f008 fd52 	bl	801903e <memcpy>
    total_copy_len -= buf_copy_len;
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80105a2:	693a      	ldr	r2, [r7, #16]
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	4413      	add	r3, r2
 80105a8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	61fb      	str	r3, [r7, #28]
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1d3      	bne.n	801055e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d103      	bne.n	80105c4 <pbuf_take+0xf0>
 80105bc:	88fb      	ldrh	r3, [r7, #6]
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d006      	beq.n	80105d2 <pbuf_take+0xfe>
 80105c4:	4b05      	ldr	r3, [pc, #20]	; (80105dc <pbuf_take+0x108>)
 80105c6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80105ca:	490a      	ldr	r1, [pc, #40]	; (80105f4 <pbuf_take+0x120>)
 80105cc:	4805      	ldr	r0, [pc, #20]	; (80105e4 <pbuf_take+0x110>)
 80105ce:	f008 fdfb 	bl	80191c8 <iprintf>
  return ERR_OK;
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	0801ae14 	.word	0x0801ae14
 80105e0:	0801b1ec 	.word	0x0801b1ec
 80105e4:	0801ae74 	.word	0x0801ae74
 80105e8:	0801b204 	.word	0x0801b204
 80105ec:	0801b220 	.word	0x0801b220
 80105f0:	0801b240 	.word	0x0801b240
 80105f4:	0801b258 	.word	0x0801b258

080105f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	4603      	mov	r3, r0
 8010600:	603a      	str	r2, [r7, #0]
 8010602:	71fb      	strb	r3, [r7, #7]
 8010604:	460b      	mov	r3, r1
 8010606:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	8919      	ldrh	r1, [r3, #8]
 801060c:	88ba      	ldrh	r2, [r7, #4]
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	4618      	mov	r0, r3
 8010612:	f7ff fa03 	bl	800fa1c <pbuf_alloc>
 8010616:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <pbuf_clone+0x2a>
    return NULL;
 801061e:	2300      	movs	r3, #0
 8010620:	e011      	b.n	8010646 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010622:	6839      	ldr	r1, [r7, #0]
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f7ff fe11 	bl	801024c <pbuf_copy>
 801062a:	4603      	mov	r3, r0
 801062c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801062e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d006      	beq.n	8010644 <pbuf_clone+0x4c>
 8010636:	4b06      	ldr	r3, [pc, #24]	; (8010650 <pbuf_clone+0x58>)
 8010638:	f240 5224 	movw	r2, #1316	; 0x524
 801063c:	4905      	ldr	r1, [pc, #20]	; (8010654 <pbuf_clone+0x5c>)
 801063e:	4806      	ldr	r0, [pc, #24]	; (8010658 <pbuf_clone+0x60>)
 8010640:	f008 fdc2 	bl	80191c8 <iprintf>
  return q;
 8010644:	68fb      	ldr	r3, [r7, #12]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	0801ae14 	.word	0x0801ae14
 8010654:	0801b288 	.word	0x0801b288
 8010658:	0801ae74 	.word	0x0801ae74

0801065c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010660:	f008 fe40 	bl	80192e4 <rand>
 8010664:	4603      	mov	r3, r0
 8010666:	b29b      	uxth	r3, r3
 8010668:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801066c:	b29b      	uxth	r3, r3
 801066e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010672:	b29a      	uxth	r2, r3
 8010674:	4b01      	ldr	r3, [pc, #4]	; (801067c <tcp_init+0x20>)
 8010676:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010678:	bf00      	nop
 801067a:	bd80      	pop	{r7, pc}
 801067c:	20000160 	.word	0x20000160

08010680 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	7d1b      	ldrb	r3, [r3, #20]
 801068c:	2b01      	cmp	r3, #1
 801068e:	d105      	bne.n	801069c <tcp_free+0x1c>
 8010690:	4b06      	ldr	r3, [pc, #24]	; (80106ac <tcp_free+0x2c>)
 8010692:	22d4      	movs	r2, #212	; 0xd4
 8010694:	4906      	ldr	r1, [pc, #24]	; (80106b0 <tcp_free+0x30>)
 8010696:	4807      	ldr	r0, [pc, #28]	; (80106b4 <tcp_free+0x34>)
 8010698:	f008 fd96 	bl	80191c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801069c:	6879      	ldr	r1, [r7, #4]
 801069e:	2001      	movs	r0, #1
 80106a0:	f7fe fdfc 	bl	800f29c <memp_free>
}
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	0801b314 	.word	0x0801b314
 80106b0:	0801b344 	.word	0x0801b344
 80106b4:	0801b358 	.word	0x0801b358

080106b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	7d1b      	ldrb	r3, [r3, #20]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d105      	bne.n	80106d4 <tcp_free_listen+0x1c>
 80106c8:	4b06      	ldr	r3, [pc, #24]	; (80106e4 <tcp_free_listen+0x2c>)
 80106ca:	22df      	movs	r2, #223	; 0xdf
 80106cc:	4906      	ldr	r1, [pc, #24]	; (80106e8 <tcp_free_listen+0x30>)
 80106ce:	4807      	ldr	r0, [pc, #28]	; (80106ec <tcp_free_listen+0x34>)
 80106d0:	f008 fd7a 	bl	80191c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80106d4:	6879      	ldr	r1, [r7, #4]
 80106d6:	2002      	movs	r0, #2
 80106d8:	f7fe fde0 	bl	800f29c <memp_free>
}
 80106dc:	bf00      	nop
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	0801b314 	.word	0x0801b314
 80106e8:	0801b380 	.word	0x0801b380
 80106ec:	0801b358 	.word	0x0801b358

080106f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80106f4:	f000 fea2 	bl	801143c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80106f8:	4b07      	ldr	r3, [pc, #28]	; (8010718 <tcp_tmr+0x28>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	3301      	adds	r3, #1
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	4b05      	ldr	r3, [pc, #20]	; (8010718 <tcp_tmr+0x28>)
 8010702:	701a      	strb	r2, [r3, #0]
 8010704:	4b04      	ldr	r3, [pc, #16]	; (8010718 <tcp_tmr+0x28>)
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	f003 0301 	and.w	r3, r3, #1
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010710:	f000 fb54 	bl	8010dbc <tcp_slowtmr>
  }
}
 8010714:	bf00      	nop
 8010716:	bd80      	pop	{r7, pc}
 8010718:	2000daad 	.word	0x2000daad

0801071c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d105      	bne.n	8010738 <tcp_remove_listener+0x1c>
 801072c:	4b0d      	ldr	r3, [pc, #52]	; (8010764 <tcp_remove_listener+0x48>)
 801072e:	22ff      	movs	r2, #255	; 0xff
 8010730:	490d      	ldr	r1, [pc, #52]	; (8010768 <tcp_remove_listener+0x4c>)
 8010732:	480e      	ldr	r0, [pc, #56]	; (801076c <tcp_remove_listener+0x50>)
 8010734:	f008 fd48 	bl	80191c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	60fb      	str	r3, [r7, #12]
 801073c:	e00a      	b.n	8010754 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010742:	683a      	ldr	r2, [r7, #0]
 8010744:	429a      	cmp	r2, r3
 8010746:	d102      	bne.n	801074e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2200      	movs	r2, #0
 801074c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	60fb      	str	r3, [r7, #12]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1f1      	bne.n	801073e <tcp_remove_listener+0x22>
    }
  }
}
 801075a:	bf00      	nop
 801075c:	bf00      	nop
 801075e:	3710      	adds	r7, #16
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	0801b314 	.word	0x0801b314
 8010768:	0801b39c 	.word	0x0801b39c
 801076c:	0801b358 	.word	0x0801b358

08010770 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d106      	bne.n	801078c <tcp_listen_closed+0x1c>
 801077e:	4b14      	ldr	r3, [pc, #80]	; (80107d0 <tcp_listen_closed+0x60>)
 8010780:	f240 1211 	movw	r2, #273	; 0x111
 8010784:	4913      	ldr	r1, [pc, #76]	; (80107d4 <tcp_listen_closed+0x64>)
 8010786:	4814      	ldr	r0, [pc, #80]	; (80107d8 <tcp_listen_closed+0x68>)
 8010788:	f008 fd1e 	bl	80191c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	7d1b      	ldrb	r3, [r3, #20]
 8010790:	2b01      	cmp	r3, #1
 8010792:	d006      	beq.n	80107a2 <tcp_listen_closed+0x32>
 8010794:	4b0e      	ldr	r3, [pc, #56]	; (80107d0 <tcp_listen_closed+0x60>)
 8010796:	f44f 7289 	mov.w	r2, #274	; 0x112
 801079a:	4910      	ldr	r1, [pc, #64]	; (80107dc <tcp_listen_closed+0x6c>)
 801079c:	480e      	ldr	r0, [pc, #56]	; (80107d8 <tcp_listen_closed+0x68>)
 801079e:	f008 fd13 	bl	80191c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107a2:	2301      	movs	r3, #1
 80107a4:	60fb      	str	r3, [r7, #12]
 80107a6:	e00b      	b.n	80107c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80107a8:	4a0d      	ldr	r2, [pc, #52]	; (80107e0 <tcp_listen_closed+0x70>)
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	6879      	ldr	r1, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff ffb1 	bl	801071c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3301      	adds	r3, #1
 80107be:	60fb      	str	r3, [r7, #12]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b03      	cmp	r3, #3
 80107c4:	d9f0      	bls.n	80107a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80107c6:	bf00      	nop
 80107c8:	bf00      	nop
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	0801b314 	.word	0x0801b314
 80107d4:	0801b3c4 	.word	0x0801b3c4
 80107d8:	0801b358 	.word	0x0801b358
 80107dc:	0801b3d0 	.word	0x0801b3d0
 80107e0:	0801d3d4 	.word	0x0801d3d4

080107e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80107e4:	b5b0      	push	{r4, r5, r7, lr}
 80107e6:	b088      	sub	sp, #32
 80107e8:	af04      	add	r7, sp, #16
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	460b      	mov	r3, r1
 80107ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d106      	bne.n	8010804 <tcp_close_shutdown+0x20>
 80107f6:	4b63      	ldr	r3, [pc, #396]	; (8010984 <tcp_close_shutdown+0x1a0>)
 80107f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80107fc:	4962      	ldr	r1, [pc, #392]	; (8010988 <tcp_close_shutdown+0x1a4>)
 80107fe:	4863      	ldr	r0, [pc, #396]	; (801098c <tcp_close_shutdown+0x1a8>)
 8010800:	f008 fce2 	bl	80191c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010804:	78fb      	ldrb	r3, [r7, #3]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d066      	beq.n	80108d8 <tcp_close_shutdown+0xf4>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	7d1b      	ldrb	r3, [r3, #20]
 801080e:	2b04      	cmp	r3, #4
 8010810:	d003      	beq.n	801081a <tcp_close_shutdown+0x36>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	7d1b      	ldrb	r3, [r3, #20]
 8010816:	2b07      	cmp	r3, #7
 8010818:	d15e      	bne.n	80108d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801081e:	2b00      	cmp	r3, #0
 8010820:	d104      	bne.n	801082c <tcp_close_shutdown+0x48>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010826:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801082a:	d055      	beq.n	80108d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	8b5b      	ldrh	r3, [r3, #26]
 8010830:	f003 0310 	and.w	r3, r3, #16
 8010834:	2b00      	cmp	r3, #0
 8010836:	d106      	bne.n	8010846 <tcp_close_shutdown+0x62>
 8010838:	4b52      	ldr	r3, [pc, #328]	; (8010984 <tcp_close_shutdown+0x1a0>)
 801083a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801083e:	4954      	ldr	r1, [pc, #336]	; (8010990 <tcp_close_shutdown+0x1ac>)
 8010840:	4852      	ldr	r0, [pc, #328]	; (801098c <tcp_close_shutdown+0x1a8>)
 8010842:	f008 fcc1 	bl	80191c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801084e:	687d      	ldr	r5, [r7, #4]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	3304      	adds	r3, #4
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	8ad2      	ldrh	r2, [r2, #22]
 8010858:	6879      	ldr	r1, [r7, #4]
 801085a:	8b09      	ldrh	r1, [r1, #24]
 801085c:	9102      	str	r1, [sp, #8]
 801085e:	9201      	str	r2, [sp, #4]
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	462b      	mov	r3, r5
 8010864:	4622      	mov	r2, r4
 8010866:	4601      	mov	r1, r0
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f004 fe91 	bl	8015590 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f001 f8c6 	bl	8011a00 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010874:	4b47      	ldr	r3, [pc, #284]	; (8010994 <tcp_close_shutdown+0x1b0>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	429a      	cmp	r2, r3
 801087c:	d105      	bne.n	801088a <tcp_close_shutdown+0xa6>
 801087e:	4b45      	ldr	r3, [pc, #276]	; (8010994 <tcp_close_shutdown+0x1b0>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	4a43      	ldr	r2, [pc, #268]	; (8010994 <tcp_close_shutdown+0x1b0>)
 8010886:	6013      	str	r3, [r2, #0]
 8010888:	e013      	b.n	80108b2 <tcp_close_shutdown+0xce>
 801088a:	4b42      	ldr	r3, [pc, #264]	; (8010994 <tcp_close_shutdown+0x1b0>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	60fb      	str	r3, [r7, #12]
 8010890:	e00c      	b.n	80108ac <tcp_close_shutdown+0xc8>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	429a      	cmp	r2, r3
 801089a:	d104      	bne.n	80108a6 <tcp_close_shutdown+0xc2>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	68da      	ldr	r2, [r3, #12]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	60da      	str	r2, [r3, #12]
 80108a4:	e005      	b.n	80108b2 <tcp_close_shutdown+0xce>
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	60fb      	str	r3, [r7, #12]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1ef      	bne.n	8010892 <tcp_close_shutdown+0xae>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	60da      	str	r2, [r3, #12]
 80108b8:	4b37      	ldr	r3, [pc, #220]	; (8010998 <tcp_close_shutdown+0x1b4>)
 80108ba:	2201      	movs	r2, #1
 80108bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80108be:	4b37      	ldr	r3, [pc, #220]	; (801099c <tcp_close_shutdown+0x1b8>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d102      	bne.n	80108ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80108c8:	f003 fd5e 	bl	8014388 <tcp_trigger_input_pcb_close>
 80108cc:	e002      	b.n	80108d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff fed6 	bl	8010680 <tcp_free>
      }
      return ERR_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	e050      	b.n	801097a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	7d1b      	ldrb	r3, [r3, #20]
 80108dc:	2b02      	cmp	r3, #2
 80108de:	d03b      	beq.n	8010958 <tcp_close_shutdown+0x174>
 80108e0:	2b02      	cmp	r3, #2
 80108e2:	dc44      	bgt.n	801096e <tcp_close_shutdown+0x18a>
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <tcp_close_shutdown+0x10a>
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d02a      	beq.n	8010942 <tcp_close_shutdown+0x15e>
 80108ec:	e03f      	b.n	801096e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	8adb      	ldrh	r3, [r3, #22]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d021      	beq.n	801093a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80108f6:	4b2a      	ldr	r3, [pc, #168]	; (80109a0 <tcp_close_shutdown+0x1bc>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d105      	bne.n	801090c <tcp_close_shutdown+0x128>
 8010900:	4b27      	ldr	r3, [pc, #156]	; (80109a0 <tcp_close_shutdown+0x1bc>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	4a26      	ldr	r2, [pc, #152]	; (80109a0 <tcp_close_shutdown+0x1bc>)
 8010908:	6013      	str	r3, [r2, #0]
 801090a:	e013      	b.n	8010934 <tcp_close_shutdown+0x150>
 801090c:	4b24      	ldr	r3, [pc, #144]	; (80109a0 <tcp_close_shutdown+0x1bc>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	60bb      	str	r3, [r7, #8]
 8010912:	e00c      	b.n	801092e <tcp_close_shutdown+0x14a>
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	429a      	cmp	r2, r3
 801091c:	d104      	bne.n	8010928 <tcp_close_shutdown+0x144>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68da      	ldr	r2, [r3, #12]
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	60da      	str	r2, [r3, #12]
 8010926:	e005      	b.n	8010934 <tcp_close_shutdown+0x150>
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	60bb      	str	r3, [r7, #8]
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1ef      	bne.n	8010914 <tcp_close_shutdown+0x130>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7ff fea0 	bl	8010680 <tcp_free>
      break;
 8010940:	e01a      	b.n	8010978 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f7ff ff14 	bl	8010770 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	4816      	ldr	r0, [pc, #88]	; (80109a4 <tcp_close_shutdown+0x1c0>)
 801094c:	f001 f8a8 	bl	8011aa0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7ff feb1 	bl	80106b8 <tcp_free_listen>
      break;
 8010956:	e00f      	b.n	8010978 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010958:	6879      	ldr	r1, [r7, #4]
 801095a:	480e      	ldr	r0, [pc, #56]	; (8010994 <tcp_close_shutdown+0x1b0>)
 801095c:	f001 f8a0 	bl	8011aa0 <tcp_pcb_remove>
 8010960:	4b0d      	ldr	r3, [pc, #52]	; (8010998 <tcp_close_shutdown+0x1b4>)
 8010962:	2201      	movs	r2, #1
 8010964:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7ff fe8a 	bl	8010680 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801096c:	e004      	b.n	8010978 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f81a 	bl	80109a8 <tcp_close_shutdown_fin>
 8010974:	4603      	mov	r3, r0
 8010976:	e000      	b.n	801097a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bdb0      	pop	{r4, r5, r7, pc}
 8010982:	bf00      	nop
 8010984:	0801b314 	.word	0x0801b314
 8010988:	0801b3e8 	.word	0x0801b3e8
 801098c:	0801b358 	.word	0x0801b358
 8010990:	0801b408 	.word	0x0801b408
 8010994:	2000daa4 	.word	0x2000daa4
 8010998:	2000daac 	.word	0x2000daac
 801099c:	2000dae4 	.word	0x2000dae4
 80109a0:	2000da9c 	.word	0x2000da9c
 80109a4:	2000daa0 	.word	0x2000daa0

080109a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_close_shutdown_fin+0x1c>
 80109b6:	4b2e      	ldr	r3, [pc, #184]	; (8010a70 <tcp_close_shutdown_fin+0xc8>)
 80109b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80109bc:	492d      	ldr	r1, [pc, #180]	; (8010a74 <tcp_close_shutdown_fin+0xcc>)
 80109be:	482e      	ldr	r0, [pc, #184]	; (8010a78 <tcp_close_shutdown_fin+0xd0>)
 80109c0:	f008 fc02 	bl	80191c8 <iprintf>

  switch (pcb->state) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7d1b      	ldrb	r3, [r3, #20]
 80109c8:	2b07      	cmp	r3, #7
 80109ca:	d020      	beq.n	8010a0e <tcp_close_shutdown_fin+0x66>
 80109cc:	2b07      	cmp	r3, #7
 80109ce:	dc2b      	bgt.n	8010a28 <tcp_close_shutdown_fin+0x80>
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	d002      	beq.n	80109da <tcp_close_shutdown_fin+0x32>
 80109d4:	2b04      	cmp	r3, #4
 80109d6:	d00d      	beq.n	80109f4 <tcp_close_shutdown_fin+0x4c>
 80109d8:	e026      	b.n	8010a28 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f003 fee6 	bl	80147ac <tcp_send_fin>
 80109e0:	4603      	mov	r3, r0
 80109e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80109e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d11f      	bne.n	8010a2c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2205      	movs	r2, #5
 80109f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80109f2:	e01b      	b.n	8010a2c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f003 fed9 	bl	80147ac <tcp_send_fin>
 80109fa:	4603      	mov	r3, r0
 80109fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80109fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d114      	bne.n	8010a30 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2205      	movs	r2, #5
 8010a0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a0c:	e010      	b.n	8010a30 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f003 fecc 	bl	80147ac <tcp_send_fin>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d109      	bne.n	8010a34 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2209      	movs	r2, #9
 8010a24:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a26:	e005      	b.n	8010a34 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	e01c      	b.n	8010a66 <tcp_close_shutdown_fin+0xbe>
      break;
 8010a2c:	bf00      	nop
 8010a2e:	e002      	b.n	8010a36 <tcp_close_shutdown_fin+0x8e>
      break;
 8010a30:	bf00      	nop
 8010a32:	e000      	b.n	8010a36 <tcp_close_shutdown_fin+0x8e>
      break;
 8010a34:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d103      	bne.n	8010a46 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f003 fff2 	bl	8014a28 <tcp_output>
 8010a44:	e00d      	b.n	8010a62 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4e:	d108      	bne.n	8010a62 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	8b5b      	ldrh	r3, [r3, #26]
 8010a54:	f043 0308 	orr.w	r3, r3, #8
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	e001      	b.n	8010a66 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	0801b314 	.word	0x0801b314
 8010a74:	0801b3c4 	.word	0x0801b3c4
 8010a78:	0801b358 	.word	0x0801b358

08010a7c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d109      	bne.n	8010a9e <tcp_close+0x22>
 8010a8a:	4b0f      	ldr	r3, [pc, #60]	; (8010ac8 <tcp_close+0x4c>)
 8010a8c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010a90:	490e      	ldr	r1, [pc, #56]	; (8010acc <tcp_close+0x50>)
 8010a92:	480f      	ldr	r0, [pc, #60]	; (8010ad0 <tcp_close+0x54>)
 8010a94:	f008 fb98 	bl	80191c8 <iprintf>
 8010a98:	f06f 030f 	mvn.w	r3, #15
 8010a9c:	e00f      	b.n	8010abe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	7d1b      	ldrb	r3, [r3, #20]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d006      	beq.n	8010ab4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	8b5b      	ldrh	r3, [r3, #26]
 8010aaa:	f043 0310 	orr.w	r3, r3, #16
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010ab4:	2101      	movs	r1, #1
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff fe94 	bl	80107e4 <tcp_close_shutdown>
 8010abc:	4603      	mov	r3, r0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3708      	adds	r7, #8
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	0801b314 	.word	0x0801b314
 8010acc:	0801b424 	.word	0x0801b424
 8010ad0:	0801b358 	.word	0x0801b358

08010ad4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b08e      	sub	sp, #56	; 0x38
 8010ad8:	af04      	add	r7, sp, #16
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d107      	bne.n	8010af4 <tcp_abandon+0x20>
 8010ae4:	4b52      	ldr	r3, [pc, #328]	; (8010c30 <tcp_abandon+0x15c>)
 8010ae6:	f240 223d 	movw	r2, #573	; 0x23d
 8010aea:	4952      	ldr	r1, [pc, #328]	; (8010c34 <tcp_abandon+0x160>)
 8010aec:	4852      	ldr	r0, [pc, #328]	; (8010c38 <tcp_abandon+0x164>)
 8010aee:	f008 fb6b 	bl	80191c8 <iprintf>
 8010af2:	e099      	b.n	8010c28 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	7d1b      	ldrb	r3, [r3, #20]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d106      	bne.n	8010b0a <tcp_abandon+0x36>
 8010afc:	4b4c      	ldr	r3, [pc, #304]	; (8010c30 <tcp_abandon+0x15c>)
 8010afe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010b02:	494e      	ldr	r1, [pc, #312]	; (8010c3c <tcp_abandon+0x168>)
 8010b04:	484c      	ldr	r0, [pc, #304]	; (8010c38 <tcp_abandon+0x164>)
 8010b06:	f008 fb5f 	bl	80191c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	7d1b      	ldrb	r3, [r3, #20]
 8010b0e:	2b0a      	cmp	r3, #10
 8010b10:	d107      	bne.n	8010b22 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	484a      	ldr	r0, [pc, #296]	; (8010c40 <tcp_abandon+0x16c>)
 8010b16:	f000 ffc3 	bl	8011aa0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7ff fdb0 	bl	8010680 <tcp_free>
 8010b20:	e082      	b.n	8010c28 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010b26:	2300      	movs	r3, #0
 8010b28:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b2e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b34:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b3c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	691b      	ldr	r3, [r3, #16]
 8010b42:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	7d1b      	ldrb	r3, [r3, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d126      	bne.n	8010b9a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	8adb      	ldrh	r3, [r3, #22]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d02e      	beq.n	8010bb2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010b54:	4b3b      	ldr	r3, [pc, #236]	; (8010c44 <tcp_abandon+0x170>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d105      	bne.n	8010b6a <tcp_abandon+0x96>
 8010b5e:	4b39      	ldr	r3, [pc, #228]	; (8010c44 <tcp_abandon+0x170>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	4a37      	ldr	r2, [pc, #220]	; (8010c44 <tcp_abandon+0x170>)
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	e013      	b.n	8010b92 <tcp_abandon+0xbe>
 8010b6a:	4b36      	ldr	r3, [pc, #216]	; (8010c44 <tcp_abandon+0x170>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	61fb      	str	r3, [r7, #28]
 8010b70:	e00c      	b.n	8010b8c <tcp_abandon+0xb8>
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d104      	bne.n	8010b86 <tcp_abandon+0xb2>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	68da      	ldr	r2, [r3, #12]
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	60da      	str	r2, [r3, #12]
 8010b84:	e005      	b.n	8010b92 <tcp_abandon+0xbe>
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	61fb      	str	r3, [r7, #28]
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1ef      	bne.n	8010b72 <tcp_abandon+0x9e>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	60da      	str	r2, [r3, #12]
 8010b98:	e00b      	b.n	8010bb2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	8adb      	ldrh	r3, [r3, #22]
 8010ba2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ba4:	6879      	ldr	r1, [r7, #4]
 8010ba6:	4828      	ldr	r0, [pc, #160]	; (8010c48 <tcp_abandon+0x174>)
 8010ba8:	f000 ff7a 	bl	8011aa0 <tcp_pcb_remove>
 8010bac:	4b27      	ldr	r3, [pc, #156]	; (8010c4c <tcp_abandon+0x178>)
 8010bae:	2201      	movs	r2, #1
 8010bb0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d004      	beq.n	8010bc4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 fd1c 	bl	80115fc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d004      	beq.n	8010bd6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f000 fd13 	bl	80115fc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d004      	beq.n	8010be8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010be2:	4618      	mov	r0, r3
 8010be4:	f000 fd0a 	bl	80115fc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00e      	beq.n	8010c0c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010bee:	6879      	ldr	r1, [r7, #4]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	3304      	adds	r3, #4
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	8b12      	ldrh	r2, [r2, #24]
 8010bf8:	9202      	str	r2, [sp, #8]
 8010bfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010bfc:	9201      	str	r2, [sp, #4]
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	460b      	mov	r3, r1
 8010c02:	697a      	ldr	r2, [r7, #20]
 8010c04:	69b9      	ldr	r1, [r7, #24]
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f004 fcc2 	bl	8015590 <tcp_rst>
    }
    last_state = pcb->state;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	7d1b      	ldrb	r3, [r3, #20]
 8010c10:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff fd34 	bl	8010680 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d004      	beq.n	8010c28 <tcp_abandon+0x154>
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	f06f 010c 	mvn.w	r1, #12
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	4798      	blx	r3
  }
}
 8010c28:	3728      	adds	r7, #40	; 0x28
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	0801b314 	.word	0x0801b314
 8010c34:	0801b458 	.word	0x0801b458
 8010c38:	0801b358 	.word	0x0801b358
 8010c3c:	0801b474 	.word	0x0801b474
 8010c40:	2000daa8 	.word	0x2000daa8
 8010c44:	2000da9c 	.word	0x2000da9c
 8010c48:	2000daa4 	.word	0x2000daa4
 8010c4c:	2000daac 	.word	0x2000daac

08010c50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010c58:	2101      	movs	r1, #1
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7ff ff3a 	bl	8010ad4 <tcp_abandon>
}
 8010c60:	bf00      	nop
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d106      	bne.n	8010c84 <tcp_update_rcv_ann_wnd+0x1c>
 8010c76:	4b25      	ldr	r3, [pc, #148]	; (8010d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8010c78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010c7c:	4924      	ldr	r1, [pc, #144]	; (8010d10 <tcp_update_rcv_ann_wnd+0xa8>)
 8010c7e:	4825      	ldr	r0, [pc, #148]	; (8010d14 <tcp_update_rcv_ann_wnd+0xac>)
 8010c80:	f008 faa2 	bl	80191c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010c8c:	4413      	add	r3, r2
 8010c8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010c98:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010c9c:	bf28      	it	cs
 8010c9e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010ca2:	b292      	uxth	r2, r2
 8010ca4:	4413      	add	r3, r2
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	db08      	blt.n	8010cc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	1ad3      	subs	r3, r2, r3
 8010cbe:	e020      	b.n	8010d02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dd03      	ble.n	8010cd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010cd4:	e014      	b.n	8010d00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ce8:	d306      	bcc.n	8010cf8 <tcp_update_rcv_ann_wnd+0x90>
 8010cea:	4b08      	ldr	r3, [pc, #32]	; (8010d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8010cec:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010cf0:	4909      	ldr	r1, [pc, #36]	; (8010d18 <tcp_update_rcv_ann_wnd+0xb0>)
 8010cf2:	4808      	ldr	r0, [pc, #32]	; (8010d14 <tcp_update_rcv_ann_wnd+0xac>)
 8010cf4:	f008 fa68 	bl	80191c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010d00:	2300      	movs	r3, #0
  }
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	0801b314 	.word	0x0801b314
 8010d10:	0801b570 	.word	0x0801b570
 8010d14:	0801b358 	.word	0x0801b358
 8010d18:	0801b594 	.word	0x0801b594

08010d1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	460b      	mov	r3, r1
 8010d26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d107      	bne.n	8010d3e <tcp_recved+0x22>
 8010d2e:	4b1f      	ldr	r3, [pc, #124]	; (8010dac <tcp_recved+0x90>)
 8010d30:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010d34:	491e      	ldr	r1, [pc, #120]	; (8010db0 <tcp_recved+0x94>)
 8010d36:	481f      	ldr	r0, [pc, #124]	; (8010db4 <tcp_recved+0x98>)
 8010d38:	f008 fa46 	bl	80191c8 <iprintf>
 8010d3c:	e032      	b.n	8010da4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	7d1b      	ldrb	r3, [r3, #20]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d106      	bne.n	8010d54 <tcp_recved+0x38>
 8010d46:	4b19      	ldr	r3, [pc, #100]	; (8010dac <tcp_recved+0x90>)
 8010d48:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010d4c:	491a      	ldr	r1, [pc, #104]	; (8010db8 <tcp_recved+0x9c>)
 8010d4e:	4819      	ldr	r0, [pc, #100]	; (8010db4 <tcp_recved+0x98>)
 8010d50:	f008 fa3a 	bl	80191c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d58:	887b      	ldrh	r3, [r7, #2]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010d5e:	89fb      	ldrh	r3, [r7, #14]
 8010d60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010d64:	d804      	bhi.n	8010d70 <tcp_recved+0x54>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d6a:	89fa      	ldrh	r2, [r7, #14]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d204      	bcs.n	8010d7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010d76:	851a      	strh	r2, [r3, #40]	; 0x28
 8010d78:	e002      	b.n	8010d80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	89fa      	ldrh	r2, [r7, #14]
 8010d7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f7ff ff71 	bl	8010c68 <tcp_update_rcv_ann_wnd>
 8010d86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010d8e:	d309      	bcc.n	8010da4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	8b5b      	ldrh	r3, [r3, #26]
 8010d94:	f043 0302 	orr.w	r3, r3, #2
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f003 fe42 	bl	8014a28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	0801b314 	.word	0x0801b314
 8010db0:	0801b5b0 	.word	0x0801b5b0
 8010db4:	0801b358 	.word	0x0801b358
 8010db8:	0801b5c8 	.word	0x0801b5c8

08010dbc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010dbc:	b5b0      	push	{r4, r5, r7, lr}
 8010dbe:	b090      	sub	sp, #64	; 0x40
 8010dc0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010dc8:	4b94      	ldr	r3, [pc, #592]	; (801101c <tcp_slowtmr+0x260>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	4a93      	ldr	r2, [pc, #588]	; (801101c <tcp_slowtmr+0x260>)
 8010dd0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010dd2:	4b93      	ldr	r3, [pc, #588]	; (8011020 <tcp_slowtmr+0x264>)
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b91      	ldr	r3, [pc, #580]	; (8011020 <tcp_slowtmr+0x264>)
 8010ddc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010de2:	4b90      	ldr	r3, [pc, #576]	; (8011024 <tcp_slowtmr+0x268>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010de8:	e29f      	b.n	801132a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dec:	7d1b      	ldrb	r3, [r3, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d106      	bne.n	8010e00 <tcp_slowtmr+0x44>
 8010df2:	4b8d      	ldr	r3, [pc, #564]	; (8011028 <tcp_slowtmr+0x26c>)
 8010df4:	f240 42be 	movw	r2, #1214	; 0x4be
 8010df8:	498c      	ldr	r1, [pc, #560]	; (801102c <tcp_slowtmr+0x270>)
 8010dfa:	488d      	ldr	r0, [pc, #564]	; (8011030 <tcp_slowtmr+0x274>)
 8010dfc:	f008 f9e4 	bl	80191c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e02:	7d1b      	ldrb	r3, [r3, #20]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d106      	bne.n	8010e16 <tcp_slowtmr+0x5a>
 8010e08:	4b87      	ldr	r3, [pc, #540]	; (8011028 <tcp_slowtmr+0x26c>)
 8010e0a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010e0e:	4989      	ldr	r1, [pc, #548]	; (8011034 <tcp_slowtmr+0x278>)
 8010e10:	4887      	ldr	r0, [pc, #540]	; (8011030 <tcp_slowtmr+0x274>)
 8010e12:	f008 f9d9 	bl	80191c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e18:	7d1b      	ldrb	r3, [r3, #20]
 8010e1a:	2b0a      	cmp	r3, #10
 8010e1c:	d106      	bne.n	8010e2c <tcp_slowtmr+0x70>
 8010e1e:	4b82      	ldr	r3, [pc, #520]	; (8011028 <tcp_slowtmr+0x26c>)
 8010e20:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010e24:	4984      	ldr	r1, [pc, #528]	; (8011038 <tcp_slowtmr+0x27c>)
 8010e26:	4882      	ldr	r0, [pc, #520]	; (8011030 <tcp_slowtmr+0x274>)
 8010e28:	f008 f9ce 	bl	80191c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2e:	7f9a      	ldrb	r2, [r3, #30]
 8010e30:	4b7b      	ldr	r3, [pc, #492]	; (8011020 <tcp_slowtmr+0x264>)
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d105      	bne.n	8010e44 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010e42:	e272      	b.n	801132a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010e44:	4b76      	ldr	r3, [pc, #472]	; (8011020 <tcp_slowtmr+0x264>)
 8010e46:	781a      	ldrb	r2, [r3, #0]
 8010e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5a:	7d1b      	ldrb	r3, [r3, #20]
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d10a      	bne.n	8010e76 <tcp_slowtmr+0xba>
 8010e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e66:	2b05      	cmp	r3, #5
 8010e68:	d905      	bls.n	8010e76 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e6e:	3301      	adds	r3, #1
 8010e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e74:	e11e      	b.n	80110b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e7c:	2b0b      	cmp	r3, #11
 8010e7e:	d905      	bls.n	8010e8c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e84:	3301      	adds	r3, #1
 8010e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e8a:	e113      	b.n	80110b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d075      	beq.n	8010f82 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d006      	beq.n	8010eac <tcp_slowtmr+0xf0>
 8010e9e:	4b62      	ldr	r3, [pc, #392]	; (8011028 <tcp_slowtmr+0x26c>)
 8010ea0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010ea4:	4965      	ldr	r1, [pc, #404]	; (801103c <tcp_slowtmr+0x280>)
 8010ea6:	4862      	ldr	r0, [pc, #392]	; (8011030 <tcp_slowtmr+0x274>)
 8010ea8:	f008 f98e 	bl	80191c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d106      	bne.n	8010ec2 <tcp_slowtmr+0x106>
 8010eb4:	4b5c      	ldr	r3, [pc, #368]	; (8011028 <tcp_slowtmr+0x26c>)
 8010eb6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010eba:	4961      	ldr	r1, [pc, #388]	; (8011040 <tcp_slowtmr+0x284>)
 8010ebc:	485c      	ldr	r0, [pc, #368]	; (8011030 <tcp_slowtmr+0x274>)
 8010ebe:	f008 f983 	bl	80191c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ec8:	2b0b      	cmp	r3, #11
 8010eca:	d905      	bls.n	8010ed8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ed6:	e0ed      	b.n	80110b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	4a58      	ldr	r2, [pc, #352]	; (8011044 <tcp_slowtmr+0x288>)
 8010ee2:	5cd3      	ldrb	r3, [r2, r3]
 8010ee4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010eec:	7c7a      	ldrb	r2, [r7, #17]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d907      	bls.n	8010f02 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010ef8:	3301      	adds	r3, #1
 8010efa:	b2da      	uxtb	r2, r3
 8010efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010f08:	7c7a      	ldrb	r2, [r7, #17]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	f200 80d2 	bhi.w	80110b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010f10:	2301      	movs	r3, #1
 8010f12:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d108      	bne.n	8010f30 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f20:	f004 fc2a 	bl	8015778 <tcp_zero_window_probe>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d014      	beq.n	8010f54 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	623b      	str	r3, [r7, #32]
 8010f2e:	e011      	b.n	8010f54 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f36:	4619      	mov	r1, r3
 8010f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f3a:	f003 faef 	bl	801451c <tcp_split_unsent_seg>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d107      	bne.n	8010f54 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f46:	f003 fd6f 	bl	8014a28 <tcp_output>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d101      	bne.n	8010f54 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010f54:	6a3b      	ldr	r3, [r7, #32]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 80ac 	beq.w	80110b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f6a:	2b06      	cmp	r3, #6
 8010f6c:	f200 80a2 	bhi.w	80110b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f76:	3301      	adds	r3, #1
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010f80:	e098      	b.n	80110b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	db0f      	blt.n	8010fac <tcp_slowtmr+0x1f0>
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d008      	beq.n	8010fac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	b21a      	sxth	r2, r3
 8010fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010faa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	db7b      	blt.n	80110b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010fbe:	f004 f825 	bl	801500c <tcp_rexmit_rto_prepare>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d007      	beq.n	8010fd8 <tcp_slowtmr+0x21c>
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d171      	bne.n	80110b4 <tcp_slowtmr+0x2f8>
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d06d      	beq.n	80110b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fda:	7d1b      	ldrb	r3, [r3, #20]
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d03a      	beq.n	8011056 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fe6:	2b0c      	cmp	r3, #12
 8010fe8:	bf28      	it	cs
 8010fea:	230c      	movcs	r3, #12
 8010fec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ff4:	10db      	asrs	r3, r3, #3
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011000:	4413      	add	r3, r2
 8011002:	7efa      	ldrb	r2, [r7, #27]
 8011004:	4910      	ldr	r1, [pc, #64]	; (8011048 <tcp_slowtmr+0x28c>)
 8011006:	5c8a      	ldrb	r2, [r1, r2]
 8011008:	4093      	lsls	r3, r2
 801100a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011012:	4293      	cmp	r3, r2
 8011014:	dc1a      	bgt.n	801104c <tcp_slowtmr+0x290>
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	b21a      	sxth	r2, r3
 801101a:	e019      	b.n	8011050 <tcp_slowtmr+0x294>
 801101c:	2000da98 	.word	0x2000da98
 8011020:	2000daae 	.word	0x2000daae
 8011024:	2000daa4 	.word	0x2000daa4
 8011028:	0801b314 	.word	0x0801b314
 801102c:	0801b658 	.word	0x0801b658
 8011030:	0801b358 	.word	0x0801b358
 8011034:	0801b684 	.word	0x0801b684
 8011038:	0801b6b0 	.word	0x0801b6b0
 801103c:	0801b6e0 	.word	0x0801b6e0
 8011040:	0801b714 	.word	0x0801b714
 8011044:	0801d3cc 	.word	0x0801d3cc
 8011048:	0801d3bc 	.word	0x0801d3bc
 801104c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011058:	2200      	movs	r2, #0
 801105a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011064:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011068:	4293      	cmp	r3, r2
 801106a:	bf28      	it	cs
 801106c:	4613      	movcs	r3, r2
 801106e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011070:	8a7b      	ldrh	r3, [r7, #18]
 8011072:	085b      	lsrs	r3, r3, #1
 8011074:	b29a      	uxth	r2, r3
 8011076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011078:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	b29b      	uxth	r3, r3
 801108a:	429a      	cmp	r2, r3
 801108c:	d206      	bcs.n	801109c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	b29a      	uxth	r2, r3
 8011096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011098:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80110a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80110a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a8:	2200      	movs	r2, #0
 80110aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80110ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110b0:	f004 f81c 	bl	80150ec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	7d1b      	ldrb	r3, [r3, #20]
 80110b8:	2b06      	cmp	r3, #6
 80110ba:	d111      	bne.n	80110e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80110bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110be:	8b5b      	ldrh	r3, [r3, #26]
 80110c0:	f003 0310 	and.w	r3, r3, #16
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d00b      	beq.n	80110e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110c8:	4b9d      	ldr	r3, [pc, #628]	; (8011340 <tcp_slowtmr+0x584>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ce:	6a1b      	ldr	r3, [r3, #32]
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	2b28      	cmp	r3, #40	; 0x28
 80110d4:	d904      	bls.n	80110e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80110d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110da:	3301      	adds	r3, #1
 80110dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80110e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e2:	7a5b      	ldrb	r3, [r3, #9]
 80110e4:	f003 0308 	and.w	r3, r3, #8
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d04c      	beq.n	8011186 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80110f0:	2b04      	cmp	r3, #4
 80110f2:	d003      	beq.n	80110fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80110f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80110f8:	2b07      	cmp	r3, #7
 80110fa:	d144      	bne.n	8011186 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80110fc:	4b90      	ldr	r3, [pc, #576]	; (8011340 <tcp_slowtmr+0x584>)
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	6a1b      	ldr	r3, [r3, #32]
 8011104:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801110c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011110:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011114:	498b      	ldr	r1, [pc, #556]	; (8011344 <tcp_slowtmr+0x588>)
 8011116:	fba1 1303 	umull	r1, r3, r1, r3
 801111a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801111c:	429a      	cmp	r2, r3
 801111e:	d90a      	bls.n	8011136 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011124:	3301      	adds	r3, #1
 8011126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801112a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801112e:	3301      	adds	r3, #1
 8011130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011134:	e027      	b.n	8011186 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011136:	4b82      	ldr	r3, [pc, #520]	; (8011340 <tcp_slowtmr+0x584>)
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113c:	6a1b      	ldr	r3, [r3, #32]
 801113e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011142:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011148:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801114c:	4618      	mov	r0, r3
 801114e:	4b7e      	ldr	r3, [pc, #504]	; (8011348 <tcp_slowtmr+0x58c>)
 8011150:	fb00 f303 	mul.w	r3, r0, r3
 8011154:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011156:	497b      	ldr	r1, [pc, #492]	; (8011344 <tcp_slowtmr+0x588>)
 8011158:	fba1 1303 	umull	r1, r3, r1, r3
 801115c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801115e:	429a      	cmp	r2, r3
 8011160:	d911      	bls.n	8011186 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011164:	f004 fac8 	bl	80156f8 <tcp_keepalive>
 8011168:	4603      	mov	r3, r0
 801116a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801116e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011172:	2b00      	cmp	r3, #0
 8011174:	d107      	bne.n	8011186 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011178:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801117c:	3301      	adds	r3, #1
 801117e:	b2da      	uxtb	r2, r3
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118a:	2b00      	cmp	r3, #0
 801118c:	d011      	beq.n	80111b2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801118e:	4b6c      	ldr	r3, [pc, #432]	; (8011340 <tcp_slowtmr+0x584>)
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011194:	6a1b      	ldr	r3, [r3, #32]
 8011196:	1ad2      	subs	r2, r2, r3
 8011198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801119e:	4619      	mov	r1, r3
 80111a0:	460b      	mov	r3, r1
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	440b      	add	r3, r1
 80111a6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d302      	bcc.n	80111b2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80111ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111ae:	f000 fddb 	bl	8011d68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80111b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b4:	7d1b      	ldrb	r3, [r3, #20]
 80111b6:	2b03      	cmp	r3, #3
 80111b8:	d10b      	bne.n	80111d2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80111ba:	4b61      	ldr	r3, [pc, #388]	; (8011340 <tcp_slowtmr+0x584>)
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c0:	6a1b      	ldr	r3, [r3, #32]
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	2b28      	cmp	r3, #40	; 0x28
 80111c6:	d904      	bls.n	80111d2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80111c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111cc:	3301      	adds	r3, #1
 80111ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80111d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d4:	7d1b      	ldrb	r3, [r3, #20]
 80111d6:	2b09      	cmp	r3, #9
 80111d8:	d10b      	bne.n	80111f2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80111da:	4b59      	ldr	r3, [pc, #356]	; (8011340 <tcp_slowtmr+0x584>)
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	2bf0      	cmp	r3, #240	; 0xf0
 80111e6:	d904      	bls.n	80111f2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80111e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111ec:	3301      	adds	r3, #1
 80111ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80111f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d060      	beq.n	80112bc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011200:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011204:	f000 fbfc 	bl	8011a00 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120a:	2b00      	cmp	r3, #0
 801120c:	d010      	beq.n	8011230 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801120e:	4b4f      	ldr	r3, [pc, #316]	; (801134c <tcp_slowtmr+0x590>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011214:	429a      	cmp	r2, r3
 8011216:	d106      	bne.n	8011226 <tcp_slowtmr+0x46a>
 8011218:	4b4d      	ldr	r3, [pc, #308]	; (8011350 <tcp_slowtmr+0x594>)
 801121a:	f240 526d 	movw	r2, #1389	; 0x56d
 801121e:	494d      	ldr	r1, [pc, #308]	; (8011354 <tcp_slowtmr+0x598>)
 8011220:	484d      	ldr	r0, [pc, #308]	; (8011358 <tcp_slowtmr+0x59c>)
 8011222:	f007 ffd1 	bl	80191c8 <iprintf>
        prev->next = pcb->next;
 8011226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011228:	68da      	ldr	r2, [r3, #12]
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	60da      	str	r2, [r3, #12]
 801122e:	e00f      	b.n	8011250 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011230:	4b46      	ldr	r3, [pc, #280]	; (801134c <tcp_slowtmr+0x590>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011236:	429a      	cmp	r2, r3
 8011238:	d006      	beq.n	8011248 <tcp_slowtmr+0x48c>
 801123a:	4b45      	ldr	r3, [pc, #276]	; (8011350 <tcp_slowtmr+0x594>)
 801123c:	f240 5271 	movw	r2, #1393	; 0x571
 8011240:	4946      	ldr	r1, [pc, #280]	; (801135c <tcp_slowtmr+0x5a0>)
 8011242:	4845      	ldr	r0, [pc, #276]	; (8011358 <tcp_slowtmr+0x59c>)
 8011244:	f007 ffc0 	bl	80191c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	4a3f      	ldr	r2, [pc, #252]	; (801134c <tcp_slowtmr+0x590>)
 801124e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011254:	2b00      	cmp	r3, #0
 8011256:	d013      	beq.n	8011280 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011260:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011264:	3304      	adds	r3, #4
 8011266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011268:	8ad2      	ldrh	r2, [r2, #22]
 801126a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801126c:	8b09      	ldrh	r1, [r1, #24]
 801126e:	9102      	str	r1, [sp, #8]
 8011270:	9201      	str	r2, [sp, #4]
 8011272:	9300      	str	r3, [sp, #0]
 8011274:	462b      	mov	r3, r5
 8011276:	4622      	mov	r2, r4
 8011278:	4601      	mov	r1, r0
 801127a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801127c:	f004 f988 	bl	8015590 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	691b      	ldr	r3, [r3, #16]
 8011284:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011288:	7d1b      	ldrb	r3, [r3, #20]
 801128a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011296:	6838      	ldr	r0, [r7, #0]
 8011298:	f7ff f9f2 	bl	8010680 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801129c:	4b30      	ldr	r3, [pc, #192]	; (8011360 <tcp_slowtmr+0x5a4>)
 801129e:	2200      	movs	r2, #0
 80112a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d004      	beq.n	80112b2 <tcp_slowtmr+0x4f6>
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f06f 010c 	mvn.w	r1, #12
 80112ae:	68b8      	ldr	r0, [r7, #8]
 80112b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80112b2:	4b2b      	ldr	r3, [pc, #172]	; (8011360 <tcp_slowtmr+0x5a4>)
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d037      	beq.n	801132a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80112ba:	e590      	b.n	8010dde <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80112c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	7f1b      	ldrb	r3, [r3, #28]
 80112ca:	3301      	adds	r3, #1
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	7f1a      	ldrb	r2, [r3, #28]
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	7f5b      	ldrb	r3, [r3, #29]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d325      	bcc.n	801132a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80112de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e0:	2200      	movs	r2, #0
 80112e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80112e4:	4b1e      	ldr	r3, [pc, #120]	; (8011360 <tcp_slowtmr+0x5a4>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80112ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00b      	beq.n	801130c <tcp_slowtmr+0x550>
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112fc:	6912      	ldr	r2, [r2, #16]
 80112fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011300:	4610      	mov	r0, r2
 8011302:	4798      	blx	r3
 8011304:	4603      	mov	r3, r0
 8011306:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801130a:	e002      	b.n	8011312 <tcp_slowtmr+0x556>
 801130c:	2300      	movs	r3, #0
 801130e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011312:	4b13      	ldr	r3, [pc, #76]	; (8011360 <tcp_slowtmr+0x5a4>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d000      	beq.n	801131c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801131a:	e560      	b.n	8010dde <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801131c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011320:	2b00      	cmp	r3, #0
 8011322:	d102      	bne.n	801132a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011326:	f003 fb7f 	bl	8014a28 <tcp_output>
  while (pcb != NULL) {
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	2b00      	cmp	r3, #0
 801132e:	f47f ad5c 	bne.w	8010dea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011332:	2300      	movs	r3, #0
 8011334:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011336:	4b0b      	ldr	r3, [pc, #44]	; (8011364 <tcp_slowtmr+0x5a8>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801133c:	e067      	b.n	801140e <tcp_slowtmr+0x652>
 801133e:	bf00      	nop
 8011340:	2000da98 	.word	0x2000da98
 8011344:	10624dd3 	.word	0x10624dd3
 8011348:	000124f8 	.word	0x000124f8
 801134c:	2000daa4 	.word	0x2000daa4
 8011350:	0801b314 	.word	0x0801b314
 8011354:	0801b74c 	.word	0x0801b74c
 8011358:	0801b358 	.word	0x0801b358
 801135c:	0801b778 	.word	0x0801b778
 8011360:	2000daac 	.word	0x2000daac
 8011364:	2000daa8 	.word	0x2000daa8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	7d1b      	ldrb	r3, [r3, #20]
 801136c:	2b0a      	cmp	r3, #10
 801136e:	d006      	beq.n	801137e <tcp_slowtmr+0x5c2>
 8011370:	4b2b      	ldr	r3, [pc, #172]	; (8011420 <tcp_slowtmr+0x664>)
 8011372:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011376:	492b      	ldr	r1, [pc, #172]	; (8011424 <tcp_slowtmr+0x668>)
 8011378:	482b      	ldr	r0, [pc, #172]	; (8011428 <tcp_slowtmr+0x66c>)
 801137a:	f007 ff25 	bl	80191c8 <iprintf>
    pcb_remove = 0;
 801137e:	2300      	movs	r3, #0
 8011380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011384:	4b29      	ldr	r3, [pc, #164]	; (801142c <tcp_slowtmr+0x670>)
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138a:	6a1b      	ldr	r3, [r3, #32]
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	2bf0      	cmp	r3, #240	; 0xf0
 8011390:	d904      	bls.n	801139c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011396:	3301      	adds	r3, #1
 8011398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801139c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d02f      	beq.n	8011404 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80113a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113a6:	f000 fb2b 	bl	8011a00 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80113aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d010      	beq.n	80113d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80113b0:	4b1f      	ldr	r3, [pc, #124]	; (8011430 <tcp_slowtmr+0x674>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d106      	bne.n	80113c8 <tcp_slowtmr+0x60c>
 80113ba:	4b19      	ldr	r3, [pc, #100]	; (8011420 <tcp_slowtmr+0x664>)
 80113bc:	f240 52af 	movw	r2, #1455	; 0x5af
 80113c0:	491c      	ldr	r1, [pc, #112]	; (8011434 <tcp_slowtmr+0x678>)
 80113c2:	4819      	ldr	r0, [pc, #100]	; (8011428 <tcp_slowtmr+0x66c>)
 80113c4:	f007 ff00 	bl	80191c8 <iprintf>
        prev->next = pcb->next;
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	68da      	ldr	r2, [r3, #12]
 80113cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ce:	60da      	str	r2, [r3, #12]
 80113d0:	e00f      	b.n	80113f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80113d2:	4b17      	ldr	r3, [pc, #92]	; (8011430 <tcp_slowtmr+0x674>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113d8:	429a      	cmp	r2, r3
 80113da:	d006      	beq.n	80113ea <tcp_slowtmr+0x62e>
 80113dc:	4b10      	ldr	r3, [pc, #64]	; (8011420 <tcp_slowtmr+0x664>)
 80113de:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80113e2:	4915      	ldr	r1, [pc, #84]	; (8011438 <tcp_slowtmr+0x67c>)
 80113e4:	4810      	ldr	r0, [pc, #64]	; (8011428 <tcp_slowtmr+0x66c>)
 80113e6:	f007 feef 	bl	80191c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80113ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	4a10      	ldr	r2, [pc, #64]	; (8011430 <tcp_slowtmr+0x674>)
 80113f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80113f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80113f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80113fc:	69f8      	ldr	r0, [r7, #28]
 80113fe:	f7ff f93f 	bl	8010680 <tcp_free>
 8011402:	e004      	b.n	801140e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011406:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1a9      	bne.n	8011368 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011414:	bf00      	nop
 8011416:	bf00      	nop
 8011418:	3730      	adds	r7, #48	; 0x30
 801141a:	46bd      	mov	sp, r7
 801141c:	bdb0      	pop	{r4, r5, r7, pc}
 801141e:	bf00      	nop
 8011420:	0801b314 	.word	0x0801b314
 8011424:	0801b7a4 	.word	0x0801b7a4
 8011428:	0801b358 	.word	0x0801b358
 801142c:	2000da98 	.word	0x2000da98
 8011430:	2000daa8 	.word	0x2000daa8
 8011434:	0801b7d4 	.word	0x0801b7d4
 8011438:	0801b7fc 	.word	0x0801b7fc

0801143c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011442:	4b2d      	ldr	r3, [pc, #180]	; (80114f8 <tcp_fasttmr+0xbc>)
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	3301      	adds	r3, #1
 8011448:	b2da      	uxtb	r2, r3
 801144a:	4b2b      	ldr	r3, [pc, #172]	; (80114f8 <tcp_fasttmr+0xbc>)
 801144c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801144e:	4b2b      	ldr	r3, [pc, #172]	; (80114fc <tcp_fasttmr+0xc0>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011454:	e048      	b.n	80114e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	7f9a      	ldrb	r2, [r3, #30]
 801145a:	4b27      	ldr	r3, [pc, #156]	; (80114f8 <tcp_fasttmr+0xbc>)
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d03f      	beq.n	80114e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011462:	4b25      	ldr	r3, [pc, #148]	; (80114f8 <tcp_fasttmr+0xbc>)
 8011464:	781a      	ldrb	r2, [r3, #0]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	8b5b      	ldrh	r3, [r3, #26]
 801146e:	f003 0301 	and.w	r3, r3, #1
 8011472:	2b00      	cmp	r3, #0
 8011474:	d010      	beq.n	8011498 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	8b5b      	ldrh	r3, [r3, #26]
 801147a:	f043 0302 	orr.w	r3, r3, #2
 801147e:	b29a      	uxth	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f003 facf 	bl	8014a28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	8b5b      	ldrh	r3, [r3, #26]
 801148e:	f023 0303 	bic.w	r3, r3, #3
 8011492:	b29a      	uxth	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	8b5b      	ldrh	r3, [r3, #26]
 801149c:	f003 0308 	and.w	r3, r3, #8
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d009      	beq.n	80114b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	8b5b      	ldrh	r3, [r3, #26]
 80114a8:	f023 0308 	bic.w	r3, r3, #8
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff fa78 	bl	80109a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d00a      	beq.n	80114dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80114c6:	4b0e      	ldr	r3, [pc, #56]	; (8011500 <tcp_fasttmr+0xc4>)
 80114c8:	2200      	movs	r2, #0
 80114ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f000 f819 	bl	8011504 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80114d2:	4b0b      	ldr	r3, [pc, #44]	; (8011500 <tcp_fasttmr+0xc4>)
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d000      	beq.n	80114dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80114da:	e7b8      	b.n	801144e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	607b      	str	r3, [r7, #4]
 80114e0:	e002      	b.n	80114e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1b3      	bne.n	8011456 <tcp_fasttmr+0x1a>
    }
  }
}
 80114ee:	bf00      	nop
 80114f0:	bf00      	nop
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	2000daae 	.word	0x2000daae
 80114fc:	2000daa4 	.word	0x2000daa4
 8011500:	2000daac 	.word	0x2000daac

08011504 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011504:	b590      	push	{r4, r7, lr}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d109      	bne.n	8011526 <tcp_process_refused_data+0x22>
 8011512:	4b37      	ldr	r3, [pc, #220]	; (80115f0 <tcp_process_refused_data+0xec>)
 8011514:	f240 6209 	movw	r2, #1545	; 0x609
 8011518:	4936      	ldr	r1, [pc, #216]	; (80115f4 <tcp_process_refused_data+0xf0>)
 801151a:	4837      	ldr	r0, [pc, #220]	; (80115f8 <tcp_process_refused_data+0xf4>)
 801151c:	f007 fe54 	bl	80191c8 <iprintf>
 8011520:	f06f 030f 	mvn.w	r3, #15
 8011524:	e060      	b.n	80115e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801152a:	7b5b      	ldrb	r3, [r3, #13]
 801152c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011532:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00b      	beq.n	801155c <tcp_process_refused_data+0x58>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6918      	ldr	r0, [r3, #16]
 801154e:	2300      	movs	r3, #0
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	6879      	ldr	r1, [r7, #4]
 8011554:	47a0      	blx	r4
 8011556:	4603      	mov	r3, r0
 8011558:	73fb      	strb	r3, [r7, #15]
 801155a:	e007      	b.n	801156c <tcp_process_refused_data+0x68>
 801155c:	2300      	movs	r3, #0
 801155e:	68ba      	ldr	r2, [r7, #8]
 8011560:	6879      	ldr	r1, [r7, #4]
 8011562:	2000      	movs	r0, #0
 8011564:	f000 f8a4 	bl	80116b0 <tcp_recv_null>
 8011568:	4603      	mov	r3, r0
 801156a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d12a      	bne.n	80115ca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011574:	7bbb      	ldrb	r3, [r7, #14]
 8011576:	f003 0320 	and.w	r3, r3, #32
 801157a:	2b00      	cmp	r3, #0
 801157c:	d033      	beq.n	80115e6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011582:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011586:	d005      	beq.n	8011594 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801158c:	3301      	adds	r3, #1
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00b      	beq.n	80115b6 <tcp_process_refused_data+0xb2>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6918      	ldr	r0, [r3, #16]
 80115a8:	2300      	movs	r3, #0
 80115aa:	2200      	movs	r2, #0
 80115ac:	6879      	ldr	r1, [r7, #4]
 80115ae:	47a0      	blx	r4
 80115b0:	4603      	mov	r3, r0
 80115b2:	73fb      	strb	r3, [r7, #15]
 80115b4:	e001      	b.n	80115ba <tcp_process_refused_data+0xb6>
 80115b6:	2300      	movs	r3, #0
 80115b8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80115ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115be:	f113 0f0d 	cmn.w	r3, #13
 80115c2:	d110      	bne.n	80115e6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80115c4:	f06f 030c 	mvn.w	r3, #12
 80115c8:	e00e      	b.n	80115e8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80115ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115ce:	f113 0f0d 	cmn.w	r3, #13
 80115d2:	d102      	bne.n	80115da <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80115d4:	f06f 030c 	mvn.w	r3, #12
 80115d8:	e006      	b.n	80115e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	68ba      	ldr	r2, [r7, #8]
 80115de:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80115e0:	f06f 0304 	mvn.w	r3, #4
 80115e4:	e000      	b.n	80115e8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3714      	adds	r7, #20
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd90      	pop	{r4, r7, pc}
 80115f0:	0801b314 	.word	0x0801b314
 80115f4:	0801b824 	.word	0x0801b824
 80115f8:	0801b358 	.word	0x0801b358

080115fc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011604:	e007      	b.n	8011616 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 f80a 	bl	8011626 <tcp_seg_free>
    seg = next;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1f4      	bne.n	8011606 <tcp_segs_free+0xa>
  }
}
 801161c:	bf00      	nop
 801161e:	bf00      	nop
 8011620:	3710      	adds	r7, #16
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}

08011626 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011626:	b580      	push	{r7, lr}
 8011628:	b082      	sub	sp, #8
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00c      	beq.n	801164e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d004      	beq.n	8011646 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	4618      	mov	r0, r3
 8011642:	f7fe fccf 	bl	800ffe4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011646:	6879      	ldr	r1, [r7, #4]
 8011648:	2003      	movs	r0, #3
 801164a:	f7fd fe27 	bl	800f29c <memp_free>
  }
}
 801164e:	bf00      	nop
 8011650:	3708      	adds	r7, #8
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
	...

08011658 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <tcp_seg_copy+0x1c>
 8011666:	4b0f      	ldr	r3, [pc, #60]	; (80116a4 <tcp_seg_copy+0x4c>)
 8011668:	f240 6282 	movw	r2, #1666	; 0x682
 801166c:	490e      	ldr	r1, [pc, #56]	; (80116a8 <tcp_seg_copy+0x50>)
 801166e:	480f      	ldr	r0, [pc, #60]	; (80116ac <tcp_seg_copy+0x54>)
 8011670:	f007 fdaa 	bl	80191c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011674:	2003      	movs	r0, #3
 8011676:	f7fd fd9b 	bl	800f1b0 <memp_malloc>
 801167a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <tcp_seg_copy+0x2e>
    return NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	e00a      	b.n	801169c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011686:	2210      	movs	r2, #16
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f007 fcd7 	bl	801903e <memcpy>
  pbuf_ref(cseg->p);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	4618      	mov	r0, r3
 8011696:	f7fe fd4b 	bl	8010130 <pbuf_ref>
  return cseg;
 801169a:	68fb      	ldr	r3, [r7, #12]
}
 801169c:	4618      	mov	r0, r3
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	0801b314 	.word	0x0801b314
 80116a8:	0801b868 	.word	0x0801b868
 80116ac:	0801b358 	.word	0x0801b358

080116b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	607a      	str	r2, [r7, #4]
 80116bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d109      	bne.n	80116d8 <tcp_recv_null+0x28>
 80116c4:	4b12      	ldr	r3, [pc, #72]	; (8011710 <tcp_recv_null+0x60>)
 80116c6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80116ca:	4912      	ldr	r1, [pc, #72]	; (8011714 <tcp_recv_null+0x64>)
 80116cc:	4812      	ldr	r0, [pc, #72]	; (8011718 <tcp_recv_null+0x68>)
 80116ce:	f007 fd7b 	bl	80191c8 <iprintf>
 80116d2:	f06f 030f 	mvn.w	r3, #15
 80116d6:	e016      	b.n	8011706 <tcp_recv_null+0x56>

  if (p != NULL) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d009      	beq.n	80116f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	891b      	ldrh	r3, [r3, #8]
 80116e2:	4619      	mov	r1, r3
 80116e4:	68b8      	ldr	r0, [r7, #8]
 80116e6:	f7ff fb19 	bl	8010d1c <tcp_recved>
    pbuf_free(p);
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7fe fc7a 	bl	800ffe4 <pbuf_free>
 80116f0:	e008      	b.n	8011704 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80116f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d104      	bne.n	8011704 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80116fa:	68b8      	ldr	r0, [r7, #8]
 80116fc:	f7ff f9be 	bl	8010a7c <tcp_close>
 8011700:	4603      	mov	r3, r0
 8011702:	e000      	b.n	8011706 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011704:	2300      	movs	r3, #0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	0801b314 	.word	0x0801b314
 8011714:	0801b884 	.word	0x0801b884
 8011718:	0801b358 	.word	0x0801b358

0801171c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af00      	add	r7, sp, #0
 8011722:	4603      	mov	r3, r0
 8011724:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801172a:	2b00      	cmp	r3, #0
 801172c:	db01      	blt.n	8011732 <tcp_kill_prio+0x16>
 801172e:	79fb      	ldrb	r3, [r7, #7]
 8011730:	e000      	b.n	8011734 <tcp_kill_prio+0x18>
 8011732:	237f      	movs	r3, #127	; 0x7f
 8011734:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011736:	7afb      	ldrb	r3, [r7, #11]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d034      	beq.n	80117a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801173c:	7afb      	ldrb	r3, [r7, #11]
 801173e:	3b01      	subs	r3, #1
 8011740:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011746:	2300      	movs	r3, #0
 8011748:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801174a:	4b19      	ldr	r3, [pc, #100]	; (80117b0 <tcp_kill_prio+0x94>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	617b      	str	r3, [r7, #20]
 8011750:	e01f      	b.n	8011792 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	7d5b      	ldrb	r3, [r3, #21]
 8011756:	7afa      	ldrb	r2, [r7, #11]
 8011758:	429a      	cmp	r2, r3
 801175a:	d80c      	bhi.n	8011776 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011760:	7afa      	ldrb	r2, [r7, #11]
 8011762:	429a      	cmp	r2, r3
 8011764:	d112      	bne.n	801178c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011766:	4b13      	ldr	r3, [pc, #76]	; (80117b4 <tcp_kill_prio+0x98>)
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	6a1b      	ldr	r3, [r3, #32]
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	429a      	cmp	r2, r3
 8011774:	d80a      	bhi.n	801178c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011776:	4b0f      	ldr	r3, [pc, #60]	; (80117b4 <tcp_kill_prio+0x98>)
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	6a1b      	ldr	r3, [r3, #32]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	7d5b      	ldrb	r3, [r3, #21]
 801178a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	617b      	str	r3, [r7, #20]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1dc      	bne.n	8011752 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d004      	beq.n	80117a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801179e:	6938      	ldr	r0, [r7, #16]
 80117a0:	f7ff fa56 	bl	8010c50 <tcp_abort>
 80117a4:	e000      	b.n	80117a8 <tcp_kill_prio+0x8c>
    return;
 80117a6:	bf00      	nop
  }
}
 80117a8:	3718      	adds	r7, #24
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	2000daa4 	.word	0x2000daa4
 80117b4:	2000da98 	.word	0x2000da98

080117b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b086      	sub	sp, #24
 80117bc:	af00      	add	r7, sp, #0
 80117be:	4603      	mov	r3, r0
 80117c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80117c2:	79fb      	ldrb	r3, [r7, #7]
 80117c4:	2b08      	cmp	r3, #8
 80117c6:	d009      	beq.n	80117dc <tcp_kill_state+0x24>
 80117c8:	79fb      	ldrb	r3, [r7, #7]
 80117ca:	2b09      	cmp	r3, #9
 80117cc:	d006      	beq.n	80117dc <tcp_kill_state+0x24>
 80117ce:	4b1a      	ldr	r3, [pc, #104]	; (8011838 <tcp_kill_state+0x80>)
 80117d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80117d4:	4919      	ldr	r1, [pc, #100]	; (801183c <tcp_kill_state+0x84>)
 80117d6:	481a      	ldr	r0, [pc, #104]	; (8011840 <tcp_kill_state+0x88>)
 80117d8:	f007 fcf6 	bl	80191c8 <iprintf>

  inactivity = 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80117e0:	2300      	movs	r3, #0
 80117e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80117e4:	4b17      	ldr	r3, [pc, #92]	; (8011844 <tcp_kill_state+0x8c>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	617b      	str	r3, [r7, #20]
 80117ea:	e017      	b.n	801181c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	7d1b      	ldrb	r3, [r3, #20]
 80117f0:	79fa      	ldrb	r2, [r7, #7]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d10f      	bne.n	8011816 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80117f6:	4b14      	ldr	r3, [pc, #80]	; (8011848 <tcp_kill_state+0x90>)
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	6a1b      	ldr	r3, [r3, #32]
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	429a      	cmp	r2, r3
 8011804:	d807      	bhi.n	8011816 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011806:	4b10      	ldr	r3, [pc, #64]	; (8011848 <tcp_kill_state+0x90>)
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	6a1b      	ldr	r3, [r3, #32]
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	68db      	ldr	r3, [r3, #12]
 801181a:	617b      	str	r3, [r7, #20]
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d1e4      	bne.n	80117ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d003      	beq.n	8011830 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011828:	2100      	movs	r1, #0
 801182a:	6938      	ldr	r0, [r7, #16]
 801182c:	f7ff f952 	bl	8010ad4 <tcp_abandon>
  }
}
 8011830:	bf00      	nop
 8011832:	3718      	adds	r7, #24
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	0801b314 	.word	0x0801b314
 801183c:	0801b8a0 	.word	0x0801b8a0
 8011840:	0801b358 	.word	0x0801b358
 8011844:	2000daa4 	.word	0x2000daa4
 8011848:	2000da98 	.word	0x2000da98

0801184c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011856:	2300      	movs	r3, #0
 8011858:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801185a:	4b12      	ldr	r3, [pc, #72]	; (80118a4 <tcp_kill_timewait+0x58>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	60fb      	str	r3, [r7, #12]
 8011860:	e012      	b.n	8011888 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011862:	4b11      	ldr	r3, [pc, #68]	; (80118a8 <tcp_kill_timewait+0x5c>)
 8011864:	681a      	ldr	r2, [r3, #0]
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	6a1b      	ldr	r3, [r3, #32]
 801186a:	1ad3      	subs	r3, r2, r3
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	429a      	cmp	r2, r3
 8011870:	d807      	bhi.n	8011882 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011872:	4b0d      	ldr	r3, [pc, #52]	; (80118a8 <tcp_kill_timewait+0x5c>)
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6a1b      	ldr	r3, [r3, #32]
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	60fb      	str	r3, [r7, #12]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1e9      	bne.n	8011862 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d002      	beq.n	801189a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011894:	68b8      	ldr	r0, [r7, #8]
 8011896:	f7ff f9db 	bl	8010c50 <tcp_abort>
  }
}
 801189a:	bf00      	nop
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	2000daa8 	.word	0x2000daa8
 80118a8:	2000da98 	.word	0x2000da98

080118ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80118b2:	4b10      	ldr	r3, [pc, #64]	; (80118f4 <tcp_handle_closepend+0x48>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80118b8:	e014      	b.n	80118e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	8b5b      	ldrh	r3, [r3, #26]
 80118c4:	f003 0308 	and.w	r3, r3, #8
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d009      	beq.n	80118e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	8b5b      	ldrh	r3, [r3, #26]
 80118d0:	f023 0308 	bic.w	r3, r3, #8
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7ff f864 	bl	80109a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1e7      	bne.n	80118ba <tcp_handle_closepend+0xe>
  }
}
 80118ea:	bf00      	nop
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	2000daa4 	.word	0x2000daa4

080118f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011902:	2001      	movs	r0, #1
 8011904:	f7fd fc54 	bl	800f1b0 <memp_malloc>
 8011908:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d126      	bne.n	801195e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011910:	f7ff ffcc 	bl	80118ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011914:	f7ff ff9a 	bl	801184c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011918:	2001      	movs	r0, #1
 801191a:	f7fd fc49 	bl	800f1b0 <memp_malloc>
 801191e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d11b      	bne.n	801195e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011926:	2009      	movs	r0, #9
 8011928:	f7ff ff46 	bl	80117b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801192c:	2001      	movs	r0, #1
 801192e:	f7fd fc3f 	bl	800f1b0 <memp_malloc>
 8011932:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d111      	bne.n	801195e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801193a:	2008      	movs	r0, #8
 801193c:	f7ff ff3c 	bl	80117b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011940:	2001      	movs	r0, #1
 8011942:	f7fd fc35 	bl	800f1b0 <memp_malloc>
 8011946:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	4618      	mov	r0, r3
 8011952:	f7ff fee3 	bl	801171c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011956:	2001      	movs	r0, #1
 8011958:	f7fd fc2a 	bl	800f1b0 <memp_malloc>
 801195c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d03f      	beq.n	80119e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011964:	229c      	movs	r2, #156	; 0x9c
 8011966:	2100      	movs	r1, #0
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	f007 fb90 	bl	801908e <memset>
    pcb->prio = prio;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	79fa      	ldrb	r2, [r7, #7]
 8011972:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801197a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	22ff      	movs	r2, #255	; 0xff
 8011992:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f44f 7206 	mov.w	r2, #536	; 0x218
 801199a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2206      	movs	r2, #6
 80119a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2206      	movs	r2, #6
 80119a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2201      	movs	r2, #1
 80119b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80119ba:	4b0d      	ldr	r3, [pc, #52]	; (80119f0 <tcp_alloc+0xf8>)
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80119c2:	4b0c      	ldr	r3, [pc, #48]	; (80119f4 <tcp_alloc+0xfc>)
 80119c4:	781a      	ldrb	r2, [r3, #0]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80119d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	4a08      	ldr	r2, [pc, #32]	; (80119f8 <tcp_alloc+0x100>)
 80119d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	4a07      	ldr	r2, [pc, #28]	; (80119fc <tcp_alloc+0x104>)
 80119e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80119e4:	68fb      	ldr	r3, [r7, #12]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3710      	adds	r7, #16
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	2000da98 	.word	0x2000da98
 80119f4:	2000daae 	.word	0x2000daae
 80119f8:	080116b1 	.word	0x080116b1
 80119fc:	006ddd00 	.word	0x006ddd00

08011a00 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d107      	bne.n	8011a1e <tcp_pcb_purge+0x1e>
 8011a0e:	4b21      	ldr	r3, [pc, #132]	; (8011a94 <tcp_pcb_purge+0x94>)
 8011a10:	f640 0251 	movw	r2, #2129	; 0x851
 8011a14:	4920      	ldr	r1, [pc, #128]	; (8011a98 <tcp_pcb_purge+0x98>)
 8011a16:	4821      	ldr	r0, [pc, #132]	; (8011a9c <tcp_pcb_purge+0x9c>)
 8011a18:	f007 fbd6 	bl	80191c8 <iprintf>
 8011a1c:	e037      	b.n	8011a8e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	7d1b      	ldrb	r3, [r3, #20]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d033      	beq.n	8011a8e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011a2a:	2b0a      	cmp	r3, #10
 8011a2c:	d02f      	beq.n	8011a8e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d02b      	beq.n	8011a8e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d007      	beq.n	8011a4e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fe face 	bl	800ffe4 <pbuf_free>
      pcb->refused_data = NULL;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d002      	beq.n	8011a5c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f000 f986 	bl	8011d68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff fdc7 	bl	80115fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7ff fdc2 	bl	80115fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	0801b314 	.word	0x0801b314
 8011a98:	0801b960 	.word	0x0801b960
 8011a9c:	0801b358 	.word	0x0801b358

08011aa0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d106      	bne.n	8011abe <tcp_pcb_remove+0x1e>
 8011ab0:	4b3e      	ldr	r3, [pc, #248]	; (8011bac <tcp_pcb_remove+0x10c>)
 8011ab2:	f640 0283 	movw	r2, #2179	; 0x883
 8011ab6:	493e      	ldr	r1, [pc, #248]	; (8011bb0 <tcp_pcb_remove+0x110>)
 8011ab8:	483e      	ldr	r0, [pc, #248]	; (8011bb4 <tcp_pcb_remove+0x114>)
 8011aba:	f007 fb85 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d106      	bne.n	8011ad2 <tcp_pcb_remove+0x32>
 8011ac4:	4b39      	ldr	r3, [pc, #228]	; (8011bac <tcp_pcb_remove+0x10c>)
 8011ac6:	f640 0284 	movw	r2, #2180	; 0x884
 8011aca:	493b      	ldr	r1, [pc, #236]	; (8011bb8 <tcp_pcb_remove+0x118>)
 8011acc:	4839      	ldr	r0, [pc, #228]	; (8011bb4 <tcp_pcb_remove+0x114>)
 8011ace:	f007 fb7b 	bl	80191c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d105      	bne.n	8011ae8 <tcp_pcb_remove+0x48>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	68da      	ldr	r2, [r3, #12]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	601a      	str	r2, [r3, #0]
 8011ae6:	e013      	b.n	8011b10 <tcp_pcb_remove+0x70>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	60fb      	str	r3, [r7, #12]
 8011aee:	e00c      	b.n	8011b0a <tcp_pcb_remove+0x6a>
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	68db      	ldr	r3, [r3, #12]
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d104      	bne.n	8011b04 <tcp_pcb_remove+0x64>
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	68da      	ldr	r2, [r3, #12]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	60da      	str	r2, [r3, #12]
 8011b02:	e005      	b.n	8011b10 <tcp_pcb_remove+0x70>
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d1ef      	bne.n	8011af0 <tcp_pcb_remove+0x50>
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	2200      	movs	r2, #0
 8011b14:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011b16:	6838      	ldr	r0, [r7, #0]
 8011b18:	f7ff ff72 	bl	8011a00 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	7d1b      	ldrb	r3, [r3, #20]
 8011b20:	2b0a      	cmp	r3, #10
 8011b22:	d013      	beq.n	8011b4c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d00f      	beq.n	8011b4c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	8b5b      	ldrh	r3, [r3, #26]
 8011b30:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d009      	beq.n	8011b4c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	8b5b      	ldrh	r3, [r3, #26]
 8011b3c:	f043 0302 	orr.w	r3, r3, #2
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011b46:	6838      	ldr	r0, [r7, #0]
 8011b48:	f002 ff6e 	bl	8014a28 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	7d1b      	ldrb	r3, [r3, #20]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d020      	beq.n	8011b96 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d006      	beq.n	8011b6a <tcp_pcb_remove+0xca>
 8011b5c:	4b13      	ldr	r3, [pc, #76]	; (8011bac <tcp_pcb_remove+0x10c>)
 8011b5e:	f640 0293 	movw	r2, #2195	; 0x893
 8011b62:	4916      	ldr	r1, [pc, #88]	; (8011bbc <tcp_pcb_remove+0x11c>)
 8011b64:	4813      	ldr	r0, [pc, #76]	; (8011bb4 <tcp_pcb_remove+0x114>)
 8011b66:	f007 fb2f 	bl	80191c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d006      	beq.n	8011b80 <tcp_pcb_remove+0xe0>
 8011b72:	4b0e      	ldr	r3, [pc, #56]	; (8011bac <tcp_pcb_remove+0x10c>)
 8011b74:	f640 0294 	movw	r2, #2196	; 0x894
 8011b78:	4911      	ldr	r1, [pc, #68]	; (8011bc0 <tcp_pcb_remove+0x120>)
 8011b7a:	480e      	ldr	r0, [pc, #56]	; (8011bb4 <tcp_pcb_remove+0x114>)
 8011b7c:	f007 fb24 	bl	80191c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d006      	beq.n	8011b96 <tcp_pcb_remove+0xf6>
 8011b88:	4b08      	ldr	r3, [pc, #32]	; (8011bac <tcp_pcb_remove+0x10c>)
 8011b8a:	f640 0296 	movw	r2, #2198	; 0x896
 8011b8e:	490d      	ldr	r1, [pc, #52]	; (8011bc4 <tcp_pcb_remove+0x124>)
 8011b90:	4808      	ldr	r0, [pc, #32]	; (8011bb4 <tcp_pcb_remove+0x114>)
 8011b92:	f007 fb19 	bl	80191c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011ba2:	bf00      	nop
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	0801b314 	.word	0x0801b314
 8011bb0:	0801b97c 	.word	0x0801b97c
 8011bb4:	0801b358 	.word	0x0801b358
 8011bb8:	0801b998 	.word	0x0801b998
 8011bbc:	0801b9b8 	.word	0x0801b9b8
 8011bc0:	0801b9d0 	.word	0x0801b9d0
 8011bc4:	0801b9ec 	.word	0x0801b9ec

08011bc8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <tcp_next_iss+0x1c>
 8011bd6:	4b0a      	ldr	r3, [pc, #40]	; (8011c00 <tcp_next_iss+0x38>)
 8011bd8:	f640 02af 	movw	r2, #2223	; 0x8af
 8011bdc:	4909      	ldr	r1, [pc, #36]	; (8011c04 <tcp_next_iss+0x3c>)
 8011bde:	480a      	ldr	r0, [pc, #40]	; (8011c08 <tcp_next_iss+0x40>)
 8011be0:	f007 faf2 	bl	80191c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011be4:	4b09      	ldr	r3, [pc, #36]	; (8011c0c <tcp_next_iss+0x44>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <tcp_next_iss+0x48>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4413      	add	r3, r2
 8011bee:	4a07      	ldr	r2, [pc, #28]	; (8011c0c <tcp_next_iss+0x44>)
 8011bf0:	6013      	str	r3, [r2, #0]
  return iss;
 8011bf2:	4b06      	ldr	r3, [pc, #24]	; (8011c0c <tcp_next_iss+0x44>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3708      	adds	r7, #8
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	0801b314 	.word	0x0801b314
 8011c04:	0801ba04 	.word	0x0801ba04
 8011c08:	0801b358 	.word	0x0801b358
 8011c0c:	20000164 	.word	0x20000164
 8011c10:	2000da98 	.word	0x2000da98

08011c14 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	607a      	str	r2, [r7, #4]
 8011c20:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d106      	bne.n	8011c36 <tcp_eff_send_mss_netif+0x22>
 8011c28:	4b14      	ldr	r3, [pc, #80]	; (8011c7c <tcp_eff_send_mss_netif+0x68>)
 8011c2a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011c2e:	4914      	ldr	r1, [pc, #80]	; (8011c80 <tcp_eff_send_mss_netif+0x6c>)
 8011c30:	4814      	ldr	r0, [pc, #80]	; (8011c84 <tcp_eff_send_mss_netif+0x70>)
 8011c32:	f007 fac9 	bl	80191c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d101      	bne.n	8011c40 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011c3c:	89fb      	ldrh	r3, [r7, #14]
 8011c3e:	e019      	b.n	8011c74 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c44:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011c46:	8afb      	ldrh	r3, [r7, #22]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d012      	beq.n	8011c72 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011c4c:	2328      	movs	r3, #40	; 0x28
 8011c4e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011c50:	8afa      	ldrh	r2, [r7, #22]
 8011c52:	8abb      	ldrh	r3, [r7, #20]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d904      	bls.n	8011c62 <tcp_eff_send_mss_netif+0x4e>
 8011c58:	8afa      	ldrh	r2, [r7, #22]
 8011c5a:	8abb      	ldrh	r3, [r7, #20]
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	e000      	b.n	8011c64 <tcp_eff_send_mss_netif+0x50>
 8011c62:	2300      	movs	r3, #0
 8011c64:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011c66:	8a7a      	ldrh	r2, [r7, #18]
 8011c68:	89fb      	ldrh	r3, [r7, #14]
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	bf28      	it	cs
 8011c6e:	4613      	movcs	r3, r2
 8011c70:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011c72:	89fb      	ldrh	r3, [r7, #14]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3718      	adds	r7, #24
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	0801b314 	.word	0x0801b314
 8011c80:	0801ba20 	.word	0x0801ba20
 8011c84:	0801b358 	.word	0x0801b358

08011c88 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d119      	bne.n	8011cd0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011c9c:	4b10      	ldr	r3, [pc, #64]	; (8011ce0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011c9e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011ca2:	4910      	ldr	r1, [pc, #64]	; (8011ce4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011ca4:	4810      	ldr	r0, [pc, #64]	; (8011ce8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011ca6:	f007 fa8f 	bl	80191c8 <iprintf>

  while (pcb != NULL) {
 8011caa:	e011      	b.n	8011cd0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d108      	bne.n	8011cca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f7fe ffc6 	bl	8010c50 <tcp_abort>
      pcb = next;
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	60fb      	str	r3, [r7, #12]
 8011cc8:	e002      	b.n	8011cd0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1ea      	bne.n	8011cac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011cd6:	bf00      	nop
 8011cd8:	bf00      	nop
 8011cda:	3710      	adds	r7, #16
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	0801b314 	.word	0x0801b314
 8011ce4:	0801ba48 	.word	0x0801ba48
 8011ce8:	0801b358 	.word	0x0801b358

08011cec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d02a      	beq.n	8011d52 <tcp_netif_ip_addr_changed+0x66>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d026      	beq.n	8011d52 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011d04:	4b15      	ldr	r3, [pc, #84]	; (8011d5c <tcp_netif_ip_addr_changed+0x70>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4619      	mov	r1, r3
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7ff ffbc 	bl	8011c88 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011d10:	4b13      	ldr	r3, [pc, #76]	; (8011d60 <tcp_netif_ip_addr_changed+0x74>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4619      	mov	r1, r3
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff ffb6 	bl	8011c88 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d017      	beq.n	8011d52 <tcp_netif_ip_addr_changed+0x66>
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d013      	beq.n	8011d52 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d2a:	4b0e      	ldr	r3, [pc, #56]	; (8011d64 <tcp_netif_ip_addr_changed+0x78>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	60fb      	str	r3, [r7, #12]
 8011d30:	e00c      	b.n	8011d4c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d103      	bne.n	8011d46 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	60fb      	str	r3, [r7, #12]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d1ef      	bne.n	8011d32 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011d52:	bf00      	nop
 8011d54:	3710      	adds	r7, #16
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	2000daa4 	.word	0x2000daa4
 8011d60:	2000da9c 	.word	0x2000da9c
 8011d64:	2000daa0 	.word	0x2000daa0

08011d68 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d007      	beq.n	8011d88 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff fc3d 	bl	80115fc <tcp_segs_free>
    pcb->ooseq = NULL;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2200      	movs	r2, #0
 8011d86:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011d88:	bf00      	nop
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011d90:	b590      	push	{r4, r7, lr}
 8011d92:	b08d      	sub	sp, #52	; 0x34
 8011d94:	af04      	add	r7, sp, #16
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d105      	bne.n	8011dac <tcp_input+0x1c>
 8011da0:	4b9b      	ldr	r3, [pc, #620]	; (8012010 <tcp_input+0x280>)
 8011da2:	2283      	movs	r2, #131	; 0x83
 8011da4:	499b      	ldr	r1, [pc, #620]	; (8012014 <tcp_input+0x284>)
 8011da6:	489c      	ldr	r0, [pc, #624]	; (8012018 <tcp_input+0x288>)
 8011da8:	f007 fa0e 	bl	80191c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	4a9a      	ldr	r2, [pc, #616]	; (801201c <tcp_input+0x28c>)
 8011db2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	895b      	ldrh	r3, [r3, #10]
 8011db8:	2b13      	cmp	r3, #19
 8011dba:	f240 83d1 	bls.w	8012560 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011dbe:	4b98      	ldr	r3, [pc, #608]	; (8012020 <tcp_input+0x290>)
 8011dc0:	695b      	ldr	r3, [r3, #20]
 8011dc2:	4a97      	ldr	r2, [pc, #604]	; (8012020 <tcp_input+0x290>)
 8011dc4:	6812      	ldr	r2, [r2, #0]
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f005 ffbf 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	f040 83c7 	bne.w	8012564 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011dd6:	4b92      	ldr	r3, [pc, #584]	; (8012020 <tcp_input+0x290>)
 8011dd8:	695b      	ldr	r3, [r3, #20]
 8011dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011dde:	2be0      	cmp	r3, #224	; 0xe0
 8011de0:	f000 83c0 	beq.w	8012564 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011de4:	4b8d      	ldr	r3, [pc, #564]	; (801201c <tcp_input+0x28c>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	899b      	ldrh	r3, [r3, #12]
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fc fd07 	bl	800e800 <lwip_htons>
 8011df2:	4603      	mov	r3, r0
 8011df4:	0b1b      	lsrs	r3, r3, #12
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011dfe:	7cbb      	ldrb	r3, [r7, #18]
 8011e00:	2b13      	cmp	r3, #19
 8011e02:	f240 83b1 	bls.w	8012568 <tcp_input+0x7d8>
 8011e06:	7cbb      	ldrb	r3, [r7, #18]
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	891b      	ldrh	r3, [r3, #8]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	f200 83aa 	bhi.w	8012568 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011e14:	7cbb      	ldrb	r3, [r7, #18]
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	3b14      	subs	r3, #20
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	4b81      	ldr	r3, [pc, #516]	; (8012024 <tcp_input+0x294>)
 8011e1e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011e20:	4b81      	ldr	r3, [pc, #516]	; (8012028 <tcp_input+0x298>)
 8011e22:	2200      	movs	r2, #0
 8011e24:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	895a      	ldrh	r2, [r3, #10]
 8011e2a:	7cbb      	ldrb	r3, [r7, #18]
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d309      	bcc.n	8011e46 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011e32:	4b7c      	ldr	r3, [pc, #496]	; (8012024 <tcp_input+0x294>)
 8011e34:	881a      	ldrh	r2, [r3, #0]
 8011e36:	4b7d      	ldr	r3, [pc, #500]	; (801202c <tcp_input+0x29c>)
 8011e38:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011e3a:	7cbb      	ldrb	r3, [r7, #18]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7fe f84a 	bl	800fed8 <pbuf_remove_header>
 8011e44:	e04e      	b.n	8011ee4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d105      	bne.n	8011e5a <tcp_input+0xca>
 8011e4e:	4b70      	ldr	r3, [pc, #448]	; (8012010 <tcp_input+0x280>)
 8011e50:	22c2      	movs	r2, #194	; 0xc2
 8011e52:	4977      	ldr	r1, [pc, #476]	; (8012030 <tcp_input+0x2a0>)
 8011e54:	4870      	ldr	r0, [pc, #448]	; (8012018 <tcp_input+0x288>)
 8011e56:	f007 f9b7 	bl	80191c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011e5a:	2114      	movs	r1, #20
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7fe f83b 	bl	800fed8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	895a      	ldrh	r2, [r3, #10]
 8011e66:	4b71      	ldr	r3, [pc, #452]	; (801202c <tcp_input+0x29c>)
 8011e68:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011e6a:	4b6e      	ldr	r3, [pc, #440]	; (8012024 <tcp_input+0x294>)
 8011e6c:	881a      	ldrh	r2, [r3, #0]
 8011e6e:	4b6f      	ldr	r3, [pc, #444]	; (801202c <tcp_input+0x29c>)
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011e76:	4b6d      	ldr	r3, [pc, #436]	; (801202c <tcp_input+0x29c>)
 8011e78:	881b      	ldrh	r3, [r3, #0]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fe f82b 	bl	800fed8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	895b      	ldrh	r3, [r3, #10]
 8011e88:	8a3a      	ldrh	r2, [r7, #16]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	f200 836e 	bhi.w	801256c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	4a64      	ldr	r2, [pc, #400]	; (8012028 <tcp_input+0x298>)
 8011e98:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	8a3a      	ldrh	r2, [r7, #16]
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fe f818 	bl	800fed8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	891a      	ldrh	r2, [r3, #8]
 8011eac:	8a3b      	ldrh	r3, [r7, #16]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	895b      	ldrh	r3, [r3, #10]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <tcp_input+0x13a>
 8011ebe:	4b54      	ldr	r3, [pc, #336]	; (8012010 <tcp_input+0x280>)
 8011ec0:	22df      	movs	r2, #223	; 0xdf
 8011ec2:	495c      	ldr	r1, [pc, #368]	; (8012034 <tcp_input+0x2a4>)
 8011ec4:	4854      	ldr	r0, [pc, #336]	; (8012018 <tcp_input+0x288>)
 8011ec6:	f007 f97f 	bl	80191c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	891a      	ldrh	r2, [r3, #8]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	891b      	ldrh	r3, [r3, #8]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d005      	beq.n	8011ee4 <tcp_input+0x154>
 8011ed8:	4b4d      	ldr	r3, [pc, #308]	; (8012010 <tcp_input+0x280>)
 8011eda:	22e0      	movs	r2, #224	; 0xe0
 8011edc:	4956      	ldr	r1, [pc, #344]	; (8012038 <tcp_input+0x2a8>)
 8011ede:	484e      	ldr	r0, [pc, #312]	; (8012018 <tcp_input+0x288>)
 8011ee0:	f007 f972 	bl	80191c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011ee4:	4b4d      	ldr	r3, [pc, #308]	; (801201c <tcp_input+0x28c>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	4a4b      	ldr	r2, [pc, #300]	; (801201c <tcp_input+0x28c>)
 8011eee:	6814      	ldr	r4, [r2, #0]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fc fc85 	bl	800e800 <lwip_htons>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011efa:	4b48      	ldr	r3, [pc, #288]	; (801201c <tcp_input+0x28c>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	885b      	ldrh	r3, [r3, #2]
 8011f00:	b29b      	uxth	r3, r3
 8011f02:	4a46      	ldr	r2, [pc, #280]	; (801201c <tcp_input+0x28c>)
 8011f04:	6814      	ldr	r4, [r2, #0]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fc fc7a 	bl	800e800 <lwip_htons>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011f10:	4b42      	ldr	r3, [pc, #264]	; (801201c <tcp_input+0x28c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	4a41      	ldr	r2, [pc, #260]	; (801201c <tcp_input+0x28c>)
 8011f18:	6814      	ldr	r4, [r2, #0]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fc fc85 	bl	800e82a <lwip_htonl>
 8011f20:	4603      	mov	r3, r0
 8011f22:	6063      	str	r3, [r4, #4]
 8011f24:	6863      	ldr	r3, [r4, #4]
 8011f26:	4a45      	ldr	r2, [pc, #276]	; (801203c <tcp_input+0x2ac>)
 8011f28:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011f2a:	4b3c      	ldr	r3, [pc, #240]	; (801201c <tcp_input+0x28c>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	689b      	ldr	r3, [r3, #8]
 8011f30:	4a3a      	ldr	r2, [pc, #232]	; (801201c <tcp_input+0x28c>)
 8011f32:	6814      	ldr	r4, [r2, #0]
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fc fc78 	bl	800e82a <lwip_htonl>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	60a3      	str	r3, [r4, #8]
 8011f3e:	68a3      	ldr	r3, [r4, #8]
 8011f40:	4a3f      	ldr	r2, [pc, #252]	; (8012040 <tcp_input+0x2b0>)
 8011f42:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011f44:	4b35      	ldr	r3, [pc, #212]	; (801201c <tcp_input+0x28c>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	89db      	ldrh	r3, [r3, #14]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	4a33      	ldr	r2, [pc, #204]	; (801201c <tcp_input+0x28c>)
 8011f4e:	6814      	ldr	r4, [r2, #0]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fc fc55 	bl	800e800 <lwip_htons>
 8011f56:	4603      	mov	r3, r0
 8011f58:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011f5a:	4b30      	ldr	r3, [pc, #192]	; (801201c <tcp_input+0x28c>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	899b      	ldrh	r3, [r3, #12]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fc fc4c 	bl	800e800 <lwip_htons>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	4b34      	ldr	r3, [pc, #208]	; (8012044 <tcp_input+0x2b4>)
 8011f74:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	891a      	ldrh	r2, [r3, #8]
 8011f7a:	4b33      	ldr	r3, [pc, #204]	; (8012048 <tcp_input+0x2b8>)
 8011f7c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011f7e:	4b31      	ldr	r3, [pc, #196]	; (8012044 <tcp_input+0x2b4>)
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	f003 0303 	and.w	r3, r3, #3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00c      	beq.n	8011fa4 <tcp_input+0x214>
    tcplen++;
 8011f8a:	4b2f      	ldr	r3, [pc, #188]	; (8012048 <tcp_input+0x2b8>)
 8011f8c:	881b      	ldrh	r3, [r3, #0]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	4b2d      	ldr	r3, [pc, #180]	; (8012048 <tcp_input+0x2b8>)
 8011f94:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	891a      	ldrh	r2, [r3, #8]
 8011f9a:	4b2b      	ldr	r3, [pc, #172]	; (8012048 <tcp_input+0x2b8>)
 8011f9c:	881b      	ldrh	r3, [r3, #0]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	f200 82e6 	bhi.w	8012570 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fa8:	4b28      	ldr	r3, [pc, #160]	; (801204c <tcp_input+0x2bc>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	61fb      	str	r3, [r7, #28]
 8011fae:	e09d      	b.n	80120ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	7d1b      	ldrb	r3, [r3, #20]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d105      	bne.n	8011fc4 <tcp_input+0x234>
 8011fb8:	4b15      	ldr	r3, [pc, #84]	; (8012010 <tcp_input+0x280>)
 8011fba:	22fb      	movs	r2, #251	; 0xfb
 8011fbc:	4924      	ldr	r1, [pc, #144]	; (8012050 <tcp_input+0x2c0>)
 8011fbe:	4816      	ldr	r0, [pc, #88]	; (8012018 <tcp_input+0x288>)
 8011fc0:	f007 f902 	bl	80191c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	7d1b      	ldrb	r3, [r3, #20]
 8011fc8:	2b0a      	cmp	r3, #10
 8011fca:	d105      	bne.n	8011fd8 <tcp_input+0x248>
 8011fcc:	4b10      	ldr	r3, [pc, #64]	; (8012010 <tcp_input+0x280>)
 8011fce:	22fc      	movs	r2, #252	; 0xfc
 8011fd0:	4920      	ldr	r1, [pc, #128]	; (8012054 <tcp_input+0x2c4>)
 8011fd2:	4811      	ldr	r0, [pc, #68]	; (8012018 <tcp_input+0x288>)
 8011fd4:	f007 f8f8 	bl	80191c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	7d1b      	ldrb	r3, [r3, #20]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d105      	bne.n	8011fec <tcp_input+0x25c>
 8011fe0:	4b0b      	ldr	r3, [pc, #44]	; (8012010 <tcp_input+0x280>)
 8011fe2:	22fd      	movs	r2, #253	; 0xfd
 8011fe4:	491c      	ldr	r1, [pc, #112]	; (8012058 <tcp_input+0x2c8>)
 8011fe6:	480c      	ldr	r0, [pc, #48]	; (8012018 <tcp_input+0x288>)
 8011fe8:	f007 f8ee 	bl	80191c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	7a1b      	ldrb	r3, [r3, #8]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d033      	beq.n	801205c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	7a1a      	ldrb	r2, [r3, #8]
 8011ff8:	4b09      	ldr	r3, [pc, #36]	; (8012020 <tcp_input+0x290>)
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012000:	3301      	adds	r3, #1
 8012002:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012004:	429a      	cmp	r2, r3
 8012006:	d029      	beq.n	801205c <tcp_input+0x2cc>
      prev = pcb;
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	61bb      	str	r3, [r7, #24]
      continue;
 801200c:	e06b      	b.n	80120e6 <tcp_input+0x356>
 801200e:	bf00      	nop
 8012010:	0801ba7c 	.word	0x0801ba7c
 8012014:	0801bab0 	.word	0x0801bab0
 8012018:	0801bac8 	.word	0x0801bac8
 801201c:	2000dac0 	.word	0x2000dac0
 8012020:	2000a344 	.word	0x2000a344
 8012024:	2000dac4 	.word	0x2000dac4
 8012028:	2000dac8 	.word	0x2000dac8
 801202c:	2000dac6 	.word	0x2000dac6
 8012030:	0801baf0 	.word	0x0801baf0
 8012034:	0801bb00 	.word	0x0801bb00
 8012038:	0801bb0c 	.word	0x0801bb0c
 801203c:	2000dad0 	.word	0x2000dad0
 8012040:	2000dad4 	.word	0x2000dad4
 8012044:	2000dadc 	.word	0x2000dadc
 8012048:	2000dada 	.word	0x2000dada
 801204c:	2000daa4 	.word	0x2000daa4
 8012050:	0801bb2c 	.word	0x0801bb2c
 8012054:	0801bb54 	.word	0x0801bb54
 8012058:	0801bb80 	.word	0x0801bb80
    }

    if (pcb->remote_port == tcphdr->src &&
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	8b1a      	ldrh	r2, [r3, #24]
 8012060:	4b72      	ldr	r3, [pc, #456]	; (801222c <tcp_input+0x49c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	881b      	ldrh	r3, [r3, #0]
 8012066:	b29b      	uxth	r3, r3
 8012068:	429a      	cmp	r2, r3
 801206a:	d13a      	bne.n	80120e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	8ada      	ldrh	r2, [r3, #22]
 8012070:	4b6e      	ldr	r3, [pc, #440]	; (801222c <tcp_input+0x49c>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	885b      	ldrh	r3, [r3, #2]
 8012076:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012078:	429a      	cmp	r2, r3
 801207a:	d132      	bne.n	80120e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	685a      	ldr	r2, [r3, #4]
 8012080:	4b6b      	ldr	r3, [pc, #428]	; (8012230 <tcp_input+0x4a0>)
 8012082:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012084:	429a      	cmp	r2, r3
 8012086:	d12c      	bne.n	80120e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	4b68      	ldr	r3, [pc, #416]	; (8012230 <tcp_input+0x4a0>)
 801208e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012090:	429a      	cmp	r2, r3
 8012092:	d126      	bne.n	80120e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	69fa      	ldr	r2, [r7, #28]
 801209a:	429a      	cmp	r2, r3
 801209c:	d106      	bne.n	80120ac <tcp_input+0x31c>
 801209e:	4b65      	ldr	r3, [pc, #404]	; (8012234 <tcp_input+0x4a4>)
 80120a0:	f240 120d 	movw	r2, #269	; 0x10d
 80120a4:	4964      	ldr	r1, [pc, #400]	; (8012238 <tcp_input+0x4a8>)
 80120a6:	4865      	ldr	r0, [pc, #404]	; (801223c <tcp_input+0x4ac>)
 80120a8:	f007 f88e 	bl	80191c8 <iprintf>
      if (prev != NULL) {
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d00a      	beq.n	80120c8 <tcp_input+0x338>
        prev->next = pcb->next;
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	68da      	ldr	r2, [r3, #12]
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80120ba:	4b61      	ldr	r3, [pc, #388]	; (8012240 <tcp_input+0x4b0>)
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80120c2:	4a5f      	ldr	r2, [pc, #380]	; (8012240 <tcp_input+0x4b0>)
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	69fa      	ldr	r2, [r7, #28]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d111      	bne.n	80120f6 <tcp_input+0x366>
 80120d2:	4b58      	ldr	r3, [pc, #352]	; (8012234 <tcp_input+0x4a4>)
 80120d4:	f240 1215 	movw	r2, #277	; 0x115
 80120d8:	495a      	ldr	r1, [pc, #360]	; (8012244 <tcp_input+0x4b4>)
 80120da:	4858      	ldr	r0, [pc, #352]	; (801223c <tcp_input+0x4ac>)
 80120dc:	f007 f874 	bl	80191c8 <iprintf>
      break;
 80120e0:	e009      	b.n	80120f6 <tcp_input+0x366>
    }
    prev = pcb;
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	61fb      	str	r3, [r7, #28]
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f47f af5e 	bne.w	8011fb0 <tcp_input+0x220>
 80120f4:	e000      	b.n	80120f8 <tcp_input+0x368>
      break;
 80120f6:	bf00      	nop
  }

  if (pcb == NULL) {
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f040 80aa 	bne.w	8012254 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012100:	4b51      	ldr	r3, [pc, #324]	; (8012248 <tcp_input+0x4b8>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	61fb      	str	r3, [r7, #28]
 8012106:	e03f      	b.n	8012188 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	7d1b      	ldrb	r3, [r3, #20]
 801210c:	2b0a      	cmp	r3, #10
 801210e:	d006      	beq.n	801211e <tcp_input+0x38e>
 8012110:	4b48      	ldr	r3, [pc, #288]	; (8012234 <tcp_input+0x4a4>)
 8012112:	f240 121f 	movw	r2, #287	; 0x11f
 8012116:	494d      	ldr	r1, [pc, #308]	; (801224c <tcp_input+0x4bc>)
 8012118:	4848      	ldr	r0, [pc, #288]	; (801223c <tcp_input+0x4ac>)
 801211a:	f007 f855 	bl	80191c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	7a1b      	ldrb	r3, [r3, #8]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d009      	beq.n	801213a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	7a1a      	ldrb	r2, [r3, #8]
 801212a:	4b41      	ldr	r3, [pc, #260]	; (8012230 <tcp_input+0x4a0>)
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012132:	3301      	adds	r3, #1
 8012134:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012136:	429a      	cmp	r2, r3
 8012138:	d122      	bne.n	8012180 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	8b1a      	ldrh	r2, [r3, #24]
 801213e:	4b3b      	ldr	r3, [pc, #236]	; (801222c <tcp_input+0x49c>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	b29b      	uxth	r3, r3
 8012146:	429a      	cmp	r2, r3
 8012148:	d11b      	bne.n	8012182 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	8ada      	ldrh	r2, [r3, #22]
 801214e:	4b37      	ldr	r3, [pc, #220]	; (801222c <tcp_input+0x49c>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	885b      	ldrh	r3, [r3, #2]
 8012154:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012156:	429a      	cmp	r2, r3
 8012158:	d113      	bne.n	8012182 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	685a      	ldr	r2, [r3, #4]
 801215e:	4b34      	ldr	r3, [pc, #208]	; (8012230 <tcp_input+0x4a0>)
 8012160:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012162:	429a      	cmp	r2, r3
 8012164:	d10d      	bne.n	8012182 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	4b31      	ldr	r3, [pc, #196]	; (8012230 <tcp_input+0x4a0>)
 801216c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801216e:	429a      	cmp	r2, r3
 8012170:	d107      	bne.n	8012182 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012172:	69f8      	ldr	r0, [r7, #28]
 8012174:	f000 fb56 	bl	8012824 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f7fd ff33 	bl	800ffe4 <pbuf_free>
        return;
 801217e:	e1fd      	b.n	801257c <tcp_input+0x7ec>
        continue;
 8012180:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	61fb      	str	r3, [r7, #28]
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1bc      	bne.n	8012108 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801218e:	2300      	movs	r3, #0
 8012190:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012192:	4b2f      	ldr	r3, [pc, #188]	; (8012250 <tcp_input+0x4c0>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	617b      	str	r3, [r7, #20]
 8012198:	e02a      	b.n	80121f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	7a1b      	ldrb	r3, [r3, #8]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00c      	beq.n	80121bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	7a1a      	ldrb	r2, [r3, #8]
 80121a6:	4b22      	ldr	r3, [pc, #136]	; (8012230 <tcp_input+0x4a0>)
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121ae:	3301      	adds	r3, #1
 80121b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d002      	beq.n	80121bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	61bb      	str	r3, [r7, #24]
        continue;
 80121ba:	e016      	b.n	80121ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	8ada      	ldrh	r2, [r3, #22]
 80121c0:	4b1a      	ldr	r3, [pc, #104]	; (801222c <tcp_input+0x49c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	885b      	ldrh	r3, [r3, #2]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d10c      	bne.n	80121e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	4b17      	ldr	r3, [pc, #92]	; (8012230 <tcp_input+0x4a0>)
 80121d2:	695b      	ldr	r3, [r3, #20]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d00f      	beq.n	80121f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d00d      	beq.n	80121fa <tcp_input+0x46a>
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d009      	beq.n	80121fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	617b      	str	r3, [r7, #20]
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d1d1      	bne.n	801219a <tcp_input+0x40a>
 80121f6:	e000      	b.n	80121fa <tcp_input+0x46a>
            break;
 80121f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d029      	beq.n	8012254 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012200:	69bb      	ldr	r3, [r7, #24]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00a      	beq.n	801221c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	68da      	ldr	r2, [r3, #12]
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801220e:	4b10      	ldr	r3, [pc, #64]	; (8012250 <tcp_input+0x4c0>)
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012216:	4a0e      	ldr	r2, [pc, #56]	; (8012250 <tcp_input+0x4c0>)
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801221c:	6978      	ldr	r0, [r7, #20]
 801221e:	f000 fa03 	bl	8012628 <tcp_listen_input>
      }
      pbuf_free(p);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7fd fede 	bl	800ffe4 <pbuf_free>
      return;
 8012228:	e1a8      	b.n	801257c <tcp_input+0x7ec>
 801222a:	bf00      	nop
 801222c:	2000dac0 	.word	0x2000dac0
 8012230:	2000a344 	.word	0x2000a344
 8012234:	0801ba7c 	.word	0x0801ba7c
 8012238:	0801bba8 	.word	0x0801bba8
 801223c:	0801bac8 	.word	0x0801bac8
 8012240:	2000daa4 	.word	0x2000daa4
 8012244:	0801bbd4 	.word	0x0801bbd4
 8012248:	2000daa8 	.word	0x2000daa8
 801224c:	0801bc00 	.word	0x0801bc00
 8012250:	2000daa0 	.word	0x2000daa0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	2b00      	cmp	r3, #0
 8012258:	f000 8158 	beq.w	801250c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801225c:	4b95      	ldr	r3, [pc, #596]	; (80124b4 <tcp_input+0x724>)
 801225e:	2200      	movs	r2, #0
 8012260:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	891a      	ldrh	r2, [r3, #8]
 8012266:	4b93      	ldr	r3, [pc, #588]	; (80124b4 <tcp_input+0x724>)
 8012268:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801226a:	4a92      	ldr	r2, [pc, #584]	; (80124b4 <tcp_input+0x724>)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012270:	4b91      	ldr	r3, [pc, #580]	; (80124b8 <tcp_input+0x728>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4a8f      	ldr	r2, [pc, #572]	; (80124b4 <tcp_input+0x724>)
 8012276:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012278:	4b90      	ldr	r3, [pc, #576]	; (80124bc <tcp_input+0x72c>)
 801227a:	2200      	movs	r2, #0
 801227c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801227e:	4b90      	ldr	r3, [pc, #576]	; (80124c0 <tcp_input+0x730>)
 8012280:	2200      	movs	r2, #0
 8012282:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012284:	4b8f      	ldr	r3, [pc, #572]	; (80124c4 <tcp_input+0x734>)
 8012286:	2200      	movs	r2, #0
 8012288:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801228a:	4b8f      	ldr	r3, [pc, #572]	; (80124c8 <tcp_input+0x738>)
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	f003 0308 	and.w	r3, r3, #8
 8012292:	2b00      	cmp	r3, #0
 8012294:	d006      	beq.n	80122a4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	7b5b      	ldrb	r3, [r3, #13]
 801229a:	f043 0301 	orr.w	r3, r3, #1
 801229e:	b2da      	uxtb	r2, r3
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80122a4:	69fb      	ldr	r3, [r7, #28]
 80122a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d017      	beq.n	80122dc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80122ac:	69f8      	ldr	r0, [r7, #28]
 80122ae:	f7ff f929 	bl	8011504 <tcp_process_refused_data>
 80122b2:	4603      	mov	r3, r0
 80122b4:	f113 0f0d 	cmn.w	r3, #13
 80122b8:	d007      	beq.n	80122ca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d00c      	beq.n	80122dc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80122c2:	4b82      	ldr	r3, [pc, #520]	; (80124cc <tcp_input+0x73c>)
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d008      	beq.n	80122dc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f040 80e3 	bne.w	801249a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80122d4:	69f8      	ldr	r0, [r7, #28]
 80122d6:	f003 f9ad 	bl	8015634 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80122da:	e0de      	b.n	801249a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80122dc:	4a7c      	ldr	r2, [pc, #496]	; (80124d0 <tcp_input+0x740>)
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80122e2:	69f8      	ldr	r0, [r7, #28]
 80122e4:	f000 fb18 	bl	8012918 <tcp_process>
 80122e8:	4603      	mov	r3, r0
 80122ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80122ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122f0:	f113 0f0d 	cmn.w	r3, #13
 80122f4:	f000 80d3 	beq.w	801249e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80122f8:	4b71      	ldr	r3, [pc, #452]	; (80124c0 <tcp_input+0x730>)
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	f003 0308 	and.w	r3, r3, #8
 8012300:	2b00      	cmp	r3, #0
 8012302:	d015      	beq.n	8012330 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801230a:	2b00      	cmp	r3, #0
 801230c:	d008      	beq.n	8012320 <tcp_input+0x590>
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012314:	69fa      	ldr	r2, [r7, #28]
 8012316:	6912      	ldr	r2, [r2, #16]
 8012318:	f06f 010d 	mvn.w	r1, #13
 801231c:	4610      	mov	r0, r2
 801231e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012320:	69f9      	ldr	r1, [r7, #28]
 8012322:	486c      	ldr	r0, [pc, #432]	; (80124d4 <tcp_input+0x744>)
 8012324:	f7ff fbbc 	bl	8011aa0 <tcp_pcb_remove>
        tcp_free(pcb);
 8012328:	69f8      	ldr	r0, [r7, #28]
 801232a:	f7fe f9a9 	bl	8010680 <tcp_free>
 801232e:	e0da      	b.n	80124e6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012334:	4b63      	ldr	r3, [pc, #396]	; (80124c4 <tcp_input+0x734>)
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d01d      	beq.n	8012378 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801233c:	4b61      	ldr	r3, [pc, #388]	; (80124c4 <tcp_input+0x734>)
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00a      	beq.n	8012362 <tcp_input+0x5d2>
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012352:	69fa      	ldr	r2, [r7, #28]
 8012354:	6910      	ldr	r0, [r2, #16]
 8012356:	89fa      	ldrh	r2, [r7, #14]
 8012358:	69f9      	ldr	r1, [r7, #28]
 801235a:	4798      	blx	r3
 801235c:	4603      	mov	r3, r0
 801235e:	74fb      	strb	r3, [r7, #19]
 8012360:	e001      	b.n	8012366 <tcp_input+0x5d6>
 8012362:	2300      	movs	r3, #0
 8012364:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012366:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801236a:	f113 0f0d 	cmn.w	r3, #13
 801236e:	f000 8098 	beq.w	80124a2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012372:	4b54      	ldr	r3, [pc, #336]	; (80124c4 <tcp_input+0x734>)
 8012374:	2200      	movs	r2, #0
 8012376:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012378:	69f8      	ldr	r0, [r7, #28]
 801237a:	f000 f915 	bl	80125a8 <tcp_input_delayed_close>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	f040 8090 	bne.w	80124a6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012386:	4b4d      	ldr	r3, [pc, #308]	; (80124bc <tcp_input+0x72c>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d041      	beq.n	8012412 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012392:	2b00      	cmp	r3, #0
 8012394:	d006      	beq.n	80123a4 <tcp_input+0x614>
 8012396:	4b50      	ldr	r3, [pc, #320]	; (80124d8 <tcp_input+0x748>)
 8012398:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801239c:	494f      	ldr	r1, [pc, #316]	; (80124dc <tcp_input+0x74c>)
 801239e:	4850      	ldr	r0, [pc, #320]	; (80124e0 <tcp_input+0x750>)
 80123a0:	f006 ff12 	bl	80191c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	8b5b      	ldrh	r3, [r3, #26]
 80123a8:	f003 0310 	and.w	r3, r3, #16
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d008      	beq.n	80123c2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80123b0:	4b42      	ldr	r3, [pc, #264]	; (80124bc <tcp_input+0x72c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fd fe15 	bl	800ffe4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80123ba:	69f8      	ldr	r0, [r7, #28]
 80123bc:	f7fe fc48 	bl	8010c50 <tcp_abort>
            goto aborted;
 80123c0:	e091      	b.n	80124e6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00c      	beq.n	80123e6 <tcp_input+0x656>
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	6918      	ldr	r0, [r3, #16]
 80123d6:	4b39      	ldr	r3, [pc, #228]	; (80124bc <tcp_input+0x72c>)
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	2300      	movs	r3, #0
 80123dc:	69f9      	ldr	r1, [r7, #28]
 80123de:	47a0      	blx	r4
 80123e0:	4603      	mov	r3, r0
 80123e2:	74fb      	strb	r3, [r7, #19]
 80123e4:	e008      	b.n	80123f8 <tcp_input+0x668>
 80123e6:	4b35      	ldr	r3, [pc, #212]	; (80124bc <tcp_input+0x72c>)
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	2300      	movs	r3, #0
 80123ec:	69f9      	ldr	r1, [r7, #28]
 80123ee:	2000      	movs	r0, #0
 80123f0:	f7ff f95e 	bl	80116b0 <tcp_recv_null>
 80123f4:	4603      	mov	r3, r0
 80123f6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80123f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123fc:	f113 0f0d 	cmn.w	r3, #13
 8012400:	d053      	beq.n	80124aa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d003      	beq.n	8012412 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801240a:	4b2c      	ldr	r3, [pc, #176]	; (80124bc <tcp_input+0x72c>)
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012412:	4b2b      	ldr	r3, [pc, #172]	; (80124c0 <tcp_input+0x730>)
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	f003 0320 	and.w	r3, r3, #32
 801241a:	2b00      	cmp	r3, #0
 801241c:	d030      	beq.n	8012480 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012422:	2b00      	cmp	r3, #0
 8012424:	d009      	beq.n	801243a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012426:	69fb      	ldr	r3, [r7, #28]
 8012428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801242a:	7b5a      	ldrb	r2, [r3, #13]
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012430:	f042 0220 	orr.w	r2, r2, #32
 8012434:	b2d2      	uxtb	r2, r2
 8012436:	735a      	strb	r2, [r3, #13]
 8012438:	e022      	b.n	8012480 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801243e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012442:	d005      	beq.n	8012450 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012448:	3301      	adds	r3, #1
 801244a:	b29a      	uxth	r2, r3
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00b      	beq.n	8012472 <tcp_input+0x6e2>
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	6918      	ldr	r0, [r3, #16]
 8012464:	2300      	movs	r3, #0
 8012466:	2200      	movs	r2, #0
 8012468:	69f9      	ldr	r1, [r7, #28]
 801246a:	47a0      	blx	r4
 801246c:	4603      	mov	r3, r0
 801246e:	74fb      	strb	r3, [r7, #19]
 8012470:	e001      	b.n	8012476 <tcp_input+0x6e6>
 8012472:	2300      	movs	r3, #0
 8012474:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012476:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801247a:	f113 0f0d 	cmn.w	r3, #13
 801247e:	d016      	beq.n	80124ae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012480:	4b13      	ldr	r3, [pc, #76]	; (80124d0 <tcp_input+0x740>)
 8012482:	2200      	movs	r2, #0
 8012484:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012486:	69f8      	ldr	r0, [r7, #28]
 8012488:	f000 f88e 	bl	80125a8 <tcp_input_delayed_close>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d128      	bne.n	80124e4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012492:	69f8      	ldr	r0, [r7, #28]
 8012494:	f002 fac8 	bl	8014a28 <tcp_output>
 8012498:	e025      	b.n	80124e6 <tcp_input+0x756>
        goto aborted;
 801249a:	bf00      	nop
 801249c:	e023      	b.n	80124e6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801249e:	bf00      	nop
 80124a0:	e021      	b.n	80124e6 <tcp_input+0x756>
              goto aborted;
 80124a2:	bf00      	nop
 80124a4:	e01f      	b.n	80124e6 <tcp_input+0x756>
          goto aborted;
 80124a6:	bf00      	nop
 80124a8:	e01d      	b.n	80124e6 <tcp_input+0x756>
            goto aborted;
 80124aa:	bf00      	nop
 80124ac:	e01b      	b.n	80124e6 <tcp_input+0x756>
              goto aborted;
 80124ae:	bf00      	nop
 80124b0:	e019      	b.n	80124e6 <tcp_input+0x756>
 80124b2:	bf00      	nop
 80124b4:	2000dab0 	.word	0x2000dab0
 80124b8:	2000dac0 	.word	0x2000dac0
 80124bc:	2000dae0 	.word	0x2000dae0
 80124c0:	2000dadd 	.word	0x2000dadd
 80124c4:	2000dad8 	.word	0x2000dad8
 80124c8:	2000dadc 	.word	0x2000dadc
 80124cc:	2000dada 	.word	0x2000dada
 80124d0:	2000dae4 	.word	0x2000dae4
 80124d4:	2000daa4 	.word	0x2000daa4
 80124d8:	0801ba7c 	.word	0x0801ba7c
 80124dc:	0801bc30 	.word	0x0801bc30
 80124e0:	0801bac8 	.word	0x0801bac8
          goto aborted;
 80124e4:	bf00      	nop
    tcp_input_pcb = NULL;
 80124e6:	4b27      	ldr	r3, [pc, #156]	; (8012584 <tcp_input+0x7f4>)
 80124e8:	2200      	movs	r2, #0
 80124ea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80124ec:	4b26      	ldr	r3, [pc, #152]	; (8012588 <tcp_input+0x7f8>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80124f2:	4b26      	ldr	r3, [pc, #152]	; (801258c <tcp_input+0x7fc>)
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d03f      	beq.n	801257a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80124fa:	4b24      	ldr	r3, [pc, #144]	; (801258c <tcp_input+0x7fc>)
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fd fd70 	bl	800ffe4 <pbuf_free>
      inseg.p = NULL;
 8012504:	4b21      	ldr	r3, [pc, #132]	; (801258c <tcp_input+0x7fc>)
 8012506:	2200      	movs	r2, #0
 8012508:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801250a:	e036      	b.n	801257a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801250c:	4b20      	ldr	r3, [pc, #128]	; (8012590 <tcp_input+0x800>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	899b      	ldrh	r3, [r3, #12]
 8012512:	b29b      	uxth	r3, r3
 8012514:	4618      	mov	r0, r3
 8012516:	f7fc f973 	bl	800e800 <lwip_htons>
 801251a:	4603      	mov	r3, r0
 801251c:	b2db      	uxtb	r3, r3
 801251e:	f003 0304 	and.w	r3, r3, #4
 8012522:	2b00      	cmp	r3, #0
 8012524:	d118      	bne.n	8012558 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012526:	4b1b      	ldr	r3, [pc, #108]	; (8012594 <tcp_input+0x804>)
 8012528:	6819      	ldr	r1, [r3, #0]
 801252a:	4b1b      	ldr	r3, [pc, #108]	; (8012598 <tcp_input+0x808>)
 801252c:	881b      	ldrh	r3, [r3, #0]
 801252e:	461a      	mov	r2, r3
 8012530:	4b1a      	ldr	r3, [pc, #104]	; (801259c <tcp_input+0x80c>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012536:	4b16      	ldr	r3, [pc, #88]	; (8012590 <tcp_input+0x800>)
 8012538:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801253a:	885b      	ldrh	r3, [r3, #2]
 801253c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801253e:	4a14      	ldr	r2, [pc, #80]	; (8012590 <tcp_input+0x800>)
 8012540:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012542:	8812      	ldrh	r2, [r2, #0]
 8012544:	b292      	uxth	r2, r2
 8012546:	9202      	str	r2, [sp, #8]
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	4b15      	ldr	r3, [pc, #84]	; (80125a0 <tcp_input+0x810>)
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	4b15      	ldr	r3, [pc, #84]	; (80125a4 <tcp_input+0x814>)
 8012550:	4602      	mov	r2, r0
 8012552:	2000      	movs	r0, #0
 8012554:	f003 f81c 	bl	8015590 <tcp_rst>
    pbuf_free(p);
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7fd fd43 	bl	800ffe4 <pbuf_free>
  return;
 801255e:	e00c      	b.n	801257a <tcp_input+0x7ea>
    goto dropped;
 8012560:	bf00      	nop
 8012562:	e006      	b.n	8012572 <tcp_input+0x7e2>
    goto dropped;
 8012564:	bf00      	nop
 8012566:	e004      	b.n	8012572 <tcp_input+0x7e2>
    goto dropped;
 8012568:	bf00      	nop
 801256a:	e002      	b.n	8012572 <tcp_input+0x7e2>
      goto dropped;
 801256c:	bf00      	nop
 801256e:	e000      	b.n	8012572 <tcp_input+0x7e2>
      goto dropped;
 8012570:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7fd fd36 	bl	800ffe4 <pbuf_free>
 8012578:	e000      	b.n	801257c <tcp_input+0x7ec>
  return;
 801257a:	bf00      	nop
}
 801257c:	3724      	adds	r7, #36	; 0x24
 801257e:	46bd      	mov	sp, r7
 8012580:	bd90      	pop	{r4, r7, pc}
 8012582:	bf00      	nop
 8012584:	2000dae4 	.word	0x2000dae4
 8012588:	2000dae0 	.word	0x2000dae0
 801258c:	2000dab0 	.word	0x2000dab0
 8012590:	2000dac0 	.word	0x2000dac0
 8012594:	2000dad4 	.word	0x2000dad4
 8012598:	2000dada 	.word	0x2000dada
 801259c:	2000dad0 	.word	0x2000dad0
 80125a0:	2000a354 	.word	0x2000a354
 80125a4:	2000a358 	.word	0x2000a358

080125a8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d106      	bne.n	80125c4 <tcp_input_delayed_close+0x1c>
 80125b6:	4b17      	ldr	r3, [pc, #92]	; (8012614 <tcp_input_delayed_close+0x6c>)
 80125b8:	f240 225a 	movw	r2, #602	; 0x25a
 80125bc:	4916      	ldr	r1, [pc, #88]	; (8012618 <tcp_input_delayed_close+0x70>)
 80125be:	4817      	ldr	r0, [pc, #92]	; (801261c <tcp_input_delayed_close+0x74>)
 80125c0:	f006 fe02 	bl	80191c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80125c4:	4b16      	ldr	r3, [pc, #88]	; (8012620 <tcp_input_delayed_close+0x78>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f003 0310 	and.w	r3, r3, #16
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d01c      	beq.n	801260a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	8b5b      	ldrh	r3, [r3, #26]
 80125d4:	f003 0310 	and.w	r3, r3, #16
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10d      	bne.n	80125f8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d008      	beq.n	80125f8 <tcp_input_delayed_close+0x50>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	6912      	ldr	r2, [r2, #16]
 80125f0:	f06f 010e 	mvn.w	r1, #14
 80125f4:	4610      	mov	r0, r2
 80125f6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80125f8:	6879      	ldr	r1, [r7, #4]
 80125fa:	480a      	ldr	r0, [pc, #40]	; (8012624 <tcp_input_delayed_close+0x7c>)
 80125fc:	f7ff fa50 	bl	8011aa0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7fe f83d 	bl	8010680 <tcp_free>
    return 1;
 8012606:	2301      	movs	r3, #1
 8012608:	e000      	b.n	801260c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801260a:	2300      	movs	r3, #0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3708      	adds	r7, #8
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	0801ba7c 	.word	0x0801ba7c
 8012618:	0801bc4c 	.word	0x0801bc4c
 801261c:	0801bac8 	.word	0x0801bac8
 8012620:	2000dadd 	.word	0x2000dadd
 8012624:	2000daa4 	.word	0x2000daa4

08012628 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012628:	b590      	push	{r4, r7, lr}
 801262a:	b08b      	sub	sp, #44	; 0x2c
 801262c:	af04      	add	r7, sp, #16
 801262e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012630:	4b6f      	ldr	r3, [pc, #444]	; (80127f0 <tcp_listen_input+0x1c8>)
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	f003 0304 	and.w	r3, r3, #4
 8012638:	2b00      	cmp	r3, #0
 801263a:	f040 80d2 	bne.w	80127e2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d106      	bne.n	8012652 <tcp_listen_input+0x2a>
 8012644:	4b6b      	ldr	r3, [pc, #428]	; (80127f4 <tcp_listen_input+0x1cc>)
 8012646:	f240 2281 	movw	r2, #641	; 0x281
 801264a:	496b      	ldr	r1, [pc, #428]	; (80127f8 <tcp_listen_input+0x1d0>)
 801264c:	486b      	ldr	r0, [pc, #428]	; (80127fc <tcp_listen_input+0x1d4>)
 801264e:	f006 fdbb 	bl	80191c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012652:	4b67      	ldr	r3, [pc, #412]	; (80127f0 <tcp_listen_input+0x1c8>)
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	f003 0310 	and.w	r3, r3, #16
 801265a:	2b00      	cmp	r3, #0
 801265c:	d019      	beq.n	8012692 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801265e:	4b68      	ldr	r3, [pc, #416]	; (8012800 <tcp_listen_input+0x1d8>)
 8012660:	6819      	ldr	r1, [r3, #0]
 8012662:	4b68      	ldr	r3, [pc, #416]	; (8012804 <tcp_listen_input+0x1dc>)
 8012664:	881b      	ldrh	r3, [r3, #0]
 8012666:	461a      	mov	r2, r3
 8012668:	4b67      	ldr	r3, [pc, #412]	; (8012808 <tcp_listen_input+0x1e0>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801266e:	4b67      	ldr	r3, [pc, #412]	; (801280c <tcp_listen_input+0x1e4>)
 8012670:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012672:	885b      	ldrh	r3, [r3, #2]
 8012674:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012676:	4a65      	ldr	r2, [pc, #404]	; (801280c <tcp_listen_input+0x1e4>)
 8012678:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801267a:	8812      	ldrh	r2, [r2, #0]
 801267c:	b292      	uxth	r2, r2
 801267e:	9202      	str	r2, [sp, #8]
 8012680:	9301      	str	r3, [sp, #4]
 8012682:	4b63      	ldr	r3, [pc, #396]	; (8012810 <tcp_listen_input+0x1e8>)
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	4b63      	ldr	r3, [pc, #396]	; (8012814 <tcp_listen_input+0x1ec>)
 8012688:	4602      	mov	r2, r0
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f002 ff80 	bl	8015590 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012690:	e0a9      	b.n	80127e6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012692:	4b57      	ldr	r3, [pc, #348]	; (80127f0 <tcp_listen_input+0x1c8>)
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	f003 0302 	and.w	r3, r3, #2
 801269a:	2b00      	cmp	r3, #0
 801269c:	f000 80a3 	beq.w	80127e6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	7d5b      	ldrb	r3, [r3, #21]
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7ff f927 	bl	80118f8 <tcp_alloc>
 80126aa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d111      	bne.n	80126d6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	699b      	ldr	r3, [r3, #24]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00a      	beq.n	80126d0 <tcp_listen_input+0xa8>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	6910      	ldr	r0, [r2, #16]
 80126c2:	f04f 32ff 	mov.w	r2, #4294967295
 80126c6:	2100      	movs	r1, #0
 80126c8:	4798      	blx	r3
 80126ca:	4603      	mov	r3, r0
 80126cc:	73bb      	strb	r3, [r7, #14]
      return;
 80126ce:	e08b      	b.n	80127e8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80126d0:	23f0      	movs	r3, #240	; 0xf0
 80126d2:	73bb      	strb	r3, [r7, #14]
      return;
 80126d4:	e088      	b.n	80127e8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80126d6:	4b50      	ldr	r3, [pc, #320]	; (8012818 <tcp_listen_input+0x1f0>)
 80126d8:	695a      	ldr	r2, [r3, #20]
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80126de:	4b4e      	ldr	r3, [pc, #312]	; (8012818 <tcp_listen_input+0x1f0>)
 80126e0:	691a      	ldr	r2, [r3, #16]
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	8ada      	ldrh	r2, [r3, #22]
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80126ee:	4b47      	ldr	r3, [pc, #284]	; (801280c <tcp_listen_input+0x1e4>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	2203      	movs	r2, #3
 80126fe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012700:	4b41      	ldr	r3, [pc, #260]	; (8012808 <tcp_listen_input+0x1e0>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012712:	6978      	ldr	r0, [r7, #20]
 8012714:	f7ff fa58 	bl	8011bc8 <tcp_next_iss>
 8012718:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	693a      	ldr	r2, [r7, #16]
 801271e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	693a      	ldr	r2, [r7, #16]
 8012724:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	693a      	ldr	r2, [r7, #16]
 801272a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	693a      	ldr	r2, [r7, #16]
 8012730:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012732:	4b35      	ldr	r3, [pc, #212]	; (8012808 <tcp_listen_input+0x1e0>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	1e5a      	subs	r2, r3, #1
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	691a      	ldr	r2, [r3, #16]
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	7a5b      	ldrb	r3, [r3, #9]
 801274e:	f003 030c 	and.w	r3, r3, #12
 8012752:	b2da      	uxtb	r2, r3
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	7a1a      	ldrb	r2, [r3, #8]
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012760:	4b2e      	ldr	r3, [pc, #184]	; (801281c <tcp_listen_input+0x1f4>)
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	60da      	str	r2, [r3, #12]
 8012768:	4a2c      	ldr	r2, [pc, #176]	; (801281c <tcp_listen_input+0x1f4>)
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	6013      	str	r3, [r2, #0]
 801276e:	f003 f8d1 	bl	8015914 <tcp_timer_needed>
 8012772:	4b2b      	ldr	r3, [pc, #172]	; (8012820 <tcp_listen_input+0x1f8>)
 8012774:	2201      	movs	r2, #1
 8012776:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012778:	6978      	ldr	r0, [r7, #20]
 801277a:	f001 fd8f 	bl	801429c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801277e:	4b23      	ldr	r3, [pc, #140]	; (801280c <tcp_listen_input+0x1e4>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	89db      	ldrh	r3, [r3, #14]
 8012784:	b29a      	uxth	r2, r3
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	3304      	adds	r3, #4
 80127a0:	4618      	mov	r0, r3
 80127a2:	f005 f83d 	bl	8017820 <ip4_route>
 80127a6:	4601      	mov	r1, r0
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	3304      	adds	r3, #4
 80127ac:	461a      	mov	r2, r3
 80127ae:	4620      	mov	r0, r4
 80127b0:	f7ff fa30 	bl	8011c14 <tcp_eff_send_mss_netif>
 80127b4:	4603      	mov	r3, r0
 80127b6:	461a      	mov	r2, r3
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80127bc:	2112      	movs	r1, #18
 80127be:	6978      	ldr	r0, [r7, #20]
 80127c0:	f002 f844 	bl	801484c <tcp_enqueue_flags>
 80127c4:	4603      	mov	r3, r0
 80127c6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80127c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d004      	beq.n	80127da <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80127d0:	2100      	movs	r1, #0
 80127d2:	6978      	ldr	r0, [r7, #20]
 80127d4:	f7fe f97e 	bl	8010ad4 <tcp_abandon>
      return;
 80127d8:	e006      	b.n	80127e8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80127da:	6978      	ldr	r0, [r7, #20]
 80127dc:	f002 f924 	bl	8014a28 <tcp_output>
  return;
 80127e0:	e001      	b.n	80127e6 <tcp_listen_input+0x1be>
    return;
 80127e2:	bf00      	nop
 80127e4:	e000      	b.n	80127e8 <tcp_listen_input+0x1c0>
  return;
 80127e6:	bf00      	nop
}
 80127e8:	371c      	adds	r7, #28
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd90      	pop	{r4, r7, pc}
 80127ee:	bf00      	nop
 80127f0:	2000dadc 	.word	0x2000dadc
 80127f4:	0801ba7c 	.word	0x0801ba7c
 80127f8:	0801bc74 	.word	0x0801bc74
 80127fc:	0801bac8 	.word	0x0801bac8
 8012800:	2000dad4 	.word	0x2000dad4
 8012804:	2000dada 	.word	0x2000dada
 8012808:	2000dad0 	.word	0x2000dad0
 801280c:	2000dac0 	.word	0x2000dac0
 8012810:	2000a354 	.word	0x2000a354
 8012814:	2000a358 	.word	0x2000a358
 8012818:	2000a344 	.word	0x2000a344
 801281c:	2000daa4 	.word	0x2000daa4
 8012820:	2000daac 	.word	0x2000daac

08012824 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b086      	sub	sp, #24
 8012828:	af04      	add	r7, sp, #16
 801282a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801282c:	4b2f      	ldr	r3, [pc, #188]	; (80128ec <tcp_timewait_input+0xc8>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	f003 0304 	and.w	r3, r3, #4
 8012834:	2b00      	cmp	r3, #0
 8012836:	d153      	bne.n	80128e0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d106      	bne.n	801284c <tcp_timewait_input+0x28>
 801283e:	4b2c      	ldr	r3, [pc, #176]	; (80128f0 <tcp_timewait_input+0xcc>)
 8012840:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012844:	492b      	ldr	r1, [pc, #172]	; (80128f4 <tcp_timewait_input+0xd0>)
 8012846:	482c      	ldr	r0, [pc, #176]	; (80128f8 <tcp_timewait_input+0xd4>)
 8012848:	f006 fcbe 	bl	80191c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801284c:	4b27      	ldr	r3, [pc, #156]	; (80128ec <tcp_timewait_input+0xc8>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	f003 0302 	and.w	r3, r3, #2
 8012854:	2b00      	cmp	r3, #0
 8012856:	d02a      	beq.n	80128ae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012858:	4b28      	ldr	r3, [pc, #160]	; (80128fc <tcp_timewait_input+0xd8>)
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012860:	1ad3      	subs	r3, r2, r3
 8012862:	2b00      	cmp	r3, #0
 8012864:	db2d      	blt.n	80128c2 <tcp_timewait_input+0x9e>
 8012866:	4b25      	ldr	r3, [pc, #148]	; (80128fc <tcp_timewait_input+0xd8>)
 8012868:	681a      	ldr	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286e:	6879      	ldr	r1, [r7, #4]
 8012870:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012872:	440b      	add	r3, r1
 8012874:	1ad3      	subs	r3, r2, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	dc23      	bgt.n	80128c2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801287a:	4b21      	ldr	r3, [pc, #132]	; (8012900 <tcp_timewait_input+0xdc>)
 801287c:	6819      	ldr	r1, [r3, #0]
 801287e:	4b21      	ldr	r3, [pc, #132]	; (8012904 <tcp_timewait_input+0xe0>)
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	461a      	mov	r2, r3
 8012884:	4b1d      	ldr	r3, [pc, #116]	; (80128fc <tcp_timewait_input+0xd8>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801288a:	4b1f      	ldr	r3, [pc, #124]	; (8012908 <tcp_timewait_input+0xe4>)
 801288c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801288e:	885b      	ldrh	r3, [r3, #2]
 8012890:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012892:	4a1d      	ldr	r2, [pc, #116]	; (8012908 <tcp_timewait_input+0xe4>)
 8012894:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012896:	8812      	ldrh	r2, [r2, #0]
 8012898:	b292      	uxth	r2, r2
 801289a:	9202      	str	r2, [sp, #8]
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	4b1b      	ldr	r3, [pc, #108]	; (801290c <tcp_timewait_input+0xe8>)
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	4b1b      	ldr	r3, [pc, #108]	; (8012910 <tcp_timewait_input+0xec>)
 80128a4:	4602      	mov	r2, r0
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f002 fe72 	bl	8015590 <tcp_rst>
      return;
 80128ac:	e01b      	b.n	80128e6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80128ae:	4b0f      	ldr	r3, [pc, #60]	; (80128ec <tcp_timewait_input+0xc8>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	f003 0301 	and.w	r3, r3, #1
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d003      	beq.n	80128c2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80128ba:	4b16      	ldr	r3, [pc, #88]	; (8012914 <tcp_timewait_input+0xf0>)
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80128c2:	4b10      	ldr	r3, [pc, #64]	; (8012904 <tcp_timewait_input+0xe0>)
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d00c      	beq.n	80128e4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	8b5b      	ldrh	r3, [r3, #26]
 80128ce:	f043 0302 	orr.w	r3, r3, #2
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f002 f8a5 	bl	8014a28 <tcp_output>
  }
  return;
 80128de:	e001      	b.n	80128e4 <tcp_timewait_input+0xc0>
    return;
 80128e0:	bf00      	nop
 80128e2:	e000      	b.n	80128e6 <tcp_timewait_input+0xc2>
  return;
 80128e4:	bf00      	nop
}
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	2000dadc 	.word	0x2000dadc
 80128f0:	0801ba7c 	.word	0x0801ba7c
 80128f4:	0801bc94 	.word	0x0801bc94
 80128f8:	0801bac8 	.word	0x0801bac8
 80128fc:	2000dad0 	.word	0x2000dad0
 8012900:	2000dad4 	.word	0x2000dad4
 8012904:	2000dada 	.word	0x2000dada
 8012908:	2000dac0 	.word	0x2000dac0
 801290c:	2000a354 	.word	0x2000a354
 8012910:	2000a358 	.word	0x2000a358
 8012914:	2000da98 	.word	0x2000da98

08012918 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012918:	b590      	push	{r4, r7, lr}
 801291a:	b08d      	sub	sp, #52	; 0x34
 801291c:	af04      	add	r7, sp, #16
 801291e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012920:	2300      	movs	r3, #0
 8012922:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d106      	bne.n	801293c <tcp_process+0x24>
 801292e:	4b9d      	ldr	r3, [pc, #628]	; (8012ba4 <tcp_process+0x28c>)
 8012930:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012934:	499c      	ldr	r1, [pc, #624]	; (8012ba8 <tcp_process+0x290>)
 8012936:	489d      	ldr	r0, [pc, #628]	; (8012bac <tcp_process+0x294>)
 8012938:	f006 fc46 	bl	80191c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801293c:	4b9c      	ldr	r3, [pc, #624]	; (8012bb0 <tcp_process+0x298>)
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 0304 	and.w	r3, r3, #4
 8012944:	2b00      	cmp	r3, #0
 8012946:	d04e      	beq.n	80129e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	7d1b      	ldrb	r3, [r3, #20]
 801294c:	2b02      	cmp	r3, #2
 801294e:	d108      	bne.n	8012962 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012954:	4b97      	ldr	r3, [pc, #604]	; (8012bb4 <tcp_process+0x29c>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	429a      	cmp	r2, r3
 801295a:	d123      	bne.n	80129a4 <tcp_process+0x8c>
        acceptable = 1;
 801295c:	2301      	movs	r3, #1
 801295e:	76fb      	strb	r3, [r7, #27]
 8012960:	e020      	b.n	80129a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012966:	4b94      	ldr	r3, [pc, #592]	; (8012bb8 <tcp_process+0x2a0>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	429a      	cmp	r2, r3
 801296c:	d102      	bne.n	8012974 <tcp_process+0x5c>
        acceptable = 1;
 801296e:	2301      	movs	r3, #1
 8012970:	76fb      	strb	r3, [r7, #27]
 8012972:	e017      	b.n	80129a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012974:	4b90      	ldr	r3, [pc, #576]	; (8012bb8 <tcp_process+0x2a0>)
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801297c:	1ad3      	subs	r3, r2, r3
 801297e:	2b00      	cmp	r3, #0
 8012980:	db10      	blt.n	80129a4 <tcp_process+0x8c>
 8012982:	4b8d      	ldr	r3, [pc, #564]	; (8012bb8 <tcp_process+0x2a0>)
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801298a:	6879      	ldr	r1, [r7, #4]
 801298c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801298e:	440b      	add	r3, r1
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	2b00      	cmp	r3, #0
 8012994:	dc06      	bgt.n	80129a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	8b5b      	ldrh	r3, [r3, #26]
 801299a:	f043 0302 	orr.w	r3, r3, #2
 801299e:	b29a      	uxth	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80129a4:	7efb      	ldrb	r3, [r7, #27]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d01b      	beq.n	80129e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	7d1b      	ldrb	r3, [r3, #20]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d106      	bne.n	80129c0 <tcp_process+0xa8>
 80129b2:	4b7c      	ldr	r3, [pc, #496]	; (8012ba4 <tcp_process+0x28c>)
 80129b4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80129b8:	4980      	ldr	r1, [pc, #512]	; (8012bbc <tcp_process+0x2a4>)
 80129ba:	487c      	ldr	r0, [pc, #496]	; (8012bac <tcp_process+0x294>)
 80129bc:	f006 fc04 	bl	80191c8 <iprintf>
      recv_flags |= TF_RESET;
 80129c0:	4b7f      	ldr	r3, [pc, #508]	; (8012bc0 <tcp_process+0x2a8>)
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	f043 0308 	orr.w	r3, r3, #8
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	4b7d      	ldr	r3, [pc, #500]	; (8012bc0 <tcp_process+0x2a8>)
 80129cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	8b5b      	ldrh	r3, [r3, #26]
 80129d2:	f023 0301 	bic.w	r3, r3, #1
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80129dc:	f06f 030d 	mvn.w	r3, #13
 80129e0:	e37a      	b.n	80130d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80129e2:	2300      	movs	r3, #0
 80129e4:	e378      	b.n	80130d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80129e6:	4b72      	ldr	r3, [pc, #456]	; (8012bb0 <tcp_process+0x298>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	f003 0302 	and.w	r3, r3, #2
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d010      	beq.n	8012a14 <tcp_process+0xfc>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	7d1b      	ldrb	r3, [r3, #20]
 80129f6:	2b02      	cmp	r3, #2
 80129f8:	d00c      	beq.n	8012a14 <tcp_process+0xfc>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	7d1b      	ldrb	r3, [r3, #20]
 80129fe:	2b03      	cmp	r3, #3
 8012a00:	d008      	beq.n	8012a14 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	8b5b      	ldrh	r3, [r3, #26]
 8012a06:	f043 0302 	orr.w	r3, r3, #2
 8012a0a:	b29a      	uxth	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012a10:	2300      	movs	r3, #0
 8012a12:	e361      	b.n	80130d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	8b5b      	ldrh	r3, [r3, #26]
 8012a18:	f003 0310 	and.w	r3, r3, #16
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d103      	bne.n	8012a28 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012a20:	4b68      	ldr	r3, [pc, #416]	; (8012bc4 <tcp_process+0x2ac>)
 8012a22:	681a      	ldr	r2, [r3, #0]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2200      	movs	r2, #0
 8012a34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f001 fc2f 	bl	801429c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	7d1b      	ldrb	r3, [r3, #20]
 8012a42:	3b02      	subs	r3, #2
 8012a44:	2b07      	cmp	r3, #7
 8012a46:	f200 8337 	bhi.w	80130b8 <tcp_process+0x7a0>
 8012a4a:	a201      	add	r2, pc, #4	; (adr r2, 8012a50 <tcp_process+0x138>)
 8012a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a50:	08012a71 	.word	0x08012a71
 8012a54:	08012ca1 	.word	0x08012ca1
 8012a58:	08012e19 	.word	0x08012e19
 8012a5c:	08012e43 	.word	0x08012e43
 8012a60:	08012f67 	.word	0x08012f67
 8012a64:	08012e19 	.word	0x08012e19
 8012a68:	08012ff3 	.word	0x08012ff3
 8012a6c:	08013083 	.word	0x08013083
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012a70:	4b4f      	ldr	r3, [pc, #316]	; (8012bb0 <tcp_process+0x298>)
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	f003 0310 	and.w	r3, r3, #16
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 80e4 	beq.w	8012c46 <tcp_process+0x32e>
 8012a7e:	4b4c      	ldr	r3, [pc, #304]	; (8012bb0 <tcp_process+0x298>)
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	f003 0302 	and.w	r3, r3, #2
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	f000 80dd 	beq.w	8012c46 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a90:	1c5a      	adds	r2, r3, #1
 8012a92:	4b48      	ldr	r3, [pc, #288]	; (8012bb4 <tcp_process+0x29c>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	f040 80d5 	bne.w	8012c46 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012a9c:	4b46      	ldr	r3, [pc, #280]	; (8012bb8 <tcp_process+0x2a0>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	1c5a      	adds	r2, r3, #1
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012aae:	4b41      	ldr	r3, [pc, #260]	; (8012bb4 <tcp_process+0x29c>)
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012ab6:	4b44      	ldr	r3, [pc, #272]	; (8012bc8 <tcp_process+0x2b0>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	89db      	ldrh	r3, [r3, #14]
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012ad0:	4b39      	ldr	r3, [pc, #228]	; (8012bb8 <tcp_process+0x2a0>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	1e5a      	subs	r2, r3, #1
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2204      	movs	r2, #4
 8012ade:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	3304      	adds	r3, #4
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f004 fe99 	bl	8017820 <ip4_route>
 8012aee:	4601      	mov	r1, r0
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	3304      	adds	r3, #4
 8012af4:	461a      	mov	r2, r3
 8012af6:	4620      	mov	r0, r4
 8012af8:	f7ff f88c 	bl	8011c14 <tcp_eff_send_mss_netif>
 8012afc:	4603      	mov	r3, r0
 8012afe:	461a      	mov	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b08:	009a      	lsls	r2, r3, #2
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b0e:	005b      	lsls	r3, r3, #1
 8012b10:	f241 111c 	movw	r1, #4380	; 0x111c
 8012b14:	428b      	cmp	r3, r1
 8012b16:	bf38      	it	cc
 8012b18:	460b      	movcc	r3, r1
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d204      	bcs.n	8012b28 <tcp_process+0x210>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	e00d      	b.n	8012b44 <tcp_process+0x22c>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b2c:	005b      	lsls	r3, r3, #1
 8012b2e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d904      	bls.n	8012b40 <tcp_process+0x228>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b3a:	005b      	lsls	r3, r3, #1
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	e001      	b.n	8012b44 <tcp_process+0x22c>
 8012b40:	f241 131c 	movw	r3, #4380	; 0x111c
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d106      	bne.n	8012b62 <tcp_process+0x24a>
 8012b54:	4b13      	ldr	r3, [pc, #76]	; (8012ba4 <tcp_process+0x28c>)
 8012b56:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012b5a:	491c      	ldr	r1, [pc, #112]	; (8012bcc <tcp_process+0x2b4>)
 8012b5c:	4813      	ldr	r0, [pc, #76]	; (8012bac <tcp_process+0x294>)
 8012b5e:	f006 fb33 	bl	80191c8 <iprintf>
        --pcb->snd_queuelen;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	b29a      	uxth	r2, r3
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b76:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d12a      	bne.n	8012bd4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b82:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d106      	bne.n	8012b98 <tcp_process+0x280>
 8012b8a:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <tcp_process+0x28c>)
 8012b8c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012b90:	490f      	ldr	r1, [pc, #60]	; (8012bd0 <tcp_process+0x2b8>)
 8012b92:	4806      	ldr	r0, [pc, #24]	; (8012bac <tcp_process+0x294>)
 8012b94:	f006 fb18 	bl	80191c8 <iprintf>
          pcb->unsent = rseg->next;
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ba0:	e01c      	b.n	8012bdc <tcp_process+0x2c4>
 8012ba2:	bf00      	nop
 8012ba4:	0801ba7c 	.word	0x0801ba7c
 8012ba8:	0801bcb4 	.word	0x0801bcb4
 8012bac:	0801bac8 	.word	0x0801bac8
 8012bb0:	2000dadc 	.word	0x2000dadc
 8012bb4:	2000dad4 	.word	0x2000dad4
 8012bb8:	2000dad0 	.word	0x2000dad0
 8012bbc:	0801bcd0 	.word	0x0801bcd0
 8012bc0:	2000dadd 	.word	0x2000dadd
 8012bc4:	2000da98 	.word	0x2000da98
 8012bc8:	2000dac0 	.word	0x2000dac0
 8012bcc:	0801bcf0 	.word	0x0801bcf0
 8012bd0:	0801bd08 	.word	0x0801bd08
        } else {
          pcb->unacked = rseg->next;
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	681a      	ldr	r2, [r3, #0]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012bdc:	69f8      	ldr	r0, [r7, #28]
 8012bde:	f7fe fd22 	bl	8011626 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d104      	bne.n	8012bf4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bf0:	861a      	strh	r2, [r3, #48]	; 0x30
 8012bf2:	e006      	b.n	8012c02 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d00a      	beq.n	8012c22 <tcp_process+0x30a>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	6910      	ldr	r0, [r2, #16]
 8012c16:	2200      	movs	r2, #0
 8012c18:	6879      	ldr	r1, [r7, #4]
 8012c1a:	4798      	blx	r3
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	76bb      	strb	r3, [r7, #26]
 8012c20:	e001      	b.n	8012c26 <tcp_process+0x30e>
 8012c22:	2300      	movs	r3, #0
 8012c24:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012c26:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012c2a:	f113 0f0d 	cmn.w	r3, #13
 8012c2e:	d102      	bne.n	8012c36 <tcp_process+0x31e>
          return ERR_ABRT;
 8012c30:	f06f 030c 	mvn.w	r3, #12
 8012c34:	e250      	b.n	80130d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	8b5b      	ldrh	r3, [r3, #26]
 8012c3a:	f043 0302 	orr.w	r3, r3, #2
 8012c3e:	b29a      	uxth	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012c44:	e23a      	b.n	80130bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012c46:	4b98      	ldr	r3, [pc, #608]	; (8012ea8 <tcp_process+0x590>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	f003 0310 	and.w	r3, r3, #16
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	f000 8234 	beq.w	80130bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c54:	4b95      	ldr	r3, [pc, #596]	; (8012eac <tcp_process+0x594>)
 8012c56:	6819      	ldr	r1, [r3, #0]
 8012c58:	4b95      	ldr	r3, [pc, #596]	; (8012eb0 <tcp_process+0x598>)
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	4b95      	ldr	r3, [pc, #596]	; (8012eb4 <tcp_process+0x59c>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c64:	4b94      	ldr	r3, [pc, #592]	; (8012eb8 <tcp_process+0x5a0>)
 8012c66:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c68:	885b      	ldrh	r3, [r3, #2]
 8012c6a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c6c:	4a92      	ldr	r2, [pc, #584]	; (8012eb8 <tcp_process+0x5a0>)
 8012c6e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c70:	8812      	ldrh	r2, [r2, #0]
 8012c72:	b292      	uxth	r2, r2
 8012c74:	9202      	str	r2, [sp, #8]
 8012c76:	9301      	str	r3, [sp, #4]
 8012c78:	4b90      	ldr	r3, [pc, #576]	; (8012ebc <tcp_process+0x5a4>)
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	4b90      	ldr	r3, [pc, #576]	; (8012ec0 <tcp_process+0x5a8>)
 8012c7e:	4602      	mov	r2, r0
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f002 fc85 	bl	8015590 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c8c:	2b05      	cmp	r3, #5
 8012c8e:	f200 8215 	bhi.w	80130bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f002 fa4f 	bl	801513c <tcp_rexmit_rto>
      break;
 8012c9e:	e20d      	b.n	80130bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012ca0:	4b81      	ldr	r3, [pc, #516]	; (8012ea8 <tcp_process+0x590>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	f003 0310 	and.w	r3, r3, #16
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	f000 80a1 	beq.w	8012df0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012cae:	4b7f      	ldr	r3, [pc, #508]	; (8012eac <tcp_process+0x594>)
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	3b01      	subs	r3, #1
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	db7e      	blt.n	8012dbc <tcp_process+0x4a4>
 8012cbe:	4b7b      	ldr	r3, [pc, #492]	; (8012eac <tcp_process+0x594>)
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	dc77      	bgt.n	8012dbc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2204      	movs	r2, #4
 8012cd0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d102      	bne.n	8012ce0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012cda:	23fa      	movs	r3, #250	; 0xfa
 8012cdc:	76bb      	strb	r3, [r7, #26]
 8012cde:	e01d      	b.n	8012d1c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ce4:	699b      	ldr	r3, [r3, #24]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <tcp_process+0x3e0>
 8012cea:	4b76      	ldr	r3, [pc, #472]	; (8012ec4 <tcp_process+0x5ac>)
 8012cec:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012cf0:	4975      	ldr	r1, [pc, #468]	; (8012ec8 <tcp_process+0x5b0>)
 8012cf2:	4876      	ldr	r0, [pc, #472]	; (8012ecc <tcp_process+0x5b4>)
 8012cf4:	f006 fa68 	bl	80191c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cfc:	699b      	ldr	r3, [r3, #24]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00a      	beq.n	8012d18 <tcp_process+0x400>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d06:	699b      	ldr	r3, [r3, #24]
 8012d08:	687a      	ldr	r2, [r7, #4]
 8012d0a:	6910      	ldr	r0, [r2, #16]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	6879      	ldr	r1, [r7, #4]
 8012d10:	4798      	blx	r3
 8012d12:	4603      	mov	r3, r0
 8012d14:	76bb      	strb	r3, [r7, #26]
 8012d16:	e001      	b.n	8012d1c <tcp_process+0x404>
 8012d18:	23f0      	movs	r3, #240	; 0xf0
 8012d1a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012d1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d00a      	beq.n	8012d3a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012d24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012d28:	f113 0f0d 	cmn.w	r3, #13
 8012d2c:	d002      	beq.n	8012d34 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f7fd ff8e 	bl	8010c50 <tcp_abort>
            }
            return ERR_ABRT;
 8012d34:	f06f 030c 	mvn.w	r3, #12
 8012d38:	e1ce      	b.n	80130d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 fae0 	bl	8013300 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012d40:	4b63      	ldr	r3, [pc, #396]	; (8012ed0 <tcp_process+0x5b8>)
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d005      	beq.n	8012d54 <tcp_process+0x43c>
            recv_acked--;
 8012d48:	4b61      	ldr	r3, [pc, #388]	; (8012ed0 <tcp_process+0x5b8>)
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	4b5f      	ldr	r3, [pc, #380]	; (8012ed0 <tcp_process+0x5b8>)
 8012d52:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d58:	009a      	lsls	r2, r3, #2
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d5e:	005b      	lsls	r3, r3, #1
 8012d60:	f241 111c 	movw	r1, #4380	; 0x111c
 8012d64:	428b      	cmp	r3, r1
 8012d66:	bf38      	it	cc
 8012d68:	460b      	movcc	r3, r1
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d204      	bcs.n	8012d78 <tcp_process+0x460>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	e00d      	b.n	8012d94 <tcp_process+0x47c>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d7c:	005b      	lsls	r3, r3, #1
 8012d7e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d904      	bls.n	8012d90 <tcp_process+0x478>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	e001      	b.n	8012d94 <tcp_process+0x47c>
 8012d90:	f241 131c 	movw	r3, #4380	; 0x111c
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012d9a:	4b4e      	ldr	r3, [pc, #312]	; (8012ed4 <tcp_process+0x5bc>)
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	f003 0320 	and.w	r3, r3, #32
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d037      	beq.n	8012e16 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	8b5b      	ldrh	r3, [r3, #26]
 8012daa:	f043 0302 	orr.w	r3, r3, #2
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2207      	movs	r2, #7
 8012db8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012dba:	e02c      	b.n	8012e16 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dbc:	4b3b      	ldr	r3, [pc, #236]	; (8012eac <tcp_process+0x594>)
 8012dbe:	6819      	ldr	r1, [r3, #0]
 8012dc0:	4b3b      	ldr	r3, [pc, #236]	; (8012eb0 <tcp_process+0x598>)
 8012dc2:	881b      	ldrh	r3, [r3, #0]
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	4b3b      	ldr	r3, [pc, #236]	; (8012eb4 <tcp_process+0x59c>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dcc:	4b3a      	ldr	r3, [pc, #232]	; (8012eb8 <tcp_process+0x5a0>)
 8012dce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dd0:	885b      	ldrh	r3, [r3, #2]
 8012dd2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dd4:	4a38      	ldr	r2, [pc, #224]	; (8012eb8 <tcp_process+0x5a0>)
 8012dd6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dd8:	8812      	ldrh	r2, [r2, #0]
 8012dda:	b292      	uxth	r2, r2
 8012ddc:	9202      	str	r2, [sp, #8]
 8012dde:	9301      	str	r3, [sp, #4]
 8012de0:	4b36      	ldr	r3, [pc, #216]	; (8012ebc <tcp_process+0x5a4>)
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	4b36      	ldr	r3, [pc, #216]	; (8012ec0 <tcp_process+0x5a8>)
 8012de6:	4602      	mov	r2, r0
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f002 fbd1 	bl	8015590 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012dee:	e167      	b.n	80130c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012df0:	4b2d      	ldr	r3, [pc, #180]	; (8012ea8 <tcp_process+0x590>)
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	f003 0302 	and.w	r3, r3, #2
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f000 8161 	beq.w	80130c0 <tcp_process+0x7a8>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e02:	1e5a      	subs	r2, r3, #1
 8012e04:	4b2b      	ldr	r3, [pc, #172]	; (8012eb4 <tcp_process+0x59c>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	f040 8159 	bne.w	80130c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f002 f9b6 	bl	8015180 <tcp_rexmit>
      break;
 8012e14:	e154      	b.n	80130c0 <tcp_process+0x7a8>
 8012e16:	e153      	b.n	80130c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f000 fa71 	bl	8013300 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012e1e:	4b2d      	ldr	r3, [pc, #180]	; (8012ed4 <tcp_process+0x5bc>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	f003 0320 	and.w	r3, r3, #32
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f000 814c 	beq.w	80130c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	8b5b      	ldrh	r3, [r3, #26]
 8012e30:	f043 0302 	orr.w	r3, r3, #2
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2207      	movs	r2, #7
 8012e3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012e40:	e140      	b.n	80130c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 fa5c 	bl	8013300 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012e48:	4b22      	ldr	r3, [pc, #136]	; (8012ed4 <tcp_process+0x5bc>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	f003 0320 	and.w	r3, r3, #32
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d071      	beq.n	8012f38 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e54:	4b14      	ldr	r3, [pc, #80]	; (8012ea8 <tcp_process+0x590>)
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	f003 0310 	and.w	r3, r3, #16
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d060      	beq.n	8012f22 <tcp_process+0x60a>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e64:	4b11      	ldr	r3, [pc, #68]	; (8012eac <tcp_process+0x594>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d15a      	bne.n	8012f22 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d156      	bne.n	8012f22 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	8b5b      	ldrh	r3, [r3, #26]
 8012e78:	f043 0302 	orr.w	r3, r3, #2
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f7fe fdbc 	bl	8011a00 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012e88:	4b13      	ldr	r3, [pc, #76]	; (8012ed8 <tcp_process+0x5c0>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	687a      	ldr	r2, [r7, #4]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d105      	bne.n	8012e9e <tcp_process+0x586>
 8012e92:	4b11      	ldr	r3, [pc, #68]	; (8012ed8 <tcp_process+0x5c0>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	4a0f      	ldr	r2, [pc, #60]	; (8012ed8 <tcp_process+0x5c0>)
 8012e9a:	6013      	str	r3, [r2, #0]
 8012e9c:	e02e      	b.n	8012efc <tcp_process+0x5e4>
 8012e9e:	4b0e      	ldr	r3, [pc, #56]	; (8012ed8 <tcp_process+0x5c0>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	617b      	str	r3, [r7, #20]
 8012ea4:	e027      	b.n	8012ef6 <tcp_process+0x5de>
 8012ea6:	bf00      	nop
 8012ea8:	2000dadc 	.word	0x2000dadc
 8012eac:	2000dad4 	.word	0x2000dad4
 8012eb0:	2000dada 	.word	0x2000dada
 8012eb4:	2000dad0 	.word	0x2000dad0
 8012eb8:	2000dac0 	.word	0x2000dac0
 8012ebc:	2000a354 	.word	0x2000a354
 8012ec0:	2000a358 	.word	0x2000a358
 8012ec4:	0801ba7c 	.word	0x0801ba7c
 8012ec8:	0801bd1c 	.word	0x0801bd1c
 8012ecc:	0801bac8 	.word	0x0801bac8
 8012ed0:	2000dad8 	.word	0x2000dad8
 8012ed4:	2000dadd 	.word	0x2000dadd
 8012ed8:	2000daa4 	.word	0x2000daa4
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d104      	bne.n	8012ef0 <tcp_process+0x5d8>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68da      	ldr	r2, [r3, #12]
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	60da      	str	r2, [r3, #12]
 8012eee:	e005      	b.n	8012efc <tcp_process+0x5e4>
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	617b      	str	r3, [r7, #20]
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1ef      	bne.n	8012edc <tcp_process+0x5c4>
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	60da      	str	r2, [r3, #12]
 8012f02:	4b77      	ldr	r3, [pc, #476]	; (80130e0 <tcp_process+0x7c8>)
 8012f04:	2201      	movs	r2, #1
 8012f06:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	220a      	movs	r2, #10
 8012f0c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012f0e:	4b75      	ldr	r3, [pc, #468]	; (80130e4 <tcp_process+0x7cc>)
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	60da      	str	r2, [r3, #12]
 8012f16:	4a73      	ldr	r2, [pc, #460]	; (80130e4 <tcp_process+0x7cc>)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6013      	str	r3, [r2, #0]
 8012f1c:	f002 fcfa 	bl	8015914 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012f20:	e0d2      	b.n	80130c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	8b5b      	ldrh	r3, [r3, #26]
 8012f26:	f043 0302 	orr.w	r3, r3, #2
 8012f2a:	b29a      	uxth	r2, r3
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2208      	movs	r2, #8
 8012f34:	751a      	strb	r2, [r3, #20]
      break;
 8012f36:	e0c7      	b.n	80130c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f38:	4b6b      	ldr	r3, [pc, #428]	; (80130e8 <tcp_process+0x7d0>)
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	f003 0310 	and.w	r3, r3, #16
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 80c1 	beq.w	80130c8 <tcp_process+0x7b0>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f4a:	4b68      	ldr	r3, [pc, #416]	; (80130ec <tcp_process+0x7d4>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	f040 80ba 	bne.w	80130c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f040 80b5 	bne.w	80130c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2206      	movs	r2, #6
 8012f62:	751a      	strb	r2, [r3, #20]
      break;
 8012f64:	e0b0      	b.n	80130c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f000 f9ca 	bl	8013300 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012f6c:	4b60      	ldr	r3, [pc, #384]	; (80130f0 <tcp_process+0x7d8>)
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	f003 0320 	and.w	r3, r3, #32
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f000 80a9 	beq.w	80130cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	8b5b      	ldrh	r3, [r3, #26]
 8012f7e:	f043 0302 	orr.w	r3, r3, #2
 8012f82:	b29a      	uxth	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f7fe fd39 	bl	8011a00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012f8e:	4b59      	ldr	r3, [pc, #356]	; (80130f4 <tcp_process+0x7dc>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d105      	bne.n	8012fa4 <tcp_process+0x68c>
 8012f98:	4b56      	ldr	r3, [pc, #344]	; (80130f4 <tcp_process+0x7dc>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	4a55      	ldr	r2, [pc, #340]	; (80130f4 <tcp_process+0x7dc>)
 8012fa0:	6013      	str	r3, [r2, #0]
 8012fa2:	e013      	b.n	8012fcc <tcp_process+0x6b4>
 8012fa4:	4b53      	ldr	r3, [pc, #332]	; (80130f4 <tcp_process+0x7dc>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	613b      	str	r3, [r7, #16]
 8012faa:	e00c      	b.n	8012fc6 <tcp_process+0x6ae>
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d104      	bne.n	8012fc0 <tcp_process+0x6a8>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	68da      	ldr	r2, [r3, #12]
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	60da      	str	r2, [r3, #12]
 8012fbe:	e005      	b.n	8012fcc <tcp_process+0x6b4>
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	613b      	str	r3, [r7, #16]
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d1ef      	bne.n	8012fac <tcp_process+0x694>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	60da      	str	r2, [r3, #12]
 8012fd2:	4b43      	ldr	r3, [pc, #268]	; (80130e0 <tcp_process+0x7c8>)
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	220a      	movs	r2, #10
 8012fdc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012fde:	4b41      	ldr	r3, [pc, #260]	; (80130e4 <tcp_process+0x7cc>)
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	60da      	str	r2, [r3, #12]
 8012fe6:	4a3f      	ldr	r2, [pc, #252]	; (80130e4 <tcp_process+0x7cc>)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	f002 fc92 	bl	8015914 <tcp_timer_needed>
      }
      break;
 8012ff0:	e06c      	b.n	80130cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 f984 	bl	8013300 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012ff8:	4b3b      	ldr	r3, [pc, #236]	; (80130e8 <tcp_process+0x7d0>)
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	f003 0310 	and.w	r3, r3, #16
 8013000:	2b00      	cmp	r3, #0
 8013002:	d065      	beq.n	80130d0 <tcp_process+0x7b8>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013008:	4b38      	ldr	r3, [pc, #224]	; (80130ec <tcp_process+0x7d4>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	429a      	cmp	r2, r3
 801300e:	d15f      	bne.n	80130d0 <tcp_process+0x7b8>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013014:	2b00      	cmp	r3, #0
 8013016:	d15b      	bne.n	80130d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7fe fcf1 	bl	8011a00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801301e:	4b35      	ldr	r3, [pc, #212]	; (80130f4 <tcp_process+0x7dc>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	687a      	ldr	r2, [r7, #4]
 8013024:	429a      	cmp	r2, r3
 8013026:	d105      	bne.n	8013034 <tcp_process+0x71c>
 8013028:	4b32      	ldr	r3, [pc, #200]	; (80130f4 <tcp_process+0x7dc>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	68db      	ldr	r3, [r3, #12]
 801302e:	4a31      	ldr	r2, [pc, #196]	; (80130f4 <tcp_process+0x7dc>)
 8013030:	6013      	str	r3, [r2, #0]
 8013032:	e013      	b.n	801305c <tcp_process+0x744>
 8013034:	4b2f      	ldr	r3, [pc, #188]	; (80130f4 <tcp_process+0x7dc>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	60fb      	str	r3, [r7, #12]
 801303a:	e00c      	b.n	8013056 <tcp_process+0x73e>
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	429a      	cmp	r2, r3
 8013044:	d104      	bne.n	8013050 <tcp_process+0x738>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	68da      	ldr	r2, [r3, #12]
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	60da      	str	r2, [r3, #12]
 801304e:	e005      	b.n	801305c <tcp_process+0x744>
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	60fb      	str	r3, [r7, #12]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d1ef      	bne.n	801303c <tcp_process+0x724>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	60da      	str	r2, [r3, #12]
 8013062:	4b1f      	ldr	r3, [pc, #124]	; (80130e0 <tcp_process+0x7c8>)
 8013064:	2201      	movs	r2, #1
 8013066:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	220a      	movs	r2, #10
 801306c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801306e:	4b1d      	ldr	r3, [pc, #116]	; (80130e4 <tcp_process+0x7cc>)
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	60da      	str	r2, [r3, #12]
 8013076:	4a1b      	ldr	r2, [pc, #108]	; (80130e4 <tcp_process+0x7cc>)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6013      	str	r3, [r2, #0]
 801307c:	f002 fc4a 	bl	8015914 <tcp_timer_needed>
      }
      break;
 8013080:	e026      	b.n	80130d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 f93c 	bl	8013300 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013088:	4b17      	ldr	r3, [pc, #92]	; (80130e8 <tcp_process+0x7d0>)
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	f003 0310 	and.w	r3, r3, #16
 8013090:	2b00      	cmp	r3, #0
 8013092:	d01f      	beq.n	80130d4 <tcp_process+0x7bc>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013098:	4b14      	ldr	r3, [pc, #80]	; (80130ec <tcp_process+0x7d4>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	429a      	cmp	r2, r3
 801309e:	d119      	bne.n	80130d4 <tcp_process+0x7bc>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d115      	bne.n	80130d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80130a8:	4b11      	ldr	r3, [pc, #68]	; (80130f0 <tcp_process+0x7d8>)
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	f043 0310 	orr.w	r3, r3, #16
 80130b0:	b2da      	uxtb	r2, r3
 80130b2:	4b0f      	ldr	r3, [pc, #60]	; (80130f0 <tcp_process+0x7d8>)
 80130b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80130b6:	e00d      	b.n	80130d4 <tcp_process+0x7bc>
    default:
      break;
 80130b8:	bf00      	nop
 80130ba:	e00c      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130bc:	bf00      	nop
 80130be:	e00a      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130c0:	bf00      	nop
 80130c2:	e008      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130c4:	bf00      	nop
 80130c6:	e006      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130c8:	bf00      	nop
 80130ca:	e004      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130cc:	bf00      	nop
 80130ce:	e002      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130d0:	bf00      	nop
 80130d2:	e000      	b.n	80130d6 <tcp_process+0x7be>
      break;
 80130d4:	bf00      	nop
  }
  return ERR_OK;
 80130d6:	2300      	movs	r3, #0
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3724      	adds	r7, #36	; 0x24
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd90      	pop	{r4, r7, pc}
 80130e0:	2000daac 	.word	0x2000daac
 80130e4:	2000daa8 	.word	0x2000daa8
 80130e8:	2000dadc 	.word	0x2000dadc
 80130ec:	2000dad4 	.word	0x2000dad4
 80130f0:	2000dadd 	.word	0x2000dadd
 80130f4:	2000daa4 	.word	0x2000daa4

080130f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80130f8:	b590      	push	{r4, r7, lr}
 80130fa:	b085      	sub	sp, #20
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d106      	bne.n	8013116 <tcp_oos_insert_segment+0x1e>
 8013108:	4b3b      	ldr	r3, [pc, #236]	; (80131f8 <tcp_oos_insert_segment+0x100>)
 801310a:	f240 421f 	movw	r2, #1055	; 0x41f
 801310e:	493b      	ldr	r1, [pc, #236]	; (80131fc <tcp_oos_insert_segment+0x104>)
 8013110:	483b      	ldr	r0, [pc, #236]	; (8013200 <tcp_oos_insert_segment+0x108>)
 8013112:	f006 f859 	bl	80191c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	899b      	ldrh	r3, [r3, #12]
 801311c:	b29b      	uxth	r3, r3
 801311e:	4618      	mov	r0, r3
 8013120:	f7fb fb6e 	bl	800e800 <lwip_htons>
 8013124:	4603      	mov	r3, r0
 8013126:	b2db      	uxtb	r3, r3
 8013128:	f003 0301 	and.w	r3, r3, #1
 801312c:	2b00      	cmp	r3, #0
 801312e:	d028      	beq.n	8013182 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013130:	6838      	ldr	r0, [r7, #0]
 8013132:	f7fe fa63 	bl	80115fc <tcp_segs_free>
    next = NULL;
 8013136:	2300      	movs	r3, #0
 8013138:	603b      	str	r3, [r7, #0]
 801313a:	e056      	b.n	80131ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	899b      	ldrh	r3, [r3, #12]
 8013142:	b29b      	uxth	r3, r3
 8013144:	4618      	mov	r0, r3
 8013146:	f7fb fb5b 	bl	800e800 <lwip_htons>
 801314a:	4603      	mov	r3, r0
 801314c:	b2db      	uxtb	r3, r3
 801314e:	f003 0301 	and.w	r3, r3, #1
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00d      	beq.n	8013172 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	68db      	ldr	r3, [r3, #12]
 801315a:	899b      	ldrh	r3, [r3, #12]
 801315c:	b29c      	uxth	r4, r3
 801315e:	2001      	movs	r0, #1
 8013160:	f7fb fb4e 	bl	800e800 <lwip_htons>
 8013164:	4603      	mov	r3, r0
 8013166:	461a      	mov	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	4322      	orrs	r2, r4
 801316e:	b292      	uxth	r2, r2
 8013170:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801317c:	68f8      	ldr	r0, [r7, #12]
 801317e:	f7fe fa52 	bl	8011626 <tcp_seg_free>
    while (next &&
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d00e      	beq.n	80131a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	891b      	ldrh	r3, [r3, #8]
 801318c:	461a      	mov	r2, r3
 801318e:	4b1d      	ldr	r3, [pc, #116]	; (8013204 <tcp_oos_insert_segment+0x10c>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	441a      	add	r2, r3
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	8909      	ldrh	r1, [r1, #8]
 801319e:	440b      	add	r3, r1
 80131a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	daca      	bge.n	801313c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d01e      	beq.n	80131ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	891b      	ldrh	r3, [r3, #8]
 80131b0:	461a      	mov	r2, r3
 80131b2:	4b14      	ldr	r3, [pc, #80]	; (8013204 <tcp_oos_insert_segment+0x10c>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	441a      	add	r2, r3
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	1ad3      	subs	r3, r2, r3
    if (next &&
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	dd12      	ble.n	80131ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	b29a      	uxth	r2, r3
 80131cc:	4b0d      	ldr	r3, [pc, #52]	; (8013204 <tcp_oos_insert_segment+0x10c>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	685a      	ldr	r2, [r3, #4]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	891b      	ldrh	r3, [r3, #8]
 80131e2:	4619      	mov	r1, r3
 80131e4:	4610      	mov	r0, r2
 80131e6:	f7fc fd77 	bl	800fcd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	683a      	ldr	r2, [r7, #0]
 80131ee:	601a      	str	r2, [r3, #0]
}
 80131f0:	bf00      	nop
 80131f2:	3714      	adds	r7, #20
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd90      	pop	{r4, r7, pc}
 80131f8:	0801ba7c 	.word	0x0801ba7c
 80131fc:	0801bd3c 	.word	0x0801bd3c
 8013200:	0801bac8 	.word	0x0801bac8
 8013204:	2000dad0 	.word	0x2000dad0

08013208 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013208:	b5b0      	push	{r4, r5, r7, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	607a      	str	r2, [r7, #4]
 8013214:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013216:	e03e      	b.n	8013296 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	4618      	mov	r0, r3
 8013228:	f7fc ff6a 	bl	8010100 <pbuf_clen>
 801322c:	4603      	mov	r3, r0
 801322e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013236:	8a7a      	ldrh	r2, [r7, #18]
 8013238:	429a      	cmp	r2, r3
 801323a:	d906      	bls.n	801324a <tcp_free_acked_segments+0x42>
 801323c:	4b2a      	ldr	r3, [pc, #168]	; (80132e8 <tcp_free_acked_segments+0xe0>)
 801323e:	f240 4257 	movw	r2, #1111	; 0x457
 8013242:	492a      	ldr	r1, [pc, #168]	; (80132ec <tcp_free_acked_segments+0xe4>)
 8013244:	482a      	ldr	r0, [pc, #168]	; (80132f0 <tcp_free_acked_segments+0xe8>)
 8013246:	f005 ffbf 	bl	80191c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013250:	8a7b      	ldrh	r3, [r7, #18]
 8013252:	1ad3      	subs	r3, r2, r3
 8013254:	b29a      	uxth	r2, r3
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	891a      	ldrh	r2, [r3, #8]
 8013260:	4b24      	ldr	r3, [pc, #144]	; (80132f4 <tcp_free_acked_segments+0xec>)
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	4413      	add	r3, r2
 8013266:	b29a      	uxth	r2, r3
 8013268:	4b22      	ldr	r3, [pc, #136]	; (80132f4 <tcp_free_acked_segments+0xec>)
 801326a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801326c:	6978      	ldr	r0, [r7, #20]
 801326e:	f7fe f9da 	bl	8011626 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00c      	beq.n	8013296 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d109      	bne.n	8013296 <tcp_free_acked_segments+0x8e>
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d106      	bne.n	8013296 <tcp_free_acked_segments+0x8e>
 8013288:	4b17      	ldr	r3, [pc, #92]	; (80132e8 <tcp_free_acked_segments+0xe0>)
 801328a:	f240 4261 	movw	r2, #1121	; 0x461
 801328e:	491a      	ldr	r1, [pc, #104]	; (80132f8 <tcp_free_acked_segments+0xf0>)
 8013290:	4817      	ldr	r0, [pc, #92]	; (80132f0 <tcp_free_acked_segments+0xe8>)
 8013292:	f005 ff99 	bl	80191c8 <iprintf>
  while (seg_list != NULL &&
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d020      	beq.n	80132de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fb fac1 	bl	800e82a <lwip_htonl>
 80132a8:	4604      	mov	r4, r0
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	891b      	ldrh	r3, [r3, #8]
 80132ae:	461d      	mov	r5, r3
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	899b      	ldrh	r3, [r3, #12]
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fb faa1 	bl	800e800 <lwip_htons>
 80132be:	4603      	mov	r3, r0
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	f003 0303 	and.w	r3, r3, #3
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d001      	beq.n	80132ce <tcp_free_acked_segments+0xc6>
 80132ca:	2301      	movs	r3, #1
 80132cc:	e000      	b.n	80132d0 <tcp_free_acked_segments+0xc8>
 80132ce:	2300      	movs	r3, #0
 80132d0:	442b      	add	r3, r5
 80132d2:	18e2      	adds	r2, r4, r3
 80132d4:	4b09      	ldr	r3, [pc, #36]	; (80132fc <tcp_free_acked_segments+0xf4>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80132da:	2b00      	cmp	r3, #0
 80132dc:	dd9c      	ble.n	8013218 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80132de:	68bb      	ldr	r3, [r7, #8]
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3718      	adds	r7, #24
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bdb0      	pop	{r4, r5, r7, pc}
 80132e8:	0801ba7c 	.word	0x0801ba7c
 80132ec:	0801bd64 	.word	0x0801bd64
 80132f0:	0801bac8 	.word	0x0801bac8
 80132f4:	2000dad8 	.word	0x2000dad8
 80132f8:	0801bd8c 	.word	0x0801bd8c
 80132fc:	2000dad4 	.word	0x2000dad4

08013300 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013300:	b5b0      	push	{r4, r5, r7, lr}
 8013302:	b094      	sub	sp, #80	; 0x50
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013308:	2300      	movs	r3, #0
 801330a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d106      	bne.n	8013320 <tcp_receive+0x20>
 8013312:	4b91      	ldr	r3, [pc, #580]	; (8013558 <tcp_receive+0x258>)
 8013314:	f240 427b 	movw	r2, #1147	; 0x47b
 8013318:	4990      	ldr	r1, [pc, #576]	; (801355c <tcp_receive+0x25c>)
 801331a:	4891      	ldr	r0, [pc, #580]	; (8013560 <tcp_receive+0x260>)
 801331c:	f005 ff54 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	7d1b      	ldrb	r3, [r3, #20]
 8013324:	2b03      	cmp	r3, #3
 8013326:	d806      	bhi.n	8013336 <tcp_receive+0x36>
 8013328:	4b8b      	ldr	r3, [pc, #556]	; (8013558 <tcp_receive+0x258>)
 801332a:	f240 427c 	movw	r2, #1148	; 0x47c
 801332e:	498d      	ldr	r1, [pc, #564]	; (8013564 <tcp_receive+0x264>)
 8013330:	488b      	ldr	r0, [pc, #556]	; (8013560 <tcp_receive+0x260>)
 8013332:	f005 ff49 	bl	80191c8 <iprintf>

  if (flags & TCP_ACK) {
 8013336:	4b8c      	ldr	r3, [pc, #560]	; (8013568 <tcp_receive+0x268>)
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	f003 0310 	and.w	r3, r3, #16
 801333e:	2b00      	cmp	r3, #0
 8013340:	f000 8264 	beq.w	801380c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801334a:	461a      	mov	r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013350:	4413      	add	r3, r2
 8013352:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013358:	4b84      	ldr	r3, [pc, #528]	; (801356c <tcp_receive+0x26c>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	2b00      	cmp	r3, #0
 8013360:	db1b      	blt.n	801339a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013366:	4b81      	ldr	r3, [pc, #516]	; (801356c <tcp_receive+0x26c>)
 8013368:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801336a:	429a      	cmp	r2, r3
 801336c:	d106      	bne.n	801337c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013372:	4b7f      	ldr	r3, [pc, #508]	; (8013570 <tcp_receive+0x270>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	2b00      	cmp	r3, #0
 801337a:	db0e      	blt.n	801339a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013380:	4b7b      	ldr	r3, [pc, #492]	; (8013570 <tcp_receive+0x270>)
 8013382:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013384:	429a      	cmp	r2, r3
 8013386:	d125      	bne.n	80133d4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013388:	4b7a      	ldr	r3, [pc, #488]	; (8013574 <tcp_receive+0x274>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	89db      	ldrh	r3, [r3, #14]
 801338e:	b29a      	uxth	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013396:	429a      	cmp	r2, r3
 8013398:	d91c      	bls.n	80133d4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801339a:	4b76      	ldr	r3, [pc, #472]	; (8013574 <tcp_receive+0x274>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	89db      	ldrh	r3, [r3, #14]
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d205      	bcs.n	80133c4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80133c4:	4b69      	ldr	r3, [pc, #420]	; (801356c <tcp_receive+0x26c>)
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80133cc:	4b68      	ldr	r3, [pc, #416]	; (8013570 <tcp_receive+0x270>)
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80133d4:	4b66      	ldr	r3, [pc, #408]	; (8013570 <tcp_receive+0x270>)
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133dc:	1ad3      	subs	r3, r2, r3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	dc58      	bgt.n	8013494 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80133e2:	4b65      	ldr	r3, [pc, #404]	; (8013578 <tcp_receive+0x278>)
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d14b      	bne.n	8013482 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80133f4:	4413      	add	r3, r2
 80133f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d142      	bne.n	8013482 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013402:	2b00      	cmp	r3, #0
 8013404:	db3d      	blt.n	8013482 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801340a:	4b59      	ldr	r3, [pc, #356]	; (8013570 <tcp_receive+0x270>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	429a      	cmp	r2, r3
 8013410:	d137      	bne.n	8013482 <tcp_receive+0x182>
              found_dupack = 1;
 8013412:	2301      	movs	r3, #1
 8013414:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801341c:	2bff      	cmp	r3, #255	; 0xff
 801341e:	d007      	beq.n	8013430 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013426:	3301      	adds	r3, #1
 8013428:	b2da      	uxtb	r2, r3
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013436:	2b03      	cmp	r3, #3
 8013438:	d91b      	bls.n	8013472 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013444:	4413      	add	r3, r2
 8013446:	b29a      	uxth	r2, r3
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801344e:	429a      	cmp	r2, r3
 8013450:	d30a      	bcc.n	8013468 <tcp_receive+0x168>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801345c:	4413      	add	r3, r2
 801345e:	b29a      	uxth	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013466:	e004      	b.n	8013472 <tcp_receive+0x172>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801346e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013478:	2b02      	cmp	r3, #2
 801347a:	d902      	bls.n	8013482 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f001 feeb 	bl	8015258 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013484:	2b00      	cmp	r3, #0
 8013486:	f040 8161 	bne.w	801374c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2200      	movs	r2, #0
 801348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013492:	e15b      	b.n	801374c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013494:	4b36      	ldr	r3, [pc, #216]	; (8013570 <tcp_receive+0x270>)
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	3b01      	subs	r3, #1
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	f2c0 814e 	blt.w	8013742 <tcp_receive+0x442>
 80134a6:	4b32      	ldr	r3, [pc, #200]	; (8013570 <tcp_receive+0x270>)
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f300 8146 	bgt.w	8013742 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	8b5b      	ldrh	r3, [r3, #26]
 80134ba:	f003 0304 	and.w	r3, r3, #4
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d010      	beq.n	80134e4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	8b5b      	ldrh	r3, [r3, #26]
 80134c6:	f023 0304 	bic.w	r3, r3, #4
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2200      	movs	r2, #0
 80134e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80134f2:	10db      	asrs	r3, r3, #3
 80134f4:	b21b      	sxth	r3, r3
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80134fe:	b29b      	uxth	r3, r3
 8013500:	4413      	add	r3, r2
 8013502:	b29b      	uxth	r3, r3
 8013504:	b21a      	sxth	r2, r3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801350c:	4b18      	ldr	r3, [pc, #96]	; (8013570 <tcp_receive+0x270>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	b29a      	uxth	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013516:	b29b      	uxth	r3, r3
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2200      	movs	r2, #0
 8013520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013524:	4b12      	ldr	r3, [pc, #72]	; (8013570 <tcp_receive+0x270>)
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	7d1b      	ldrb	r3, [r3, #20]
 8013530:	2b03      	cmp	r3, #3
 8013532:	f240 8097 	bls.w	8013664 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013542:	429a      	cmp	r2, r3
 8013544:	d245      	bcs.n	80135d2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	8b5b      	ldrh	r3, [r3, #26]
 801354a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801354e:	2b00      	cmp	r3, #0
 8013550:	d014      	beq.n	801357c <tcp_receive+0x27c>
 8013552:	2301      	movs	r3, #1
 8013554:	e013      	b.n	801357e <tcp_receive+0x27e>
 8013556:	bf00      	nop
 8013558:	0801ba7c 	.word	0x0801ba7c
 801355c:	0801bdac 	.word	0x0801bdac
 8013560:	0801bac8 	.word	0x0801bac8
 8013564:	0801bdc8 	.word	0x0801bdc8
 8013568:	2000dadc 	.word	0x2000dadc
 801356c:	2000dad0 	.word	0x2000dad0
 8013570:	2000dad4 	.word	0x2000dad4
 8013574:	2000dac0 	.word	0x2000dac0
 8013578:	2000dada 	.word	0x2000dada
 801357c:	2302      	movs	r3, #2
 801357e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013582:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013586:	b29a      	uxth	r2, r3
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801358c:	fb12 f303 	smulbb	r3, r2, r3
 8013590:	b29b      	uxth	r3, r3
 8013592:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013594:	4293      	cmp	r3, r2
 8013596:	bf28      	it	cs
 8013598:	4613      	movcs	r3, r2
 801359a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135a4:	4413      	add	r3, r2
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d309      	bcc.n	80135c6 <tcp_receive+0x2c6>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135ba:	4413      	add	r3, r2
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135c4:	e04e      	b.n	8013664 <tcp_receive+0x364>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135d0:	e048      	b.n	8013664 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80135d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80135da:	4413      	add	r3, r2
 80135dc:	b29a      	uxth	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d309      	bcc.n	80135fc <tcp_receive+0x2fc>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80135ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80135f0:	4413      	add	r3, r2
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80135fa:	e004      	b.n	8013606 <tcp_receive+0x306>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013612:	429a      	cmp	r2, r3
 8013614:	d326      	bcc.n	8013664 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013622:	1ad3      	subs	r3, r2, r3
 8013624:	b29a      	uxth	r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013636:	4413      	add	r3, r2
 8013638:	b29a      	uxth	r2, r3
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013640:	429a      	cmp	r2, r3
 8013642:	d30a      	bcc.n	801365a <tcp_receive+0x35a>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801364e:	4413      	add	r3, r2
 8013650:	b29a      	uxth	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013658:	e004      	b.n	8013664 <tcp_receive+0x364>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013660:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801366c:	4a98      	ldr	r2, [pc, #608]	; (80138d0 <tcp_receive+0x5d0>)
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f7ff fdca 	bl	8013208 <tcp_free_acked_segments>
 8013674:	4602      	mov	r2, r0
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013682:	4a94      	ldr	r2, [pc, #592]	; (80138d4 <tcp_receive+0x5d4>)
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff fdbf 	bl	8013208 <tcp_free_acked_segments>
 801368a:	4602      	mov	r2, r0
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013694:	2b00      	cmp	r3, #0
 8013696:	d104      	bne.n	80136a2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801369e:	861a      	strh	r2, [r3, #48]	; 0x30
 80136a0:	e002      	b.n	80136a8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2200      	movs	r2, #0
 80136a6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2200      	movs	r2, #0
 80136ac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d103      	bne.n	80136be <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80136c4:	4b84      	ldr	r3, [pc, #528]	; (80138d8 <tcp_receive+0x5d8>)
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	4413      	add	r3, r2
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8b5b      	ldrh	r3, [r3, #26]
 80136d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d035      	beq.n	801374a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d118      	bne.n	8013718 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d00c      	beq.n	8013708 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fb f895 	bl	800e82a <lwip_htonl>
 8013700:	4603      	mov	r3, r0
 8013702:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013704:	2b00      	cmp	r3, #0
 8013706:	dc20      	bgt.n	801374a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	8b5b      	ldrh	r3, [r3, #26]
 801370c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013710:	b29a      	uxth	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013716:	e018      	b.n	801374a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	4618      	mov	r0, r3
 8013726:	f7fb f880 	bl	800e82a <lwip_htonl>
 801372a:	4603      	mov	r3, r0
 801372c:	1ae3      	subs	r3, r4, r3
 801372e:	2b00      	cmp	r3, #0
 8013730:	dc0b      	bgt.n	801374a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	8b5b      	ldrh	r3, [r3, #26]
 8013736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801373a:	b29a      	uxth	r2, r3
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013740:	e003      	b.n	801374a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f001 ff76 	bl	8015634 <tcp_send_empty_ack>
 8013748:	e000      	b.n	801374c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801374a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013750:	2b00      	cmp	r3, #0
 8013752:	d05b      	beq.n	801380c <tcp_receive+0x50c>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013758:	4b60      	ldr	r3, [pc, #384]	; (80138dc <tcp_receive+0x5dc>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	1ad3      	subs	r3, r2, r3
 801375e:	2b00      	cmp	r3, #0
 8013760:	da54      	bge.n	801380c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013762:	4b5f      	ldr	r3, [pc, #380]	; (80138e0 <tcp_receive+0x5e0>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	b29a      	uxth	r2, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801376c:	b29b      	uxth	r3, r3
 801376e:	1ad3      	subs	r3, r2, r3
 8013770:	b29b      	uxth	r3, r3
 8013772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013776:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013780:	10db      	asrs	r3, r3, #3
 8013782:	b21b      	sxth	r3, r3
 8013784:	b29b      	uxth	r3, r3
 8013786:	1ad3      	subs	r3, r2, r3
 8013788:	b29b      	uxth	r3, r3
 801378a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013794:	b29a      	uxth	r2, r3
 8013796:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801379a:	4413      	add	r3, r2
 801379c:	b29b      	uxth	r3, r3
 801379e:	b21a      	sxth	r2, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80137a4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	da05      	bge.n	80137b8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80137ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80137b0:	425b      	negs	r3, r3
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80137b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137c2:	109b      	asrs	r3, r3, #2
 80137c4:	b21b      	sxth	r3, r3
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	1ad3      	subs	r3, r2, r3
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80137dc:	4413      	add	r3, r2
 80137de:	b29b      	uxth	r3, r3
 80137e0:	b21a      	sxth	r2, r3
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137ec:	10db      	asrs	r3, r3, #3
 80137ee:	b21b      	sxth	r3, r3
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	4413      	add	r3, r2
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	b21a      	sxth	r2, r3
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2200      	movs	r2, #0
 801380a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801380c:	4b35      	ldr	r3, [pc, #212]	; (80138e4 <tcp_receive+0x5e4>)
 801380e:	881b      	ldrh	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	f000 84e2 	beq.w	80141da <tcp_receive+0xeda>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	7d1b      	ldrb	r3, [r3, #20]
 801381a:	2b06      	cmp	r3, #6
 801381c:	f200 84dd 	bhi.w	80141da <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013824:	4b30      	ldr	r3, [pc, #192]	; (80138e8 <tcp_receive+0x5e8>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	1ad3      	subs	r3, r2, r3
 801382a:	3b01      	subs	r3, #1
 801382c:	2b00      	cmp	r3, #0
 801382e:	f2c0 808f 	blt.w	8013950 <tcp_receive+0x650>
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013836:	4b2b      	ldr	r3, [pc, #172]	; (80138e4 <tcp_receive+0x5e4>)
 8013838:	881b      	ldrh	r3, [r3, #0]
 801383a:	4619      	mov	r1, r3
 801383c:	4b2a      	ldr	r3, [pc, #168]	; (80138e8 <tcp_receive+0x5e8>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	440b      	add	r3, r1
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	3301      	adds	r3, #1
 8013846:	2b00      	cmp	r3, #0
 8013848:	f300 8082 	bgt.w	8013950 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801384c:	4b27      	ldr	r3, [pc, #156]	; (80138ec <tcp_receive+0x5ec>)
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013856:	4b24      	ldr	r3, [pc, #144]	; (80138e8 <tcp_receive+0x5e8>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801385e:	4b23      	ldr	r3, [pc, #140]	; (80138ec <tcp_receive+0x5ec>)
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d106      	bne.n	8013874 <tcp_receive+0x574>
 8013866:	4b22      	ldr	r3, [pc, #136]	; (80138f0 <tcp_receive+0x5f0>)
 8013868:	f240 5294 	movw	r2, #1428	; 0x594
 801386c:	4921      	ldr	r1, [pc, #132]	; (80138f4 <tcp_receive+0x5f4>)
 801386e:	4822      	ldr	r0, [pc, #136]	; (80138f8 <tcp_receive+0x5f8>)
 8013870:	f005 fcaa 	bl	80191c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013876:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801387a:	4293      	cmp	r3, r2
 801387c:	d906      	bls.n	801388c <tcp_receive+0x58c>
 801387e:	4b1c      	ldr	r3, [pc, #112]	; (80138f0 <tcp_receive+0x5f0>)
 8013880:	f240 5295 	movw	r2, #1429	; 0x595
 8013884:	491d      	ldr	r1, [pc, #116]	; (80138fc <tcp_receive+0x5fc>)
 8013886:	481c      	ldr	r0, [pc, #112]	; (80138f8 <tcp_receive+0x5f8>)
 8013888:	f005 fc9e 	bl	80191c8 <iprintf>
      off = (u16_t)off32;
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013892:	4b16      	ldr	r3, [pc, #88]	; (80138ec <tcp_receive+0x5ec>)
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	891b      	ldrh	r3, [r3, #8]
 8013898:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801389c:	429a      	cmp	r2, r3
 801389e:	d906      	bls.n	80138ae <tcp_receive+0x5ae>
 80138a0:	4b13      	ldr	r3, [pc, #76]	; (80138f0 <tcp_receive+0x5f0>)
 80138a2:	f240 5297 	movw	r2, #1431	; 0x597
 80138a6:	4916      	ldr	r1, [pc, #88]	; (8013900 <tcp_receive+0x600>)
 80138a8:	4813      	ldr	r0, [pc, #76]	; (80138f8 <tcp_receive+0x5f8>)
 80138aa:	f005 fc8d 	bl	80191c8 <iprintf>
      inseg.len -= off;
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <tcp_receive+0x5ec>)
 80138b0:	891a      	ldrh	r2, [r3, #8]
 80138b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138b6:	1ad3      	subs	r3, r2, r3
 80138b8:	b29a      	uxth	r2, r3
 80138ba:	4b0c      	ldr	r3, [pc, #48]	; (80138ec <tcp_receive+0x5ec>)
 80138bc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80138be:	4b0b      	ldr	r3, [pc, #44]	; (80138ec <tcp_receive+0x5ec>)
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	891a      	ldrh	r2, [r3, #8]
 80138c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138c8:	1ad3      	subs	r3, r2, r3
 80138ca:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80138cc:	e02a      	b.n	8013924 <tcp_receive+0x624>
 80138ce:	bf00      	nop
 80138d0:	0801bde4 	.word	0x0801bde4
 80138d4:	0801bdec 	.word	0x0801bdec
 80138d8:	2000dad8 	.word	0x2000dad8
 80138dc:	2000dad4 	.word	0x2000dad4
 80138e0:	2000da98 	.word	0x2000da98
 80138e4:	2000dada 	.word	0x2000dada
 80138e8:	2000dad0 	.word	0x2000dad0
 80138ec:	2000dab0 	.word	0x2000dab0
 80138f0:	0801ba7c 	.word	0x0801ba7c
 80138f4:	0801bdf4 	.word	0x0801bdf4
 80138f8:	0801bac8 	.word	0x0801bac8
 80138fc:	0801be04 	.word	0x0801be04
 8013900:	0801be14 	.word	0x0801be14
        off -= p->len;
 8013904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013906:	895b      	ldrh	r3, [r3, #10]
 8013908:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801390c:	1ad3      	subs	r3, r2, r3
 801390e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013914:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013916:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801391a:	2200      	movs	r2, #0
 801391c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801391e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013926:	895b      	ldrh	r3, [r3, #10]
 8013928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801392c:	429a      	cmp	r2, r3
 801392e:	d8e9      	bhi.n	8013904 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013930:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013934:	4619      	mov	r1, r3
 8013936:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013938:	f7fc face 	bl	800fed8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013940:	4a91      	ldr	r2, [pc, #580]	; (8013b88 <tcp_receive+0x888>)
 8013942:	6013      	str	r3, [r2, #0]
 8013944:	4b91      	ldr	r3, [pc, #580]	; (8013b8c <tcp_receive+0x88c>)
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	4a8f      	ldr	r2, [pc, #572]	; (8013b88 <tcp_receive+0x888>)
 801394a:	6812      	ldr	r2, [r2, #0]
 801394c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801394e:	e00d      	b.n	801396c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013950:	4b8d      	ldr	r3, [pc, #564]	; (8013b88 <tcp_receive+0x888>)
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	2b00      	cmp	r3, #0
 801395c:	da06      	bge.n	801396c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	8b5b      	ldrh	r3, [r3, #26]
 8013962:	f043 0302 	orr.w	r3, r3, #2
 8013966:	b29a      	uxth	r2, r3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801396c:	4b86      	ldr	r3, [pc, #536]	; (8013b88 <tcp_receive+0x888>)
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013974:	1ad3      	subs	r3, r2, r3
 8013976:	2b00      	cmp	r3, #0
 8013978:	f2c0 842a 	blt.w	80141d0 <tcp_receive+0xed0>
 801397c:	4b82      	ldr	r3, [pc, #520]	; (8013b88 <tcp_receive+0x888>)
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013984:	6879      	ldr	r1, [r7, #4]
 8013986:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013988:	440b      	add	r3, r1
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	3301      	adds	r3, #1
 801398e:	2b00      	cmp	r3, #0
 8013990:	f300 841e 	bgt.w	80141d0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013998:	4b7b      	ldr	r3, [pc, #492]	; (8013b88 <tcp_receive+0x888>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	429a      	cmp	r2, r3
 801399e:	f040 829a 	bne.w	8013ed6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80139a2:	4b7a      	ldr	r3, [pc, #488]	; (8013b8c <tcp_receive+0x88c>)
 80139a4:	891c      	ldrh	r4, [r3, #8]
 80139a6:	4b79      	ldr	r3, [pc, #484]	; (8013b8c <tcp_receive+0x88c>)
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	899b      	ldrh	r3, [r3, #12]
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fa ff26 	bl	800e800 <lwip_htons>
 80139b4:	4603      	mov	r3, r0
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	f003 0303 	and.w	r3, r3, #3
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d001      	beq.n	80139c4 <tcp_receive+0x6c4>
 80139c0:	2301      	movs	r3, #1
 80139c2:	e000      	b.n	80139c6 <tcp_receive+0x6c6>
 80139c4:	2300      	movs	r3, #0
 80139c6:	4423      	add	r3, r4
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	4b71      	ldr	r3, [pc, #452]	; (8013b90 <tcp_receive+0x890>)
 80139cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80139d2:	4b6f      	ldr	r3, [pc, #444]	; (8013b90 <tcp_receive+0x890>)
 80139d4:	881b      	ldrh	r3, [r3, #0]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d275      	bcs.n	8013ac6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80139da:	4b6c      	ldr	r3, [pc, #432]	; (8013b8c <tcp_receive+0x88c>)
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	899b      	ldrh	r3, [r3, #12]
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fa ff0c 	bl	800e800 <lwip_htons>
 80139e8:	4603      	mov	r3, r0
 80139ea:	b2db      	uxtb	r3, r3
 80139ec:	f003 0301 	and.w	r3, r3, #1
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d01f      	beq.n	8013a34 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80139f4:	4b65      	ldr	r3, [pc, #404]	; (8013b8c <tcp_receive+0x88c>)
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	899b      	ldrh	r3, [r3, #12]
 80139fa:	b29b      	uxth	r3, r3
 80139fc:	b21b      	sxth	r3, r3
 80139fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a02:	b21c      	sxth	r4, r3
 8013a04:	4b61      	ldr	r3, [pc, #388]	; (8013b8c <tcp_receive+0x88c>)
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	899b      	ldrh	r3, [r3, #12]
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fa fef7 	bl	800e800 <lwip_htons>
 8013a12:	4603      	mov	r3, r0
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fa feee 	bl	800e800 <lwip_htons>
 8013a24:	4603      	mov	r3, r0
 8013a26:	b21b      	sxth	r3, r3
 8013a28:	4323      	orrs	r3, r4
 8013a2a:	b21a      	sxth	r2, r3
 8013a2c:	4b57      	ldr	r3, [pc, #348]	; (8013b8c <tcp_receive+0x88c>)
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	b292      	uxth	r2, r2
 8013a32:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a38:	4b54      	ldr	r3, [pc, #336]	; (8013b8c <tcp_receive+0x88c>)
 8013a3a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013a3c:	4b53      	ldr	r3, [pc, #332]	; (8013b8c <tcp_receive+0x88c>)
 8013a3e:	68db      	ldr	r3, [r3, #12]
 8013a40:	899b      	ldrh	r3, [r3, #12]
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7fa fedb 	bl	800e800 <lwip_htons>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	f003 0302 	and.w	r3, r3, #2
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d005      	beq.n	8013a62 <tcp_receive+0x762>
            inseg.len -= 1;
 8013a56:	4b4d      	ldr	r3, [pc, #308]	; (8013b8c <tcp_receive+0x88c>)
 8013a58:	891b      	ldrh	r3, [r3, #8]
 8013a5a:	3b01      	subs	r3, #1
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	4b4b      	ldr	r3, [pc, #300]	; (8013b8c <tcp_receive+0x88c>)
 8013a60:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013a62:	4b4a      	ldr	r3, [pc, #296]	; (8013b8c <tcp_receive+0x88c>)
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	4a49      	ldr	r2, [pc, #292]	; (8013b8c <tcp_receive+0x88c>)
 8013a68:	8912      	ldrh	r2, [r2, #8]
 8013a6a:	4611      	mov	r1, r2
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7fc f933 	bl	800fcd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013a72:	4b46      	ldr	r3, [pc, #280]	; (8013b8c <tcp_receive+0x88c>)
 8013a74:	891c      	ldrh	r4, [r3, #8]
 8013a76:	4b45      	ldr	r3, [pc, #276]	; (8013b8c <tcp_receive+0x88c>)
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	899b      	ldrh	r3, [r3, #12]
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7fa febe 	bl	800e800 <lwip_htons>
 8013a84:	4603      	mov	r3, r0
 8013a86:	b2db      	uxtb	r3, r3
 8013a88:	f003 0303 	and.w	r3, r3, #3
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <tcp_receive+0x794>
 8013a90:	2301      	movs	r3, #1
 8013a92:	e000      	b.n	8013a96 <tcp_receive+0x796>
 8013a94:	2300      	movs	r3, #0
 8013a96:	4423      	add	r3, r4
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	4b3d      	ldr	r3, [pc, #244]	; (8013b90 <tcp_receive+0x890>)
 8013a9c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013a9e:	4b3c      	ldr	r3, [pc, #240]	; (8013b90 <tcp_receive+0x890>)
 8013aa0:	881b      	ldrh	r3, [r3, #0]
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	4b38      	ldr	r3, [pc, #224]	; (8013b88 <tcp_receive+0x888>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	441a      	add	r2, r3
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aae:	6879      	ldr	r1, [r7, #4]
 8013ab0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013ab2:	440b      	add	r3, r1
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d006      	beq.n	8013ac6 <tcp_receive+0x7c6>
 8013ab8:	4b36      	ldr	r3, [pc, #216]	; (8013b94 <tcp_receive+0x894>)
 8013aba:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013abe:	4936      	ldr	r1, [pc, #216]	; (8013b98 <tcp_receive+0x898>)
 8013ac0:	4836      	ldr	r0, [pc, #216]	; (8013b9c <tcp_receive+0x89c>)
 8013ac2:	f005 fb81 	bl	80191c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f000 80e7 	beq.w	8013c9e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013ad0:	4b2e      	ldr	r3, [pc, #184]	; (8013b8c <tcp_receive+0x88c>)
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	899b      	ldrh	r3, [r3, #12]
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7fa fe91 	bl	800e800 <lwip_htons>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	f003 0301 	and.w	r3, r3, #1
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d010      	beq.n	8013b0c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013aea:	e00a      	b.n	8013b02 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013af0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f7fd fd92 	bl	8011626 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d1f0      	bne.n	8013aec <tcp_receive+0x7ec>
 8013b0a:	e0c8      	b.n	8013c9e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b10:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013b12:	e052      	b.n	8013bba <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	899b      	ldrh	r3, [r3, #12]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fa fe6f 	bl	800e800 <lwip_htons>
 8013b22:	4603      	mov	r3, r0
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	f003 0301 	and.w	r3, r3, #1
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d03d      	beq.n	8013baa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013b2e:	4b17      	ldr	r3, [pc, #92]	; (8013b8c <tcp_receive+0x88c>)
 8013b30:	68db      	ldr	r3, [r3, #12]
 8013b32:	899b      	ldrh	r3, [r3, #12]
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fa fe62 	bl	800e800 <lwip_htons>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d130      	bne.n	8013baa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013b48:	4b10      	ldr	r3, [pc, #64]	; (8013b8c <tcp_receive+0x88c>)
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	899b      	ldrh	r3, [r3, #12]
 8013b4e:	b29c      	uxth	r4, r3
 8013b50:	2001      	movs	r0, #1
 8013b52:	f7fa fe55 	bl	800e800 <lwip_htons>
 8013b56:	4603      	mov	r3, r0
 8013b58:	461a      	mov	r2, r3
 8013b5a:	4b0c      	ldr	r3, [pc, #48]	; (8013b8c <tcp_receive+0x88c>)
 8013b5c:	68db      	ldr	r3, [r3, #12]
 8013b5e:	4322      	orrs	r2, r4
 8013b60:	b292      	uxth	r2, r2
 8013b62:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013b64:	4b09      	ldr	r3, [pc, #36]	; (8013b8c <tcp_receive+0x88c>)
 8013b66:	891c      	ldrh	r4, [r3, #8]
 8013b68:	4b08      	ldr	r3, [pc, #32]	; (8013b8c <tcp_receive+0x88c>)
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	899b      	ldrh	r3, [r3, #12]
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fa fe45 	bl	800e800 <lwip_htons>
 8013b76:	4603      	mov	r3, r0
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	f003 0303 	and.w	r3, r3, #3
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d00e      	beq.n	8013ba0 <tcp_receive+0x8a0>
 8013b82:	2301      	movs	r3, #1
 8013b84:	e00d      	b.n	8013ba2 <tcp_receive+0x8a2>
 8013b86:	bf00      	nop
 8013b88:	2000dad0 	.word	0x2000dad0
 8013b8c:	2000dab0 	.word	0x2000dab0
 8013b90:	2000dada 	.word	0x2000dada
 8013b94:	0801ba7c 	.word	0x0801ba7c
 8013b98:	0801be24 	.word	0x0801be24
 8013b9c:	0801bac8 	.word	0x0801bac8
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	4423      	add	r3, r4
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	4b98      	ldr	r3, [pc, #608]	; (8013e08 <tcp_receive+0xb08>)
 8013ba8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bac:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013bb4:	6938      	ldr	r0, [r7, #16]
 8013bb6:	f7fd fd36 	bl	8011626 <tcp_seg_free>
            while (next &&
 8013bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d00e      	beq.n	8013bde <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013bc0:	4b91      	ldr	r3, [pc, #580]	; (8013e08 <tcp_receive+0xb08>)
 8013bc2:	881b      	ldrh	r3, [r3, #0]
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	4b91      	ldr	r3, [pc, #580]	; (8013e0c <tcp_receive+0xb0c>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	441a      	add	r2, r3
 8013bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013bd4:	8909      	ldrh	r1, [r1, #8]
 8013bd6:	440b      	add	r3, r1
 8013bd8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	da9a      	bge.n	8013b14 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d059      	beq.n	8013c98 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013be4:	4b88      	ldr	r3, [pc, #544]	; (8013e08 <tcp_receive+0xb08>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	461a      	mov	r2, r3
 8013bea:	4b88      	ldr	r3, [pc, #544]	; (8013e0c <tcp_receive+0xb0c>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	441a      	add	r2, r3
 8013bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	dd4d      	ble.n	8013c98 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bfe:	68db      	ldr	r3, [r3, #12]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	4b81      	ldr	r3, [pc, #516]	; (8013e0c <tcp_receive+0xb0c>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	1ad3      	subs	r3, r2, r3
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	4b80      	ldr	r3, [pc, #512]	; (8013e10 <tcp_receive+0xb10>)
 8013c10:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013c12:	4b7f      	ldr	r3, [pc, #508]	; (8013e10 <tcp_receive+0xb10>)
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	899b      	ldrh	r3, [r3, #12]
 8013c18:	b29b      	uxth	r3, r3
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fa fdf0 	bl	800e800 <lwip_htons>
 8013c20:	4603      	mov	r3, r0
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	f003 0302 	and.w	r3, r3, #2
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d005      	beq.n	8013c38 <tcp_receive+0x938>
                inseg.len -= 1;
 8013c2c:	4b78      	ldr	r3, [pc, #480]	; (8013e10 <tcp_receive+0xb10>)
 8013c2e:	891b      	ldrh	r3, [r3, #8]
 8013c30:	3b01      	subs	r3, #1
 8013c32:	b29a      	uxth	r2, r3
 8013c34:	4b76      	ldr	r3, [pc, #472]	; (8013e10 <tcp_receive+0xb10>)
 8013c36:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013c38:	4b75      	ldr	r3, [pc, #468]	; (8013e10 <tcp_receive+0xb10>)
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	4a74      	ldr	r2, [pc, #464]	; (8013e10 <tcp_receive+0xb10>)
 8013c3e:	8912      	ldrh	r2, [r2, #8]
 8013c40:	4611      	mov	r1, r2
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fc f848 	bl	800fcd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013c48:	4b71      	ldr	r3, [pc, #452]	; (8013e10 <tcp_receive+0xb10>)
 8013c4a:	891c      	ldrh	r4, [r3, #8]
 8013c4c:	4b70      	ldr	r3, [pc, #448]	; (8013e10 <tcp_receive+0xb10>)
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	899b      	ldrh	r3, [r3, #12]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fa fdd3 	bl	800e800 <lwip_htons>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	f003 0303 	and.w	r3, r3, #3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d001      	beq.n	8013c6a <tcp_receive+0x96a>
 8013c66:	2301      	movs	r3, #1
 8013c68:	e000      	b.n	8013c6c <tcp_receive+0x96c>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	4423      	add	r3, r4
 8013c6e:	b29a      	uxth	r2, r3
 8013c70:	4b65      	ldr	r3, [pc, #404]	; (8013e08 <tcp_receive+0xb08>)
 8013c72:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013c74:	4b64      	ldr	r3, [pc, #400]	; (8013e08 <tcp_receive+0xb08>)
 8013c76:	881b      	ldrh	r3, [r3, #0]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	4b64      	ldr	r3, [pc, #400]	; (8013e0c <tcp_receive+0xb0c>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	441a      	add	r2, r3
 8013c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d006      	beq.n	8013c98 <tcp_receive+0x998>
 8013c8a:	4b62      	ldr	r3, [pc, #392]	; (8013e14 <tcp_receive+0xb14>)
 8013c8c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013c90:	4961      	ldr	r1, [pc, #388]	; (8013e18 <tcp_receive+0xb18>)
 8013c92:	4862      	ldr	r0, [pc, #392]	; (8013e1c <tcp_receive+0xb1c>)
 8013c94:	f005 fa98 	bl	80191c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c9c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013c9e:	4b5a      	ldr	r3, [pc, #360]	; (8013e08 <tcp_receive+0xb08>)
 8013ca0:	881b      	ldrh	r3, [r3, #0]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	4b59      	ldr	r3, [pc, #356]	; (8013e0c <tcp_receive+0xb0c>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	441a      	add	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cb2:	4b55      	ldr	r3, [pc, #340]	; (8013e08 <tcp_receive+0xb08>)
 8013cb4:	881b      	ldrh	r3, [r3, #0]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d206      	bcs.n	8013cc8 <tcp_receive+0x9c8>
 8013cba:	4b56      	ldr	r3, [pc, #344]	; (8013e14 <tcp_receive+0xb14>)
 8013cbc:	f240 6207 	movw	r2, #1543	; 0x607
 8013cc0:	4957      	ldr	r1, [pc, #348]	; (8013e20 <tcp_receive+0xb20>)
 8013cc2:	4856      	ldr	r0, [pc, #344]	; (8013e1c <tcp_receive+0xb1c>)
 8013cc4:	f005 fa80 	bl	80191c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ccc:	4b4e      	ldr	r3, [pc, #312]	; (8013e08 <tcp_receive+0xb08>)
 8013cce:	881b      	ldrh	r3, [r3, #0]
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7fc ffc5 	bl	8010c68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013cde:	4b4c      	ldr	r3, [pc, #304]	; (8013e10 <tcp_receive+0xb10>)
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	891b      	ldrh	r3, [r3, #8]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d006      	beq.n	8013cf6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013ce8:	4b49      	ldr	r3, [pc, #292]	; (8013e10 <tcp_receive+0xb10>)
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	4a4d      	ldr	r2, [pc, #308]	; (8013e24 <tcp_receive+0xb24>)
 8013cee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013cf0:	4b47      	ldr	r3, [pc, #284]	; (8013e10 <tcp_receive+0xb10>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013cf6:	4b46      	ldr	r3, [pc, #280]	; (8013e10 <tcp_receive+0xb10>)
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	899b      	ldrh	r3, [r3, #12]
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7fa fd7e 	bl	800e800 <lwip_htons>
 8013d04:	4603      	mov	r3, r0
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	f003 0301 	and.w	r3, r3, #1
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f000 80b8 	beq.w	8013e82 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013d12:	4b45      	ldr	r3, [pc, #276]	; (8013e28 <tcp_receive+0xb28>)
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	f043 0320 	orr.w	r3, r3, #32
 8013d1a:	b2da      	uxtb	r2, r3
 8013d1c:	4b42      	ldr	r3, [pc, #264]	; (8013e28 <tcp_receive+0xb28>)
 8013d1e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013d20:	e0af      	b.n	8013e82 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d26:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	4a36      	ldr	r2, [pc, #216]	; (8013e0c <tcp_receive+0xb0c>)
 8013d32:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	891b      	ldrh	r3, [r3, #8]
 8013d38:	461c      	mov	r4, r3
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	899b      	ldrh	r3, [r3, #12]
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fa fd5c 	bl	800e800 <lwip_htons>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	f003 0303 	and.w	r3, r3, #3
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d001      	beq.n	8013d58 <tcp_receive+0xa58>
 8013d54:	2301      	movs	r3, #1
 8013d56:	e000      	b.n	8013d5a <tcp_receive+0xa5a>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	191a      	adds	r2, r3, r4
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d60:	441a      	add	r2, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d6a:	461c      	mov	r4, r3
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	891b      	ldrh	r3, [r3, #8]
 8013d70:	461d      	mov	r5, r3
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	68db      	ldr	r3, [r3, #12]
 8013d76:	899b      	ldrh	r3, [r3, #12]
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7fa fd40 	bl	800e800 <lwip_htons>
 8013d80:	4603      	mov	r3, r0
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	f003 0303 	and.w	r3, r3, #3
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d001      	beq.n	8013d90 <tcp_receive+0xa90>
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	e000      	b.n	8013d92 <tcp_receive+0xa92>
 8013d90:	2300      	movs	r3, #0
 8013d92:	442b      	add	r3, r5
 8013d94:	429c      	cmp	r4, r3
 8013d96:	d206      	bcs.n	8013da6 <tcp_receive+0xaa6>
 8013d98:	4b1e      	ldr	r3, [pc, #120]	; (8013e14 <tcp_receive+0xb14>)
 8013d9a:	f240 622b 	movw	r2, #1579	; 0x62b
 8013d9e:	4923      	ldr	r1, [pc, #140]	; (8013e2c <tcp_receive+0xb2c>)
 8013da0:	481e      	ldr	r0, [pc, #120]	; (8013e1c <tcp_receive+0xb1c>)
 8013da2:	f005 fa11 	bl	80191c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	891b      	ldrh	r3, [r3, #8]
 8013daa:	461c      	mov	r4, r3
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	899b      	ldrh	r3, [r3, #12]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fa fd23 	bl	800e800 <lwip_htons>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	f003 0303 	and.w	r3, r3, #3
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d001      	beq.n	8013dca <tcp_receive+0xaca>
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	e000      	b.n	8013dcc <tcp_receive+0xacc>
 8013dca:	2300      	movs	r3, #0
 8013dcc:	1919      	adds	r1, r3, r4
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013dd2:	b28b      	uxth	r3, r1
 8013dd4:	1ad3      	subs	r3, r2, r3
 8013dd6:	b29a      	uxth	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7fc ff43 	bl	8010c68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	891b      	ldrh	r3, [r3, #8]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d028      	beq.n	8013e3e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013dec:	4b0d      	ldr	r3, [pc, #52]	; (8013e24 <tcp_receive+0xb24>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d01d      	beq.n	8013e30 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013df4:	4b0b      	ldr	r3, [pc, #44]	; (8013e24 <tcp_receive+0xb24>)
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	4610      	mov	r0, r2
 8013e00:	f7fc f9be 	bl	8010180 <pbuf_cat>
 8013e04:	e018      	b.n	8013e38 <tcp_receive+0xb38>
 8013e06:	bf00      	nop
 8013e08:	2000dada 	.word	0x2000dada
 8013e0c:	2000dad0 	.word	0x2000dad0
 8013e10:	2000dab0 	.word	0x2000dab0
 8013e14:	0801ba7c 	.word	0x0801ba7c
 8013e18:	0801be5c 	.word	0x0801be5c
 8013e1c:	0801bac8 	.word	0x0801bac8
 8013e20:	0801be98 	.word	0x0801be98
 8013e24:	2000dae0 	.word	0x2000dae0
 8013e28:	2000dadd 	.word	0x2000dadd
 8013e2c:	0801beb8 	.word	0x0801beb8
            } else {
              recv_data = cseg->p;
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	4a70      	ldr	r2, [pc, #448]	; (8013ff8 <tcp_receive+0xcf8>)
 8013e36:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	68db      	ldr	r3, [r3, #12]
 8013e42:	899b      	ldrh	r3, [r3, #12]
 8013e44:	b29b      	uxth	r3, r3
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fa fcda 	bl	800e800 <lwip_htons>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	b2db      	uxtb	r3, r3
 8013e50:	f003 0301 	and.w	r3, r3, #1
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00d      	beq.n	8013e74 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013e58:	4b68      	ldr	r3, [pc, #416]	; (8013ffc <tcp_receive+0xcfc>)
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	f043 0320 	orr.w	r3, r3, #32
 8013e60:	b2da      	uxtb	r2, r3
 8013e62:	4b66      	ldr	r3, [pc, #408]	; (8013ffc <tcp_receive+0xcfc>)
 8013e64:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	7d1b      	ldrb	r3, [r3, #20]
 8013e6a:	2b04      	cmp	r3, #4
 8013e6c:	d102      	bne.n	8013e74 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2207      	movs	r2, #7
 8013e72:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013e7c:	68b8      	ldr	r0, [r7, #8]
 8013e7e:	f7fd fbd2 	bl	8011626 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d008      	beq.n	8013e9c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	685a      	ldr	r2, [r3, #4]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013e96:	429a      	cmp	r2, r3
 8013e98:	f43f af43 	beq.w	8013d22 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ea0:	f003 0301 	and.w	r3, r3, #1
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d00e      	beq.n	8013ec6 <tcp_receive+0xbc6>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	8b5b      	ldrh	r3, [r3, #26]
 8013eac:	f023 0301 	bic.w	r3, r3, #1
 8013eb0:	b29a      	uxth	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	835a      	strh	r2, [r3, #26]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	8b5b      	ldrh	r3, [r3, #26]
 8013eba:	f043 0302 	orr.w	r3, r3, #2
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013ec4:	e188      	b.n	80141d8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	8b5b      	ldrh	r3, [r3, #26]
 8013eca:	f043 0301 	orr.w	r3, r3, #1
 8013ece:	b29a      	uxth	r2, r3
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013ed4:	e180      	b.n	80141d8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d106      	bne.n	8013eec <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013ede:	4848      	ldr	r0, [pc, #288]	; (8014000 <tcp_receive+0xd00>)
 8013ee0:	f7fd fbba 	bl	8011658 <tcp_seg_copy>
 8013ee4:	4602      	mov	r2, r0
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	675a      	str	r2, [r3, #116]	; 0x74
 8013eea:	e16d      	b.n	80141c8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013eec:	2300      	movs	r3, #0
 8013eee:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ef6:	e157      	b.n	80141a8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	685a      	ldr	r2, [r3, #4]
 8013efe:	4b41      	ldr	r3, [pc, #260]	; (8014004 <tcp_receive+0xd04>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d11d      	bne.n	8013f42 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013f06:	4b3e      	ldr	r3, [pc, #248]	; (8014000 <tcp_receive+0xd00>)
 8013f08:	891a      	ldrh	r2, [r3, #8]
 8013f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0c:	891b      	ldrh	r3, [r3, #8]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	f240 814f 	bls.w	80141b2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013f14:	483a      	ldr	r0, [pc, #232]	; (8014000 <tcp_receive+0xd00>)
 8013f16:	f7fd fb9f 	bl	8011658 <tcp_seg_copy>
 8013f1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	f000 8149 	beq.w	80141b6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d003      	beq.n	8013f32 <tcp_receive+0xc32>
                    prev->next = cseg;
 8013f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f2c:	697a      	ldr	r2, [r7, #20]
 8013f2e:	601a      	str	r2, [r3, #0]
 8013f30:	e002      	b.n	8013f38 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	697a      	ldr	r2, [r7, #20]
 8013f36:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f3a:	6978      	ldr	r0, [r7, #20]
 8013f3c:	f7ff f8dc 	bl	80130f8 <tcp_oos_insert_segment>
                }
                break;
 8013f40:	e139      	b.n	80141b6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d117      	bne.n	8013f78 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013f48:	4b2e      	ldr	r3, [pc, #184]	; (8014004 <tcp_receive+0xd04>)
 8013f4a:	681a      	ldr	r2, [r3, #0]
 8013f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	1ad3      	subs	r3, r2, r3
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	da57      	bge.n	8014008 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013f58:	4829      	ldr	r0, [pc, #164]	; (8014000 <tcp_receive+0xd00>)
 8013f5a:	f7fd fb7d 	bl	8011658 <tcp_seg_copy>
 8013f5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013f60:	69bb      	ldr	r3, [r7, #24]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f000 8129 	beq.w	80141ba <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	69ba      	ldr	r2, [r7, #24]
 8013f6c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f70:	69b8      	ldr	r0, [r7, #24]
 8013f72:	f7ff f8c1 	bl	80130f8 <tcp_oos_insert_segment>
                  }
                  break;
 8013f76:	e120      	b.n	80141ba <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013f78:	4b22      	ldr	r3, [pc, #136]	; (8014004 <tcp_receive+0xd04>)
 8013f7a:	681a      	ldr	r2, [r3, #0]
 8013f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	3b01      	subs	r3, #1
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	db3e      	blt.n	8014008 <tcp_receive+0xd08>
 8013f8a:	4b1e      	ldr	r3, [pc, #120]	; (8014004 <tcp_receive+0xd04>)
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	1ad3      	subs	r3, r2, r3
 8013f96:	3301      	adds	r3, #1
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	dc35      	bgt.n	8014008 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013f9c:	4818      	ldr	r0, [pc, #96]	; (8014000 <tcp_receive+0xd00>)
 8013f9e:	f7fd fb5b 	bl	8011658 <tcp_seg_copy>
 8013fa2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f000 8109 	beq.w	80141be <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fae:	68db      	ldr	r3, [r3, #12]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fb4:	8912      	ldrh	r2, [r2, #8]
 8013fb6:	441a      	add	r2, r3
 8013fb8:	4b12      	ldr	r3, [pc, #72]	; (8014004 <tcp_receive+0xd04>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	1ad3      	subs	r3, r2, r3
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	dd12      	ble.n	8013fe8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013fc2:	4b10      	ldr	r3, [pc, #64]	; (8014004 <tcp_receive+0xd04>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fda:	685a      	ldr	r2, [r3, #4]
 8013fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fde:	891b      	ldrh	r3, [r3, #8]
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	4610      	mov	r0, r2
 8013fe4:	f7fb fe78 	bl	800fcd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fea:	69fa      	ldr	r2, [r7, #28]
 8013fec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ff0:	69f8      	ldr	r0, [r7, #28]
 8013ff2:	f7ff f881 	bl	80130f8 <tcp_oos_insert_segment>
                  }
                  break;
 8013ff6:	e0e2      	b.n	80141be <tcp_receive+0xebe>
 8013ff8:	2000dae0 	.word	0x2000dae0
 8013ffc:	2000dadd 	.word	0x2000dadd
 8014000:	2000dab0 	.word	0x2000dab0
 8014004:	2000dad0 	.word	0x2000dad0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	f040 80c6 	bne.w	80141a2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014016:	4b80      	ldr	r3, [pc, #512]	; (8014218 <tcp_receive+0xf18>)
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401c:	68db      	ldr	r3, [r3, #12]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014022:	2b00      	cmp	r3, #0
 8014024:	f340 80bd 	ble.w	80141a2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	899b      	ldrh	r3, [r3, #12]
 801402e:	b29b      	uxth	r3, r3
 8014030:	4618      	mov	r0, r3
 8014032:	f7fa fbe5 	bl	800e800 <lwip_htons>
 8014036:	4603      	mov	r3, r0
 8014038:	b2db      	uxtb	r3, r3
 801403a:	f003 0301 	and.w	r3, r3, #1
 801403e:	2b00      	cmp	r3, #0
 8014040:	f040 80bf 	bne.w	80141c2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014044:	4875      	ldr	r0, [pc, #468]	; (801421c <tcp_receive+0xf1c>)
 8014046:	f7fd fb07 	bl	8011658 <tcp_seg_copy>
 801404a:	4602      	mov	r2, r0
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	f000 80b6 	beq.w	80141c6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014062:	8912      	ldrh	r2, [r2, #8]
 8014064:	441a      	add	r2, r3
 8014066:	4b6c      	ldr	r3, [pc, #432]	; (8014218 <tcp_receive+0xf18>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	1ad3      	subs	r3, r2, r3
 801406c:	2b00      	cmp	r3, #0
 801406e:	dd12      	ble.n	8014096 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014070:	4b69      	ldr	r3, [pc, #420]	; (8014218 <tcp_receive+0xf18>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	b29a      	uxth	r2, r3
 8014076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	b29b      	uxth	r3, r3
 801407e:	1ad3      	subs	r3, r2, r3
 8014080:	b29a      	uxth	r2, r3
 8014082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014084:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014088:	685a      	ldr	r2, [r3, #4]
 801408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408c:	891b      	ldrh	r3, [r3, #8]
 801408e:	4619      	mov	r1, r3
 8014090:	4610      	mov	r0, r2
 8014092:	f7fb fe21 	bl	800fcd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014096:	4b62      	ldr	r3, [pc, #392]	; (8014220 <tcp_receive+0xf20>)
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	461a      	mov	r2, r3
 801409c:	4b5e      	ldr	r3, [pc, #376]	; (8014218 <tcp_receive+0xf18>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	441a      	add	r2, r3
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a6:	6879      	ldr	r1, [r7, #4]
 80140a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140aa:	440b      	add	r3, r1
 80140ac:	1ad3      	subs	r3, r2, r3
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	f340 8089 	ble.w	80141c6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80140b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	899b      	ldrh	r3, [r3, #12]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fa fb9e 	bl	800e800 <lwip_htons>
 80140c4:	4603      	mov	r3, r0
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f003 0301 	and.w	r3, r3, #1
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d022      	beq.n	8014116 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80140d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	68db      	ldr	r3, [r3, #12]
 80140d6:	899b      	ldrh	r3, [r3, #12]
 80140d8:	b29b      	uxth	r3, r3
 80140da:	b21b      	sxth	r3, r3
 80140dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80140e0:	b21c      	sxth	r4, r3
 80140e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	899b      	ldrh	r3, [r3, #12]
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fa fb87 	bl	800e800 <lwip_htons>
 80140f2:	4603      	mov	r3, r0
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fa fb7e 	bl	800e800 <lwip_htons>
 8014104:	4603      	mov	r3, r0
 8014106:	b21b      	sxth	r3, r3
 8014108:	4323      	orrs	r3, r4
 801410a:	b21a      	sxth	r2, r3
 801410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	b292      	uxth	r2, r2
 8014114:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411a:	b29a      	uxth	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014120:	4413      	add	r3, r2
 8014122:	b299      	uxth	r1, r3
 8014124:	4b3c      	ldr	r3, [pc, #240]	; (8014218 <tcp_receive+0xf18>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	b29a      	uxth	r2, r3
 801412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	1a8a      	subs	r2, r1, r2
 8014130:	b292      	uxth	r2, r2
 8014132:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	685a      	ldr	r2, [r3, #4]
 801413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	891b      	ldrh	r3, [r3, #8]
 8014140:	4619      	mov	r1, r3
 8014142:	4610      	mov	r0, r2
 8014144:	f7fb fdc8 	bl	800fcd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	891c      	ldrh	r4, [r3, #8]
 801414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	899b      	ldrh	r3, [r3, #12]
 8014156:	b29b      	uxth	r3, r3
 8014158:	4618      	mov	r0, r3
 801415a:	f7fa fb51 	bl	800e800 <lwip_htons>
 801415e:	4603      	mov	r3, r0
 8014160:	b2db      	uxtb	r3, r3
 8014162:	f003 0303 	and.w	r3, r3, #3
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <tcp_receive+0xe6e>
 801416a:	2301      	movs	r3, #1
 801416c:	e000      	b.n	8014170 <tcp_receive+0xe70>
 801416e:	2300      	movs	r3, #0
 8014170:	4423      	add	r3, r4
 8014172:	b29a      	uxth	r2, r3
 8014174:	4b2a      	ldr	r3, [pc, #168]	; (8014220 <tcp_receive+0xf20>)
 8014176:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014178:	4b29      	ldr	r3, [pc, #164]	; (8014220 <tcp_receive+0xf20>)
 801417a:	881b      	ldrh	r3, [r3, #0]
 801417c:	461a      	mov	r2, r3
 801417e:	4b26      	ldr	r3, [pc, #152]	; (8014218 <tcp_receive+0xf18>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	441a      	add	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014188:	6879      	ldr	r1, [r7, #4]
 801418a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801418c:	440b      	add	r3, r1
 801418e:	429a      	cmp	r2, r3
 8014190:	d019      	beq.n	80141c6 <tcp_receive+0xec6>
 8014192:	4b24      	ldr	r3, [pc, #144]	; (8014224 <tcp_receive+0xf24>)
 8014194:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014198:	4923      	ldr	r1, [pc, #140]	; (8014228 <tcp_receive+0xf28>)
 801419a:	4824      	ldr	r0, [pc, #144]	; (801422c <tcp_receive+0xf2c>)
 801419c:	f005 f814 	bl	80191c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80141a0:	e011      	b.n	80141c6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80141a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80141a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	f47f aea4 	bne.w	8013ef8 <tcp_receive+0xbf8>
 80141b0:	e00a      	b.n	80141c8 <tcp_receive+0xec8>
                break;
 80141b2:	bf00      	nop
 80141b4:	e008      	b.n	80141c8 <tcp_receive+0xec8>
                break;
 80141b6:	bf00      	nop
 80141b8:	e006      	b.n	80141c8 <tcp_receive+0xec8>
                  break;
 80141ba:	bf00      	nop
 80141bc:	e004      	b.n	80141c8 <tcp_receive+0xec8>
                  break;
 80141be:	bf00      	nop
 80141c0:	e002      	b.n	80141c8 <tcp_receive+0xec8>
                  break;
 80141c2:	bf00      	nop
 80141c4:	e000      	b.n	80141c8 <tcp_receive+0xec8>
                break;
 80141c6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f001 fa33 	bl	8015634 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80141ce:	e003      	b.n	80141d8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f001 fa2f 	bl	8015634 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80141d6:	e01a      	b.n	801420e <tcp_receive+0xf0e>
 80141d8:	e019      	b.n	801420e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80141da:	4b0f      	ldr	r3, [pc, #60]	; (8014218 <tcp_receive+0xf18>)
 80141dc:	681a      	ldr	r2, [r3, #0]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e2:	1ad3      	subs	r3, r2, r3
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	db0a      	blt.n	80141fe <tcp_receive+0xefe>
 80141e8:	4b0b      	ldr	r3, [pc, #44]	; (8014218 <tcp_receive+0xf18>)
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f0:	6879      	ldr	r1, [r7, #4]
 80141f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141f4:	440b      	add	r3, r1
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	3301      	adds	r3, #1
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	dd07      	ble.n	801420e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	8b5b      	ldrh	r3, [r3, #26]
 8014202:	f043 0302 	orr.w	r3, r3, #2
 8014206:	b29a      	uxth	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801420c:	e7ff      	b.n	801420e <tcp_receive+0xf0e>
 801420e:	bf00      	nop
 8014210:	3750      	adds	r7, #80	; 0x50
 8014212:	46bd      	mov	sp, r7
 8014214:	bdb0      	pop	{r4, r5, r7, pc}
 8014216:	bf00      	nop
 8014218:	2000dad0 	.word	0x2000dad0
 801421c:	2000dab0 	.word	0x2000dab0
 8014220:	2000dada 	.word	0x2000dada
 8014224:	0801ba7c 	.word	0x0801ba7c
 8014228:	0801be24 	.word	0x0801be24
 801422c:	0801bac8 	.word	0x0801bac8

08014230 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014236:	4b15      	ldr	r3, [pc, #84]	; (801428c <tcp_get_next_optbyte+0x5c>)
 8014238:	881b      	ldrh	r3, [r3, #0]
 801423a:	1c5a      	adds	r2, r3, #1
 801423c:	b291      	uxth	r1, r2
 801423e:	4a13      	ldr	r2, [pc, #76]	; (801428c <tcp_get_next_optbyte+0x5c>)
 8014240:	8011      	strh	r1, [r2, #0]
 8014242:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014244:	4b12      	ldr	r3, [pc, #72]	; (8014290 <tcp_get_next_optbyte+0x60>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d004      	beq.n	8014256 <tcp_get_next_optbyte+0x26>
 801424c:	4b11      	ldr	r3, [pc, #68]	; (8014294 <tcp_get_next_optbyte+0x64>)
 801424e:	881b      	ldrh	r3, [r3, #0]
 8014250:	88fa      	ldrh	r2, [r7, #6]
 8014252:	429a      	cmp	r2, r3
 8014254:	d208      	bcs.n	8014268 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014256:	4b10      	ldr	r3, [pc, #64]	; (8014298 <tcp_get_next_optbyte+0x68>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	3314      	adds	r3, #20
 801425c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801425e:	88fb      	ldrh	r3, [r7, #6]
 8014260:	683a      	ldr	r2, [r7, #0]
 8014262:	4413      	add	r3, r2
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	e00b      	b.n	8014280 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014268:	88fb      	ldrh	r3, [r7, #6]
 801426a:	b2da      	uxtb	r2, r3
 801426c:	4b09      	ldr	r3, [pc, #36]	; (8014294 <tcp_get_next_optbyte+0x64>)
 801426e:	881b      	ldrh	r3, [r3, #0]
 8014270:	b2db      	uxtb	r3, r3
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014276:	4b06      	ldr	r3, [pc, #24]	; (8014290 <tcp_get_next_optbyte+0x60>)
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	797b      	ldrb	r3, [r7, #5]
 801427c:	4413      	add	r3, r2
 801427e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014280:	4618      	mov	r0, r3
 8014282:	370c      	adds	r7, #12
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr
 801428c:	2000dacc 	.word	0x2000dacc
 8014290:	2000dac8 	.word	0x2000dac8
 8014294:	2000dac6 	.word	0x2000dac6
 8014298:	2000dac0 	.word	0x2000dac0

0801429c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d106      	bne.n	80142b8 <tcp_parseopt+0x1c>
 80142aa:	4b32      	ldr	r3, [pc, #200]	; (8014374 <tcp_parseopt+0xd8>)
 80142ac:	f240 727d 	movw	r2, #1917	; 0x77d
 80142b0:	4931      	ldr	r1, [pc, #196]	; (8014378 <tcp_parseopt+0xdc>)
 80142b2:	4832      	ldr	r0, [pc, #200]	; (801437c <tcp_parseopt+0xe0>)
 80142b4:	f004 ff88 	bl	80191c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80142b8:	4b31      	ldr	r3, [pc, #196]	; (8014380 <tcp_parseopt+0xe4>)
 80142ba:	881b      	ldrh	r3, [r3, #0]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d055      	beq.n	801436c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80142c0:	4b30      	ldr	r3, [pc, #192]	; (8014384 <tcp_parseopt+0xe8>)
 80142c2:	2200      	movs	r2, #0
 80142c4:	801a      	strh	r2, [r3, #0]
 80142c6:	e045      	b.n	8014354 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80142c8:	f7ff ffb2 	bl	8014230 <tcp_get_next_optbyte>
 80142cc:	4603      	mov	r3, r0
 80142ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80142d0:	7bfb      	ldrb	r3, [r7, #15]
 80142d2:	2b02      	cmp	r3, #2
 80142d4:	d006      	beq.n	80142e4 <tcp_parseopt+0x48>
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	dc2b      	bgt.n	8014332 <tcp_parseopt+0x96>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d041      	beq.n	8014362 <tcp_parseopt+0xc6>
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d127      	bne.n	8014332 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80142e2:	e037      	b.n	8014354 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80142e4:	f7ff ffa4 	bl	8014230 <tcp_get_next_optbyte>
 80142e8:	4603      	mov	r3, r0
 80142ea:	2b04      	cmp	r3, #4
 80142ec:	d13b      	bne.n	8014366 <tcp_parseopt+0xca>
 80142ee:	4b25      	ldr	r3, [pc, #148]	; (8014384 <tcp_parseopt+0xe8>)
 80142f0:	881b      	ldrh	r3, [r3, #0]
 80142f2:	3301      	adds	r3, #1
 80142f4:	4a22      	ldr	r2, [pc, #136]	; (8014380 <tcp_parseopt+0xe4>)
 80142f6:	8812      	ldrh	r2, [r2, #0]
 80142f8:	4293      	cmp	r3, r2
 80142fa:	da34      	bge.n	8014366 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80142fc:	f7ff ff98 	bl	8014230 <tcp_get_next_optbyte>
 8014300:	4603      	mov	r3, r0
 8014302:	b29b      	uxth	r3, r3
 8014304:	021b      	lsls	r3, r3, #8
 8014306:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014308:	f7ff ff92 	bl	8014230 <tcp_get_next_optbyte>
 801430c:	4603      	mov	r3, r0
 801430e:	b29a      	uxth	r2, r3
 8014310:	89bb      	ldrh	r3, [r7, #12]
 8014312:	4313      	orrs	r3, r2
 8014314:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014316:	89bb      	ldrh	r3, [r7, #12]
 8014318:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801431c:	d804      	bhi.n	8014328 <tcp_parseopt+0x8c>
 801431e:	89bb      	ldrh	r3, [r7, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d001      	beq.n	8014328 <tcp_parseopt+0x8c>
 8014324:	89ba      	ldrh	r2, [r7, #12]
 8014326:	e001      	b.n	801432c <tcp_parseopt+0x90>
 8014328:	f44f 7206 	mov.w	r2, #536	; 0x218
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014330:	e010      	b.n	8014354 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014332:	f7ff ff7d 	bl	8014230 <tcp_get_next_optbyte>
 8014336:	4603      	mov	r3, r0
 8014338:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801433a:	7afb      	ldrb	r3, [r7, #11]
 801433c:	2b01      	cmp	r3, #1
 801433e:	d914      	bls.n	801436a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014340:	7afb      	ldrb	r3, [r7, #11]
 8014342:	b29a      	uxth	r2, r3
 8014344:	4b0f      	ldr	r3, [pc, #60]	; (8014384 <tcp_parseopt+0xe8>)
 8014346:	881b      	ldrh	r3, [r3, #0]
 8014348:	4413      	add	r3, r2
 801434a:	b29b      	uxth	r3, r3
 801434c:	3b02      	subs	r3, #2
 801434e:	b29a      	uxth	r2, r3
 8014350:	4b0c      	ldr	r3, [pc, #48]	; (8014384 <tcp_parseopt+0xe8>)
 8014352:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014354:	4b0b      	ldr	r3, [pc, #44]	; (8014384 <tcp_parseopt+0xe8>)
 8014356:	881a      	ldrh	r2, [r3, #0]
 8014358:	4b09      	ldr	r3, [pc, #36]	; (8014380 <tcp_parseopt+0xe4>)
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	429a      	cmp	r2, r3
 801435e:	d3b3      	bcc.n	80142c8 <tcp_parseopt+0x2c>
 8014360:	e004      	b.n	801436c <tcp_parseopt+0xd0>
          return;
 8014362:	bf00      	nop
 8014364:	e002      	b.n	801436c <tcp_parseopt+0xd0>
            return;
 8014366:	bf00      	nop
 8014368:	e000      	b.n	801436c <tcp_parseopt+0xd0>
            return;
 801436a:	bf00      	nop
      }
    }
  }
}
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	0801ba7c 	.word	0x0801ba7c
 8014378:	0801bee0 	.word	0x0801bee0
 801437c:	0801bac8 	.word	0x0801bac8
 8014380:	2000dac4 	.word	0x2000dac4
 8014384:	2000dacc 	.word	0x2000dacc

08014388 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014388:	b480      	push	{r7}
 801438a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801438c:	4b05      	ldr	r3, [pc, #20]	; (80143a4 <tcp_trigger_input_pcb_close+0x1c>)
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	f043 0310 	orr.w	r3, r3, #16
 8014394:	b2da      	uxtb	r2, r3
 8014396:	4b03      	ldr	r3, [pc, #12]	; (80143a4 <tcp_trigger_input_pcb_close+0x1c>)
 8014398:	701a      	strb	r2, [r3, #0]
}
 801439a:	bf00      	nop
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr
 80143a4:	2000dadd 	.word	0x2000dadd

080143a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00a      	beq.n	80143d0 <tcp_route+0x28>
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	7a1b      	ldrb	r3, [r3, #8]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d006      	beq.n	80143d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	7a1b      	ldrb	r3, [r3, #8]
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7fb fa7e 	bl	800f8c8 <netif_get_by_index>
 80143cc:	4603      	mov	r3, r0
 80143ce:	e003      	b.n	80143d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f003 fa25 	bl	8017820 <ip4_route>
 80143d6:	4603      	mov	r3, r0
  }
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3710      	adds	r7, #16
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80143e0:	b590      	push	{r4, r7, lr}
 80143e2:	b087      	sub	sp, #28
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	603b      	str	r3, [r7, #0]
 80143ec:	4613      	mov	r3, r2
 80143ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d105      	bne.n	8014402 <tcp_create_segment+0x22>
 80143f6:	4b44      	ldr	r3, [pc, #272]	; (8014508 <tcp_create_segment+0x128>)
 80143f8:	22a3      	movs	r2, #163	; 0xa3
 80143fa:	4944      	ldr	r1, [pc, #272]	; (801450c <tcp_create_segment+0x12c>)
 80143fc:	4844      	ldr	r0, [pc, #272]	; (8014510 <tcp_create_segment+0x130>)
 80143fe:	f004 fee3 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d105      	bne.n	8014414 <tcp_create_segment+0x34>
 8014408:	4b3f      	ldr	r3, [pc, #252]	; (8014508 <tcp_create_segment+0x128>)
 801440a:	22a4      	movs	r2, #164	; 0xa4
 801440c:	4941      	ldr	r1, [pc, #260]	; (8014514 <tcp_create_segment+0x134>)
 801440e:	4840      	ldr	r0, [pc, #256]	; (8014510 <tcp_create_segment+0x130>)
 8014410:	f004 feda 	bl	80191c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	b2db      	uxtb	r3, r3
 801441c:	f003 0304 	and.w	r3, r3, #4
 8014420:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014422:	2003      	movs	r0, #3
 8014424:	f7fa fec4 	bl	800f1b0 <memp_malloc>
 8014428:	6138      	str	r0, [r7, #16]
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d104      	bne.n	801443a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014430:	68b8      	ldr	r0, [r7, #8]
 8014432:	f7fb fdd7 	bl	800ffe4 <pbuf_free>
    return NULL;
 8014436:	2300      	movs	r3, #0
 8014438:	e061      	b.n	80144fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014440:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	2200      	movs	r2, #0
 8014446:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	68ba      	ldr	r2, [r7, #8]
 801444c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	891a      	ldrh	r2, [r3, #8]
 8014452:	7dfb      	ldrb	r3, [r7, #23]
 8014454:	b29b      	uxth	r3, r3
 8014456:	429a      	cmp	r2, r3
 8014458:	d205      	bcs.n	8014466 <tcp_create_segment+0x86>
 801445a:	4b2b      	ldr	r3, [pc, #172]	; (8014508 <tcp_create_segment+0x128>)
 801445c:	22b0      	movs	r2, #176	; 0xb0
 801445e:	492e      	ldr	r1, [pc, #184]	; (8014518 <tcp_create_segment+0x138>)
 8014460:	482b      	ldr	r0, [pc, #172]	; (8014510 <tcp_create_segment+0x130>)
 8014462:	f004 feb1 	bl	80191c8 <iprintf>
  seg->len = p->tot_len - optlen;
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	891a      	ldrh	r2, [r3, #8]
 801446a:	7dfb      	ldrb	r3, [r7, #23]
 801446c:	b29b      	uxth	r3, r3
 801446e:	1ad3      	subs	r3, r2, r3
 8014470:	b29a      	uxth	r2, r3
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014476:	2114      	movs	r1, #20
 8014478:	68b8      	ldr	r0, [r7, #8]
 801447a:	f7fb fd1d 	bl	800feb8 <pbuf_add_header>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d004      	beq.n	801448e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014484:	6938      	ldr	r0, [r7, #16]
 8014486:	f7fd f8ce 	bl	8011626 <tcp_seg_free>
    return NULL;
 801448a:	2300      	movs	r3, #0
 801448c:	e037      	b.n	80144fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	685a      	ldr	r2, [r3, #4]
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	8ada      	ldrh	r2, [r3, #22]
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	68dc      	ldr	r4, [r3, #12]
 80144a0:	4610      	mov	r0, r2
 80144a2:	f7fa f9ad 	bl	800e800 <lwip_htons>
 80144a6:	4603      	mov	r3, r0
 80144a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	8b1a      	ldrh	r2, [r3, #24]
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	68dc      	ldr	r4, [r3, #12]
 80144b2:	4610      	mov	r0, r2
 80144b4:	f7fa f9a4 	bl	800e800 <lwip_htons>
 80144b8:	4603      	mov	r3, r0
 80144ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	68dc      	ldr	r4, [r3, #12]
 80144c0:	6838      	ldr	r0, [r7, #0]
 80144c2:	f7fa f9b2 	bl	800e82a <lwip_htonl>
 80144c6:	4603      	mov	r3, r0
 80144c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80144ca:	7dfb      	ldrb	r3, [r7, #23]
 80144cc:	089b      	lsrs	r3, r3, #2
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	3305      	adds	r3, #5
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	031b      	lsls	r3, r3, #12
 80144d8:	b29a      	uxth	r2, r3
 80144da:	79fb      	ldrb	r3, [r7, #7]
 80144dc:	b29b      	uxth	r3, r3
 80144de:	4313      	orrs	r3, r2
 80144e0:	b29a      	uxth	r2, r3
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	68dc      	ldr	r4, [r3, #12]
 80144e6:	4610      	mov	r0, r2
 80144e8:	f7fa f98a 	bl	800e800 <lwip_htons>
 80144ec:	4603      	mov	r3, r0
 80144ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	68db      	ldr	r3, [r3, #12]
 80144f4:	2200      	movs	r2, #0
 80144f6:	749a      	strb	r2, [r3, #18]
 80144f8:	2200      	movs	r2, #0
 80144fa:	74da      	strb	r2, [r3, #19]
  return seg;
 80144fc:	693b      	ldr	r3, [r7, #16]
}
 80144fe:	4618      	mov	r0, r3
 8014500:	371c      	adds	r7, #28
 8014502:	46bd      	mov	sp, r7
 8014504:	bd90      	pop	{r4, r7, pc}
 8014506:	bf00      	nop
 8014508:	0801befc 	.word	0x0801befc
 801450c:	0801bf30 	.word	0x0801bf30
 8014510:	0801bf50 	.word	0x0801bf50
 8014514:	0801bf78 	.word	0x0801bf78
 8014518:	0801bf9c 	.word	0x0801bf9c

0801451c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801451c:	b590      	push	{r4, r7, lr}
 801451e:	b08b      	sub	sp, #44	; 0x2c
 8014520:	af02      	add	r7, sp, #8
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	460b      	mov	r3, r1
 8014526:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014528:	2300      	movs	r3, #0
 801452a:	61fb      	str	r3, [r7, #28]
 801452c:	2300      	movs	r3, #0
 801452e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014530:	2300      	movs	r3, #0
 8014532:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d106      	bne.n	8014548 <tcp_split_unsent_seg+0x2c>
 801453a:	4b95      	ldr	r3, [pc, #596]	; (8014790 <tcp_split_unsent_seg+0x274>)
 801453c:	f240 324b 	movw	r2, #843	; 0x34b
 8014540:	4994      	ldr	r1, [pc, #592]	; (8014794 <tcp_split_unsent_seg+0x278>)
 8014542:	4895      	ldr	r0, [pc, #596]	; (8014798 <tcp_split_unsent_seg+0x27c>)
 8014544:	f004 fe40 	bl	80191c8 <iprintf>

  useg = pcb->unsent;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801454c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d102      	bne.n	801455a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014554:	f04f 33ff 	mov.w	r3, #4294967295
 8014558:	e116      	b.n	8014788 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801455a:	887b      	ldrh	r3, [r7, #2]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d109      	bne.n	8014574 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014560:	4b8b      	ldr	r3, [pc, #556]	; (8014790 <tcp_split_unsent_seg+0x274>)
 8014562:	f240 3253 	movw	r2, #851	; 0x353
 8014566:	498d      	ldr	r1, [pc, #564]	; (801479c <tcp_split_unsent_seg+0x280>)
 8014568:	488b      	ldr	r0, [pc, #556]	; (8014798 <tcp_split_unsent_seg+0x27c>)
 801456a:	f004 fe2d 	bl	80191c8 <iprintf>
    return ERR_VAL;
 801456e:	f06f 0305 	mvn.w	r3, #5
 8014572:	e109      	b.n	8014788 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	891b      	ldrh	r3, [r3, #8]
 8014578:	887a      	ldrh	r2, [r7, #2]
 801457a:	429a      	cmp	r2, r3
 801457c:	d301      	bcc.n	8014582 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801457e:	2300      	movs	r3, #0
 8014580:	e102      	b.n	8014788 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014586:	887a      	ldrh	r2, [r7, #2]
 8014588:	429a      	cmp	r2, r3
 801458a:	d906      	bls.n	801459a <tcp_split_unsent_seg+0x7e>
 801458c:	4b80      	ldr	r3, [pc, #512]	; (8014790 <tcp_split_unsent_seg+0x274>)
 801458e:	f240 325b 	movw	r2, #859	; 0x35b
 8014592:	4983      	ldr	r1, [pc, #524]	; (80147a0 <tcp_split_unsent_seg+0x284>)
 8014594:	4880      	ldr	r0, [pc, #512]	; (8014798 <tcp_split_unsent_seg+0x27c>)
 8014596:	f004 fe17 	bl	80191c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	891b      	ldrh	r3, [r3, #8]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d106      	bne.n	80145b0 <tcp_split_unsent_seg+0x94>
 80145a2:	4b7b      	ldr	r3, [pc, #492]	; (8014790 <tcp_split_unsent_seg+0x274>)
 80145a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80145a8:	497e      	ldr	r1, [pc, #504]	; (80147a4 <tcp_split_unsent_seg+0x288>)
 80145aa:	487b      	ldr	r0, [pc, #492]	; (8014798 <tcp_split_unsent_seg+0x27c>)
 80145ac:	f004 fe0c 	bl	80191c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	7a9b      	ldrb	r3, [r3, #10]
 80145b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80145b6:	7bfb      	ldrb	r3, [r7, #15]
 80145b8:	009b      	lsls	r3, r3, #2
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	f003 0304 	and.w	r3, r3, #4
 80145c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	891a      	ldrh	r2, [r3, #8]
 80145c6:	887b      	ldrh	r3, [r7, #2]
 80145c8:	1ad3      	subs	r3, r2, r3
 80145ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80145cc:	7bbb      	ldrb	r3, [r7, #14]
 80145ce:	b29a      	uxth	r2, r3
 80145d0:	89bb      	ldrh	r3, [r7, #12]
 80145d2:	4413      	add	r3, r2
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145da:	4619      	mov	r1, r3
 80145dc:	2036      	movs	r0, #54	; 0x36
 80145de:	f7fb fa1d 	bl	800fa1c <pbuf_alloc>
 80145e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f000 80b7 	beq.w	801475a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	891a      	ldrh	r2, [r3, #8]
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	891b      	ldrh	r3, [r3, #8]
 80145f6:	1ad3      	subs	r3, r2, r3
 80145f8:	b29a      	uxth	r2, r3
 80145fa:	887b      	ldrh	r3, [r7, #2]
 80145fc:	4413      	add	r3, r2
 80145fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	6858      	ldr	r0, [r3, #4]
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	685a      	ldr	r2, [r3, #4]
 8014608:	7bbb      	ldrb	r3, [r7, #14]
 801460a:	18d1      	adds	r1, r2, r3
 801460c:	897b      	ldrh	r3, [r7, #10]
 801460e:	89ba      	ldrh	r2, [r7, #12]
 8014610:	f7fb feee 	bl	80103f0 <pbuf_copy_partial>
 8014614:	4603      	mov	r3, r0
 8014616:	461a      	mov	r2, r3
 8014618:	89bb      	ldrh	r3, [r7, #12]
 801461a:	4293      	cmp	r3, r2
 801461c:	f040 809f 	bne.w	801475e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	68db      	ldr	r3, [r3, #12]
 8014624:	899b      	ldrh	r3, [r3, #12]
 8014626:	b29b      	uxth	r3, r3
 8014628:	4618      	mov	r0, r3
 801462a:	f7fa f8e9 	bl	800e800 <lwip_htons>
 801462e:	4603      	mov	r3, r0
 8014630:	b2db      	uxtb	r3, r3
 8014632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014636:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014638:	2300      	movs	r3, #0
 801463a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801463c:	7efb      	ldrb	r3, [r7, #27]
 801463e:	f003 0308 	and.w	r3, r3, #8
 8014642:	2b00      	cmp	r3, #0
 8014644:	d007      	beq.n	8014656 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014646:	7efb      	ldrb	r3, [r7, #27]
 8014648:	f023 0308 	bic.w	r3, r3, #8
 801464c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801464e:	7ebb      	ldrb	r3, [r7, #26]
 8014650:	f043 0308 	orr.w	r3, r3, #8
 8014654:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014656:	7efb      	ldrb	r3, [r7, #27]
 8014658:	f003 0301 	and.w	r3, r3, #1
 801465c:	2b00      	cmp	r3, #0
 801465e:	d007      	beq.n	8014670 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014660:	7efb      	ldrb	r3, [r7, #27]
 8014662:	f023 0301 	bic.w	r3, r3, #1
 8014666:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014668:	7ebb      	ldrb	r3, [r7, #26]
 801466a:	f043 0301 	orr.w	r3, r3, #1
 801466e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	4618      	mov	r0, r3
 8014678:	f7fa f8d7 	bl	800e82a <lwip_htonl>
 801467c:	4602      	mov	r2, r0
 801467e:	887b      	ldrh	r3, [r7, #2]
 8014680:	18d1      	adds	r1, r2, r3
 8014682:	7eba      	ldrb	r2, [r7, #26]
 8014684:	7bfb      	ldrb	r3, [r7, #15]
 8014686:	9300      	str	r3, [sp, #0]
 8014688:	460b      	mov	r3, r1
 801468a:	6939      	ldr	r1, [r7, #16]
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7ff fea7 	bl	80143e0 <tcp_create_segment>
 8014692:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d063      	beq.n	8014762 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801469a:	697b      	ldr	r3, [r7, #20]
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fb fd2e 	bl	8010100 <pbuf_clen>
 80146a4:	4603      	mov	r3, r0
 80146a6:	461a      	mov	r2, r3
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146ae:	1a9b      	subs	r3, r3, r2
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80146b8:	697b      	ldr	r3, [r7, #20]
 80146ba:	6858      	ldr	r0, [r3, #4]
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	891a      	ldrh	r2, [r3, #8]
 80146c2:	89bb      	ldrh	r3, [r7, #12]
 80146c4:	1ad3      	subs	r3, r2, r3
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	4619      	mov	r1, r3
 80146ca:	f7fb fb05 	bl	800fcd8 <pbuf_realloc>
  useg->len -= remainder;
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	891a      	ldrh	r2, [r3, #8]
 80146d2:	89bb      	ldrh	r3, [r7, #12]
 80146d4:	1ad3      	subs	r3, r2, r3
 80146d6:	b29a      	uxth	r2, r3
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	68db      	ldr	r3, [r3, #12]
 80146e0:	899b      	ldrh	r3, [r3, #12]
 80146e2:	b29c      	uxth	r4, r3
 80146e4:	7efb      	ldrb	r3, [r7, #27]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fa f889 	bl	800e800 <lwip_htons>
 80146ee:	4603      	mov	r3, r0
 80146f0:	461a      	mov	r2, r3
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	4322      	orrs	r2, r4
 80146f8:	b292      	uxth	r2, r2
 80146fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	4618      	mov	r0, r3
 8014702:	f7fb fcfd 	bl	8010100 <pbuf_clen>
 8014706:	4603      	mov	r3, r0
 8014708:	461a      	mov	r2, r3
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014710:	4413      	add	r3, r2
 8014712:	b29a      	uxth	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	4618      	mov	r0, r3
 8014720:	f7fb fcee 	bl	8010100 <pbuf_clen>
 8014724:	4603      	mov	r3, r0
 8014726:	461a      	mov	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801472e:	4413      	add	r3, r2
 8014730:	b29a      	uxth	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	69fa      	ldr	r2, [r7, #28]
 8014744:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d103      	bne.n	8014756 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2200      	movs	r2, #0
 8014752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014756:	2300      	movs	r3, #0
 8014758:	e016      	b.n	8014788 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801475a:	bf00      	nop
 801475c:	e002      	b.n	8014764 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801475e:	bf00      	nop
 8014760:	e000      	b.n	8014764 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014762:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d006      	beq.n	8014778 <tcp_split_unsent_seg+0x25c>
 801476a:	4b09      	ldr	r3, [pc, #36]	; (8014790 <tcp_split_unsent_seg+0x274>)
 801476c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014770:	490d      	ldr	r1, [pc, #52]	; (80147a8 <tcp_split_unsent_seg+0x28c>)
 8014772:	4809      	ldr	r0, [pc, #36]	; (8014798 <tcp_split_unsent_seg+0x27c>)
 8014774:	f004 fd28 	bl	80191c8 <iprintf>
  if (p != NULL) {
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d002      	beq.n	8014784 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801477e:	6938      	ldr	r0, [r7, #16]
 8014780:	f7fb fc30 	bl	800ffe4 <pbuf_free>
  }

  return ERR_MEM;
 8014784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014788:	4618      	mov	r0, r3
 801478a:	3724      	adds	r7, #36	; 0x24
 801478c:	46bd      	mov	sp, r7
 801478e:	bd90      	pop	{r4, r7, pc}
 8014790:	0801befc 	.word	0x0801befc
 8014794:	0801c290 	.word	0x0801c290
 8014798:	0801bf50 	.word	0x0801bf50
 801479c:	0801c2b4 	.word	0x0801c2b4
 80147a0:	0801c2d8 	.word	0x0801c2d8
 80147a4:	0801c2e8 	.word	0x0801c2e8
 80147a8:	0801c2f8 	.word	0x0801c2f8

080147ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80147ac:	b590      	push	{r4, r7, lr}
 80147ae:	b085      	sub	sp, #20
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d106      	bne.n	80147c8 <tcp_send_fin+0x1c>
 80147ba:	4b21      	ldr	r3, [pc, #132]	; (8014840 <tcp_send_fin+0x94>)
 80147bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80147c0:	4920      	ldr	r1, [pc, #128]	; (8014844 <tcp_send_fin+0x98>)
 80147c2:	4821      	ldr	r0, [pc, #132]	; (8014848 <tcp_send_fin+0x9c>)
 80147c4:	f004 fd00 	bl	80191c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d02e      	beq.n	801482e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147d4:	60fb      	str	r3, [r7, #12]
 80147d6:	e002      	b.n	80147de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d1f8      	bne.n	80147d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	68db      	ldr	r3, [r3, #12]
 80147ea:	899b      	ldrh	r3, [r3, #12]
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7fa f806 	bl	800e800 <lwip_htons>
 80147f4:	4603      	mov	r3, r0
 80147f6:	b2db      	uxtb	r3, r3
 80147f8:	f003 0307 	and.w	r3, r3, #7
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d116      	bne.n	801482e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	899b      	ldrh	r3, [r3, #12]
 8014806:	b29c      	uxth	r4, r3
 8014808:	2001      	movs	r0, #1
 801480a:	f7f9 fff9 	bl	800e800 <lwip_htons>
 801480e:	4603      	mov	r3, r0
 8014810:	461a      	mov	r2, r3
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	4322      	orrs	r2, r4
 8014818:	b292      	uxth	r2, r2
 801481a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	8b5b      	ldrh	r3, [r3, #26]
 8014820:	f043 0320 	orr.w	r3, r3, #32
 8014824:	b29a      	uxth	r2, r3
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801482a:	2300      	movs	r3, #0
 801482c:	e004      	b.n	8014838 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801482e:	2101      	movs	r1, #1
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f000 f80b 	bl	801484c <tcp_enqueue_flags>
 8014836:	4603      	mov	r3, r0
}
 8014838:	4618      	mov	r0, r3
 801483a:	3714      	adds	r7, #20
 801483c:	46bd      	mov	sp, r7
 801483e:	bd90      	pop	{r4, r7, pc}
 8014840:	0801befc 	.word	0x0801befc
 8014844:	0801c304 	.word	0x0801c304
 8014848:	0801bf50 	.word	0x0801bf50

0801484c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b08a      	sub	sp, #40	; 0x28
 8014850:	af02      	add	r7, sp, #8
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	460b      	mov	r3, r1
 8014856:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014858:	2300      	movs	r3, #0
 801485a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801485c:	2300      	movs	r3, #0
 801485e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014860:	78fb      	ldrb	r3, [r7, #3]
 8014862:	f003 0303 	and.w	r3, r3, #3
 8014866:	2b00      	cmp	r3, #0
 8014868:	d106      	bne.n	8014878 <tcp_enqueue_flags+0x2c>
 801486a:	4b67      	ldr	r3, [pc, #412]	; (8014a08 <tcp_enqueue_flags+0x1bc>)
 801486c:	f240 4211 	movw	r2, #1041	; 0x411
 8014870:	4966      	ldr	r1, [pc, #408]	; (8014a0c <tcp_enqueue_flags+0x1c0>)
 8014872:	4867      	ldr	r0, [pc, #412]	; (8014a10 <tcp_enqueue_flags+0x1c4>)
 8014874:	f004 fca8 	bl	80191c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d106      	bne.n	801488c <tcp_enqueue_flags+0x40>
 801487e:	4b62      	ldr	r3, [pc, #392]	; (8014a08 <tcp_enqueue_flags+0x1bc>)
 8014880:	f240 4213 	movw	r2, #1043	; 0x413
 8014884:	4963      	ldr	r1, [pc, #396]	; (8014a14 <tcp_enqueue_flags+0x1c8>)
 8014886:	4862      	ldr	r0, [pc, #392]	; (8014a10 <tcp_enqueue_flags+0x1c4>)
 8014888:	f004 fc9e 	bl	80191c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801488c:	78fb      	ldrb	r3, [r7, #3]
 801488e:	f003 0302 	and.w	r3, r3, #2
 8014892:	2b00      	cmp	r3, #0
 8014894:	d001      	beq.n	801489a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014896:	2301      	movs	r3, #1
 8014898:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801489a:	7ffb      	ldrb	r3, [r7, #31]
 801489c:	009b      	lsls	r3, r3, #2
 801489e:	b2db      	uxtb	r3, r3
 80148a0:	f003 0304 	and.w	r3, r3, #4
 80148a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80148a6:	7dfb      	ldrb	r3, [r7, #23]
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148ae:	4619      	mov	r1, r3
 80148b0:	2036      	movs	r0, #54	; 0x36
 80148b2:	f7fb f8b3 	bl	800fa1c <pbuf_alloc>
 80148b6:	6138      	str	r0, [r7, #16]
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d109      	bne.n	80148d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	8b5b      	ldrh	r3, [r3, #26]
 80148c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148c6:	b29a      	uxth	r2, r3
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80148cc:	f04f 33ff 	mov.w	r3, #4294967295
 80148d0:	e095      	b.n	80149fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	895a      	ldrh	r2, [r3, #10]
 80148d6:	7dfb      	ldrb	r3, [r7, #23]
 80148d8:	b29b      	uxth	r3, r3
 80148da:	429a      	cmp	r2, r3
 80148dc:	d206      	bcs.n	80148ec <tcp_enqueue_flags+0xa0>
 80148de:	4b4a      	ldr	r3, [pc, #296]	; (8014a08 <tcp_enqueue_flags+0x1bc>)
 80148e0:	f240 4239 	movw	r2, #1081	; 0x439
 80148e4:	494c      	ldr	r1, [pc, #304]	; (8014a18 <tcp_enqueue_flags+0x1cc>)
 80148e6:	484a      	ldr	r0, [pc, #296]	; (8014a10 <tcp_enqueue_flags+0x1c4>)
 80148e8:	f004 fc6e 	bl	80191c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80148f0:	78fa      	ldrb	r2, [r7, #3]
 80148f2:	7ffb      	ldrb	r3, [r7, #31]
 80148f4:	9300      	str	r3, [sp, #0]
 80148f6:	460b      	mov	r3, r1
 80148f8:	6939      	ldr	r1, [r7, #16]
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f7ff fd70 	bl	80143e0 <tcp_create_segment>
 8014900:	60f8      	str	r0, [r7, #12]
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d109      	bne.n	801491c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	8b5b      	ldrh	r3, [r3, #26]
 801490c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014910:	b29a      	uxth	r2, r3
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014916:	f04f 33ff 	mov.w	r3, #4294967295
 801491a:	e070      	b.n	80149fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	f003 0303 	and.w	r3, r3, #3
 8014924:	2b00      	cmp	r3, #0
 8014926:	d006      	beq.n	8014936 <tcp_enqueue_flags+0xea>
 8014928:	4b37      	ldr	r3, [pc, #220]	; (8014a08 <tcp_enqueue_flags+0x1bc>)
 801492a:	f240 4242 	movw	r2, #1090	; 0x442
 801492e:	493b      	ldr	r1, [pc, #236]	; (8014a1c <tcp_enqueue_flags+0x1d0>)
 8014930:	4837      	ldr	r0, [pc, #220]	; (8014a10 <tcp_enqueue_flags+0x1c4>)
 8014932:	f004 fc49 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	891b      	ldrh	r3, [r3, #8]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d006      	beq.n	801494c <tcp_enqueue_flags+0x100>
 801493e:	4b32      	ldr	r3, [pc, #200]	; (8014a08 <tcp_enqueue_flags+0x1bc>)
 8014940:	f240 4243 	movw	r2, #1091	; 0x443
 8014944:	4936      	ldr	r1, [pc, #216]	; (8014a20 <tcp_enqueue_flags+0x1d4>)
 8014946:	4832      	ldr	r0, [pc, #200]	; (8014a10 <tcp_enqueue_flags+0x1c4>)
 8014948:	f004 fc3e 	bl	80191c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014950:	2b00      	cmp	r3, #0
 8014952:	d103      	bne.n	801495c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	66da      	str	r2, [r3, #108]	; 0x6c
 801495a:	e00d      	b.n	8014978 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014960:	61bb      	str	r3, [r7, #24]
 8014962:	e002      	b.n	801496a <tcp_enqueue_flags+0x11e>
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	61bb      	str	r3, [r7, #24]
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1f8      	bne.n	8014964 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	68fa      	ldr	r2, [r7, #12]
 8014976:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2200      	movs	r2, #0
 801497c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014980:	78fb      	ldrb	r3, [r7, #3]
 8014982:	f003 0302 	and.w	r3, r3, #2
 8014986:	2b00      	cmp	r3, #0
 8014988:	d104      	bne.n	8014994 <tcp_enqueue_flags+0x148>
 801498a:	78fb      	ldrb	r3, [r7, #3]
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	2b00      	cmp	r3, #0
 8014992:	d004      	beq.n	801499e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014998:	1c5a      	adds	r2, r3, #1
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801499e:	78fb      	ldrb	r3, [r7, #3]
 80149a0:	f003 0301 	and.w	r3, r3, #1
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d006      	beq.n	80149b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	8b5b      	ldrh	r3, [r3, #26]
 80149ac:	f043 0320 	orr.w	r3, r3, #32
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fb fba0 	bl	8010100 <pbuf_clen>
 80149c0:	4603      	mov	r3, r0
 80149c2:	461a      	mov	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149ca:	4413      	add	r3, r2
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d00e      	beq.n	80149fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d10a      	bne.n	80149fc <tcp_enqueue_flags+0x1b0>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d106      	bne.n	80149fc <tcp_enqueue_flags+0x1b0>
 80149ee:	4b06      	ldr	r3, [pc, #24]	; (8014a08 <tcp_enqueue_flags+0x1bc>)
 80149f0:	f240 4265 	movw	r2, #1125	; 0x465
 80149f4:	490b      	ldr	r1, [pc, #44]	; (8014a24 <tcp_enqueue_flags+0x1d8>)
 80149f6:	4806      	ldr	r0, [pc, #24]	; (8014a10 <tcp_enqueue_flags+0x1c4>)
 80149f8:	f004 fbe6 	bl	80191c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80149fc:	2300      	movs	r3, #0
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3720      	adds	r7, #32
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	0801befc 	.word	0x0801befc
 8014a0c:	0801c320 	.word	0x0801c320
 8014a10:	0801bf50 	.word	0x0801bf50
 8014a14:	0801c378 	.word	0x0801c378
 8014a18:	0801c398 	.word	0x0801c398
 8014a1c:	0801c3d4 	.word	0x0801c3d4
 8014a20:	0801c3ec 	.word	0x0801c3ec
 8014a24:	0801c418 	.word	0x0801c418

08014a28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014a28:	b5b0      	push	{r4, r5, r7, lr}
 8014a2a:	b08a      	sub	sp, #40	; 0x28
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d106      	bne.n	8014a44 <tcp_output+0x1c>
 8014a36:	4b8a      	ldr	r3, [pc, #552]	; (8014c60 <tcp_output+0x238>)
 8014a38:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014a3c:	4989      	ldr	r1, [pc, #548]	; (8014c64 <tcp_output+0x23c>)
 8014a3e:	488a      	ldr	r0, [pc, #552]	; (8014c68 <tcp_output+0x240>)
 8014a40:	f004 fbc2 	bl	80191c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	7d1b      	ldrb	r3, [r3, #20]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d106      	bne.n	8014a5a <tcp_output+0x32>
 8014a4c:	4b84      	ldr	r3, [pc, #528]	; (8014c60 <tcp_output+0x238>)
 8014a4e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014a52:	4986      	ldr	r1, [pc, #536]	; (8014c6c <tcp_output+0x244>)
 8014a54:	4884      	ldr	r0, [pc, #528]	; (8014c68 <tcp_output+0x240>)
 8014a56:	f004 fbb7 	bl	80191c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014a5a:	4b85      	ldr	r3, [pc, #532]	; (8014c70 <tcp_output+0x248>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d101      	bne.n	8014a68 <tcp_output+0x40>
    return ERR_OK;
 8014a64:	2300      	movs	r3, #0
 8014a66:	e1ce      	b.n	8014e06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a74:	4293      	cmp	r3, r2
 8014a76:	bf28      	it	cs
 8014a78:	4613      	movcs	r3, r2
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a82:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d10b      	bne.n	8014aa2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	8b5b      	ldrh	r3, [r3, #26]
 8014a8e:	f003 0302 	and.w	r3, r3, #2
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	f000 81aa 	beq.w	8014dec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 fdcb 	bl	8015634 <tcp_send_empty_ack>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	e1b1      	b.n	8014e06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014aa2:	6879      	ldr	r1, [r7, #4]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	3304      	adds	r3, #4
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f7ff fc7c 	bl	80143a8 <tcp_route>
 8014ab0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d102      	bne.n	8014abe <tcp_output+0x96>
    return ERR_RTE;
 8014ab8:	f06f 0303 	mvn.w	r3, #3
 8014abc:	e1a3      	b.n	8014e06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d003      	beq.n	8014acc <tcp_output+0xa4>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d111      	bne.n	8014af0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d002      	beq.n	8014ad8 <tcp_output+0xb0>
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	3304      	adds	r3, #4
 8014ad6:	e000      	b.n	8014ada <tcp_output+0xb2>
 8014ad8:	2300      	movs	r3, #0
 8014ada:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <tcp_output+0xc0>
      return ERR_RTE;
 8014ae2:	f06f 0303 	mvn.w	r3, #3
 8014ae6:	e18e      	b.n	8014e06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014ae8:	693b      	ldr	r3, [r7, #16]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7f9 fe97 	bl	800e82a <lwip_htonl>
 8014afc:	4602      	mov	r2, r0
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b02:	1ad3      	subs	r3, r2, r3
 8014b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b06:	8912      	ldrh	r2, [r2, #8]
 8014b08:	4413      	add	r3, r2
 8014b0a:	69ba      	ldr	r2, [r7, #24]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d227      	bcs.n	8014b60 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b16:	461a      	mov	r2, r3
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	d114      	bne.n	8014b48 <tcp_output+0x120>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d110      	bne.n	8014b48 <tcp_output+0x120>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d10b      	bne.n	8014b48 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2201      	movs	r2, #1
 8014b3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2200      	movs	r2, #0
 8014b44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	8b5b      	ldrh	r3, [r3, #26]
 8014b4c:	f003 0302 	and.w	r3, r3, #2
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	f000 814d 	beq.w	8014df0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f000 fd6c 	bl	8015634 <tcp_send_empty_ack>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	e152      	b.n	8014e06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b6c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014b6e:	6a3b      	ldr	r3, [r7, #32]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f000 811c 	beq.w	8014dae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014b76:	e002      	b.n	8014b7e <tcp_output+0x156>
 8014b78:	6a3b      	ldr	r3, [r7, #32]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	623b      	str	r3, [r7, #32]
 8014b7e:	6a3b      	ldr	r3, [r7, #32]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d1f8      	bne.n	8014b78 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014b86:	e112      	b.n	8014dae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	899b      	ldrh	r3, [r3, #12]
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7f9 fe35 	bl	800e800 <lwip_htons>
 8014b96:	4603      	mov	r3, r0
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	f003 0304 	and.w	r3, r3, #4
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d006      	beq.n	8014bb0 <tcp_output+0x188>
 8014ba2:	4b2f      	ldr	r3, [pc, #188]	; (8014c60 <tcp_output+0x238>)
 8014ba4:	f240 5236 	movw	r2, #1334	; 0x536
 8014ba8:	4932      	ldr	r1, [pc, #200]	; (8014c74 <tcp_output+0x24c>)
 8014baa:	482f      	ldr	r0, [pc, #188]	; (8014c68 <tcp_output+0x240>)
 8014bac:	f004 fb0c 	bl	80191c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d01f      	beq.n	8014bf8 <tcp_output+0x1d0>
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	8b5b      	ldrh	r3, [r3, #26]
 8014bbc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d119      	bne.n	8014bf8 <tcp_output+0x1d0>
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d00b      	beq.n	8014be4 <tcp_output+0x1bc>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d110      	bne.n	8014bf8 <tcp_output+0x1d0>
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bda:	891a      	ldrh	r2, [r3, #8]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d209      	bcs.n	8014bf8 <tcp_output+0x1d0>
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d004      	beq.n	8014bf8 <tcp_output+0x1d0>
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bf4:	2b08      	cmp	r3, #8
 8014bf6:	d901      	bls.n	8014bfc <tcp_output+0x1d4>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	e000      	b.n	8014bfe <tcp_output+0x1d6>
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d106      	bne.n	8014c10 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	8b5b      	ldrh	r3, [r3, #26]
 8014c06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	f000 80e4 	beq.w	8014dd8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	7d1b      	ldrb	r3, [r3, #20]
 8014c14:	2b02      	cmp	r3, #2
 8014c16:	d00d      	beq.n	8014c34 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	899b      	ldrh	r3, [r3, #12]
 8014c1e:	b29c      	uxth	r4, r3
 8014c20:	2010      	movs	r0, #16
 8014c22:	f7f9 fded 	bl	800e800 <lwip_htons>
 8014c26:	4603      	mov	r3, r0
 8014c28:	461a      	mov	r2, r3
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	4322      	orrs	r2, r4
 8014c30:	b292      	uxth	r2, r2
 8014c32:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014c34:	697a      	ldr	r2, [r7, #20]
 8014c36:	6879      	ldr	r1, [r7, #4]
 8014c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c3a:	f000 f909 	bl	8014e50 <tcp_output_segment>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d016      	beq.n	8014c78 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	8b5b      	ldrh	r3, [r3, #26]
 8014c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	835a      	strh	r2, [r3, #26]
      return err;
 8014c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c5c:	e0d3      	b.n	8014e06 <tcp_output+0x3de>
 8014c5e:	bf00      	nop
 8014c60:	0801befc 	.word	0x0801befc
 8014c64:	0801c440 	.word	0x0801c440
 8014c68:	0801bf50 	.word	0x0801bf50
 8014c6c:	0801c458 	.word	0x0801c458
 8014c70:	2000dae4 	.word	0x2000dae4
 8014c74:	0801c480 	.word	0x0801c480
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7d1b      	ldrb	r3, [r3, #20]
 8014c84:	2b02      	cmp	r3, #2
 8014c86:	d006      	beq.n	8014c96 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	8b5b      	ldrh	r3, [r3, #26]
 8014c8c:	f023 0303 	bic.w	r3, r3, #3
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7f9 fdc4 	bl	800e82a <lwip_htonl>
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca6:	891b      	ldrh	r3, [r3, #8]
 8014ca8:	461d      	mov	r5, r3
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	899b      	ldrh	r3, [r3, #12]
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7f9 fda4 	bl	800e800 <lwip_htons>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	f003 0303 	and.w	r3, r3, #3
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d001      	beq.n	8014cc8 <tcp_output+0x2a0>
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e000      	b.n	8014cca <tcp_output+0x2a2>
 8014cc8:	2300      	movs	r3, #0
 8014cca:	442b      	add	r3, r5
 8014ccc:	4423      	add	r3, r4
 8014cce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	1ad3      	subs	r3, r2, r3
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	da02      	bge.n	8014ce2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	68ba      	ldr	r2, [r7, #8]
 8014ce0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce4:	891b      	ldrh	r3, [r3, #8]
 8014ce6:	461c      	mov	r4, r3
 8014ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	899b      	ldrh	r3, [r3, #12]
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7f9 fd85 	bl	800e800 <lwip_htons>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	f003 0303 	and.w	r3, r3, #3
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d001      	beq.n	8014d06 <tcp_output+0x2de>
 8014d02:	2301      	movs	r3, #1
 8014d04:	e000      	b.n	8014d08 <tcp_output+0x2e0>
 8014d06:	2300      	movs	r3, #0
 8014d08:	4423      	add	r3, r4
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d049      	beq.n	8014da2 <tcp_output+0x37a>
      seg->next = NULL;
 8014d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d10:	2200      	movs	r2, #0
 8014d12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d105      	bne.n	8014d28 <tcp_output+0x300>
        pcb->unacked = seg;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d24:	623b      	str	r3, [r7, #32]
 8014d26:	e03f      	b.n	8014da8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7f9 fd7b 	bl	800e82a <lwip_htonl>
 8014d34:	4604      	mov	r4, r0
 8014d36:	6a3b      	ldr	r3, [r7, #32]
 8014d38:	68db      	ldr	r3, [r3, #12]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7f9 fd74 	bl	800e82a <lwip_htonl>
 8014d42:	4603      	mov	r3, r0
 8014d44:	1ae3      	subs	r3, r4, r3
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	da24      	bge.n	8014d94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	3370      	adds	r3, #112	; 0x70
 8014d4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014d50:	e002      	b.n	8014d58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d011      	beq.n	8014d84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	68db      	ldr	r3, [r3, #12]
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7f9 fd5e 	bl	800e82a <lwip_htonl>
 8014d6e:	4604      	mov	r4, r0
 8014d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7f9 fd57 	bl	800e82a <lwip_htonl>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	dbe6      	blt.n	8014d52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d90:	601a      	str	r2, [r3, #0]
 8014d92:	e009      	b.n	8014da8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014d94:	6a3b      	ldr	r3, [r7, #32]
 8014d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	623b      	str	r3, [r7, #32]
 8014da0:	e002      	b.n	8014da8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014da4:	f7fc fc3f 	bl	8011626 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d012      	beq.n	8014dda <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db6:	68db      	ldr	r3, [r3, #12]
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7f9 fd35 	bl	800e82a <lwip_htonl>
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dc6:	1ad3      	subs	r3, r2, r3
 8014dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014dca:	8912      	ldrh	r2, [r2, #8]
 8014dcc:	4413      	add	r3, r2
  while (seg != NULL &&
 8014dce:	69ba      	ldr	r2, [r7, #24]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	f4bf aed9 	bcs.w	8014b88 <tcp_output+0x160>
 8014dd6:	e000      	b.n	8014dda <tcp_output+0x3b2>
      break;
 8014dd8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d108      	bne.n	8014df4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2200      	movs	r2, #0
 8014de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014dea:	e004      	b.n	8014df6 <tcp_output+0x3ce>
    goto output_done;
 8014dec:	bf00      	nop
 8014dee:	e002      	b.n	8014df6 <tcp_output+0x3ce>
    goto output_done;
 8014df0:	bf00      	nop
 8014df2:	e000      	b.n	8014df6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014df4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	8b5b      	ldrh	r3, [r3, #26]
 8014dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014dfe:	b29a      	uxth	r2, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014e04:	2300      	movs	r3, #0
}
 8014e06:	4618      	mov	r0, r3
 8014e08:	3728      	adds	r7, #40	; 0x28
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e0e:	bf00      	nop

08014e10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d106      	bne.n	8014e2c <tcp_output_segment_busy+0x1c>
 8014e1e:	4b09      	ldr	r3, [pc, #36]	; (8014e44 <tcp_output_segment_busy+0x34>)
 8014e20:	f240 529a 	movw	r2, #1434	; 0x59a
 8014e24:	4908      	ldr	r1, [pc, #32]	; (8014e48 <tcp_output_segment_busy+0x38>)
 8014e26:	4809      	ldr	r0, [pc, #36]	; (8014e4c <tcp_output_segment_busy+0x3c>)
 8014e28:	f004 f9ce 	bl	80191c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	685b      	ldr	r3, [r3, #4]
 8014e30:	7b9b      	ldrb	r3, [r3, #14]
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	d001      	beq.n	8014e3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014e36:	2301      	movs	r3, #1
 8014e38:	e000      	b.n	8014e3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3708      	adds	r7, #8
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	0801befc 	.word	0x0801befc
 8014e48:	0801c498 	.word	0x0801c498
 8014e4c:	0801bf50 	.word	0x0801bf50

08014e50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014e50:	b5b0      	push	{r4, r5, r7, lr}
 8014e52:	b08c      	sub	sp, #48	; 0x30
 8014e54:	af04      	add	r7, sp, #16
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d106      	bne.n	8014e70 <tcp_output_segment+0x20>
 8014e62:	4b63      	ldr	r3, [pc, #396]	; (8014ff0 <tcp_output_segment+0x1a0>)
 8014e64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014e68:	4962      	ldr	r1, [pc, #392]	; (8014ff4 <tcp_output_segment+0x1a4>)
 8014e6a:	4863      	ldr	r0, [pc, #396]	; (8014ff8 <tcp_output_segment+0x1a8>)
 8014e6c:	f004 f9ac 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d106      	bne.n	8014e84 <tcp_output_segment+0x34>
 8014e76:	4b5e      	ldr	r3, [pc, #376]	; (8014ff0 <tcp_output_segment+0x1a0>)
 8014e78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014e7c:	495f      	ldr	r1, [pc, #380]	; (8014ffc <tcp_output_segment+0x1ac>)
 8014e7e:	485e      	ldr	r0, [pc, #376]	; (8014ff8 <tcp_output_segment+0x1a8>)
 8014e80:	f004 f9a2 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d106      	bne.n	8014e98 <tcp_output_segment+0x48>
 8014e8a:	4b59      	ldr	r3, [pc, #356]	; (8014ff0 <tcp_output_segment+0x1a0>)
 8014e8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014e90:	495b      	ldr	r1, [pc, #364]	; (8015000 <tcp_output_segment+0x1b0>)
 8014e92:	4859      	ldr	r0, [pc, #356]	; (8014ff8 <tcp_output_segment+0x1a8>)
 8014e94:	f004 f998 	bl	80191c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f7ff ffb9 	bl	8014e10 <tcp_output_segment_busy>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d001      	beq.n	8014ea8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	e09f      	b.n	8014fe8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	68dc      	ldr	r4, [r3, #12]
 8014eb0:	4610      	mov	r0, r2
 8014eb2:	f7f9 fcba 	bl	800e82a <lwip_htonl>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	68dc      	ldr	r4, [r3, #12]
 8014ec2:	4610      	mov	r0, r2
 8014ec4:	f7f9 fc9c 	bl	800e800 <lwip_htons>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ed0:	68ba      	ldr	r2, [r7, #8]
 8014ed2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014ed4:	441a      	add	r2, r3
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	3314      	adds	r3, #20
 8014ee0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	7a9b      	ldrb	r3, [r3, #10]
 8014ee6:	f003 0301 	and.w	r3, r3, #1
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d015      	beq.n	8014f1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	3304      	adds	r3, #4
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	6879      	ldr	r1, [r7, #4]
 8014ef6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014efa:	f7fc fe8b 	bl	8011c14 <tcp_eff_send_mss_netif>
 8014efe:	4603      	mov	r3, r0
 8014f00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014f02:	8b7b      	ldrh	r3, [r7, #26]
 8014f04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7f9 fc8e 	bl	800e82a <lwip_htonl>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	3304      	adds	r3, #4
 8014f18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	da02      	bge.n	8014f2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2200      	movs	r2, #0
 8014f28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d10c      	bne.n	8014f4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014f32:	4b34      	ldr	r3, [pc, #208]	; (8015004 <tcp_output_segment+0x1b4>)
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7f9 fc72 	bl	800e82a <lwip_htonl>
 8014f46:	4602      	mov	r2, r0
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	68da      	ldr	r2, [r3, #12]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	8959      	ldrh	r1, [r3, #10]
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	8b3a      	ldrh	r2, [r7, #24]
 8014f66:	1a8a      	subs	r2, r1, r2
 8014f68:	b292      	uxth	r2, r2
 8014f6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	8919      	ldrh	r1, [r3, #8]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	8b3a      	ldrh	r2, [r7, #24]
 8014f78:	1a8a      	subs	r2, r1, r2
 8014f7a:	b292      	uxth	r2, r2
 8014f7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	68fa      	ldr	r2, [r7, #12]
 8014f84:	68d2      	ldr	r2, [r2, #12]
 8014f86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	741a      	strb	r2, [r3, #16]
 8014f90:	2200      	movs	r2, #0
 8014f92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	68db      	ldr	r3, [r3, #12]
 8014f98:	f103 0214 	add.w	r2, r3, #20
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	7a9b      	ldrb	r3, [r3, #10]
 8014fa0:	009b      	lsls	r3, r3, #2
 8014fa2:	f003 0304 	and.w	r3, r3, #4
 8014fa6:	4413      	add	r3, r2
 8014fa8:	69fa      	ldr	r2, [r7, #28]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d006      	beq.n	8014fbc <tcp_output_segment+0x16c>
 8014fae:	4b10      	ldr	r3, [pc, #64]	; (8014ff0 <tcp_output_segment+0x1a0>)
 8014fb0:	f240 621c 	movw	r2, #1564	; 0x61c
 8014fb4:	4914      	ldr	r1, [pc, #80]	; (8015008 <tcp_output_segment+0x1b8>)
 8014fb6:	4810      	ldr	r0, [pc, #64]	; (8014ff8 <tcp_output_segment+0x1a8>)
 8014fb8:	f004 f906 	bl	80191c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6858      	ldr	r0, [r3, #4]
 8014fc0:	68b9      	ldr	r1, [r7, #8]
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	1d1c      	adds	r4, r3, #4
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	7add      	ldrb	r5, [r3, #11]
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	7a9b      	ldrb	r3, [r3, #10]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	9202      	str	r2, [sp, #8]
 8014fd2:	2206      	movs	r2, #6
 8014fd4:	9201      	str	r2, [sp, #4]
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	462b      	mov	r3, r5
 8014fda:	4622      	mov	r2, r4
 8014fdc:	f002 fdde 	bl	8017b9c <ip4_output_if>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3720      	adds	r7, #32
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bdb0      	pop	{r4, r5, r7, pc}
 8014ff0:	0801befc 	.word	0x0801befc
 8014ff4:	0801c4c0 	.word	0x0801c4c0
 8014ff8:	0801bf50 	.word	0x0801bf50
 8014ffc:	0801c4e0 	.word	0x0801c4e0
 8015000:	0801c500 	.word	0x0801c500
 8015004:	2000da98 	.word	0x2000da98
 8015008:	0801c524 	.word	0x0801c524

0801500c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801500c:	b5b0      	push	{r4, r5, r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d106      	bne.n	8015028 <tcp_rexmit_rto_prepare+0x1c>
 801501a:	4b31      	ldr	r3, [pc, #196]	; (80150e0 <tcp_rexmit_rto_prepare+0xd4>)
 801501c:	f240 6263 	movw	r2, #1635	; 0x663
 8015020:	4930      	ldr	r1, [pc, #192]	; (80150e4 <tcp_rexmit_rto_prepare+0xd8>)
 8015022:	4831      	ldr	r0, [pc, #196]	; (80150e8 <tcp_rexmit_rto_prepare+0xdc>)
 8015024:	f004 f8d0 	bl	80191c8 <iprintf>

  if (pcb->unacked == NULL) {
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801502c:	2b00      	cmp	r3, #0
 801502e:	d102      	bne.n	8015036 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015030:	f06f 0305 	mvn.w	r3, #5
 8015034:	e050      	b.n	80150d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801503a:	60fb      	str	r3, [r7, #12]
 801503c:	e00b      	b.n	8015056 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801503e:	68f8      	ldr	r0, [r7, #12]
 8015040:	f7ff fee6 	bl	8014e10 <tcp_output_segment_busy>
 8015044:	4603      	mov	r3, r0
 8015046:	2b00      	cmp	r3, #0
 8015048:	d002      	beq.n	8015050 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801504a:	f06f 0305 	mvn.w	r3, #5
 801504e:	e043      	b.n	80150d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d1ef      	bne.n	801503e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801505e:	68f8      	ldr	r0, [r7, #12]
 8015060:	f7ff fed6 	bl	8014e10 <tcp_output_segment_busy>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d002      	beq.n	8015070 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801506a:	f06f 0305 	mvn.w	r3, #5
 801506e:	e033      	b.n	80150d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2200      	movs	r2, #0
 8015084:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	8b5b      	ldrh	r3, [r3, #26]
 801508a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801508e:	b29a      	uxth	r2, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	4618      	mov	r0, r3
 801509c:	f7f9 fbc5 	bl	800e82a <lwip_htonl>
 80150a0:	4604      	mov	r4, r0
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	891b      	ldrh	r3, [r3, #8]
 80150a6:	461d      	mov	r5, r3
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	899b      	ldrh	r3, [r3, #12]
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f9 fba5 	bl	800e800 <lwip_htons>
 80150b6:	4603      	mov	r3, r0
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	f003 0303 	and.w	r3, r3, #3
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d001      	beq.n	80150c6 <tcp_rexmit_rto_prepare+0xba>
 80150c2:	2301      	movs	r3, #1
 80150c4:	e000      	b.n	80150c8 <tcp_rexmit_rto_prepare+0xbc>
 80150c6:	2300      	movs	r3, #0
 80150c8:	442b      	add	r3, r5
 80150ca:	18e2      	adds	r2, r4, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2200      	movs	r2, #0
 80150d4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80150d6:	2300      	movs	r3, #0
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3710      	adds	r7, #16
 80150dc:	46bd      	mov	sp, r7
 80150de:	bdb0      	pop	{r4, r5, r7, pc}
 80150e0:	0801befc 	.word	0x0801befc
 80150e4:	0801c538 	.word	0x0801c538
 80150e8:	0801bf50 	.word	0x0801bf50

080150ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d106      	bne.n	8015108 <tcp_rexmit_rto_commit+0x1c>
 80150fa:	4b0d      	ldr	r3, [pc, #52]	; (8015130 <tcp_rexmit_rto_commit+0x44>)
 80150fc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015100:	490c      	ldr	r1, [pc, #48]	; (8015134 <tcp_rexmit_rto_commit+0x48>)
 8015102:	480d      	ldr	r0, [pc, #52]	; (8015138 <tcp_rexmit_rto_commit+0x4c>)
 8015104:	f004 f860 	bl	80191c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801510e:	2bff      	cmp	r3, #255	; 0xff
 8015110:	d007      	beq.n	8015122 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015118:	3301      	adds	r3, #1
 801511a:	b2da      	uxtb	r2, r3
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7ff fc80 	bl	8014a28 <tcp_output>
}
 8015128:	bf00      	nop
 801512a:	3708      	adds	r7, #8
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	0801befc 	.word	0x0801befc
 8015134:	0801c55c 	.word	0x0801c55c
 8015138:	0801bf50 	.word	0x0801bf50

0801513c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b082      	sub	sp, #8
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d106      	bne.n	8015158 <tcp_rexmit_rto+0x1c>
 801514a:	4b0a      	ldr	r3, [pc, #40]	; (8015174 <tcp_rexmit_rto+0x38>)
 801514c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015150:	4909      	ldr	r1, [pc, #36]	; (8015178 <tcp_rexmit_rto+0x3c>)
 8015152:	480a      	ldr	r0, [pc, #40]	; (801517c <tcp_rexmit_rto+0x40>)
 8015154:	f004 f838 	bl	80191c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f7ff ff57 	bl	801500c <tcp_rexmit_rto_prepare>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d102      	bne.n	801516a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7ff ffc1 	bl	80150ec <tcp_rexmit_rto_commit>
  }
}
 801516a:	bf00      	nop
 801516c:	3708      	adds	r7, #8
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	0801befc 	.word	0x0801befc
 8015178:	0801c580 	.word	0x0801c580
 801517c:	0801bf50 	.word	0x0801bf50

08015180 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015180:	b590      	push	{r4, r7, lr}
 8015182:	b085      	sub	sp, #20
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d106      	bne.n	801519c <tcp_rexmit+0x1c>
 801518e:	4b2f      	ldr	r3, [pc, #188]	; (801524c <tcp_rexmit+0xcc>)
 8015190:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015194:	492e      	ldr	r1, [pc, #184]	; (8015250 <tcp_rexmit+0xd0>)
 8015196:	482f      	ldr	r0, [pc, #188]	; (8015254 <tcp_rexmit+0xd4>)
 8015198:	f004 f816 	bl	80191c8 <iprintf>

  if (pcb->unacked == NULL) {
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d102      	bne.n	80151aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80151a4:	f06f 0305 	mvn.w	r3, #5
 80151a8:	e04c      	b.n	8015244 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80151b0:	68b8      	ldr	r0, [r7, #8]
 80151b2:	f7ff fe2d 	bl	8014e10 <tcp_output_segment_busy>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d002      	beq.n	80151c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80151bc:	f06f 0305 	mvn.w	r3, #5
 80151c0:	e040      	b.n	8015244 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	681a      	ldr	r2, [r3, #0]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	336c      	adds	r3, #108	; 0x6c
 80151ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80151d0:	e002      	b.n	80151d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d011      	beq.n	8015204 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	68db      	ldr	r3, [r3, #12]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7f9 fb1e 	bl	800e82a <lwip_htonl>
 80151ee:	4604      	mov	r4, r0
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7f9 fb17 	bl	800e82a <lwip_htonl>
 80151fc:	4603      	mov	r3, r0
 80151fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015200:	2b00      	cmp	r3, #0
 8015202:	dbe6      	blt.n	80151d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	68ba      	ldr	r2, [r7, #8]
 8015210:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d103      	bne.n	8015222 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	2200      	movs	r2, #0
 801521e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015228:	2bff      	cmp	r3, #255	; 0xff
 801522a:	d007      	beq.n	801523c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015232:	3301      	adds	r3, #1
 8015234:	b2da      	uxtb	r2, r3
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2200      	movs	r2, #0
 8015240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015242:	2300      	movs	r3, #0
}
 8015244:	4618      	mov	r0, r3
 8015246:	3714      	adds	r7, #20
 8015248:	46bd      	mov	sp, r7
 801524a:	bd90      	pop	{r4, r7, pc}
 801524c:	0801befc 	.word	0x0801befc
 8015250:	0801c59c 	.word	0x0801c59c
 8015254:	0801bf50 	.word	0x0801bf50

08015258 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d106      	bne.n	8015274 <tcp_rexmit_fast+0x1c>
 8015266:	4b2a      	ldr	r3, [pc, #168]	; (8015310 <tcp_rexmit_fast+0xb8>)
 8015268:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801526c:	4929      	ldr	r1, [pc, #164]	; (8015314 <tcp_rexmit_fast+0xbc>)
 801526e:	482a      	ldr	r0, [pc, #168]	; (8015318 <tcp_rexmit_fast+0xc0>)
 8015270:	f003 ffaa 	bl	80191c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015278:	2b00      	cmp	r3, #0
 801527a:	d044      	beq.n	8015306 <tcp_rexmit_fast+0xae>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	8b5b      	ldrh	r3, [r3, #26]
 8015280:	f003 0304 	and.w	r3, r3, #4
 8015284:	2b00      	cmp	r3, #0
 8015286:	d13e      	bne.n	8015306 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f7ff ff79 	bl	8015180 <tcp_rexmit>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	d138      	bne.n	8015306 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80152a0:	4293      	cmp	r3, r2
 80152a2:	bf28      	it	cs
 80152a4:	4613      	movcs	r3, r2
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	0fda      	lsrs	r2, r3, #31
 80152aa:	4413      	add	r3, r2
 80152ac:	105b      	asrs	r3, r3, #1
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80152bc:	461a      	mov	r2, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d206      	bcs.n	80152d6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	b29a      	uxth	r2, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152e0:	4619      	mov	r1, r3
 80152e2:	0049      	lsls	r1, r1, #1
 80152e4:	440b      	add	r3, r1
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	4413      	add	r3, r2
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	8b5b      	ldrh	r3, [r3, #26]
 80152f6:	f043 0304 	orr.w	r3, r3, #4
 80152fa:	b29a      	uxth	r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2200      	movs	r2, #0
 8015304:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015306:	bf00      	nop
 8015308:	3708      	adds	r7, #8
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	0801befc 	.word	0x0801befc
 8015314:	0801c5b4 	.word	0x0801c5b4
 8015318:	0801bf50 	.word	0x0801bf50

0801531c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b086      	sub	sp, #24
 8015320:	af00      	add	r7, sp, #0
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	607b      	str	r3, [r7, #4]
 8015326:	460b      	mov	r3, r1
 8015328:	817b      	strh	r3, [r7, #10]
 801532a:	4613      	mov	r3, r2
 801532c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801532e:	897a      	ldrh	r2, [r7, #10]
 8015330:	893b      	ldrh	r3, [r7, #8]
 8015332:	4413      	add	r3, r2
 8015334:	b29b      	uxth	r3, r3
 8015336:	3314      	adds	r3, #20
 8015338:	b29b      	uxth	r3, r3
 801533a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801533e:	4619      	mov	r1, r3
 8015340:	2022      	movs	r0, #34	; 0x22
 8015342:	f7fa fb6b 	bl	800fa1c <pbuf_alloc>
 8015346:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d04d      	beq.n	80153ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801534e:	897b      	ldrh	r3, [r7, #10]
 8015350:	3313      	adds	r3, #19
 8015352:	697a      	ldr	r2, [r7, #20]
 8015354:	8952      	ldrh	r2, [r2, #10]
 8015356:	4293      	cmp	r3, r2
 8015358:	db06      	blt.n	8015368 <tcp_output_alloc_header_common+0x4c>
 801535a:	4b26      	ldr	r3, [pc, #152]	; (80153f4 <tcp_output_alloc_header_common+0xd8>)
 801535c:	f240 7223 	movw	r2, #1827	; 0x723
 8015360:	4925      	ldr	r1, [pc, #148]	; (80153f8 <tcp_output_alloc_header_common+0xdc>)
 8015362:	4826      	ldr	r0, [pc, #152]	; (80153fc <tcp_output_alloc_header_common+0xe0>)
 8015364:	f003 ff30 	bl	80191c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801536e:	8c3b      	ldrh	r3, [r7, #32]
 8015370:	4618      	mov	r0, r3
 8015372:	f7f9 fa45 	bl	800e800 <lwip_htons>
 8015376:	4603      	mov	r3, r0
 8015378:	461a      	mov	r2, r3
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801537e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015380:	4618      	mov	r0, r3
 8015382:	f7f9 fa3d 	bl	800e800 <lwip_htons>
 8015386:	4603      	mov	r3, r0
 8015388:	461a      	mov	r2, r3
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	687a      	ldr	r2, [r7, #4]
 8015392:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f7f9 fa48 	bl	800e82a <lwip_htonl>
 801539a:	4602      	mov	r2, r0
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80153a0:	897b      	ldrh	r3, [r7, #10]
 80153a2:	089b      	lsrs	r3, r3, #2
 80153a4:	b29b      	uxth	r3, r3
 80153a6:	3305      	adds	r3, #5
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	031b      	lsls	r3, r3, #12
 80153ac:	b29a      	uxth	r2, r3
 80153ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	4313      	orrs	r3, r2
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7f9 fa21 	bl	800e800 <lwip_htons>
 80153be:	4603      	mov	r3, r0
 80153c0:	461a      	mov	r2, r3
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80153c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7f9 fa19 	bl	800e800 <lwip_htons>
 80153ce:	4603      	mov	r3, r0
 80153d0:	461a      	mov	r2, r3
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	2200      	movs	r2, #0
 80153da:	741a      	strb	r2, [r3, #16]
 80153dc:	2200      	movs	r2, #0
 80153de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	2200      	movs	r2, #0
 80153e4:	749a      	strb	r2, [r3, #18]
 80153e6:	2200      	movs	r2, #0
 80153e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80153ea:	697b      	ldr	r3, [r7, #20]
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3718      	adds	r7, #24
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	0801befc 	.word	0x0801befc
 80153f8:	0801c5d4 	.word	0x0801c5d4
 80153fc:	0801bf50 	.word	0x0801bf50

08015400 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015400:	b5b0      	push	{r4, r5, r7, lr}
 8015402:	b08a      	sub	sp, #40	; 0x28
 8015404:	af04      	add	r7, sp, #16
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	607b      	str	r3, [r7, #4]
 801540a:	460b      	mov	r3, r1
 801540c:	817b      	strh	r3, [r7, #10]
 801540e:	4613      	mov	r3, r2
 8015410:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d106      	bne.n	8015426 <tcp_output_alloc_header+0x26>
 8015418:	4b15      	ldr	r3, [pc, #84]	; (8015470 <tcp_output_alloc_header+0x70>)
 801541a:	f240 7242 	movw	r2, #1858	; 0x742
 801541e:	4915      	ldr	r1, [pc, #84]	; (8015474 <tcp_output_alloc_header+0x74>)
 8015420:	4815      	ldr	r0, [pc, #84]	; (8015478 <tcp_output_alloc_header+0x78>)
 8015422:	f003 fed1 	bl	80191c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	8adb      	ldrh	r3, [r3, #22]
 801542e:	68fa      	ldr	r2, [r7, #12]
 8015430:	8b12      	ldrh	r2, [r2, #24]
 8015432:	68f9      	ldr	r1, [r7, #12]
 8015434:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015436:	893d      	ldrh	r5, [r7, #8]
 8015438:	897c      	ldrh	r4, [r7, #10]
 801543a:	9103      	str	r1, [sp, #12]
 801543c:	2110      	movs	r1, #16
 801543e:	9102      	str	r1, [sp, #8]
 8015440:	9201      	str	r2, [sp, #4]
 8015442:	9300      	str	r3, [sp, #0]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	462a      	mov	r2, r5
 8015448:	4621      	mov	r1, r4
 801544a:	f7ff ff67 	bl	801531c <tcp_output_alloc_header_common>
 801544e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d006      	beq.n	8015464 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801545e:	441a      	add	r2, r3
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015464:	697b      	ldr	r3, [r7, #20]
}
 8015466:	4618      	mov	r0, r3
 8015468:	3718      	adds	r7, #24
 801546a:	46bd      	mov	sp, r7
 801546c:	bdb0      	pop	{r4, r5, r7, pc}
 801546e:	bf00      	nop
 8015470:	0801befc 	.word	0x0801befc
 8015474:	0801c604 	.word	0x0801c604
 8015478:	0801bf50 	.word	0x0801bf50

0801547c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b088      	sub	sp, #32
 8015480:	af00      	add	r7, sp, #0
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	4611      	mov	r1, r2
 8015488:	461a      	mov	r2, r3
 801548a:	460b      	mov	r3, r1
 801548c:	71fb      	strb	r3, [r7, #7]
 801548e:	4613      	mov	r3, r2
 8015490:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015492:	2300      	movs	r3, #0
 8015494:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d106      	bne.n	80154aa <tcp_output_fill_options+0x2e>
 801549c:	4b13      	ldr	r3, [pc, #76]	; (80154ec <tcp_output_fill_options+0x70>)
 801549e:	f240 7256 	movw	r2, #1878	; 0x756
 80154a2:	4913      	ldr	r1, [pc, #76]	; (80154f0 <tcp_output_fill_options+0x74>)
 80154a4:	4813      	ldr	r0, [pc, #76]	; (80154f4 <tcp_output_fill_options+0x78>)
 80154a6:	f003 fe8f 	bl	80191c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	3314      	adds	r3, #20
 80154b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	f103 0214 	add.w	r2, r3, #20
 80154bc:	8bfb      	ldrh	r3, [r7, #30]
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	4619      	mov	r1, r3
 80154c2:	79fb      	ldrb	r3, [r7, #7]
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	f003 0304 	and.w	r3, r3, #4
 80154ca:	440b      	add	r3, r1
 80154cc:	4413      	add	r3, r2
 80154ce:	697a      	ldr	r2, [r7, #20]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d006      	beq.n	80154e2 <tcp_output_fill_options+0x66>
 80154d4:	4b05      	ldr	r3, [pc, #20]	; (80154ec <tcp_output_fill_options+0x70>)
 80154d6:	f240 7275 	movw	r2, #1909	; 0x775
 80154da:	4907      	ldr	r1, [pc, #28]	; (80154f8 <tcp_output_fill_options+0x7c>)
 80154dc:	4805      	ldr	r0, [pc, #20]	; (80154f4 <tcp_output_fill_options+0x78>)
 80154de:	f003 fe73 	bl	80191c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80154e2:	bf00      	nop
 80154e4:	3720      	adds	r7, #32
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	0801befc 	.word	0x0801befc
 80154f0:	0801c62c 	.word	0x0801c62c
 80154f4:	0801bf50 	.word	0x0801bf50
 80154f8:	0801c524 	.word	0x0801c524

080154fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b08a      	sub	sp, #40	; 0x28
 8015500:	af04      	add	r7, sp, #16
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d106      	bne.n	801551e <tcp_output_control_segment+0x22>
 8015510:	4b1c      	ldr	r3, [pc, #112]	; (8015584 <tcp_output_control_segment+0x88>)
 8015512:	f240 7287 	movw	r2, #1927	; 0x787
 8015516:	491c      	ldr	r1, [pc, #112]	; (8015588 <tcp_output_control_segment+0x8c>)
 8015518:	481c      	ldr	r0, [pc, #112]	; (801558c <tcp_output_control_segment+0x90>)
 801551a:	f003 fe55 	bl	80191c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801551e:	683a      	ldr	r2, [r7, #0]
 8015520:	6879      	ldr	r1, [r7, #4]
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f7fe ff40 	bl	80143a8 <tcp_route>
 8015528:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d102      	bne.n	8015536 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015530:	23fc      	movs	r3, #252	; 0xfc
 8015532:	75fb      	strb	r3, [r7, #23]
 8015534:	e01c      	b.n	8015570 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d006      	beq.n	801554a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	7adb      	ldrb	r3, [r3, #11]
 8015540:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	7a9b      	ldrb	r3, [r3, #10]
 8015546:	757b      	strb	r3, [r7, #21]
 8015548:	e003      	b.n	8015552 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801554a:	23ff      	movs	r3, #255	; 0xff
 801554c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801554e:	2300      	movs	r3, #0
 8015550:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015552:	7dba      	ldrb	r2, [r7, #22]
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	9302      	str	r3, [sp, #8]
 8015558:	2306      	movs	r3, #6
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	7d7b      	ldrb	r3, [r7, #21]
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	4613      	mov	r3, r2
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	6879      	ldr	r1, [r7, #4]
 8015566:	68b8      	ldr	r0, [r7, #8]
 8015568:	f002 fb18 	bl	8017b9c <ip4_output_if>
 801556c:	4603      	mov	r3, r0
 801556e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015570:	68b8      	ldr	r0, [r7, #8]
 8015572:	f7fa fd37 	bl	800ffe4 <pbuf_free>
  return err;
 8015576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801557a:	4618      	mov	r0, r3
 801557c:	3718      	adds	r7, #24
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
 8015582:	bf00      	nop
 8015584:	0801befc 	.word	0x0801befc
 8015588:	0801c654 	.word	0x0801c654
 801558c:	0801bf50 	.word	0x0801bf50

08015590 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015590:	b590      	push	{r4, r7, lr}
 8015592:	b08b      	sub	sp, #44	; 0x2c
 8015594:	af04      	add	r7, sp, #16
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	607a      	str	r2, [r7, #4]
 801559c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d106      	bne.n	80155b2 <tcp_rst+0x22>
 80155a4:	4b1f      	ldr	r3, [pc, #124]	; (8015624 <tcp_rst+0x94>)
 80155a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80155aa:	491f      	ldr	r1, [pc, #124]	; (8015628 <tcp_rst+0x98>)
 80155ac:	481f      	ldr	r0, [pc, #124]	; (801562c <tcp_rst+0x9c>)
 80155ae:	f003 fe0b 	bl	80191c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80155b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d106      	bne.n	80155c6 <tcp_rst+0x36>
 80155b8:	4b1a      	ldr	r3, [pc, #104]	; (8015624 <tcp_rst+0x94>)
 80155ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80155be:	491c      	ldr	r1, [pc, #112]	; (8015630 <tcp_rst+0xa0>)
 80155c0:	481a      	ldr	r0, [pc, #104]	; (801562c <tcp_rst+0x9c>)
 80155c2:	f003 fe01 	bl	80191c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80155c6:	2300      	movs	r3, #0
 80155c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80155ca:	f246 0308 	movw	r3, #24584	; 0x6008
 80155ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80155d0:	7dfb      	ldrb	r3, [r7, #23]
 80155d2:	b29c      	uxth	r4, r3
 80155d4:	68b8      	ldr	r0, [r7, #8]
 80155d6:	f7f9 f928 	bl	800e82a <lwip_htonl>
 80155da:	4602      	mov	r2, r0
 80155dc:	8abb      	ldrh	r3, [r7, #20]
 80155de:	9303      	str	r3, [sp, #12]
 80155e0:	2314      	movs	r3, #20
 80155e2:	9302      	str	r3, [sp, #8]
 80155e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80155e6:	9301      	str	r3, [sp, #4]
 80155e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80155ea:	9300      	str	r3, [sp, #0]
 80155ec:	4613      	mov	r3, r2
 80155ee:	2200      	movs	r2, #0
 80155f0:	4621      	mov	r1, r4
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f7ff fe92 	bl	801531c <tcp_output_alloc_header_common>
 80155f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d00c      	beq.n	801561a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015600:	7dfb      	ldrb	r3, [r7, #23]
 8015602:	2200      	movs	r2, #0
 8015604:	6939      	ldr	r1, [r7, #16]
 8015606:	68f8      	ldr	r0, [r7, #12]
 8015608:	f7ff ff38 	bl	801547c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560e:	683a      	ldr	r2, [r7, #0]
 8015610:	6939      	ldr	r1, [r7, #16]
 8015612:	68f8      	ldr	r0, [r7, #12]
 8015614:	f7ff ff72 	bl	80154fc <tcp_output_control_segment>
 8015618:	e000      	b.n	801561c <tcp_rst+0x8c>
    return;
 801561a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801561c:	371c      	adds	r7, #28
 801561e:	46bd      	mov	sp, r7
 8015620:	bd90      	pop	{r4, r7, pc}
 8015622:	bf00      	nop
 8015624:	0801befc 	.word	0x0801befc
 8015628:	0801c680 	.word	0x0801c680
 801562c:	0801bf50 	.word	0x0801bf50
 8015630:	0801c69c 	.word	0x0801c69c

08015634 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015634:	b590      	push	{r4, r7, lr}
 8015636:	b087      	sub	sp, #28
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801563c:	2300      	movs	r3, #0
 801563e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015640:	2300      	movs	r3, #0
 8015642:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d106      	bne.n	8015658 <tcp_send_empty_ack+0x24>
 801564a:	4b28      	ldr	r3, [pc, #160]	; (80156ec <tcp_send_empty_ack+0xb8>)
 801564c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015650:	4927      	ldr	r1, [pc, #156]	; (80156f0 <tcp_send_empty_ack+0xbc>)
 8015652:	4828      	ldr	r0, [pc, #160]	; (80156f4 <tcp_send_empty_ack+0xc0>)
 8015654:	f003 fdb8 	bl	80191c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015658:	7dfb      	ldrb	r3, [r7, #23]
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	b2db      	uxtb	r3, r3
 801565e:	f003 0304 	and.w	r3, r3, #4
 8015662:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015664:	7d7b      	ldrb	r3, [r7, #21]
 8015666:	b29c      	uxth	r4, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801566c:	4618      	mov	r0, r3
 801566e:	f7f9 f8dc 	bl	800e82a <lwip_htonl>
 8015672:	4603      	mov	r3, r0
 8015674:	2200      	movs	r2, #0
 8015676:	4621      	mov	r1, r4
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f7ff fec1 	bl	8015400 <tcp_output_alloc_header>
 801567e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d109      	bne.n	801569a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	8b5b      	ldrh	r3, [r3, #26]
 801568a:	f043 0303 	orr.w	r3, r3, #3
 801568e:	b29a      	uxth	r2, r3
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015694:	f06f 0301 	mvn.w	r3, #1
 8015698:	e023      	b.n	80156e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801569a:	7dbb      	ldrb	r3, [r7, #22]
 801569c:	7dfa      	ldrb	r2, [r7, #23]
 801569e:	6939      	ldr	r1, [r7, #16]
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff feeb 	bl	801547c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	3304      	adds	r3, #4
 80156ac:	6939      	ldr	r1, [r7, #16]
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f7ff ff24 	bl	80154fc <tcp_output_control_segment>
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80156b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d007      	beq.n	80156d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	8b5b      	ldrh	r3, [r3, #26]
 80156c4:	f043 0303 	orr.w	r3, r3, #3
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	835a      	strh	r2, [r3, #26]
 80156ce:	e006      	b.n	80156de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	8b5b      	ldrh	r3, [r3, #26]
 80156d4:	f023 0303 	bic.w	r3, r3, #3
 80156d8:	b29a      	uxth	r2, r3
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80156de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	371c      	adds	r7, #28
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd90      	pop	{r4, r7, pc}
 80156ea:	bf00      	nop
 80156ec:	0801befc 	.word	0x0801befc
 80156f0:	0801c6b8 	.word	0x0801c6b8
 80156f4:	0801bf50 	.word	0x0801bf50

080156f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80156f8:	b590      	push	{r4, r7, lr}
 80156fa:	b087      	sub	sp, #28
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015700:	2300      	movs	r3, #0
 8015702:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d106      	bne.n	8015718 <tcp_keepalive+0x20>
 801570a:	4b18      	ldr	r3, [pc, #96]	; (801576c <tcp_keepalive+0x74>)
 801570c:	f640 0224 	movw	r2, #2084	; 0x824
 8015710:	4917      	ldr	r1, [pc, #92]	; (8015770 <tcp_keepalive+0x78>)
 8015712:	4818      	ldr	r0, [pc, #96]	; (8015774 <tcp_keepalive+0x7c>)
 8015714:	f003 fd58 	bl	80191c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015718:	7dfb      	ldrb	r3, [r7, #23]
 801571a:	b29c      	uxth	r4, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015720:	3b01      	subs	r3, #1
 8015722:	4618      	mov	r0, r3
 8015724:	f7f9 f881 	bl	800e82a <lwip_htonl>
 8015728:	4603      	mov	r3, r0
 801572a:	2200      	movs	r2, #0
 801572c:	4621      	mov	r1, r4
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7ff fe66 	bl	8015400 <tcp_output_alloc_header>
 8015734:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d102      	bne.n	8015742 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801573c:	f04f 33ff 	mov.w	r3, #4294967295
 8015740:	e010      	b.n	8015764 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015742:	7dfb      	ldrb	r3, [r7, #23]
 8015744:	2200      	movs	r2, #0
 8015746:	6939      	ldr	r1, [r7, #16]
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f7ff fe97 	bl	801547c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801574e:	687a      	ldr	r2, [r7, #4]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	3304      	adds	r3, #4
 8015754:	6939      	ldr	r1, [r7, #16]
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f7ff fed0 	bl	80154fc <tcp_output_control_segment>
 801575c:	4603      	mov	r3, r0
 801575e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015764:	4618      	mov	r0, r3
 8015766:	371c      	adds	r7, #28
 8015768:	46bd      	mov	sp, r7
 801576a:	bd90      	pop	{r4, r7, pc}
 801576c:	0801befc 	.word	0x0801befc
 8015770:	0801c6d8 	.word	0x0801c6d8
 8015774:	0801bf50 	.word	0x0801bf50

08015778 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015778:	b590      	push	{r4, r7, lr}
 801577a:	b08b      	sub	sp, #44	; 0x2c
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015780:	2300      	movs	r3, #0
 8015782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d106      	bne.n	801579a <tcp_zero_window_probe+0x22>
 801578c:	4b4c      	ldr	r3, [pc, #304]	; (80158c0 <tcp_zero_window_probe+0x148>)
 801578e:	f640 024f 	movw	r2, #2127	; 0x84f
 8015792:	494c      	ldr	r1, [pc, #304]	; (80158c4 <tcp_zero_window_probe+0x14c>)
 8015794:	484c      	ldr	r0, [pc, #304]	; (80158c8 <tcp_zero_window_probe+0x150>)
 8015796:	f003 fd17 	bl	80191c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801579e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80157a0:	6a3b      	ldr	r3, [r7, #32]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d101      	bne.n	80157aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80157a6:	2300      	movs	r3, #0
 80157a8:	e086      	b.n	80158b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80157b0:	2bff      	cmp	r3, #255	; 0xff
 80157b2:	d007      	beq.n	80157c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80157ba:	3301      	adds	r3, #1
 80157bc:	b2da      	uxtb	r2, r3
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80157c4:	6a3b      	ldr	r3, [r7, #32]
 80157c6:	68db      	ldr	r3, [r3, #12]
 80157c8:	899b      	ldrh	r3, [r3, #12]
 80157ca:	b29b      	uxth	r3, r3
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7f9 f817 	bl	800e800 <lwip_htons>
 80157d2:	4603      	mov	r3, r0
 80157d4:	b2db      	uxtb	r3, r3
 80157d6:	f003 0301 	and.w	r3, r3, #1
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d005      	beq.n	80157ea <tcp_zero_window_probe+0x72>
 80157de:	6a3b      	ldr	r3, [r7, #32]
 80157e0:	891b      	ldrh	r3, [r3, #8]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d101      	bne.n	80157ea <tcp_zero_window_probe+0x72>
 80157e6:	2301      	movs	r3, #1
 80157e8:	e000      	b.n	80157ec <tcp_zero_window_probe+0x74>
 80157ea:	2300      	movs	r3, #0
 80157ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80157ee:	7ffb      	ldrb	r3, [r7, #31]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	bf0c      	ite	eq
 80157f4:	2301      	moveq	r3, #1
 80157f6:	2300      	movne	r3, #0
 80157f8:	b2db      	uxtb	r3, r3
 80157fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80157fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015800:	b299      	uxth	r1, r3
 8015802:	6a3b      	ldr	r3, [r7, #32]
 8015804:	68db      	ldr	r3, [r3, #12]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	8bba      	ldrh	r2, [r7, #28]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f7ff fdf8 	bl	8015400 <tcp_output_alloc_header>
 8015810:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015812:	69bb      	ldr	r3, [r7, #24]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d102      	bne.n	801581e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015818:	f04f 33ff 	mov.w	r3, #4294967295
 801581c:	e04c      	b.n	80158b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015824:	7ffb      	ldrb	r3, [r7, #31]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d011      	beq.n	801584e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	899b      	ldrh	r3, [r3, #12]
 801582e:	b29b      	uxth	r3, r3
 8015830:	b21b      	sxth	r3, r3
 8015832:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015836:	b21c      	sxth	r4, r3
 8015838:	2011      	movs	r0, #17
 801583a:	f7f8 ffe1 	bl	800e800 <lwip_htons>
 801583e:	4603      	mov	r3, r0
 8015840:	b21b      	sxth	r3, r3
 8015842:	4323      	orrs	r3, r4
 8015844:	b21b      	sxth	r3, r3
 8015846:	b29a      	uxth	r2, r3
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	819a      	strh	r2, [r3, #12]
 801584c:	e010      	b.n	8015870 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	685b      	ldr	r3, [r3, #4]
 8015852:	3314      	adds	r3, #20
 8015854:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015856:	6a3b      	ldr	r3, [r7, #32]
 8015858:	6858      	ldr	r0, [r3, #4]
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	891a      	ldrh	r2, [r3, #8]
 8015860:	6a3b      	ldr	r3, [r7, #32]
 8015862:	891b      	ldrh	r3, [r3, #8]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	b29b      	uxth	r3, r3
 8015868:	2201      	movs	r2, #1
 801586a:	6939      	ldr	r1, [r7, #16]
 801586c:	f7fa fdc0 	bl	80103f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015870:	6a3b      	ldr	r3, [r7, #32]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	4618      	mov	r0, r3
 8015878:	f7f8 ffd7 	bl	800e82a <lwip_htonl>
 801587c:	4603      	mov	r3, r0
 801587e:	3301      	adds	r3, #1
 8015880:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	1ad3      	subs	r3, r2, r3
 801588a:	2b00      	cmp	r3, #0
 801588c:	da02      	bge.n	8015894 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015898:	2200      	movs	r2, #0
 801589a:	69b9      	ldr	r1, [r7, #24]
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f7ff fded 	bl	801547c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	3304      	adds	r3, #4
 80158a8:	69b9      	ldr	r1, [r7, #24]
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f7ff fe26 	bl	80154fc <tcp_output_control_segment>
 80158b0:	4603      	mov	r3, r0
 80158b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80158b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	372c      	adds	r7, #44	; 0x2c
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd90      	pop	{r4, r7, pc}
 80158c0:	0801befc 	.word	0x0801befc
 80158c4:	0801c6f4 	.word	0x0801c6f4
 80158c8:	0801bf50 	.word	0x0801bf50

080158cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80158d4:	f7fa ff0c 	bl	80106f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80158d8:	4b0a      	ldr	r3, [pc, #40]	; (8015904 <tcpip_tcp_timer+0x38>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d103      	bne.n	80158e8 <tcpip_tcp_timer+0x1c>
 80158e0:	4b09      	ldr	r3, [pc, #36]	; (8015908 <tcpip_tcp_timer+0x3c>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d005      	beq.n	80158f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80158e8:	2200      	movs	r2, #0
 80158ea:	4908      	ldr	r1, [pc, #32]	; (801590c <tcpip_tcp_timer+0x40>)
 80158ec:	20fa      	movs	r0, #250	; 0xfa
 80158ee:	f000 f8f3 	bl	8015ad8 <sys_timeout>
 80158f2:	e003      	b.n	80158fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80158f4:	4b06      	ldr	r3, [pc, #24]	; (8015910 <tcpip_tcp_timer+0x44>)
 80158f6:	2200      	movs	r2, #0
 80158f8:	601a      	str	r2, [r3, #0]
  }
}
 80158fa:	bf00      	nop
 80158fc:	bf00      	nop
 80158fe:	3708      	adds	r7, #8
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	2000daa4 	.word	0x2000daa4
 8015908:	2000daa8 	.word	0x2000daa8
 801590c:	080158cd 	.word	0x080158cd
 8015910:	2000daf0 	.word	0x2000daf0

08015914 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015918:	4b0a      	ldr	r3, [pc, #40]	; (8015944 <tcp_timer_needed+0x30>)
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d10f      	bne.n	8015940 <tcp_timer_needed+0x2c>
 8015920:	4b09      	ldr	r3, [pc, #36]	; (8015948 <tcp_timer_needed+0x34>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d103      	bne.n	8015930 <tcp_timer_needed+0x1c>
 8015928:	4b08      	ldr	r3, [pc, #32]	; (801594c <tcp_timer_needed+0x38>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d007      	beq.n	8015940 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015930:	4b04      	ldr	r3, [pc, #16]	; (8015944 <tcp_timer_needed+0x30>)
 8015932:	2201      	movs	r2, #1
 8015934:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015936:	2200      	movs	r2, #0
 8015938:	4905      	ldr	r1, [pc, #20]	; (8015950 <tcp_timer_needed+0x3c>)
 801593a:	20fa      	movs	r0, #250	; 0xfa
 801593c:	f000 f8cc 	bl	8015ad8 <sys_timeout>
  }
}
 8015940:	bf00      	nop
 8015942:	bd80      	pop	{r7, pc}
 8015944:	2000daf0 	.word	0x2000daf0
 8015948:	2000daa4 	.word	0x2000daa4
 801594c:	2000daa8 	.word	0x2000daa8
 8015950:	080158cd 	.word	0x080158cd

08015954 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b086      	sub	sp, #24
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015960:	200a      	movs	r0, #10
 8015962:	f7f9 fc25 	bl	800f1b0 <memp_malloc>
 8015966:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d109      	bne.n	8015982 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d151      	bne.n	8015a18 <sys_timeout_abs+0xc4>
 8015974:	4b2a      	ldr	r3, [pc, #168]	; (8015a20 <sys_timeout_abs+0xcc>)
 8015976:	22be      	movs	r2, #190	; 0xbe
 8015978:	492a      	ldr	r1, [pc, #168]	; (8015a24 <sys_timeout_abs+0xd0>)
 801597a:	482b      	ldr	r0, [pc, #172]	; (8015a28 <sys_timeout_abs+0xd4>)
 801597c:	f003 fc24 	bl	80191c8 <iprintf>
    return;
 8015980:	e04a      	b.n	8015a18 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	2200      	movs	r2, #0
 8015986:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	68ba      	ldr	r2, [r7, #8]
 801598c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	68fa      	ldr	r2, [r7, #12]
 8015998:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801599a:	4b24      	ldr	r3, [pc, #144]	; (8015a2c <sys_timeout_abs+0xd8>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d103      	bne.n	80159aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80159a2:	4a22      	ldr	r2, [pc, #136]	; (8015a2c <sys_timeout_abs+0xd8>)
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	6013      	str	r3, [r2, #0]
    return;
 80159a8:	e037      	b.n	8015a1a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	685a      	ldr	r2, [r3, #4]
 80159ae:	4b1f      	ldr	r3, [pc, #124]	; (8015a2c <sys_timeout_abs+0xd8>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	685b      	ldr	r3, [r3, #4]
 80159b4:	1ad3      	subs	r3, r2, r3
 80159b6:	0fdb      	lsrs	r3, r3, #31
 80159b8:	f003 0301 	and.w	r3, r3, #1
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d007      	beq.n	80159d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80159c2:	4b1a      	ldr	r3, [pc, #104]	; (8015a2c <sys_timeout_abs+0xd8>)
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80159ca:	4a18      	ldr	r2, [pc, #96]	; (8015a2c <sys_timeout_abs+0xd8>)
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	6013      	str	r3, [r2, #0]
 80159d0:	e023      	b.n	8015a1a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80159d2:	4b16      	ldr	r3, [pc, #88]	; (8015a2c <sys_timeout_abs+0xd8>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	617b      	str	r3, [r7, #20]
 80159d8:	e01a      	b.n	8015a10 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d00b      	beq.n	80159fa <sys_timeout_abs+0xa6>
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	685a      	ldr	r2, [r3, #4]
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	1ad3      	subs	r3, r2, r3
 80159ee:	0fdb      	lsrs	r3, r3, #31
 80159f0:	f003 0301 	and.w	r3, r3, #1
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d007      	beq.n	8015a0a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	693a      	ldr	r2, [r7, #16]
 8015a06:	601a      	str	r2, [r3, #0]
        break;
 8015a08:	e007      	b.n	8015a1a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015a0a:	697b      	ldr	r3, [r7, #20]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	617b      	str	r3, [r7, #20]
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1e1      	bne.n	80159da <sys_timeout_abs+0x86>
 8015a16:	e000      	b.n	8015a1a <sys_timeout_abs+0xc6>
    return;
 8015a18:	bf00      	nop
      }
    }
  }
}
 8015a1a:	3718      	adds	r7, #24
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	0801c718 	.word	0x0801c718
 8015a24:	0801c74c 	.word	0x0801c74c
 8015a28:	0801c78c 	.word	0x0801c78c
 8015a2c:	2000dae8 	.word	0x2000dae8

08015a30 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b086      	sub	sp, #24
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	4798      	blx	r3

  now = sys_now();
 8015a42:	f7f4 fcdd 	bl	800a400 <sys_now>
 8015a46:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015a48:	697b      	ldr	r3, [r7, #20]
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	4b0f      	ldr	r3, [pc, #60]	; (8015a8c <lwip_cyclic_timer+0x5c>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	4413      	add	r3, r2
 8015a52:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	693b      	ldr	r3, [r7, #16]
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	0fdb      	lsrs	r3, r3, #31
 8015a5c:	f003 0301 	and.w	r3, r3, #1
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d009      	beq.n	8015a7a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015a66:	697b      	ldr	r3, [r7, #20]
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	4907      	ldr	r1, [pc, #28]	; (8015a90 <lwip_cyclic_timer+0x60>)
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ff ff6e 	bl	8015954 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015a78:	e004      	b.n	8015a84 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	4904      	ldr	r1, [pc, #16]	; (8015a90 <lwip_cyclic_timer+0x60>)
 8015a7e:	68f8      	ldr	r0, [r7, #12]
 8015a80:	f7ff ff68 	bl	8015954 <sys_timeout_abs>
}
 8015a84:	bf00      	nop
 8015a86:	3718      	adds	r7, #24
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	2000daec 	.word	0x2000daec
 8015a90:	08015a31 	.word	0x08015a31

08015a94 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	607b      	str	r3, [r7, #4]
 8015a9e:	e00e      	b.n	8015abe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015aa0:	4a0b      	ldr	r2, [pc, #44]	; (8015ad0 <sys_timeouts_init+0x3c>)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	00db      	lsls	r3, r3, #3
 8015aac:	4a08      	ldr	r2, [pc, #32]	; (8015ad0 <sys_timeouts_init+0x3c>)
 8015aae:	4413      	add	r3, r2
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	4908      	ldr	r1, [pc, #32]	; (8015ad4 <sys_timeouts_init+0x40>)
 8015ab4:	f000 f810 	bl	8015ad8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	3301      	adds	r3, #1
 8015abc:	607b      	str	r3, [r7, #4]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2b02      	cmp	r3, #2
 8015ac2:	d9ed      	bls.n	8015aa0 <sys_timeouts_init+0xc>
  }
}
 8015ac4:	bf00      	nop
 8015ac6:	bf00      	nop
 8015ac8:	3708      	adds	r7, #8
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	0801d3e4 	.word	0x0801d3e4
 8015ad4:	08015a31 	.word	0x08015a31

08015ad8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b086      	sub	sp, #24
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015aea:	d306      	bcc.n	8015afa <sys_timeout+0x22>
 8015aec:	4b0a      	ldr	r3, [pc, #40]	; (8015b18 <sys_timeout+0x40>)
 8015aee:	f240 1229 	movw	r2, #297	; 0x129
 8015af2:	490a      	ldr	r1, [pc, #40]	; (8015b1c <sys_timeout+0x44>)
 8015af4:	480a      	ldr	r0, [pc, #40]	; (8015b20 <sys_timeout+0x48>)
 8015af6:	f003 fb67 	bl	80191c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015afa:	f7f4 fc81 	bl	800a400 <sys_now>
 8015afe:	4602      	mov	r2, r0
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	4413      	add	r3, r2
 8015b04:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	68b9      	ldr	r1, [r7, #8]
 8015b0a:	6978      	ldr	r0, [r7, #20]
 8015b0c:	f7ff ff22 	bl	8015954 <sys_timeout_abs>
#endif
}
 8015b10:	bf00      	nop
 8015b12:	3718      	adds	r7, #24
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	0801c718 	.word	0x0801c718
 8015b1c:	0801c7b4 	.word	0x0801c7b4
 8015b20:	0801c78c 	.word	0x0801c78c

08015b24 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b084      	sub	sp, #16
 8015b28:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015b2a:	f7f4 fc69 	bl	800a400 <sys_now>
 8015b2e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015b30:	4b17      	ldr	r3, [pc, #92]	; (8015b90 <sys_check_timeouts+0x6c>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d022      	beq.n	8015b82 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	68fa      	ldr	r2, [r7, #12]
 8015b42:	1ad3      	subs	r3, r2, r3
 8015b44:	0fdb      	lsrs	r3, r3, #31
 8015b46:	f003 0301 	and.w	r3, r3, #1
 8015b4a:	b2db      	uxtb	r3, r3
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d11a      	bne.n	8015b86 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	4a0e      	ldr	r2, [pc, #56]	; (8015b90 <sys_check_timeouts+0x6c>)
 8015b56:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	4a0a      	ldr	r2, [pc, #40]	; (8015b94 <sys_check_timeouts+0x70>)
 8015b6a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015b6c:	68b9      	ldr	r1, [r7, #8]
 8015b6e:	200a      	movs	r0, #10
 8015b70:	f7f9 fb94 	bl	800f29c <memp_free>
    if (handler != NULL) {
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d0da      	beq.n	8015b30 <sys_check_timeouts+0xc>
      handler(arg);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6838      	ldr	r0, [r7, #0]
 8015b7e:	4798      	blx	r3
  do {
 8015b80:	e7d6      	b.n	8015b30 <sys_check_timeouts+0xc>
      return;
 8015b82:	bf00      	nop
 8015b84:	e000      	b.n	8015b88 <sys_check_timeouts+0x64>
      return;
 8015b86:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015b88:	3710      	adds	r7, #16
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	2000dae8 	.word	0x2000dae8
 8015b94:	2000daec 	.word	0x2000daec

08015b98 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b082      	sub	sp, #8
 8015b9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015b9e:	4b16      	ldr	r3, [pc, #88]	; (8015bf8 <sys_timeouts_sleeptime+0x60>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d102      	bne.n	8015bac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8015baa:	e020      	b.n	8015bee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015bac:	f7f4 fc28 	bl	800a400 <sys_now>
 8015bb0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015bb2:	4b11      	ldr	r3, [pc, #68]	; (8015bf8 <sys_timeouts_sleeptime+0x60>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	685a      	ldr	r2, [r3, #4]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	1ad3      	subs	r3, r2, r3
 8015bbc:	0fdb      	lsrs	r3, r3, #31
 8015bbe:	f003 0301 	and.w	r3, r3, #1
 8015bc2:	b2db      	uxtb	r3, r3
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d001      	beq.n	8015bcc <sys_timeouts_sleeptime+0x34>
    return 0;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	e010      	b.n	8015bee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015bcc:	4b0a      	ldr	r3, [pc, #40]	; (8015bf8 <sys_timeouts_sleeptime+0x60>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	685a      	ldr	r2, [r3, #4]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	1ad3      	subs	r3, r2, r3
 8015bd6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	da06      	bge.n	8015bec <sys_timeouts_sleeptime+0x54>
 8015bde:	4b07      	ldr	r3, [pc, #28]	; (8015bfc <sys_timeouts_sleeptime+0x64>)
 8015be0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015be4:	4906      	ldr	r1, [pc, #24]	; (8015c00 <sys_timeouts_sleeptime+0x68>)
 8015be6:	4807      	ldr	r0, [pc, #28]	; (8015c04 <sys_timeouts_sleeptime+0x6c>)
 8015be8:	f003 faee 	bl	80191c8 <iprintf>
    return ret;
 8015bec:	683b      	ldr	r3, [r7, #0]
  }
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}
 8015bf6:	bf00      	nop
 8015bf8:	2000dae8 	.word	0x2000dae8
 8015bfc:	0801c718 	.word	0x0801c718
 8015c00:	0801c7ec 	.word	0x0801c7ec
 8015c04:	0801c78c 	.word	0x0801c78c

08015c08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015c0c:	f003 fb6a 	bl	80192e4 <rand>
 8015c10:	4603      	mov	r3, r0
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015c1e:	b29a      	uxth	r2, r3
 8015c20:	4b01      	ldr	r3, [pc, #4]	; (8015c28 <udp_init+0x20>)
 8015c22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015c24:	bf00      	nop
 8015c26:	bd80      	pop	{r7, pc}
 8015c28:	20000168 	.word	0x20000168

08015c2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b083      	sub	sp, #12
 8015c30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015c32:	2300      	movs	r3, #0
 8015c34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015c36:	4b17      	ldr	r3, [pc, #92]	; (8015c94 <udp_new_port+0x68>)
 8015c38:	881b      	ldrh	r3, [r3, #0]
 8015c3a:	1c5a      	adds	r2, r3, #1
 8015c3c:	b291      	uxth	r1, r2
 8015c3e:	4a15      	ldr	r2, [pc, #84]	; (8015c94 <udp_new_port+0x68>)
 8015c40:	8011      	strh	r1, [r2, #0]
 8015c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c46:	4293      	cmp	r3, r2
 8015c48:	d103      	bne.n	8015c52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015c4a:	4b12      	ldr	r3, [pc, #72]	; (8015c94 <udp_new_port+0x68>)
 8015c4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015c50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c52:	4b11      	ldr	r3, [pc, #68]	; (8015c98 <udp_new_port+0x6c>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	603b      	str	r3, [r7, #0]
 8015c58:	e011      	b.n	8015c7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	8a5a      	ldrh	r2, [r3, #18]
 8015c5e:	4b0d      	ldr	r3, [pc, #52]	; (8015c94 <udp_new_port+0x68>)
 8015c60:	881b      	ldrh	r3, [r3, #0]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d108      	bne.n	8015c78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015c66:	88fb      	ldrh	r3, [r7, #6]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	80fb      	strh	r3, [r7, #6]
 8015c6c:	88fb      	ldrh	r3, [r7, #6]
 8015c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015c72:	d3e0      	bcc.n	8015c36 <udp_new_port+0xa>
        return 0;
 8015c74:	2300      	movs	r3, #0
 8015c76:	e007      	b.n	8015c88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	603b      	str	r3, [r7, #0]
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d1ea      	bne.n	8015c5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015c84:	4b03      	ldr	r3, [pc, #12]	; (8015c94 <udp_new_port+0x68>)
 8015c86:	881b      	ldrh	r3, [r3, #0]
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	370c      	adds	r7, #12
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr
 8015c94:	20000168 	.word	0x20000168
 8015c98:	2000daf4 	.word	0x2000daf4

08015c9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	60f8      	str	r0, [r7, #12]
 8015ca4:	60b9      	str	r1, [r7, #8]
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d105      	bne.n	8015cbc <udp_input_local_match+0x20>
 8015cb0:	4b27      	ldr	r3, [pc, #156]	; (8015d50 <udp_input_local_match+0xb4>)
 8015cb2:	2287      	movs	r2, #135	; 0x87
 8015cb4:	4927      	ldr	r1, [pc, #156]	; (8015d54 <udp_input_local_match+0xb8>)
 8015cb6:	4828      	ldr	r0, [pc, #160]	; (8015d58 <udp_input_local_match+0xbc>)
 8015cb8:	f003 fa86 	bl	80191c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d105      	bne.n	8015cce <udp_input_local_match+0x32>
 8015cc2:	4b23      	ldr	r3, [pc, #140]	; (8015d50 <udp_input_local_match+0xb4>)
 8015cc4:	2288      	movs	r2, #136	; 0x88
 8015cc6:	4925      	ldr	r1, [pc, #148]	; (8015d5c <udp_input_local_match+0xc0>)
 8015cc8:	4823      	ldr	r0, [pc, #140]	; (8015d58 <udp_input_local_match+0xbc>)
 8015cca:	f003 fa7d 	bl	80191c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	7a1b      	ldrb	r3, [r3, #8]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d00b      	beq.n	8015cee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	7a1a      	ldrb	r2, [r3, #8]
 8015cda:	4b21      	ldr	r3, [pc, #132]	; (8015d60 <udp_input_local_match+0xc4>)
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d001      	beq.n	8015cee <udp_input_local_match+0x52>
    return 0;
 8015cea:	2300      	movs	r3, #0
 8015cec:	e02b      	b.n	8015d46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015cee:	79fb      	ldrb	r3, [r7, #7]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d018      	beq.n	8015d26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d013      	beq.n	8015d22 <udp_input_local_match+0x86>
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d00f      	beq.n	8015d22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d02:	4b17      	ldr	r3, [pc, #92]	; (8015d60 <udp_input_local_match+0xc4>)
 8015d04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d0a:	d00a      	beq.n	8015d22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	681a      	ldr	r2, [r3, #0]
 8015d10:	4b13      	ldr	r3, [pc, #76]	; (8015d60 <udp_input_local_match+0xc4>)
 8015d12:	695b      	ldr	r3, [r3, #20]
 8015d14:	405a      	eors	r2, r3
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	3308      	adds	r3, #8
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d110      	bne.n	8015d44 <udp_input_local_match+0xa8>
          return 1;
 8015d22:	2301      	movs	r3, #1
 8015d24:	e00f      	b.n	8015d46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d009      	beq.n	8015d40 <udp_input_local_match+0xa4>
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d005      	beq.n	8015d40 <udp_input_local_match+0xa4>
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	4b09      	ldr	r3, [pc, #36]	; (8015d60 <udp_input_local_match+0xc4>)
 8015d3a:	695b      	ldr	r3, [r3, #20]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d101      	bne.n	8015d44 <udp_input_local_match+0xa8>
        return 1;
 8015d40:	2301      	movs	r3, #1
 8015d42:	e000      	b.n	8015d46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015d44:	2300      	movs	r3, #0
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3710      	adds	r7, #16
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	0801c800 	.word	0x0801c800
 8015d54:	0801c830 	.word	0x0801c830
 8015d58:	0801c854 	.word	0x0801c854
 8015d5c:	0801c87c 	.word	0x0801c87c
 8015d60:	2000a344 	.word	0x2000a344

08015d64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015d64:	b590      	push	{r4, r7, lr}
 8015d66:	b08d      	sub	sp, #52	; 0x34
 8015d68:	af02      	add	r7, sp, #8
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d105      	bne.n	8015d84 <udp_input+0x20>
 8015d78:	4b7c      	ldr	r3, [pc, #496]	; (8015f6c <udp_input+0x208>)
 8015d7a:	22cf      	movs	r2, #207	; 0xcf
 8015d7c:	497c      	ldr	r1, [pc, #496]	; (8015f70 <udp_input+0x20c>)
 8015d7e:	487d      	ldr	r0, [pc, #500]	; (8015f74 <udp_input+0x210>)
 8015d80:	f003 fa22 	bl	80191c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d105      	bne.n	8015d96 <udp_input+0x32>
 8015d8a:	4b78      	ldr	r3, [pc, #480]	; (8015f6c <udp_input+0x208>)
 8015d8c:	22d0      	movs	r2, #208	; 0xd0
 8015d8e:	497a      	ldr	r1, [pc, #488]	; (8015f78 <udp_input+0x214>)
 8015d90:	4878      	ldr	r0, [pc, #480]	; (8015f74 <udp_input+0x210>)
 8015d92:	f003 fa19 	bl	80191c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	895b      	ldrh	r3, [r3, #10]
 8015d9a:	2b07      	cmp	r3, #7
 8015d9c:	d803      	bhi.n	8015da6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f7fa f920 	bl	800ffe4 <pbuf_free>
    goto end;
 8015da4:	e0de      	b.n	8015f64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015dac:	4b73      	ldr	r3, [pc, #460]	; (8015f7c <udp_input+0x218>)
 8015dae:	695b      	ldr	r3, [r3, #20]
 8015db0:	4a72      	ldr	r2, [pc, #456]	; (8015f7c <udp_input+0x218>)
 8015db2:	6812      	ldr	r2, [r2, #0]
 8015db4:	4611      	mov	r1, r2
 8015db6:	4618      	mov	r0, r3
 8015db8:	f001 ffc8 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	881b      	ldrh	r3, [r3, #0]
 8015dc4:	b29b      	uxth	r3, r3
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7f8 fd1a 	bl	800e800 <lwip_htons>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	885b      	ldrh	r3, [r3, #2]
 8015dd4:	b29b      	uxth	r3, r3
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7f8 fd12 	bl	800e800 <lwip_htons>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015de0:	2300      	movs	r3, #0
 8015de2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015de4:	2300      	movs	r3, #0
 8015de6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015de8:	2300      	movs	r3, #0
 8015dea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015dec:	4b64      	ldr	r3, [pc, #400]	; (8015f80 <udp_input+0x21c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	627b      	str	r3, [r7, #36]	; 0x24
 8015df2:	e054      	b.n	8015e9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df6:	8a5b      	ldrh	r3, [r3, #18]
 8015df8:	89fa      	ldrh	r2, [r7, #14]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d14a      	bne.n	8015e94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015dfe:	7cfb      	ldrb	r3, [r7, #19]
 8015e00:	461a      	mov	r2, r3
 8015e02:	6839      	ldr	r1, [r7, #0]
 8015e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e06:	f7ff ff49 	bl	8015c9c <udp_input_local_match>
 8015e0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d041      	beq.n	8015e94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e12:	7c1b      	ldrb	r3, [r3, #16]
 8015e14:	f003 0304 	and.w	r3, r3, #4
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d11d      	bne.n	8015e58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015e1c:	69fb      	ldr	r3, [r7, #28]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d102      	bne.n	8015e28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e24:	61fb      	str	r3, [r7, #28]
 8015e26:	e017      	b.n	8015e58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015e28:	7cfb      	ldrb	r3, [r7, #19]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d014      	beq.n	8015e58 <udp_input+0xf4>
 8015e2e:	4b53      	ldr	r3, [pc, #332]	; (8015f7c <udp_input+0x218>)
 8015e30:	695b      	ldr	r3, [r3, #20]
 8015e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e36:	d10f      	bne.n	8015e58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015e38:	69fb      	ldr	r3, [r7, #28]
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	3304      	adds	r3, #4
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d008      	beq.n	8015e58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	3304      	adds	r3, #4
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d101      	bne.n	8015e58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5a:	8a9b      	ldrh	r3, [r3, #20]
 8015e5c:	8a3a      	ldrh	r2, [r7, #16]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d118      	bne.n	8015e94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d005      	beq.n	8015e76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e6c:	685a      	ldr	r2, [r3, #4]
 8015e6e:	4b43      	ldr	r3, [pc, #268]	; (8015f7c <udp_input+0x218>)
 8015e70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d10e      	bne.n	8015e94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015e76:	6a3b      	ldr	r3, [r7, #32]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d014      	beq.n	8015ea6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e7e:	68da      	ldr	r2, [r3, #12]
 8015e80:	6a3b      	ldr	r3, [r7, #32]
 8015e82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015e84:	4b3e      	ldr	r3, [pc, #248]	; (8015f80 <udp_input+0x21c>)
 8015e86:	681a      	ldr	r2, [r3, #0]
 8015e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015e8c:	4a3c      	ldr	r2, [pc, #240]	; (8015f80 <udp_input+0x21c>)
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015e92:	e008      	b.n	8015ea6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8015e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d1a7      	bne.n	8015df4 <udp_input+0x90>
 8015ea4:	e000      	b.n	8015ea8 <udp_input+0x144>
        break;
 8015ea6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d101      	bne.n	8015eb2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d002      	beq.n	8015ebe <udp_input+0x15a>
    for_us = 1;
 8015eb8:	2301      	movs	r3, #1
 8015eba:	76fb      	strb	r3, [r7, #27]
 8015ebc:	e00a      	b.n	8015ed4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	3304      	adds	r3, #4
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	4b2d      	ldr	r3, [pc, #180]	; (8015f7c <udp_input+0x218>)
 8015ec6:	695b      	ldr	r3, [r3, #20]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	bf0c      	ite	eq
 8015ecc:	2301      	moveq	r3, #1
 8015ece:	2300      	movne	r3, #0
 8015ed0:	b2db      	uxtb	r3, r3
 8015ed2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015ed4:	7efb      	ldrb	r3, [r7, #27]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d041      	beq.n	8015f5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015eda:	2108      	movs	r1, #8
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f7f9 fffb 	bl	800fed8 <pbuf_remove_header>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00a      	beq.n	8015efe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015ee8:	4b20      	ldr	r3, [pc, #128]	; (8015f6c <udp_input+0x208>)
 8015eea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015eee:	4925      	ldr	r1, [pc, #148]	; (8015f84 <udp_input+0x220>)
 8015ef0:	4820      	ldr	r0, [pc, #128]	; (8015f74 <udp_input+0x210>)
 8015ef2:	f003 f969 	bl	80191c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7fa f874 	bl	800ffe4 <pbuf_free>
      goto end;
 8015efc:	e032      	b.n	8015f64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d012      	beq.n	8015f2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f06:	699b      	ldr	r3, [r3, #24]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d00a      	beq.n	8015f22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0e:	699c      	ldr	r4, [r3, #24]
 8015f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f12:	69d8      	ldr	r0, [r3, #28]
 8015f14:	8a3b      	ldrh	r3, [r7, #16]
 8015f16:	9300      	str	r3, [sp, #0]
 8015f18:	4b1b      	ldr	r3, [pc, #108]	; (8015f88 <udp_input+0x224>)
 8015f1a:	687a      	ldr	r2, [r7, #4]
 8015f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015f20:	e021      	b.n	8015f66 <udp_input+0x202>
        pbuf_free(p);
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7fa f85e 	bl	800ffe4 <pbuf_free>
        goto end;
 8015f28:	e01c      	b.n	8015f64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015f2a:	7cfb      	ldrb	r3, [r7, #19]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d112      	bne.n	8015f56 <udp_input+0x1f2>
 8015f30:	4b12      	ldr	r3, [pc, #72]	; (8015f7c <udp_input+0x218>)
 8015f32:	695b      	ldr	r3, [r3, #20]
 8015f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f38:	2be0      	cmp	r3, #224	; 0xe0
 8015f3a:	d00c      	beq.n	8015f56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015f3c:	4b0f      	ldr	r3, [pc, #60]	; (8015f7c <udp_input+0x218>)
 8015f3e:	899b      	ldrh	r3, [r3, #12]
 8015f40:	3308      	adds	r3, #8
 8015f42:	b29b      	uxth	r3, r3
 8015f44:	b21b      	sxth	r3, r3
 8015f46:	4619      	mov	r1, r3
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7fa f838 	bl	800ffbe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015f4e:	2103      	movs	r1, #3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f001 fbdb 	bl	801770c <icmp_dest_unreach>
      pbuf_free(p);
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f7fa f844 	bl	800ffe4 <pbuf_free>
  return;
 8015f5c:	e003      	b.n	8015f66 <udp_input+0x202>
    pbuf_free(p);
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f7fa f840 	bl	800ffe4 <pbuf_free>
  return;
 8015f64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015f66:	372c      	adds	r7, #44	; 0x2c
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd90      	pop	{r4, r7, pc}
 8015f6c:	0801c800 	.word	0x0801c800
 8015f70:	0801c8a4 	.word	0x0801c8a4
 8015f74:	0801c854 	.word	0x0801c854
 8015f78:	0801c8bc 	.word	0x0801c8bc
 8015f7c:	2000a344 	.word	0x2000a344
 8015f80:	2000daf4 	.word	0x2000daf4
 8015f84:	0801c8d8 	.word	0x0801c8d8
 8015f88:	2000a354 	.word	0x2000a354

08015f8c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d109      	bne.n	8015fb0 <udp_send+0x24>
 8015f9c:	4b11      	ldr	r3, [pc, #68]	; (8015fe4 <udp_send+0x58>)
 8015f9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015fa2:	4911      	ldr	r1, [pc, #68]	; (8015fe8 <udp_send+0x5c>)
 8015fa4:	4811      	ldr	r0, [pc, #68]	; (8015fec <udp_send+0x60>)
 8015fa6:	f003 f90f 	bl	80191c8 <iprintf>
 8015faa:	f06f 030f 	mvn.w	r3, #15
 8015fae:	e015      	b.n	8015fdc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d109      	bne.n	8015fca <udp_send+0x3e>
 8015fb6:	4b0b      	ldr	r3, [pc, #44]	; (8015fe4 <udp_send+0x58>)
 8015fb8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015fbc:	490c      	ldr	r1, [pc, #48]	; (8015ff0 <udp_send+0x64>)
 8015fbe:	480b      	ldr	r0, [pc, #44]	; (8015fec <udp_send+0x60>)
 8015fc0:	f003 f902 	bl	80191c8 <iprintf>
 8015fc4:	f06f 030f 	mvn.w	r3, #15
 8015fc8:	e008      	b.n	8015fdc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	1d1a      	adds	r2, r3, #4
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	8a9b      	ldrh	r3, [r3, #20]
 8015fd2:	6839      	ldr	r1, [r7, #0]
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f000 f80d 	bl	8015ff4 <udp_sendto>
 8015fda:	4603      	mov	r3, r0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3708      	adds	r7, #8
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}
 8015fe4:	0801c800 	.word	0x0801c800
 8015fe8:	0801c8f4 	.word	0x0801c8f4
 8015fec:	0801c854 	.word	0x0801c854
 8015ff0:	0801c90c 	.word	0x0801c90c

08015ff4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b088      	sub	sp, #32
 8015ff8:	af02      	add	r7, sp, #8
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	60b9      	str	r1, [r7, #8]
 8015ffe:	607a      	str	r2, [r7, #4]
 8016000:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d109      	bne.n	801601c <udp_sendto+0x28>
 8016008:	4b23      	ldr	r3, [pc, #140]	; (8016098 <udp_sendto+0xa4>)
 801600a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801600e:	4923      	ldr	r1, [pc, #140]	; (801609c <udp_sendto+0xa8>)
 8016010:	4823      	ldr	r0, [pc, #140]	; (80160a0 <udp_sendto+0xac>)
 8016012:	f003 f8d9 	bl	80191c8 <iprintf>
 8016016:	f06f 030f 	mvn.w	r3, #15
 801601a:	e038      	b.n	801608e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d109      	bne.n	8016036 <udp_sendto+0x42>
 8016022:	4b1d      	ldr	r3, [pc, #116]	; (8016098 <udp_sendto+0xa4>)
 8016024:	f240 2219 	movw	r2, #537	; 0x219
 8016028:	491e      	ldr	r1, [pc, #120]	; (80160a4 <udp_sendto+0xb0>)
 801602a:	481d      	ldr	r0, [pc, #116]	; (80160a0 <udp_sendto+0xac>)
 801602c:	f003 f8cc 	bl	80191c8 <iprintf>
 8016030:	f06f 030f 	mvn.w	r3, #15
 8016034:	e02b      	b.n	801608e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d109      	bne.n	8016050 <udp_sendto+0x5c>
 801603c:	4b16      	ldr	r3, [pc, #88]	; (8016098 <udp_sendto+0xa4>)
 801603e:	f240 221a 	movw	r2, #538	; 0x21a
 8016042:	4919      	ldr	r1, [pc, #100]	; (80160a8 <udp_sendto+0xb4>)
 8016044:	4816      	ldr	r0, [pc, #88]	; (80160a0 <udp_sendto+0xac>)
 8016046:	f003 f8bf 	bl	80191c8 <iprintf>
 801604a:	f06f 030f 	mvn.w	r3, #15
 801604e:	e01e      	b.n	801608e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	7a1b      	ldrb	r3, [r3, #8]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d006      	beq.n	8016066 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	7a1b      	ldrb	r3, [r3, #8]
 801605c:	4618      	mov	r0, r3
 801605e:	f7f9 fc33 	bl	800f8c8 <netif_get_by_index>
 8016062:	6178      	str	r0, [r7, #20]
 8016064:	e003      	b.n	801606e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f001 fbda 	bl	8017820 <ip4_route>
 801606c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d102      	bne.n	801607a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016074:	f06f 0303 	mvn.w	r3, #3
 8016078:	e009      	b.n	801608e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801607a:	887a      	ldrh	r2, [r7, #2]
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	4613      	mov	r3, r2
 8016082:	687a      	ldr	r2, [r7, #4]
 8016084:	68b9      	ldr	r1, [r7, #8]
 8016086:	68f8      	ldr	r0, [r7, #12]
 8016088:	f000 f810 	bl	80160ac <udp_sendto_if>
 801608c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801608e:	4618      	mov	r0, r3
 8016090:	3718      	adds	r7, #24
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}
 8016096:	bf00      	nop
 8016098:	0801c800 	.word	0x0801c800
 801609c:	0801c924 	.word	0x0801c924
 80160a0:	0801c854 	.word	0x0801c854
 80160a4:	0801c93c 	.word	0x0801c93c
 80160a8:	0801c958 	.word	0x0801c958

080160ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b088      	sub	sp, #32
 80160b0:	af02      	add	r7, sp, #8
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
 80160b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d109      	bne.n	80160d4 <udp_sendto_if+0x28>
 80160c0:	4b2e      	ldr	r3, [pc, #184]	; (801617c <udp_sendto_if+0xd0>)
 80160c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160c6:	492e      	ldr	r1, [pc, #184]	; (8016180 <udp_sendto_if+0xd4>)
 80160c8:	482e      	ldr	r0, [pc, #184]	; (8016184 <udp_sendto_if+0xd8>)
 80160ca:	f003 f87d 	bl	80191c8 <iprintf>
 80160ce:	f06f 030f 	mvn.w	r3, #15
 80160d2:	e04f      	b.n	8016174 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d109      	bne.n	80160ee <udp_sendto_if+0x42>
 80160da:	4b28      	ldr	r3, [pc, #160]	; (801617c <udp_sendto_if+0xd0>)
 80160dc:	f240 2281 	movw	r2, #641	; 0x281
 80160e0:	4929      	ldr	r1, [pc, #164]	; (8016188 <udp_sendto_if+0xdc>)
 80160e2:	4828      	ldr	r0, [pc, #160]	; (8016184 <udp_sendto_if+0xd8>)
 80160e4:	f003 f870 	bl	80191c8 <iprintf>
 80160e8:	f06f 030f 	mvn.w	r3, #15
 80160ec:	e042      	b.n	8016174 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d109      	bne.n	8016108 <udp_sendto_if+0x5c>
 80160f4:	4b21      	ldr	r3, [pc, #132]	; (801617c <udp_sendto_if+0xd0>)
 80160f6:	f240 2282 	movw	r2, #642	; 0x282
 80160fa:	4924      	ldr	r1, [pc, #144]	; (801618c <udp_sendto_if+0xe0>)
 80160fc:	4821      	ldr	r0, [pc, #132]	; (8016184 <udp_sendto_if+0xd8>)
 80160fe:	f003 f863 	bl	80191c8 <iprintf>
 8016102:	f06f 030f 	mvn.w	r3, #15
 8016106:	e035      	b.n	8016174 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016108:	6a3b      	ldr	r3, [r7, #32]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d109      	bne.n	8016122 <udp_sendto_if+0x76>
 801610e:	4b1b      	ldr	r3, [pc, #108]	; (801617c <udp_sendto_if+0xd0>)
 8016110:	f240 2283 	movw	r2, #643	; 0x283
 8016114:	491e      	ldr	r1, [pc, #120]	; (8016190 <udp_sendto_if+0xe4>)
 8016116:	481b      	ldr	r0, [pc, #108]	; (8016184 <udp_sendto_if+0xd8>)
 8016118:	f003 f856 	bl	80191c8 <iprintf>
 801611c:	f06f 030f 	mvn.w	r3, #15
 8016120:	e028      	b.n	8016174 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d009      	beq.n	801613c <udp_sendto_if+0x90>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d005      	beq.n	801613c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016138:	2be0      	cmp	r3, #224	; 0xe0
 801613a:	d103      	bne.n	8016144 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801613c:	6a3b      	ldr	r3, [r7, #32]
 801613e:	3304      	adds	r3, #4
 8016140:	617b      	str	r3, [r7, #20]
 8016142:	e00b      	b.n	801615c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	6a3b      	ldr	r3, [r7, #32]
 801614a:	3304      	adds	r3, #4
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	429a      	cmp	r2, r3
 8016150:	d002      	beq.n	8016158 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016152:	f06f 0303 	mvn.w	r3, #3
 8016156:	e00d      	b.n	8016174 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801615c:	887a      	ldrh	r2, [r7, #2]
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	9301      	str	r3, [sp, #4]
 8016162:	6a3b      	ldr	r3, [r7, #32]
 8016164:	9300      	str	r3, [sp, #0]
 8016166:	4613      	mov	r3, r2
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	68b9      	ldr	r1, [r7, #8]
 801616c:	68f8      	ldr	r0, [r7, #12]
 801616e:	f000 f811 	bl	8016194 <udp_sendto_if_src>
 8016172:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016174:	4618      	mov	r0, r3
 8016176:	3718      	adds	r7, #24
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}
 801617c:	0801c800 	.word	0x0801c800
 8016180:	0801c974 	.word	0x0801c974
 8016184:	0801c854 	.word	0x0801c854
 8016188:	0801c990 	.word	0x0801c990
 801618c:	0801c9ac 	.word	0x0801c9ac
 8016190:	0801c9cc 	.word	0x0801c9cc

08016194 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b08c      	sub	sp, #48	; 0x30
 8016198:	af04      	add	r7, sp, #16
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	607a      	str	r2, [r7, #4]
 80161a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d109      	bne.n	80161bc <udp_sendto_if_src+0x28>
 80161a8:	4b65      	ldr	r3, [pc, #404]	; (8016340 <udp_sendto_if_src+0x1ac>)
 80161aa:	f240 22d1 	movw	r2, #721	; 0x2d1
 80161ae:	4965      	ldr	r1, [pc, #404]	; (8016344 <udp_sendto_if_src+0x1b0>)
 80161b0:	4865      	ldr	r0, [pc, #404]	; (8016348 <udp_sendto_if_src+0x1b4>)
 80161b2:	f003 f809 	bl	80191c8 <iprintf>
 80161b6:	f06f 030f 	mvn.w	r3, #15
 80161ba:	e0bc      	b.n	8016336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d109      	bne.n	80161d6 <udp_sendto_if_src+0x42>
 80161c2:	4b5f      	ldr	r3, [pc, #380]	; (8016340 <udp_sendto_if_src+0x1ac>)
 80161c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80161c8:	4960      	ldr	r1, [pc, #384]	; (801634c <udp_sendto_if_src+0x1b8>)
 80161ca:	485f      	ldr	r0, [pc, #380]	; (8016348 <udp_sendto_if_src+0x1b4>)
 80161cc:	f002 fffc 	bl	80191c8 <iprintf>
 80161d0:	f06f 030f 	mvn.w	r3, #15
 80161d4:	e0af      	b.n	8016336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d109      	bne.n	80161f0 <udp_sendto_if_src+0x5c>
 80161dc:	4b58      	ldr	r3, [pc, #352]	; (8016340 <udp_sendto_if_src+0x1ac>)
 80161de:	f240 22d3 	movw	r2, #723	; 0x2d3
 80161e2:	495b      	ldr	r1, [pc, #364]	; (8016350 <udp_sendto_if_src+0x1bc>)
 80161e4:	4858      	ldr	r0, [pc, #352]	; (8016348 <udp_sendto_if_src+0x1b4>)
 80161e6:	f002 ffef 	bl	80191c8 <iprintf>
 80161ea:	f06f 030f 	mvn.w	r3, #15
 80161ee:	e0a2      	b.n	8016336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d109      	bne.n	801620a <udp_sendto_if_src+0x76>
 80161f6:	4b52      	ldr	r3, [pc, #328]	; (8016340 <udp_sendto_if_src+0x1ac>)
 80161f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80161fc:	4955      	ldr	r1, [pc, #340]	; (8016354 <udp_sendto_if_src+0x1c0>)
 80161fe:	4852      	ldr	r0, [pc, #328]	; (8016348 <udp_sendto_if_src+0x1b4>)
 8016200:	f002 ffe2 	bl	80191c8 <iprintf>
 8016204:	f06f 030f 	mvn.w	r3, #15
 8016208:	e095      	b.n	8016336 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620c:	2b00      	cmp	r3, #0
 801620e:	d109      	bne.n	8016224 <udp_sendto_if_src+0x90>
 8016210:	4b4b      	ldr	r3, [pc, #300]	; (8016340 <udp_sendto_if_src+0x1ac>)
 8016212:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016216:	4950      	ldr	r1, [pc, #320]	; (8016358 <udp_sendto_if_src+0x1c4>)
 8016218:	484b      	ldr	r0, [pc, #300]	; (8016348 <udp_sendto_if_src+0x1b4>)
 801621a:	f002 ffd5 	bl	80191c8 <iprintf>
 801621e:	f06f 030f 	mvn.w	r3, #15
 8016222:	e088      	b.n	8016336 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	8a5b      	ldrh	r3, [r3, #18]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d10f      	bne.n	801624c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801622c:	68f9      	ldr	r1, [r7, #12]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	8a5b      	ldrh	r3, [r3, #18]
 8016232:	461a      	mov	r2, r3
 8016234:	68f8      	ldr	r0, [r7, #12]
 8016236:	f000 f893 	bl	8016360 <udp_bind>
 801623a:	4603      	mov	r3, r0
 801623c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801623e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d002      	beq.n	801624c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016246:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801624a:	e074      	b.n	8016336 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	891b      	ldrh	r3, [r3, #8]
 8016250:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016254:	4293      	cmp	r3, r2
 8016256:	d902      	bls.n	801625e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016258:	f04f 33ff 	mov.w	r3, #4294967295
 801625c:	e06b      	b.n	8016336 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801625e:	2108      	movs	r1, #8
 8016260:	68b8      	ldr	r0, [r7, #8]
 8016262:	f7f9 fe29 	bl	800feb8 <pbuf_add_header>
 8016266:	4603      	mov	r3, r0
 8016268:	2b00      	cmp	r3, #0
 801626a:	d015      	beq.n	8016298 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801626c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016270:	2108      	movs	r1, #8
 8016272:	2022      	movs	r0, #34	; 0x22
 8016274:	f7f9 fbd2 	bl	800fa1c <pbuf_alloc>
 8016278:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d102      	bne.n	8016286 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016280:	f04f 33ff 	mov.w	r3, #4294967295
 8016284:	e057      	b.n	8016336 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	891b      	ldrh	r3, [r3, #8]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d006      	beq.n	801629c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801628e:	68b9      	ldr	r1, [r7, #8]
 8016290:	69f8      	ldr	r0, [r7, #28]
 8016292:	f7f9 ffcb 	bl	801022c <pbuf_chain>
 8016296:	e001      	b.n	801629c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	895b      	ldrh	r3, [r3, #10]
 80162a0:	2b07      	cmp	r3, #7
 80162a2:	d806      	bhi.n	80162b2 <udp_sendto_if_src+0x11e>
 80162a4:	4b26      	ldr	r3, [pc, #152]	; (8016340 <udp_sendto_if_src+0x1ac>)
 80162a6:	f240 320d 	movw	r2, #781	; 0x30d
 80162aa:	492c      	ldr	r1, [pc, #176]	; (801635c <udp_sendto_if_src+0x1c8>)
 80162ac:	4826      	ldr	r0, [pc, #152]	; (8016348 <udp_sendto_if_src+0x1b4>)
 80162ae:	f002 ff8b 	bl	80191c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	8a5b      	ldrh	r3, [r3, #18]
 80162bc:	4618      	mov	r0, r3
 80162be:	f7f8 fa9f 	bl	800e800 <lwip_htons>
 80162c2:	4603      	mov	r3, r0
 80162c4:	461a      	mov	r2, r3
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80162ca:	887b      	ldrh	r3, [r7, #2]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7f8 fa97 	bl	800e800 <lwip_htons>
 80162d2:	4603      	mov	r3, r0
 80162d4:	461a      	mov	r2, r3
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	2200      	movs	r2, #0
 80162de:	719a      	strb	r2, [r3, #6]
 80162e0:	2200      	movs	r2, #0
 80162e2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	891b      	ldrh	r3, [r3, #8]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7f8 fa89 	bl	800e800 <lwip_htons>
 80162ee:	4603      	mov	r3, r0
 80162f0:	461a      	mov	r2, r3
 80162f2:	697b      	ldr	r3, [r7, #20]
 80162f4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80162f6:	2311      	movs	r3, #17
 80162f8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7adb      	ldrb	r3, [r3, #11]
 80162fe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	7a9b      	ldrb	r3, [r3, #10]
 8016304:	7cb9      	ldrb	r1, [r7, #18]
 8016306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016308:	9202      	str	r2, [sp, #8]
 801630a:	7cfa      	ldrb	r2, [r7, #19]
 801630c:	9201      	str	r2, [sp, #4]
 801630e:	9300      	str	r3, [sp, #0]
 8016310:	460b      	mov	r3, r1
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016316:	69f8      	ldr	r0, [r7, #28]
 8016318:	f001 fc6a 	bl	8017bf0 <ip4_output_if_src>
 801631c:	4603      	mov	r3, r0
 801631e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016320:	69fa      	ldr	r2, [r7, #28]
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	429a      	cmp	r2, r3
 8016326:	d004      	beq.n	8016332 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016328:	69f8      	ldr	r0, [r7, #28]
 801632a:	f7f9 fe5b 	bl	800ffe4 <pbuf_free>
    q = NULL;
 801632e:	2300      	movs	r3, #0
 8016330:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016332:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3720      	adds	r7, #32
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	0801c800 	.word	0x0801c800
 8016344:	0801c9ec 	.word	0x0801c9ec
 8016348:	0801c854 	.word	0x0801c854
 801634c:	0801ca0c 	.word	0x0801ca0c
 8016350:	0801ca2c 	.word	0x0801ca2c
 8016354:	0801ca50 	.word	0x0801ca50
 8016358:	0801ca74 	.word	0x0801ca74
 801635c:	0801ca98 	.word	0x0801ca98

08016360 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b086      	sub	sp, #24
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	4613      	mov	r3, r2
 801636c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d101      	bne.n	8016378 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016374:	4b39      	ldr	r3, [pc, #228]	; (801645c <udp_bind+0xfc>)
 8016376:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d109      	bne.n	8016392 <udp_bind+0x32>
 801637e:	4b38      	ldr	r3, [pc, #224]	; (8016460 <udp_bind+0x100>)
 8016380:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016384:	4937      	ldr	r1, [pc, #220]	; (8016464 <udp_bind+0x104>)
 8016386:	4838      	ldr	r0, [pc, #224]	; (8016468 <udp_bind+0x108>)
 8016388:	f002 ff1e 	bl	80191c8 <iprintf>
 801638c:	f06f 030f 	mvn.w	r3, #15
 8016390:	e060      	b.n	8016454 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016392:	2300      	movs	r3, #0
 8016394:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016396:	4b35      	ldr	r3, [pc, #212]	; (801646c <udp_bind+0x10c>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	617b      	str	r3, [r7, #20]
 801639c:	e009      	b.n	80163b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801639e:	68fa      	ldr	r2, [r7, #12]
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d102      	bne.n	80163ac <udp_bind+0x4c>
      rebind = 1;
 80163a6:	2301      	movs	r3, #1
 80163a8:	74fb      	strb	r3, [r7, #19]
      break;
 80163aa:	e005      	b.n	80163b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	617b      	str	r3, [r7, #20]
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d1f2      	bne.n	801639e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80163b8:	88fb      	ldrh	r3, [r7, #6]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d109      	bne.n	80163d2 <udp_bind+0x72>
    port = udp_new_port();
 80163be:	f7ff fc35 	bl	8015c2c <udp_new_port>
 80163c2:	4603      	mov	r3, r0
 80163c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80163c6:	88fb      	ldrh	r3, [r7, #6]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d12c      	bne.n	8016426 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80163cc:	f06f 0307 	mvn.w	r3, #7
 80163d0:	e040      	b.n	8016454 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163d2:	4b26      	ldr	r3, [pc, #152]	; (801646c <udp_bind+0x10c>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	617b      	str	r3, [r7, #20]
 80163d8:	e022      	b.n	8016420 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80163da:	68fa      	ldr	r2, [r7, #12]
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	429a      	cmp	r2, r3
 80163e0:	d01b      	beq.n	801641a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80163e2:	697b      	ldr	r3, [r7, #20]
 80163e4:	8a5b      	ldrh	r3, [r3, #18]
 80163e6:	88fa      	ldrh	r2, [r7, #6]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d116      	bne.n	801641a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d00d      	beq.n	8016414 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d00a      	beq.n	8016414 <udp_bind+0xb4>
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d006      	beq.n	8016414 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016406:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016408:	2b00      	cmp	r3, #0
 801640a:	d003      	beq.n	8016414 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801640c:	697b      	ldr	r3, [r7, #20]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d102      	bne.n	801641a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016414:	f06f 0307 	mvn.w	r3, #7
 8016418:	e01c      	b.n	8016454 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801641a:	697b      	ldr	r3, [r7, #20]
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	617b      	str	r3, [r7, #20]
 8016420:	697b      	ldr	r3, [r7, #20]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d1d9      	bne.n	80163da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <udp_bind+0xd2>
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	e000      	b.n	8016434 <udp_bind+0xd4>
 8016432:	2300      	movs	r3, #0
 8016434:	68fa      	ldr	r2, [r7, #12]
 8016436:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	88fa      	ldrh	r2, [r7, #6]
 801643c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801643e:	7cfb      	ldrb	r3, [r7, #19]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d106      	bne.n	8016452 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016444:	4b09      	ldr	r3, [pc, #36]	; (801646c <udp_bind+0x10c>)
 8016446:	681a      	ldr	r2, [r3, #0]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801644c:	4a07      	ldr	r2, [pc, #28]	; (801646c <udp_bind+0x10c>)
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016452:	2300      	movs	r3, #0
}
 8016454:	4618      	mov	r0, r3
 8016456:	3718      	adds	r7, #24
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	0801d3fc 	.word	0x0801d3fc
 8016460:	0801c800 	.word	0x0801c800
 8016464:	0801cac8 	.word	0x0801cac8
 8016468:	0801c854 	.word	0x0801c854
 801646c:	2000daf4 	.word	0x2000daf4

08016470 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b086      	sub	sp, #24
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	4613      	mov	r3, r2
 801647c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d109      	bne.n	8016498 <udp_connect+0x28>
 8016484:	4b2c      	ldr	r3, [pc, #176]	; (8016538 <udp_connect+0xc8>)
 8016486:	f240 4235 	movw	r2, #1077	; 0x435
 801648a:	492c      	ldr	r1, [pc, #176]	; (801653c <udp_connect+0xcc>)
 801648c:	482c      	ldr	r0, [pc, #176]	; (8016540 <udp_connect+0xd0>)
 801648e:	f002 fe9b 	bl	80191c8 <iprintf>
 8016492:	f06f 030f 	mvn.w	r3, #15
 8016496:	e04b      	b.n	8016530 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d109      	bne.n	80164b2 <udp_connect+0x42>
 801649e:	4b26      	ldr	r3, [pc, #152]	; (8016538 <udp_connect+0xc8>)
 80164a0:	f240 4236 	movw	r2, #1078	; 0x436
 80164a4:	4927      	ldr	r1, [pc, #156]	; (8016544 <udp_connect+0xd4>)
 80164a6:	4826      	ldr	r0, [pc, #152]	; (8016540 <udp_connect+0xd0>)
 80164a8:	f002 fe8e 	bl	80191c8 <iprintf>
 80164ac:	f06f 030f 	mvn.w	r3, #15
 80164b0:	e03e      	b.n	8016530 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	8a5b      	ldrh	r3, [r3, #18]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d10f      	bne.n	80164da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80164ba:	68f9      	ldr	r1, [r7, #12]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	8a5b      	ldrh	r3, [r3, #18]
 80164c0:	461a      	mov	r2, r3
 80164c2:	68f8      	ldr	r0, [r7, #12]
 80164c4:	f7ff ff4c 	bl	8016360 <udp_bind>
 80164c8:	4603      	mov	r3, r0
 80164ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80164cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d002      	beq.n	80164da <udp_connect+0x6a>
      return err;
 80164d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80164d8:	e02a      	b.n	8016530 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d002      	beq.n	80164e6 <udp_connect+0x76>
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	e000      	b.n	80164e8 <udp_connect+0x78>
 80164e6:	2300      	movs	r3, #0
 80164e8:	68fa      	ldr	r2, [r7, #12]
 80164ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	88fa      	ldrh	r2, [r7, #6]
 80164f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	7c1b      	ldrb	r3, [r3, #16]
 80164f6:	f043 0304 	orr.w	r3, r3, #4
 80164fa:	b2da      	uxtb	r2, r3
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016500:	4b11      	ldr	r3, [pc, #68]	; (8016548 <udp_connect+0xd8>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	617b      	str	r3, [r7, #20]
 8016506:	e008      	b.n	801651a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016508:	68fa      	ldr	r2, [r7, #12]
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	429a      	cmp	r2, r3
 801650e:	d101      	bne.n	8016514 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016510:	2300      	movs	r3, #0
 8016512:	e00d      	b.n	8016530 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	617b      	str	r3, [r7, #20]
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d1f3      	bne.n	8016508 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016520:	4b09      	ldr	r3, [pc, #36]	; (8016548 <udp_connect+0xd8>)
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016528:	4a07      	ldr	r2, [pc, #28]	; (8016548 <udp_connect+0xd8>)
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801652e:	2300      	movs	r3, #0
}
 8016530:	4618      	mov	r0, r3
 8016532:	3718      	adds	r7, #24
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}
 8016538:	0801c800 	.word	0x0801c800
 801653c:	0801cae0 	.word	0x0801cae0
 8016540:	0801c854 	.word	0x0801c854
 8016544:	0801cafc 	.word	0x0801cafc
 8016548:	2000daf4 	.word	0x2000daf4

0801654c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d107      	bne.n	801656a <udp_disconnect+0x1e>
 801655a:	4b0d      	ldr	r3, [pc, #52]	; (8016590 <udp_disconnect+0x44>)
 801655c:	f240 426a 	movw	r2, #1130	; 0x46a
 8016560:	490c      	ldr	r1, [pc, #48]	; (8016594 <udp_disconnect+0x48>)
 8016562:	480d      	ldr	r0, [pc, #52]	; (8016598 <udp_disconnect+0x4c>)
 8016564:	f002 fe30 	bl	80191c8 <iprintf>
 8016568:	e00f      	b.n	801658a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2200      	movs	r2, #0
 8016574:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2200      	movs	r2, #0
 801657a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	7c1b      	ldrb	r3, [r3, #16]
 8016580:	f023 0304 	bic.w	r3, r3, #4
 8016584:	b2da      	uxtb	r2, r3
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	741a      	strb	r2, [r3, #16]
}
 801658a:	3708      	adds	r7, #8
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}
 8016590:	0801c800 	.word	0x0801c800
 8016594:	0801cb18 	.word	0x0801cb18
 8016598:	0801c854 	.word	0x0801c854

0801659c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b084      	sub	sp, #16
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d107      	bne.n	80165be <udp_recv+0x22>
 80165ae:	4b08      	ldr	r3, [pc, #32]	; (80165d0 <udp_recv+0x34>)
 80165b0:	f240 428a 	movw	r2, #1162	; 0x48a
 80165b4:	4907      	ldr	r1, [pc, #28]	; (80165d4 <udp_recv+0x38>)
 80165b6:	4808      	ldr	r0, [pc, #32]	; (80165d8 <udp_recv+0x3c>)
 80165b8:	f002 fe06 	bl	80191c8 <iprintf>
 80165bc:	e005      	b.n	80165ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	68ba      	ldr	r2, [r7, #8]
 80165c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	61da      	str	r2, [r3, #28]
}
 80165ca:	3710      	adds	r7, #16
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	0801c800 	.word	0x0801c800
 80165d4:	0801cb34 	.word	0x0801cb34
 80165d8:	0801c854 	.word	0x0801c854

080165dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80165e2:	2000      	movs	r0, #0
 80165e4:	f7f8 fde4 	bl	800f1b0 <memp_malloc>
 80165e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d007      	beq.n	8016600 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80165f0:	2220      	movs	r2, #32
 80165f2:	2100      	movs	r1, #0
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f002 fd4a 	bl	801908e <memset>
    pcb->ttl = UDP_TTL;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	22ff      	movs	r2, #255	; 0xff
 80165fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016600:	687b      	ldr	r3, [r7, #4]
}
 8016602:	4618      	mov	r0, r3
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
	...

0801660c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801660c:	b480      	push	{r7}
 801660e:	b085      	sub	sp, #20
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d01e      	beq.n	801665a <udp_netif_ip_addr_changed+0x4e>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d01a      	beq.n	801665a <udp_netif_ip_addr_changed+0x4e>
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d017      	beq.n	801665a <udp_netif_ip_addr_changed+0x4e>
 801662a:	683b      	ldr	r3, [r7, #0]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d013      	beq.n	801665a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016632:	4b0d      	ldr	r3, [pc, #52]	; (8016668 <udp_netif_ip_addr_changed+0x5c>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	60fb      	str	r3, [r7, #12]
 8016638:	e00c      	b.n	8016654 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	429a      	cmp	r2, r3
 8016644:	d103      	bne.n	801664e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	681a      	ldr	r2, [r3, #0]
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	60fb      	str	r3, [r7, #12]
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d1ef      	bne.n	801663a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801665a:	bf00      	nop
 801665c:	3714      	adds	r7, #20
 801665e:	46bd      	mov	sp, r7
 8016660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop
 8016668:	2000daf4 	.word	0x2000daf4

0801666c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016674:	4915      	ldr	r1, [pc, #84]	; (80166cc <etharp_free_entry+0x60>)
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	4613      	mov	r3, r2
 801667a:	005b      	lsls	r3, r3, #1
 801667c:	4413      	add	r3, r2
 801667e:	00db      	lsls	r3, r3, #3
 8016680:	440b      	add	r3, r1
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d013      	beq.n	80166b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016688:	4910      	ldr	r1, [pc, #64]	; (80166cc <etharp_free_entry+0x60>)
 801668a:	687a      	ldr	r2, [r7, #4]
 801668c:	4613      	mov	r3, r2
 801668e:	005b      	lsls	r3, r3, #1
 8016690:	4413      	add	r3, r2
 8016692:	00db      	lsls	r3, r3, #3
 8016694:	440b      	add	r3, r1
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	4618      	mov	r0, r3
 801669a:	f7f9 fca3 	bl	800ffe4 <pbuf_free>
    arp_table[i].q = NULL;
 801669e:	490b      	ldr	r1, [pc, #44]	; (80166cc <etharp_free_entry+0x60>)
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	4613      	mov	r3, r2
 80166a4:	005b      	lsls	r3, r3, #1
 80166a6:	4413      	add	r3, r2
 80166a8:	00db      	lsls	r3, r3, #3
 80166aa:	440b      	add	r3, r1
 80166ac:	2200      	movs	r2, #0
 80166ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80166b0:	4906      	ldr	r1, [pc, #24]	; (80166cc <etharp_free_entry+0x60>)
 80166b2:	687a      	ldr	r2, [r7, #4]
 80166b4:	4613      	mov	r3, r2
 80166b6:	005b      	lsls	r3, r3, #1
 80166b8:	4413      	add	r3, r2
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	440b      	add	r3, r1
 80166be:	3314      	adds	r3, #20
 80166c0:	2200      	movs	r2, #0
 80166c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80166c4:	bf00      	nop
 80166c6:	3708      	adds	r7, #8
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	2000daf8 	.word	0x2000daf8

080166d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166d6:	2300      	movs	r3, #0
 80166d8:	607b      	str	r3, [r7, #4]
 80166da:	e096      	b.n	801680a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80166dc:	494f      	ldr	r1, [pc, #316]	; (801681c <etharp_tmr+0x14c>)
 80166de:	687a      	ldr	r2, [r7, #4]
 80166e0:	4613      	mov	r3, r2
 80166e2:	005b      	lsls	r3, r3, #1
 80166e4:	4413      	add	r3, r2
 80166e6:	00db      	lsls	r3, r3, #3
 80166e8:	440b      	add	r3, r1
 80166ea:	3314      	adds	r3, #20
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80166f0:	78fb      	ldrb	r3, [r7, #3]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	f000 8086 	beq.w	8016804 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80166f8:	4948      	ldr	r1, [pc, #288]	; (801681c <etharp_tmr+0x14c>)
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	4613      	mov	r3, r2
 80166fe:	005b      	lsls	r3, r3, #1
 8016700:	4413      	add	r3, r2
 8016702:	00db      	lsls	r3, r3, #3
 8016704:	440b      	add	r3, r1
 8016706:	3312      	adds	r3, #18
 8016708:	881b      	ldrh	r3, [r3, #0]
 801670a:	3301      	adds	r3, #1
 801670c:	b298      	uxth	r0, r3
 801670e:	4943      	ldr	r1, [pc, #268]	; (801681c <etharp_tmr+0x14c>)
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	4613      	mov	r3, r2
 8016714:	005b      	lsls	r3, r3, #1
 8016716:	4413      	add	r3, r2
 8016718:	00db      	lsls	r3, r3, #3
 801671a:	440b      	add	r3, r1
 801671c:	3312      	adds	r3, #18
 801671e:	4602      	mov	r2, r0
 8016720:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016722:	493e      	ldr	r1, [pc, #248]	; (801681c <etharp_tmr+0x14c>)
 8016724:	687a      	ldr	r2, [r7, #4]
 8016726:	4613      	mov	r3, r2
 8016728:	005b      	lsls	r3, r3, #1
 801672a:	4413      	add	r3, r2
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	440b      	add	r3, r1
 8016730:	3312      	adds	r3, #18
 8016732:	881b      	ldrh	r3, [r3, #0]
 8016734:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016738:	d215      	bcs.n	8016766 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801673a:	4938      	ldr	r1, [pc, #224]	; (801681c <etharp_tmr+0x14c>)
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	4613      	mov	r3, r2
 8016740:	005b      	lsls	r3, r3, #1
 8016742:	4413      	add	r3, r2
 8016744:	00db      	lsls	r3, r3, #3
 8016746:	440b      	add	r3, r1
 8016748:	3314      	adds	r3, #20
 801674a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801674c:	2b01      	cmp	r3, #1
 801674e:	d10e      	bne.n	801676e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016750:	4932      	ldr	r1, [pc, #200]	; (801681c <etharp_tmr+0x14c>)
 8016752:	687a      	ldr	r2, [r7, #4]
 8016754:	4613      	mov	r3, r2
 8016756:	005b      	lsls	r3, r3, #1
 8016758:	4413      	add	r3, r2
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	440b      	add	r3, r1
 801675e:	3312      	adds	r3, #18
 8016760:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016762:	2b04      	cmp	r3, #4
 8016764:	d903      	bls.n	801676e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f7ff ff80 	bl	801666c <etharp_free_entry>
 801676c:	e04a      	b.n	8016804 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801676e:	492b      	ldr	r1, [pc, #172]	; (801681c <etharp_tmr+0x14c>)
 8016770:	687a      	ldr	r2, [r7, #4]
 8016772:	4613      	mov	r3, r2
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	4413      	add	r3, r2
 8016778:	00db      	lsls	r3, r3, #3
 801677a:	440b      	add	r3, r1
 801677c:	3314      	adds	r3, #20
 801677e:	781b      	ldrb	r3, [r3, #0]
 8016780:	2b03      	cmp	r3, #3
 8016782:	d10a      	bne.n	801679a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016784:	4925      	ldr	r1, [pc, #148]	; (801681c <etharp_tmr+0x14c>)
 8016786:	687a      	ldr	r2, [r7, #4]
 8016788:	4613      	mov	r3, r2
 801678a:	005b      	lsls	r3, r3, #1
 801678c:	4413      	add	r3, r2
 801678e:	00db      	lsls	r3, r3, #3
 8016790:	440b      	add	r3, r1
 8016792:	3314      	adds	r3, #20
 8016794:	2204      	movs	r2, #4
 8016796:	701a      	strb	r2, [r3, #0]
 8016798:	e034      	b.n	8016804 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801679a:	4920      	ldr	r1, [pc, #128]	; (801681c <etharp_tmr+0x14c>)
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	4613      	mov	r3, r2
 80167a0:	005b      	lsls	r3, r3, #1
 80167a2:	4413      	add	r3, r2
 80167a4:	00db      	lsls	r3, r3, #3
 80167a6:	440b      	add	r3, r1
 80167a8:	3314      	adds	r3, #20
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	2b04      	cmp	r3, #4
 80167ae:	d10a      	bne.n	80167c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80167b0:	491a      	ldr	r1, [pc, #104]	; (801681c <etharp_tmr+0x14c>)
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	4613      	mov	r3, r2
 80167b6:	005b      	lsls	r3, r3, #1
 80167b8:	4413      	add	r3, r2
 80167ba:	00db      	lsls	r3, r3, #3
 80167bc:	440b      	add	r3, r1
 80167be:	3314      	adds	r3, #20
 80167c0:	2202      	movs	r2, #2
 80167c2:	701a      	strb	r2, [r3, #0]
 80167c4:	e01e      	b.n	8016804 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80167c6:	4915      	ldr	r1, [pc, #84]	; (801681c <etharp_tmr+0x14c>)
 80167c8:	687a      	ldr	r2, [r7, #4]
 80167ca:	4613      	mov	r3, r2
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	4413      	add	r3, r2
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	440b      	add	r3, r1
 80167d4:	3314      	adds	r3, #20
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d113      	bne.n	8016804 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80167dc:	490f      	ldr	r1, [pc, #60]	; (801681c <etharp_tmr+0x14c>)
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	4613      	mov	r3, r2
 80167e2:	005b      	lsls	r3, r3, #1
 80167e4:	4413      	add	r3, r2
 80167e6:	00db      	lsls	r3, r3, #3
 80167e8:	440b      	add	r3, r1
 80167ea:	3308      	adds	r3, #8
 80167ec:	6818      	ldr	r0, [r3, #0]
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	4613      	mov	r3, r2
 80167f2:	005b      	lsls	r3, r3, #1
 80167f4:	4413      	add	r3, r2
 80167f6:	00db      	lsls	r3, r3, #3
 80167f8:	4a08      	ldr	r2, [pc, #32]	; (801681c <etharp_tmr+0x14c>)
 80167fa:	4413      	add	r3, r2
 80167fc:	3304      	adds	r3, #4
 80167fe:	4619      	mov	r1, r3
 8016800:	f000 fe6e 	bl	80174e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	3301      	adds	r3, #1
 8016808:	607b      	str	r3, [r7, #4]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2b09      	cmp	r3, #9
 801680e:	f77f af65 	ble.w	80166dc <etharp_tmr+0xc>
      }
    }
  }
}
 8016812:	bf00      	nop
 8016814:	bf00      	nop
 8016816:	3708      	adds	r7, #8
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}
 801681c:	2000daf8 	.word	0x2000daf8

08016820 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b08a      	sub	sp, #40	; 0x28
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	460b      	mov	r3, r1
 801682a:	607a      	str	r2, [r7, #4]
 801682c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801682e:	230a      	movs	r3, #10
 8016830:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016832:	230a      	movs	r3, #10
 8016834:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016836:	230a      	movs	r3, #10
 8016838:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801683a:	2300      	movs	r3, #0
 801683c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801683e:	230a      	movs	r3, #10
 8016840:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016842:	2300      	movs	r3, #0
 8016844:	83bb      	strh	r3, [r7, #28]
 8016846:	2300      	movs	r3, #0
 8016848:	837b      	strh	r3, [r7, #26]
 801684a:	2300      	movs	r3, #0
 801684c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801684e:	2300      	movs	r3, #0
 8016850:	843b      	strh	r3, [r7, #32]
 8016852:	e0ae      	b.n	80169b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016854:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016858:	49a6      	ldr	r1, [pc, #664]	; (8016af4 <etharp_find_entry+0x2d4>)
 801685a:	4613      	mov	r3, r2
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	4413      	add	r3, r2
 8016860:	00db      	lsls	r3, r3, #3
 8016862:	440b      	add	r3, r1
 8016864:	3314      	adds	r3, #20
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801686a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801686e:	2b0a      	cmp	r3, #10
 8016870:	d105      	bne.n	801687e <etharp_find_entry+0x5e>
 8016872:	7dfb      	ldrb	r3, [r7, #23]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d102      	bne.n	801687e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016878:	8c3b      	ldrh	r3, [r7, #32]
 801687a:	847b      	strh	r3, [r7, #34]	; 0x22
 801687c:	e095      	b.n	80169aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801687e:	7dfb      	ldrb	r3, [r7, #23]
 8016880:	2b00      	cmp	r3, #0
 8016882:	f000 8092 	beq.w	80169aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016886:	7dfb      	ldrb	r3, [r7, #23]
 8016888:	2b01      	cmp	r3, #1
 801688a:	d009      	beq.n	80168a0 <etharp_find_entry+0x80>
 801688c:	7dfb      	ldrb	r3, [r7, #23]
 801688e:	2b01      	cmp	r3, #1
 8016890:	d806      	bhi.n	80168a0 <etharp_find_entry+0x80>
 8016892:	4b99      	ldr	r3, [pc, #612]	; (8016af8 <etharp_find_entry+0x2d8>)
 8016894:	f240 1223 	movw	r2, #291	; 0x123
 8016898:	4998      	ldr	r1, [pc, #608]	; (8016afc <etharp_find_entry+0x2dc>)
 801689a:	4899      	ldr	r0, [pc, #612]	; (8016b00 <etharp_find_entry+0x2e0>)
 801689c:	f002 fc94 	bl	80191c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d020      	beq.n	80168e8 <etharp_find_entry+0xc8>
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	6819      	ldr	r1, [r3, #0]
 80168aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168ae:	4891      	ldr	r0, [pc, #580]	; (8016af4 <etharp_find_entry+0x2d4>)
 80168b0:	4613      	mov	r3, r2
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	4413      	add	r3, r2
 80168b6:	00db      	lsls	r3, r3, #3
 80168b8:	4403      	add	r3, r0
 80168ba:	3304      	adds	r3, #4
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	4299      	cmp	r1, r3
 80168c0:	d112      	bne.n	80168e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d00c      	beq.n	80168e2 <etharp_find_entry+0xc2>
 80168c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168cc:	4989      	ldr	r1, [pc, #548]	; (8016af4 <etharp_find_entry+0x2d4>)
 80168ce:	4613      	mov	r3, r2
 80168d0:	005b      	lsls	r3, r3, #1
 80168d2:	4413      	add	r3, r2
 80168d4:	00db      	lsls	r3, r3, #3
 80168d6:	440b      	add	r3, r1
 80168d8:	3308      	adds	r3, #8
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d102      	bne.n	80168e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80168e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168e6:	e100      	b.n	8016aea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80168e8:	7dfb      	ldrb	r3, [r7, #23]
 80168ea:	2b01      	cmp	r3, #1
 80168ec:	d140      	bne.n	8016970 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80168ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168f2:	4980      	ldr	r1, [pc, #512]	; (8016af4 <etharp_find_entry+0x2d4>)
 80168f4:	4613      	mov	r3, r2
 80168f6:	005b      	lsls	r3, r3, #1
 80168f8:	4413      	add	r3, r2
 80168fa:	00db      	lsls	r3, r3, #3
 80168fc:	440b      	add	r3, r1
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d01a      	beq.n	801693a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016904:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016908:	497a      	ldr	r1, [pc, #488]	; (8016af4 <etharp_find_entry+0x2d4>)
 801690a:	4613      	mov	r3, r2
 801690c:	005b      	lsls	r3, r3, #1
 801690e:	4413      	add	r3, r2
 8016910:	00db      	lsls	r3, r3, #3
 8016912:	440b      	add	r3, r1
 8016914:	3312      	adds	r3, #18
 8016916:	881b      	ldrh	r3, [r3, #0]
 8016918:	8bba      	ldrh	r2, [r7, #28]
 801691a:	429a      	cmp	r2, r3
 801691c:	d845      	bhi.n	80169aa <etharp_find_entry+0x18a>
            old_queue = i;
 801691e:	8c3b      	ldrh	r3, [r7, #32]
 8016920:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016926:	4973      	ldr	r1, [pc, #460]	; (8016af4 <etharp_find_entry+0x2d4>)
 8016928:	4613      	mov	r3, r2
 801692a:	005b      	lsls	r3, r3, #1
 801692c:	4413      	add	r3, r2
 801692e:	00db      	lsls	r3, r3, #3
 8016930:	440b      	add	r3, r1
 8016932:	3312      	adds	r3, #18
 8016934:	881b      	ldrh	r3, [r3, #0]
 8016936:	83bb      	strh	r3, [r7, #28]
 8016938:	e037      	b.n	80169aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801693a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801693e:	496d      	ldr	r1, [pc, #436]	; (8016af4 <etharp_find_entry+0x2d4>)
 8016940:	4613      	mov	r3, r2
 8016942:	005b      	lsls	r3, r3, #1
 8016944:	4413      	add	r3, r2
 8016946:	00db      	lsls	r3, r3, #3
 8016948:	440b      	add	r3, r1
 801694a:	3312      	adds	r3, #18
 801694c:	881b      	ldrh	r3, [r3, #0]
 801694e:	8b7a      	ldrh	r2, [r7, #26]
 8016950:	429a      	cmp	r2, r3
 8016952:	d82a      	bhi.n	80169aa <etharp_find_entry+0x18a>
            old_pending = i;
 8016954:	8c3b      	ldrh	r3, [r7, #32]
 8016956:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016958:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801695c:	4965      	ldr	r1, [pc, #404]	; (8016af4 <etharp_find_entry+0x2d4>)
 801695e:	4613      	mov	r3, r2
 8016960:	005b      	lsls	r3, r3, #1
 8016962:	4413      	add	r3, r2
 8016964:	00db      	lsls	r3, r3, #3
 8016966:	440b      	add	r3, r1
 8016968:	3312      	adds	r3, #18
 801696a:	881b      	ldrh	r3, [r3, #0]
 801696c:	837b      	strh	r3, [r7, #26]
 801696e:	e01c      	b.n	80169aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016970:	7dfb      	ldrb	r3, [r7, #23]
 8016972:	2b01      	cmp	r3, #1
 8016974:	d919      	bls.n	80169aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801697a:	495e      	ldr	r1, [pc, #376]	; (8016af4 <etharp_find_entry+0x2d4>)
 801697c:	4613      	mov	r3, r2
 801697e:	005b      	lsls	r3, r3, #1
 8016980:	4413      	add	r3, r2
 8016982:	00db      	lsls	r3, r3, #3
 8016984:	440b      	add	r3, r1
 8016986:	3312      	adds	r3, #18
 8016988:	881b      	ldrh	r3, [r3, #0]
 801698a:	8b3a      	ldrh	r2, [r7, #24]
 801698c:	429a      	cmp	r2, r3
 801698e:	d80c      	bhi.n	80169aa <etharp_find_entry+0x18a>
            old_stable = i;
 8016990:	8c3b      	ldrh	r3, [r7, #32]
 8016992:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016994:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016998:	4956      	ldr	r1, [pc, #344]	; (8016af4 <etharp_find_entry+0x2d4>)
 801699a:	4613      	mov	r3, r2
 801699c:	005b      	lsls	r3, r3, #1
 801699e:	4413      	add	r3, r2
 80169a0:	00db      	lsls	r3, r3, #3
 80169a2:	440b      	add	r3, r1
 80169a4:	3312      	adds	r3, #18
 80169a6:	881b      	ldrh	r3, [r3, #0]
 80169a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169aa:	8c3b      	ldrh	r3, [r7, #32]
 80169ac:	3301      	adds	r3, #1
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	843b      	strh	r3, [r7, #32]
 80169b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80169b6:	2b09      	cmp	r3, #9
 80169b8:	f77f af4c 	ble.w	8016854 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80169bc:	7afb      	ldrb	r3, [r7, #11]
 80169be:	f003 0302 	and.w	r3, r3, #2
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d108      	bne.n	80169d8 <etharp_find_entry+0x1b8>
 80169c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80169ca:	2b0a      	cmp	r3, #10
 80169cc:	d107      	bne.n	80169de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80169ce:	7afb      	ldrb	r3, [r7, #11]
 80169d0:	f003 0301 	and.w	r3, r3, #1
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d102      	bne.n	80169de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80169d8:	f04f 33ff 	mov.w	r3, #4294967295
 80169dc:	e085      	b.n	8016aea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80169de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80169e2:	2b09      	cmp	r3, #9
 80169e4:	dc02      	bgt.n	80169ec <etharp_find_entry+0x1cc>
    i = empty;
 80169e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169e8:	843b      	strh	r3, [r7, #32]
 80169ea:	e039      	b.n	8016a60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80169ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80169f0:	2b09      	cmp	r3, #9
 80169f2:	dc14      	bgt.n	8016a1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80169f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80169f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169fc:	493d      	ldr	r1, [pc, #244]	; (8016af4 <etharp_find_entry+0x2d4>)
 80169fe:	4613      	mov	r3, r2
 8016a00:	005b      	lsls	r3, r3, #1
 8016a02:	4413      	add	r3, r2
 8016a04:	00db      	lsls	r3, r3, #3
 8016a06:	440b      	add	r3, r1
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d018      	beq.n	8016a40 <etharp_find_entry+0x220>
 8016a0e:	4b3a      	ldr	r3, [pc, #232]	; (8016af8 <etharp_find_entry+0x2d8>)
 8016a10:	f240 126d 	movw	r2, #365	; 0x16d
 8016a14:	493b      	ldr	r1, [pc, #236]	; (8016b04 <etharp_find_entry+0x2e4>)
 8016a16:	483a      	ldr	r0, [pc, #232]	; (8016b00 <etharp_find_entry+0x2e0>)
 8016a18:	f002 fbd6 	bl	80191c8 <iprintf>
 8016a1c:	e010      	b.n	8016a40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016a1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016a22:	2b09      	cmp	r3, #9
 8016a24:	dc02      	bgt.n	8016a2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016a26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016a28:	843b      	strh	r3, [r7, #32]
 8016a2a:	e009      	b.n	8016a40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016a30:	2b09      	cmp	r3, #9
 8016a32:	dc02      	bgt.n	8016a3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016a34:	8bfb      	ldrh	r3, [r7, #30]
 8016a36:	843b      	strh	r3, [r7, #32]
 8016a38:	e002      	b.n	8016a40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a3e:	e054      	b.n	8016aea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016a40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a44:	2b09      	cmp	r3, #9
 8016a46:	dd06      	ble.n	8016a56 <etharp_find_entry+0x236>
 8016a48:	4b2b      	ldr	r3, [pc, #172]	; (8016af8 <etharp_find_entry+0x2d8>)
 8016a4a:	f240 127f 	movw	r2, #383	; 0x17f
 8016a4e:	492e      	ldr	r1, [pc, #184]	; (8016b08 <etharp_find_entry+0x2e8>)
 8016a50:	482b      	ldr	r0, [pc, #172]	; (8016b00 <etharp_find_entry+0x2e0>)
 8016a52:	f002 fbb9 	bl	80191c8 <iprintf>
    etharp_free_entry(i);
 8016a56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7ff fe06 	bl	801666c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016a60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a64:	2b09      	cmp	r3, #9
 8016a66:	dd06      	ble.n	8016a76 <etharp_find_entry+0x256>
 8016a68:	4b23      	ldr	r3, [pc, #140]	; (8016af8 <etharp_find_entry+0x2d8>)
 8016a6a:	f240 1283 	movw	r2, #387	; 0x183
 8016a6e:	4926      	ldr	r1, [pc, #152]	; (8016b08 <etharp_find_entry+0x2e8>)
 8016a70:	4823      	ldr	r0, [pc, #140]	; (8016b00 <etharp_find_entry+0x2e0>)
 8016a72:	f002 fba9 	bl	80191c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016a76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a7a:	491e      	ldr	r1, [pc, #120]	; (8016af4 <etharp_find_entry+0x2d4>)
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	005b      	lsls	r3, r3, #1
 8016a80:	4413      	add	r3, r2
 8016a82:	00db      	lsls	r3, r3, #3
 8016a84:	440b      	add	r3, r1
 8016a86:	3314      	adds	r3, #20
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d006      	beq.n	8016a9c <etharp_find_entry+0x27c>
 8016a8e:	4b1a      	ldr	r3, [pc, #104]	; (8016af8 <etharp_find_entry+0x2d8>)
 8016a90:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016a94:	491d      	ldr	r1, [pc, #116]	; (8016b0c <etharp_find_entry+0x2ec>)
 8016a96:	481a      	ldr	r0, [pc, #104]	; (8016b00 <etharp_find_entry+0x2e0>)
 8016a98:	f002 fb96 	bl	80191c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d00b      	beq.n	8016aba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	6819      	ldr	r1, [r3, #0]
 8016aaa:	4812      	ldr	r0, [pc, #72]	; (8016af4 <etharp_find_entry+0x2d4>)
 8016aac:	4613      	mov	r3, r2
 8016aae:	005b      	lsls	r3, r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	4403      	add	r3, r0
 8016ab6:	3304      	adds	r3, #4
 8016ab8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016aba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016abe:	490d      	ldr	r1, [pc, #52]	; (8016af4 <etharp_find_entry+0x2d4>)
 8016ac0:	4613      	mov	r3, r2
 8016ac2:	005b      	lsls	r3, r3, #1
 8016ac4:	4413      	add	r3, r2
 8016ac6:	00db      	lsls	r3, r3, #3
 8016ac8:	440b      	add	r3, r1
 8016aca:	3312      	adds	r3, #18
 8016acc:	2200      	movs	r2, #0
 8016ace:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad4:	4907      	ldr	r1, [pc, #28]	; (8016af4 <etharp_find_entry+0x2d4>)
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	440b      	add	r3, r1
 8016ae0:	3308      	adds	r3, #8
 8016ae2:	687a      	ldr	r2, [r7, #4]
 8016ae4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016ae6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016aea:	4618      	mov	r0, r3
 8016aec:	3728      	adds	r7, #40	; 0x28
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}
 8016af2:	bf00      	nop
 8016af4:	2000daf8 	.word	0x2000daf8
 8016af8:	0801cb64 	.word	0x0801cb64
 8016afc:	0801cb9c 	.word	0x0801cb9c
 8016b00:	0801cbdc 	.word	0x0801cbdc
 8016b04:	0801cc04 	.word	0x0801cc04
 8016b08:	0801cc1c 	.word	0x0801cc1c
 8016b0c:	0801cc30 	.word	0x0801cc30

08016b10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b088      	sub	sp, #32
 8016b14:	af02      	add	r7, sp, #8
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	607a      	str	r2, [r7, #4]
 8016b1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b24:	2b06      	cmp	r3, #6
 8016b26:	d006      	beq.n	8016b36 <etharp_update_arp_entry+0x26>
 8016b28:	4b48      	ldr	r3, [pc, #288]	; (8016c4c <etharp_update_arp_entry+0x13c>)
 8016b2a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016b2e:	4948      	ldr	r1, [pc, #288]	; (8016c50 <etharp_update_arp_entry+0x140>)
 8016b30:	4848      	ldr	r0, [pc, #288]	; (8016c54 <etharp_update_arp_entry+0x144>)
 8016b32:	f002 fb49 	bl	80191c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016b36:	68bb      	ldr	r3, [r7, #8]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d012      	beq.n	8016b62 <etharp_update_arp_entry+0x52>
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d00e      	beq.n	8016b62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	68f9      	ldr	r1, [r7, #12]
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f001 f8fe 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8016b50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d105      	bne.n	8016b62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b5e:	2be0      	cmp	r3, #224	; 0xe0
 8016b60:	d102      	bne.n	8016b68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016b62:	f06f 030f 	mvn.w	r3, #15
 8016b66:	e06c      	b.n	8016c42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016b68:	78fb      	ldrb	r3, [r7, #3]
 8016b6a:	68fa      	ldr	r2, [r7, #12]
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	68b8      	ldr	r0, [r7, #8]
 8016b70:	f7ff fe56 	bl	8016820 <etharp_find_entry>
 8016b74:	4603      	mov	r3, r0
 8016b76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016b78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	da02      	bge.n	8016b86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016b80:	8afb      	ldrh	r3, [r7, #22]
 8016b82:	b25b      	sxtb	r3, r3
 8016b84:	e05d      	b.n	8016c42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016b86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016b8a:	4933      	ldr	r1, [pc, #204]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016b8c:	4613      	mov	r3, r2
 8016b8e:	005b      	lsls	r3, r3, #1
 8016b90:	4413      	add	r3, r2
 8016b92:	00db      	lsls	r3, r3, #3
 8016b94:	440b      	add	r3, r1
 8016b96:	3314      	adds	r3, #20
 8016b98:	2202      	movs	r2, #2
 8016b9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016b9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ba0:	492d      	ldr	r1, [pc, #180]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	005b      	lsls	r3, r3, #1
 8016ba6:	4413      	add	r3, r2
 8016ba8:	00db      	lsls	r3, r3, #3
 8016baa:	440b      	add	r3, r1
 8016bac:	3308      	adds	r3, #8
 8016bae:	68fa      	ldr	r2, [r7, #12]
 8016bb0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016bb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	005b      	lsls	r3, r3, #1
 8016bba:	4413      	add	r3, r2
 8016bbc:	00db      	lsls	r3, r3, #3
 8016bbe:	3308      	adds	r3, #8
 8016bc0:	4a25      	ldr	r2, [pc, #148]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016bc2:	4413      	add	r3, r2
 8016bc4:	3304      	adds	r3, #4
 8016bc6:	2206      	movs	r2, #6
 8016bc8:	6879      	ldr	r1, [r7, #4]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f002 fa37 	bl	801903e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016bd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016bd4:	4920      	ldr	r1, [pc, #128]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	005b      	lsls	r3, r3, #1
 8016bda:	4413      	add	r3, r2
 8016bdc:	00db      	lsls	r3, r3, #3
 8016bde:	440b      	add	r3, r1
 8016be0:	3312      	adds	r3, #18
 8016be2:	2200      	movs	r2, #0
 8016be4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016be6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016bea:	491b      	ldr	r1, [pc, #108]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016bec:	4613      	mov	r3, r2
 8016bee:	005b      	lsls	r3, r3, #1
 8016bf0:	4413      	add	r3, r2
 8016bf2:	00db      	lsls	r3, r3, #3
 8016bf4:	440b      	add	r3, r1
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d021      	beq.n	8016c40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016bfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c00:	4915      	ldr	r1, [pc, #84]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016c02:	4613      	mov	r3, r2
 8016c04:	005b      	lsls	r3, r3, #1
 8016c06:	4413      	add	r3, r2
 8016c08:	00db      	lsls	r3, r3, #3
 8016c0a:	440b      	add	r3, r1
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016c10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c14:	4910      	ldr	r1, [pc, #64]	; (8016c58 <etharp_update_arp_entry+0x148>)
 8016c16:	4613      	mov	r3, r2
 8016c18:	005b      	lsls	r3, r3, #1
 8016c1a:	4413      	add	r3, r2
 8016c1c:	00db      	lsls	r3, r3, #3
 8016c1e:	440b      	add	r3, r1
 8016c20:	2200      	movs	r2, #0
 8016c22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6939      	ldr	r1, [r7, #16]
 8016c34:	68f8      	ldr	r0, [r7, #12]
 8016c36:	f001 ff97 	bl	8018b68 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016c3a:	6938      	ldr	r0, [r7, #16]
 8016c3c:	f7f9 f9d2 	bl	800ffe4 <pbuf_free>
  }
  return ERR_OK;
 8016c40:	2300      	movs	r3, #0
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3718      	adds	r7, #24
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
 8016c4a:	bf00      	nop
 8016c4c:	0801cb64 	.word	0x0801cb64
 8016c50:	0801cc5c 	.word	0x0801cc5c
 8016c54:	0801cbdc 	.word	0x0801cbdc
 8016c58:	2000daf8 	.word	0x2000daf8

08016c5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b084      	sub	sp, #16
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c64:	2300      	movs	r3, #0
 8016c66:	60fb      	str	r3, [r7, #12]
 8016c68:	e01e      	b.n	8016ca8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016c6a:	4913      	ldr	r1, [pc, #76]	; (8016cb8 <etharp_cleanup_netif+0x5c>)
 8016c6c:	68fa      	ldr	r2, [r7, #12]
 8016c6e:	4613      	mov	r3, r2
 8016c70:	005b      	lsls	r3, r3, #1
 8016c72:	4413      	add	r3, r2
 8016c74:	00db      	lsls	r3, r3, #3
 8016c76:	440b      	add	r3, r1
 8016c78:	3314      	adds	r3, #20
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016c7e:	7afb      	ldrb	r3, [r7, #11]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d00e      	beq.n	8016ca2 <etharp_cleanup_netif+0x46>
 8016c84:	490c      	ldr	r1, [pc, #48]	; (8016cb8 <etharp_cleanup_netif+0x5c>)
 8016c86:	68fa      	ldr	r2, [r7, #12]
 8016c88:	4613      	mov	r3, r2
 8016c8a:	005b      	lsls	r3, r3, #1
 8016c8c:	4413      	add	r3, r2
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	440b      	add	r3, r1
 8016c92:	3308      	adds	r3, #8
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	687a      	ldr	r2, [r7, #4]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d102      	bne.n	8016ca2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016c9c:	68f8      	ldr	r0, [r7, #12]
 8016c9e:	f7ff fce5 	bl	801666c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	60fb      	str	r3, [r7, #12]
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b09      	cmp	r3, #9
 8016cac:	dddd      	ble.n	8016c6a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016cae:	bf00      	nop
 8016cb0:	bf00      	nop
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}
 8016cb8:	2000daf8 	.word	0x2000daf8

08016cbc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016cbc:	b5b0      	push	{r4, r5, r7, lr}
 8016cbe:	b08a      	sub	sp, #40	; 0x28
 8016cc0:	af04      	add	r7, sp, #16
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d107      	bne.n	8016cdc <etharp_input+0x20>
 8016ccc:	4b3d      	ldr	r3, [pc, #244]	; (8016dc4 <etharp_input+0x108>)
 8016cce:	f240 228a 	movw	r2, #650	; 0x28a
 8016cd2:	493d      	ldr	r1, [pc, #244]	; (8016dc8 <etharp_input+0x10c>)
 8016cd4:	483d      	ldr	r0, [pc, #244]	; (8016dcc <etharp_input+0x110>)
 8016cd6:	f002 fa77 	bl	80191c8 <iprintf>
 8016cda:	e06f      	b.n	8016dbc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	881b      	ldrh	r3, [r3, #0]
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016cec:	d10c      	bne.n	8016d08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016cf2:	2b06      	cmp	r3, #6
 8016cf4:	d108      	bne.n	8016d08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016cfa:	2b04      	cmp	r3, #4
 8016cfc:	d104      	bne.n	8016d08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	885b      	ldrh	r3, [r3, #2]
 8016d02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016d04:	2b08      	cmp	r3, #8
 8016d06:	d003      	beq.n	8016d10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f7f9 f96b 	bl	800ffe4 <pbuf_free>
    return;
 8016d0e:	e055      	b.n	8016dbc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	330e      	adds	r3, #14
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016d18:	693b      	ldr	r3, [r7, #16]
 8016d1a:	3318      	adds	r3, #24
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016d20:	683b      	ldr	r3, [r7, #0]
 8016d22:	3304      	adds	r3, #4
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d102      	bne.n	8016d30 <etharp_input+0x74>
    for_us = 0;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	75fb      	strb	r3, [r7, #23]
 8016d2e:	e009      	b.n	8016d44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016d30:	68ba      	ldr	r2, [r7, #8]
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	3304      	adds	r3, #4
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	bf0c      	ite	eq
 8016d3c:	2301      	moveq	r3, #1
 8016d3e:	2300      	movne	r3, #0
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	f103 0208 	add.w	r2, r3, #8
 8016d4a:	7dfb      	ldrb	r3, [r7, #23]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d001      	beq.n	8016d54 <etharp_input+0x98>
 8016d50:	2301      	movs	r3, #1
 8016d52:	e000      	b.n	8016d56 <etharp_input+0x9a>
 8016d54:	2302      	movs	r3, #2
 8016d56:	f107 010c 	add.w	r1, r7, #12
 8016d5a:	6838      	ldr	r0, [r7, #0]
 8016d5c:	f7ff fed8 	bl	8016b10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	88db      	ldrh	r3, [r3, #6]
 8016d64:	b29b      	uxth	r3, r3
 8016d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d6a:	d003      	beq.n	8016d74 <etharp_input+0xb8>
 8016d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d70:	d01e      	beq.n	8016db0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016d72:	e020      	b.n	8016db6 <etharp_input+0xfa>
      if (for_us) {
 8016d74:	7dfb      	ldrb	r3, [r7, #23]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d01c      	beq.n	8016db4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016d90:	693a      	ldr	r2, [r7, #16]
 8016d92:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016d94:	2102      	movs	r1, #2
 8016d96:	9103      	str	r1, [sp, #12]
 8016d98:	f107 010c 	add.w	r1, r7, #12
 8016d9c:	9102      	str	r1, [sp, #8]
 8016d9e:	9201      	str	r2, [sp, #4]
 8016da0:	9300      	str	r3, [sp, #0]
 8016da2:	462b      	mov	r3, r5
 8016da4:	4622      	mov	r2, r4
 8016da6:	4601      	mov	r1, r0
 8016da8:	6838      	ldr	r0, [r7, #0]
 8016daa:	f000 faeb 	bl	8017384 <etharp_raw>
      break;
 8016dae:	e001      	b.n	8016db4 <etharp_input+0xf8>
      break;
 8016db0:	bf00      	nop
 8016db2:	e000      	b.n	8016db6 <etharp_input+0xfa>
      break;
 8016db4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f7f9 f914 	bl	800ffe4 <pbuf_free>
}
 8016dbc:	3718      	adds	r7, #24
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8016dc2:	bf00      	nop
 8016dc4:	0801cb64 	.word	0x0801cb64
 8016dc8:	0801ccb4 	.word	0x0801ccb4
 8016dcc:	0801cbdc 	.word	0x0801cbdc

08016dd0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b086      	sub	sp, #24
 8016dd4:	af02      	add	r7, sp, #8
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	4613      	mov	r3, r2
 8016ddc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016dde:	79fa      	ldrb	r2, [r7, #7]
 8016de0:	4944      	ldr	r1, [pc, #272]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016de2:	4613      	mov	r3, r2
 8016de4:	005b      	lsls	r3, r3, #1
 8016de6:	4413      	add	r3, r2
 8016de8:	00db      	lsls	r3, r3, #3
 8016dea:	440b      	add	r3, r1
 8016dec:	3314      	adds	r3, #20
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	2b01      	cmp	r3, #1
 8016df2:	d806      	bhi.n	8016e02 <etharp_output_to_arp_index+0x32>
 8016df4:	4b40      	ldr	r3, [pc, #256]	; (8016ef8 <etharp_output_to_arp_index+0x128>)
 8016df6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016dfa:	4940      	ldr	r1, [pc, #256]	; (8016efc <etharp_output_to_arp_index+0x12c>)
 8016dfc:	4840      	ldr	r0, [pc, #256]	; (8016f00 <etharp_output_to_arp_index+0x130>)
 8016dfe:	f002 f9e3 	bl	80191c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016e02:	79fa      	ldrb	r2, [r7, #7]
 8016e04:	493b      	ldr	r1, [pc, #236]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e06:	4613      	mov	r3, r2
 8016e08:	005b      	lsls	r3, r3, #1
 8016e0a:	4413      	add	r3, r2
 8016e0c:	00db      	lsls	r3, r3, #3
 8016e0e:	440b      	add	r3, r1
 8016e10:	3314      	adds	r3, #20
 8016e12:	781b      	ldrb	r3, [r3, #0]
 8016e14:	2b02      	cmp	r3, #2
 8016e16:	d153      	bne.n	8016ec0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016e18:	79fa      	ldrb	r2, [r7, #7]
 8016e1a:	4936      	ldr	r1, [pc, #216]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	005b      	lsls	r3, r3, #1
 8016e20:	4413      	add	r3, r2
 8016e22:	00db      	lsls	r3, r3, #3
 8016e24:	440b      	add	r3, r1
 8016e26:	3312      	adds	r3, #18
 8016e28:	881b      	ldrh	r3, [r3, #0]
 8016e2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016e2e:	d919      	bls.n	8016e64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016e30:	79fa      	ldrb	r2, [r7, #7]
 8016e32:	4613      	mov	r3, r2
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	00db      	lsls	r3, r3, #3
 8016e3a:	4a2e      	ldr	r2, [pc, #184]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e3c:	4413      	add	r3, r2
 8016e3e:	3304      	adds	r3, #4
 8016e40:	4619      	mov	r1, r3
 8016e42:	68f8      	ldr	r0, [r7, #12]
 8016e44:	f000 fb4c 	bl	80174e0 <etharp_request>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d138      	bne.n	8016ec0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016e4e:	79fa      	ldrb	r2, [r7, #7]
 8016e50:	4928      	ldr	r1, [pc, #160]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e52:	4613      	mov	r3, r2
 8016e54:	005b      	lsls	r3, r3, #1
 8016e56:	4413      	add	r3, r2
 8016e58:	00db      	lsls	r3, r3, #3
 8016e5a:	440b      	add	r3, r1
 8016e5c:	3314      	adds	r3, #20
 8016e5e:	2203      	movs	r2, #3
 8016e60:	701a      	strb	r2, [r3, #0]
 8016e62:	e02d      	b.n	8016ec0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016e64:	79fa      	ldrb	r2, [r7, #7]
 8016e66:	4923      	ldr	r1, [pc, #140]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e68:	4613      	mov	r3, r2
 8016e6a:	005b      	lsls	r3, r3, #1
 8016e6c:	4413      	add	r3, r2
 8016e6e:	00db      	lsls	r3, r3, #3
 8016e70:	440b      	add	r3, r1
 8016e72:	3312      	adds	r3, #18
 8016e74:	881b      	ldrh	r3, [r3, #0]
 8016e76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016e7a:	d321      	bcc.n	8016ec0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016e7c:	79fa      	ldrb	r2, [r7, #7]
 8016e7e:	4613      	mov	r3, r2
 8016e80:	005b      	lsls	r3, r3, #1
 8016e82:	4413      	add	r3, r2
 8016e84:	00db      	lsls	r3, r3, #3
 8016e86:	4a1b      	ldr	r2, [pc, #108]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e88:	4413      	add	r3, r2
 8016e8a:	1d19      	adds	r1, r3, #4
 8016e8c:	79fa      	ldrb	r2, [r7, #7]
 8016e8e:	4613      	mov	r3, r2
 8016e90:	005b      	lsls	r3, r3, #1
 8016e92:	4413      	add	r3, r2
 8016e94:	00db      	lsls	r3, r3, #3
 8016e96:	3308      	adds	r3, #8
 8016e98:	4a16      	ldr	r2, [pc, #88]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016e9a:	4413      	add	r3, r2
 8016e9c:	3304      	adds	r3, #4
 8016e9e:	461a      	mov	r2, r3
 8016ea0:	68f8      	ldr	r0, [r7, #12]
 8016ea2:	f000 fafb 	bl	801749c <etharp_request_dst>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d109      	bne.n	8016ec0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016eac:	79fa      	ldrb	r2, [r7, #7]
 8016eae:	4911      	ldr	r1, [pc, #68]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016eb0:	4613      	mov	r3, r2
 8016eb2:	005b      	lsls	r3, r3, #1
 8016eb4:	4413      	add	r3, r2
 8016eb6:	00db      	lsls	r3, r3, #3
 8016eb8:	440b      	add	r3, r1
 8016eba:	3314      	adds	r3, #20
 8016ebc:	2203      	movs	r2, #3
 8016ebe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016ec6:	79fa      	ldrb	r2, [r7, #7]
 8016ec8:	4613      	mov	r3, r2
 8016eca:	005b      	lsls	r3, r3, #1
 8016ecc:	4413      	add	r3, r2
 8016ece:	00db      	lsls	r3, r3, #3
 8016ed0:	3308      	adds	r3, #8
 8016ed2:	4a08      	ldr	r2, [pc, #32]	; (8016ef4 <etharp_output_to_arp_index+0x124>)
 8016ed4:	4413      	add	r3, r2
 8016ed6:	3304      	adds	r3, #4
 8016ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016edc:	9200      	str	r2, [sp, #0]
 8016ede:	460a      	mov	r2, r1
 8016ee0:	68b9      	ldr	r1, [r7, #8]
 8016ee2:	68f8      	ldr	r0, [r7, #12]
 8016ee4:	f001 fe40 	bl	8018b68 <ethernet_output>
 8016ee8:	4603      	mov	r3, r0
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	3710      	adds	r7, #16
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	2000daf8 	.word	0x2000daf8
 8016ef8:	0801cb64 	.word	0x0801cb64
 8016efc:	0801ccd4 	.word	0x0801ccd4
 8016f00:	0801cbdc 	.word	0x0801cbdc

08016f04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b08a      	sub	sp, #40	; 0x28
 8016f08:	af02      	add	r7, sp, #8
 8016f0a:	60f8      	str	r0, [r7, #12]
 8016f0c:	60b9      	str	r1, [r7, #8]
 8016f0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d106      	bne.n	8016f28 <etharp_output+0x24>
 8016f1a:	4b73      	ldr	r3, [pc, #460]	; (80170e8 <etharp_output+0x1e4>)
 8016f1c:	f240 321e 	movw	r2, #798	; 0x31e
 8016f20:	4972      	ldr	r1, [pc, #456]	; (80170ec <etharp_output+0x1e8>)
 8016f22:	4873      	ldr	r0, [pc, #460]	; (80170f0 <etharp_output+0x1ec>)
 8016f24:	f002 f950 	bl	80191c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d106      	bne.n	8016f3c <etharp_output+0x38>
 8016f2e:	4b6e      	ldr	r3, [pc, #440]	; (80170e8 <etharp_output+0x1e4>)
 8016f30:	f240 321f 	movw	r2, #799	; 0x31f
 8016f34:	496f      	ldr	r1, [pc, #444]	; (80170f4 <etharp_output+0x1f0>)
 8016f36:	486e      	ldr	r0, [pc, #440]	; (80170f0 <etharp_output+0x1ec>)
 8016f38:	f002 f946 	bl	80191c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d106      	bne.n	8016f50 <etharp_output+0x4c>
 8016f42:	4b69      	ldr	r3, [pc, #420]	; (80170e8 <etharp_output+0x1e4>)
 8016f44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016f48:	496b      	ldr	r1, [pc, #428]	; (80170f8 <etharp_output+0x1f4>)
 8016f4a:	4869      	ldr	r0, [pc, #420]	; (80170f0 <etharp_output+0x1ec>)
 8016f4c:	f002 f93c 	bl	80191c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	68f9      	ldr	r1, [r7, #12]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f000 fef8 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d002      	beq.n	8016f68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016f62:	4b66      	ldr	r3, [pc, #408]	; (80170fc <etharp_output+0x1f8>)
 8016f64:	61fb      	str	r3, [r7, #28]
 8016f66:	e0af      	b.n	80170c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f70:	2be0      	cmp	r3, #224	; 0xe0
 8016f72:	d118      	bne.n	8016fa6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016f74:	2301      	movs	r3, #1
 8016f76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016f7c:	235e      	movs	r3, #94	; 0x5e
 8016f7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	3301      	adds	r3, #1
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	3302      	adds	r3, #2
 8016f92:	781b      	ldrb	r3, [r3, #0]
 8016f94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	3303      	adds	r3, #3
 8016f9a:	781b      	ldrb	r3, [r3, #0]
 8016f9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016f9e:	f107 0310 	add.w	r3, r7, #16
 8016fa2:	61fb      	str	r3, [r7, #28]
 8016fa4:	e090      	b.n	80170c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681a      	ldr	r2, [r3, #0]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	3304      	adds	r3, #4
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	405a      	eors	r2, r3
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	3308      	adds	r3, #8
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	4013      	ands	r3, r2
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d012      	beq.n	8016fe4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016fc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	d00b      	beq.n	8016fe4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	330c      	adds	r3, #12
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d003      	beq.n	8016fde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	330c      	adds	r3, #12
 8016fda:	61bb      	str	r3, [r7, #24]
 8016fdc:	e002      	b.n	8016fe4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016fde:	f06f 0303 	mvn.w	r3, #3
 8016fe2:	e07d      	b.n	80170e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016fe4:	4b46      	ldr	r3, [pc, #280]	; (8017100 <etharp_output+0x1fc>)
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	4a46      	ldr	r2, [pc, #280]	; (8017104 <etharp_output+0x200>)
 8016fec:	460b      	mov	r3, r1
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	440b      	add	r3, r1
 8016ff2:	00db      	lsls	r3, r3, #3
 8016ff4:	4413      	add	r3, r2
 8016ff6:	3314      	adds	r3, #20
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	2b01      	cmp	r3, #1
 8016ffc:	d925      	bls.n	801704a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016ffe:	4b40      	ldr	r3, [pc, #256]	; (8017100 <etharp_output+0x1fc>)
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	4619      	mov	r1, r3
 8017004:	4a3f      	ldr	r2, [pc, #252]	; (8017104 <etharp_output+0x200>)
 8017006:	460b      	mov	r3, r1
 8017008:	005b      	lsls	r3, r3, #1
 801700a:	440b      	add	r3, r1
 801700c:	00db      	lsls	r3, r3, #3
 801700e:	4413      	add	r3, r2
 8017010:	3308      	adds	r3, #8
 8017012:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017014:	68fa      	ldr	r2, [r7, #12]
 8017016:	429a      	cmp	r2, r3
 8017018:	d117      	bne.n	801704a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801701a:	69bb      	ldr	r3, [r7, #24]
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	4b38      	ldr	r3, [pc, #224]	; (8017100 <etharp_output+0x1fc>)
 8017020:	781b      	ldrb	r3, [r3, #0]
 8017022:	4618      	mov	r0, r3
 8017024:	4937      	ldr	r1, [pc, #220]	; (8017104 <etharp_output+0x200>)
 8017026:	4603      	mov	r3, r0
 8017028:	005b      	lsls	r3, r3, #1
 801702a:	4403      	add	r3, r0
 801702c:	00db      	lsls	r3, r3, #3
 801702e:	440b      	add	r3, r1
 8017030:	3304      	adds	r3, #4
 8017032:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017034:	429a      	cmp	r2, r3
 8017036:	d108      	bne.n	801704a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017038:	4b31      	ldr	r3, [pc, #196]	; (8017100 <etharp_output+0x1fc>)
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	461a      	mov	r2, r3
 801703e:	68b9      	ldr	r1, [r7, #8]
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f7ff fec5 	bl	8016dd0 <etharp_output_to_arp_index>
 8017046:	4603      	mov	r3, r0
 8017048:	e04a      	b.n	80170e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801704a:	2300      	movs	r3, #0
 801704c:	75fb      	strb	r3, [r7, #23]
 801704e:	e031      	b.n	80170b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017050:	7dfa      	ldrb	r2, [r7, #23]
 8017052:	492c      	ldr	r1, [pc, #176]	; (8017104 <etharp_output+0x200>)
 8017054:	4613      	mov	r3, r2
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	4413      	add	r3, r2
 801705a:	00db      	lsls	r3, r3, #3
 801705c:	440b      	add	r3, r1
 801705e:	3314      	adds	r3, #20
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	2b01      	cmp	r3, #1
 8017064:	d923      	bls.n	80170ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017066:	7dfa      	ldrb	r2, [r7, #23]
 8017068:	4926      	ldr	r1, [pc, #152]	; (8017104 <etharp_output+0x200>)
 801706a:	4613      	mov	r3, r2
 801706c:	005b      	lsls	r3, r3, #1
 801706e:	4413      	add	r3, r2
 8017070:	00db      	lsls	r3, r3, #3
 8017072:	440b      	add	r3, r1
 8017074:	3308      	adds	r3, #8
 8017076:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	429a      	cmp	r2, r3
 801707c:	d117      	bne.n	80170ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801707e:	69bb      	ldr	r3, [r7, #24]
 8017080:	6819      	ldr	r1, [r3, #0]
 8017082:	7dfa      	ldrb	r2, [r7, #23]
 8017084:	481f      	ldr	r0, [pc, #124]	; (8017104 <etharp_output+0x200>)
 8017086:	4613      	mov	r3, r2
 8017088:	005b      	lsls	r3, r3, #1
 801708a:	4413      	add	r3, r2
 801708c:	00db      	lsls	r3, r3, #3
 801708e:	4403      	add	r3, r0
 8017090:	3304      	adds	r3, #4
 8017092:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017094:	4299      	cmp	r1, r3
 8017096:	d10a      	bne.n	80170ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017098:	4a19      	ldr	r2, [pc, #100]	; (8017100 <etharp_output+0x1fc>)
 801709a:	7dfb      	ldrb	r3, [r7, #23]
 801709c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801709e:	7dfb      	ldrb	r3, [r7, #23]
 80170a0:	461a      	mov	r2, r3
 80170a2:	68b9      	ldr	r1, [r7, #8]
 80170a4:	68f8      	ldr	r0, [r7, #12]
 80170a6:	f7ff fe93 	bl	8016dd0 <etharp_output_to_arp_index>
 80170aa:	4603      	mov	r3, r0
 80170ac:	e018      	b.n	80170e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80170ae:	7dfb      	ldrb	r3, [r7, #23]
 80170b0:	3301      	adds	r3, #1
 80170b2:	75fb      	strb	r3, [r7, #23]
 80170b4:	7dfb      	ldrb	r3, [r7, #23]
 80170b6:	2b09      	cmp	r3, #9
 80170b8:	d9ca      	bls.n	8017050 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80170ba:	68ba      	ldr	r2, [r7, #8]
 80170bc:	69b9      	ldr	r1, [r7, #24]
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f000 f822 	bl	8017108 <etharp_query>
 80170c4:	4603      	mov	r3, r0
 80170c6:	e00b      	b.n	80170e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80170ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	68b9      	ldr	r1, [r7, #8]
 80170d8:	68f8      	ldr	r0, [r7, #12]
 80170da:	f001 fd45 	bl	8018b68 <ethernet_output>
 80170de:	4603      	mov	r3, r0
}
 80170e0:	4618      	mov	r0, r3
 80170e2:	3720      	adds	r7, #32
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bd80      	pop	{r7, pc}
 80170e8:	0801cb64 	.word	0x0801cb64
 80170ec:	0801ccb4 	.word	0x0801ccb4
 80170f0:	0801cbdc 	.word	0x0801cbdc
 80170f4:	0801cd04 	.word	0x0801cd04
 80170f8:	0801cca4 	.word	0x0801cca4
 80170fc:	0801d400 	.word	0x0801d400
 8017100:	2000dbe8 	.word	0x2000dbe8
 8017104:	2000daf8 	.word	0x2000daf8

08017108 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b08c      	sub	sp, #48	; 0x30
 801710c:	af02      	add	r7, sp, #8
 801710e:	60f8      	str	r0, [r7, #12]
 8017110:	60b9      	str	r1, [r7, #8]
 8017112:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	3326      	adds	r3, #38	; 0x26
 8017118:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801711a:	23ff      	movs	r3, #255	; 0xff
 801711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017120:	2300      	movs	r3, #0
 8017122:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	68f9      	ldr	r1, [r7, #12]
 801712a:	4618      	mov	r0, r3
 801712c:	f000 fe0e 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8017130:	4603      	mov	r3, r0
 8017132:	2b00      	cmp	r3, #0
 8017134:	d10c      	bne.n	8017150 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801713e:	2be0      	cmp	r3, #224	; 0xe0
 8017140:	d006      	beq.n	8017150 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d003      	beq.n	8017150 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d102      	bne.n	8017156 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017150:	f06f 030f 	mvn.w	r3, #15
 8017154:	e101      	b.n	801735a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017156:	68fa      	ldr	r2, [r7, #12]
 8017158:	2101      	movs	r1, #1
 801715a:	68b8      	ldr	r0, [r7, #8]
 801715c:	f7ff fb60 	bl	8016820 <etharp_find_entry>
 8017160:	4603      	mov	r3, r0
 8017162:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017168:	2b00      	cmp	r3, #0
 801716a:	da02      	bge.n	8017172 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801716c:	8a7b      	ldrh	r3, [r7, #18]
 801716e:	b25b      	sxtb	r3, r3
 8017170:	e0f3      	b.n	801735a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017172:	8a7b      	ldrh	r3, [r7, #18]
 8017174:	2b7e      	cmp	r3, #126	; 0x7e
 8017176:	d906      	bls.n	8017186 <etharp_query+0x7e>
 8017178:	4b7a      	ldr	r3, [pc, #488]	; (8017364 <etharp_query+0x25c>)
 801717a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801717e:	497a      	ldr	r1, [pc, #488]	; (8017368 <etharp_query+0x260>)
 8017180:	487a      	ldr	r0, [pc, #488]	; (801736c <etharp_query+0x264>)
 8017182:	f002 f821 	bl	80191c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017186:	8a7b      	ldrh	r3, [r7, #18]
 8017188:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801718a:	7c7a      	ldrb	r2, [r7, #17]
 801718c:	4978      	ldr	r1, [pc, #480]	; (8017370 <etharp_query+0x268>)
 801718e:	4613      	mov	r3, r2
 8017190:	005b      	lsls	r3, r3, #1
 8017192:	4413      	add	r3, r2
 8017194:	00db      	lsls	r3, r3, #3
 8017196:	440b      	add	r3, r1
 8017198:	3314      	adds	r3, #20
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d115      	bne.n	80171cc <etharp_query+0xc4>
    is_new_entry = 1;
 80171a0:	2301      	movs	r3, #1
 80171a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80171a4:	7c7a      	ldrb	r2, [r7, #17]
 80171a6:	4972      	ldr	r1, [pc, #456]	; (8017370 <etharp_query+0x268>)
 80171a8:	4613      	mov	r3, r2
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	4413      	add	r3, r2
 80171ae:	00db      	lsls	r3, r3, #3
 80171b0:	440b      	add	r3, r1
 80171b2:	3314      	adds	r3, #20
 80171b4:	2201      	movs	r2, #1
 80171b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80171b8:	7c7a      	ldrb	r2, [r7, #17]
 80171ba:	496d      	ldr	r1, [pc, #436]	; (8017370 <etharp_query+0x268>)
 80171bc:	4613      	mov	r3, r2
 80171be:	005b      	lsls	r3, r3, #1
 80171c0:	4413      	add	r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	440b      	add	r3, r1
 80171c6:	3308      	adds	r3, #8
 80171c8:	68fa      	ldr	r2, [r7, #12]
 80171ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80171cc:	7c7a      	ldrb	r2, [r7, #17]
 80171ce:	4968      	ldr	r1, [pc, #416]	; (8017370 <etharp_query+0x268>)
 80171d0:	4613      	mov	r3, r2
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	4413      	add	r3, r2
 80171d6:	00db      	lsls	r3, r3, #3
 80171d8:	440b      	add	r3, r1
 80171da:	3314      	adds	r3, #20
 80171dc:	781b      	ldrb	r3, [r3, #0]
 80171de:	2b01      	cmp	r3, #1
 80171e0:	d011      	beq.n	8017206 <etharp_query+0xfe>
 80171e2:	7c7a      	ldrb	r2, [r7, #17]
 80171e4:	4962      	ldr	r1, [pc, #392]	; (8017370 <etharp_query+0x268>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	440b      	add	r3, r1
 80171f0:	3314      	adds	r3, #20
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	2b01      	cmp	r3, #1
 80171f6:	d806      	bhi.n	8017206 <etharp_query+0xfe>
 80171f8:	4b5a      	ldr	r3, [pc, #360]	; (8017364 <etharp_query+0x25c>)
 80171fa:	f240 32cd 	movw	r2, #973	; 0x3cd
 80171fe:	495d      	ldr	r1, [pc, #372]	; (8017374 <etharp_query+0x26c>)
 8017200:	485a      	ldr	r0, [pc, #360]	; (801736c <etharp_query+0x264>)
 8017202:	f001 ffe1 	bl	80191c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017206:	6a3b      	ldr	r3, [r7, #32]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d102      	bne.n	8017212 <etharp_query+0x10a>
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d10c      	bne.n	801722c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017212:	68b9      	ldr	r1, [r7, #8]
 8017214:	68f8      	ldr	r0, [r7, #12]
 8017216:	f000 f963 	bl	80174e0 <etharp_request>
 801721a:	4603      	mov	r3, r0
 801721c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d102      	bne.n	801722c <etharp_query+0x124>
      return result;
 8017226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801722a:	e096      	b.n	801735a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d106      	bne.n	8017240 <etharp_query+0x138>
 8017232:	4b4c      	ldr	r3, [pc, #304]	; (8017364 <etharp_query+0x25c>)
 8017234:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017238:	494f      	ldr	r1, [pc, #316]	; (8017378 <etharp_query+0x270>)
 801723a:	484c      	ldr	r0, [pc, #304]	; (801736c <etharp_query+0x264>)
 801723c:	f001 ffc4 	bl	80191c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017240:	7c7a      	ldrb	r2, [r7, #17]
 8017242:	494b      	ldr	r1, [pc, #300]	; (8017370 <etharp_query+0x268>)
 8017244:	4613      	mov	r3, r2
 8017246:	005b      	lsls	r3, r3, #1
 8017248:	4413      	add	r3, r2
 801724a:	00db      	lsls	r3, r3, #3
 801724c:	440b      	add	r3, r1
 801724e:	3314      	adds	r3, #20
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	2b01      	cmp	r3, #1
 8017254:	d917      	bls.n	8017286 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017256:	4a49      	ldr	r2, [pc, #292]	; (801737c <etharp_query+0x274>)
 8017258:	7c7b      	ldrb	r3, [r7, #17]
 801725a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801725c:	7c7a      	ldrb	r2, [r7, #17]
 801725e:	4613      	mov	r3, r2
 8017260:	005b      	lsls	r3, r3, #1
 8017262:	4413      	add	r3, r2
 8017264:	00db      	lsls	r3, r3, #3
 8017266:	3308      	adds	r3, #8
 8017268:	4a41      	ldr	r2, [pc, #260]	; (8017370 <etharp_query+0x268>)
 801726a:	4413      	add	r3, r2
 801726c:	3304      	adds	r3, #4
 801726e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017272:	9200      	str	r2, [sp, #0]
 8017274:	697a      	ldr	r2, [r7, #20]
 8017276:	6879      	ldr	r1, [r7, #4]
 8017278:	68f8      	ldr	r0, [r7, #12]
 801727a:	f001 fc75 	bl	8018b68 <ethernet_output>
 801727e:	4603      	mov	r3, r0
 8017280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017284:	e067      	b.n	8017356 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017286:	7c7a      	ldrb	r2, [r7, #17]
 8017288:	4939      	ldr	r1, [pc, #228]	; (8017370 <etharp_query+0x268>)
 801728a:	4613      	mov	r3, r2
 801728c:	005b      	lsls	r3, r3, #1
 801728e:	4413      	add	r3, r2
 8017290:	00db      	lsls	r3, r3, #3
 8017292:	440b      	add	r3, r1
 8017294:	3314      	adds	r3, #20
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	2b01      	cmp	r3, #1
 801729a:	d15c      	bne.n	8017356 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801729c:	2300      	movs	r3, #0
 801729e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80172a4:	e01c      	b.n	80172e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80172a6:	69fb      	ldr	r3, [r7, #28]
 80172a8:	895a      	ldrh	r2, [r3, #10]
 80172aa:	69fb      	ldr	r3, [r7, #28]
 80172ac:	891b      	ldrh	r3, [r3, #8]
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d10a      	bne.n	80172c8 <etharp_query+0x1c0>
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d006      	beq.n	80172c8 <etharp_query+0x1c0>
 80172ba:	4b2a      	ldr	r3, [pc, #168]	; (8017364 <etharp_query+0x25c>)
 80172bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80172c0:	492f      	ldr	r1, [pc, #188]	; (8017380 <etharp_query+0x278>)
 80172c2:	482a      	ldr	r0, [pc, #168]	; (801736c <etharp_query+0x264>)
 80172c4:	f001 ff80 	bl	80191c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80172c8:	69fb      	ldr	r3, [r7, #28]
 80172ca:	7b1b      	ldrb	r3, [r3, #12]
 80172cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d002      	beq.n	80172da <etharp_query+0x1d2>
        copy_needed = 1;
 80172d4:	2301      	movs	r3, #1
 80172d6:	61bb      	str	r3, [r7, #24]
        break;
 80172d8:	e005      	b.n	80172e6 <etharp_query+0x1de>
      }
      p = p->next;
 80172da:	69fb      	ldr	r3, [r7, #28]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d1df      	bne.n	80172a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80172e6:	69bb      	ldr	r3, [r7, #24]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d007      	beq.n	80172fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80172ec:	687a      	ldr	r2, [r7, #4]
 80172ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 80172f2:	200e      	movs	r0, #14
 80172f4:	f7f9 f980 	bl	80105f8 <pbuf_clone>
 80172f8:	61f8      	str	r0, [r7, #28]
 80172fa:	e004      	b.n	8017306 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017300:	69f8      	ldr	r0, [r7, #28]
 8017302:	f7f8 ff15 	bl	8010130 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d021      	beq.n	8017350 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801730c:	7c7a      	ldrb	r2, [r7, #17]
 801730e:	4918      	ldr	r1, [pc, #96]	; (8017370 <etharp_query+0x268>)
 8017310:	4613      	mov	r3, r2
 8017312:	005b      	lsls	r3, r3, #1
 8017314:	4413      	add	r3, r2
 8017316:	00db      	lsls	r3, r3, #3
 8017318:	440b      	add	r3, r1
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d00a      	beq.n	8017336 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017320:	7c7a      	ldrb	r2, [r7, #17]
 8017322:	4913      	ldr	r1, [pc, #76]	; (8017370 <etharp_query+0x268>)
 8017324:	4613      	mov	r3, r2
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	4413      	add	r3, r2
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	440b      	add	r3, r1
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4618      	mov	r0, r3
 8017332:	f7f8 fe57 	bl	800ffe4 <pbuf_free>
      }
      arp_table[i].q = p;
 8017336:	7c7a      	ldrb	r2, [r7, #17]
 8017338:	490d      	ldr	r1, [pc, #52]	; (8017370 <etharp_query+0x268>)
 801733a:	4613      	mov	r3, r2
 801733c:	005b      	lsls	r3, r3, #1
 801733e:	4413      	add	r3, r2
 8017340:	00db      	lsls	r3, r3, #3
 8017342:	440b      	add	r3, r1
 8017344:	69fa      	ldr	r2, [r7, #28]
 8017346:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017348:	2300      	movs	r3, #0
 801734a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801734e:	e002      	b.n	8017356 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017350:	23ff      	movs	r3, #255	; 0xff
 8017352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017356:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801735a:	4618      	mov	r0, r3
 801735c:	3728      	adds	r7, #40	; 0x28
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	0801cb64 	.word	0x0801cb64
 8017368:	0801cd10 	.word	0x0801cd10
 801736c:	0801cbdc 	.word	0x0801cbdc
 8017370:	2000daf8 	.word	0x2000daf8
 8017374:	0801cd20 	.word	0x0801cd20
 8017378:	0801cd04 	.word	0x0801cd04
 801737c:	2000dbe8 	.word	0x2000dbe8
 8017380:	0801cd48 	.word	0x0801cd48

08017384 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b08a      	sub	sp, #40	; 0x28
 8017388:	af02      	add	r7, sp, #8
 801738a:	60f8      	str	r0, [r7, #12]
 801738c:	60b9      	str	r1, [r7, #8]
 801738e:	607a      	str	r2, [r7, #4]
 8017390:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017392:	2300      	movs	r3, #0
 8017394:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d106      	bne.n	80173aa <etharp_raw+0x26>
 801739c:	4b3a      	ldr	r3, [pc, #232]	; (8017488 <etharp_raw+0x104>)
 801739e:	f240 4257 	movw	r2, #1111	; 0x457
 80173a2:	493a      	ldr	r1, [pc, #232]	; (801748c <etharp_raw+0x108>)
 80173a4:	483a      	ldr	r0, [pc, #232]	; (8017490 <etharp_raw+0x10c>)
 80173a6:	f001 ff0f 	bl	80191c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80173aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173ae:	211c      	movs	r1, #28
 80173b0:	200e      	movs	r0, #14
 80173b2:	f7f8 fb33 	bl	800fa1c <pbuf_alloc>
 80173b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80173b8:	69bb      	ldr	r3, [r7, #24]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d102      	bne.n	80173c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80173be:	f04f 33ff 	mov.w	r3, #4294967295
 80173c2:	e05d      	b.n	8017480 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	895b      	ldrh	r3, [r3, #10]
 80173c8:	2b1b      	cmp	r3, #27
 80173ca:	d806      	bhi.n	80173da <etharp_raw+0x56>
 80173cc:	4b2e      	ldr	r3, [pc, #184]	; (8017488 <etharp_raw+0x104>)
 80173ce:	f240 4262 	movw	r2, #1122	; 0x462
 80173d2:	4930      	ldr	r1, [pc, #192]	; (8017494 <etharp_raw+0x110>)
 80173d4:	482e      	ldr	r0, [pc, #184]	; (8017490 <etharp_raw+0x10c>)
 80173d6:	f001 fef7 	bl	80191c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80173da:	69bb      	ldr	r3, [r7, #24]
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80173e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7f7 fa0c 	bl	800e800 <lwip_htons>
 80173e8:	4603      	mov	r3, r0
 80173ea:	461a      	mov	r2, r3
 80173ec:	697b      	ldr	r3, [r7, #20]
 80173ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80173f6:	2b06      	cmp	r3, #6
 80173f8:	d006      	beq.n	8017408 <etharp_raw+0x84>
 80173fa:	4b23      	ldr	r3, [pc, #140]	; (8017488 <etharp_raw+0x104>)
 80173fc:	f240 4269 	movw	r2, #1129	; 0x469
 8017400:	4925      	ldr	r1, [pc, #148]	; (8017498 <etharp_raw+0x114>)
 8017402:	4823      	ldr	r0, [pc, #140]	; (8017490 <etharp_raw+0x10c>)
 8017404:	f001 fee0 	bl	80191c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	3308      	adds	r3, #8
 801740c:	2206      	movs	r2, #6
 801740e:	6839      	ldr	r1, [r7, #0]
 8017410:	4618      	mov	r0, r3
 8017412:	f001 fe14 	bl	801903e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017416:	697b      	ldr	r3, [r7, #20]
 8017418:	3312      	adds	r3, #18
 801741a:	2206      	movs	r2, #6
 801741c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801741e:	4618      	mov	r0, r3
 8017420:	f001 fe0d 	bl	801903e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	330e      	adds	r3, #14
 8017428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801742a:	6812      	ldr	r2, [r2, #0]
 801742c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	3318      	adds	r3, #24
 8017432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017434:	6812      	ldr	r2, [r2, #0]
 8017436:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	2200      	movs	r2, #0
 801743c:	701a      	strb	r2, [r3, #0]
 801743e:	2200      	movs	r2, #0
 8017440:	f042 0201 	orr.w	r2, r2, #1
 8017444:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	2200      	movs	r2, #0
 801744a:	f042 0208 	orr.w	r2, r2, #8
 801744e:	709a      	strb	r2, [r3, #2]
 8017450:	2200      	movs	r2, #0
 8017452:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	2206      	movs	r2, #6
 8017458:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	2204      	movs	r2, #4
 801745e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017460:	f640 0306 	movw	r3, #2054	; 0x806
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	68ba      	ldr	r2, [r7, #8]
 801746a:	69b9      	ldr	r1, [r7, #24]
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	f001 fb7b 	bl	8018b68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017472:	69b8      	ldr	r0, [r7, #24]
 8017474:	f7f8 fdb6 	bl	800ffe4 <pbuf_free>
  p = NULL;
 8017478:	2300      	movs	r3, #0
 801747a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801747c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017480:	4618      	mov	r0, r3
 8017482:	3720      	adds	r7, #32
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}
 8017488:	0801cb64 	.word	0x0801cb64
 801748c:	0801ccb4 	.word	0x0801ccb4
 8017490:	0801cbdc 	.word	0x0801cbdc
 8017494:	0801cd64 	.word	0x0801cd64
 8017498:	0801cd98 	.word	0x0801cd98

0801749c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b088      	sub	sp, #32
 80174a0:	af04      	add	r7, sp, #16
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80174b8:	2201      	movs	r2, #1
 80174ba:	9203      	str	r2, [sp, #12]
 80174bc:	68ba      	ldr	r2, [r7, #8]
 80174be:	9202      	str	r2, [sp, #8]
 80174c0:	4a06      	ldr	r2, [pc, #24]	; (80174dc <etharp_request_dst+0x40>)
 80174c2:	9201      	str	r2, [sp, #4]
 80174c4:	9300      	str	r3, [sp, #0]
 80174c6:	4603      	mov	r3, r0
 80174c8:	687a      	ldr	r2, [r7, #4]
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	f7ff ff5a 	bl	8017384 <etharp_raw>
 80174d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3710      	adds	r7, #16
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	0801d408 	.word	0x0801d408

080174e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b082      	sub	sp, #8
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
 80174e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80174ea:	4a05      	ldr	r2, [pc, #20]	; (8017500 <etharp_request+0x20>)
 80174ec:	6839      	ldr	r1, [r7, #0]
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7ff ffd4 	bl	801749c <etharp_request_dst>
 80174f4:	4603      	mov	r3, r0
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3708      	adds	r7, #8
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
 80174fe:	bf00      	nop
 8017500:	0801d400 	.word	0x0801d400

08017504 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b08e      	sub	sp, #56	; 0x38
 8017508:	af04      	add	r7, sp, #16
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801750e:	4b79      	ldr	r3, [pc, #484]	; (80176f4 <icmp_input+0x1f0>)
 8017510:	689b      	ldr	r3, [r3, #8]
 8017512:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017516:	781b      	ldrb	r3, [r3, #0]
 8017518:	f003 030f 	and.w	r3, r3, #15
 801751c:	b2db      	uxtb	r3, r3
 801751e:	009b      	lsls	r3, r3, #2
 8017520:	b2db      	uxtb	r3, r3
 8017522:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017526:	2b13      	cmp	r3, #19
 8017528:	f240 80cd 	bls.w	80176c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	895b      	ldrh	r3, [r3, #10]
 8017530:	2b03      	cmp	r3, #3
 8017532:	f240 80ca 	bls.w	80176ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	781b      	ldrb	r3, [r3, #0]
 801753c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017540:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017544:	2b00      	cmp	r3, #0
 8017546:	f000 80b7 	beq.w	80176b8 <icmp_input+0x1b4>
 801754a:	2b08      	cmp	r3, #8
 801754c:	f040 80b7 	bne.w	80176be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017550:	4b69      	ldr	r3, [pc, #420]	; (80176f8 <icmp_input+0x1f4>)
 8017552:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017554:	4b67      	ldr	r3, [pc, #412]	; (80176f4 <icmp_input+0x1f0>)
 8017556:	695b      	ldr	r3, [r3, #20]
 8017558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801755c:	2be0      	cmp	r3, #224	; 0xe0
 801755e:	f000 80bb 	beq.w	80176d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017562:	4b64      	ldr	r3, [pc, #400]	; (80176f4 <icmp_input+0x1f0>)
 8017564:	695b      	ldr	r3, [r3, #20]
 8017566:	4a63      	ldr	r2, [pc, #396]	; (80176f4 <icmp_input+0x1f0>)
 8017568:	6812      	ldr	r2, [r2, #0]
 801756a:	4611      	mov	r1, r2
 801756c:	4618      	mov	r0, r3
 801756e:	f000 fbed 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8017572:	4603      	mov	r3, r0
 8017574:	2b00      	cmp	r3, #0
 8017576:	f040 80b1 	bne.w	80176dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	891b      	ldrh	r3, [r3, #8]
 801757e:	2b07      	cmp	r3, #7
 8017580:	f240 80a5 	bls.w	80176ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017586:	330e      	adds	r3, #14
 8017588:	4619      	mov	r1, r3
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f7f8 fc94 	bl	800feb8 <pbuf_add_header>
 8017590:	4603      	mov	r3, r0
 8017592:	2b00      	cmp	r3, #0
 8017594:	d04b      	beq.n	801762e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	891a      	ldrh	r2, [r3, #8]
 801759a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801759c:	4413      	add	r3, r2
 801759e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	891b      	ldrh	r3, [r3, #8]
 80175a4:	8b7a      	ldrh	r2, [r7, #26]
 80175a6:	429a      	cmp	r2, r3
 80175a8:	f0c0 809a 	bcc.w	80176e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80175ac:	8b7b      	ldrh	r3, [r7, #26]
 80175ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175b2:	4619      	mov	r1, r3
 80175b4:	200e      	movs	r0, #14
 80175b6:	f7f8 fa31 	bl	800fa1c <pbuf_alloc>
 80175ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	f000 8090 	beq.w	80176e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	895b      	ldrh	r3, [r3, #10]
 80175c8:	461a      	mov	r2, r3
 80175ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175cc:	3308      	adds	r3, #8
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d203      	bcs.n	80175da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80175d2:	6978      	ldr	r0, [r7, #20]
 80175d4:	f7f8 fd06 	bl	800ffe4 <pbuf_free>
          goto icmperr;
 80175d8:	e085      	b.n	80176e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80175e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175e2:	4618      	mov	r0, r3
 80175e4:	f001 fd2b 	bl	801903e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80175e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175ea:	4619      	mov	r1, r3
 80175ec:	6978      	ldr	r0, [r7, #20]
 80175ee:	f7f8 fc73 	bl	800fed8 <pbuf_remove_header>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d009      	beq.n	801760c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80175f8:	4b40      	ldr	r3, [pc, #256]	; (80176fc <icmp_input+0x1f8>)
 80175fa:	22b6      	movs	r2, #182	; 0xb6
 80175fc:	4940      	ldr	r1, [pc, #256]	; (8017700 <icmp_input+0x1fc>)
 80175fe:	4841      	ldr	r0, [pc, #260]	; (8017704 <icmp_input+0x200>)
 8017600:	f001 fde2 	bl	80191c8 <iprintf>
          pbuf_free(r);
 8017604:	6978      	ldr	r0, [r7, #20]
 8017606:	f7f8 fced 	bl	800ffe4 <pbuf_free>
          goto icmperr;
 801760a:	e06c      	b.n	80176e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801760c:	6879      	ldr	r1, [r7, #4]
 801760e:	6978      	ldr	r0, [r7, #20]
 8017610:	f7f8 fe1c 	bl	801024c <pbuf_copy>
 8017614:	4603      	mov	r3, r0
 8017616:	2b00      	cmp	r3, #0
 8017618:	d003      	beq.n	8017622 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801761a:	6978      	ldr	r0, [r7, #20]
 801761c:	f7f8 fce2 	bl	800ffe4 <pbuf_free>
          goto icmperr;
 8017620:	e061      	b.n	80176e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f7f8 fcde 	bl	800ffe4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	607b      	str	r3, [r7, #4]
 801762c:	e00f      	b.n	801764e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801762e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017630:	330e      	adds	r3, #14
 8017632:	4619      	mov	r1, r3
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f7f8 fc4f 	bl	800fed8 <pbuf_remove_header>
 801763a:	4603      	mov	r3, r0
 801763c:	2b00      	cmp	r3, #0
 801763e:	d006      	beq.n	801764e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017640:	4b2e      	ldr	r3, [pc, #184]	; (80176fc <icmp_input+0x1f8>)
 8017642:	22c7      	movs	r2, #199	; 0xc7
 8017644:	4930      	ldr	r1, [pc, #192]	; (8017708 <icmp_input+0x204>)
 8017646:	482f      	ldr	r0, [pc, #188]	; (8017704 <icmp_input+0x200>)
 8017648:	f001 fdbe 	bl	80191c8 <iprintf>
          goto icmperr;
 801764c:	e04b      	b.n	80176e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	685b      	ldr	r3, [r3, #4]
 8017652:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017656:	4619      	mov	r1, r3
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f7f8 fc2d 	bl	800feb8 <pbuf_add_header>
 801765e:	4603      	mov	r3, r0
 8017660:	2b00      	cmp	r3, #0
 8017662:	d12b      	bne.n	80176bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	685b      	ldr	r3, [r3, #4]
 8017668:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801766a:	69fb      	ldr	r3, [r7, #28]
 801766c:	681a      	ldr	r2, [r3, #0]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017672:	4b20      	ldr	r3, [pc, #128]	; (80176f4 <icmp_input+0x1f0>)
 8017674:	691a      	ldr	r2, [r3, #16]
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	2200      	movs	r2, #0
 801767e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	2200      	movs	r2, #0
 8017684:	709a      	strb	r2, [r3, #2]
 8017686:	2200      	movs	r2, #0
 8017688:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	22ff      	movs	r2, #255	; 0xff
 801768e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2200      	movs	r2, #0
 8017694:	729a      	strb	r2, [r3, #10]
 8017696:	2200      	movs	r2, #0
 8017698:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	9302      	str	r3, [sp, #8]
 801769e:	2301      	movs	r3, #1
 80176a0:	9301      	str	r3, [sp, #4]
 80176a2:	2300      	movs	r3, #0
 80176a4:	9300      	str	r3, [sp, #0]
 80176a6:	23ff      	movs	r3, #255	; 0xff
 80176a8:	2200      	movs	r2, #0
 80176aa:	69f9      	ldr	r1, [r7, #28]
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f000 fa75 	bl	8017b9c <ip4_output_if>
 80176b2:	4603      	mov	r3, r0
 80176b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80176b6:	e001      	b.n	80176bc <icmp_input+0x1b8>
      break;
 80176b8:	bf00      	nop
 80176ba:	e000      	b.n	80176be <icmp_input+0x1ba>
      break;
 80176bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7f8 fc90 	bl	800ffe4 <pbuf_free>
  return;
 80176c4:	e013      	b.n	80176ee <icmp_input+0x1ea>
    goto lenerr;
 80176c6:	bf00      	nop
 80176c8:	e002      	b.n	80176d0 <icmp_input+0x1cc>
    goto lenerr;
 80176ca:	bf00      	nop
 80176cc:	e000      	b.n	80176d0 <icmp_input+0x1cc>
        goto lenerr;
 80176ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7f8 fc87 	bl	800ffe4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80176d6:	e00a      	b.n	80176ee <icmp_input+0x1ea>
        goto icmperr;
 80176d8:	bf00      	nop
 80176da:	e004      	b.n	80176e6 <icmp_input+0x1e2>
        goto icmperr;
 80176dc:	bf00      	nop
 80176de:	e002      	b.n	80176e6 <icmp_input+0x1e2>
          goto icmperr;
 80176e0:	bf00      	nop
 80176e2:	e000      	b.n	80176e6 <icmp_input+0x1e2>
          goto icmperr;
 80176e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7f8 fc7c 	bl	800ffe4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80176ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80176ee:	3728      	adds	r7, #40	; 0x28
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	2000a344 	.word	0x2000a344
 80176f8:	2000a358 	.word	0x2000a358
 80176fc:	0801cddc 	.word	0x0801cddc
 8017700:	0801ce14 	.word	0x0801ce14
 8017704:	0801ce4c 	.word	0x0801ce4c
 8017708:	0801ce74 	.word	0x0801ce74

0801770c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	460b      	mov	r3, r1
 8017716:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017718:	78fb      	ldrb	r3, [r7, #3]
 801771a:	461a      	mov	r2, r3
 801771c:	2103      	movs	r1, #3
 801771e:	6878      	ldr	r0, [r7, #4]
 8017720:	f000 f814 	bl	801774c <icmp_send_response>
}
 8017724:	bf00      	nop
 8017726:	3708      	adds	r7, #8
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}

0801772c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	460b      	mov	r3, r1
 8017736:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017738:	78fb      	ldrb	r3, [r7, #3]
 801773a:	461a      	mov	r2, r3
 801773c:	210b      	movs	r1, #11
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f000 f804 	bl	801774c <icmp_send_response>
}
 8017744:	bf00      	nop
 8017746:	3708      	adds	r7, #8
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b08c      	sub	sp, #48	; 0x30
 8017750:	af04      	add	r7, sp, #16
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	460b      	mov	r3, r1
 8017756:	70fb      	strb	r3, [r7, #3]
 8017758:	4613      	mov	r3, r2
 801775a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801775c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017760:	2124      	movs	r1, #36	; 0x24
 8017762:	2022      	movs	r0, #34	; 0x22
 8017764:	f7f8 f95a 	bl	800fa1c <pbuf_alloc>
 8017768:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801776a:	69fb      	ldr	r3, [r7, #28]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d04c      	beq.n	801780a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017770:	69fb      	ldr	r3, [r7, #28]
 8017772:	895b      	ldrh	r3, [r3, #10]
 8017774:	2b23      	cmp	r3, #35	; 0x23
 8017776:	d806      	bhi.n	8017786 <icmp_send_response+0x3a>
 8017778:	4b26      	ldr	r3, [pc, #152]	; (8017814 <icmp_send_response+0xc8>)
 801777a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801777e:	4926      	ldr	r1, [pc, #152]	; (8017818 <icmp_send_response+0xcc>)
 8017780:	4826      	ldr	r0, [pc, #152]	; (801781c <icmp_send_response+0xd0>)
 8017782:	f001 fd21 	bl	80191c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801778c:	69fb      	ldr	r3, [r7, #28]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	78fa      	ldrb	r2, [r7, #3]
 8017796:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	78ba      	ldrb	r2, [r7, #2]
 801779c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801779e:	697b      	ldr	r3, [r7, #20]
 80177a0:	2200      	movs	r2, #0
 80177a2:	711a      	strb	r2, [r3, #4]
 80177a4:	2200      	movs	r2, #0
 80177a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	2200      	movs	r2, #0
 80177ac:	719a      	strb	r2, [r3, #6]
 80177ae:	2200      	movs	r2, #0
 80177b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	685b      	ldr	r3, [r3, #4]
 80177b6:	f103 0008 	add.w	r0, r3, #8
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	221c      	movs	r2, #28
 80177c0:	4619      	mov	r1, r3
 80177c2:	f001 fc3c 	bl	801903e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	68db      	ldr	r3, [r3, #12]
 80177ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80177cc:	f107 030c 	add.w	r3, r7, #12
 80177d0:	4618      	mov	r0, r3
 80177d2:	f000 f825 	bl	8017820 <ip4_route>
 80177d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80177d8:	693b      	ldr	r3, [r7, #16]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d011      	beq.n	8017802 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	2200      	movs	r2, #0
 80177e2:	709a      	strb	r2, [r3, #2]
 80177e4:	2200      	movs	r2, #0
 80177e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80177e8:	f107 020c 	add.w	r2, r7, #12
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	9302      	str	r3, [sp, #8]
 80177f0:	2301      	movs	r3, #1
 80177f2:	9301      	str	r3, [sp, #4]
 80177f4:	2300      	movs	r3, #0
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	23ff      	movs	r3, #255	; 0xff
 80177fa:	2100      	movs	r1, #0
 80177fc:	69f8      	ldr	r0, [r7, #28]
 80177fe:	f000 f9cd 	bl	8017b9c <ip4_output_if>
  }
  pbuf_free(q);
 8017802:	69f8      	ldr	r0, [r7, #28]
 8017804:	f7f8 fbee 	bl	800ffe4 <pbuf_free>
 8017808:	e000      	b.n	801780c <icmp_send_response+0xc0>
    return;
 801780a:	bf00      	nop
}
 801780c:	3720      	adds	r7, #32
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
 8017812:	bf00      	nop
 8017814:	0801cddc 	.word	0x0801cddc
 8017818:	0801cea8 	.word	0x0801cea8
 801781c:	0801ce4c 	.word	0x0801ce4c

08017820 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017820:	b480      	push	{r7}
 8017822:	b085      	sub	sp, #20
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017828:	4b33      	ldr	r3, [pc, #204]	; (80178f8 <ip4_route+0xd8>)
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	60fb      	str	r3, [r7, #12]
 801782e:	e036      	b.n	801789e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017836:	f003 0301 	and.w	r3, r3, #1
 801783a:	b2db      	uxtb	r3, r3
 801783c:	2b00      	cmp	r3, #0
 801783e:	d02b      	beq.n	8017898 <ip4_route+0x78>
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017846:	089b      	lsrs	r3, r3, #2
 8017848:	f003 0301 	and.w	r3, r3, #1
 801784c:	b2db      	uxtb	r3, r3
 801784e:	2b00      	cmp	r3, #0
 8017850:	d022      	beq.n	8017898 <ip4_route+0x78>
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	3304      	adds	r3, #4
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d01d      	beq.n	8017898 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681a      	ldr	r2, [r3, #0]
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	3304      	adds	r3, #4
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	405a      	eors	r2, r3
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	3308      	adds	r3, #8
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4013      	ands	r3, r2
 8017870:	2b00      	cmp	r3, #0
 8017872:	d101      	bne.n	8017878 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	e038      	b.n	80178ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801787e:	f003 0302 	and.w	r3, r3, #2
 8017882:	2b00      	cmp	r3, #0
 8017884:	d108      	bne.n	8017898 <ip4_route+0x78>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681a      	ldr	r2, [r3, #0]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	330c      	adds	r3, #12
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	429a      	cmp	r2, r3
 8017892:	d101      	bne.n	8017898 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	e028      	b.n	80178ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	60fb      	str	r3, [r7, #12]
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1c5      	bne.n	8017830 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80178a4:	4b15      	ldr	r3, [pc, #84]	; (80178fc <ip4_route+0xdc>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d01a      	beq.n	80178e2 <ip4_route+0xc2>
 80178ac:	4b13      	ldr	r3, [pc, #76]	; (80178fc <ip4_route+0xdc>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178b4:	f003 0301 	and.w	r3, r3, #1
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d012      	beq.n	80178e2 <ip4_route+0xc2>
 80178bc:	4b0f      	ldr	r3, [pc, #60]	; (80178fc <ip4_route+0xdc>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80178c4:	f003 0304 	and.w	r3, r3, #4
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d00a      	beq.n	80178e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80178cc:	4b0b      	ldr	r3, [pc, #44]	; (80178fc <ip4_route+0xdc>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	3304      	adds	r3, #4
 80178d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d004      	beq.n	80178e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	b2db      	uxtb	r3, r3
 80178de:	2b7f      	cmp	r3, #127	; 0x7f
 80178e0:	d101      	bne.n	80178e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80178e2:	2300      	movs	r3, #0
 80178e4:	e001      	b.n	80178ea <ip4_route+0xca>
  }

  return netif_default;
 80178e6:	4b05      	ldr	r3, [pc, #20]	; (80178fc <ip4_route+0xdc>)
 80178e8:	681b      	ldr	r3, [r3, #0]
}
 80178ea:	4618      	mov	r0, r3
 80178ec:	3714      	adds	r7, #20
 80178ee:	46bd      	mov	sp, r7
 80178f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f4:	4770      	bx	lr
 80178f6:	bf00      	nop
 80178f8:	2000da8c 	.word	0x2000da8c
 80178fc:	2000da90 	.word	0x2000da90

08017900 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801790e:	f003 0301 	and.w	r3, r3, #1
 8017912:	b2db      	uxtb	r3, r3
 8017914:	2b00      	cmp	r3, #0
 8017916:	d016      	beq.n	8017946 <ip4_input_accept+0x46>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	3304      	adds	r3, #4
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d011      	beq.n	8017946 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017922:	4b0b      	ldr	r3, [pc, #44]	; (8017950 <ip4_input_accept+0x50>)
 8017924:	695a      	ldr	r2, [r3, #20]
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	3304      	adds	r3, #4
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	429a      	cmp	r2, r3
 801792e:	d008      	beq.n	8017942 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017930:	4b07      	ldr	r3, [pc, #28]	; (8017950 <ip4_input_accept+0x50>)
 8017932:	695b      	ldr	r3, [r3, #20]
 8017934:	6879      	ldr	r1, [r7, #4]
 8017936:	4618      	mov	r0, r3
 8017938:	f000 fa08 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 801793c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801793e:	2b00      	cmp	r3, #0
 8017940:	d001      	beq.n	8017946 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017942:	2301      	movs	r3, #1
 8017944:	e000      	b.n	8017948 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017946:	2300      	movs	r3, #0
}
 8017948:	4618      	mov	r0, r3
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	2000a344 	.word	0x2000a344

08017954 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b086      	sub	sp, #24
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	685b      	ldr	r3, [r3, #4]
 8017962:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017964:	697b      	ldr	r3, [r7, #20]
 8017966:	781b      	ldrb	r3, [r3, #0]
 8017968:	091b      	lsrs	r3, r3, #4
 801796a:	b2db      	uxtb	r3, r3
 801796c:	2b04      	cmp	r3, #4
 801796e:	d004      	beq.n	801797a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f7f8 fb37 	bl	800ffe4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017976:	2300      	movs	r3, #0
 8017978:	e107      	b.n	8017b8a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801797a:	697b      	ldr	r3, [r7, #20]
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	f003 030f 	and.w	r3, r3, #15
 8017982:	b2db      	uxtb	r3, r3
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	b2db      	uxtb	r3, r3
 8017988:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	885b      	ldrh	r3, [r3, #2]
 801798e:	b29b      	uxth	r3, r3
 8017990:	4618      	mov	r0, r3
 8017992:	f7f6 ff35 	bl	800e800 <lwip_htons>
 8017996:	4603      	mov	r3, r0
 8017998:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	891b      	ldrh	r3, [r3, #8]
 801799e:	89ba      	ldrh	r2, [r7, #12]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d204      	bcs.n	80179ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80179a4:	89bb      	ldrh	r3, [r7, #12]
 80179a6:	4619      	mov	r1, r3
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f7f8 f995 	bl	800fcd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	895b      	ldrh	r3, [r3, #10]
 80179b2:	89fa      	ldrh	r2, [r7, #14]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d807      	bhi.n	80179c8 <ip4_input+0x74>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	891b      	ldrh	r3, [r3, #8]
 80179bc:	89ba      	ldrh	r2, [r7, #12]
 80179be:	429a      	cmp	r2, r3
 80179c0:	d802      	bhi.n	80179c8 <ip4_input+0x74>
 80179c2:	89fb      	ldrh	r3, [r7, #14]
 80179c4:	2b13      	cmp	r3, #19
 80179c6:	d804      	bhi.n	80179d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f7f8 fb0b 	bl	800ffe4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80179ce:	2300      	movs	r3, #0
 80179d0:	e0db      	b.n	8017b8a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	691b      	ldr	r3, [r3, #16]
 80179d6:	4a6f      	ldr	r2, [pc, #444]	; (8017b94 <ip4_input+0x240>)
 80179d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80179da:	697b      	ldr	r3, [r7, #20]
 80179dc:	68db      	ldr	r3, [r3, #12]
 80179de:	4a6d      	ldr	r2, [pc, #436]	; (8017b94 <ip4_input+0x240>)
 80179e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80179e2:	4b6c      	ldr	r3, [pc, #432]	; (8017b94 <ip4_input+0x240>)
 80179e4:	695b      	ldr	r3, [r3, #20]
 80179e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80179ea:	2be0      	cmp	r3, #224	; 0xe0
 80179ec:	d112      	bne.n	8017a14 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80179f4:	f003 0301 	and.w	r3, r3, #1
 80179f8:	b2db      	uxtb	r3, r3
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d007      	beq.n	8017a0e <ip4_input+0xba>
 80179fe:	683b      	ldr	r3, [r7, #0]
 8017a00:	3304      	adds	r3, #4
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d002      	beq.n	8017a0e <ip4_input+0xba>
      netif = inp;
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	613b      	str	r3, [r7, #16]
 8017a0c:	e02a      	b.n	8017a64 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	613b      	str	r3, [r7, #16]
 8017a12:	e027      	b.n	8017a64 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017a14:	6838      	ldr	r0, [r7, #0]
 8017a16:	f7ff ff73 	bl	8017900 <ip4_input_accept>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d002      	beq.n	8017a26 <ip4_input+0xd2>
      netif = inp;
 8017a20:	683b      	ldr	r3, [r7, #0]
 8017a22:	613b      	str	r3, [r7, #16]
 8017a24:	e01e      	b.n	8017a64 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017a26:	2300      	movs	r3, #0
 8017a28:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017a2a:	4b5a      	ldr	r3, [pc, #360]	; (8017b94 <ip4_input+0x240>)
 8017a2c:	695b      	ldr	r3, [r3, #20]
 8017a2e:	b2db      	uxtb	r3, r3
 8017a30:	2b7f      	cmp	r3, #127	; 0x7f
 8017a32:	d017      	beq.n	8017a64 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017a34:	4b58      	ldr	r3, [pc, #352]	; (8017b98 <ip4_input+0x244>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	613b      	str	r3, [r7, #16]
 8017a3a:	e00e      	b.n	8017a5a <ip4_input+0x106>
          if (netif == inp) {
 8017a3c:	693a      	ldr	r2, [r7, #16]
 8017a3e:	683b      	ldr	r3, [r7, #0]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d006      	beq.n	8017a52 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017a44:	6938      	ldr	r0, [r7, #16]
 8017a46:	f7ff ff5b 	bl	8017900 <ip4_input_accept>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d108      	bne.n	8017a62 <ip4_input+0x10e>
 8017a50:	e000      	b.n	8017a54 <ip4_input+0x100>
            continue;
 8017a52:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017a54:	693b      	ldr	r3, [r7, #16]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	613b      	str	r3, [r7, #16]
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d1ed      	bne.n	8017a3c <ip4_input+0xe8>
 8017a60:	e000      	b.n	8017a64 <ip4_input+0x110>
            break;
 8017a62:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017a64:	4b4b      	ldr	r3, [pc, #300]	; (8017b94 <ip4_input+0x240>)
 8017a66:	691b      	ldr	r3, [r3, #16]
 8017a68:	6839      	ldr	r1, [r7, #0]
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f000 f96e 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d105      	bne.n	8017a82 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017a76:	4b47      	ldr	r3, [pc, #284]	; (8017b94 <ip4_input+0x240>)
 8017a78:	691b      	ldr	r3, [r3, #16]
 8017a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017a7e:	2be0      	cmp	r3, #224	; 0xe0
 8017a80:	d104      	bne.n	8017a8c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017a82:	6878      	ldr	r0, [r7, #4]
 8017a84:	f7f8 faae 	bl	800ffe4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	e07e      	b.n	8017b8a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017a8c:	693b      	ldr	r3, [r7, #16]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d104      	bne.n	8017a9c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f7f8 faa6 	bl	800ffe4 <pbuf_free>
    return ERR_OK;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	e076      	b.n	8017b8a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	88db      	ldrh	r3, [r3, #6]
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017aa8:	4013      	ands	r3, r2
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d00b      	beq.n	8017ac6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f000 fc92 	bl	80183d8 <ip4_reass>
 8017ab4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d101      	bne.n	8017ac0 <ip4_input+0x16c>
      return ERR_OK;
 8017abc:	2300      	movs	r3, #0
 8017abe:	e064      	b.n	8017b8a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	685b      	ldr	r3, [r3, #4]
 8017ac4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ac6:	4a33      	ldr	r2, [pc, #204]	; (8017b94 <ip4_input+0x240>)
 8017ac8:	693b      	ldr	r3, [r7, #16]
 8017aca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017acc:	4a31      	ldr	r2, [pc, #196]	; (8017b94 <ip4_input+0x240>)
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ad2:	4a30      	ldr	r2, [pc, #192]	; (8017b94 <ip4_input+0x240>)
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	781b      	ldrb	r3, [r3, #0]
 8017adc:	f003 030f 	and.w	r3, r3, #15
 8017ae0:	b2db      	uxtb	r3, r3
 8017ae2:	009b      	lsls	r3, r3, #2
 8017ae4:	b2db      	uxtb	r3, r3
 8017ae6:	b29a      	uxth	r2, r3
 8017ae8:	4b2a      	ldr	r3, [pc, #168]	; (8017b94 <ip4_input+0x240>)
 8017aea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017aec:	89fb      	ldrh	r3, [r7, #14]
 8017aee:	4619      	mov	r1, r3
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f7f8 f9f1 	bl	800fed8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	7a5b      	ldrb	r3, [r3, #9]
 8017afa:	2b11      	cmp	r3, #17
 8017afc:	d006      	beq.n	8017b0c <ip4_input+0x1b8>
 8017afe:	2b11      	cmp	r3, #17
 8017b00:	dc13      	bgt.n	8017b2a <ip4_input+0x1d6>
 8017b02:	2b01      	cmp	r3, #1
 8017b04:	d00c      	beq.n	8017b20 <ip4_input+0x1cc>
 8017b06:	2b06      	cmp	r3, #6
 8017b08:	d005      	beq.n	8017b16 <ip4_input+0x1c2>
 8017b0a:	e00e      	b.n	8017b2a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017b0c:	6839      	ldr	r1, [r7, #0]
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	f7fe f928 	bl	8015d64 <udp_input>
        break;
 8017b14:	e026      	b.n	8017b64 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017b16:	6839      	ldr	r1, [r7, #0]
 8017b18:	6878      	ldr	r0, [r7, #4]
 8017b1a:	f7fa f939 	bl	8011d90 <tcp_input>
        break;
 8017b1e:	e021      	b.n	8017b64 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017b20:	6839      	ldr	r1, [r7, #0]
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f7ff fcee 	bl	8017504 <icmp_input>
        break;
 8017b28:	e01c      	b.n	8017b64 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017b2a:	4b1a      	ldr	r3, [pc, #104]	; (8017b94 <ip4_input+0x240>)
 8017b2c:	695b      	ldr	r3, [r3, #20]
 8017b2e:	6939      	ldr	r1, [r7, #16]
 8017b30:	4618      	mov	r0, r3
 8017b32:	f000 f90b 	bl	8017d4c <ip4_addr_isbroadcast_u32>
 8017b36:	4603      	mov	r3, r0
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10f      	bne.n	8017b5c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017b3c:	4b15      	ldr	r3, [pc, #84]	; (8017b94 <ip4_input+0x240>)
 8017b3e:	695b      	ldr	r3, [r3, #20]
 8017b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017b44:	2be0      	cmp	r3, #224	; 0xe0
 8017b46:	d009      	beq.n	8017b5c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f7f8 fa35 	bl	800ffbe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017b54:	2102      	movs	r1, #2
 8017b56:	6878      	ldr	r0, [r7, #4]
 8017b58:	f7ff fdd8 	bl	801770c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	f7f8 fa41 	bl	800ffe4 <pbuf_free>
        break;
 8017b62:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017b64:	4b0b      	ldr	r3, [pc, #44]	; (8017b94 <ip4_input+0x240>)
 8017b66:	2200      	movs	r2, #0
 8017b68:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017b6a:	4b0a      	ldr	r3, [pc, #40]	; (8017b94 <ip4_input+0x240>)
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017b70:	4b08      	ldr	r3, [pc, #32]	; (8017b94 <ip4_input+0x240>)
 8017b72:	2200      	movs	r2, #0
 8017b74:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017b76:	4b07      	ldr	r3, [pc, #28]	; (8017b94 <ip4_input+0x240>)
 8017b78:	2200      	movs	r2, #0
 8017b7a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017b7c:	4b05      	ldr	r3, [pc, #20]	; (8017b94 <ip4_input+0x240>)
 8017b7e:	2200      	movs	r2, #0
 8017b80:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017b82:	4b04      	ldr	r3, [pc, #16]	; (8017b94 <ip4_input+0x240>)
 8017b84:	2200      	movs	r2, #0
 8017b86:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017b88:	2300      	movs	r3, #0
}
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3718      	adds	r7, #24
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	2000a344 	.word	0x2000a344
 8017b98:	2000da8c 	.word	0x2000da8c

08017b9c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b08a      	sub	sp, #40	; 0x28
 8017ba0:	af04      	add	r7, sp, #16
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
 8017ba8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d009      	beq.n	8017bc8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d003      	beq.n	8017bc2 <ip4_output_if+0x26>
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d102      	bne.n	8017bc8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc4:	3304      	adds	r3, #4
 8017bc6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017bc8:	78fa      	ldrb	r2, [r7, #3]
 8017bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bcc:	9302      	str	r3, [sp, #8]
 8017bce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017bd2:	9301      	str	r3, [sp, #4]
 8017bd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	4613      	mov	r3, r2
 8017bdc:	687a      	ldr	r2, [r7, #4]
 8017bde:	6979      	ldr	r1, [r7, #20]
 8017be0:	68f8      	ldr	r0, [r7, #12]
 8017be2:	f000 f805 	bl	8017bf0 <ip4_output_if_src>
 8017be6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3718      	adds	r7, #24
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b088      	sub	sp, #32
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	60f8      	str	r0, [r7, #12]
 8017bf8:	60b9      	str	r1, [r7, #8]
 8017bfa:	607a      	str	r2, [r7, #4]
 8017bfc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	7b9b      	ldrb	r3, [r3, #14]
 8017c02:	2b01      	cmp	r3, #1
 8017c04:	d006      	beq.n	8017c14 <ip4_output_if_src+0x24>
 8017c06:	4b4b      	ldr	r3, [pc, #300]	; (8017d34 <ip4_output_if_src+0x144>)
 8017c08:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017c0c:	494a      	ldr	r1, [pc, #296]	; (8017d38 <ip4_output_if_src+0x148>)
 8017c0e:	484b      	ldr	r0, [pc, #300]	; (8017d3c <ip4_output_if_src+0x14c>)
 8017c10:	f001 fada 	bl	80191c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d060      	beq.n	8017cdc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017c1a:	2314      	movs	r3, #20
 8017c1c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017c1e:	2114      	movs	r1, #20
 8017c20:	68f8      	ldr	r0, [r7, #12]
 8017c22:	f7f8 f949 	bl	800feb8 <pbuf_add_header>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d002      	beq.n	8017c32 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017c2c:	f06f 0301 	mvn.w	r3, #1
 8017c30:	e07c      	b.n	8017d2c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	685b      	ldr	r3, [r3, #4]
 8017c36:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	895b      	ldrh	r3, [r3, #10]
 8017c3c:	2b13      	cmp	r3, #19
 8017c3e:	d806      	bhi.n	8017c4e <ip4_output_if_src+0x5e>
 8017c40:	4b3c      	ldr	r3, [pc, #240]	; (8017d34 <ip4_output_if_src+0x144>)
 8017c42:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017c46:	493e      	ldr	r1, [pc, #248]	; (8017d40 <ip4_output_if_src+0x150>)
 8017c48:	483c      	ldr	r0, [pc, #240]	; (8017d3c <ip4_output_if_src+0x14c>)
 8017c4a:	f001 fabd 	bl	80191c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017c4e:	69fb      	ldr	r3, [r7, #28]
 8017c50:	78fa      	ldrb	r2, [r7, #3]
 8017c52:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017c54:	69fb      	ldr	r3, [r7, #28]
 8017c56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017c5a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681a      	ldr	r2, [r3, #0]
 8017c60:	69fb      	ldr	r3, [r7, #28]
 8017c62:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017c64:	8b7b      	ldrh	r3, [r7, #26]
 8017c66:	089b      	lsrs	r3, r3, #2
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	b2db      	uxtb	r3, r3
 8017c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c70:	b2da      	uxtb	r2, r3
 8017c72:	69fb      	ldr	r3, [r7, #28]
 8017c74:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017c76:	69fb      	ldr	r3, [r7, #28]
 8017c78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017c7c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	891b      	ldrh	r3, [r3, #8]
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7f6 fdbc 	bl	800e800 <lwip_htons>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	461a      	mov	r2, r3
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017c90:	69fb      	ldr	r3, [r7, #28]
 8017c92:	2200      	movs	r2, #0
 8017c94:	719a      	strb	r2, [r3, #6]
 8017c96:	2200      	movs	r2, #0
 8017c98:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017c9a:	4b2a      	ldr	r3, [pc, #168]	; (8017d44 <ip4_output_if_src+0x154>)
 8017c9c:	881b      	ldrh	r3, [r3, #0]
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7f6 fdae 	bl	800e800 <lwip_htons>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	69fb      	ldr	r3, [r7, #28]
 8017caa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017cac:	4b25      	ldr	r3, [pc, #148]	; (8017d44 <ip4_output_if_src+0x154>)
 8017cae:	881b      	ldrh	r3, [r3, #0]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	b29a      	uxth	r2, r3
 8017cb4:	4b23      	ldr	r3, [pc, #140]	; (8017d44 <ip4_output_if_src+0x154>)
 8017cb6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d104      	bne.n	8017cc8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017cbe:	4b22      	ldr	r3, [pc, #136]	; (8017d48 <ip4_output_if_src+0x158>)
 8017cc0:	681a      	ldr	r2, [r3, #0]
 8017cc2:	69fb      	ldr	r3, [r7, #28]
 8017cc4:	60da      	str	r2, [r3, #12]
 8017cc6:	e003      	b.n	8017cd0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	681a      	ldr	r2, [r3, #0]
 8017ccc:	69fb      	ldr	r3, [r7, #28]
 8017cce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017cd0:	69fb      	ldr	r3, [r7, #28]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	729a      	strb	r2, [r3, #10]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	72da      	strb	r2, [r3, #11]
 8017cda:	e00f      	b.n	8017cfc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	895b      	ldrh	r3, [r3, #10]
 8017ce0:	2b13      	cmp	r3, #19
 8017ce2:	d802      	bhi.n	8017cea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ce4:	f06f 0301 	mvn.w	r3, #1
 8017ce8:	e020      	b.n	8017d2c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	691b      	ldr	r3, [r3, #16]
 8017cf4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017cf6:	f107 0314 	add.w	r3, r7, #20
 8017cfa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d00c      	beq.n	8017d1e <ip4_output_if_src+0x12e>
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	891a      	ldrh	r2, [r3, #8]
 8017d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d906      	bls.n	8017d1e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017d10:	687a      	ldr	r2, [r7, #4]
 8017d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017d14:	68f8      	ldr	r0, [r7, #12]
 8017d16:	f000 fd53 	bl	80187c0 <ip4_frag>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	e006      	b.n	8017d2c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d20:	695b      	ldr	r3, [r3, #20]
 8017d22:	687a      	ldr	r2, [r7, #4]
 8017d24:	68f9      	ldr	r1, [r7, #12]
 8017d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d28:	4798      	blx	r3
 8017d2a:	4603      	mov	r3, r0
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3720      	adds	r7, #32
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}
 8017d34:	0801ced4 	.word	0x0801ced4
 8017d38:	0801cf08 	.word	0x0801cf08
 8017d3c:	0801cf14 	.word	0x0801cf14
 8017d40:	0801cf3c 	.word	0x0801cf3c
 8017d44:	2000dbea 	.word	0x2000dbea
 8017d48:	0801d3fc 	.word	0x0801d3fc

08017d4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017d4c:	b480      	push	{r7}
 8017d4e:	b085      	sub	sp, #20
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d60:	d002      	beq.n	8017d68 <ip4_addr_isbroadcast_u32+0x1c>
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d101      	bne.n	8017d6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017d68:	2301      	movs	r3, #1
 8017d6a:	e02a      	b.n	8017dc2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d72:	f003 0302 	and.w	r3, r3, #2
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d101      	bne.n	8017d7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	e021      	b.n	8017dc2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	3304      	adds	r3, #4
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d101      	bne.n	8017d8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	e019      	b.n	8017dc2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017d8e:	68fa      	ldr	r2, [r7, #12]
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	3304      	adds	r3, #4
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	405a      	eors	r2, r3
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	3308      	adds	r3, #8
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4013      	ands	r3, r2
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d10d      	bne.n	8017dc0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	3308      	adds	r3, #8
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	43da      	mvns	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	3308      	adds	r3, #8
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d101      	bne.n	8017dc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	e000      	b.n	8017dc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017dc0:	2300      	movs	r3, #0
  }
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3714      	adds	r7, #20
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dcc:	4770      	bx	lr
	...

08017dd0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b084      	sub	sp, #16
 8017dd4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017dda:	4b12      	ldr	r3, [pc, #72]	; (8017e24 <ip_reass_tmr+0x54>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017de0:	e018      	b.n	8017e14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	7fdb      	ldrb	r3, [r3, #31]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d00b      	beq.n	8017e02 <ip_reass_tmr+0x32>
      r->timer--;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	7fdb      	ldrb	r3, [r3, #31]
 8017dee:	3b01      	subs	r3, #1
 8017df0:	b2da      	uxtb	r2, r3
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	60fb      	str	r3, [r7, #12]
 8017e00:	e008      	b.n	8017e14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017e0c:	68b9      	ldr	r1, [r7, #8]
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f000 f80a 	bl	8017e28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d1e3      	bne.n	8017de2 <ip_reass_tmr+0x12>
    }
  }
}
 8017e1a:	bf00      	nop
 8017e1c:	bf00      	nop
 8017e1e:	3710      	adds	r7, #16
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}
 8017e24:	2000dbec 	.word	0x2000dbec

08017e28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b088      	sub	sp, #32
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017e32:	2300      	movs	r3, #0
 8017e34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017e36:	683a      	ldr	r2, [r7, #0]
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d105      	bne.n	8017e4a <ip_reass_free_complete_datagram+0x22>
 8017e3e:	4b45      	ldr	r3, [pc, #276]	; (8017f54 <ip_reass_free_complete_datagram+0x12c>)
 8017e40:	22ab      	movs	r2, #171	; 0xab
 8017e42:	4945      	ldr	r1, [pc, #276]	; (8017f58 <ip_reass_free_complete_datagram+0x130>)
 8017e44:	4845      	ldr	r0, [pc, #276]	; (8017f5c <ip_reass_free_complete_datagram+0x134>)
 8017e46:	f001 f9bf 	bl	80191c8 <iprintf>
  if (prev != NULL) {
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00a      	beq.n	8017e66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	687a      	ldr	r2, [r7, #4]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d005      	beq.n	8017e66 <ip_reass_free_complete_datagram+0x3e>
 8017e5a:	4b3e      	ldr	r3, [pc, #248]	; (8017f54 <ip_reass_free_complete_datagram+0x12c>)
 8017e5c:	22ad      	movs	r2, #173	; 0xad
 8017e5e:	4940      	ldr	r1, [pc, #256]	; (8017f60 <ip_reass_free_complete_datagram+0x138>)
 8017e60:	483e      	ldr	r0, [pc, #248]	; (8017f5c <ip_reass_free_complete_datagram+0x134>)
 8017e62:	f001 f9b1 	bl	80191c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	685b      	ldr	r3, [r3, #4]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	889b      	ldrh	r3, [r3, #4]
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d12a      	bne.n	8017ece <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	685b      	ldr	r3, [r3, #4]
 8017e7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017e7e:	697b      	ldr	r3, [r7, #20]
 8017e80:	681a      	ldr	r2, [r3, #0]
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017e86:	69bb      	ldr	r3, [r7, #24]
 8017e88:	6858      	ldr	r0, [r3, #4]
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	3308      	adds	r3, #8
 8017e8e:	2214      	movs	r2, #20
 8017e90:	4619      	mov	r1, r3
 8017e92:	f001 f8d4 	bl	801903e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017e96:	2101      	movs	r1, #1
 8017e98:	69b8      	ldr	r0, [r7, #24]
 8017e9a:	f7ff fc47 	bl	801772c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017e9e:	69b8      	ldr	r0, [r7, #24]
 8017ea0:	f7f8 f92e 	bl	8010100 <pbuf_clen>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017ea8:	8bfa      	ldrh	r2, [r7, #30]
 8017eaa:	8a7b      	ldrh	r3, [r7, #18]
 8017eac:	4413      	add	r3, r2
 8017eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017eb2:	db05      	blt.n	8017ec0 <ip_reass_free_complete_datagram+0x98>
 8017eb4:	4b27      	ldr	r3, [pc, #156]	; (8017f54 <ip_reass_free_complete_datagram+0x12c>)
 8017eb6:	22bc      	movs	r2, #188	; 0xbc
 8017eb8:	492a      	ldr	r1, [pc, #168]	; (8017f64 <ip_reass_free_complete_datagram+0x13c>)
 8017eba:	4828      	ldr	r0, [pc, #160]	; (8017f5c <ip_reass_free_complete_datagram+0x134>)
 8017ebc:	f001 f984 	bl	80191c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017ec0:	8bfa      	ldrh	r2, [r7, #30]
 8017ec2:	8a7b      	ldrh	r3, [r7, #18]
 8017ec4:	4413      	add	r3, r2
 8017ec6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017ec8:	69b8      	ldr	r0, [r7, #24]
 8017eca:	f7f8 f88b 	bl	800ffe4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017ed4:	e01f      	b.n	8017f16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	685b      	ldr	r3, [r3, #4]
 8017eda:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017ee6:	68f8      	ldr	r0, [r7, #12]
 8017ee8:	f7f8 f90a 	bl	8010100 <pbuf_clen>
 8017eec:	4603      	mov	r3, r0
 8017eee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017ef0:	8bfa      	ldrh	r2, [r7, #30]
 8017ef2:	8a7b      	ldrh	r3, [r7, #18]
 8017ef4:	4413      	add	r3, r2
 8017ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017efa:	db05      	blt.n	8017f08 <ip_reass_free_complete_datagram+0xe0>
 8017efc:	4b15      	ldr	r3, [pc, #84]	; (8017f54 <ip_reass_free_complete_datagram+0x12c>)
 8017efe:	22cc      	movs	r2, #204	; 0xcc
 8017f00:	4918      	ldr	r1, [pc, #96]	; (8017f64 <ip_reass_free_complete_datagram+0x13c>)
 8017f02:	4816      	ldr	r0, [pc, #88]	; (8017f5c <ip_reass_free_complete_datagram+0x134>)
 8017f04:	f001 f960 	bl	80191c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017f08:	8bfa      	ldrh	r2, [r7, #30]
 8017f0a:	8a7b      	ldrh	r3, [r7, #18]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017f10:	68f8      	ldr	r0, [r7, #12]
 8017f12:	f7f8 f867 	bl	800ffe4 <pbuf_free>
  while (p != NULL) {
 8017f16:	69bb      	ldr	r3, [r7, #24]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d1dc      	bne.n	8017ed6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017f1c:	6839      	ldr	r1, [r7, #0]
 8017f1e:	6878      	ldr	r0, [r7, #4]
 8017f20:	f000 f8c2 	bl	80180a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017f24:	4b10      	ldr	r3, [pc, #64]	; (8017f68 <ip_reass_free_complete_datagram+0x140>)
 8017f26:	881b      	ldrh	r3, [r3, #0]
 8017f28:	8bfa      	ldrh	r2, [r7, #30]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d905      	bls.n	8017f3a <ip_reass_free_complete_datagram+0x112>
 8017f2e:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <ip_reass_free_complete_datagram+0x12c>)
 8017f30:	22d2      	movs	r2, #210	; 0xd2
 8017f32:	490e      	ldr	r1, [pc, #56]	; (8017f6c <ip_reass_free_complete_datagram+0x144>)
 8017f34:	4809      	ldr	r0, [pc, #36]	; (8017f5c <ip_reass_free_complete_datagram+0x134>)
 8017f36:	f001 f947 	bl	80191c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017f3a:	4b0b      	ldr	r3, [pc, #44]	; (8017f68 <ip_reass_free_complete_datagram+0x140>)
 8017f3c:	881a      	ldrh	r2, [r3, #0]
 8017f3e:	8bfb      	ldrh	r3, [r7, #30]
 8017f40:	1ad3      	subs	r3, r2, r3
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	4b08      	ldr	r3, [pc, #32]	; (8017f68 <ip_reass_free_complete_datagram+0x140>)
 8017f46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017f48:	8bfb      	ldrh	r3, [r7, #30]
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3720      	adds	r7, #32
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	0801cf6c 	.word	0x0801cf6c
 8017f58:	0801cfa8 	.word	0x0801cfa8
 8017f5c:	0801cfb4 	.word	0x0801cfb4
 8017f60:	0801cfdc 	.word	0x0801cfdc
 8017f64:	0801cff0 	.word	0x0801cff0
 8017f68:	2000dbf0 	.word	0x2000dbf0
 8017f6c:	0801d010 	.word	0x0801d010

08017f70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b08a      	sub	sp, #40	; 0x28
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
 8017f78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017f82:	2300      	movs	r3, #0
 8017f84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017f86:	2300      	movs	r3, #0
 8017f88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017f8e:	4b28      	ldr	r3, [pc, #160]	; (8018030 <ip_reass_remove_oldest_datagram+0xc0>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017f94:	e030      	b.n	8017ff8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f98:	695a      	ldr	r2, [r3, #20]
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d10c      	bne.n	8017fbc <ip_reass_remove_oldest_datagram+0x4c>
 8017fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa4:	699a      	ldr	r2, [r3, #24]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	691b      	ldr	r3, [r3, #16]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d106      	bne.n	8017fbc <ip_reass_remove_oldest_datagram+0x4c>
 8017fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb0:	899a      	ldrh	r2, [r3, #12]
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	889b      	ldrh	r3, [r3, #4]
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d014      	beq.n	8017fe6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017fc2:	6a3b      	ldr	r3, [r7, #32]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d104      	bne.n	8017fd2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017fcc:	69fb      	ldr	r3, [r7, #28]
 8017fce:	61bb      	str	r3, [r7, #24]
 8017fd0:	e009      	b.n	8017fe6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd4:	7fda      	ldrb	r2, [r3, #31]
 8017fd6:	6a3b      	ldr	r3, [r7, #32]
 8017fd8:	7fdb      	ldrb	r3, [r3, #31]
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d803      	bhi.n	8017fe6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017fe2:	69fb      	ldr	r3, [r7, #28]
 8017fe4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d001      	beq.n	8017ff2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d1cb      	bne.n	8017f96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017ffe:	6a3b      	ldr	r3, [r7, #32]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d008      	beq.n	8018016 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018004:	69b9      	ldr	r1, [r7, #24]
 8018006:	6a38      	ldr	r0, [r7, #32]
 8018008:	f7ff ff0e 	bl	8017e28 <ip_reass_free_complete_datagram>
 801800c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801800e:	697a      	ldr	r2, [r7, #20]
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	4413      	add	r3, r2
 8018014:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018016:	697a      	ldr	r2, [r7, #20]
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	429a      	cmp	r2, r3
 801801c:	da02      	bge.n	8018024 <ip_reass_remove_oldest_datagram+0xb4>
 801801e:	693b      	ldr	r3, [r7, #16]
 8018020:	2b01      	cmp	r3, #1
 8018022:	dcac      	bgt.n	8017f7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018024:	697b      	ldr	r3, [r7, #20]
}
 8018026:	4618      	mov	r0, r3
 8018028:	3728      	adds	r7, #40	; 0x28
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	2000dbec 	.word	0x2000dbec

08018034 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b084      	sub	sp, #16
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801803e:	2004      	movs	r0, #4
 8018040:	f7f7 f8b6 	bl	800f1b0 <memp_malloc>
 8018044:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d110      	bne.n	801806e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801804c:	6839      	ldr	r1, [r7, #0]
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f7ff ff8e 	bl	8017f70 <ip_reass_remove_oldest_datagram>
 8018054:	4602      	mov	r2, r0
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	4293      	cmp	r3, r2
 801805a:	dc03      	bgt.n	8018064 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801805c:	2004      	movs	r0, #4
 801805e:	f7f7 f8a7 	bl	800f1b0 <memp_malloc>
 8018062:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d101      	bne.n	801806e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801806a:	2300      	movs	r3, #0
 801806c:	e016      	b.n	801809c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801806e:	2220      	movs	r2, #32
 8018070:	2100      	movs	r1, #0
 8018072:	68f8      	ldr	r0, [r7, #12]
 8018074:	f001 f80b 	bl	801908e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	220f      	movs	r2, #15
 801807c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801807e:	4b09      	ldr	r3, [pc, #36]	; (80180a4 <ip_reass_enqueue_new_datagram+0x70>)
 8018080:	681a      	ldr	r2, [r3, #0]
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018086:	4a07      	ldr	r2, [pc, #28]	; (80180a4 <ip_reass_enqueue_new_datagram+0x70>)
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	3308      	adds	r3, #8
 8018090:	2214      	movs	r2, #20
 8018092:	6879      	ldr	r1, [r7, #4]
 8018094:	4618      	mov	r0, r3
 8018096:	f000 ffd2 	bl	801903e <memcpy>
  return ipr;
 801809a:	68fb      	ldr	r3, [r7, #12]
}
 801809c:	4618      	mov	r0, r3
 801809e:	3710      	adds	r7, #16
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	2000dbec 	.word	0x2000dbec

080180a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80180b2:	4b10      	ldr	r3, [pc, #64]	; (80180f4 <ip_reass_dequeue_datagram+0x4c>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	687a      	ldr	r2, [r7, #4]
 80180b8:	429a      	cmp	r2, r3
 80180ba:	d104      	bne.n	80180c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	4a0c      	ldr	r2, [pc, #48]	; (80180f4 <ip_reass_dequeue_datagram+0x4c>)
 80180c2:	6013      	str	r3, [r2, #0]
 80180c4:	e00d      	b.n	80180e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80180c6:	683b      	ldr	r3, [r7, #0]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d106      	bne.n	80180da <ip_reass_dequeue_datagram+0x32>
 80180cc:	4b0a      	ldr	r3, [pc, #40]	; (80180f8 <ip_reass_dequeue_datagram+0x50>)
 80180ce:	f240 1245 	movw	r2, #325	; 0x145
 80180d2:	490a      	ldr	r1, [pc, #40]	; (80180fc <ip_reass_dequeue_datagram+0x54>)
 80180d4:	480a      	ldr	r0, [pc, #40]	; (8018100 <ip_reass_dequeue_datagram+0x58>)
 80180d6:	f001 f877 	bl	80191c8 <iprintf>
    prev->next = ipr->next;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681a      	ldr	r2, [r3, #0]
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80180e2:	6879      	ldr	r1, [r7, #4]
 80180e4:	2004      	movs	r0, #4
 80180e6:	f7f7 f8d9 	bl	800f29c <memp_free>
}
 80180ea:	bf00      	nop
 80180ec:	3708      	adds	r7, #8
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}
 80180f2:	bf00      	nop
 80180f4:	2000dbec 	.word	0x2000dbec
 80180f8:	0801cf6c 	.word	0x0801cf6c
 80180fc:	0801d034 	.word	0x0801d034
 8018100:	0801cfb4 	.word	0x0801cfb4

08018104 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b08c      	sub	sp, #48	; 0x30
 8018108:	af00      	add	r7, sp, #0
 801810a:	60f8      	str	r0, [r7, #12]
 801810c:	60b9      	str	r1, [r7, #8]
 801810e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018110:	2300      	movs	r3, #0
 8018112:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018114:	2301      	movs	r3, #1
 8018116:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801811e:	69fb      	ldr	r3, [r7, #28]
 8018120:	885b      	ldrh	r3, [r3, #2]
 8018122:	b29b      	uxth	r3, r3
 8018124:	4618      	mov	r0, r3
 8018126:	f7f6 fb6b 	bl	800e800 <lwip_htons>
 801812a:	4603      	mov	r3, r0
 801812c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801812e:	69fb      	ldr	r3, [r7, #28]
 8018130:	781b      	ldrb	r3, [r3, #0]
 8018132:	f003 030f 	and.w	r3, r3, #15
 8018136:	b2db      	uxtb	r3, r3
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801813c:	7e7b      	ldrb	r3, [r7, #25]
 801813e:	b29b      	uxth	r3, r3
 8018140:	8b7a      	ldrh	r2, [r7, #26]
 8018142:	429a      	cmp	r2, r3
 8018144:	d202      	bcs.n	801814c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018146:	f04f 33ff 	mov.w	r3, #4294967295
 801814a:	e135      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801814c:	7e7b      	ldrb	r3, [r7, #25]
 801814e:	b29b      	uxth	r3, r3
 8018150:	8b7a      	ldrh	r2, [r7, #26]
 8018152:	1ad3      	subs	r3, r2, r3
 8018154:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018156:	69fb      	ldr	r3, [r7, #28]
 8018158:	88db      	ldrh	r3, [r3, #6]
 801815a:	b29b      	uxth	r3, r3
 801815c:	4618      	mov	r0, r3
 801815e:	f7f6 fb4f 	bl	800e800 <lwip_htons>
 8018162:	4603      	mov	r3, r0
 8018164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018168:	b29b      	uxth	r3, r3
 801816a:	00db      	lsls	r3, r3, #3
 801816c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018176:	2200      	movs	r2, #0
 8018178:	701a      	strb	r2, [r3, #0]
 801817a:	2200      	movs	r2, #0
 801817c:	705a      	strb	r2, [r3, #1]
 801817e:	2200      	movs	r2, #0
 8018180:	709a      	strb	r2, [r3, #2]
 8018182:	2200      	movs	r2, #0
 8018184:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018188:	8afa      	ldrh	r2, [r7, #22]
 801818a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801818c:	8afa      	ldrh	r2, [r7, #22]
 801818e:	8b7b      	ldrh	r3, [r7, #26]
 8018190:	4413      	add	r3, r2
 8018192:	b29a      	uxth	r2, r3
 8018194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018196:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801819a:	88db      	ldrh	r3, [r3, #6]
 801819c:	b29b      	uxth	r3, r3
 801819e:	8afa      	ldrh	r2, [r7, #22]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d902      	bls.n	80181aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181a4:	f04f 33ff 	mov.w	r3, #4294967295
 80181a8:	e106      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	627b      	str	r3, [r7, #36]	; 0x24
 80181b0:	e068      	b.n	8018284 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80181b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80181b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ba:	889b      	ldrh	r3, [r3, #4]
 80181bc:	b29a      	uxth	r2, r3
 80181be:	693b      	ldr	r3, [r7, #16]
 80181c0:	889b      	ldrh	r3, [r3, #4]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d235      	bcs.n	8018234 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80181c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80181ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d020      	beq.n	8018216 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80181d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181d6:	889b      	ldrh	r3, [r3, #4]
 80181d8:	b29a      	uxth	r2, r3
 80181da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181dc:	88db      	ldrh	r3, [r3, #6]
 80181de:	b29b      	uxth	r3, r3
 80181e0:	429a      	cmp	r2, r3
 80181e2:	d307      	bcc.n	80181f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80181e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181e6:	88db      	ldrh	r3, [r3, #6]
 80181e8:	b29a      	uxth	r2, r3
 80181ea:	693b      	ldr	r3, [r7, #16]
 80181ec:	889b      	ldrh	r3, [r3, #4]
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d902      	bls.n	80181fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181f4:	f04f 33ff 	mov.w	r3, #4294967295
 80181f8:	e0de      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80181fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fc:	68ba      	ldr	r2, [r7, #8]
 80181fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018202:	88db      	ldrh	r3, [r3, #6]
 8018204:	b29a      	uxth	r2, r3
 8018206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018208:	889b      	ldrh	r3, [r3, #4]
 801820a:	b29b      	uxth	r3, r3
 801820c:	429a      	cmp	r2, r3
 801820e:	d03d      	beq.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018210:	2300      	movs	r3, #0
 8018212:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018214:	e03a      	b.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018218:	88db      	ldrh	r3, [r3, #6]
 801821a:	b29a      	uxth	r2, r3
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	889b      	ldrh	r3, [r3, #4]
 8018220:	b29b      	uxth	r3, r3
 8018222:	429a      	cmp	r2, r3
 8018224:	d902      	bls.n	801822c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018226:	f04f 33ff 	mov.w	r3, #4294967295
 801822a:	e0c5      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	68ba      	ldr	r2, [r7, #8]
 8018230:	605a      	str	r2, [r3, #4]
      break;
 8018232:	e02b      	b.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018236:	889b      	ldrh	r3, [r3, #4]
 8018238:	b29a      	uxth	r2, r3
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	889b      	ldrh	r3, [r3, #4]
 801823e:	b29b      	uxth	r3, r3
 8018240:	429a      	cmp	r2, r3
 8018242:	d102      	bne.n	801824a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018244:	f04f 33ff 	mov.w	r3, #4294967295
 8018248:	e0b6      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801824c:	889b      	ldrh	r3, [r3, #4]
 801824e:	b29a      	uxth	r2, r3
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	88db      	ldrh	r3, [r3, #6]
 8018254:	b29b      	uxth	r3, r3
 8018256:	429a      	cmp	r2, r3
 8018258:	d202      	bcs.n	8018260 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801825a:	f04f 33ff 	mov.w	r3, #4294967295
 801825e:	e0ab      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018262:	2b00      	cmp	r3, #0
 8018264:	d009      	beq.n	801827a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018268:	88db      	ldrh	r3, [r3, #6]
 801826a:	b29a      	uxth	r2, r3
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	889b      	ldrh	r3, [r3, #4]
 8018270:	b29b      	uxth	r3, r3
 8018272:	429a      	cmp	r2, r3
 8018274:	d001      	beq.n	801827a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018276:	2300      	movs	r3, #0
 8018278:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801827a:	693b      	ldr	r3, [r7, #16]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018280:	693b      	ldr	r3, [r7, #16]
 8018282:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018286:	2b00      	cmp	r3, #0
 8018288:	d193      	bne.n	80181b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801828a:	e000      	b.n	801828e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801828c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018290:	2b00      	cmp	r3, #0
 8018292:	d12d      	bne.n	80182f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018296:	2b00      	cmp	r3, #0
 8018298:	d01c      	beq.n	80182d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801829c:	88db      	ldrh	r3, [r3, #6]
 801829e:	b29a      	uxth	r2, r3
 80182a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182a2:	889b      	ldrh	r3, [r3, #4]
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d906      	bls.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80182aa:	4b45      	ldr	r3, [pc, #276]	; (80183c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80182b0:	4944      	ldr	r1, [pc, #272]	; (80183c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80182b2:	4845      	ldr	r0, [pc, #276]	; (80183c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182b4:	f000 ff88 	bl	80191c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80182b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ba:	68ba      	ldr	r2, [r7, #8]
 80182bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80182be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c0:	88db      	ldrh	r3, [r3, #6]
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c6:	889b      	ldrh	r3, [r3, #4]
 80182c8:	b29b      	uxth	r3, r3
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d010      	beq.n	80182f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80182ce:	2300      	movs	r3, #0
 80182d0:	623b      	str	r3, [r7, #32]
 80182d2:	e00d      	b.n	80182f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	685b      	ldr	r3, [r3, #4]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d006      	beq.n	80182ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80182dc:	4b38      	ldr	r3, [pc, #224]	; (80183c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80182e2:	493a      	ldr	r1, [pc, #232]	; (80183cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80182e4:	4838      	ldr	r0, [pc, #224]	; (80183c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182e6:	f000 ff6f 	bl	80191c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	68ba      	ldr	r2, [r7, #8]
 80182ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d105      	bne.n	8018302 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	7f9b      	ldrb	r3, [r3, #30]
 80182fa:	f003 0301 	and.w	r3, r3, #1
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d059      	beq.n	80183b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018302:	6a3b      	ldr	r3, [r7, #32]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d04f      	beq.n	80183a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	685b      	ldr	r3, [r3, #4]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d006      	beq.n	801831e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	685b      	ldr	r3, [r3, #4]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	889b      	ldrh	r3, [r3, #4]
 8018318:	b29b      	uxth	r3, r3
 801831a:	2b00      	cmp	r3, #0
 801831c:	d002      	beq.n	8018324 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801831e:	2300      	movs	r3, #0
 8018320:	623b      	str	r3, [r7, #32]
 8018322:	e041      	b.n	80183a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018326:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801832e:	e012      	b.n	8018356 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018338:	88db      	ldrh	r3, [r3, #6]
 801833a:	b29a      	uxth	r2, r3
 801833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801833e:	889b      	ldrh	r3, [r3, #4]
 8018340:	b29b      	uxth	r3, r3
 8018342:	429a      	cmp	r2, r3
 8018344:	d002      	beq.n	801834c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018346:	2300      	movs	r3, #0
 8018348:	623b      	str	r3, [r7, #32]
            break;
 801834a:	e007      	b.n	801835c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801834e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018358:	2b00      	cmp	r3, #0
 801835a:	d1e9      	bne.n	8018330 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801835c:	6a3b      	ldr	r3, [r7, #32]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d022      	beq.n	80183a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d106      	bne.n	8018378 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801836a:	4b15      	ldr	r3, [pc, #84]	; (80183c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801836c:	f240 12df 	movw	r2, #479	; 0x1df
 8018370:	4917      	ldr	r1, [pc, #92]	; (80183d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018372:	4815      	ldr	r0, [pc, #84]	; (80183c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018374:	f000 ff28 	bl	80191c8 <iprintf>
          LWIP_ASSERT("sanity check",
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018380:	429a      	cmp	r2, r3
 8018382:	d106      	bne.n	8018392 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018384:	4b0e      	ldr	r3, [pc, #56]	; (80183c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018386:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801838a:	4911      	ldr	r1, [pc, #68]	; (80183d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801838c:	480e      	ldr	r0, [pc, #56]	; (80183c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801838e:	f000 ff1b 	bl	80191c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d006      	beq.n	80183a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801839a:	4b09      	ldr	r3, [pc, #36]	; (80183c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801839c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80183a0:	490c      	ldr	r1, [pc, #48]	; (80183d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80183a2:	4809      	ldr	r0, [pc, #36]	; (80183c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80183a4:	f000 ff10 	bl	80191c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80183a8:	6a3b      	ldr	r3, [r7, #32]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	bf14      	ite	ne
 80183ae:	2301      	movne	r3, #1
 80183b0:	2300      	moveq	r3, #0
 80183b2:	b2db      	uxtb	r3, r3
 80183b4:	e000      	b.n	80183b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80183b6:	2300      	movs	r3, #0
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	3730      	adds	r7, #48	; 0x30
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	0801cf6c 	.word	0x0801cf6c
 80183c4:	0801d050 	.word	0x0801d050
 80183c8:	0801cfb4 	.word	0x0801cfb4
 80183cc:	0801d070 	.word	0x0801d070
 80183d0:	0801d0a8 	.word	0x0801d0a8
 80183d4:	0801d0b8 	.word	0x0801d0b8

080183d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b08e      	sub	sp, #56	; 0x38
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	685b      	ldr	r3, [r3, #4]
 80183e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80183e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	f003 030f 	and.w	r3, r3, #15
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	009b      	lsls	r3, r3, #2
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	2b14      	cmp	r3, #20
 80183f6:	f040 8171 	bne.w	80186dc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80183fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fc:	88db      	ldrh	r3, [r3, #6]
 80183fe:	b29b      	uxth	r3, r3
 8018400:	4618      	mov	r0, r3
 8018402:	f7f6 f9fd 	bl	800e800 <lwip_htons>
 8018406:	4603      	mov	r3, r0
 8018408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801840c:	b29b      	uxth	r3, r3
 801840e:	00db      	lsls	r3, r3, #3
 8018410:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018414:	885b      	ldrh	r3, [r3, #2]
 8018416:	b29b      	uxth	r3, r3
 8018418:	4618      	mov	r0, r3
 801841a:	f7f6 f9f1 	bl	800e800 <lwip_htons>
 801841e:	4603      	mov	r3, r0
 8018420:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	f003 030f 	and.w	r3, r3, #15
 801842a:	b2db      	uxtb	r3, r3
 801842c:	009b      	lsls	r3, r3, #2
 801842e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018436:	b29b      	uxth	r3, r3
 8018438:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801843a:	429a      	cmp	r2, r3
 801843c:	f0c0 8150 	bcc.w	80186e0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018444:	b29b      	uxth	r3, r3
 8018446:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018448:	1ad3      	subs	r3, r2, r3
 801844a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f7f7 fe57 	bl	8010100 <pbuf_clen>
 8018452:	4603      	mov	r3, r0
 8018454:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018456:	4b8c      	ldr	r3, [pc, #560]	; (8018688 <ip4_reass+0x2b0>)
 8018458:	881b      	ldrh	r3, [r3, #0]
 801845a:	461a      	mov	r2, r3
 801845c:	8c3b      	ldrh	r3, [r7, #32]
 801845e:	4413      	add	r3, r2
 8018460:	2b0a      	cmp	r3, #10
 8018462:	dd10      	ble.n	8018486 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018464:	8c3b      	ldrh	r3, [r7, #32]
 8018466:	4619      	mov	r1, r3
 8018468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801846a:	f7ff fd81 	bl	8017f70 <ip_reass_remove_oldest_datagram>
 801846e:	4603      	mov	r3, r0
 8018470:	2b00      	cmp	r3, #0
 8018472:	f000 8137 	beq.w	80186e4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018476:	4b84      	ldr	r3, [pc, #528]	; (8018688 <ip4_reass+0x2b0>)
 8018478:	881b      	ldrh	r3, [r3, #0]
 801847a:	461a      	mov	r2, r3
 801847c:	8c3b      	ldrh	r3, [r7, #32]
 801847e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018480:	2b0a      	cmp	r3, #10
 8018482:	f300 812f 	bgt.w	80186e4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018486:	4b81      	ldr	r3, [pc, #516]	; (801868c <ip4_reass+0x2b4>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	633b      	str	r3, [r7, #48]	; 0x30
 801848c:	e015      	b.n	80184ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018490:	695a      	ldr	r2, [r3, #20]
 8018492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018494:	68db      	ldr	r3, [r3, #12]
 8018496:	429a      	cmp	r2, r3
 8018498:	d10c      	bne.n	80184b4 <ip4_reass+0xdc>
 801849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801849c:	699a      	ldr	r2, [r3, #24]
 801849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a0:	691b      	ldr	r3, [r3, #16]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	d106      	bne.n	80184b4 <ip4_reass+0xdc>
 80184a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a8:	899a      	ldrh	r2, [r3, #12]
 80184aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ac:	889b      	ldrh	r3, [r3, #4]
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	429a      	cmp	r2, r3
 80184b2:	d006      	beq.n	80184c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80184b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	633b      	str	r3, [r7, #48]	; 0x30
 80184ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d1e6      	bne.n	801848e <ip4_reass+0xb6>
 80184c0:	e000      	b.n	80184c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80184c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80184c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d109      	bne.n	80184de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80184ca:	8c3b      	ldrh	r3, [r7, #32]
 80184cc:	4619      	mov	r1, r3
 80184ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184d0:	f7ff fdb0 	bl	8018034 <ip_reass_enqueue_new_datagram>
 80184d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80184d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d11c      	bne.n	8018516 <ip4_reass+0x13e>
      goto nullreturn;
 80184dc:	e105      	b.n	80186ea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80184de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e0:	88db      	ldrh	r3, [r3, #6]
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	4618      	mov	r0, r3
 80184e6:	f7f6 f98b 	bl	800e800 <lwip_htons>
 80184ea:	4603      	mov	r3, r0
 80184ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d110      	bne.n	8018516 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80184f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f6:	89db      	ldrh	r3, [r3, #14]
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7f6 f981 	bl	800e800 <lwip_htons>
 80184fe:	4603      	mov	r3, r0
 8018500:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018504:	2b00      	cmp	r3, #0
 8018506:	d006      	beq.n	8018516 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801850a:	3308      	adds	r3, #8
 801850c:	2214      	movs	r2, #20
 801850e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018510:	4618      	mov	r0, r3
 8018512:	f000 fd94 	bl	801903e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018518:	88db      	ldrh	r3, [r3, #6]
 801851a:	b29b      	uxth	r3, r3
 801851c:	f003 0320 	and.w	r3, r3, #32
 8018520:	2b00      	cmp	r3, #0
 8018522:	bf0c      	ite	eq
 8018524:	2301      	moveq	r3, #1
 8018526:	2300      	movne	r3, #0
 8018528:	b2db      	uxtb	r3, r3
 801852a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d00e      	beq.n	8018550 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018536:	4413      	add	r3, r2
 8018538:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801853a:	8b7a      	ldrh	r2, [r7, #26]
 801853c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801853e:	429a      	cmp	r2, r3
 8018540:	f0c0 80a0 	bcc.w	8018684 <ip4_reass+0x2ac>
 8018544:	8b7b      	ldrh	r3, [r7, #26]
 8018546:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801854a:	4293      	cmp	r3, r2
 801854c:	f200 809a 	bhi.w	8018684 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018550:	69fa      	ldr	r2, [r7, #28]
 8018552:	6879      	ldr	r1, [r7, #4]
 8018554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018556:	f7ff fdd5 	bl	8018104 <ip_reass_chain_frag_into_datagram_and_validate>
 801855a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018562:	f000 809b 	beq.w	801869c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018566:	4b48      	ldr	r3, [pc, #288]	; (8018688 <ip4_reass+0x2b0>)
 8018568:	881a      	ldrh	r2, [r3, #0]
 801856a:	8c3b      	ldrh	r3, [r7, #32]
 801856c:	4413      	add	r3, r2
 801856e:	b29a      	uxth	r2, r3
 8018570:	4b45      	ldr	r3, [pc, #276]	; (8018688 <ip4_reass+0x2b0>)
 8018572:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d00d      	beq.n	8018596 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801857a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801857c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801857e:	4413      	add	r3, r2
 8018580:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018584:	8a7a      	ldrh	r2, [r7, #18]
 8018586:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858a:	7f9b      	ldrb	r3, [r3, #30]
 801858c:	f043 0301 	orr.w	r3, r3, #1
 8018590:	b2da      	uxtb	r2, r3
 8018592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018594:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	2b01      	cmp	r3, #1
 801859a:	d171      	bne.n	8018680 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801859e:	8b9b      	ldrh	r3, [r3, #28]
 80185a0:	3314      	adds	r3, #20
 80185a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80185a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	685b      	ldr	r3, [r3, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80185ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b0:	685b      	ldr	r3, [r3, #4]
 80185b2:	685b      	ldr	r3, [r3, #4]
 80185b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80185b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b8:	3308      	adds	r3, #8
 80185ba:	2214      	movs	r2, #20
 80185bc:	4619      	mov	r1, r3
 80185be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185c0:	f000 fd3d 	bl	801903e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80185c4:	8a3b      	ldrh	r3, [r7, #16]
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7f6 f91a 	bl	800e800 <lwip_htons>
 80185cc:	4603      	mov	r3, r0
 80185ce:	461a      	mov	r2, r3
 80185d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80185d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d6:	2200      	movs	r2, #0
 80185d8:	719a      	strb	r2, [r3, #6]
 80185da:	2200      	movs	r2, #0
 80185dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80185de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e0:	2200      	movs	r2, #0
 80185e2:	729a      	strb	r2, [r3, #10]
 80185e4:	2200      	movs	r2, #0
 80185e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80185e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ea:	685b      	ldr	r3, [r3, #4]
 80185ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80185ee:	e00d      	b.n	801860c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80185f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f2:	685b      	ldr	r3, [r3, #4]
 80185f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80185f6:	2114      	movs	r1, #20
 80185f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80185fa:	f7f7 fc6d 	bl	800fed8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80185fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f7f7 fdbd 	bl	8010180 <pbuf_cat>
      r = iprh->next_pbuf;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801860c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801860e:	2b00      	cmp	r3, #0
 8018610:	d1ee      	bne.n	80185f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018612:	4b1e      	ldr	r3, [pc, #120]	; (801868c <ip4_reass+0x2b4>)
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018618:	429a      	cmp	r2, r3
 801861a:	d102      	bne.n	8018622 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801861c:	2300      	movs	r3, #0
 801861e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018620:	e010      	b.n	8018644 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018622:	4b1a      	ldr	r3, [pc, #104]	; (801868c <ip4_reass+0x2b4>)
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018628:	e007      	b.n	801863a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018630:	429a      	cmp	r2, r3
 8018632:	d006      	beq.n	8018642 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	62fb      	str	r3, [r7, #44]	; 0x2c
 801863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801863c:	2b00      	cmp	r3, #0
 801863e:	d1f4      	bne.n	801862a <ip4_reass+0x252>
 8018640:	e000      	b.n	8018644 <ip4_reass+0x26c>
          break;
 8018642:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018648:	f7ff fd2e 	bl	80180a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7f7 fd57 	bl	8010100 <pbuf_clen>
 8018652:	4603      	mov	r3, r0
 8018654:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018656:	4b0c      	ldr	r3, [pc, #48]	; (8018688 <ip4_reass+0x2b0>)
 8018658:	881b      	ldrh	r3, [r3, #0]
 801865a:	8c3a      	ldrh	r2, [r7, #32]
 801865c:	429a      	cmp	r2, r3
 801865e:	d906      	bls.n	801866e <ip4_reass+0x296>
 8018660:	4b0b      	ldr	r3, [pc, #44]	; (8018690 <ip4_reass+0x2b8>)
 8018662:	f240 229b 	movw	r2, #667	; 0x29b
 8018666:	490b      	ldr	r1, [pc, #44]	; (8018694 <ip4_reass+0x2bc>)
 8018668:	480b      	ldr	r0, [pc, #44]	; (8018698 <ip4_reass+0x2c0>)
 801866a:	f000 fdad 	bl	80191c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801866e:	4b06      	ldr	r3, [pc, #24]	; (8018688 <ip4_reass+0x2b0>)
 8018670:	881a      	ldrh	r2, [r3, #0]
 8018672:	8c3b      	ldrh	r3, [r7, #32]
 8018674:	1ad3      	subs	r3, r2, r3
 8018676:	b29a      	uxth	r2, r3
 8018678:	4b03      	ldr	r3, [pc, #12]	; (8018688 <ip4_reass+0x2b0>)
 801867a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	e038      	b.n	80186f2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018680:	2300      	movs	r3, #0
 8018682:	e036      	b.n	80186f2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018684:	bf00      	nop
 8018686:	e00a      	b.n	801869e <ip4_reass+0x2c6>
 8018688:	2000dbf0 	.word	0x2000dbf0
 801868c:	2000dbec 	.word	0x2000dbec
 8018690:	0801cf6c 	.word	0x0801cf6c
 8018694:	0801d0dc 	.word	0x0801d0dc
 8018698:	0801cfb4 	.word	0x0801cfb4
    goto nullreturn_ipr;
 801869c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d106      	bne.n	80186b2 <ip4_reass+0x2da>
 80186a4:	4b15      	ldr	r3, [pc, #84]	; (80186fc <ip4_reass+0x324>)
 80186a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80186aa:	4915      	ldr	r1, [pc, #84]	; (8018700 <ip4_reass+0x328>)
 80186ac:	4815      	ldr	r0, [pc, #84]	; (8018704 <ip4_reass+0x32c>)
 80186ae:	f000 fd8b 	bl	80191c8 <iprintf>
  if (ipr->p == NULL) {
 80186b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d116      	bne.n	80186e8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80186ba:	4b13      	ldr	r3, [pc, #76]	; (8018708 <ip4_reass+0x330>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d006      	beq.n	80186d2 <ip4_reass+0x2fa>
 80186c4:	4b0d      	ldr	r3, [pc, #52]	; (80186fc <ip4_reass+0x324>)
 80186c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80186ca:	4910      	ldr	r1, [pc, #64]	; (801870c <ip4_reass+0x334>)
 80186cc:	480d      	ldr	r0, [pc, #52]	; (8018704 <ip4_reass+0x32c>)
 80186ce:	f000 fd7b 	bl	80191c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80186d2:	2100      	movs	r1, #0
 80186d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80186d6:	f7ff fce7 	bl	80180a8 <ip_reass_dequeue_datagram>
 80186da:	e006      	b.n	80186ea <ip4_reass+0x312>
    goto nullreturn;
 80186dc:	bf00      	nop
 80186de:	e004      	b.n	80186ea <ip4_reass+0x312>
    goto nullreturn;
 80186e0:	bf00      	nop
 80186e2:	e002      	b.n	80186ea <ip4_reass+0x312>
      goto nullreturn;
 80186e4:	bf00      	nop
 80186e6:	e000      	b.n	80186ea <ip4_reass+0x312>
  }

nullreturn:
 80186e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f7f7 fc7a 	bl	800ffe4 <pbuf_free>
  return NULL;
 80186f0:	2300      	movs	r3, #0
}
 80186f2:	4618      	mov	r0, r3
 80186f4:	3738      	adds	r7, #56	; 0x38
 80186f6:	46bd      	mov	sp, r7
 80186f8:	bd80      	pop	{r7, pc}
 80186fa:	bf00      	nop
 80186fc:	0801cf6c 	.word	0x0801cf6c
 8018700:	0801d0f8 	.word	0x0801d0f8
 8018704:	0801cfb4 	.word	0x0801cfb4
 8018708:	2000dbec 	.word	0x2000dbec
 801870c:	0801d104 	.word	0x0801d104

08018710 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018714:	2005      	movs	r0, #5
 8018716:	f7f6 fd4b 	bl	800f1b0 <memp_malloc>
 801871a:	4603      	mov	r3, r0
}
 801871c:	4618      	mov	r0, r3
 801871e:	bd80      	pop	{r7, pc}

08018720 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d106      	bne.n	801873c <ip_frag_free_pbuf_custom_ref+0x1c>
 801872e:	4b07      	ldr	r3, [pc, #28]	; (801874c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018730:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018734:	4906      	ldr	r1, [pc, #24]	; (8018750 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018736:	4807      	ldr	r0, [pc, #28]	; (8018754 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018738:	f000 fd46 	bl	80191c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801873c:	6879      	ldr	r1, [r7, #4]
 801873e:	2005      	movs	r0, #5
 8018740:	f7f6 fdac 	bl	800f29c <memp_free>
}
 8018744:	bf00      	nop
 8018746:	3708      	adds	r7, #8
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}
 801874c:	0801cf6c 	.word	0x0801cf6c
 8018750:	0801d124 	.word	0x0801d124
 8018754:	0801cfb4 	.word	0x0801cfb4

08018758 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d106      	bne.n	8018778 <ipfrag_free_pbuf_custom+0x20>
 801876a:	4b11      	ldr	r3, [pc, #68]	; (80187b0 <ipfrag_free_pbuf_custom+0x58>)
 801876c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018770:	4910      	ldr	r1, [pc, #64]	; (80187b4 <ipfrag_free_pbuf_custom+0x5c>)
 8018772:	4811      	ldr	r0, [pc, #68]	; (80187b8 <ipfrag_free_pbuf_custom+0x60>)
 8018774:	f000 fd28 	bl	80191c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018778:	68fa      	ldr	r2, [r7, #12]
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	429a      	cmp	r2, r3
 801877e:	d006      	beq.n	801878e <ipfrag_free_pbuf_custom+0x36>
 8018780:	4b0b      	ldr	r3, [pc, #44]	; (80187b0 <ipfrag_free_pbuf_custom+0x58>)
 8018782:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018786:	490d      	ldr	r1, [pc, #52]	; (80187bc <ipfrag_free_pbuf_custom+0x64>)
 8018788:	480b      	ldr	r0, [pc, #44]	; (80187b8 <ipfrag_free_pbuf_custom+0x60>)
 801878a:	f000 fd1d 	bl	80191c8 <iprintf>
  if (pcr->original != NULL) {
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	695b      	ldr	r3, [r3, #20]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d004      	beq.n	80187a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	695b      	ldr	r3, [r3, #20]
 801879a:	4618      	mov	r0, r3
 801879c:	f7f7 fc22 	bl	800ffe4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80187a0:	68f8      	ldr	r0, [r7, #12]
 80187a2:	f7ff ffbd 	bl	8018720 <ip_frag_free_pbuf_custom_ref>
}
 80187a6:	bf00      	nop
 80187a8:	3710      	adds	r7, #16
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	0801cf6c 	.word	0x0801cf6c
 80187b4:	0801d130 	.word	0x0801d130
 80187b8:	0801cfb4 	.word	0x0801cfb4
 80187bc:	0801d13c 	.word	0x0801d13c

080187c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b094      	sub	sp, #80	; 0x50
 80187c4:	af02      	add	r7, sp, #8
 80187c6:	60f8      	str	r0, [r7, #12]
 80187c8:	60b9      	str	r1, [r7, #8]
 80187ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80187cc:	2300      	movs	r3, #0
 80187ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80187d6:	3b14      	subs	r3, #20
 80187d8:	2b00      	cmp	r3, #0
 80187da:	da00      	bge.n	80187de <ip4_frag+0x1e>
 80187dc:	3307      	adds	r3, #7
 80187de:	10db      	asrs	r3, r3, #3
 80187e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80187e2:	2314      	movs	r3, #20
 80187e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	685b      	ldr	r3, [r3, #4]
 80187ea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80187ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80187f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f2:	781b      	ldrb	r3, [r3, #0]
 80187f4:	f003 030f 	and.w	r3, r3, #15
 80187f8:	b2db      	uxtb	r3, r3
 80187fa:	009b      	lsls	r3, r3, #2
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	2b14      	cmp	r3, #20
 8018800:	d002      	beq.n	8018808 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018802:	f06f 0305 	mvn.w	r3, #5
 8018806:	e110      	b.n	8018a2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	895b      	ldrh	r3, [r3, #10]
 801880c:	2b13      	cmp	r3, #19
 801880e:	d809      	bhi.n	8018824 <ip4_frag+0x64>
 8018810:	4b88      	ldr	r3, [pc, #544]	; (8018a34 <ip4_frag+0x274>)
 8018812:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018816:	4988      	ldr	r1, [pc, #544]	; (8018a38 <ip4_frag+0x278>)
 8018818:	4888      	ldr	r0, [pc, #544]	; (8018a3c <ip4_frag+0x27c>)
 801881a:	f000 fcd5 	bl	80191c8 <iprintf>
 801881e:	f06f 0305 	mvn.w	r3, #5
 8018822:	e102      	b.n	8018a2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018826:	88db      	ldrh	r3, [r3, #6]
 8018828:	b29b      	uxth	r3, r3
 801882a:	4618      	mov	r0, r3
 801882c:	f7f5 ffe8 	bl	800e800 <lwip_htons>
 8018830:	4603      	mov	r3, r0
 8018832:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018834:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801883a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801883e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018844:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	891b      	ldrh	r3, [r3, #8]
 801884a:	3b14      	subs	r3, #20
 801884c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018850:	e0e1      	b.n	8018a16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018852:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018854:	00db      	lsls	r3, r3, #3
 8018856:	b29b      	uxth	r3, r3
 8018858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801885c:	4293      	cmp	r3, r2
 801885e:	bf28      	it	cs
 8018860:	4613      	movcs	r3, r2
 8018862:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018864:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018868:	2114      	movs	r1, #20
 801886a:	200e      	movs	r0, #14
 801886c:	f7f7 f8d6 	bl	800fa1c <pbuf_alloc>
 8018870:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018874:	2b00      	cmp	r3, #0
 8018876:	f000 80d5 	beq.w	8018a24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887c:	895b      	ldrh	r3, [r3, #10]
 801887e:	2b13      	cmp	r3, #19
 8018880:	d806      	bhi.n	8018890 <ip4_frag+0xd0>
 8018882:	4b6c      	ldr	r3, [pc, #432]	; (8018a34 <ip4_frag+0x274>)
 8018884:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018888:	496d      	ldr	r1, [pc, #436]	; (8018a40 <ip4_frag+0x280>)
 801888a:	486c      	ldr	r0, [pc, #432]	; (8018a3c <ip4_frag+0x27c>)
 801888c:	f000 fc9c 	bl	80191c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018892:	685b      	ldr	r3, [r3, #4]
 8018894:	2214      	movs	r2, #20
 8018896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018898:	4618      	mov	r0, r3
 801889a:	f000 fbd0 	bl	801903e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80188a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80188a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80188aa:	e064      	b.n	8018976 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	895a      	ldrh	r2, [r3, #10]
 80188b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80188b2:	1ad3      	subs	r3, r2, r3
 80188b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	895b      	ldrh	r3, [r3, #10]
 80188ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80188bc:	429a      	cmp	r2, r3
 80188be:	d906      	bls.n	80188ce <ip4_frag+0x10e>
 80188c0:	4b5c      	ldr	r3, [pc, #368]	; (8018a34 <ip4_frag+0x274>)
 80188c2:	f240 322d 	movw	r2, #813	; 0x32d
 80188c6:	495f      	ldr	r1, [pc, #380]	; (8018a44 <ip4_frag+0x284>)
 80188c8:	485c      	ldr	r0, [pc, #368]	; (8018a3c <ip4_frag+0x27c>)
 80188ca:	f000 fc7d 	bl	80191c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80188ce:	8bfa      	ldrh	r2, [r7, #30]
 80188d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80188d4:	4293      	cmp	r3, r2
 80188d6:	bf28      	it	cs
 80188d8:	4613      	movcs	r3, r2
 80188da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80188de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d105      	bne.n	80188f2 <ip4_frag+0x132>
        poff = 0;
 80188e6:	2300      	movs	r3, #0
 80188e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	60fb      	str	r3, [r7, #12]
        continue;
 80188f0:	e041      	b.n	8018976 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80188f2:	f7ff ff0d 	bl	8018710 <ip_frag_alloc_pbuf_custom_ref>
 80188f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80188f8:	69bb      	ldr	r3, [r7, #24]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d103      	bne.n	8018906 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80188fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018900:	f7f7 fb70 	bl	800ffe4 <pbuf_free>
        goto memerr;
 8018904:	e08f      	b.n	8018a26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018906:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801890c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801890e:	4413      	add	r3, r2
 8018910:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018914:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018918:	9201      	str	r2, [sp, #4]
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	4603      	mov	r3, r0
 801891e:	2241      	movs	r2, #65	; 0x41
 8018920:	2000      	movs	r0, #0
 8018922:	f7f7 f9a5 	bl	800fc70 <pbuf_alloced_custom>
 8018926:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018928:	697b      	ldr	r3, [r7, #20]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d106      	bne.n	801893c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801892e:	69b8      	ldr	r0, [r7, #24]
 8018930:	f7ff fef6 	bl	8018720 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018936:	f7f7 fb55 	bl	800ffe4 <pbuf_free>
        goto memerr;
 801893a:	e074      	b.n	8018a26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801893c:	68f8      	ldr	r0, [r7, #12]
 801893e:	f7f7 fbf7 	bl	8010130 <pbuf_ref>
      pcr->original = p;
 8018942:	69bb      	ldr	r3, [r7, #24]
 8018944:	68fa      	ldr	r2, [r7, #12]
 8018946:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018948:	69bb      	ldr	r3, [r7, #24]
 801894a:	4a3f      	ldr	r2, [pc, #252]	; (8018a48 <ip4_frag+0x288>)
 801894c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801894e:	6979      	ldr	r1, [r7, #20]
 8018950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018952:	f7f7 fc15 	bl	8010180 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018956:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801895a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801895e:	1ad3      	subs	r3, r2, r3
 8018960:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018968:	2b00      	cmp	r3, #0
 801896a:	d004      	beq.n	8018976 <ip4_frag+0x1b6>
        poff = 0;
 801896c:	2300      	movs	r3, #0
 801896e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018976:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801897a:	2b00      	cmp	r3, #0
 801897c:	d196      	bne.n	80188ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801897e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018980:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018984:	4413      	add	r3, r2
 8018986:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801898c:	f1a3 0213 	sub.w	r2, r3, #19
 8018990:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018994:	429a      	cmp	r2, r3
 8018996:	bfcc      	ite	gt
 8018998:	2301      	movgt	r3, #1
 801899a:	2300      	movle	r3, #0
 801899c:	b2db      	uxtb	r3, r3
 801899e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80189a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80189a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80189aa:	6a3b      	ldr	r3, [r7, #32]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d002      	beq.n	80189b6 <ip4_frag+0x1f6>
 80189b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d003      	beq.n	80189be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80189b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80189b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80189bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80189be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80189c0:	4618      	mov	r0, r3
 80189c2:	f7f5 ff1d 	bl	800e800 <lwip_htons>
 80189c6:	4603      	mov	r3, r0
 80189c8:	461a      	mov	r2, r3
 80189ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80189ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80189d0:	3314      	adds	r3, #20
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7f5 ff13 	bl	800e800 <lwip_htons>
 80189da:	4603      	mov	r3, r0
 80189dc:	461a      	mov	r2, r3
 80189de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80189e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e4:	2200      	movs	r2, #0
 80189e6:	729a      	strb	r2, [r3, #10]
 80189e8:	2200      	movs	r2, #0
 80189ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	695b      	ldr	r3, [r3, #20]
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80189f4:	68b8      	ldr	r0, [r7, #8]
 80189f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80189f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189fa:	f7f7 faf3 	bl	800ffe4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80189fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a04:	1ad3      	subs	r3, r2, r3
 8018a06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018a0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a10:	4413      	add	r3, r2
 8018a12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018a16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	f47f af19 	bne.w	8018852 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018a20:	2300      	movs	r3, #0
 8018a22:	e002      	b.n	8018a2a <ip4_frag+0x26a>
      goto memerr;
 8018a24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	3748      	adds	r7, #72	; 0x48
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
 8018a32:	bf00      	nop
 8018a34:	0801cf6c 	.word	0x0801cf6c
 8018a38:	0801d148 	.word	0x0801d148
 8018a3c:	0801cfb4 	.word	0x0801cfb4
 8018a40:	0801d164 	.word	0x0801d164
 8018a44:	0801d184 	.word	0x0801d184
 8018a48:	08018759 	.word	0x08018759

08018a4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b086      	sub	sp, #24
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
 8018a54:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018a56:	230e      	movs	r3, #14
 8018a58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	895b      	ldrh	r3, [r3, #10]
 8018a5e:	2b0e      	cmp	r3, #14
 8018a60:	d96e      	bls.n	8018b40 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	7bdb      	ldrb	r3, [r3, #15]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d106      	bne.n	8018a78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018a70:	3301      	adds	r3, #1
 8018a72:	b2da      	uxtb	r2, r3
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	685b      	ldr	r3, [r3, #4]
 8018a7c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018a7e:	693b      	ldr	r3, [r7, #16]
 8018a80:	7b1a      	ldrb	r2, [r3, #12]
 8018a82:	7b5b      	ldrb	r3, [r3, #13]
 8018a84:	021b      	lsls	r3, r3, #8
 8018a86:	4313      	orrs	r3, r2
 8018a88:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	f003 0301 	and.w	r3, r3, #1
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d023      	beq.n	8018ade <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018a96:	693b      	ldr	r3, [r7, #16]
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	2b01      	cmp	r3, #1
 8018a9c:	d10f      	bne.n	8018abe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018a9e:	693b      	ldr	r3, [r7, #16]
 8018aa0:	785b      	ldrb	r3, [r3, #1]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d11b      	bne.n	8018ade <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018aa6:	693b      	ldr	r3, [r7, #16]
 8018aa8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018aaa:	2b5e      	cmp	r3, #94	; 0x5e
 8018aac:	d117      	bne.n	8018ade <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	7b5b      	ldrb	r3, [r3, #13]
 8018ab2:	f043 0310 	orr.w	r3, r3, #16
 8018ab6:	b2da      	uxtb	r2, r3
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	735a      	strb	r2, [r3, #13]
 8018abc:	e00f      	b.n	8018ade <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	2206      	movs	r2, #6
 8018ac2:	4928      	ldr	r1, [pc, #160]	; (8018b64 <ethernet_input+0x118>)
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f000 faaa 	bl	801901e <memcmp>
 8018aca:	4603      	mov	r3, r0
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d106      	bne.n	8018ade <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	7b5b      	ldrb	r3, [r3, #13]
 8018ad4:	f043 0308 	orr.w	r3, r3, #8
 8018ad8:	b2da      	uxtb	r2, r3
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018ade:	89fb      	ldrh	r3, [r7, #14]
 8018ae0:	2b08      	cmp	r3, #8
 8018ae2:	d003      	beq.n	8018aec <ethernet_input+0xa0>
 8018ae4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018ae8:	d014      	beq.n	8018b14 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018aea:	e032      	b.n	8018b52 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018af2:	f003 0308 	and.w	r3, r3, #8
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d024      	beq.n	8018b44 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018afa:	8afb      	ldrh	r3, [r7, #22]
 8018afc:	4619      	mov	r1, r3
 8018afe:	6878      	ldr	r0, [r7, #4]
 8018b00:	f7f7 f9ea 	bl	800fed8 <pbuf_remove_header>
 8018b04:	4603      	mov	r3, r0
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d11e      	bne.n	8018b48 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018b0a:	6839      	ldr	r1, [r7, #0]
 8018b0c:	6878      	ldr	r0, [r7, #4]
 8018b0e:	f7fe ff21 	bl	8017954 <ip4_input>
      break;
 8018b12:	e013      	b.n	8018b3c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018b14:	683b      	ldr	r3, [r7, #0]
 8018b16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018b1a:	f003 0308 	and.w	r3, r3, #8
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d014      	beq.n	8018b4c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018b22:	8afb      	ldrh	r3, [r7, #22]
 8018b24:	4619      	mov	r1, r3
 8018b26:	6878      	ldr	r0, [r7, #4]
 8018b28:	f7f7 f9d6 	bl	800fed8 <pbuf_remove_header>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d10e      	bne.n	8018b50 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018b32:	6839      	ldr	r1, [r7, #0]
 8018b34:	6878      	ldr	r0, [r7, #4]
 8018b36:	f7fe f8c1 	bl	8016cbc <etharp_input>
      break;
 8018b3a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	e00c      	b.n	8018b5a <ethernet_input+0x10e>
    goto free_and_return;
 8018b40:	bf00      	nop
 8018b42:	e006      	b.n	8018b52 <ethernet_input+0x106>
        goto free_and_return;
 8018b44:	bf00      	nop
 8018b46:	e004      	b.n	8018b52 <ethernet_input+0x106>
        goto free_and_return;
 8018b48:	bf00      	nop
 8018b4a:	e002      	b.n	8018b52 <ethernet_input+0x106>
        goto free_and_return;
 8018b4c:	bf00      	nop
 8018b4e:	e000      	b.n	8018b52 <ethernet_input+0x106>
        goto free_and_return;
 8018b50:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f7f7 fa46 	bl	800ffe4 <pbuf_free>
  return ERR_OK;
 8018b58:	2300      	movs	r3, #0
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	3718      	adds	r7, #24
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	bf00      	nop
 8018b64:	0801d400 	.word	0x0801d400

08018b68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b086      	sub	sp, #24
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	60f8      	str	r0, [r7, #12]
 8018b70:	60b9      	str	r1, [r7, #8]
 8018b72:	607a      	str	r2, [r7, #4]
 8018b74:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018b76:	8c3b      	ldrh	r3, [r7, #32]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7f5 fe41 	bl	800e800 <lwip_htons>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018b82:	210e      	movs	r1, #14
 8018b84:	68b8      	ldr	r0, [r7, #8]
 8018b86:	f7f7 f997 	bl	800feb8 <pbuf_add_header>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d125      	bne.n	8018bdc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	685b      	ldr	r3, [r3, #4]
 8018b94:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018b96:	693b      	ldr	r3, [r7, #16]
 8018b98:	8afa      	ldrh	r2, [r7, #22]
 8018b9a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018b9c:	693b      	ldr	r3, [r7, #16]
 8018b9e:	2206      	movs	r2, #6
 8018ba0:	6839      	ldr	r1, [r7, #0]
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f000 fa4b 	bl	801903e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	3306      	adds	r3, #6
 8018bac:	2206      	movs	r2, #6
 8018bae:	6879      	ldr	r1, [r7, #4]
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f000 fa44 	bl	801903e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018bbc:	2b06      	cmp	r3, #6
 8018bbe:	d006      	beq.n	8018bce <ethernet_output+0x66>
 8018bc0:	4b0a      	ldr	r3, [pc, #40]	; (8018bec <ethernet_output+0x84>)
 8018bc2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018bc6:	490a      	ldr	r1, [pc, #40]	; (8018bf0 <ethernet_output+0x88>)
 8018bc8:	480a      	ldr	r0, [pc, #40]	; (8018bf4 <ethernet_output+0x8c>)
 8018bca:	f000 fafd 	bl	80191c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	699b      	ldr	r3, [r3, #24]
 8018bd2:	68b9      	ldr	r1, [r7, #8]
 8018bd4:	68f8      	ldr	r0, [r7, #12]
 8018bd6:	4798      	blx	r3
 8018bd8:	4603      	mov	r3, r0
 8018bda:	e002      	b.n	8018be2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018bdc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018bde:	f06f 0301 	mvn.w	r3, #1
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3718      	adds	r7, #24
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	0801d194 	.word	0x0801d194
 8018bf0:	0801d1cc 	.word	0x0801d1cc
 8018bf4:	0801d200 	.word	0x0801d200

08018bf8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	2200      	movs	r2, #0
 8018c06:	2104      	movs	r1, #4
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7f2 f9ad 	bl	800af68 <osMessageQueueNew>
 8018c0e:	4602      	mov	r2, r0
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d102      	bne.n	8018c22 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c20:	e000      	b.n	8018c24 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018c22:	2300      	movs	r3, #0
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6818      	ldr	r0, [r3, #0]
 8018c3a:	4639      	mov	r1, r7
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	2200      	movs	r2, #0
 8018c40:	f7f2 fa06 	bl	800b050 <osMessageQueuePut>
 8018c44:	4603      	mov	r3, r0
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d102      	bne.n	8018c50 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	73fb      	strb	r3, [r7, #15]
 8018c4e:	e001      	b.n	8018c54 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018c50:	23ff      	movs	r3, #255	; 0xff
 8018c52:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3710      	adds	r7, #16
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b086      	sub	sp, #24
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	60b9      	str	r1, [r7, #8]
 8018c6a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018c6c:	f7f1 fe8c 	bl	800a988 <osKernelGetTickCount>
 8018c70:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d013      	beq.n	8018ca0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	6818      	ldr	r0, [r3, #0]
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2200      	movs	r2, #0
 8018c80:	68b9      	ldr	r1, [r7, #8]
 8018c82:	f7f2 fa45 	bl	800b110 <osMessageQueueGet>
 8018c86:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d105      	bne.n	8018c9a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018c8e:	f7f1 fe7b 	bl	800a988 <osKernelGetTickCount>
 8018c92:	4602      	mov	r2, r0
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	1ad3      	subs	r3, r2, r3
 8018c98:	e00f      	b.n	8018cba <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c9e:	e00c      	b.n	8018cba <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	6818      	ldr	r0, [r3, #0]
 8018ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ca8:	2200      	movs	r2, #0
 8018caa:	68b9      	ldr	r1, [r7, #8]
 8018cac:	f7f2 fa30 	bl	800b110 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018cb0:	f7f1 fe6a 	bl	800a988 <osKernelGetTickCount>
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	3718      	adds	r7, #24
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}

08018cc2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018cc2:	b480      	push	{r7}
 8018cc4:	b083      	sub	sp, #12
 8018cc6:	af00      	add	r7, sp, #0
 8018cc8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d101      	bne.n	8018cd6 <sys_mbox_valid+0x14>
    return 0;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	e000      	b.n	8018cd8 <sys_mbox_valid+0x16>
  else
    return 1;
 8018cd6:	2301      	movs	r3, #1
}
 8018cd8:	4618      	mov	r0, r3
 8018cda:	370c      	adds	r7, #12
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce2:	4770      	bx	lr

08018ce4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018ce8:	2000      	movs	r0, #0
 8018cea:	f7f1 ff0f 	bl	800ab0c <osMutexNew>
 8018cee:	4603      	mov	r3, r0
 8018cf0:	4a01      	ldr	r2, [pc, #4]	; (8018cf8 <sys_init+0x14>)
 8018cf2:	6013      	str	r3, [r2, #0]
#endif
}
 8018cf4:	bf00      	nop
 8018cf6:	bd80      	pop	{r7, pc}
 8018cf8:	2000dbf4 	.word	0x2000dbf4

08018cfc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b082      	sub	sp, #8
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018d04:	2000      	movs	r0, #0
 8018d06:	f7f1 ff01 	bl	800ab0c <osMutexNew>
 8018d0a:	4602      	mov	r2, r0
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d102      	bne.n	8018d1e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018d18:	f04f 33ff 	mov.w	r3, #4294967295
 8018d1c:	e000      	b.n	8018d20 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018d1e:	2300      	movs	r3, #0
}
 8018d20:	4618      	mov	r0, r3
 8018d22:	3708      	adds	r7, #8
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}

08018d28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f04f 31ff 	mov.w	r1, #4294967295
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7f1 ff6d 	bl	800ac18 <osMutexAcquire>
#endif
}
 8018d3e:	bf00      	nop
 8018d40:	3708      	adds	r7, #8
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}

08018d46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018d46:	b580      	push	{r7, lr}
 8018d48:	b082      	sub	sp, #8
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	4618      	mov	r0, r3
 8018d54:	f7f1 ffab 	bl	800acae <osMutexRelease>
}
 8018d58:	bf00      	nop
 8018d5a:	3708      	adds	r7, #8
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b08e      	sub	sp, #56	; 0x38
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	607a      	str	r2, [r7, #4]
 8018d6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018d6e:	f107 0314 	add.w	r3, r7, #20
 8018d72:	2224      	movs	r2, #36	; 0x24
 8018d74:	2100      	movs	r1, #0
 8018d76:	4618      	mov	r0, r3
 8018d78:	f000 f989 	bl	801908e <memset>
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	617b      	str	r3, [r7, #20]
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d86:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018d88:	f107 0314 	add.w	r3, r7, #20
 8018d8c:	461a      	mov	r2, r3
 8018d8e:	6879      	ldr	r1, [r7, #4]
 8018d90:	68b8      	ldr	r0, [r7, #8]
 8018d92:	f7f1 fe0e 	bl	800a9b2 <osThreadNew>
 8018d96:	4603      	mov	r3, r0
#endif
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3738      	adds	r7, #56	; 0x38
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}

08018da0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018da4:	4b04      	ldr	r3, [pc, #16]	; (8018db8 <sys_arch_protect+0x18>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	f04f 31ff 	mov.w	r1, #4294967295
 8018dac:	4618      	mov	r0, r3
 8018dae:	f7f1 ff33 	bl	800ac18 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018db2:	2301      	movs	r3, #1
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	2000dbf4 	.word	0x2000dbf4

08018dbc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b082      	sub	sp, #8
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018dc4:	4b04      	ldr	r3, [pc, #16]	; (8018dd8 <sys_arch_unprotect+0x1c>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7f1 ff70 	bl	800acae <osMutexRelease>
}
 8018dce:	bf00      	nop
 8018dd0:	3708      	adds	r7, #8
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}
 8018dd6:	bf00      	nop
 8018dd8:	2000dbf4 	.word	0x2000dbf4

08018ddc <atoi>:
 8018ddc:	220a      	movs	r2, #10
 8018dde:	2100      	movs	r1, #0
 8018de0:	f000 bc44 	b.w	801966c <strtol>

08018de4 <std>:
 8018de4:	2300      	movs	r3, #0
 8018de6:	b510      	push	{r4, lr}
 8018de8:	4604      	mov	r4, r0
 8018dea:	e9c0 3300 	strd	r3, r3, [r0]
 8018dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018df2:	6083      	str	r3, [r0, #8]
 8018df4:	8181      	strh	r1, [r0, #12]
 8018df6:	6643      	str	r3, [r0, #100]	; 0x64
 8018df8:	81c2      	strh	r2, [r0, #14]
 8018dfa:	6183      	str	r3, [r0, #24]
 8018dfc:	4619      	mov	r1, r3
 8018dfe:	2208      	movs	r2, #8
 8018e00:	305c      	adds	r0, #92	; 0x5c
 8018e02:	f000 f944 	bl	801908e <memset>
 8018e06:	4b05      	ldr	r3, [pc, #20]	; (8018e1c <std+0x38>)
 8018e08:	6263      	str	r3, [r4, #36]	; 0x24
 8018e0a:	4b05      	ldr	r3, [pc, #20]	; (8018e20 <std+0x3c>)
 8018e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e0e:	4b05      	ldr	r3, [pc, #20]	; (8018e24 <std+0x40>)
 8018e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e12:	4b05      	ldr	r3, [pc, #20]	; (8018e28 <std+0x44>)
 8018e14:	6224      	str	r4, [r4, #32]
 8018e16:	6323      	str	r3, [r4, #48]	; 0x30
 8018e18:	bd10      	pop	{r4, pc}
 8018e1a:	bf00      	nop
 8018e1c:	08019495 	.word	0x08019495
 8018e20:	080194b7 	.word	0x080194b7
 8018e24:	080194ef 	.word	0x080194ef
 8018e28:	08019513 	.word	0x08019513

08018e2c <_cleanup_r>:
 8018e2c:	4901      	ldr	r1, [pc, #4]	; (8018e34 <_cleanup_r+0x8>)
 8018e2e:	f000 b8af 	b.w	8018f90 <_fwalk_reent>
 8018e32:	bf00      	nop
 8018e34:	08019999 	.word	0x08019999

08018e38 <__sfmoreglue>:
 8018e38:	b570      	push	{r4, r5, r6, lr}
 8018e3a:	2268      	movs	r2, #104	; 0x68
 8018e3c:	1e4d      	subs	r5, r1, #1
 8018e3e:	4355      	muls	r5, r2
 8018e40:	460e      	mov	r6, r1
 8018e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018e46:	f000 f94b 	bl	80190e0 <_malloc_r>
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	b140      	cbz	r0, 8018e60 <__sfmoreglue+0x28>
 8018e4e:	2100      	movs	r1, #0
 8018e50:	e9c0 1600 	strd	r1, r6, [r0]
 8018e54:	300c      	adds	r0, #12
 8018e56:	60a0      	str	r0, [r4, #8]
 8018e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018e5c:	f000 f917 	bl	801908e <memset>
 8018e60:	4620      	mov	r0, r4
 8018e62:	bd70      	pop	{r4, r5, r6, pc}

08018e64 <__sfp_lock_acquire>:
 8018e64:	4801      	ldr	r0, [pc, #4]	; (8018e6c <__sfp_lock_acquire+0x8>)
 8018e66:	f000 b8d8 	b.w	801901a <__retarget_lock_acquire_recursive>
 8018e6a:	bf00      	nop
 8018e6c:	2000dbf9 	.word	0x2000dbf9

08018e70 <__sfp_lock_release>:
 8018e70:	4801      	ldr	r0, [pc, #4]	; (8018e78 <__sfp_lock_release+0x8>)
 8018e72:	f000 b8d3 	b.w	801901c <__retarget_lock_release_recursive>
 8018e76:	bf00      	nop
 8018e78:	2000dbf9 	.word	0x2000dbf9

08018e7c <__sinit_lock_acquire>:
 8018e7c:	4801      	ldr	r0, [pc, #4]	; (8018e84 <__sinit_lock_acquire+0x8>)
 8018e7e:	f000 b8cc 	b.w	801901a <__retarget_lock_acquire_recursive>
 8018e82:	bf00      	nop
 8018e84:	2000dbfa 	.word	0x2000dbfa

08018e88 <__sinit_lock_release>:
 8018e88:	4801      	ldr	r0, [pc, #4]	; (8018e90 <__sinit_lock_release+0x8>)
 8018e8a:	f000 b8c7 	b.w	801901c <__retarget_lock_release_recursive>
 8018e8e:	bf00      	nop
 8018e90:	2000dbfa 	.word	0x2000dbfa

08018e94 <__sinit>:
 8018e94:	b510      	push	{r4, lr}
 8018e96:	4604      	mov	r4, r0
 8018e98:	f7ff fff0 	bl	8018e7c <__sinit_lock_acquire>
 8018e9c:	69a3      	ldr	r3, [r4, #24]
 8018e9e:	b11b      	cbz	r3, 8018ea8 <__sinit+0x14>
 8018ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ea4:	f7ff bff0 	b.w	8018e88 <__sinit_lock_release>
 8018ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018eac:	6523      	str	r3, [r4, #80]	; 0x50
 8018eae:	4b13      	ldr	r3, [pc, #76]	; (8018efc <__sinit+0x68>)
 8018eb0:	4a13      	ldr	r2, [pc, #76]	; (8018f00 <__sinit+0x6c>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8018eb6:	42a3      	cmp	r3, r4
 8018eb8:	bf04      	itt	eq
 8018eba:	2301      	moveq	r3, #1
 8018ebc:	61a3      	streq	r3, [r4, #24]
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	f000 f820 	bl	8018f04 <__sfp>
 8018ec4:	6060      	str	r0, [r4, #4]
 8018ec6:	4620      	mov	r0, r4
 8018ec8:	f000 f81c 	bl	8018f04 <__sfp>
 8018ecc:	60a0      	str	r0, [r4, #8]
 8018ece:	4620      	mov	r0, r4
 8018ed0:	f000 f818 	bl	8018f04 <__sfp>
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	60e0      	str	r0, [r4, #12]
 8018ed8:	2104      	movs	r1, #4
 8018eda:	6860      	ldr	r0, [r4, #4]
 8018edc:	f7ff ff82 	bl	8018de4 <std>
 8018ee0:	68a0      	ldr	r0, [r4, #8]
 8018ee2:	2201      	movs	r2, #1
 8018ee4:	2109      	movs	r1, #9
 8018ee6:	f7ff ff7d 	bl	8018de4 <std>
 8018eea:	68e0      	ldr	r0, [r4, #12]
 8018eec:	2202      	movs	r2, #2
 8018eee:	2112      	movs	r1, #18
 8018ef0:	f7ff ff78 	bl	8018de4 <std>
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	61a3      	str	r3, [r4, #24]
 8018ef8:	e7d2      	b.n	8018ea0 <__sinit+0xc>
 8018efa:	bf00      	nop
 8018efc:	0801d570 	.word	0x0801d570
 8018f00:	08018e2d 	.word	0x08018e2d

08018f04 <__sfp>:
 8018f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f06:	4607      	mov	r7, r0
 8018f08:	f7ff ffac 	bl	8018e64 <__sfp_lock_acquire>
 8018f0c:	4b1e      	ldr	r3, [pc, #120]	; (8018f88 <__sfp+0x84>)
 8018f0e:	681e      	ldr	r6, [r3, #0]
 8018f10:	69b3      	ldr	r3, [r6, #24]
 8018f12:	b913      	cbnz	r3, 8018f1a <__sfp+0x16>
 8018f14:	4630      	mov	r0, r6
 8018f16:	f7ff ffbd 	bl	8018e94 <__sinit>
 8018f1a:	3648      	adds	r6, #72	; 0x48
 8018f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018f20:	3b01      	subs	r3, #1
 8018f22:	d503      	bpl.n	8018f2c <__sfp+0x28>
 8018f24:	6833      	ldr	r3, [r6, #0]
 8018f26:	b30b      	cbz	r3, 8018f6c <__sfp+0x68>
 8018f28:	6836      	ldr	r6, [r6, #0]
 8018f2a:	e7f7      	b.n	8018f1c <__sfp+0x18>
 8018f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018f30:	b9d5      	cbnz	r5, 8018f68 <__sfp+0x64>
 8018f32:	4b16      	ldr	r3, [pc, #88]	; (8018f8c <__sfp+0x88>)
 8018f34:	60e3      	str	r3, [r4, #12]
 8018f36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018f3a:	6665      	str	r5, [r4, #100]	; 0x64
 8018f3c:	f000 f86c 	bl	8019018 <__retarget_lock_init_recursive>
 8018f40:	f7ff ff96 	bl	8018e70 <__sfp_lock_release>
 8018f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018f4c:	6025      	str	r5, [r4, #0]
 8018f4e:	61a5      	str	r5, [r4, #24]
 8018f50:	2208      	movs	r2, #8
 8018f52:	4629      	mov	r1, r5
 8018f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f58:	f000 f899 	bl	801908e <memset>
 8018f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018f64:	4620      	mov	r0, r4
 8018f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f68:	3468      	adds	r4, #104	; 0x68
 8018f6a:	e7d9      	b.n	8018f20 <__sfp+0x1c>
 8018f6c:	2104      	movs	r1, #4
 8018f6e:	4638      	mov	r0, r7
 8018f70:	f7ff ff62 	bl	8018e38 <__sfmoreglue>
 8018f74:	4604      	mov	r4, r0
 8018f76:	6030      	str	r0, [r6, #0]
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d1d5      	bne.n	8018f28 <__sfp+0x24>
 8018f7c:	f7ff ff78 	bl	8018e70 <__sfp_lock_release>
 8018f80:	230c      	movs	r3, #12
 8018f82:	603b      	str	r3, [r7, #0]
 8018f84:	e7ee      	b.n	8018f64 <__sfp+0x60>
 8018f86:	bf00      	nop
 8018f88:	0801d570 	.word	0x0801d570
 8018f8c:	ffff0001 	.word	0xffff0001

08018f90 <_fwalk_reent>:
 8018f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f94:	4606      	mov	r6, r0
 8018f96:	4688      	mov	r8, r1
 8018f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018f9c:	2700      	movs	r7, #0
 8018f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8018fa6:	d505      	bpl.n	8018fb4 <_fwalk_reent+0x24>
 8018fa8:	6824      	ldr	r4, [r4, #0]
 8018faa:	2c00      	cmp	r4, #0
 8018fac:	d1f7      	bne.n	8018f9e <_fwalk_reent+0xe>
 8018fae:	4638      	mov	r0, r7
 8018fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fb4:	89ab      	ldrh	r3, [r5, #12]
 8018fb6:	2b01      	cmp	r3, #1
 8018fb8:	d907      	bls.n	8018fca <_fwalk_reent+0x3a>
 8018fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	d003      	beq.n	8018fca <_fwalk_reent+0x3a>
 8018fc2:	4629      	mov	r1, r5
 8018fc4:	4630      	mov	r0, r6
 8018fc6:	47c0      	blx	r8
 8018fc8:	4307      	orrs	r7, r0
 8018fca:	3568      	adds	r5, #104	; 0x68
 8018fcc:	e7e9      	b.n	8018fa2 <_fwalk_reent+0x12>
	...

08018fd0 <__libc_init_array>:
 8018fd0:	b570      	push	{r4, r5, r6, lr}
 8018fd2:	4d0d      	ldr	r5, [pc, #52]	; (8019008 <__libc_init_array+0x38>)
 8018fd4:	4c0d      	ldr	r4, [pc, #52]	; (801900c <__libc_init_array+0x3c>)
 8018fd6:	1b64      	subs	r4, r4, r5
 8018fd8:	10a4      	asrs	r4, r4, #2
 8018fda:	2600      	movs	r6, #0
 8018fdc:	42a6      	cmp	r6, r4
 8018fde:	d109      	bne.n	8018ff4 <__libc_init_array+0x24>
 8018fe0:	4d0b      	ldr	r5, [pc, #44]	; (8019010 <__libc_init_array+0x40>)
 8018fe2:	4c0c      	ldr	r4, [pc, #48]	; (8019014 <__libc_init_array+0x44>)
 8018fe4:	f001 fb00 	bl	801a5e8 <_init>
 8018fe8:	1b64      	subs	r4, r4, r5
 8018fea:	10a4      	asrs	r4, r4, #2
 8018fec:	2600      	movs	r6, #0
 8018fee:	42a6      	cmp	r6, r4
 8018ff0:	d105      	bne.n	8018ffe <__libc_init_array+0x2e>
 8018ff2:	bd70      	pop	{r4, r5, r6, pc}
 8018ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ff8:	4798      	blx	r3
 8018ffa:	3601      	adds	r6, #1
 8018ffc:	e7ee      	b.n	8018fdc <__libc_init_array+0xc>
 8018ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019002:	4798      	blx	r3
 8019004:	3601      	adds	r6, #1
 8019006:	e7f2      	b.n	8018fee <__libc_init_array+0x1e>
 8019008:	0801d660 	.word	0x0801d660
 801900c:	0801d660 	.word	0x0801d660
 8019010:	0801d660 	.word	0x0801d660
 8019014:	0801d664 	.word	0x0801d664

08019018 <__retarget_lock_init_recursive>:
 8019018:	4770      	bx	lr

0801901a <__retarget_lock_acquire_recursive>:
 801901a:	4770      	bx	lr

0801901c <__retarget_lock_release_recursive>:
 801901c:	4770      	bx	lr

0801901e <memcmp>:
 801901e:	b510      	push	{r4, lr}
 8019020:	3901      	subs	r1, #1
 8019022:	4402      	add	r2, r0
 8019024:	4290      	cmp	r0, r2
 8019026:	d101      	bne.n	801902c <memcmp+0xe>
 8019028:	2000      	movs	r0, #0
 801902a:	e005      	b.n	8019038 <memcmp+0x1a>
 801902c:	7803      	ldrb	r3, [r0, #0]
 801902e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019032:	42a3      	cmp	r3, r4
 8019034:	d001      	beq.n	801903a <memcmp+0x1c>
 8019036:	1b18      	subs	r0, r3, r4
 8019038:	bd10      	pop	{r4, pc}
 801903a:	3001      	adds	r0, #1
 801903c:	e7f2      	b.n	8019024 <memcmp+0x6>

0801903e <memcpy>:
 801903e:	440a      	add	r2, r1
 8019040:	4291      	cmp	r1, r2
 8019042:	f100 33ff 	add.w	r3, r0, #4294967295
 8019046:	d100      	bne.n	801904a <memcpy+0xc>
 8019048:	4770      	bx	lr
 801904a:	b510      	push	{r4, lr}
 801904c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019054:	4291      	cmp	r1, r2
 8019056:	d1f9      	bne.n	801904c <memcpy+0xe>
 8019058:	bd10      	pop	{r4, pc}

0801905a <memmove>:
 801905a:	4288      	cmp	r0, r1
 801905c:	b510      	push	{r4, lr}
 801905e:	eb01 0402 	add.w	r4, r1, r2
 8019062:	d902      	bls.n	801906a <memmove+0x10>
 8019064:	4284      	cmp	r4, r0
 8019066:	4623      	mov	r3, r4
 8019068:	d807      	bhi.n	801907a <memmove+0x20>
 801906a:	1e43      	subs	r3, r0, #1
 801906c:	42a1      	cmp	r1, r4
 801906e:	d008      	beq.n	8019082 <memmove+0x28>
 8019070:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019074:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019078:	e7f8      	b.n	801906c <memmove+0x12>
 801907a:	4402      	add	r2, r0
 801907c:	4601      	mov	r1, r0
 801907e:	428a      	cmp	r2, r1
 8019080:	d100      	bne.n	8019084 <memmove+0x2a>
 8019082:	bd10      	pop	{r4, pc}
 8019084:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019088:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801908c:	e7f7      	b.n	801907e <memmove+0x24>

0801908e <memset>:
 801908e:	4402      	add	r2, r0
 8019090:	4603      	mov	r3, r0
 8019092:	4293      	cmp	r3, r2
 8019094:	d100      	bne.n	8019098 <memset+0xa>
 8019096:	4770      	bx	lr
 8019098:	f803 1b01 	strb.w	r1, [r3], #1
 801909c:	e7f9      	b.n	8019092 <memset+0x4>
	...

080190a0 <sbrk_aligned>:
 80190a0:	b570      	push	{r4, r5, r6, lr}
 80190a2:	4e0e      	ldr	r6, [pc, #56]	; (80190dc <sbrk_aligned+0x3c>)
 80190a4:	460c      	mov	r4, r1
 80190a6:	6831      	ldr	r1, [r6, #0]
 80190a8:	4605      	mov	r5, r0
 80190aa:	b911      	cbnz	r1, 80190b2 <sbrk_aligned+0x12>
 80190ac:	f000 f9c2 	bl	8019434 <_sbrk_r>
 80190b0:	6030      	str	r0, [r6, #0]
 80190b2:	4621      	mov	r1, r4
 80190b4:	4628      	mov	r0, r5
 80190b6:	f000 f9bd 	bl	8019434 <_sbrk_r>
 80190ba:	1c43      	adds	r3, r0, #1
 80190bc:	d00a      	beq.n	80190d4 <sbrk_aligned+0x34>
 80190be:	1cc4      	adds	r4, r0, #3
 80190c0:	f024 0403 	bic.w	r4, r4, #3
 80190c4:	42a0      	cmp	r0, r4
 80190c6:	d007      	beq.n	80190d8 <sbrk_aligned+0x38>
 80190c8:	1a21      	subs	r1, r4, r0
 80190ca:	4628      	mov	r0, r5
 80190cc:	f000 f9b2 	bl	8019434 <_sbrk_r>
 80190d0:	3001      	adds	r0, #1
 80190d2:	d101      	bne.n	80190d8 <sbrk_aligned+0x38>
 80190d4:	f04f 34ff 	mov.w	r4, #4294967295
 80190d8:	4620      	mov	r0, r4
 80190da:	bd70      	pop	{r4, r5, r6, pc}
 80190dc:	2000dc00 	.word	0x2000dc00

080190e0 <_malloc_r>:
 80190e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e4:	1ccd      	adds	r5, r1, #3
 80190e6:	f025 0503 	bic.w	r5, r5, #3
 80190ea:	3508      	adds	r5, #8
 80190ec:	2d0c      	cmp	r5, #12
 80190ee:	bf38      	it	cc
 80190f0:	250c      	movcc	r5, #12
 80190f2:	2d00      	cmp	r5, #0
 80190f4:	4607      	mov	r7, r0
 80190f6:	db01      	blt.n	80190fc <_malloc_r+0x1c>
 80190f8:	42a9      	cmp	r1, r5
 80190fa:	d905      	bls.n	8019108 <_malloc_r+0x28>
 80190fc:	230c      	movs	r3, #12
 80190fe:	603b      	str	r3, [r7, #0]
 8019100:	2600      	movs	r6, #0
 8019102:	4630      	mov	r0, r6
 8019104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019108:	4e2e      	ldr	r6, [pc, #184]	; (80191c4 <_malloc_r+0xe4>)
 801910a:	f000 fd13 	bl	8019b34 <__malloc_lock>
 801910e:	6833      	ldr	r3, [r6, #0]
 8019110:	461c      	mov	r4, r3
 8019112:	bb34      	cbnz	r4, 8019162 <_malloc_r+0x82>
 8019114:	4629      	mov	r1, r5
 8019116:	4638      	mov	r0, r7
 8019118:	f7ff ffc2 	bl	80190a0 <sbrk_aligned>
 801911c:	1c43      	adds	r3, r0, #1
 801911e:	4604      	mov	r4, r0
 8019120:	d14d      	bne.n	80191be <_malloc_r+0xde>
 8019122:	6834      	ldr	r4, [r6, #0]
 8019124:	4626      	mov	r6, r4
 8019126:	2e00      	cmp	r6, #0
 8019128:	d140      	bne.n	80191ac <_malloc_r+0xcc>
 801912a:	6823      	ldr	r3, [r4, #0]
 801912c:	4631      	mov	r1, r6
 801912e:	4638      	mov	r0, r7
 8019130:	eb04 0803 	add.w	r8, r4, r3
 8019134:	f000 f97e 	bl	8019434 <_sbrk_r>
 8019138:	4580      	cmp	r8, r0
 801913a:	d13a      	bne.n	80191b2 <_malloc_r+0xd2>
 801913c:	6821      	ldr	r1, [r4, #0]
 801913e:	3503      	adds	r5, #3
 8019140:	1a6d      	subs	r5, r5, r1
 8019142:	f025 0503 	bic.w	r5, r5, #3
 8019146:	3508      	adds	r5, #8
 8019148:	2d0c      	cmp	r5, #12
 801914a:	bf38      	it	cc
 801914c:	250c      	movcc	r5, #12
 801914e:	4629      	mov	r1, r5
 8019150:	4638      	mov	r0, r7
 8019152:	f7ff ffa5 	bl	80190a0 <sbrk_aligned>
 8019156:	3001      	adds	r0, #1
 8019158:	d02b      	beq.n	80191b2 <_malloc_r+0xd2>
 801915a:	6823      	ldr	r3, [r4, #0]
 801915c:	442b      	add	r3, r5
 801915e:	6023      	str	r3, [r4, #0]
 8019160:	e00e      	b.n	8019180 <_malloc_r+0xa0>
 8019162:	6822      	ldr	r2, [r4, #0]
 8019164:	1b52      	subs	r2, r2, r5
 8019166:	d41e      	bmi.n	80191a6 <_malloc_r+0xc6>
 8019168:	2a0b      	cmp	r2, #11
 801916a:	d916      	bls.n	801919a <_malloc_r+0xba>
 801916c:	1961      	adds	r1, r4, r5
 801916e:	42a3      	cmp	r3, r4
 8019170:	6025      	str	r5, [r4, #0]
 8019172:	bf18      	it	ne
 8019174:	6059      	strne	r1, [r3, #4]
 8019176:	6863      	ldr	r3, [r4, #4]
 8019178:	bf08      	it	eq
 801917a:	6031      	streq	r1, [r6, #0]
 801917c:	5162      	str	r2, [r4, r5]
 801917e:	604b      	str	r3, [r1, #4]
 8019180:	4638      	mov	r0, r7
 8019182:	f104 060b 	add.w	r6, r4, #11
 8019186:	f000 fcdb 	bl	8019b40 <__malloc_unlock>
 801918a:	f026 0607 	bic.w	r6, r6, #7
 801918e:	1d23      	adds	r3, r4, #4
 8019190:	1af2      	subs	r2, r6, r3
 8019192:	d0b6      	beq.n	8019102 <_malloc_r+0x22>
 8019194:	1b9b      	subs	r3, r3, r6
 8019196:	50a3      	str	r3, [r4, r2]
 8019198:	e7b3      	b.n	8019102 <_malloc_r+0x22>
 801919a:	6862      	ldr	r2, [r4, #4]
 801919c:	42a3      	cmp	r3, r4
 801919e:	bf0c      	ite	eq
 80191a0:	6032      	streq	r2, [r6, #0]
 80191a2:	605a      	strne	r2, [r3, #4]
 80191a4:	e7ec      	b.n	8019180 <_malloc_r+0xa0>
 80191a6:	4623      	mov	r3, r4
 80191a8:	6864      	ldr	r4, [r4, #4]
 80191aa:	e7b2      	b.n	8019112 <_malloc_r+0x32>
 80191ac:	4634      	mov	r4, r6
 80191ae:	6876      	ldr	r6, [r6, #4]
 80191b0:	e7b9      	b.n	8019126 <_malloc_r+0x46>
 80191b2:	230c      	movs	r3, #12
 80191b4:	603b      	str	r3, [r7, #0]
 80191b6:	4638      	mov	r0, r7
 80191b8:	f000 fcc2 	bl	8019b40 <__malloc_unlock>
 80191bc:	e7a1      	b.n	8019102 <_malloc_r+0x22>
 80191be:	6025      	str	r5, [r4, #0]
 80191c0:	e7de      	b.n	8019180 <_malloc_r+0xa0>
 80191c2:	bf00      	nop
 80191c4:	2000dbfc 	.word	0x2000dbfc

080191c8 <iprintf>:
 80191c8:	b40f      	push	{r0, r1, r2, r3}
 80191ca:	4b0a      	ldr	r3, [pc, #40]	; (80191f4 <iprintf+0x2c>)
 80191cc:	b513      	push	{r0, r1, r4, lr}
 80191ce:	681c      	ldr	r4, [r3, #0]
 80191d0:	b124      	cbz	r4, 80191dc <iprintf+0x14>
 80191d2:	69a3      	ldr	r3, [r4, #24]
 80191d4:	b913      	cbnz	r3, 80191dc <iprintf+0x14>
 80191d6:	4620      	mov	r0, r4
 80191d8:	f7ff fe5c 	bl	8018e94 <__sinit>
 80191dc:	ab05      	add	r3, sp, #20
 80191de:	9a04      	ldr	r2, [sp, #16]
 80191e0:	68a1      	ldr	r1, [r4, #8]
 80191e2:	9301      	str	r3, [sp, #4]
 80191e4:	4620      	mov	r0, r4
 80191e6:	f000 fe83 	bl	8019ef0 <_vfiprintf_r>
 80191ea:	b002      	add	sp, #8
 80191ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191f0:	b004      	add	sp, #16
 80191f2:	4770      	bx	lr
 80191f4:	2000016c 	.word	0x2000016c

080191f8 <_puts_r>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	460e      	mov	r6, r1
 80191fc:	4605      	mov	r5, r0
 80191fe:	b118      	cbz	r0, 8019208 <_puts_r+0x10>
 8019200:	6983      	ldr	r3, [r0, #24]
 8019202:	b90b      	cbnz	r3, 8019208 <_puts_r+0x10>
 8019204:	f7ff fe46 	bl	8018e94 <__sinit>
 8019208:	69ab      	ldr	r3, [r5, #24]
 801920a:	68ac      	ldr	r4, [r5, #8]
 801920c:	b913      	cbnz	r3, 8019214 <_puts_r+0x1c>
 801920e:	4628      	mov	r0, r5
 8019210:	f7ff fe40 	bl	8018e94 <__sinit>
 8019214:	4b2c      	ldr	r3, [pc, #176]	; (80192c8 <_puts_r+0xd0>)
 8019216:	429c      	cmp	r4, r3
 8019218:	d120      	bne.n	801925c <_puts_r+0x64>
 801921a:	686c      	ldr	r4, [r5, #4]
 801921c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801921e:	07db      	lsls	r3, r3, #31
 8019220:	d405      	bmi.n	801922e <_puts_r+0x36>
 8019222:	89a3      	ldrh	r3, [r4, #12]
 8019224:	0598      	lsls	r0, r3, #22
 8019226:	d402      	bmi.n	801922e <_puts_r+0x36>
 8019228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801922a:	f7ff fef6 	bl	801901a <__retarget_lock_acquire_recursive>
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	0719      	lsls	r1, r3, #28
 8019232:	d51d      	bpl.n	8019270 <_puts_r+0x78>
 8019234:	6923      	ldr	r3, [r4, #16]
 8019236:	b1db      	cbz	r3, 8019270 <_puts_r+0x78>
 8019238:	3e01      	subs	r6, #1
 801923a:	68a3      	ldr	r3, [r4, #8]
 801923c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019240:	3b01      	subs	r3, #1
 8019242:	60a3      	str	r3, [r4, #8]
 8019244:	bb39      	cbnz	r1, 8019296 <_puts_r+0x9e>
 8019246:	2b00      	cmp	r3, #0
 8019248:	da38      	bge.n	80192bc <_puts_r+0xc4>
 801924a:	4622      	mov	r2, r4
 801924c:	210a      	movs	r1, #10
 801924e:	4628      	mov	r0, r5
 8019250:	f000 fa16 	bl	8019680 <__swbuf_r>
 8019254:	3001      	adds	r0, #1
 8019256:	d011      	beq.n	801927c <_puts_r+0x84>
 8019258:	250a      	movs	r5, #10
 801925a:	e011      	b.n	8019280 <_puts_r+0x88>
 801925c:	4b1b      	ldr	r3, [pc, #108]	; (80192cc <_puts_r+0xd4>)
 801925e:	429c      	cmp	r4, r3
 8019260:	d101      	bne.n	8019266 <_puts_r+0x6e>
 8019262:	68ac      	ldr	r4, [r5, #8]
 8019264:	e7da      	b.n	801921c <_puts_r+0x24>
 8019266:	4b1a      	ldr	r3, [pc, #104]	; (80192d0 <_puts_r+0xd8>)
 8019268:	429c      	cmp	r4, r3
 801926a:	bf08      	it	eq
 801926c:	68ec      	ldreq	r4, [r5, #12]
 801926e:	e7d5      	b.n	801921c <_puts_r+0x24>
 8019270:	4621      	mov	r1, r4
 8019272:	4628      	mov	r0, r5
 8019274:	f000 fa68 	bl	8019748 <__swsetup_r>
 8019278:	2800      	cmp	r0, #0
 801927a:	d0dd      	beq.n	8019238 <_puts_r+0x40>
 801927c:	f04f 35ff 	mov.w	r5, #4294967295
 8019280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019282:	07da      	lsls	r2, r3, #31
 8019284:	d405      	bmi.n	8019292 <_puts_r+0x9a>
 8019286:	89a3      	ldrh	r3, [r4, #12]
 8019288:	059b      	lsls	r3, r3, #22
 801928a:	d402      	bmi.n	8019292 <_puts_r+0x9a>
 801928c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801928e:	f7ff fec5 	bl	801901c <__retarget_lock_release_recursive>
 8019292:	4628      	mov	r0, r5
 8019294:	bd70      	pop	{r4, r5, r6, pc}
 8019296:	2b00      	cmp	r3, #0
 8019298:	da04      	bge.n	80192a4 <_puts_r+0xac>
 801929a:	69a2      	ldr	r2, [r4, #24]
 801929c:	429a      	cmp	r2, r3
 801929e:	dc06      	bgt.n	80192ae <_puts_r+0xb6>
 80192a0:	290a      	cmp	r1, #10
 80192a2:	d004      	beq.n	80192ae <_puts_r+0xb6>
 80192a4:	6823      	ldr	r3, [r4, #0]
 80192a6:	1c5a      	adds	r2, r3, #1
 80192a8:	6022      	str	r2, [r4, #0]
 80192aa:	7019      	strb	r1, [r3, #0]
 80192ac:	e7c5      	b.n	801923a <_puts_r+0x42>
 80192ae:	4622      	mov	r2, r4
 80192b0:	4628      	mov	r0, r5
 80192b2:	f000 f9e5 	bl	8019680 <__swbuf_r>
 80192b6:	3001      	adds	r0, #1
 80192b8:	d1bf      	bne.n	801923a <_puts_r+0x42>
 80192ba:	e7df      	b.n	801927c <_puts_r+0x84>
 80192bc:	6823      	ldr	r3, [r4, #0]
 80192be:	250a      	movs	r5, #10
 80192c0:	1c5a      	adds	r2, r3, #1
 80192c2:	6022      	str	r2, [r4, #0]
 80192c4:	701d      	strb	r5, [r3, #0]
 80192c6:	e7db      	b.n	8019280 <_puts_r+0x88>
 80192c8:	0801d530 	.word	0x0801d530
 80192cc:	0801d550 	.word	0x0801d550
 80192d0:	0801d510 	.word	0x0801d510

080192d4 <puts>:
 80192d4:	4b02      	ldr	r3, [pc, #8]	; (80192e0 <puts+0xc>)
 80192d6:	4601      	mov	r1, r0
 80192d8:	6818      	ldr	r0, [r3, #0]
 80192da:	f7ff bf8d 	b.w	80191f8 <_puts_r>
 80192de:	bf00      	nop
 80192e0:	2000016c 	.word	0x2000016c

080192e4 <rand>:
 80192e4:	4b16      	ldr	r3, [pc, #88]	; (8019340 <rand+0x5c>)
 80192e6:	b510      	push	{r4, lr}
 80192e8:	681c      	ldr	r4, [r3, #0]
 80192ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80192ec:	b9b3      	cbnz	r3, 801931c <rand+0x38>
 80192ee:	2018      	movs	r0, #24
 80192f0:	f000 fc18 	bl	8019b24 <malloc>
 80192f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80192f6:	b928      	cbnz	r0, 8019304 <rand+0x20>
 80192f8:	4602      	mov	r2, r0
 80192fa:	4b12      	ldr	r3, [pc, #72]	; (8019344 <rand+0x60>)
 80192fc:	4812      	ldr	r0, [pc, #72]	; (8019348 <rand+0x64>)
 80192fe:	214e      	movs	r1, #78	; 0x4e
 8019300:	f000 fa90 	bl	8019824 <__assert_func>
 8019304:	4a11      	ldr	r2, [pc, #68]	; (801934c <rand+0x68>)
 8019306:	4b12      	ldr	r3, [pc, #72]	; (8019350 <rand+0x6c>)
 8019308:	e9c0 2300 	strd	r2, r3, [r0]
 801930c:	4b11      	ldr	r3, [pc, #68]	; (8019354 <rand+0x70>)
 801930e:	6083      	str	r3, [r0, #8]
 8019310:	230b      	movs	r3, #11
 8019312:	8183      	strh	r3, [r0, #12]
 8019314:	2201      	movs	r2, #1
 8019316:	2300      	movs	r3, #0
 8019318:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801931c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801931e:	4a0e      	ldr	r2, [pc, #56]	; (8019358 <rand+0x74>)
 8019320:	6920      	ldr	r0, [r4, #16]
 8019322:	6963      	ldr	r3, [r4, #20]
 8019324:	490d      	ldr	r1, [pc, #52]	; (801935c <rand+0x78>)
 8019326:	4342      	muls	r2, r0
 8019328:	fb01 2203 	mla	r2, r1, r3, r2
 801932c:	fba0 0101 	umull	r0, r1, r0, r1
 8019330:	1c43      	adds	r3, r0, #1
 8019332:	eb42 0001 	adc.w	r0, r2, r1
 8019336:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801933a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801933e:	bd10      	pop	{r4, pc}
 8019340:	2000016c 	.word	0x2000016c
 8019344:	0801d574 	.word	0x0801d574
 8019348:	0801d58b 	.word	0x0801d58b
 801934c:	abcd330e 	.word	0xabcd330e
 8019350:	e66d1234 	.word	0xe66d1234
 8019354:	0005deec 	.word	0x0005deec
 8019358:	5851f42d 	.word	0x5851f42d
 801935c:	4c957f2d 	.word	0x4c957f2d

08019360 <cleanup_glue>:
 8019360:	b538      	push	{r3, r4, r5, lr}
 8019362:	460c      	mov	r4, r1
 8019364:	6809      	ldr	r1, [r1, #0]
 8019366:	4605      	mov	r5, r0
 8019368:	b109      	cbz	r1, 801936e <cleanup_glue+0xe>
 801936a:	f7ff fff9 	bl	8019360 <cleanup_glue>
 801936e:	4621      	mov	r1, r4
 8019370:	4628      	mov	r0, r5
 8019372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019376:	f000 bbe9 	b.w	8019b4c <_free_r>
	...

0801937c <_reclaim_reent>:
 801937c:	4b2c      	ldr	r3, [pc, #176]	; (8019430 <_reclaim_reent+0xb4>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	4283      	cmp	r3, r0
 8019382:	b570      	push	{r4, r5, r6, lr}
 8019384:	4604      	mov	r4, r0
 8019386:	d051      	beq.n	801942c <_reclaim_reent+0xb0>
 8019388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801938a:	b143      	cbz	r3, 801939e <_reclaim_reent+0x22>
 801938c:	68db      	ldr	r3, [r3, #12]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d14a      	bne.n	8019428 <_reclaim_reent+0xac>
 8019392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019394:	6819      	ldr	r1, [r3, #0]
 8019396:	b111      	cbz	r1, 801939e <_reclaim_reent+0x22>
 8019398:	4620      	mov	r0, r4
 801939a:	f000 fbd7 	bl	8019b4c <_free_r>
 801939e:	6961      	ldr	r1, [r4, #20]
 80193a0:	b111      	cbz	r1, 80193a8 <_reclaim_reent+0x2c>
 80193a2:	4620      	mov	r0, r4
 80193a4:	f000 fbd2 	bl	8019b4c <_free_r>
 80193a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80193aa:	b111      	cbz	r1, 80193b2 <_reclaim_reent+0x36>
 80193ac:	4620      	mov	r0, r4
 80193ae:	f000 fbcd 	bl	8019b4c <_free_r>
 80193b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80193b4:	b111      	cbz	r1, 80193bc <_reclaim_reent+0x40>
 80193b6:	4620      	mov	r0, r4
 80193b8:	f000 fbc8 	bl	8019b4c <_free_r>
 80193bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80193be:	b111      	cbz	r1, 80193c6 <_reclaim_reent+0x4a>
 80193c0:	4620      	mov	r0, r4
 80193c2:	f000 fbc3 	bl	8019b4c <_free_r>
 80193c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80193c8:	b111      	cbz	r1, 80193d0 <_reclaim_reent+0x54>
 80193ca:	4620      	mov	r0, r4
 80193cc:	f000 fbbe 	bl	8019b4c <_free_r>
 80193d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80193d2:	b111      	cbz	r1, 80193da <_reclaim_reent+0x5e>
 80193d4:	4620      	mov	r0, r4
 80193d6:	f000 fbb9 	bl	8019b4c <_free_r>
 80193da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80193dc:	b111      	cbz	r1, 80193e4 <_reclaim_reent+0x68>
 80193de:	4620      	mov	r0, r4
 80193e0:	f000 fbb4 	bl	8019b4c <_free_r>
 80193e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193e6:	b111      	cbz	r1, 80193ee <_reclaim_reent+0x72>
 80193e8:	4620      	mov	r0, r4
 80193ea:	f000 fbaf 	bl	8019b4c <_free_r>
 80193ee:	69a3      	ldr	r3, [r4, #24]
 80193f0:	b1e3      	cbz	r3, 801942c <_reclaim_reent+0xb0>
 80193f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80193f4:	4620      	mov	r0, r4
 80193f6:	4798      	blx	r3
 80193f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80193fa:	b1b9      	cbz	r1, 801942c <_reclaim_reent+0xb0>
 80193fc:	4620      	mov	r0, r4
 80193fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019402:	f7ff bfad 	b.w	8019360 <cleanup_glue>
 8019406:	5949      	ldr	r1, [r1, r5]
 8019408:	b941      	cbnz	r1, 801941c <_reclaim_reent+0xa0>
 801940a:	3504      	adds	r5, #4
 801940c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801940e:	2d80      	cmp	r5, #128	; 0x80
 8019410:	68d9      	ldr	r1, [r3, #12]
 8019412:	d1f8      	bne.n	8019406 <_reclaim_reent+0x8a>
 8019414:	4620      	mov	r0, r4
 8019416:	f000 fb99 	bl	8019b4c <_free_r>
 801941a:	e7ba      	b.n	8019392 <_reclaim_reent+0x16>
 801941c:	680e      	ldr	r6, [r1, #0]
 801941e:	4620      	mov	r0, r4
 8019420:	f000 fb94 	bl	8019b4c <_free_r>
 8019424:	4631      	mov	r1, r6
 8019426:	e7ef      	b.n	8019408 <_reclaim_reent+0x8c>
 8019428:	2500      	movs	r5, #0
 801942a:	e7ef      	b.n	801940c <_reclaim_reent+0x90>
 801942c:	bd70      	pop	{r4, r5, r6, pc}
 801942e:	bf00      	nop
 8019430:	2000016c 	.word	0x2000016c

08019434 <_sbrk_r>:
 8019434:	b538      	push	{r3, r4, r5, lr}
 8019436:	4d06      	ldr	r5, [pc, #24]	; (8019450 <_sbrk_r+0x1c>)
 8019438:	2300      	movs	r3, #0
 801943a:	4604      	mov	r4, r0
 801943c:	4608      	mov	r0, r1
 801943e:	602b      	str	r3, [r5, #0]
 8019440:	f7e9 f990 	bl	8002764 <_sbrk>
 8019444:	1c43      	adds	r3, r0, #1
 8019446:	d102      	bne.n	801944e <_sbrk_r+0x1a>
 8019448:	682b      	ldr	r3, [r5, #0]
 801944a:	b103      	cbz	r3, 801944e <_sbrk_r+0x1a>
 801944c:	6023      	str	r3, [r4, #0]
 801944e:	bd38      	pop	{r3, r4, r5, pc}
 8019450:	2000dc04 	.word	0x2000dc04

08019454 <siprintf>:
 8019454:	b40e      	push	{r1, r2, r3}
 8019456:	b500      	push	{lr}
 8019458:	b09c      	sub	sp, #112	; 0x70
 801945a:	ab1d      	add	r3, sp, #116	; 0x74
 801945c:	9002      	str	r0, [sp, #8]
 801945e:	9006      	str	r0, [sp, #24]
 8019460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019464:	4809      	ldr	r0, [pc, #36]	; (801948c <siprintf+0x38>)
 8019466:	9107      	str	r1, [sp, #28]
 8019468:	9104      	str	r1, [sp, #16]
 801946a:	4909      	ldr	r1, [pc, #36]	; (8019490 <siprintf+0x3c>)
 801946c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019470:	9105      	str	r1, [sp, #20]
 8019472:	6800      	ldr	r0, [r0, #0]
 8019474:	9301      	str	r3, [sp, #4]
 8019476:	a902      	add	r1, sp, #8
 8019478:	f000 fc10 	bl	8019c9c <_svfiprintf_r>
 801947c:	9b02      	ldr	r3, [sp, #8]
 801947e:	2200      	movs	r2, #0
 8019480:	701a      	strb	r2, [r3, #0]
 8019482:	b01c      	add	sp, #112	; 0x70
 8019484:	f85d eb04 	ldr.w	lr, [sp], #4
 8019488:	b003      	add	sp, #12
 801948a:	4770      	bx	lr
 801948c:	2000016c 	.word	0x2000016c
 8019490:	ffff0208 	.word	0xffff0208

08019494 <__sread>:
 8019494:	b510      	push	{r4, lr}
 8019496:	460c      	mov	r4, r1
 8019498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801949c:	f000 ffec 	bl	801a478 <_read_r>
 80194a0:	2800      	cmp	r0, #0
 80194a2:	bfab      	itete	ge
 80194a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80194a6:	89a3      	ldrhlt	r3, [r4, #12]
 80194a8:	181b      	addge	r3, r3, r0
 80194aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80194ae:	bfac      	ite	ge
 80194b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80194b2:	81a3      	strhlt	r3, [r4, #12]
 80194b4:	bd10      	pop	{r4, pc}

080194b6 <__swrite>:
 80194b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194ba:	461f      	mov	r7, r3
 80194bc:	898b      	ldrh	r3, [r1, #12]
 80194be:	05db      	lsls	r3, r3, #23
 80194c0:	4605      	mov	r5, r0
 80194c2:	460c      	mov	r4, r1
 80194c4:	4616      	mov	r6, r2
 80194c6:	d505      	bpl.n	80194d4 <__swrite+0x1e>
 80194c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194cc:	2302      	movs	r3, #2
 80194ce:	2200      	movs	r2, #0
 80194d0:	f000 fab0 	bl	8019a34 <_lseek_r>
 80194d4:	89a3      	ldrh	r3, [r4, #12]
 80194d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80194de:	81a3      	strh	r3, [r4, #12]
 80194e0:	4632      	mov	r2, r6
 80194e2:	463b      	mov	r3, r7
 80194e4:	4628      	mov	r0, r5
 80194e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194ea:	f000 b91b 	b.w	8019724 <_write_r>

080194ee <__sseek>:
 80194ee:	b510      	push	{r4, lr}
 80194f0:	460c      	mov	r4, r1
 80194f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194f6:	f000 fa9d 	bl	8019a34 <_lseek_r>
 80194fa:	1c43      	adds	r3, r0, #1
 80194fc:	89a3      	ldrh	r3, [r4, #12]
 80194fe:	bf15      	itete	ne
 8019500:	6560      	strne	r0, [r4, #84]	; 0x54
 8019502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801950a:	81a3      	strheq	r3, [r4, #12]
 801950c:	bf18      	it	ne
 801950e:	81a3      	strhne	r3, [r4, #12]
 8019510:	bd10      	pop	{r4, pc}

08019512 <__sclose>:
 8019512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019516:	f000 b9a3 	b.w	8019860 <_close_r>

0801951a <strncmp>:
 801951a:	b510      	push	{r4, lr}
 801951c:	b17a      	cbz	r2, 801953e <strncmp+0x24>
 801951e:	4603      	mov	r3, r0
 8019520:	3901      	subs	r1, #1
 8019522:	1884      	adds	r4, r0, r2
 8019524:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019528:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801952c:	4290      	cmp	r0, r2
 801952e:	d101      	bne.n	8019534 <strncmp+0x1a>
 8019530:	42a3      	cmp	r3, r4
 8019532:	d101      	bne.n	8019538 <strncmp+0x1e>
 8019534:	1a80      	subs	r0, r0, r2
 8019536:	bd10      	pop	{r4, pc}
 8019538:	2800      	cmp	r0, #0
 801953a:	d1f3      	bne.n	8019524 <strncmp+0xa>
 801953c:	e7fa      	b.n	8019534 <strncmp+0x1a>
 801953e:	4610      	mov	r0, r2
 8019540:	e7f9      	b.n	8019536 <strncmp+0x1c>

08019542 <strncpy>:
 8019542:	b510      	push	{r4, lr}
 8019544:	3901      	subs	r1, #1
 8019546:	4603      	mov	r3, r0
 8019548:	b132      	cbz	r2, 8019558 <strncpy+0x16>
 801954a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801954e:	f803 4b01 	strb.w	r4, [r3], #1
 8019552:	3a01      	subs	r2, #1
 8019554:	2c00      	cmp	r4, #0
 8019556:	d1f7      	bne.n	8019548 <strncpy+0x6>
 8019558:	441a      	add	r2, r3
 801955a:	2100      	movs	r1, #0
 801955c:	4293      	cmp	r3, r2
 801955e:	d100      	bne.n	8019562 <strncpy+0x20>
 8019560:	bd10      	pop	{r4, pc}
 8019562:	f803 1b01 	strb.w	r1, [r3], #1
 8019566:	e7f9      	b.n	801955c <strncpy+0x1a>

08019568 <_strtol_l.constprop.0>:
 8019568:	2b01      	cmp	r3, #1
 801956a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801956e:	d001      	beq.n	8019574 <_strtol_l.constprop.0+0xc>
 8019570:	2b24      	cmp	r3, #36	; 0x24
 8019572:	d906      	bls.n	8019582 <_strtol_l.constprop.0+0x1a>
 8019574:	f000 f984 	bl	8019880 <__errno>
 8019578:	2316      	movs	r3, #22
 801957a:	6003      	str	r3, [r0, #0]
 801957c:	2000      	movs	r0, #0
 801957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019582:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019668 <_strtol_l.constprop.0+0x100>
 8019586:	460d      	mov	r5, r1
 8019588:	462e      	mov	r6, r5
 801958a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801958e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8019592:	f017 0708 	ands.w	r7, r7, #8
 8019596:	d1f7      	bne.n	8019588 <_strtol_l.constprop.0+0x20>
 8019598:	2c2d      	cmp	r4, #45	; 0x2d
 801959a:	d132      	bne.n	8019602 <_strtol_l.constprop.0+0x9a>
 801959c:	782c      	ldrb	r4, [r5, #0]
 801959e:	2701      	movs	r7, #1
 80195a0:	1cb5      	adds	r5, r6, #2
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d05b      	beq.n	801965e <_strtol_l.constprop.0+0xf6>
 80195a6:	2b10      	cmp	r3, #16
 80195a8:	d109      	bne.n	80195be <_strtol_l.constprop.0+0x56>
 80195aa:	2c30      	cmp	r4, #48	; 0x30
 80195ac:	d107      	bne.n	80195be <_strtol_l.constprop.0+0x56>
 80195ae:	782c      	ldrb	r4, [r5, #0]
 80195b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80195b4:	2c58      	cmp	r4, #88	; 0x58
 80195b6:	d14d      	bne.n	8019654 <_strtol_l.constprop.0+0xec>
 80195b8:	786c      	ldrb	r4, [r5, #1]
 80195ba:	2310      	movs	r3, #16
 80195bc:	3502      	adds	r5, #2
 80195be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80195c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80195c6:	f04f 0c00 	mov.w	ip, #0
 80195ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80195ce:	4666      	mov	r6, ip
 80195d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80195d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80195d8:	f1be 0f09 	cmp.w	lr, #9
 80195dc:	d816      	bhi.n	801960c <_strtol_l.constprop.0+0xa4>
 80195de:	4674      	mov	r4, lr
 80195e0:	42a3      	cmp	r3, r4
 80195e2:	dd24      	ble.n	801962e <_strtol_l.constprop.0+0xc6>
 80195e4:	f1bc 0f00 	cmp.w	ip, #0
 80195e8:	db1e      	blt.n	8019628 <_strtol_l.constprop.0+0xc0>
 80195ea:	45b1      	cmp	r9, r6
 80195ec:	d31c      	bcc.n	8019628 <_strtol_l.constprop.0+0xc0>
 80195ee:	d101      	bne.n	80195f4 <_strtol_l.constprop.0+0x8c>
 80195f0:	45a2      	cmp	sl, r4
 80195f2:	db19      	blt.n	8019628 <_strtol_l.constprop.0+0xc0>
 80195f4:	fb06 4603 	mla	r6, r6, r3, r4
 80195f8:	f04f 0c01 	mov.w	ip, #1
 80195fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019600:	e7e8      	b.n	80195d4 <_strtol_l.constprop.0+0x6c>
 8019602:	2c2b      	cmp	r4, #43	; 0x2b
 8019604:	bf04      	itt	eq
 8019606:	782c      	ldrbeq	r4, [r5, #0]
 8019608:	1cb5      	addeq	r5, r6, #2
 801960a:	e7ca      	b.n	80195a2 <_strtol_l.constprop.0+0x3a>
 801960c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8019610:	f1be 0f19 	cmp.w	lr, #25
 8019614:	d801      	bhi.n	801961a <_strtol_l.constprop.0+0xb2>
 8019616:	3c37      	subs	r4, #55	; 0x37
 8019618:	e7e2      	b.n	80195e0 <_strtol_l.constprop.0+0x78>
 801961a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801961e:	f1be 0f19 	cmp.w	lr, #25
 8019622:	d804      	bhi.n	801962e <_strtol_l.constprop.0+0xc6>
 8019624:	3c57      	subs	r4, #87	; 0x57
 8019626:	e7db      	b.n	80195e0 <_strtol_l.constprop.0+0x78>
 8019628:	f04f 3cff 	mov.w	ip, #4294967295
 801962c:	e7e6      	b.n	80195fc <_strtol_l.constprop.0+0x94>
 801962e:	f1bc 0f00 	cmp.w	ip, #0
 8019632:	da05      	bge.n	8019640 <_strtol_l.constprop.0+0xd8>
 8019634:	2322      	movs	r3, #34	; 0x22
 8019636:	6003      	str	r3, [r0, #0]
 8019638:	4646      	mov	r6, r8
 801963a:	b942      	cbnz	r2, 801964e <_strtol_l.constprop.0+0xe6>
 801963c:	4630      	mov	r0, r6
 801963e:	e79e      	b.n	801957e <_strtol_l.constprop.0+0x16>
 8019640:	b107      	cbz	r7, 8019644 <_strtol_l.constprop.0+0xdc>
 8019642:	4276      	negs	r6, r6
 8019644:	2a00      	cmp	r2, #0
 8019646:	d0f9      	beq.n	801963c <_strtol_l.constprop.0+0xd4>
 8019648:	f1bc 0f00 	cmp.w	ip, #0
 801964c:	d000      	beq.n	8019650 <_strtol_l.constprop.0+0xe8>
 801964e:	1e69      	subs	r1, r5, #1
 8019650:	6011      	str	r1, [r2, #0]
 8019652:	e7f3      	b.n	801963c <_strtol_l.constprop.0+0xd4>
 8019654:	2430      	movs	r4, #48	; 0x30
 8019656:	2b00      	cmp	r3, #0
 8019658:	d1b1      	bne.n	80195be <_strtol_l.constprop.0+0x56>
 801965a:	2308      	movs	r3, #8
 801965c:	e7af      	b.n	80195be <_strtol_l.constprop.0+0x56>
 801965e:	2c30      	cmp	r4, #48	; 0x30
 8019660:	d0a5      	beq.n	80195ae <_strtol_l.constprop.0+0x46>
 8019662:	230a      	movs	r3, #10
 8019664:	e7ab      	b.n	80195be <_strtol_l.constprop.0+0x56>
 8019666:	bf00      	nop
 8019668:	0801d40f 	.word	0x0801d40f

0801966c <strtol>:
 801966c:	4613      	mov	r3, r2
 801966e:	460a      	mov	r2, r1
 8019670:	4601      	mov	r1, r0
 8019672:	4802      	ldr	r0, [pc, #8]	; (801967c <strtol+0x10>)
 8019674:	6800      	ldr	r0, [r0, #0]
 8019676:	f7ff bf77 	b.w	8019568 <_strtol_l.constprop.0>
 801967a:	bf00      	nop
 801967c:	2000016c 	.word	0x2000016c

08019680 <__swbuf_r>:
 8019680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019682:	460e      	mov	r6, r1
 8019684:	4614      	mov	r4, r2
 8019686:	4605      	mov	r5, r0
 8019688:	b118      	cbz	r0, 8019692 <__swbuf_r+0x12>
 801968a:	6983      	ldr	r3, [r0, #24]
 801968c:	b90b      	cbnz	r3, 8019692 <__swbuf_r+0x12>
 801968e:	f7ff fc01 	bl	8018e94 <__sinit>
 8019692:	4b21      	ldr	r3, [pc, #132]	; (8019718 <__swbuf_r+0x98>)
 8019694:	429c      	cmp	r4, r3
 8019696:	d12b      	bne.n	80196f0 <__swbuf_r+0x70>
 8019698:	686c      	ldr	r4, [r5, #4]
 801969a:	69a3      	ldr	r3, [r4, #24]
 801969c:	60a3      	str	r3, [r4, #8]
 801969e:	89a3      	ldrh	r3, [r4, #12]
 80196a0:	071a      	lsls	r2, r3, #28
 80196a2:	d52f      	bpl.n	8019704 <__swbuf_r+0x84>
 80196a4:	6923      	ldr	r3, [r4, #16]
 80196a6:	b36b      	cbz	r3, 8019704 <__swbuf_r+0x84>
 80196a8:	6923      	ldr	r3, [r4, #16]
 80196aa:	6820      	ldr	r0, [r4, #0]
 80196ac:	1ac0      	subs	r0, r0, r3
 80196ae:	6963      	ldr	r3, [r4, #20]
 80196b0:	b2f6      	uxtb	r6, r6
 80196b2:	4283      	cmp	r3, r0
 80196b4:	4637      	mov	r7, r6
 80196b6:	dc04      	bgt.n	80196c2 <__swbuf_r+0x42>
 80196b8:	4621      	mov	r1, r4
 80196ba:	4628      	mov	r0, r5
 80196bc:	f000 f96c 	bl	8019998 <_fflush_r>
 80196c0:	bb30      	cbnz	r0, 8019710 <__swbuf_r+0x90>
 80196c2:	68a3      	ldr	r3, [r4, #8]
 80196c4:	3b01      	subs	r3, #1
 80196c6:	60a3      	str	r3, [r4, #8]
 80196c8:	6823      	ldr	r3, [r4, #0]
 80196ca:	1c5a      	adds	r2, r3, #1
 80196cc:	6022      	str	r2, [r4, #0]
 80196ce:	701e      	strb	r6, [r3, #0]
 80196d0:	6963      	ldr	r3, [r4, #20]
 80196d2:	3001      	adds	r0, #1
 80196d4:	4283      	cmp	r3, r0
 80196d6:	d004      	beq.n	80196e2 <__swbuf_r+0x62>
 80196d8:	89a3      	ldrh	r3, [r4, #12]
 80196da:	07db      	lsls	r3, r3, #31
 80196dc:	d506      	bpl.n	80196ec <__swbuf_r+0x6c>
 80196de:	2e0a      	cmp	r6, #10
 80196e0:	d104      	bne.n	80196ec <__swbuf_r+0x6c>
 80196e2:	4621      	mov	r1, r4
 80196e4:	4628      	mov	r0, r5
 80196e6:	f000 f957 	bl	8019998 <_fflush_r>
 80196ea:	b988      	cbnz	r0, 8019710 <__swbuf_r+0x90>
 80196ec:	4638      	mov	r0, r7
 80196ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196f0:	4b0a      	ldr	r3, [pc, #40]	; (801971c <__swbuf_r+0x9c>)
 80196f2:	429c      	cmp	r4, r3
 80196f4:	d101      	bne.n	80196fa <__swbuf_r+0x7a>
 80196f6:	68ac      	ldr	r4, [r5, #8]
 80196f8:	e7cf      	b.n	801969a <__swbuf_r+0x1a>
 80196fa:	4b09      	ldr	r3, [pc, #36]	; (8019720 <__swbuf_r+0xa0>)
 80196fc:	429c      	cmp	r4, r3
 80196fe:	bf08      	it	eq
 8019700:	68ec      	ldreq	r4, [r5, #12]
 8019702:	e7ca      	b.n	801969a <__swbuf_r+0x1a>
 8019704:	4621      	mov	r1, r4
 8019706:	4628      	mov	r0, r5
 8019708:	f000 f81e 	bl	8019748 <__swsetup_r>
 801970c:	2800      	cmp	r0, #0
 801970e:	d0cb      	beq.n	80196a8 <__swbuf_r+0x28>
 8019710:	f04f 37ff 	mov.w	r7, #4294967295
 8019714:	e7ea      	b.n	80196ec <__swbuf_r+0x6c>
 8019716:	bf00      	nop
 8019718:	0801d530 	.word	0x0801d530
 801971c:	0801d550 	.word	0x0801d550
 8019720:	0801d510 	.word	0x0801d510

08019724 <_write_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4d07      	ldr	r5, [pc, #28]	; (8019744 <_write_r+0x20>)
 8019728:	4604      	mov	r4, r0
 801972a:	4608      	mov	r0, r1
 801972c:	4611      	mov	r1, r2
 801972e:	2200      	movs	r2, #0
 8019730:	602a      	str	r2, [r5, #0]
 8019732:	461a      	mov	r2, r3
 8019734:	f7e8 ffc5 	bl	80026c2 <_write>
 8019738:	1c43      	adds	r3, r0, #1
 801973a:	d102      	bne.n	8019742 <_write_r+0x1e>
 801973c:	682b      	ldr	r3, [r5, #0]
 801973e:	b103      	cbz	r3, 8019742 <_write_r+0x1e>
 8019740:	6023      	str	r3, [r4, #0]
 8019742:	bd38      	pop	{r3, r4, r5, pc}
 8019744:	2000dc04 	.word	0x2000dc04

08019748 <__swsetup_r>:
 8019748:	4b32      	ldr	r3, [pc, #200]	; (8019814 <__swsetup_r+0xcc>)
 801974a:	b570      	push	{r4, r5, r6, lr}
 801974c:	681d      	ldr	r5, [r3, #0]
 801974e:	4606      	mov	r6, r0
 8019750:	460c      	mov	r4, r1
 8019752:	b125      	cbz	r5, 801975e <__swsetup_r+0x16>
 8019754:	69ab      	ldr	r3, [r5, #24]
 8019756:	b913      	cbnz	r3, 801975e <__swsetup_r+0x16>
 8019758:	4628      	mov	r0, r5
 801975a:	f7ff fb9b 	bl	8018e94 <__sinit>
 801975e:	4b2e      	ldr	r3, [pc, #184]	; (8019818 <__swsetup_r+0xd0>)
 8019760:	429c      	cmp	r4, r3
 8019762:	d10f      	bne.n	8019784 <__swsetup_r+0x3c>
 8019764:	686c      	ldr	r4, [r5, #4]
 8019766:	89a3      	ldrh	r3, [r4, #12]
 8019768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801976c:	0719      	lsls	r1, r3, #28
 801976e:	d42c      	bmi.n	80197ca <__swsetup_r+0x82>
 8019770:	06dd      	lsls	r5, r3, #27
 8019772:	d411      	bmi.n	8019798 <__swsetup_r+0x50>
 8019774:	2309      	movs	r3, #9
 8019776:	6033      	str	r3, [r6, #0]
 8019778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801977c:	81a3      	strh	r3, [r4, #12]
 801977e:	f04f 30ff 	mov.w	r0, #4294967295
 8019782:	e03e      	b.n	8019802 <__swsetup_r+0xba>
 8019784:	4b25      	ldr	r3, [pc, #148]	; (801981c <__swsetup_r+0xd4>)
 8019786:	429c      	cmp	r4, r3
 8019788:	d101      	bne.n	801978e <__swsetup_r+0x46>
 801978a:	68ac      	ldr	r4, [r5, #8]
 801978c:	e7eb      	b.n	8019766 <__swsetup_r+0x1e>
 801978e:	4b24      	ldr	r3, [pc, #144]	; (8019820 <__swsetup_r+0xd8>)
 8019790:	429c      	cmp	r4, r3
 8019792:	bf08      	it	eq
 8019794:	68ec      	ldreq	r4, [r5, #12]
 8019796:	e7e6      	b.n	8019766 <__swsetup_r+0x1e>
 8019798:	0758      	lsls	r0, r3, #29
 801979a:	d512      	bpl.n	80197c2 <__swsetup_r+0x7a>
 801979c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801979e:	b141      	cbz	r1, 80197b2 <__swsetup_r+0x6a>
 80197a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197a4:	4299      	cmp	r1, r3
 80197a6:	d002      	beq.n	80197ae <__swsetup_r+0x66>
 80197a8:	4630      	mov	r0, r6
 80197aa:	f000 f9cf 	bl	8019b4c <_free_r>
 80197ae:	2300      	movs	r3, #0
 80197b0:	6363      	str	r3, [r4, #52]	; 0x34
 80197b2:	89a3      	ldrh	r3, [r4, #12]
 80197b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80197b8:	81a3      	strh	r3, [r4, #12]
 80197ba:	2300      	movs	r3, #0
 80197bc:	6063      	str	r3, [r4, #4]
 80197be:	6923      	ldr	r3, [r4, #16]
 80197c0:	6023      	str	r3, [r4, #0]
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	f043 0308 	orr.w	r3, r3, #8
 80197c8:	81a3      	strh	r3, [r4, #12]
 80197ca:	6923      	ldr	r3, [r4, #16]
 80197cc:	b94b      	cbnz	r3, 80197e2 <__swsetup_r+0x9a>
 80197ce:	89a3      	ldrh	r3, [r4, #12]
 80197d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80197d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197d8:	d003      	beq.n	80197e2 <__swsetup_r+0x9a>
 80197da:	4621      	mov	r1, r4
 80197dc:	4630      	mov	r0, r6
 80197de:	f000 f961 	bl	8019aa4 <__smakebuf_r>
 80197e2:	89a0      	ldrh	r0, [r4, #12]
 80197e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197e8:	f010 0301 	ands.w	r3, r0, #1
 80197ec:	d00a      	beq.n	8019804 <__swsetup_r+0xbc>
 80197ee:	2300      	movs	r3, #0
 80197f0:	60a3      	str	r3, [r4, #8]
 80197f2:	6963      	ldr	r3, [r4, #20]
 80197f4:	425b      	negs	r3, r3
 80197f6:	61a3      	str	r3, [r4, #24]
 80197f8:	6923      	ldr	r3, [r4, #16]
 80197fa:	b943      	cbnz	r3, 801980e <__swsetup_r+0xc6>
 80197fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019800:	d1ba      	bne.n	8019778 <__swsetup_r+0x30>
 8019802:	bd70      	pop	{r4, r5, r6, pc}
 8019804:	0781      	lsls	r1, r0, #30
 8019806:	bf58      	it	pl
 8019808:	6963      	ldrpl	r3, [r4, #20]
 801980a:	60a3      	str	r3, [r4, #8]
 801980c:	e7f4      	b.n	80197f8 <__swsetup_r+0xb0>
 801980e:	2000      	movs	r0, #0
 8019810:	e7f7      	b.n	8019802 <__swsetup_r+0xba>
 8019812:	bf00      	nop
 8019814:	2000016c 	.word	0x2000016c
 8019818:	0801d530 	.word	0x0801d530
 801981c:	0801d550 	.word	0x0801d550
 8019820:	0801d510 	.word	0x0801d510

08019824 <__assert_func>:
 8019824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019826:	4614      	mov	r4, r2
 8019828:	461a      	mov	r2, r3
 801982a:	4b09      	ldr	r3, [pc, #36]	; (8019850 <__assert_func+0x2c>)
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	4605      	mov	r5, r0
 8019830:	68d8      	ldr	r0, [r3, #12]
 8019832:	b14c      	cbz	r4, 8019848 <__assert_func+0x24>
 8019834:	4b07      	ldr	r3, [pc, #28]	; (8019854 <__assert_func+0x30>)
 8019836:	9100      	str	r1, [sp, #0]
 8019838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801983c:	4906      	ldr	r1, [pc, #24]	; (8019858 <__assert_func+0x34>)
 801983e:	462b      	mov	r3, r5
 8019840:	f000 f8e6 	bl	8019a10 <fiprintf>
 8019844:	f000 fe2a 	bl	801a49c <abort>
 8019848:	4b04      	ldr	r3, [pc, #16]	; (801985c <__assert_func+0x38>)
 801984a:	461c      	mov	r4, r3
 801984c:	e7f3      	b.n	8019836 <__assert_func+0x12>
 801984e:	bf00      	nop
 8019850:	2000016c 	.word	0x2000016c
 8019854:	0801d5e6 	.word	0x0801d5e6
 8019858:	0801d5f3 	.word	0x0801d5f3
 801985c:	0801d621 	.word	0x0801d621

08019860 <_close_r>:
 8019860:	b538      	push	{r3, r4, r5, lr}
 8019862:	4d06      	ldr	r5, [pc, #24]	; (801987c <_close_r+0x1c>)
 8019864:	2300      	movs	r3, #0
 8019866:	4604      	mov	r4, r0
 8019868:	4608      	mov	r0, r1
 801986a:	602b      	str	r3, [r5, #0]
 801986c:	f7e8 ff45 	bl	80026fa <_close>
 8019870:	1c43      	adds	r3, r0, #1
 8019872:	d102      	bne.n	801987a <_close_r+0x1a>
 8019874:	682b      	ldr	r3, [r5, #0]
 8019876:	b103      	cbz	r3, 801987a <_close_r+0x1a>
 8019878:	6023      	str	r3, [r4, #0]
 801987a:	bd38      	pop	{r3, r4, r5, pc}
 801987c:	2000dc04 	.word	0x2000dc04

08019880 <__errno>:
 8019880:	4b01      	ldr	r3, [pc, #4]	; (8019888 <__errno+0x8>)
 8019882:	6818      	ldr	r0, [r3, #0]
 8019884:	4770      	bx	lr
 8019886:	bf00      	nop
 8019888:	2000016c 	.word	0x2000016c

0801988c <__sflush_r>:
 801988c:	898a      	ldrh	r2, [r1, #12]
 801988e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019892:	4605      	mov	r5, r0
 8019894:	0710      	lsls	r0, r2, #28
 8019896:	460c      	mov	r4, r1
 8019898:	d458      	bmi.n	801994c <__sflush_r+0xc0>
 801989a:	684b      	ldr	r3, [r1, #4]
 801989c:	2b00      	cmp	r3, #0
 801989e:	dc05      	bgt.n	80198ac <__sflush_r+0x20>
 80198a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	dc02      	bgt.n	80198ac <__sflush_r+0x20>
 80198a6:	2000      	movs	r0, #0
 80198a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198ae:	2e00      	cmp	r6, #0
 80198b0:	d0f9      	beq.n	80198a6 <__sflush_r+0x1a>
 80198b2:	2300      	movs	r3, #0
 80198b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80198b8:	682f      	ldr	r7, [r5, #0]
 80198ba:	602b      	str	r3, [r5, #0]
 80198bc:	d032      	beq.n	8019924 <__sflush_r+0x98>
 80198be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80198c0:	89a3      	ldrh	r3, [r4, #12]
 80198c2:	075a      	lsls	r2, r3, #29
 80198c4:	d505      	bpl.n	80198d2 <__sflush_r+0x46>
 80198c6:	6863      	ldr	r3, [r4, #4]
 80198c8:	1ac0      	subs	r0, r0, r3
 80198ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198cc:	b10b      	cbz	r3, 80198d2 <__sflush_r+0x46>
 80198ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80198d0:	1ac0      	subs	r0, r0, r3
 80198d2:	2300      	movs	r3, #0
 80198d4:	4602      	mov	r2, r0
 80198d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198d8:	6a21      	ldr	r1, [r4, #32]
 80198da:	4628      	mov	r0, r5
 80198dc:	47b0      	blx	r6
 80198de:	1c43      	adds	r3, r0, #1
 80198e0:	89a3      	ldrh	r3, [r4, #12]
 80198e2:	d106      	bne.n	80198f2 <__sflush_r+0x66>
 80198e4:	6829      	ldr	r1, [r5, #0]
 80198e6:	291d      	cmp	r1, #29
 80198e8:	d82c      	bhi.n	8019944 <__sflush_r+0xb8>
 80198ea:	4a2a      	ldr	r2, [pc, #168]	; (8019994 <__sflush_r+0x108>)
 80198ec:	40ca      	lsrs	r2, r1
 80198ee:	07d6      	lsls	r6, r2, #31
 80198f0:	d528      	bpl.n	8019944 <__sflush_r+0xb8>
 80198f2:	2200      	movs	r2, #0
 80198f4:	6062      	str	r2, [r4, #4]
 80198f6:	04d9      	lsls	r1, r3, #19
 80198f8:	6922      	ldr	r2, [r4, #16]
 80198fa:	6022      	str	r2, [r4, #0]
 80198fc:	d504      	bpl.n	8019908 <__sflush_r+0x7c>
 80198fe:	1c42      	adds	r2, r0, #1
 8019900:	d101      	bne.n	8019906 <__sflush_r+0x7a>
 8019902:	682b      	ldr	r3, [r5, #0]
 8019904:	b903      	cbnz	r3, 8019908 <__sflush_r+0x7c>
 8019906:	6560      	str	r0, [r4, #84]	; 0x54
 8019908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801990a:	602f      	str	r7, [r5, #0]
 801990c:	2900      	cmp	r1, #0
 801990e:	d0ca      	beq.n	80198a6 <__sflush_r+0x1a>
 8019910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019914:	4299      	cmp	r1, r3
 8019916:	d002      	beq.n	801991e <__sflush_r+0x92>
 8019918:	4628      	mov	r0, r5
 801991a:	f000 f917 	bl	8019b4c <_free_r>
 801991e:	2000      	movs	r0, #0
 8019920:	6360      	str	r0, [r4, #52]	; 0x34
 8019922:	e7c1      	b.n	80198a8 <__sflush_r+0x1c>
 8019924:	6a21      	ldr	r1, [r4, #32]
 8019926:	2301      	movs	r3, #1
 8019928:	4628      	mov	r0, r5
 801992a:	47b0      	blx	r6
 801992c:	1c41      	adds	r1, r0, #1
 801992e:	d1c7      	bne.n	80198c0 <__sflush_r+0x34>
 8019930:	682b      	ldr	r3, [r5, #0]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d0c4      	beq.n	80198c0 <__sflush_r+0x34>
 8019936:	2b1d      	cmp	r3, #29
 8019938:	d001      	beq.n	801993e <__sflush_r+0xb2>
 801993a:	2b16      	cmp	r3, #22
 801993c:	d101      	bne.n	8019942 <__sflush_r+0xb6>
 801993e:	602f      	str	r7, [r5, #0]
 8019940:	e7b1      	b.n	80198a6 <__sflush_r+0x1a>
 8019942:	89a3      	ldrh	r3, [r4, #12]
 8019944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019948:	81a3      	strh	r3, [r4, #12]
 801994a:	e7ad      	b.n	80198a8 <__sflush_r+0x1c>
 801994c:	690f      	ldr	r7, [r1, #16]
 801994e:	2f00      	cmp	r7, #0
 8019950:	d0a9      	beq.n	80198a6 <__sflush_r+0x1a>
 8019952:	0793      	lsls	r3, r2, #30
 8019954:	680e      	ldr	r6, [r1, #0]
 8019956:	bf08      	it	eq
 8019958:	694b      	ldreq	r3, [r1, #20]
 801995a:	600f      	str	r7, [r1, #0]
 801995c:	bf18      	it	ne
 801995e:	2300      	movne	r3, #0
 8019960:	eba6 0807 	sub.w	r8, r6, r7
 8019964:	608b      	str	r3, [r1, #8]
 8019966:	f1b8 0f00 	cmp.w	r8, #0
 801996a:	dd9c      	ble.n	80198a6 <__sflush_r+0x1a>
 801996c:	6a21      	ldr	r1, [r4, #32]
 801996e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019970:	4643      	mov	r3, r8
 8019972:	463a      	mov	r2, r7
 8019974:	4628      	mov	r0, r5
 8019976:	47b0      	blx	r6
 8019978:	2800      	cmp	r0, #0
 801997a:	dc06      	bgt.n	801998a <__sflush_r+0xfe>
 801997c:	89a3      	ldrh	r3, [r4, #12]
 801997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019982:	81a3      	strh	r3, [r4, #12]
 8019984:	f04f 30ff 	mov.w	r0, #4294967295
 8019988:	e78e      	b.n	80198a8 <__sflush_r+0x1c>
 801998a:	4407      	add	r7, r0
 801998c:	eba8 0800 	sub.w	r8, r8, r0
 8019990:	e7e9      	b.n	8019966 <__sflush_r+0xda>
 8019992:	bf00      	nop
 8019994:	20400001 	.word	0x20400001

08019998 <_fflush_r>:
 8019998:	b538      	push	{r3, r4, r5, lr}
 801999a:	690b      	ldr	r3, [r1, #16]
 801999c:	4605      	mov	r5, r0
 801999e:	460c      	mov	r4, r1
 80199a0:	b913      	cbnz	r3, 80199a8 <_fflush_r+0x10>
 80199a2:	2500      	movs	r5, #0
 80199a4:	4628      	mov	r0, r5
 80199a6:	bd38      	pop	{r3, r4, r5, pc}
 80199a8:	b118      	cbz	r0, 80199b2 <_fflush_r+0x1a>
 80199aa:	6983      	ldr	r3, [r0, #24]
 80199ac:	b90b      	cbnz	r3, 80199b2 <_fflush_r+0x1a>
 80199ae:	f7ff fa71 	bl	8018e94 <__sinit>
 80199b2:	4b14      	ldr	r3, [pc, #80]	; (8019a04 <_fflush_r+0x6c>)
 80199b4:	429c      	cmp	r4, r3
 80199b6:	d11b      	bne.n	80199f0 <_fflush_r+0x58>
 80199b8:	686c      	ldr	r4, [r5, #4]
 80199ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d0ef      	beq.n	80199a2 <_fflush_r+0xa>
 80199c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80199c4:	07d0      	lsls	r0, r2, #31
 80199c6:	d404      	bmi.n	80199d2 <_fflush_r+0x3a>
 80199c8:	0599      	lsls	r1, r3, #22
 80199ca:	d402      	bmi.n	80199d2 <_fflush_r+0x3a>
 80199cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199ce:	f7ff fb24 	bl	801901a <__retarget_lock_acquire_recursive>
 80199d2:	4628      	mov	r0, r5
 80199d4:	4621      	mov	r1, r4
 80199d6:	f7ff ff59 	bl	801988c <__sflush_r>
 80199da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199dc:	07da      	lsls	r2, r3, #31
 80199de:	4605      	mov	r5, r0
 80199e0:	d4e0      	bmi.n	80199a4 <_fflush_r+0xc>
 80199e2:	89a3      	ldrh	r3, [r4, #12]
 80199e4:	059b      	lsls	r3, r3, #22
 80199e6:	d4dd      	bmi.n	80199a4 <_fflush_r+0xc>
 80199e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199ea:	f7ff fb17 	bl	801901c <__retarget_lock_release_recursive>
 80199ee:	e7d9      	b.n	80199a4 <_fflush_r+0xc>
 80199f0:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <_fflush_r+0x70>)
 80199f2:	429c      	cmp	r4, r3
 80199f4:	d101      	bne.n	80199fa <_fflush_r+0x62>
 80199f6:	68ac      	ldr	r4, [r5, #8]
 80199f8:	e7df      	b.n	80199ba <_fflush_r+0x22>
 80199fa:	4b04      	ldr	r3, [pc, #16]	; (8019a0c <_fflush_r+0x74>)
 80199fc:	429c      	cmp	r4, r3
 80199fe:	bf08      	it	eq
 8019a00:	68ec      	ldreq	r4, [r5, #12]
 8019a02:	e7da      	b.n	80199ba <_fflush_r+0x22>
 8019a04:	0801d530 	.word	0x0801d530
 8019a08:	0801d550 	.word	0x0801d550
 8019a0c:	0801d510 	.word	0x0801d510

08019a10 <fiprintf>:
 8019a10:	b40e      	push	{r1, r2, r3}
 8019a12:	b503      	push	{r0, r1, lr}
 8019a14:	4601      	mov	r1, r0
 8019a16:	ab03      	add	r3, sp, #12
 8019a18:	4805      	ldr	r0, [pc, #20]	; (8019a30 <fiprintf+0x20>)
 8019a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a1e:	6800      	ldr	r0, [r0, #0]
 8019a20:	9301      	str	r3, [sp, #4]
 8019a22:	f000 fa65 	bl	8019ef0 <_vfiprintf_r>
 8019a26:	b002      	add	sp, #8
 8019a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a2c:	b003      	add	sp, #12
 8019a2e:	4770      	bx	lr
 8019a30:	2000016c 	.word	0x2000016c

08019a34 <_lseek_r>:
 8019a34:	b538      	push	{r3, r4, r5, lr}
 8019a36:	4d07      	ldr	r5, [pc, #28]	; (8019a54 <_lseek_r+0x20>)
 8019a38:	4604      	mov	r4, r0
 8019a3a:	4608      	mov	r0, r1
 8019a3c:	4611      	mov	r1, r2
 8019a3e:	2200      	movs	r2, #0
 8019a40:	602a      	str	r2, [r5, #0]
 8019a42:	461a      	mov	r2, r3
 8019a44:	f7e8 fe80 	bl	8002748 <_lseek>
 8019a48:	1c43      	adds	r3, r0, #1
 8019a4a:	d102      	bne.n	8019a52 <_lseek_r+0x1e>
 8019a4c:	682b      	ldr	r3, [r5, #0]
 8019a4e:	b103      	cbz	r3, 8019a52 <_lseek_r+0x1e>
 8019a50:	6023      	str	r3, [r4, #0]
 8019a52:	bd38      	pop	{r3, r4, r5, pc}
 8019a54:	2000dc04 	.word	0x2000dc04

08019a58 <__swhatbuf_r>:
 8019a58:	b570      	push	{r4, r5, r6, lr}
 8019a5a:	460e      	mov	r6, r1
 8019a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a60:	2900      	cmp	r1, #0
 8019a62:	b096      	sub	sp, #88	; 0x58
 8019a64:	4614      	mov	r4, r2
 8019a66:	461d      	mov	r5, r3
 8019a68:	da08      	bge.n	8019a7c <__swhatbuf_r+0x24>
 8019a6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019a6e:	2200      	movs	r2, #0
 8019a70:	602a      	str	r2, [r5, #0]
 8019a72:	061a      	lsls	r2, r3, #24
 8019a74:	d410      	bmi.n	8019a98 <__swhatbuf_r+0x40>
 8019a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a7a:	e00e      	b.n	8019a9a <__swhatbuf_r+0x42>
 8019a7c:	466a      	mov	r2, sp
 8019a7e:	f000 fd15 	bl	801a4ac <_fstat_r>
 8019a82:	2800      	cmp	r0, #0
 8019a84:	dbf1      	blt.n	8019a6a <__swhatbuf_r+0x12>
 8019a86:	9a01      	ldr	r2, [sp, #4]
 8019a88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019a8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019a90:	425a      	negs	r2, r3
 8019a92:	415a      	adcs	r2, r3
 8019a94:	602a      	str	r2, [r5, #0]
 8019a96:	e7ee      	b.n	8019a76 <__swhatbuf_r+0x1e>
 8019a98:	2340      	movs	r3, #64	; 0x40
 8019a9a:	2000      	movs	r0, #0
 8019a9c:	6023      	str	r3, [r4, #0]
 8019a9e:	b016      	add	sp, #88	; 0x58
 8019aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019aa4 <__smakebuf_r>:
 8019aa4:	898b      	ldrh	r3, [r1, #12]
 8019aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019aa8:	079d      	lsls	r5, r3, #30
 8019aaa:	4606      	mov	r6, r0
 8019aac:	460c      	mov	r4, r1
 8019aae:	d507      	bpl.n	8019ac0 <__smakebuf_r+0x1c>
 8019ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ab4:	6023      	str	r3, [r4, #0]
 8019ab6:	6123      	str	r3, [r4, #16]
 8019ab8:	2301      	movs	r3, #1
 8019aba:	6163      	str	r3, [r4, #20]
 8019abc:	b002      	add	sp, #8
 8019abe:	bd70      	pop	{r4, r5, r6, pc}
 8019ac0:	ab01      	add	r3, sp, #4
 8019ac2:	466a      	mov	r2, sp
 8019ac4:	f7ff ffc8 	bl	8019a58 <__swhatbuf_r>
 8019ac8:	9900      	ldr	r1, [sp, #0]
 8019aca:	4605      	mov	r5, r0
 8019acc:	4630      	mov	r0, r6
 8019ace:	f7ff fb07 	bl	80190e0 <_malloc_r>
 8019ad2:	b948      	cbnz	r0, 8019ae8 <__smakebuf_r+0x44>
 8019ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ad8:	059a      	lsls	r2, r3, #22
 8019ada:	d4ef      	bmi.n	8019abc <__smakebuf_r+0x18>
 8019adc:	f023 0303 	bic.w	r3, r3, #3
 8019ae0:	f043 0302 	orr.w	r3, r3, #2
 8019ae4:	81a3      	strh	r3, [r4, #12]
 8019ae6:	e7e3      	b.n	8019ab0 <__smakebuf_r+0xc>
 8019ae8:	4b0d      	ldr	r3, [pc, #52]	; (8019b20 <__smakebuf_r+0x7c>)
 8019aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8019aec:	89a3      	ldrh	r3, [r4, #12]
 8019aee:	6020      	str	r0, [r4, #0]
 8019af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019af4:	81a3      	strh	r3, [r4, #12]
 8019af6:	9b00      	ldr	r3, [sp, #0]
 8019af8:	6163      	str	r3, [r4, #20]
 8019afa:	9b01      	ldr	r3, [sp, #4]
 8019afc:	6120      	str	r0, [r4, #16]
 8019afe:	b15b      	cbz	r3, 8019b18 <__smakebuf_r+0x74>
 8019b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b04:	4630      	mov	r0, r6
 8019b06:	f000 fce3 	bl	801a4d0 <_isatty_r>
 8019b0a:	b128      	cbz	r0, 8019b18 <__smakebuf_r+0x74>
 8019b0c:	89a3      	ldrh	r3, [r4, #12]
 8019b0e:	f023 0303 	bic.w	r3, r3, #3
 8019b12:	f043 0301 	orr.w	r3, r3, #1
 8019b16:	81a3      	strh	r3, [r4, #12]
 8019b18:	89a0      	ldrh	r0, [r4, #12]
 8019b1a:	4305      	orrs	r5, r0
 8019b1c:	81a5      	strh	r5, [r4, #12]
 8019b1e:	e7cd      	b.n	8019abc <__smakebuf_r+0x18>
 8019b20:	08018e2d 	.word	0x08018e2d

08019b24 <malloc>:
 8019b24:	4b02      	ldr	r3, [pc, #8]	; (8019b30 <malloc+0xc>)
 8019b26:	4601      	mov	r1, r0
 8019b28:	6818      	ldr	r0, [r3, #0]
 8019b2a:	f7ff bad9 	b.w	80190e0 <_malloc_r>
 8019b2e:	bf00      	nop
 8019b30:	2000016c 	.word	0x2000016c

08019b34 <__malloc_lock>:
 8019b34:	4801      	ldr	r0, [pc, #4]	; (8019b3c <__malloc_lock+0x8>)
 8019b36:	f7ff ba70 	b.w	801901a <__retarget_lock_acquire_recursive>
 8019b3a:	bf00      	nop
 8019b3c:	2000dbf8 	.word	0x2000dbf8

08019b40 <__malloc_unlock>:
 8019b40:	4801      	ldr	r0, [pc, #4]	; (8019b48 <__malloc_unlock+0x8>)
 8019b42:	f7ff ba6b 	b.w	801901c <__retarget_lock_release_recursive>
 8019b46:	bf00      	nop
 8019b48:	2000dbf8 	.word	0x2000dbf8

08019b4c <_free_r>:
 8019b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b4e:	2900      	cmp	r1, #0
 8019b50:	d044      	beq.n	8019bdc <_free_r+0x90>
 8019b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b56:	9001      	str	r0, [sp, #4]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8019b5e:	bfb8      	it	lt
 8019b60:	18e4      	addlt	r4, r4, r3
 8019b62:	f7ff ffe7 	bl	8019b34 <__malloc_lock>
 8019b66:	4a1e      	ldr	r2, [pc, #120]	; (8019be0 <_free_r+0x94>)
 8019b68:	9801      	ldr	r0, [sp, #4]
 8019b6a:	6813      	ldr	r3, [r2, #0]
 8019b6c:	b933      	cbnz	r3, 8019b7c <_free_r+0x30>
 8019b6e:	6063      	str	r3, [r4, #4]
 8019b70:	6014      	str	r4, [r2, #0]
 8019b72:	b003      	add	sp, #12
 8019b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b78:	f7ff bfe2 	b.w	8019b40 <__malloc_unlock>
 8019b7c:	42a3      	cmp	r3, r4
 8019b7e:	d908      	bls.n	8019b92 <_free_r+0x46>
 8019b80:	6825      	ldr	r5, [r4, #0]
 8019b82:	1961      	adds	r1, r4, r5
 8019b84:	428b      	cmp	r3, r1
 8019b86:	bf01      	itttt	eq
 8019b88:	6819      	ldreq	r1, [r3, #0]
 8019b8a:	685b      	ldreq	r3, [r3, #4]
 8019b8c:	1949      	addeq	r1, r1, r5
 8019b8e:	6021      	streq	r1, [r4, #0]
 8019b90:	e7ed      	b.n	8019b6e <_free_r+0x22>
 8019b92:	461a      	mov	r2, r3
 8019b94:	685b      	ldr	r3, [r3, #4]
 8019b96:	b10b      	cbz	r3, 8019b9c <_free_r+0x50>
 8019b98:	42a3      	cmp	r3, r4
 8019b9a:	d9fa      	bls.n	8019b92 <_free_r+0x46>
 8019b9c:	6811      	ldr	r1, [r2, #0]
 8019b9e:	1855      	adds	r5, r2, r1
 8019ba0:	42a5      	cmp	r5, r4
 8019ba2:	d10b      	bne.n	8019bbc <_free_r+0x70>
 8019ba4:	6824      	ldr	r4, [r4, #0]
 8019ba6:	4421      	add	r1, r4
 8019ba8:	1854      	adds	r4, r2, r1
 8019baa:	42a3      	cmp	r3, r4
 8019bac:	6011      	str	r1, [r2, #0]
 8019bae:	d1e0      	bne.n	8019b72 <_free_r+0x26>
 8019bb0:	681c      	ldr	r4, [r3, #0]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	6053      	str	r3, [r2, #4]
 8019bb6:	4421      	add	r1, r4
 8019bb8:	6011      	str	r1, [r2, #0]
 8019bba:	e7da      	b.n	8019b72 <_free_r+0x26>
 8019bbc:	d902      	bls.n	8019bc4 <_free_r+0x78>
 8019bbe:	230c      	movs	r3, #12
 8019bc0:	6003      	str	r3, [r0, #0]
 8019bc2:	e7d6      	b.n	8019b72 <_free_r+0x26>
 8019bc4:	6825      	ldr	r5, [r4, #0]
 8019bc6:	1961      	adds	r1, r4, r5
 8019bc8:	428b      	cmp	r3, r1
 8019bca:	bf04      	itt	eq
 8019bcc:	6819      	ldreq	r1, [r3, #0]
 8019bce:	685b      	ldreq	r3, [r3, #4]
 8019bd0:	6063      	str	r3, [r4, #4]
 8019bd2:	bf04      	itt	eq
 8019bd4:	1949      	addeq	r1, r1, r5
 8019bd6:	6021      	streq	r1, [r4, #0]
 8019bd8:	6054      	str	r4, [r2, #4]
 8019bda:	e7ca      	b.n	8019b72 <_free_r+0x26>
 8019bdc:	b003      	add	sp, #12
 8019bde:	bd30      	pop	{r4, r5, pc}
 8019be0:	2000dbfc 	.word	0x2000dbfc

08019be4 <__ssputs_r>:
 8019be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019be8:	688e      	ldr	r6, [r1, #8]
 8019bea:	429e      	cmp	r6, r3
 8019bec:	4682      	mov	sl, r0
 8019bee:	460c      	mov	r4, r1
 8019bf0:	4690      	mov	r8, r2
 8019bf2:	461f      	mov	r7, r3
 8019bf4:	d838      	bhi.n	8019c68 <__ssputs_r+0x84>
 8019bf6:	898a      	ldrh	r2, [r1, #12]
 8019bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019bfc:	d032      	beq.n	8019c64 <__ssputs_r+0x80>
 8019bfe:	6825      	ldr	r5, [r4, #0]
 8019c00:	6909      	ldr	r1, [r1, #16]
 8019c02:	eba5 0901 	sub.w	r9, r5, r1
 8019c06:	6965      	ldr	r5, [r4, #20]
 8019c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c10:	3301      	adds	r3, #1
 8019c12:	444b      	add	r3, r9
 8019c14:	106d      	asrs	r5, r5, #1
 8019c16:	429d      	cmp	r5, r3
 8019c18:	bf38      	it	cc
 8019c1a:	461d      	movcc	r5, r3
 8019c1c:	0553      	lsls	r3, r2, #21
 8019c1e:	d531      	bpl.n	8019c84 <__ssputs_r+0xa0>
 8019c20:	4629      	mov	r1, r5
 8019c22:	f7ff fa5d 	bl	80190e0 <_malloc_r>
 8019c26:	4606      	mov	r6, r0
 8019c28:	b950      	cbnz	r0, 8019c40 <__ssputs_r+0x5c>
 8019c2a:	230c      	movs	r3, #12
 8019c2c:	f8ca 3000 	str.w	r3, [sl]
 8019c30:	89a3      	ldrh	r3, [r4, #12]
 8019c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c36:	81a3      	strh	r3, [r4, #12]
 8019c38:	f04f 30ff 	mov.w	r0, #4294967295
 8019c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c40:	6921      	ldr	r1, [r4, #16]
 8019c42:	464a      	mov	r2, r9
 8019c44:	f7ff f9fb 	bl	801903e <memcpy>
 8019c48:	89a3      	ldrh	r3, [r4, #12]
 8019c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c52:	81a3      	strh	r3, [r4, #12]
 8019c54:	6126      	str	r6, [r4, #16]
 8019c56:	6165      	str	r5, [r4, #20]
 8019c58:	444e      	add	r6, r9
 8019c5a:	eba5 0509 	sub.w	r5, r5, r9
 8019c5e:	6026      	str	r6, [r4, #0]
 8019c60:	60a5      	str	r5, [r4, #8]
 8019c62:	463e      	mov	r6, r7
 8019c64:	42be      	cmp	r6, r7
 8019c66:	d900      	bls.n	8019c6a <__ssputs_r+0x86>
 8019c68:	463e      	mov	r6, r7
 8019c6a:	6820      	ldr	r0, [r4, #0]
 8019c6c:	4632      	mov	r2, r6
 8019c6e:	4641      	mov	r1, r8
 8019c70:	f7ff f9f3 	bl	801905a <memmove>
 8019c74:	68a3      	ldr	r3, [r4, #8]
 8019c76:	1b9b      	subs	r3, r3, r6
 8019c78:	60a3      	str	r3, [r4, #8]
 8019c7a:	6823      	ldr	r3, [r4, #0]
 8019c7c:	4433      	add	r3, r6
 8019c7e:	6023      	str	r3, [r4, #0]
 8019c80:	2000      	movs	r0, #0
 8019c82:	e7db      	b.n	8019c3c <__ssputs_r+0x58>
 8019c84:	462a      	mov	r2, r5
 8019c86:	f000 fc33 	bl	801a4f0 <_realloc_r>
 8019c8a:	4606      	mov	r6, r0
 8019c8c:	2800      	cmp	r0, #0
 8019c8e:	d1e1      	bne.n	8019c54 <__ssputs_r+0x70>
 8019c90:	6921      	ldr	r1, [r4, #16]
 8019c92:	4650      	mov	r0, sl
 8019c94:	f7ff ff5a 	bl	8019b4c <_free_r>
 8019c98:	e7c7      	b.n	8019c2a <__ssputs_r+0x46>
	...

08019c9c <_svfiprintf_r>:
 8019c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca0:	4698      	mov	r8, r3
 8019ca2:	898b      	ldrh	r3, [r1, #12]
 8019ca4:	061b      	lsls	r3, r3, #24
 8019ca6:	b09d      	sub	sp, #116	; 0x74
 8019ca8:	4607      	mov	r7, r0
 8019caa:	460d      	mov	r5, r1
 8019cac:	4614      	mov	r4, r2
 8019cae:	d50e      	bpl.n	8019cce <_svfiprintf_r+0x32>
 8019cb0:	690b      	ldr	r3, [r1, #16]
 8019cb2:	b963      	cbnz	r3, 8019cce <_svfiprintf_r+0x32>
 8019cb4:	2140      	movs	r1, #64	; 0x40
 8019cb6:	f7ff fa13 	bl	80190e0 <_malloc_r>
 8019cba:	6028      	str	r0, [r5, #0]
 8019cbc:	6128      	str	r0, [r5, #16]
 8019cbe:	b920      	cbnz	r0, 8019cca <_svfiprintf_r+0x2e>
 8019cc0:	230c      	movs	r3, #12
 8019cc2:	603b      	str	r3, [r7, #0]
 8019cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc8:	e0d1      	b.n	8019e6e <_svfiprintf_r+0x1d2>
 8019cca:	2340      	movs	r3, #64	; 0x40
 8019ccc:	616b      	str	r3, [r5, #20]
 8019cce:	2300      	movs	r3, #0
 8019cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8019cd2:	2320      	movs	r3, #32
 8019cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8019cdc:	2330      	movs	r3, #48	; 0x30
 8019cde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019e88 <_svfiprintf_r+0x1ec>
 8019ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ce6:	f04f 0901 	mov.w	r9, #1
 8019cea:	4623      	mov	r3, r4
 8019cec:	469a      	mov	sl, r3
 8019cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cf2:	b10a      	cbz	r2, 8019cf8 <_svfiprintf_r+0x5c>
 8019cf4:	2a25      	cmp	r2, #37	; 0x25
 8019cf6:	d1f9      	bne.n	8019cec <_svfiprintf_r+0x50>
 8019cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8019cfc:	d00b      	beq.n	8019d16 <_svfiprintf_r+0x7a>
 8019cfe:	465b      	mov	r3, fp
 8019d00:	4622      	mov	r2, r4
 8019d02:	4629      	mov	r1, r5
 8019d04:	4638      	mov	r0, r7
 8019d06:	f7ff ff6d 	bl	8019be4 <__ssputs_r>
 8019d0a:	3001      	adds	r0, #1
 8019d0c:	f000 80aa 	beq.w	8019e64 <_svfiprintf_r+0x1c8>
 8019d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d12:	445a      	add	r2, fp
 8019d14:	9209      	str	r2, [sp, #36]	; 0x24
 8019d16:	f89a 3000 	ldrb.w	r3, [sl]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	f000 80a2 	beq.w	8019e64 <_svfiprintf_r+0x1c8>
 8019d20:	2300      	movs	r3, #0
 8019d22:	f04f 32ff 	mov.w	r2, #4294967295
 8019d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d2a:	f10a 0a01 	add.w	sl, sl, #1
 8019d2e:	9304      	str	r3, [sp, #16]
 8019d30:	9307      	str	r3, [sp, #28]
 8019d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d36:	931a      	str	r3, [sp, #104]	; 0x68
 8019d38:	4654      	mov	r4, sl
 8019d3a:	2205      	movs	r2, #5
 8019d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d40:	4851      	ldr	r0, [pc, #324]	; (8019e88 <_svfiprintf_r+0x1ec>)
 8019d42:	f7e6 fa5d 	bl	8000200 <memchr>
 8019d46:	9a04      	ldr	r2, [sp, #16]
 8019d48:	b9d8      	cbnz	r0, 8019d82 <_svfiprintf_r+0xe6>
 8019d4a:	06d0      	lsls	r0, r2, #27
 8019d4c:	bf44      	itt	mi
 8019d4e:	2320      	movmi	r3, #32
 8019d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d54:	0711      	lsls	r1, r2, #28
 8019d56:	bf44      	itt	mi
 8019d58:	232b      	movmi	r3, #43	; 0x2b
 8019d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8019d62:	2b2a      	cmp	r3, #42	; 0x2a
 8019d64:	d015      	beq.n	8019d92 <_svfiprintf_r+0xf6>
 8019d66:	9a07      	ldr	r2, [sp, #28]
 8019d68:	4654      	mov	r4, sl
 8019d6a:	2000      	movs	r0, #0
 8019d6c:	f04f 0c0a 	mov.w	ip, #10
 8019d70:	4621      	mov	r1, r4
 8019d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d76:	3b30      	subs	r3, #48	; 0x30
 8019d78:	2b09      	cmp	r3, #9
 8019d7a:	d94e      	bls.n	8019e1a <_svfiprintf_r+0x17e>
 8019d7c:	b1b0      	cbz	r0, 8019dac <_svfiprintf_r+0x110>
 8019d7e:	9207      	str	r2, [sp, #28]
 8019d80:	e014      	b.n	8019dac <_svfiprintf_r+0x110>
 8019d82:	eba0 0308 	sub.w	r3, r0, r8
 8019d86:	fa09 f303 	lsl.w	r3, r9, r3
 8019d8a:	4313      	orrs	r3, r2
 8019d8c:	9304      	str	r3, [sp, #16]
 8019d8e:	46a2      	mov	sl, r4
 8019d90:	e7d2      	b.n	8019d38 <_svfiprintf_r+0x9c>
 8019d92:	9b03      	ldr	r3, [sp, #12]
 8019d94:	1d19      	adds	r1, r3, #4
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	9103      	str	r1, [sp, #12]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	bfbb      	ittet	lt
 8019d9e:	425b      	neglt	r3, r3
 8019da0:	f042 0202 	orrlt.w	r2, r2, #2
 8019da4:	9307      	strge	r3, [sp, #28]
 8019da6:	9307      	strlt	r3, [sp, #28]
 8019da8:	bfb8      	it	lt
 8019daa:	9204      	strlt	r2, [sp, #16]
 8019dac:	7823      	ldrb	r3, [r4, #0]
 8019dae:	2b2e      	cmp	r3, #46	; 0x2e
 8019db0:	d10c      	bne.n	8019dcc <_svfiprintf_r+0x130>
 8019db2:	7863      	ldrb	r3, [r4, #1]
 8019db4:	2b2a      	cmp	r3, #42	; 0x2a
 8019db6:	d135      	bne.n	8019e24 <_svfiprintf_r+0x188>
 8019db8:	9b03      	ldr	r3, [sp, #12]
 8019dba:	1d1a      	adds	r2, r3, #4
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	9203      	str	r2, [sp, #12]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	bfb8      	it	lt
 8019dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8019dc8:	3402      	adds	r4, #2
 8019dca:	9305      	str	r3, [sp, #20]
 8019dcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019e98 <_svfiprintf_r+0x1fc>
 8019dd0:	7821      	ldrb	r1, [r4, #0]
 8019dd2:	2203      	movs	r2, #3
 8019dd4:	4650      	mov	r0, sl
 8019dd6:	f7e6 fa13 	bl	8000200 <memchr>
 8019dda:	b140      	cbz	r0, 8019dee <_svfiprintf_r+0x152>
 8019ddc:	2340      	movs	r3, #64	; 0x40
 8019dde:	eba0 000a 	sub.w	r0, r0, sl
 8019de2:	fa03 f000 	lsl.w	r0, r3, r0
 8019de6:	9b04      	ldr	r3, [sp, #16]
 8019de8:	4303      	orrs	r3, r0
 8019dea:	3401      	adds	r4, #1
 8019dec:	9304      	str	r3, [sp, #16]
 8019dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019df2:	4826      	ldr	r0, [pc, #152]	; (8019e8c <_svfiprintf_r+0x1f0>)
 8019df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019df8:	2206      	movs	r2, #6
 8019dfa:	f7e6 fa01 	bl	8000200 <memchr>
 8019dfe:	2800      	cmp	r0, #0
 8019e00:	d038      	beq.n	8019e74 <_svfiprintf_r+0x1d8>
 8019e02:	4b23      	ldr	r3, [pc, #140]	; (8019e90 <_svfiprintf_r+0x1f4>)
 8019e04:	bb1b      	cbnz	r3, 8019e4e <_svfiprintf_r+0x1b2>
 8019e06:	9b03      	ldr	r3, [sp, #12]
 8019e08:	3307      	adds	r3, #7
 8019e0a:	f023 0307 	bic.w	r3, r3, #7
 8019e0e:	3308      	adds	r3, #8
 8019e10:	9303      	str	r3, [sp, #12]
 8019e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e14:	4433      	add	r3, r6
 8019e16:	9309      	str	r3, [sp, #36]	; 0x24
 8019e18:	e767      	b.n	8019cea <_svfiprintf_r+0x4e>
 8019e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e1e:	460c      	mov	r4, r1
 8019e20:	2001      	movs	r0, #1
 8019e22:	e7a5      	b.n	8019d70 <_svfiprintf_r+0xd4>
 8019e24:	2300      	movs	r3, #0
 8019e26:	3401      	adds	r4, #1
 8019e28:	9305      	str	r3, [sp, #20]
 8019e2a:	4619      	mov	r1, r3
 8019e2c:	f04f 0c0a 	mov.w	ip, #10
 8019e30:	4620      	mov	r0, r4
 8019e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e36:	3a30      	subs	r2, #48	; 0x30
 8019e38:	2a09      	cmp	r2, #9
 8019e3a:	d903      	bls.n	8019e44 <_svfiprintf_r+0x1a8>
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d0c5      	beq.n	8019dcc <_svfiprintf_r+0x130>
 8019e40:	9105      	str	r1, [sp, #20]
 8019e42:	e7c3      	b.n	8019dcc <_svfiprintf_r+0x130>
 8019e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e48:	4604      	mov	r4, r0
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	e7f0      	b.n	8019e30 <_svfiprintf_r+0x194>
 8019e4e:	ab03      	add	r3, sp, #12
 8019e50:	9300      	str	r3, [sp, #0]
 8019e52:	462a      	mov	r2, r5
 8019e54:	4b0f      	ldr	r3, [pc, #60]	; (8019e94 <_svfiprintf_r+0x1f8>)
 8019e56:	a904      	add	r1, sp, #16
 8019e58:	4638      	mov	r0, r7
 8019e5a:	f3af 8000 	nop.w
 8019e5e:	1c42      	adds	r2, r0, #1
 8019e60:	4606      	mov	r6, r0
 8019e62:	d1d6      	bne.n	8019e12 <_svfiprintf_r+0x176>
 8019e64:	89ab      	ldrh	r3, [r5, #12]
 8019e66:	065b      	lsls	r3, r3, #25
 8019e68:	f53f af2c 	bmi.w	8019cc4 <_svfiprintf_r+0x28>
 8019e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e6e:	b01d      	add	sp, #116	; 0x74
 8019e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e74:	ab03      	add	r3, sp, #12
 8019e76:	9300      	str	r3, [sp, #0]
 8019e78:	462a      	mov	r2, r5
 8019e7a:	4b06      	ldr	r3, [pc, #24]	; (8019e94 <_svfiprintf_r+0x1f8>)
 8019e7c:	a904      	add	r1, sp, #16
 8019e7e:	4638      	mov	r0, r7
 8019e80:	f000 f9d4 	bl	801a22c <_printf_i>
 8019e84:	e7eb      	b.n	8019e5e <_svfiprintf_r+0x1c2>
 8019e86:	bf00      	nop
 8019e88:	0801d622 	.word	0x0801d622
 8019e8c:	0801d62c 	.word	0x0801d62c
 8019e90:	00000000 	.word	0x00000000
 8019e94:	08019be5 	.word	0x08019be5
 8019e98:	0801d628 	.word	0x0801d628

08019e9c <__sfputc_r>:
 8019e9c:	6893      	ldr	r3, [r2, #8]
 8019e9e:	3b01      	subs	r3, #1
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	b410      	push	{r4}
 8019ea4:	6093      	str	r3, [r2, #8]
 8019ea6:	da08      	bge.n	8019eba <__sfputc_r+0x1e>
 8019ea8:	6994      	ldr	r4, [r2, #24]
 8019eaa:	42a3      	cmp	r3, r4
 8019eac:	db01      	blt.n	8019eb2 <__sfputc_r+0x16>
 8019eae:	290a      	cmp	r1, #10
 8019eb0:	d103      	bne.n	8019eba <__sfputc_r+0x1e>
 8019eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019eb6:	f7ff bbe3 	b.w	8019680 <__swbuf_r>
 8019eba:	6813      	ldr	r3, [r2, #0]
 8019ebc:	1c58      	adds	r0, r3, #1
 8019ebe:	6010      	str	r0, [r2, #0]
 8019ec0:	7019      	strb	r1, [r3, #0]
 8019ec2:	4608      	mov	r0, r1
 8019ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ec8:	4770      	bx	lr

08019eca <__sfputs_r>:
 8019eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ecc:	4606      	mov	r6, r0
 8019ece:	460f      	mov	r7, r1
 8019ed0:	4614      	mov	r4, r2
 8019ed2:	18d5      	adds	r5, r2, r3
 8019ed4:	42ac      	cmp	r4, r5
 8019ed6:	d101      	bne.n	8019edc <__sfputs_r+0x12>
 8019ed8:	2000      	movs	r0, #0
 8019eda:	e007      	b.n	8019eec <__sfputs_r+0x22>
 8019edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ee0:	463a      	mov	r2, r7
 8019ee2:	4630      	mov	r0, r6
 8019ee4:	f7ff ffda 	bl	8019e9c <__sfputc_r>
 8019ee8:	1c43      	adds	r3, r0, #1
 8019eea:	d1f3      	bne.n	8019ed4 <__sfputs_r+0xa>
 8019eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ef0 <_vfiprintf_r>:
 8019ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef4:	460d      	mov	r5, r1
 8019ef6:	b09d      	sub	sp, #116	; 0x74
 8019ef8:	4614      	mov	r4, r2
 8019efa:	4698      	mov	r8, r3
 8019efc:	4606      	mov	r6, r0
 8019efe:	b118      	cbz	r0, 8019f08 <_vfiprintf_r+0x18>
 8019f00:	6983      	ldr	r3, [r0, #24]
 8019f02:	b90b      	cbnz	r3, 8019f08 <_vfiprintf_r+0x18>
 8019f04:	f7fe ffc6 	bl	8018e94 <__sinit>
 8019f08:	4b89      	ldr	r3, [pc, #548]	; (801a130 <_vfiprintf_r+0x240>)
 8019f0a:	429d      	cmp	r5, r3
 8019f0c:	d11b      	bne.n	8019f46 <_vfiprintf_r+0x56>
 8019f0e:	6875      	ldr	r5, [r6, #4]
 8019f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f12:	07d9      	lsls	r1, r3, #31
 8019f14:	d405      	bmi.n	8019f22 <_vfiprintf_r+0x32>
 8019f16:	89ab      	ldrh	r3, [r5, #12]
 8019f18:	059a      	lsls	r2, r3, #22
 8019f1a:	d402      	bmi.n	8019f22 <_vfiprintf_r+0x32>
 8019f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f1e:	f7ff f87c 	bl	801901a <__retarget_lock_acquire_recursive>
 8019f22:	89ab      	ldrh	r3, [r5, #12]
 8019f24:	071b      	lsls	r3, r3, #28
 8019f26:	d501      	bpl.n	8019f2c <_vfiprintf_r+0x3c>
 8019f28:	692b      	ldr	r3, [r5, #16]
 8019f2a:	b9eb      	cbnz	r3, 8019f68 <_vfiprintf_r+0x78>
 8019f2c:	4629      	mov	r1, r5
 8019f2e:	4630      	mov	r0, r6
 8019f30:	f7ff fc0a 	bl	8019748 <__swsetup_r>
 8019f34:	b1c0      	cbz	r0, 8019f68 <_vfiprintf_r+0x78>
 8019f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f38:	07dc      	lsls	r4, r3, #31
 8019f3a:	d50e      	bpl.n	8019f5a <_vfiprintf_r+0x6a>
 8019f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f40:	b01d      	add	sp, #116	; 0x74
 8019f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f46:	4b7b      	ldr	r3, [pc, #492]	; (801a134 <_vfiprintf_r+0x244>)
 8019f48:	429d      	cmp	r5, r3
 8019f4a:	d101      	bne.n	8019f50 <_vfiprintf_r+0x60>
 8019f4c:	68b5      	ldr	r5, [r6, #8]
 8019f4e:	e7df      	b.n	8019f10 <_vfiprintf_r+0x20>
 8019f50:	4b79      	ldr	r3, [pc, #484]	; (801a138 <_vfiprintf_r+0x248>)
 8019f52:	429d      	cmp	r5, r3
 8019f54:	bf08      	it	eq
 8019f56:	68f5      	ldreq	r5, [r6, #12]
 8019f58:	e7da      	b.n	8019f10 <_vfiprintf_r+0x20>
 8019f5a:	89ab      	ldrh	r3, [r5, #12]
 8019f5c:	0598      	lsls	r0, r3, #22
 8019f5e:	d4ed      	bmi.n	8019f3c <_vfiprintf_r+0x4c>
 8019f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f62:	f7ff f85b 	bl	801901c <__retarget_lock_release_recursive>
 8019f66:	e7e9      	b.n	8019f3c <_vfiprintf_r+0x4c>
 8019f68:	2300      	movs	r3, #0
 8019f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f6c:	2320      	movs	r3, #32
 8019f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f76:	2330      	movs	r3, #48	; 0x30
 8019f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a13c <_vfiprintf_r+0x24c>
 8019f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f80:	f04f 0901 	mov.w	r9, #1
 8019f84:	4623      	mov	r3, r4
 8019f86:	469a      	mov	sl, r3
 8019f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f8c:	b10a      	cbz	r2, 8019f92 <_vfiprintf_r+0xa2>
 8019f8e:	2a25      	cmp	r2, #37	; 0x25
 8019f90:	d1f9      	bne.n	8019f86 <_vfiprintf_r+0x96>
 8019f92:	ebba 0b04 	subs.w	fp, sl, r4
 8019f96:	d00b      	beq.n	8019fb0 <_vfiprintf_r+0xc0>
 8019f98:	465b      	mov	r3, fp
 8019f9a:	4622      	mov	r2, r4
 8019f9c:	4629      	mov	r1, r5
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f7ff ff93 	bl	8019eca <__sfputs_r>
 8019fa4:	3001      	adds	r0, #1
 8019fa6:	f000 80aa 	beq.w	801a0fe <_vfiprintf_r+0x20e>
 8019faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019fac:	445a      	add	r2, fp
 8019fae:	9209      	str	r2, [sp, #36]	; 0x24
 8019fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	f000 80a2 	beq.w	801a0fe <_vfiprintf_r+0x20e>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8019fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019fc4:	f10a 0a01 	add.w	sl, sl, #1
 8019fc8:	9304      	str	r3, [sp, #16]
 8019fca:	9307      	str	r3, [sp, #28]
 8019fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8019fd2:	4654      	mov	r4, sl
 8019fd4:	2205      	movs	r2, #5
 8019fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fda:	4858      	ldr	r0, [pc, #352]	; (801a13c <_vfiprintf_r+0x24c>)
 8019fdc:	f7e6 f910 	bl	8000200 <memchr>
 8019fe0:	9a04      	ldr	r2, [sp, #16]
 8019fe2:	b9d8      	cbnz	r0, 801a01c <_vfiprintf_r+0x12c>
 8019fe4:	06d1      	lsls	r1, r2, #27
 8019fe6:	bf44      	itt	mi
 8019fe8:	2320      	movmi	r3, #32
 8019fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fee:	0713      	lsls	r3, r2, #28
 8019ff0:	bf44      	itt	mi
 8019ff2:	232b      	movmi	r3, #43	; 0x2b
 8019ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8019ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8019ffe:	d015      	beq.n	801a02c <_vfiprintf_r+0x13c>
 801a000:	9a07      	ldr	r2, [sp, #28]
 801a002:	4654      	mov	r4, sl
 801a004:	2000      	movs	r0, #0
 801a006:	f04f 0c0a 	mov.w	ip, #10
 801a00a:	4621      	mov	r1, r4
 801a00c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a010:	3b30      	subs	r3, #48	; 0x30
 801a012:	2b09      	cmp	r3, #9
 801a014:	d94e      	bls.n	801a0b4 <_vfiprintf_r+0x1c4>
 801a016:	b1b0      	cbz	r0, 801a046 <_vfiprintf_r+0x156>
 801a018:	9207      	str	r2, [sp, #28]
 801a01a:	e014      	b.n	801a046 <_vfiprintf_r+0x156>
 801a01c:	eba0 0308 	sub.w	r3, r0, r8
 801a020:	fa09 f303 	lsl.w	r3, r9, r3
 801a024:	4313      	orrs	r3, r2
 801a026:	9304      	str	r3, [sp, #16]
 801a028:	46a2      	mov	sl, r4
 801a02a:	e7d2      	b.n	8019fd2 <_vfiprintf_r+0xe2>
 801a02c:	9b03      	ldr	r3, [sp, #12]
 801a02e:	1d19      	adds	r1, r3, #4
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	9103      	str	r1, [sp, #12]
 801a034:	2b00      	cmp	r3, #0
 801a036:	bfbb      	ittet	lt
 801a038:	425b      	neglt	r3, r3
 801a03a:	f042 0202 	orrlt.w	r2, r2, #2
 801a03e:	9307      	strge	r3, [sp, #28]
 801a040:	9307      	strlt	r3, [sp, #28]
 801a042:	bfb8      	it	lt
 801a044:	9204      	strlt	r2, [sp, #16]
 801a046:	7823      	ldrb	r3, [r4, #0]
 801a048:	2b2e      	cmp	r3, #46	; 0x2e
 801a04a:	d10c      	bne.n	801a066 <_vfiprintf_r+0x176>
 801a04c:	7863      	ldrb	r3, [r4, #1]
 801a04e:	2b2a      	cmp	r3, #42	; 0x2a
 801a050:	d135      	bne.n	801a0be <_vfiprintf_r+0x1ce>
 801a052:	9b03      	ldr	r3, [sp, #12]
 801a054:	1d1a      	adds	r2, r3, #4
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	9203      	str	r2, [sp, #12]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	bfb8      	it	lt
 801a05e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a062:	3402      	adds	r4, #2
 801a064:	9305      	str	r3, [sp, #20]
 801a066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a14c <_vfiprintf_r+0x25c>
 801a06a:	7821      	ldrb	r1, [r4, #0]
 801a06c:	2203      	movs	r2, #3
 801a06e:	4650      	mov	r0, sl
 801a070:	f7e6 f8c6 	bl	8000200 <memchr>
 801a074:	b140      	cbz	r0, 801a088 <_vfiprintf_r+0x198>
 801a076:	2340      	movs	r3, #64	; 0x40
 801a078:	eba0 000a 	sub.w	r0, r0, sl
 801a07c:	fa03 f000 	lsl.w	r0, r3, r0
 801a080:	9b04      	ldr	r3, [sp, #16]
 801a082:	4303      	orrs	r3, r0
 801a084:	3401      	adds	r4, #1
 801a086:	9304      	str	r3, [sp, #16]
 801a088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a08c:	482c      	ldr	r0, [pc, #176]	; (801a140 <_vfiprintf_r+0x250>)
 801a08e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a092:	2206      	movs	r2, #6
 801a094:	f7e6 f8b4 	bl	8000200 <memchr>
 801a098:	2800      	cmp	r0, #0
 801a09a:	d03f      	beq.n	801a11c <_vfiprintf_r+0x22c>
 801a09c:	4b29      	ldr	r3, [pc, #164]	; (801a144 <_vfiprintf_r+0x254>)
 801a09e:	bb1b      	cbnz	r3, 801a0e8 <_vfiprintf_r+0x1f8>
 801a0a0:	9b03      	ldr	r3, [sp, #12]
 801a0a2:	3307      	adds	r3, #7
 801a0a4:	f023 0307 	bic.w	r3, r3, #7
 801a0a8:	3308      	adds	r3, #8
 801a0aa:	9303      	str	r3, [sp, #12]
 801a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0ae:	443b      	add	r3, r7
 801a0b0:	9309      	str	r3, [sp, #36]	; 0x24
 801a0b2:	e767      	b.n	8019f84 <_vfiprintf_r+0x94>
 801a0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a0b8:	460c      	mov	r4, r1
 801a0ba:	2001      	movs	r0, #1
 801a0bc:	e7a5      	b.n	801a00a <_vfiprintf_r+0x11a>
 801a0be:	2300      	movs	r3, #0
 801a0c0:	3401      	adds	r4, #1
 801a0c2:	9305      	str	r3, [sp, #20]
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	f04f 0c0a 	mov.w	ip, #10
 801a0ca:	4620      	mov	r0, r4
 801a0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0d0:	3a30      	subs	r2, #48	; 0x30
 801a0d2:	2a09      	cmp	r2, #9
 801a0d4:	d903      	bls.n	801a0de <_vfiprintf_r+0x1ee>
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d0c5      	beq.n	801a066 <_vfiprintf_r+0x176>
 801a0da:	9105      	str	r1, [sp, #20]
 801a0dc:	e7c3      	b.n	801a066 <_vfiprintf_r+0x176>
 801a0de:	fb0c 2101 	mla	r1, ip, r1, r2
 801a0e2:	4604      	mov	r4, r0
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	e7f0      	b.n	801a0ca <_vfiprintf_r+0x1da>
 801a0e8:	ab03      	add	r3, sp, #12
 801a0ea:	9300      	str	r3, [sp, #0]
 801a0ec:	462a      	mov	r2, r5
 801a0ee:	4b16      	ldr	r3, [pc, #88]	; (801a148 <_vfiprintf_r+0x258>)
 801a0f0:	a904      	add	r1, sp, #16
 801a0f2:	4630      	mov	r0, r6
 801a0f4:	f3af 8000 	nop.w
 801a0f8:	4607      	mov	r7, r0
 801a0fa:	1c78      	adds	r0, r7, #1
 801a0fc:	d1d6      	bne.n	801a0ac <_vfiprintf_r+0x1bc>
 801a0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a100:	07d9      	lsls	r1, r3, #31
 801a102:	d405      	bmi.n	801a110 <_vfiprintf_r+0x220>
 801a104:	89ab      	ldrh	r3, [r5, #12]
 801a106:	059a      	lsls	r2, r3, #22
 801a108:	d402      	bmi.n	801a110 <_vfiprintf_r+0x220>
 801a10a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a10c:	f7fe ff86 	bl	801901c <__retarget_lock_release_recursive>
 801a110:	89ab      	ldrh	r3, [r5, #12]
 801a112:	065b      	lsls	r3, r3, #25
 801a114:	f53f af12 	bmi.w	8019f3c <_vfiprintf_r+0x4c>
 801a118:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a11a:	e711      	b.n	8019f40 <_vfiprintf_r+0x50>
 801a11c:	ab03      	add	r3, sp, #12
 801a11e:	9300      	str	r3, [sp, #0]
 801a120:	462a      	mov	r2, r5
 801a122:	4b09      	ldr	r3, [pc, #36]	; (801a148 <_vfiprintf_r+0x258>)
 801a124:	a904      	add	r1, sp, #16
 801a126:	4630      	mov	r0, r6
 801a128:	f000 f880 	bl	801a22c <_printf_i>
 801a12c:	e7e4      	b.n	801a0f8 <_vfiprintf_r+0x208>
 801a12e:	bf00      	nop
 801a130:	0801d530 	.word	0x0801d530
 801a134:	0801d550 	.word	0x0801d550
 801a138:	0801d510 	.word	0x0801d510
 801a13c:	0801d622 	.word	0x0801d622
 801a140:	0801d62c 	.word	0x0801d62c
 801a144:	00000000 	.word	0x00000000
 801a148:	08019ecb 	.word	0x08019ecb
 801a14c:	0801d628 	.word	0x0801d628

0801a150 <_printf_common>:
 801a150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a154:	4616      	mov	r6, r2
 801a156:	4699      	mov	r9, r3
 801a158:	688a      	ldr	r2, [r1, #8]
 801a15a:	690b      	ldr	r3, [r1, #16]
 801a15c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a160:	4293      	cmp	r3, r2
 801a162:	bfb8      	it	lt
 801a164:	4613      	movlt	r3, r2
 801a166:	6033      	str	r3, [r6, #0]
 801a168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a16c:	4607      	mov	r7, r0
 801a16e:	460c      	mov	r4, r1
 801a170:	b10a      	cbz	r2, 801a176 <_printf_common+0x26>
 801a172:	3301      	adds	r3, #1
 801a174:	6033      	str	r3, [r6, #0]
 801a176:	6823      	ldr	r3, [r4, #0]
 801a178:	0699      	lsls	r1, r3, #26
 801a17a:	bf42      	ittt	mi
 801a17c:	6833      	ldrmi	r3, [r6, #0]
 801a17e:	3302      	addmi	r3, #2
 801a180:	6033      	strmi	r3, [r6, #0]
 801a182:	6825      	ldr	r5, [r4, #0]
 801a184:	f015 0506 	ands.w	r5, r5, #6
 801a188:	d106      	bne.n	801a198 <_printf_common+0x48>
 801a18a:	f104 0a19 	add.w	sl, r4, #25
 801a18e:	68e3      	ldr	r3, [r4, #12]
 801a190:	6832      	ldr	r2, [r6, #0]
 801a192:	1a9b      	subs	r3, r3, r2
 801a194:	42ab      	cmp	r3, r5
 801a196:	dc26      	bgt.n	801a1e6 <_printf_common+0x96>
 801a198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a19c:	1e13      	subs	r3, r2, #0
 801a19e:	6822      	ldr	r2, [r4, #0]
 801a1a0:	bf18      	it	ne
 801a1a2:	2301      	movne	r3, #1
 801a1a4:	0692      	lsls	r2, r2, #26
 801a1a6:	d42b      	bmi.n	801a200 <_printf_common+0xb0>
 801a1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a1ac:	4649      	mov	r1, r9
 801a1ae:	4638      	mov	r0, r7
 801a1b0:	47c0      	blx	r8
 801a1b2:	3001      	adds	r0, #1
 801a1b4:	d01e      	beq.n	801a1f4 <_printf_common+0xa4>
 801a1b6:	6823      	ldr	r3, [r4, #0]
 801a1b8:	68e5      	ldr	r5, [r4, #12]
 801a1ba:	6832      	ldr	r2, [r6, #0]
 801a1bc:	f003 0306 	and.w	r3, r3, #6
 801a1c0:	2b04      	cmp	r3, #4
 801a1c2:	bf08      	it	eq
 801a1c4:	1aad      	subeq	r5, r5, r2
 801a1c6:	68a3      	ldr	r3, [r4, #8]
 801a1c8:	6922      	ldr	r2, [r4, #16]
 801a1ca:	bf0c      	ite	eq
 801a1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a1d0:	2500      	movne	r5, #0
 801a1d2:	4293      	cmp	r3, r2
 801a1d4:	bfc4      	itt	gt
 801a1d6:	1a9b      	subgt	r3, r3, r2
 801a1d8:	18ed      	addgt	r5, r5, r3
 801a1da:	2600      	movs	r6, #0
 801a1dc:	341a      	adds	r4, #26
 801a1de:	42b5      	cmp	r5, r6
 801a1e0:	d11a      	bne.n	801a218 <_printf_common+0xc8>
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	e008      	b.n	801a1f8 <_printf_common+0xa8>
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	4652      	mov	r2, sl
 801a1ea:	4649      	mov	r1, r9
 801a1ec:	4638      	mov	r0, r7
 801a1ee:	47c0      	blx	r8
 801a1f0:	3001      	adds	r0, #1
 801a1f2:	d103      	bne.n	801a1fc <_printf_common+0xac>
 801a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1fc:	3501      	adds	r5, #1
 801a1fe:	e7c6      	b.n	801a18e <_printf_common+0x3e>
 801a200:	18e1      	adds	r1, r4, r3
 801a202:	1c5a      	adds	r2, r3, #1
 801a204:	2030      	movs	r0, #48	; 0x30
 801a206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a20a:	4422      	add	r2, r4
 801a20c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a214:	3302      	adds	r3, #2
 801a216:	e7c7      	b.n	801a1a8 <_printf_common+0x58>
 801a218:	2301      	movs	r3, #1
 801a21a:	4622      	mov	r2, r4
 801a21c:	4649      	mov	r1, r9
 801a21e:	4638      	mov	r0, r7
 801a220:	47c0      	blx	r8
 801a222:	3001      	adds	r0, #1
 801a224:	d0e6      	beq.n	801a1f4 <_printf_common+0xa4>
 801a226:	3601      	adds	r6, #1
 801a228:	e7d9      	b.n	801a1de <_printf_common+0x8e>
	...

0801a22c <_printf_i>:
 801a22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a230:	7e0f      	ldrb	r7, [r1, #24]
 801a232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a234:	2f78      	cmp	r7, #120	; 0x78
 801a236:	4691      	mov	r9, r2
 801a238:	4680      	mov	r8, r0
 801a23a:	460c      	mov	r4, r1
 801a23c:	469a      	mov	sl, r3
 801a23e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a242:	d807      	bhi.n	801a254 <_printf_i+0x28>
 801a244:	2f62      	cmp	r7, #98	; 0x62
 801a246:	d80a      	bhi.n	801a25e <_printf_i+0x32>
 801a248:	2f00      	cmp	r7, #0
 801a24a:	f000 80d8 	beq.w	801a3fe <_printf_i+0x1d2>
 801a24e:	2f58      	cmp	r7, #88	; 0x58
 801a250:	f000 80a3 	beq.w	801a39a <_printf_i+0x16e>
 801a254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a25c:	e03a      	b.n	801a2d4 <_printf_i+0xa8>
 801a25e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a262:	2b15      	cmp	r3, #21
 801a264:	d8f6      	bhi.n	801a254 <_printf_i+0x28>
 801a266:	a101      	add	r1, pc, #4	; (adr r1, 801a26c <_printf_i+0x40>)
 801a268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a26c:	0801a2c5 	.word	0x0801a2c5
 801a270:	0801a2d9 	.word	0x0801a2d9
 801a274:	0801a255 	.word	0x0801a255
 801a278:	0801a255 	.word	0x0801a255
 801a27c:	0801a255 	.word	0x0801a255
 801a280:	0801a255 	.word	0x0801a255
 801a284:	0801a2d9 	.word	0x0801a2d9
 801a288:	0801a255 	.word	0x0801a255
 801a28c:	0801a255 	.word	0x0801a255
 801a290:	0801a255 	.word	0x0801a255
 801a294:	0801a255 	.word	0x0801a255
 801a298:	0801a3e5 	.word	0x0801a3e5
 801a29c:	0801a309 	.word	0x0801a309
 801a2a0:	0801a3c7 	.word	0x0801a3c7
 801a2a4:	0801a255 	.word	0x0801a255
 801a2a8:	0801a255 	.word	0x0801a255
 801a2ac:	0801a407 	.word	0x0801a407
 801a2b0:	0801a255 	.word	0x0801a255
 801a2b4:	0801a309 	.word	0x0801a309
 801a2b8:	0801a255 	.word	0x0801a255
 801a2bc:	0801a255 	.word	0x0801a255
 801a2c0:	0801a3cf 	.word	0x0801a3cf
 801a2c4:	682b      	ldr	r3, [r5, #0]
 801a2c6:	1d1a      	adds	r2, r3, #4
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	602a      	str	r2, [r5, #0]
 801a2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a2d4:	2301      	movs	r3, #1
 801a2d6:	e0a3      	b.n	801a420 <_printf_i+0x1f4>
 801a2d8:	6820      	ldr	r0, [r4, #0]
 801a2da:	6829      	ldr	r1, [r5, #0]
 801a2dc:	0606      	lsls	r6, r0, #24
 801a2de:	f101 0304 	add.w	r3, r1, #4
 801a2e2:	d50a      	bpl.n	801a2fa <_printf_i+0xce>
 801a2e4:	680e      	ldr	r6, [r1, #0]
 801a2e6:	602b      	str	r3, [r5, #0]
 801a2e8:	2e00      	cmp	r6, #0
 801a2ea:	da03      	bge.n	801a2f4 <_printf_i+0xc8>
 801a2ec:	232d      	movs	r3, #45	; 0x2d
 801a2ee:	4276      	negs	r6, r6
 801a2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2f4:	485e      	ldr	r0, [pc, #376]	; (801a470 <_printf_i+0x244>)
 801a2f6:	230a      	movs	r3, #10
 801a2f8:	e019      	b.n	801a32e <_printf_i+0x102>
 801a2fa:	680e      	ldr	r6, [r1, #0]
 801a2fc:	602b      	str	r3, [r5, #0]
 801a2fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a302:	bf18      	it	ne
 801a304:	b236      	sxthne	r6, r6
 801a306:	e7ef      	b.n	801a2e8 <_printf_i+0xbc>
 801a308:	682b      	ldr	r3, [r5, #0]
 801a30a:	6820      	ldr	r0, [r4, #0]
 801a30c:	1d19      	adds	r1, r3, #4
 801a30e:	6029      	str	r1, [r5, #0]
 801a310:	0601      	lsls	r1, r0, #24
 801a312:	d501      	bpl.n	801a318 <_printf_i+0xec>
 801a314:	681e      	ldr	r6, [r3, #0]
 801a316:	e002      	b.n	801a31e <_printf_i+0xf2>
 801a318:	0646      	lsls	r6, r0, #25
 801a31a:	d5fb      	bpl.n	801a314 <_printf_i+0xe8>
 801a31c:	881e      	ldrh	r6, [r3, #0]
 801a31e:	4854      	ldr	r0, [pc, #336]	; (801a470 <_printf_i+0x244>)
 801a320:	2f6f      	cmp	r7, #111	; 0x6f
 801a322:	bf0c      	ite	eq
 801a324:	2308      	moveq	r3, #8
 801a326:	230a      	movne	r3, #10
 801a328:	2100      	movs	r1, #0
 801a32a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a32e:	6865      	ldr	r5, [r4, #4]
 801a330:	60a5      	str	r5, [r4, #8]
 801a332:	2d00      	cmp	r5, #0
 801a334:	bfa2      	ittt	ge
 801a336:	6821      	ldrge	r1, [r4, #0]
 801a338:	f021 0104 	bicge.w	r1, r1, #4
 801a33c:	6021      	strge	r1, [r4, #0]
 801a33e:	b90e      	cbnz	r6, 801a344 <_printf_i+0x118>
 801a340:	2d00      	cmp	r5, #0
 801a342:	d04d      	beq.n	801a3e0 <_printf_i+0x1b4>
 801a344:	4615      	mov	r5, r2
 801a346:	fbb6 f1f3 	udiv	r1, r6, r3
 801a34a:	fb03 6711 	mls	r7, r3, r1, r6
 801a34e:	5dc7      	ldrb	r7, [r0, r7]
 801a350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a354:	4637      	mov	r7, r6
 801a356:	42bb      	cmp	r3, r7
 801a358:	460e      	mov	r6, r1
 801a35a:	d9f4      	bls.n	801a346 <_printf_i+0x11a>
 801a35c:	2b08      	cmp	r3, #8
 801a35e:	d10b      	bne.n	801a378 <_printf_i+0x14c>
 801a360:	6823      	ldr	r3, [r4, #0]
 801a362:	07de      	lsls	r6, r3, #31
 801a364:	d508      	bpl.n	801a378 <_printf_i+0x14c>
 801a366:	6923      	ldr	r3, [r4, #16]
 801a368:	6861      	ldr	r1, [r4, #4]
 801a36a:	4299      	cmp	r1, r3
 801a36c:	bfde      	ittt	le
 801a36e:	2330      	movle	r3, #48	; 0x30
 801a370:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a374:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a378:	1b52      	subs	r2, r2, r5
 801a37a:	6122      	str	r2, [r4, #16]
 801a37c:	f8cd a000 	str.w	sl, [sp]
 801a380:	464b      	mov	r3, r9
 801a382:	aa03      	add	r2, sp, #12
 801a384:	4621      	mov	r1, r4
 801a386:	4640      	mov	r0, r8
 801a388:	f7ff fee2 	bl	801a150 <_printf_common>
 801a38c:	3001      	adds	r0, #1
 801a38e:	d14c      	bne.n	801a42a <_printf_i+0x1fe>
 801a390:	f04f 30ff 	mov.w	r0, #4294967295
 801a394:	b004      	add	sp, #16
 801a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a39a:	4835      	ldr	r0, [pc, #212]	; (801a470 <_printf_i+0x244>)
 801a39c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a3a0:	6829      	ldr	r1, [r5, #0]
 801a3a2:	6823      	ldr	r3, [r4, #0]
 801a3a4:	f851 6b04 	ldr.w	r6, [r1], #4
 801a3a8:	6029      	str	r1, [r5, #0]
 801a3aa:	061d      	lsls	r5, r3, #24
 801a3ac:	d514      	bpl.n	801a3d8 <_printf_i+0x1ac>
 801a3ae:	07df      	lsls	r7, r3, #31
 801a3b0:	bf44      	itt	mi
 801a3b2:	f043 0320 	orrmi.w	r3, r3, #32
 801a3b6:	6023      	strmi	r3, [r4, #0]
 801a3b8:	b91e      	cbnz	r6, 801a3c2 <_printf_i+0x196>
 801a3ba:	6823      	ldr	r3, [r4, #0]
 801a3bc:	f023 0320 	bic.w	r3, r3, #32
 801a3c0:	6023      	str	r3, [r4, #0]
 801a3c2:	2310      	movs	r3, #16
 801a3c4:	e7b0      	b.n	801a328 <_printf_i+0xfc>
 801a3c6:	6823      	ldr	r3, [r4, #0]
 801a3c8:	f043 0320 	orr.w	r3, r3, #32
 801a3cc:	6023      	str	r3, [r4, #0]
 801a3ce:	2378      	movs	r3, #120	; 0x78
 801a3d0:	4828      	ldr	r0, [pc, #160]	; (801a474 <_printf_i+0x248>)
 801a3d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a3d6:	e7e3      	b.n	801a3a0 <_printf_i+0x174>
 801a3d8:	0659      	lsls	r1, r3, #25
 801a3da:	bf48      	it	mi
 801a3dc:	b2b6      	uxthmi	r6, r6
 801a3de:	e7e6      	b.n	801a3ae <_printf_i+0x182>
 801a3e0:	4615      	mov	r5, r2
 801a3e2:	e7bb      	b.n	801a35c <_printf_i+0x130>
 801a3e4:	682b      	ldr	r3, [r5, #0]
 801a3e6:	6826      	ldr	r6, [r4, #0]
 801a3e8:	6961      	ldr	r1, [r4, #20]
 801a3ea:	1d18      	adds	r0, r3, #4
 801a3ec:	6028      	str	r0, [r5, #0]
 801a3ee:	0635      	lsls	r5, r6, #24
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	d501      	bpl.n	801a3f8 <_printf_i+0x1cc>
 801a3f4:	6019      	str	r1, [r3, #0]
 801a3f6:	e002      	b.n	801a3fe <_printf_i+0x1d2>
 801a3f8:	0670      	lsls	r0, r6, #25
 801a3fa:	d5fb      	bpl.n	801a3f4 <_printf_i+0x1c8>
 801a3fc:	8019      	strh	r1, [r3, #0]
 801a3fe:	2300      	movs	r3, #0
 801a400:	6123      	str	r3, [r4, #16]
 801a402:	4615      	mov	r5, r2
 801a404:	e7ba      	b.n	801a37c <_printf_i+0x150>
 801a406:	682b      	ldr	r3, [r5, #0]
 801a408:	1d1a      	adds	r2, r3, #4
 801a40a:	602a      	str	r2, [r5, #0]
 801a40c:	681d      	ldr	r5, [r3, #0]
 801a40e:	6862      	ldr	r2, [r4, #4]
 801a410:	2100      	movs	r1, #0
 801a412:	4628      	mov	r0, r5
 801a414:	f7e5 fef4 	bl	8000200 <memchr>
 801a418:	b108      	cbz	r0, 801a41e <_printf_i+0x1f2>
 801a41a:	1b40      	subs	r0, r0, r5
 801a41c:	6060      	str	r0, [r4, #4]
 801a41e:	6863      	ldr	r3, [r4, #4]
 801a420:	6123      	str	r3, [r4, #16]
 801a422:	2300      	movs	r3, #0
 801a424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a428:	e7a8      	b.n	801a37c <_printf_i+0x150>
 801a42a:	6923      	ldr	r3, [r4, #16]
 801a42c:	462a      	mov	r2, r5
 801a42e:	4649      	mov	r1, r9
 801a430:	4640      	mov	r0, r8
 801a432:	47d0      	blx	sl
 801a434:	3001      	adds	r0, #1
 801a436:	d0ab      	beq.n	801a390 <_printf_i+0x164>
 801a438:	6823      	ldr	r3, [r4, #0]
 801a43a:	079b      	lsls	r3, r3, #30
 801a43c:	d413      	bmi.n	801a466 <_printf_i+0x23a>
 801a43e:	68e0      	ldr	r0, [r4, #12]
 801a440:	9b03      	ldr	r3, [sp, #12]
 801a442:	4298      	cmp	r0, r3
 801a444:	bfb8      	it	lt
 801a446:	4618      	movlt	r0, r3
 801a448:	e7a4      	b.n	801a394 <_printf_i+0x168>
 801a44a:	2301      	movs	r3, #1
 801a44c:	4632      	mov	r2, r6
 801a44e:	4649      	mov	r1, r9
 801a450:	4640      	mov	r0, r8
 801a452:	47d0      	blx	sl
 801a454:	3001      	adds	r0, #1
 801a456:	d09b      	beq.n	801a390 <_printf_i+0x164>
 801a458:	3501      	adds	r5, #1
 801a45a:	68e3      	ldr	r3, [r4, #12]
 801a45c:	9903      	ldr	r1, [sp, #12]
 801a45e:	1a5b      	subs	r3, r3, r1
 801a460:	42ab      	cmp	r3, r5
 801a462:	dcf2      	bgt.n	801a44a <_printf_i+0x21e>
 801a464:	e7eb      	b.n	801a43e <_printf_i+0x212>
 801a466:	2500      	movs	r5, #0
 801a468:	f104 0619 	add.w	r6, r4, #25
 801a46c:	e7f5      	b.n	801a45a <_printf_i+0x22e>
 801a46e:	bf00      	nop
 801a470:	0801d633 	.word	0x0801d633
 801a474:	0801d644 	.word	0x0801d644

0801a478 <_read_r>:
 801a478:	b538      	push	{r3, r4, r5, lr}
 801a47a:	4d07      	ldr	r5, [pc, #28]	; (801a498 <_read_r+0x20>)
 801a47c:	4604      	mov	r4, r0
 801a47e:	4608      	mov	r0, r1
 801a480:	4611      	mov	r1, r2
 801a482:	2200      	movs	r2, #0
 801a484:	602a      	str	r2, [r5, #0]
 801a486:	461a      	mov	r2, r3
 801a488:	f7e8 f8fe 	bl	8002688 <_read>
 801a48c:	1c43      	adds	r3, r0, #1
 801a48e:	d102      	bne.n	801a496 <_read_r+0x1e>
 801a490:	682b      	ldr	r3, [r5, #0]
 801a492:	b103      	cbz	r3, 801a496 <_read_r+0x1e>
 801a494:	6023      	str	r3, [r4, #0]
 801a496:	bd38      	pop	{r3, r4, r5, pc}
 801a498:	2000dc04 	.word	0x2000dc04

0801a49c <abort>:
 801a49c:	b508      	push	{r3, lr}
 801a49e:	2006      	movs	r0, #6
 801a4a0:	f000 f87e 	bl	801a5a0 <raise>
 801a4a4:	2001      	movs	r0, #1
 801a4a6:	f7e8 f8e5 	bl	8002674 <_exit>
	...

0801a4ac <_fstat_r>:
 801a4ac:	b538      	push	{r3, r4, r5, lr}
 801a4ae:	4d07      	ldr	r5, [pc, #28]	; (801a4cc <_fstat_r+0x20>)
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	4604      	mov	r4, r0
 801a4b4:	4608      	mov	r0, r1
 801a4b6:	4611      	mov	r1, r2
 801a4b8:	602b      	str	r3, [r5, #0]
 801a4ba:	f7e8 f92a 	bl	8002712 <_fstat>
 801a4be:	1c43      	adds	r3, r0, #1
 801a4c0:	d102      	bne.n	801a4c8 <_fstat_r+0x1c>
 801a4c2:	682b      	ldr	r3, [r5, #0]
 801a4c4:	b103      	cbz	r3, 801a4c8 <_fstat_r+0x1c>
 801a4c6:	6023      	str	r3, [r4, #0]
 801a4c8:	bd38      	pop	{r3, r4, r5, pc}
 801a4ca:	bf00      	nop
 801a4cc:	2000dc04 	.word	0x2000dc04

0801a4d0 <_isatty_r>:
 801a4d0:	b538      	push	{r3, r4, r5, lr}
 801a4d2:	4d06      	ldr	r5, [pc, #24]	; (801a4ec <_isatty_r+0x1c>)
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	4604      	mov	r4, r0
 801a4d8:	4608      	mov	r0, r1
 801a4da:	602b      	str	r3, [r5, #0]
 801a4dc:	f7e8 f929 	bl	8002732 <_isatty>
 801a4e0:	1c43      	adds	r3, r0, #1
 801a4e2:	d102      	bne.n	801a4ea <_isatty_r+0x1a>
 801a4e4:	682b      	ldr	r3, [r5, #0]
 801a4e6:	b103      	cbz	r3, 801a4ea <_isatty_r+0x1a>
 801a4e8:	6023      	str	r3, [r4, #0]
 801a4ea:	bd38      	pop	{r3, r4, r5, pc}
 801a4ec:	2000dc04 	.word	0x2000dc04

0801a4f0 <_realloc_r>:
 801a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f4:	4680      	mov	r8, r0
 801a4f6:	4614      	mov	r4, r2
 801a4f8:	460e      	mov	r6, r1
 801a4fa:	b921      	cbnz	r1, 801a506 <_realloc_r+0x16>
 801a4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a500:	4611      	mov	r1, r2
 801a502:	f7fe bded 	b.w	80190e0 <_malloc_r>
 801a506:	b92a      	cbnz	r2, 801a514 <_realloc_r+0x24>
 801a508:	f7ff fb20 	bl	8019b4c <_free_r>
 801a50c:	4625      	mov	r5, r4
 801a50e:	4628      	mov	r0, r5
 801a510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a514:	f000 f860 	bl	801a5d8 <_malloc_usable_size_r>
 801a518:	4284      	cmp	r4, r0
 801a51a:	4607      	mov	r7, r0
 801a51c:	d802      	bhi.n	801a524 <_realloc_r+0x34>
 801a51e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a522:	d812      	bhi.n	801a54a <_realloc_r+0x5a>
 801a524:	4621      	mov	r1, r4
 801a526:	4640      	mov	r0, r8
 801a528:	f7fe fdda 	bl	80190e0 <_malloc_r>
 801a52c:	4605      	mov	r5, r0
 801a52e:	2800      	cmp	r0, #0
 801a530:	d0ed      	beq.n	801a50e <_realloc_r+0x1e>
 801a532:	42bc      	cmp	r4, r7
 801a534:	4622      	mov	r2, r4
 801a536:	4631      	mov	r1, r6
 801a538:	bf28      	it	cs
 801a53a:	463a      	movcs	r2, r7
 801a53c:	f7fe fd7f 	bl	801903e <memcpy>
 801a540:	4631      	mov	r1, r6
 801a542:	4640      	mov	r0, r8
 801a544:	f7ff fb02 	bl	8019b4c <_free_r>
 801a548:	e7e1      	b.n	801a50e <_realloc_r+0x1e>
 801a54a:	4635      	mov	r5, r6
 801a54c:	e7df      	b.n	801a50e <_realloc_r+0x1e>

0801a54e <_raise_r>:
 801a54e:	291f      	cmp	r1, #31
 801a550:	b538      	push	{r3, r4, r5, lr}
 801a552:	4604      	mov	r4, r0
 801a554:	460d      	mov	r5, r1
 801a556:	d904      	bls.n	801a562 <_raise_r+0x14>
 801a558:	2316      	movs	r3, #22
 801a55a:	6003      	str	r3, [r0, #0]
 801a55c:	f04f 30ff 	mov.w	r0, #4294967295
 801a560:	bd38      	pop	{r3, r4, r5, pc}
 801a562:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a564:	b112      	cbz	r2, 801a56c <_raise_r+0x1e>
 801a566:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a56a:	b94b      	cbnz	r3, 801a580 <_raise_r+0x32>
 801a56c:	4620      	mov	r0, r4
 801a56e:	f000 f831 	bl	801a5d4 <_getpid_r>
 801a572:	462a      	mov	r2, r5
 801a574:	4601      	mov	r1, r0
 801a576:	4620      	mov	r0, r4
 801a578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a57c:	f000 b818 	b.w	801a5b0 <_kill_r>
 801a580:	2b01      	cmp	r3, #1
 801a582:	d00a      	beq.n	801a59a <_raise_r+0x4c>
 801a584:	1c59      	adds	r1, r3, #1
 801a586:	d103      	bne.n	801a590 <_raise_r+0x42>
 801a588:	2316      	movs	r3, #22
 801a58a:	6003      	str	r3, [r0, #0]
 801a58c:	2001      	movs	r0, #1
 801a58e:	e7e7      	b.n	801a560 <_raise_r+0x12>
 801a590:	2400      	movs	r4, #0
 801a592:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a596:	4628      	mov	r0, r5
 801a598:	4798      	blx	r3
 801a59a:	2000      	movs	r0, #0
 801a59c:	e7e0      	b.n	801a560 <_raise_r+0x12>
	...

0801a5a0 <raise>:
 801a5a0:	4b02      	ldr	r3, [pc, #8]	; (801a5ac <raise+0xc>)
 801a5a2:	4601      	mov	r1, r0
 801a5a4:	6818      	ldr	r0, [r3, #0]
 801a5a6:	f7ff bfd2 	b.w	801a54e <_raise_r>
 801a5aa:	bf00      	nop
 801a5ac:	2000016c 	.word	0x2000016c

0801a5b0 <_kill_r>:
 801a5b0:	b538      	push	{r3, r4, r5, lr}
 801a5b2:	4d07      	ldr	r5, [pc, #28]	; (801a5d0 <_kill_r+0x20>)
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	4608      	mov	r0, r1
 801a5ba:	4611      	mov	r1, r2
 801a5bc:	602b      	str	r3, [r5, #0]
 801a5be:	f7e8 f847 	bl	8002650 <_kill>
 801a5c2:	1c43      	adds	r3, r0, #1
 801a5c4:	d102      	bne.n	801a5cc <_kill_r+0x1c>
 801a5c6:	682b      	ldr	r3, [r5, #0]
 801a5c8:	b103      	cbz	r3, 801a5cc <_kill_r+0x1c>
 801a5ca:	6023      	str	r3, [r4, #0]
 801a5cc:	bd38      	pop	{r3, r4, r5, pc}
 801a5ce:	bf00      	nop
 801a5d0:	2000dc04 	.word	0x2000dc04

0801a5d4 <_getpid_r>:
 801a5d4:	f7e8 b834 	b.w	8002640 <_getpid>

0801a5d8 <_malloc_usable_size_r>:
 801a5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5dc:	1f18      	subs	r0, r3, #4
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	bfbc      	itt	lt
 801a5e2:	580b      	ldrlt	r3, [r1, r0]
 801a5e4:	18c0      	addlt	r0, r0, r3
 801a5e6:	4770      	bx	lr

0801a5e8 <_init>:
 801a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ea:	bf00      	nop
 801a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ee:	bc08      	pop	{r3}
 801a5f0:	469e      	mov	lr, r3
 801a5f2:	4770      	bx	lr

0801a5f4 <_fini>:
 801a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f6:	bf00      	nop
 801a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5fa:	bc08      	pop	{r3}
 801a5fc:	469e      	mov	lr, r3
 801a5fe:	4770      	bx	lr
