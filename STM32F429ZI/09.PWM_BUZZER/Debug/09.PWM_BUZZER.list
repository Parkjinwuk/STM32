
09.PWM_BUZZER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a888  0800a888  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a890  0800a890  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a890  0800a890  0001a890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a894  0800a894  0001a894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800a898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000af4  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c98  20000c98  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e26b  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e70  00000000  00000000  0003e43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  000422b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001718  00000000  00000000  00043b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028af8  00000000  00000000  00045270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb22  00000000  00000000  0006dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4c5  00000000  00000000  0008c88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00179d4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000738c  00000000  00000000  00179da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a57c 	.word	0x0800a57c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	0800a57c 	.word	0x0800a57c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_Init>:
		}
	}
}

void DHT11_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2101      	movs	r1, #1
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <DHT11_Init+0x1c>)
 8000d8a:	f003 f92f 	bl	8003fec <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000d8e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d92:	f002 fa77 	bl	8003284 <HAL_Delay>
	return;
 8000d96:	bf00      	nop
}
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020000 	.word	0x40020000

08000da0 <lcd_display_mode_select>:

extern RTC_HandleTypeDef hrtc;
RTC_TimeTypeDef mTime;	// time information

void lcd_display_mode_select(void)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af02      	add	r7, sp, #8
	char lcd_buff[40];

	if (get_button(GPIOC, GPIO_PIN_13, 4) == BUTTON_PRESS)
 8000da6:	2204      	movs	r2, #4
 8000da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dac:	4823      	ldr	r0, [pc, #140]	; (8000e3c <lcd_display_mode_select+0x9c>)
 8000dae:	f000 f84f 	bl	8000e50 <get_button>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d13d      	bne.n	8000e34 <lcd_display_mode_select+0x94>
	{
		lcd_command(CLEAR_DISPLAY);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 f919 	bl	8000ff0 <lcd_command>
		lcd_display_mode_flag++;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <lcd_display_mode_select+0xa0>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <lcd_display_mode_select+0xa0>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_flag %= 4;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <lcd_display_mode_select+0xa0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <lcd_display_mode_select+0xa0>)
 8000dd6:	701a      	strb	r2, [r3, #0]
		if (lcd_display_mode_flag == 3)
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <lcd_display_mode_select+0xa0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d129      	bne.n	8000e34 <lcd_display_mode_select+0x94>
		{
			HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BCD);
 8000de0:	2201      	movs	r2, #1
 8000de2:	4918      	ldr	r1, [pc, #96]	; (8000e44 <lcd_display_mode_select+0xa4>)
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <lcd_display_mode_select+0xa8>)
 8000de6:	f004 fe67 	bl	8005ab8 <HAL_RTC_GetTime>
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <lcd_display_mode_select+0xa4>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f9ac 	bl	800114c <bin2dec>
 8000df4:	4604      	mov	r4, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <lcd_display_mode_select+0xa4>)
 8000df8:	785b      	ldrb	r3, [r3, #1]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f9a6 	bl	800114c <bin2dec>
 8000e00:	4605      	mov	r5, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <lcd_display_mode_select+0xa4>)
 8000e04:	789b      	ldrb	r3, [r3, #2]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f9a0 	bl	800114c <bin2dec>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4638      	mov	r0, r7
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	462b      	mov	r3, r5
 8000e14:	4622      	mov	r2, r4
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <lcd_display_mode_select+0xac>)
 8000e18:	f008 f9aa 	bl	8009170 <siprintf>
			move_cursor(1,0);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 f97c 	bl	800111c <move_cursor>
			lcd_string(lcd_buff);
 8000e24:	463b      	mov	r3, r7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f963 	bl	80010f2 <lcd_string>
			move_cursor(1,6);	// 시간 정보 field 로 커서를 이동
 8000e2c:	2106      	movs	r1, #6
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f000 f974 	bl	800111c <move_cursor>
		}
	}
}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	200001c0 	.word	0x200001c0
 8000e44:	200001c4 	.word	0x200001c4
 8000e48:	20000498 	.word	0x20000498
 8000e4c:	0800a594 	.word	0x0800a594

08000e50 <get_button>:
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f003 f8a9 	bl	8003fbc <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10d      	bne.n	8000e90 <get_button+0x40>
 8000e74:	787b      	ldrb	r3, [r7, #1]
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <get_button+0x6c>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d108      	bne.n	8000e90 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 8000e7e:	2050      	movs	r0, #80	; 0x50
 8000e80:	f002 fa00 	bl	8003284 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <get_button+0x6c>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e011      	b.n	8000eb4 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <get_button+0x62>
 8000e96:	787b      	ldrb	r3, [r7, #1]
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <get_button+0x6c>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d108      	bne.n	8000eb2 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 8000ea0:	201e      	movs	r0, #30
 8000ea2:	f002 f9ef 	bl	8003284 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <get_button+0x6c>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <noTone>:
};

 unsigned int duration[] = {1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2};

 void noTone()
 {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
     htim5.Instance->CCR1=0;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <noTone+0x18>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f002 f9d9 	bl	8003284 <HAL_Delay>
 }
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000590 	.word	0x20000590

08000edc <buzzer_main>:

void buzzer_main()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
   int divide_freq = 1600000;
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <buzzer_main+0x100>)
 8000ee4:	607b      	str	r3, [r7, #4]

  while (1)
  {

	// 학교 종이 땡땡땡
    for (int i=0; i < 24; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e026      	b.n	8000f3a <buzzer_main+0x5e>
    {
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / school_bell[i]);
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <buzzer_main+0x104>)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <buzzer_main+0x108>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	fbb1 f2f2 	udiv	r2, r1, r2
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4937      	ldr	r1, [pc, #220]	; (8000fe0 <buzzer_main+0x104>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4a35      	ldr	r2, [pc, #212]	; (8000fe4 <buzzer_main+0x108>)
 8000f10:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / school_bell[i] / 2);
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4932      	ldr	r1, [pc, #200]	; (8000fe0 <buzzer_main+0x104>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <buzzer_main+0x108>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0852      	lsrs	r2, r2, #1
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(500);
 8000f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2c:	f002 f9aa 	bl	8003284 <HAL_Delay>
		noTone();  /* note 소리 내고 50ms 끊어주기 */
 8000f30:	f7ff ffc6 	bl	8000ec0 <noTone>
    for (int i=0; i < 24; i++)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b17      	cmp	r3, #23
 8000f3e:	ddd5      	ble.n	8000eec <buzzer_main+0x10>
    }

    /* 음악 끝나고 3초 후 시작*/
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4) ;
 8000f40:	210c      	movs	r1, #12
 8000f42:	4828      	ldr	r0, [pc, #160]	; (8000fe4 <buzzer_main+0x108>)
 8000f44:	f005 f97e 	bl	8006244 <HAL_TIM_PWM_Stop>
    HAL_Delay(3000);
 8000f48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f4c:	f002 f99a 	bl	8003284 <HAL_Delay>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4) ;
 8000f50:	210c      	movs	r1, #12
 8000f52:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <buzzer_main+0x108>)
 8000f54:	f005 f8ae 	bl	80060b4 <HAL_TIM_PWM_Start>

    // happy birthday to you
    for (int i=0; i < 25; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	e02d      	b.n	8000fba <buzzer_main+0xde>
    {
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / happy_birthday[i]);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <buzzer_main+0x10c>)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <buzzer_main+0x108>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	fbb1 f2f2 	udiv	r2, r1, r2
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	491c      	ldr	r1, [pc, #112]	; (8000fe8 <buzzer_main+0x10c>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f80:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <buzzer_main+0x108>)
 8000f82:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / happy_birthday[i] / 2);
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <buzzer_main+0x10c>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <buzzer_main+0x108>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0852      	lsrs	r2, r2, #1
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(300*duration[i]);
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <buzzer_main+0x110>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 f96a 	bl	8003284 <HAL_Delay>
		noTone();
 8000fb0:	f7ff ff86 	bl	8000ec0 <noTone>
    for (int i=0; i < 25; i++)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b18      	cmp	r3, #24
 8000fbe:	ddce      	ble.n	8000f5e <buzzer_main+0x82>
    }

    /* 음악 끝나고 3초 후 시작 */
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4) ;
 8000fc0:	210c      	movs	r1, #12
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <buzzer_main+0x108>)
 8000fc4:	f005 f93e 	bl	8006244 <HAL_TIM_PWM_Stop>
    HAL_Delay(3000);
 8000fc8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fcc:	f002 f95a 	bl	8003284 <HAL_Delay>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4) ;
 8000fd0:	210c      	movs	r1, #12
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <buzzer_main+0x108>)
 8000fd4:	f005 f86e 	bl	80060b4 <HAL_TIM_PWM_Start>
    for (int i=0; i < 24; i++)
 8000fd8:	e785      	b.n	8000ee6 <buzzer_main+0xa>
 8000fda:	bf00      	nop
 8000fdc:	00186a00 	.word	0x00186a00
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000590 	.word	0x20000590
 8000fe8:	2000006c 	.word	0x2000006c
 8000fec:	200000d0 	.word	0x200000d0

08000ff0 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f023 030f 	bic.w	r3, r3, #15
 8001000:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	f043 030c 	orr.w	r3, r3, #12
 800100e:	b2db      	uxtb	r3, r3
 8001010:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	b2db      	uxtb	r3, r3
 800101a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2db      	uxtb	r3, r3
 8001024:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	b2db      	uxtb	r3, r3
 800102e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001030:	bf00      	nop
 8001032:	f107 0208 	add.w	r2, r7, #8
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2304      	movs	r3, #4
 800103c:	214e      	movs	r1, #78	; 0x4e
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <lcd_command+0x64>)
 8001040:	f003 f932 	bl	80042a8 <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f3      	bne.n	8001032 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800104a:	bf00      	nop
}
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000444 	.word	0x20000444

08001058 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f023 030f 	bic.w	r3, r3, #15
 8001068:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f043 030d 	orr.w	r3, r3, #13
 8001076:	b2db      	uxtb	r3, r3
 8001078:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f043 0309 	orr.w	r3, r3, #9
 8001080:	b2db      	uxtb	r3, r3
 8001082:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	f043 030d 	orr.w	r3, r3, #13
 800108a:	b2db      	uxtb	r3, r3
 800108c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	f043 0309 	orr.w	r3, r3, #9
 8001094:	b2db      	uxtb	r3, r3
 8001096:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001098:	bf00      	nop
 800109a:	f107 0208 	add.w	r2, r7, #8
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2304      	movs	r3, #4
 80010a4:	214e      	movs	r1, #78	; 0x4e
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <lcd_data+0x64>)
 80010a8:	f003 f8fe 	bl	80042a8 <HAL_I2C_Master_Transmit>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f3      	bne.n	800109a <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80010b2:	bf00      	nop
}
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000444 	.word	0x20000444

080010c0 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80010c4:	2033      	movs	r0, #51	; 0x33
 80010c6:	f7ff ff93 	bl	8000ff0 <lcd_command>
	lcd_command(0x32);
 80010ca:	2032      	movs	r0, #50	; 0x32
 80010cc:	f7ff ff90 	bl	8000ff0 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80010d0:	2028      	movs	r0, #40	; 0x28
 80010d2:	f7ff ff8d 	bl	8000ff0 <lcd_command>
	lcd_command(DISPLAY_ON);
 80010d6:	200c      	movs	r0, #12
 80010d8:	f7ff ff8a 	bl	8000ff0 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80010dc:	2006      	movs	r0, #6
 80010de:	f7ff ff87 	bl	8000ff0 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f7ff ff84 	bl	8000ff0 <lcd_command>
	HAL_Delay(2);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f002 f8cb 	bl	8003284 <HAL_Delay>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	while(*str)
 80010fa:	e006      	b.n	800110a <lcd_string+0x18>
	{
		lcd_data(*str++);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffa7 	bl	8001058 <lcd_data>
	while(*str)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <lcd_string+0xa>
	}
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	019b      	lsls	r3, r3, #6
 8001130:	b2da      	uxtb	r2, r3
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	4313      	orrs	r3, r2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff56 	bl	8000ff0 <lcd_command>
	return;
 8001144:	bf00      	nop
}
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <bin2dec>:
// 7654 3210
// 0010 0011
// 00000010
// STM32의 RTC로 부터 날짜 & 시각 정보를 읽어 오는 함수
unsigned char bin2dec(unsigned char byte)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;
	low = byte & 0x0f;	// 하위 4bit(low nibble)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10;	// 상위 4bit(high nibble)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	73bb      	strb	r3, [r7, #14]

	return high + low;
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	4413      	add	r3, r2
 8001174:	b2db      	uxtb	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <dec2bin>:
// decimal --> BCD ex) 23: 0001 0111
unsigned char dec2bin(unsigned char byte)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <dec2bin+0x44>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	08db      	lsrs	r3, r3, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <dec2bin+0x44>)
 80011a2:	fba3 1302 	umull	r1, r3, r3, r2
 80011a6:	08d9      	lsrs	r1, r3, #3
 80011a8:	460b      	mov	r3, r1
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	73bb      	strb	r3, [r7, #14]

	return high + low;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	4413      	add	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	cccccccd 	.word	0xcccccccd

080011cc <get_rtc>:
void get_rtc(void)
{
 80011cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d0:	b08f      	sub	sp, #60	; 0x3c
 80011d2:	af04      	add	r7, sp, #16
	static RTC_TimeTypeDef oldTime;	// 이전 시각 정보를 가지고 있기 위함이다.
	char lcd_buff[40];

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80011d4:	2201      	movs	r2, #1
 80011d6:	494b      	ldr	r1, [pc, #300]	; (8001304 <get_rtc+0x138>)
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <get_rtc+0x13c>)
 80011da:	f004 fd4f 	bl	8005c7c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80011de:	2201      	movs	r2, #1
 80011e0:	494a      	ldr	r1, [pc, #296]	; (800130c <get_rtc+0x140>)
 80011e2:	4849      	ldr	r0, [pc, #292]	; (8001308 <get_rtc+0x13c>)
 80011e4:	f004 fc68 	bl	8005ab8 <HAL_RTC_GetTime>

	if (oldTime.Seconds != sTime.Seconds)
 80011e8:	4b49      	ldr	r3, [pc, #292]	; (8001310 <get_rtc+0x144>)
 80011ea:	789a      	ldrb	r2, [r3, #2]
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <get_rtc+0x140>)
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d07d      	beq.n	80012f0 <get_rtc+0x124>
	{
		// YYYY-MM-DD HH:mm:ss
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 80011f4:	4b43      	ldr	r3, [pc, #268]	; (8001304 <get_rtc+0x138>)
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ffa7 	bl	800114c <bin2dec>
 80011fe:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001200:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <get_rtc+0x138>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff9f 	bl	800114c <bin2dec>
 800120e:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001210:	4698      	mov	r8, r3
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <get_rtc+0x138>)
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff98 	bl	800114c <bin2dec>
 800121c:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800121e:	4699      	mov	r9, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <get_rtc+0x140>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff91 	bl	800114c <bin2dec>
 800122a:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800122c:	461d      	mov	r5, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <get_rtc+0x140>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff8a 	bl	800114c <bin2dec>
 8001238:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800123a:	461e      	mov	r6, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <get_rtc+0x140>)
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff83 	bl	800114c <bin2dec>
 8001246:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	9601      	str	r6, [sp, #4]
 800124c:	9500      	str	r5, [sp, #0]
 800124e:	464b      	mov	r3, r9
 8001250:	4642      	mov	r2, r8
 8001252:	4621      	mov	r1, r4
 8001254:	482f      	ldr	r0, [pc, #188]	; (8001314 <get_rtc+0x148>)
 8001256:	f007 fefd 	bl	8009054 <iprintf>

		if (lcd_display_mode_flag==0)
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <get_rtc+0x14c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d146      	bne.n	80012f0 <get_rtc+0x124>
		{
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <get_rtc+0x138>)
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff70 	bl	800114c <bin2dec>
 800126c:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800126e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <get_rtc+0x138>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff68 	bl	800114c <bin2dec>
 800127c:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800127e:	461d      	mov	r5, r3
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <get_rtc+0x138>)
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff61 	bl	800114c <bin2dec>
 800128a:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800128c:	4638      	mov	r0, r7
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	462b      	mov	r3, r5
 8001292:	4622      	mov	r2, r4
 8001294:	4921      	ldr	r1, [pc, #132]	; (800131c <get_rtc+0x150>)
 8001296:	f007 ff6b 	bl	8009170 <siprintf>
			move_cursor(0, 0);
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff ff3d 	bl	800111c <move_cursor>
			lcd_string(lcd_buff);
 80012a2:	463b      	mov	r3, r7
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff24 	bl	80010f2 <lcd_string>
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <get_rtc+0x140>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff4c 	bl	800114c <bin2dec>
 80012b4:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80012b6:	461c      	mov	r4, r3
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <get_rtc+0x140>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff45 	bl	800114c <bin2dec>
 80012c2:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80012c4:	461d      	mov	r5, r3
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <get_rtc+0x140>)
 80012c8:	789b      	ldrb	r3, [r3, #2]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff3e 	bl	800114c <bin2dec>
 80012d0:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80012d2:	4638      	mov	r0, r7
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	462b      	mov	r3, r5
 80012d8:	4622      	mov	r2, r4
 80012da:	4911      	ldr	r1, [pc, #68]	; (8001320 <get_rtc+0x154>)
 80012dc:	f007 ff48 	bl	8009170 <siprintf>
			move_cursor(1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff ff1a 	bl	800111c <move_cursor>
			lcd_string(lcd_buff);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff01 	bl	80010f2 <lcd_string>
		}
	}
	oldTime.Seconds=sTime.Seconds;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <get_rtc+0x140>)
 80012f2:	789a      	ldrb	r2, [r3, #2]
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <get_rtc+0x144>)
 80012f6:	709a      	strb	r2, [r3, #2]
}
 80012f8:	bf00      	nop
 80012fa:	372c      	adds	r7, #44	; 0x2c
 80012fc:	46bd      	mov	sp, r7
 80012fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001302:	bf00      	nop
 8001304:	200001ec 	.word	0x200001ec
 8001308:	20000498 	.word	0x20000498
 800130c:	200001d8 	.word	0x200001d8
 8001310:	200001f0 	.word	0x200001f0
 8001314:	0800a5a8 	.word	0x0800a5a8
 8001318:	200001c0 	.word	0x200001c0
 800131c:	0800a5c8 	.word	0x0800a5c8
 8001320:	0800a5dc 	.word	0x0800a5dc

08001324 <set_rtc>:
// setrtc231016103800
//       678901234567 번방
void set_rtc(char *date_time)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4];	// date
	char hh[4], min[4], ss[4];	// time

	strncpy(yy, date_time+6, 2);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1d99      	adds	r1, r3, #6
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2202      	movs	r2, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f007 ff4e 	bl	80091d8 <strncpy>
	strncpy(mm, date_time+8, 2);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f103 0108 	add.w	r1, r3, #8
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2202      	movs	r2, #2
 8001348:	4618      	mov	r0, r3
 800134a:	f007 ff45 	bl	80091d8 <strncpy>
	strncpy(dd, date_time+10, 2);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f103 010a 	add.w	r1, r3, #10
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2202      	movs	r2, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f007 ff3c 	bl	80091d8 <strncpy>

	strncpy(hh, date_time+12, 2);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f103 010c 	add.w	r1, r3, #12
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2202      	movs	r2, #2
 800136c:	4618      	mov	r0, r3
 800136e:	f007 ff33 	bl	80091d8 <strncpy>
	strncpy(min, date_time+14, 2);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f103 010e 	add.w	r1, r3, #14
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2202      	movs	r2, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f007 ff2a 	bl	80091d8 <strncpy>
	strncpy(ss, date_time+16, 2);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f103 0110 	add.w	r1, r3, #16
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	2202      	movs	r2, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f007 ff21 	bl	80091d8 <strncpy>

	// ascii --> int --> bcd
	sDate.Year = dec2bin(atoi(yy));
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fe24 	bl	8008fe8 <atoi>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff feed 	bl	8001184 <dec2bin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <set_rtc+0x138>)
 80013b0:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fe16 	bl	8008fe8 <atoi>
 80013bc:	4603      	mov	r3, r0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fedf 	bl	8001184 <dec2bin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <set_rtc+0x138>)
 80013cc:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 fe08 	bl	8008fe8 <atoi>
 80013d8:	4603      	mov	r3, r0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fed1 	bl	8001184 <dec2bin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <set_rtc+0x138>)
 80013e8:	709a      	strb	r2, [r3, #2]

	sTime.Hours = dec2bin(atoi(hh));
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fdfa 	bl	8008fe8 <atoi>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fec3 	bl	8001184 <dec2bin>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <set_rtc+0x13c>)
 8001404:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4618      	mov	r0, r3
 800140c:	f007 fdec 	bl	8008fe8 <atoi>
 8001410:	4603      	mov	r3, r0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff feb5 	bl	8001184 <dec2bin>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <set_rtc+0x13c>)
 8001420:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4618      	mov	r0, r3
 8001428:	f007 fdde 	bl	8008fe8 <atoi>
 800142c:	4603      	mov	r3, r0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fea7 	bl	8001184 <dec2bin>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <set_rtc+0x13c>)
 800143c:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800143e:	2201      	movs	r2, #1
 8001440:	4906      	ldr	r1, [pc, #24]	; (800145c <set_rtc+0x138>)
 8001442:	4808      	ldr	r0, [pc, #32]	; (8001464 <set_rtc+0x140>)
 8001444:	f004 fb96 	bl	8005b74 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001448:	2201      	movs	r2, #1
 800144a:	4905      	ldr	r1, [pc, #20]	; (8001460 <set_rtc+0x13c>)
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <set_rtc+0x140>)
 800144e:	f004 fa99 	bl	8005984 <HAL_RTC_SetTime>

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200001ec 	.word	0x200001ec
 8001460:	200001d8 	.word	0x200001d8
 8001464:	20000498 	.word	0x20000498

08001468 <set_time_button_ui>:
// button2 : 초를 변경 하는 버튼 00~59 (up counter)
// button3 : 변경 완료 현재까지 변경된 내용을 저장
//           HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);

void set_time_button_ui(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af02      	add	r7, sp, #8
	char lcd_buff[40];
	static int sel_hour=0, sel_min=0, sel_sec=0;



	if (lcd_display_mode_flag == 3)
 800146e:	4b67      	ldr	r3, [pc, #412]	; (800160c <set_time_button_ui+0x1a4>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b03      	cmp	r3, #3
 8001474:	f040 80c6 	bne.w	8001604 <set_time_button_ui+0x19c>
	{
		sprintf(lcd_buff," SET:%02d:%02d:%02d",sel_hour,sel_min,sel_sec);
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <set_time_button_ui+0x1a8>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b65      	ldr	r3, [pc, #404]	; (8001614 <set_time_button_ui+0x1ac>)
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	4b65      	ldr	r3, [pc, #404]	; (8001618 <set_time_button_ui+0x1b0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4638      	mov	r0, r7
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	460b      	mov	r3, r1
 800148a:	4964      	ldr	r1, [pc, #400]	; (800161c <set_time_button_ui+0x1b4>)
 800148c:	f007 fe70 	bl	8009170 <siprintf>
		move_cursor(0,0);
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fe42 	bl	800111c <move_cursor>
		lcd_string(lcd_buff);
 8001498:	463b      	mov	r3, r7
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe29 	bl	80010f2 <lcd_string>

		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a6:	485e      	ldr	r0, [pc, #376]	; (8001620 <set_time_button_ui+0x1b8>)
 80014a8:	f7ff fcd2 	bl	8000e50 <get_button>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d122      	bne.n	80014f8 <set_time_button_ui+0x90>
		{
			// 시간정보 modify
			sel_hour++;
 80014b2:	4b57      	ldr	r3, [pc, #348]	; (8001610 <set_time_button_ui+0x1a8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <set_time_button_ui+0x1a8>)
 80014ba:	6013      	str	r3, [r2, #0]
			sel_hour %= 24;
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <set_time_button_ui+0x1a8>)
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <set_time_button_ui+0x1bc>)
 80014c2:	fb83 2301 	smull	r2, r3, r3, r1
 80014c6:	109a      	asrs	r2, r3, #2
 80014c8:	17cb      	asrs	r3, r1, #31
 80014ca:	1ad2      	subs	r2, r2, r3
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	1aca      	subs	r2, r1, r3
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <set_time_button_ui+0x1a8>)
 80014d8:	601a      	str	r2, [r3, #0]
			sprintf(lcd_buff, "%02d", sel_hour);
 80014da:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <set_time_button_ui+0x1a8>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	463b      	mov	r3, r7
 80014e0:	4951      	ldr	r1, [pc, #324]	; (8001628 <set_time_button_ui+0x1c0>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 fe44 	bl	8009170 <siprintf>
			move_cursor(0, 5);
 80014e8:	2105      	movs	r1, #5
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff fe16 	bl	800111c <move_cursor>
			lcd_string(lcd_buff);
 80014f0:	463b      	mov	r3, r7
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fdfd 	bl	80010f2 <lcd_string>
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fe:	4848      	ldr	r0, [pc, #288]	; (8001620 <set_time_button_ui+0x1b8>)
 8001500:	f7ff fca6 	bl	8000e50 <get_button>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d123      	bne.n	8001552 <set_time_button_ui+0xea>
		{
			// 분 정보 modify
			sel_min++;
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <set_time_button_ui+0x1ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a40      	ldr	r2, [pc, #256]	; (8001614 <set_time_button_ui+0x1ac>)
 8001512:	6013      	str	r3, [r2, #0]
			sel_min %= 60;
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <set_time_button_ui+0x1ac>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <set_time_button_ui+0x1c4>)
 800151a:	fb83 1302 	smull	r1, r3, r3, r2
 800151e:	4413      	add	r3, r2
 8001520:	1159      	asrs	r1, r3, #5
 8001522:	17d3      	asrs	r3, r2, #31
 8001524:	1ac9      	subs	r1, r1, r3
 8001526:	460b      	mov	r3, r1
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	1a5b      	subs	r3, r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	1ad1      	subs	r1, r2, r3
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <set_time_button_ui+0x1ac>)
 8001532:	6019      	str	r1, [r3, #0]
			sprintf(lcd_buff, "%02d", sel_min);
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <set_time_button_ui+0x1ac>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	463b      	mov	r3, r7
 800153a:	493b      	ldr	r1, [pc, #236]	; (8001628 <set_time_button_ui+0x1c0>)
 800153c:	4618      	mov	r0, r3
 800153e:	f007 fe17 	bl	8009170 <siprintf>
			move_cursor(0, 8);
 8001542:	2108      	movs	r1, #8
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fde9 	bl	800111c <move_cursor>
			lcd_string(lcd_buff);
 800154a:	463b      	mov	r3, r7
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdd0 	bl	80010f2 <lcd_string>
		}
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8001552:	2202      	movs	r2, #2
 8001554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001558:	4831      	ldr	r0, [pc, #196]	; (8001620 <set_time_button_ui+0x1b8>)
 800155a:	f7ff fc79 	bl	8000e50 <get_button>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d123      	bne.n	80015ac <set_time_button_ui+0x144>
		{
			// 초 정보 modify
			sel_sec++;
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <set_time_button_ui+0x1b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a2b      	ldr	r2, [pc, #172]	; (8001618 <set_time_button_ui+0x1b0>)
 800156c:	6013      	str	r3, [r2, #0]
			sel_sec %= 60;
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <set_time_button_ui+0x1b0>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <set_time_button_ui+0x1c4>)
 8001574:	fb83 1302 	smull	r1, r3, r3, r2
 8001578:	4413      	add	r3, r2
 800157a:	1159      	asrs	r1, r3, #5
 800157c:	17d3      	asrs	r3, r2, #31
 800157e:	1ac9      	subs	r1, r1, r3
 8001580:	460b      	mov	r3, r1
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	1a5b      	subs	r3, r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	1ad1      	subs	r1, r2, r3
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <set_time_button_ui+0x1b0>)
 800158c:	6019      	str	r1, [r3, #0]
			sprintf(lcd_buff, "%02d", sel_sec);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <set_time_button_ui+0x1b0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	463b      	mov	r3, r7
 8001594:	4924      	ldr	r1, [pc, #144]	; (8001628 <set_time_button_ui+0x1c0>)
 8001596:	4618      	mov	r0, r3
 8001598:	f007 fdea 	bl	8009170 <siprintf>
			move_cursor(0, 11);
 800159c:	210b      	movs	r1, #11
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fdbc 	bl	800111c <move_cursor>
			lcd_string(lcd_buff);
 80015a4:	463b      	mov	r3, r7
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fda3 	bl	80010f2 <lcd_string>
		}
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80015ac:	2203      	movs	r2, #3
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	481b      	ldr	r0, [pc, #108]	; (8001620 <set_time_button_ui+0x1b8>)
 80015b4:	f7ff fc4c 	bl	8000e50 <get_button>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d122      	bne.n	8001604 <set_time_button_ui+0x19c>
		{
			// 완료 버튼
			sTime.Hours = dec2bin(sel_hour);
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <set_time_button_ui+0x1a8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fddd 	bl	8001184 <dec2bin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <set_time_button_ui+0x1c8>)
 80015d0:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = dec2bin(sel_min);
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <set_time_button_ui+0x1ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fdd3 	bl	8001184 <dec2bin>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <set_time_button_ui+0x1c8>)
 80015e4:	705a      	strb	r2, [r3, #1]
			sTime.Seconds = dec2bin(sel_sec);
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <set_time_button_ui+0x1b0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fdc9 	bl	8001184 <dec2bin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <set_time_button_ui+0x1c8>)
 80015f8:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80015fa:	2201      	movs	r2, #1
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <set_time_button_ui+0x1c8>)
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <set_time_button_ui+0x1cc>)
 8001600:	f004 f9c0 	bl	8005984 <HAL_RTC_SetTime>
			lcd_display_mode_flag == 0;
		}

	}
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200001c0 	.word	0x200001c0
 8001610:	20000204 	.word	0x20000204
 8001614:	20000208 	.word	0x20000208
 8001618:	2000020c 	.word	0x2000020c
 800161c:	0800a5f0 	.word	0x0800a5f0
 8001620:	40021000 	.word	0x40021000
 8001624:	2aaaaaab 	.word	0x2aaaaaab
 8001628:	0800a604 	.word	0x0800a604
 800162c:	88888889 	.word	0x88888889
 8001630:	200001d8 	.word	0x200001d8
 8001634:	20000498 	.word	0x20000498

08001638 <flower_on>:
#endif
	}
}

void flower_on()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	21ff      	movs	r1, #255	; 0xff
 8001642:	4814      	ldr	r0, [pc, #80]	; (8001694 <flower_on+0x5c>)
 8001644:	f002 fcd2 	bl	8003fec <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	e01a      	b.n	8001684 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 800164e:	2210      	movs	r2, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	2201      	movs	r2, #1
 800165a:	4619      	mov	r1, r3
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <flower_on+0x5c>)
 800165e:	f002 fcc5 	bl	8003fec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8001662:	2208      	movs	r2, #8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	fa42 f303 	asr.w	r3, r2, r3
 800166a:	b29b      	uxth	r3, r3
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <flower_on+0x5c>)
 8001672:	f002 fcbb 	bl	8003fec <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001676:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800167a:	f001 fe03 	bl	8003284 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3301      	adds	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b03      	cmp	r3, #3
 8001688:	dde1      	ble.n	800164e <flower_on+0x16>
	}
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020c00 	.word	0x40020c00

08001698 <flower_off>:


void flower_off()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	21ff      	movs	r1, #255	; 0xff
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <flower_off+0x5c>)
 80016a4:	f002 fca2 	bl	8003fec <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	e01a      	b.n	80016e4 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	fa42 f303 	asr.w	r3, r2, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <flower_off+0x5c>)
 80016be:	f002 fc95 	bl	8003fec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	4619      	mov	r1, r3
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <flower_off+0x5c>)
 80016d2:	f002 fc8b 	bl	8003fec <HAL_GPIO_WritePin>
		HAL_Delay(300);
 80016d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016da:	f001 fdd3 	bl	8003284 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	dde1      	ble.n	80016ae <flower_off+0x16>
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020c00 	.word	0x40020c00

080016f8 <led_keepon_up>:

void led_keepon_up()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e00f      	b.n	8001724 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8001704:	2201      	movs	r2, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	b29b      	uxth	r3, r3
 800170e:	2201      	movs	r2, #1
 8001710:	4619      	mov	r1, r3
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <led_keepon_up+0x3c>)
 8001714:	f002 fc6a 	bl	8003fec <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001718:	20c8      	movs	r0, #200	; 0xc8
 800171a:	f001 fdb3 	bl	8003284 <HAL_Delay>
	for (int i=0; i < 8; i++)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b07      	cmp	r3, #7
 8001728:	ddec      	ble.n	8001704 <led_keepon_up+0xc>
	}
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020c00 	.word	0x40020c00

08001738 <led_keepon_down>:

void led_keepon_down()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	e00f      	b.n	8001764 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	fa42 f303 	asr.w	r3, r2, r3
 800174c:	b29b      	uxth	r3, r3
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <led_keepon_down+0x3c>)
 8001754:	f002 fc4a 	bl	8003fec <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f001 fd93 	bl	8003284 <HAL_Delay>
	for (int i=0; i < 8; i++)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b07      	cmp	r3, #7
 8001768:	ddec      	ble.n	8001744 <led_keepon_down+0xc>
	}
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40020c00 	.word	0x40020c00

08001778 <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <led_on_up+0x50>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2bc7      	cmp	r3, #199	; 0xc7
 8001782:	dd1e      	ble.n	80017c2 <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <led_on_up+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		led_all_off();
 800178a:	f000 f861 	bl	8001850 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <led_on_up+0x54>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <led_on_up+0x58>)
 80017a0:	f002 fc24 	bl	8003fec <HAL_GPIO_WritePin>
		i++;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <led_on_up+0x54>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <led_on_up+0x54>)
 80017ac:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <led_on_up+0x54>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b07      	cmp	r3, #7
 80017b4:	dd05      	ble.n	80017c2 <led_on_up+0x4a>
		{
			i=0;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <led_on_up+0x54>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <led_on_up+0x5c>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000c08 	.word	0x20000c08
 80017cc:	20000214 	.word	0x20000214
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	20000210 	.word	0x20000210

080017d8 <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <led_on_down+0x50>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2bc7      	cmp	r3, #199	; 0xc7
 80017e2:	dd1e      	ble.n	8001822 <led_on_down+0x4a>
	{
		t1ms_counter=0;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <led_on_down+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
		led_all_off();
 80017ea:	f000 f831 	bl	8001850 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <led_on_down+0x54>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	fa42 f303 	asr.w	r3, r2, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2201      	movs	r2, #1
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <led_on_down+0x58>)
 8001800:	f002 fbf4 	bl	8003fec <HAL_GPIO_WritePin>
		i++;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <led_on_down+0x54>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <led_on_down+0x54>)
 800180c:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <led_on_down+0x54>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b07      	cmp	r3, #7
 8001814:	dd05      	ble.n	8001822 <led_on_down+0x4a>
		{
			i=0;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <led_on_down+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <led_on_down+0x5c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000c08 	.word	0x20000c08
 800182c:	20000218 	.word	0x20000218
 8001830:	40020c00 	.word	0x40020c00
 8001834:	20000210 	.word	0x20000210

08001838 <led_all_on>:

void led_all_on(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	21ff      	movs	r1, #255	; 0xff
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <led_all_on+0x14>)
 8001842:	f002 fbd3 	bl	8003fec <HAL_GPIO_WritePin>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020c00 	.word	0x40020c00

08001850 <led_all_off>:

void led_all_off(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	21ff      	movs	r1, #255	; 0xff
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <led_all_off+0x14>)
 800185a:	f002 fbc7 	bl	8003fec <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020c00 	.word	0x40020c00

08001868 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_SYSTICK_Handler+0x18>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_SYSTICK_Handler+0x18>)
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	20000c08 	.word	0x20000c08

08001884 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800188c:	1d39      	adds	r1, r7, #4
 800188e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001892:	2201      	movs	r2, #1
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <__io_putchar+0x20>)
 8001896:	f006 f87a 	bl	800798e <HAL_UART_Transmit>

  return ch;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000668 	.word	0x20000668

080018a8 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d109      	bne.n	80018ce <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018c2:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018cc:	6013      	str	r3, [r2, #0]
	}
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40014400 	.word	0x40014400
 80018e0:	20000c00 	.word	0x20000c00
 80018e4:	20000c04 	.word	0x20000c04

080018e8 <delay_us>:

void delay_us(unsigned long us)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <delay_us+0x2c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 80018f8:	bf00      	nop
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <delay_us+0x2c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d8f9      	bhi.n	80018fa <delay_us+0x12>
		;
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000620 	.word	0x20000620

08001918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191c:	f001 fc40 	bl	80031a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001920:	f000 f85e 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001924:	f000 fc14 	bl	8002150 <MX_GPIO_Init>
  MX_ETH_Init();
 8001928:	f000 f8c6 	bl	8001ab8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800192c:	f000 fb8e 	bl	800204c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001930:	f000 fbe0 	bl	80020f4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001934:	f000 fbb4 	bl	80020a0 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001938:	f000 fb40 	bl	8001fbc <MX_TIM10_Init>
  MX_TIM11_Init();
 800193c:	f000 fb62 	bl	8002004 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001940:	f000 f9fc 	bl	8001d3c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001944:	f000 f906 	bl	8001b54 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001948:	f000 fa4c 	bl	8001de4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800194c:	f000 f99c 	bl	8001c88 <MX_TIM2_Init>
  MX_RTC_Init();
 8001950:	f000 f940 	bl	8001bd4 <MX_RTC_Init>
  MX_TIM5_Init();
 8001954:	f000 fabc 	bl	8001ed0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8001958:	2201      	movs	r2, #1
 800195a:	4917      	ldr	r1, [pc, #92]	; (80019b8 <main+0xa0>)
 800195c:	4817      	ldr	r0, [pc, #92]	; (80019bc <main+0xa4>)
 800195e:	f006 f8a8 	bl	8007ab2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8001962:	2201      	movs	r2, #1
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <main+0xa8>)
 8001966:	4817      	ldr	r0, [pc, #92]	; (80019c4 <main+0xac>)
 8001968:	f006 f8a3 	bl	8007ab2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 800196c:	4816      	ldr	r0, [pc, #88]	; (80019c8 <main+0xb0>)
 800196e:	f004 fae1 	bl	8005f34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8001972:	4816      	ldr	r0, [pc, #88]	; (80019cc <main+0xb4>)
 8001974:	f004 fade 	bl	8005f34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8001978:	2100      	movs	r1, #0
 800197a:	4815      	ldr	r0, [pc, #84]	; (80019d0 <main+0xb8>)
 800197c:	f004 fe38 	bl	80065f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);	// for DC motor PWM cont
 8001980:	2100      	movs	r1, #0
 8001982:	4814      	ldr	r0, [pc, #80]	; (80019d4 <main+0xbc>)
 8001984:	f004 fcce 	bl	8006324 <HAL_TIM_PWM_Start_IT>
 // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001988:	210c      	movs	r1, #12
 800198a:	4813      	ldr	r0, [pc, #76]	; (80019d8 <main+0xc0>)
 800198c:	f004 fb92 	bl	80060b4 <HAL_TIM_PWM_Start>


  DHT11_Init();
 8001990:	f7ff f9f6 	bl	8000d80 <DHT11_Init>
  i2c_lcd_init();
 8001994:	f7ff fb94 	bl	80010c0 <i2c_lcd_init>

  TIM10_10ms_counter=0;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <main+0xc4>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
//  led_main();
//  DHT11_main();
//  i2c_lcd_main();
//  servo_motor_test_main();
  buzzer_main();
 800199e:	f7ff fa9d 	bl	8000edc <buzzer_main>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	DHT11_processing();
 	pc_command_processing();
 80019a2:	f001 fa83 	bl	8002eac <pc_command_processing>
// 	bt_command_processing();
 	ultrasonic_processing();
 80019a6:	f001 fb57 	bl	8003058 <ultrasonic_processing>
// 	dcmotor_pwm_control();
 	get_rtc();
 80019aa:	f7ff fc0f 	bl	80011cc <get_rtc>
 	lcd_display_mode_select();
 80019ae:	f7ff f9f7 	bl	8000da0 <lcd_display_mode_select>
 	set_time_button_ui();
 80019b2:	f7ff fd59 	bl	8001468 <set_time_button_ui>
 	pc_command_processing();
 80019b6:	e7f4      	b.n	80019a2 <main+0x8a>
 80019b8:	20000bfc 	.word	0x20000bfc
 80019bc:	20000668 	.word	0x20000668
 80019c0:	20000bfd 	.word	0x20000bfd
 80019c4:	200006ac 	.word	0x200006ac
 80019c8:	200005d8 	.word	0x200005d8
 80019cc:	20000620 	.word	0x20000620
 80019d0:	20000500 	.word	0x20000500
 80019d4:	20000548 	.word	0x20000548
 80019d8:	20000590 	.word	0x20000590
 80019dc:	20000c00 	.word	0x20000c00

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 fb28 	bl	8009044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <SystemClock_Config+0xd4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <SystemClock_Config+0xd4>)
 8001a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <SystemClock_Config+0xd4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a3c:	2309      	movs	r3, #9
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a46:	2301      	movs	r3, #1
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a54:	2304      	movs	r3, #4
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a58:	23a8      	movs	r3, #168	; 0xa8
 8001a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a60:	2307      	movs	r3, #7
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 f8bd 	bl	8004be8 <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a74:	f000 fc9a 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a78:	230f      	movs	r3, #15
 8001a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2105      	movs	r1, #5
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fb1e 	bl	80050d8 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aa2:	f000 fc83 	bl	80023ac <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3750      	adds	r7, #80	; 0x50
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_ETH_Init+0x84>)
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <MX_ETH_Init+0x88>)
 8001ac0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001ad0:	22e1      	movs	r2, #225	; 0xe1
 8001ad2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_ETH_Init+0x84>)
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <MX_ETH_Init+0x8c>)
 8001aea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_ETH_Init+0x84>)
 8001aee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001af2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_ETH_Init+0x84>)
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <MX_ETH_Init+0x90>)
 8001af8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_ETH_Init+0x84>)
 8001afc:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <MX_ETH_Init+0x94>)
 8001afe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_ETH_Init+0x84>)
 8001b02:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b06:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_ETH_Init+0x84>)
 8001b0a:	f001 fd83 	bl	8003614 <HAL_ETH_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001b14:	f000 fc4a 	bl	80023ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_ETH_Init+0x98>)
 8001b1e:	f007 fa91 	bl	8009044 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_ETH_Init+0x98>)
 8001b24:	2221      	movs	r2, #33	; 0x21
 8001b26:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_ETH_Init+0x98>)
 8001b2a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b2e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <MX_ETH_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000394 	.word	0x20000394
 8001b40:	40028000 	.word	0x40028000
 8001b44:	20000c0c 	.word	0x20000c0c
 8001b48:	200002f4 	.word	0x200002f4
 8001b4c:	20000254 	.word	0x20000254
 8001b50:	2000021c 	.word	0x2000021c

08001b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_I2C1_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <MX_I2C1_Init+0x7c>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001b92:	f002 fa45 	bl	8004020 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f000 fc06 	bl	80023ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001ba4:	f002 fe87 	bl	80048b6 <HAL_I2CEx_ConfigAnalogFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bae:	f000 fbfd 	bl	80023ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_I2C1_Init+0x74>)
 8001bb6:	f002 feba 	bl	800492e <HAL_I2CEx_ConfigDigitalFilter>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f000 fbf4 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000444 	.word	0x20000444
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	000186a0 	.word	0x000186a0

08001bd4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MX_RTC_Init+0xac>)
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <MX_RTC_Init+0xb0>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <MX_RTC_Init+0xac>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_RTC_Init+0xac>)
 8001bfa:	227f      	movs	r2, #127	; 0x7f
 8001bfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c16:	481a      	ldr	r0, [pc, #104]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c18:	f003 fe3e 	bl	8005898 <HAL_RTC_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c22:	f000 fbc3 	bl	80023ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001c26:	2309      	movs	r3, #9
 8001c28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x39;
 8001c2a:	2339      	movs	r3, #57	; 0x39
 8001c2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480f      	ldr	r0, [pc, #60]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c42:	f003 fe9f 	bl	8005984 <HAL_RTC_SetTime>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f000 fbae 	bl	80023ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c50:	2301      	movs	r3, #1
 8001c52:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001c54:	2310      	movs	r3, #16
 8001c56:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001c58:	2316      	movs	r3, #22
 8001c5a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001c5c:	2323      	movs	r3, #35	; 0x23
 8001c5e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <MX_RTC_Init+0xac>)
 8001c68:	f003 ff84 	bl	8005b74 <HAL_RTC_SetDate>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c72:	f000 fb9b 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000498 	.word	0x20000498
 8001c84:	40002800 	.word	0x40002800

08001c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cb4:	f240 628f 	movw	r2, #1679	; 0x68f
 8001cb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cd4:	4818      	ldr	r0, [pc, #96]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cd6:	f004 f99d 	bl	8006014 <HAL_TIM_PWM_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ce0:	f000 fb64 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cec:	f107 0320 	add.w	r3, r7, #32
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001cf4:	f005 fd6e 	bl	80077d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001cfe:	f000 fb55 	bl	80023ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d02:	2360      	movs	r3, #96	; 0x60
 8001d04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001d06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2200      	movs	r2, #0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001d1c:	f004 ff34 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001d26:	f000 fb41 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM2_Init+0xb0>)
 8001d2c:	f000 fd9c 	bl	8002868 <HAL_TIM_MspPostInit>

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200004b8 	.word	0x200004b8

08001d3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d5a:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <MX_TIM3_Init+0xa4>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d60:	2253      	movs	r2, #83	; 0x53
 8001d62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d7e:	4817      	ldr	r0, [pc, #92]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d80:	f004 fbe6 	bl	8006550 <HAL_TIM_IC_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d8a:	f000 fb0f 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480f      	ldr	r0, [pc, #60]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001d9e:	f005 fd19 	bl	80077d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001da8:	f000 fb00 	bl	80023ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dac:	230a      	movs	r3, #10
 8001dae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001db0:	2301      	movs	r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM3_Init+0xa0>)
 8001dc4:	f004 fe44 	bl	8006a50 <HAL_TIM_IC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001dce:	f000 faed 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000500 	.word	0x20000500
 8001de0:	40000400 	.word	0x40000400

08001de4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e16:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <MX_TIM4_Init+0xe8>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e1c:	f240 3247 	movw	r2, #839	; 0x347
 8001e20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e2a:	2263      	movs	r2, #99	; 0x63
 8001e2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e3a:	4823      	ldr	r0, [pc, #140]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e3c:	f004 f82a 	bl	8005e94 <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e46:	f000 fab1 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e54:	4619      	mov	r1, r3
 8001e56:	481c      	ldr	r0, [pc, #112]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e58:	f004 ff58 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e62:	f000 faa3 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e66:	4818      	ldr	r0, [pc, #96]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e68:	f004 f8d4 	bl	8006014 <HAL_TIM_PWM_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e72:	f000 fa9b 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4619      	mov	r1, r3
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001e86:	f005 fca5 	bl	80077d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e90:	f000 fa8c 	bl	80023ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e94:	2360      	movs	r3, #96	; 0x60
 8001e96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8001e98:	2345      	movs	r3, #69	; 0x45
 8001e9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001eac:	f004 fe6c 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001eb6:	f000 fa79 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <MX_TIM4_Init+0xe4>)
 8001ebc:	f000 fcd4 	bl	8002868 <HAL_TIM_MspPostInit>

}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	; 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000548 	.word	0x20000548
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	f107 0320 	add.w	r3, r7, #32
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f02:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <MX_TIM5_Init+0xe8>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f08:	2233      	movs	r2, #51	; 0x33
 8001f0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f14:	f240 128f 	movw	r2, #399	; 0x18f
 8001f18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f26:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f28:	f003 ffb4 	bl	8005e94 <HAL_TIM_Base_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001f32:	f000 fa3b 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f40:	4619      	mov	r1, r3
 8001f42:	481c      	ldr	r0, [pc, #112]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f44:	f004 fee2 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001f4e:	f000 fa2d 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f52:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f54:	f004 f85e 	bl	8006014 <HAL_TIM_PWM_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001f5e:	f000 fa25 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f6a:	f107 0320 	add.w	r3, r7, #32
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f72:	f005 fc2f 	bl	80077d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001f7c:	f000 fa16 	bl	80023ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f80:	2360      	movs	r3, #96	; 0x60
 8001f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001f84:	23c7      	movs	r3, #199	; 0xc7
 8001f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	220c      	movs	r2, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001f98:	f004 fdf6 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001fa2:	f000 fa03 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <MX_TIM5_Init+0xe4>)
 8001fa8:	f000 fc5e 	bl	8002868 <HAL_TIM_MspPostInit>

}
 8001fac:	bf00      	nop
 8001fae:	3738      	adds	r7, #56	; 0x38
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000590 	.word	0x20000590
 8001fb8:	40000c00 	.word	0x40000c00

08001fbc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <MX_TIM10_Init+0x44>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fc8:	22a7      	movs	r2, #167	; 0xa7
 8001fca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fd8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_TIM10_Init+0x40>)
 8001fe8:	f003 ff54 	bl	8005e94 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ff2:	f000 f9db 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200005d8 	.word	0x200005d8
 8002000:	40014400 	.word	0x40014400

08002004 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_TIM11_Init+0x40>)
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <MX_TIM11_Init+0x44>)
 800200c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <MX_TIM11_Init+0x40>)
 8002010:	22a7      	movs	r2, #167	; 0xa7
 8002012:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_TIM11_Init+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_TIM11_Init+0x40>)
 800201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002020:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_TIM11_Init+0x40>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_TIM11_Init+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_TIM11_Init+0x40>)
 8002030:	f003 ff30 	bl	8005e94 <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800203a:	f000 f9b7 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000620 	.word	0x20000620
 8002048:	40014800 	.word	0x40014800

0800204c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_USART3_UART_Init+0x50>)
 8002054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002058:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800205c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_USART3_UART_Init+0x4c>)
 8002084:	f005 fc36 	bl	80078f4 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800208e:	f000 f98d 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000668 	.word	0x20000668
 800209c:	40004800 	.word	0x40004800

080020a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_USART6_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART6_UART_Init+0x4c>)
 80020d8:	f005 fc0c 	bl	80078f4 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 f963 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200006ac 	.word	0x200006ac
 80020f0:	40011400 	.word	0x40011400

080020f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002102:	2204      	movs	r2, #4
 8002104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002108:	2202      	movs	r2, #2
 800210a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002114:	2202      	movs	r2, #2
 8002116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800211a:	2201      	movs	r2, #1
 800211c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800212c:	2201      	movs	r2, #1
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002138:	f002 fc38 	bl	80049ac <HAL_PCD_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002142:	f000 f933 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200006f0 	.word	0x200006f0

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08e      	sub	sp, #56	; 0x38
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <MX_GPIO_Init+0x23c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a87      	ldr	r2, [pc, #540]	; (800238c <MX_GPIO_Init+0x23c>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b85      	ldr	r3, [pc, #532]	; (800238c <MX_GPIO_Init+0x23c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <MX_GPIO_Init+0x23c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a80      	ldr	r2, [pc, #512]	; (800238c <MX_GPIO_Init+0x23c>)
 800218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b7e      	ldr	r3, [pc, #504]	; (800238c <MX_GPIO_Init+0x23c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <MX_GPIO_Init+0x23c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a79      	ldr	r2, [pc, #484]	; (800238c <MX_GPIO_Init+0x23c>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b77      	ldr	r3, [pc, #476]	; (800238c <MX_GPIO_Init+0x23c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	4b73      	ldr	r3, [pc, #460]	; (800238c <MX_GPIO_Init+0x23c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a72      	ldr	r2, [pc, #456]	; (800238c <MX_GPIO_Init+0x23c>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b70      	ldr	r3, [pc, #448]	; (800238c <MX_GPIO_Init+0x23c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b6c      	ldr	r3, [pc, #432]	; (800238c <MX_GPIO_Init+0x23c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a6b      	ldr	r2, [pc, #428]	; (800238c <MX_GPIO_Init+0x23c>)
 80021e0:	f043 0320 	orr.w	r3, r3, #32
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b69      	ldr	r3, [pc, #420]	; (800238c <MX_GPIO_Init+0x23c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b65      	ldr	r3, [pc, #404]	; (800238c <MX_GPIO_Init+0x23c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a64      	ldr	r2, [pc, #400]	; (800238c <MX_GPIO_Init+0x23c>)
 80021fc:	f043 0310 	orr.w	r3, r3, #16
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b62      	ldr	r3, [pc, #392]	; (800238c <MX_GPIO_Init+0x23c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <MX_GPIO_Init+0x23c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a5d      	ldr	r2, [pc, #372]	; (800238c <MX_GPIO_Init+0x23c>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <MX_GPIO_Init+0x23c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <MX_GPIO_Init+0x23c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a56      	ldr	r2, [pc, #344]	; (800238c <MX_GPIO_Init+0x23c>)
 8002234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <MX_GPIO_Init+0x23c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2101      	movs	r1, #1
 800224a:	4851      	ldr	r0, [pc, #324]	; (8002390 <MX_GPIO_Init+0x240>)
 800224c:	f001 fece 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f244 0181 	movw	r1, #16513	; 0x4081
 8002256:	484f      	ldr	r0, [pc, #316]	; (8002394 <MX_GPIO_Init+0x244>)
 8002258:	f001 fec8 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002262:	484d      	ldr	r0, [pc, #308]	; (8002398 <MX_GPIO_Init+0x248>)
 8002264:	f001 fec2 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800226e:	484b      	ldr	r0, [pc, #300]	; (800239c <MX_GPIO_Init+0x24c>)
 8002270:	f001 febc 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	4849      	ldr	r0, [pc, #292]	; (80023a0 <MX_GPIO_Init+0x250>)
 800227a:	f001 feb7 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800227e:	2200      	movs	r2, #0
 8002280:	21ff      	movs	r1, #255	; 0xff
 8002282:	4848      	ldr	r0, [pc, #288]	; (80023a4 <MX_GPIO_Init+0x254>)
 8002284:	f001 feb2 	bl	8003fec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	4842      	ldr	r0, [pc, #264]	; (80023a8 <MX_GPIO_Init+0x258>)
 80022a0:	f001 fce0 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4835      	ldr	r0, [pc, #212]	; (8002390 <MX_GPIO_Init+0x240>)
 80022bc:	f001 fcd2 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d6:	4619      	mov	r1, r3
 80022d8:	482e      	ldr	r0, [pc, #184]	; (8002394 <MX_GPIO_Init+0x244>)
 80022da:	f001 fcc3 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4828      	ldr	r0, [pc, #160]	; (8002398 <MX_GPIO_Init+0x248>)
 80022f8:	f001 fcb4 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin;
 80022fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002312:	4619      	mov	r1, r3
 8002314:	4821      	ldr	r0, [pc, #132]	; (800239c <MX_GPIO_Init+0x24c>)
 8002316:	f001 fca5 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 800231a:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	481b      	ldr	r0, [pc, #108]	; (800239c <MX_GPIO_Init+0x24c>)
 8002330:	f001 fc98 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002334:	2340      	movs	r3, #64	; 0x40
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002348:	4619      	mov	r1, r3
 800234a:	4815      	ldr	r0, [pc, #84]	; (80023a0 <MX_GPIO_Init+0x250>)
 800234c:	f001 fc8a 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	480f      	ldr	r0, [pc, #60]	; (80023a0 <MX_GPIO_Init+0x250>)
 8002364:	f001 fc7e 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002368:	23ff      	movs	r3, #255	; 0xff
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236c:	2301      	movs	r3, #1
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <MX_GPIO_Init+0x254>)
 8002380:	f001 fc70 	bl	8003c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40021400 	.word	0x40021400
 800239c:	40021000 	.word	0x40021000
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40020800 	.word	0x40020800

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08e      	sub	sp, #56	; 0x38
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_ETH_MspInit+0x174>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f040 80a4 	bne.w	8002574 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_ETH_MspInit+0x178>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_ETH_MspInit+0x178>)
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_ETH_MspInit+0x178>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_ETH_MspInit+0x178>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_ETH_MspInit+0x178>)
 8002452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b49      	ldr	r3, [pc, #292]	; (8002580 <HAL_ETH_MspInit+0x178>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	4b45      	ldr	r3, [pc, #276]	; (8002580 <HAL_ETH_MspInit+0x178>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a44      	ldr	r2, [pc, #272]	; (8002580 <HAL_ETH_MspInit+0x178>)
 800246e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_ETH_MspInit+0x178>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <HAL_ETH_MspInit+0x178>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <HAL_ETH_MspInit+0x178>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_ETH_MspInit+0x178>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4a36      	ldr	r2, [pc, #216]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6313      	str	r3, [r2, #48]	; 0x30
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	6313      	str	r3, [r2, #48]	; 0x30
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_ETH_MspInit+0x178>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024f0:	2332      	movs	r3, #50	; 0x32
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002500:	230b      	movs	r3, #11
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	481e      	ldr	r0, [pc, #120]	; (8002584 <HAL_ETH_MspInit+0x17c>)
 800250c:	f001 fbaa 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002510:	2386      	movs	r3, #134	; 0x86
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002520:	230b      	movs	r3, #11
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	4817      	ldr	r0, [pc, #92]	; (8002588 <HAL_ETH_MspInit+0x180>)
 800252c:	f001 fb9a 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002542:	230b      	movs	r3, #11
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	480f      	ldr	r0, [pc, #60]	; (800258c <HAL_ETH_MspInit+0x184>)
 800254e:	f001 fb89 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002552:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002564:	230b      	movs	r3, #11
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	4619      	mov	r1, r3
 800256e:	4808      	ldr	r0, [pc, #32]	; (8002590 <HAL_ETH_MspInit+0x188>)
 8002570:	f001 fb78 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002574:	bf00      	nop
 8002576:	3738      	adds	r7, #56	; 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40028000 	.word	0x40028000
 8002580:	40023800 	.word	0x40023800
 8002584:	40020800 	.word	0x40020800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40021800 	.word	0x40021800

08002594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_I2C_MspInit+0x84>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12c      	bne.n	8002610 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d8:	2312      	movs	r3, #18
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e4:	2304      	movs	r3, #4
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	480c      	ldr	r0, [pc, #48]	; (8002620 <HAL_I2C_MspInit+0x8c>)
 80025f0:	f001 fb38 	bl	8003c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_I2C_MspInit+0x88>)
 80025fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002602:	6413      	str	r3, [r2, #64]	; 0x40
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_I2C_MspInit+0x88>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40005400 	.word	0x40005400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020400 	.word	0x40020400

08002624 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	; 0x38
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	2230      	movs	r2, #48	; 0x30
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f006 fd05 	bl	8009044 <memset>
  if(hrtc->Instance==RTC)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_RTC_MspInit+0x4c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d111      	bne.n	8002668 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002644:	2320      	movs	r3, #32
 8002646:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	4618      	mov	r0, r3
 8002654:	f002 ff60 	bl	8005518 <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800265e:	f7ff fea5 	bl	80023ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RTC_MspInit+0x50>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002668:	bf00      	nop
 800266a:	3738      	adds	r7, #56	; 0x38
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40002800 	.word	0x40002800
 8002674:	42470e3c 	.word	0x42470e3c

08002678 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d115      	bne.n	80026b6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_TIM_PWM_MspInit+0x48>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <HAL_TIM_PWM_MspInit+0x48>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_TIM_PWM_MspInit+0x48>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	201c      	movs	r0, #28
 80026ac:	f000 fee9 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026b0:	201c      	movs	r0, #28
 80026b2:	f000 ff02 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <HAL_TIM_IC_MspInit+0x94>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d133      	bne.n	800274e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_TIM_IC_MspInit+0x98>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_TIM_IC_MspInit+0x98>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_TIM_IC_MspInit+0x98>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_TIM_IC_MspInit+0x98>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_TIM_IC_MspInit+0x98>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_TIM_IC_MspInit+0x98>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800271e:	2340      	movs	r3, #64	; 0x40
 8002720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800272e:	2302      	movs	r3, #2
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <HAL_TIM_IC_MspInit+0x9c>)
 800273a:	f001 fa93 	bl	8003c64 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	201d      	movs	r0, #29
 8002744:	f000 fe9d 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002748:	201d      	movs	r0, #29
 800274a:	f000 feb6 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	; 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000400 	.word	0x40000400
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a38      	ldr	r2, [pc, #224]	; (8002854 <HAL_TIM_Base_MspInit+0xf0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d116      	bne.n	80027a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a36      	ldr	r2, [pc, #216]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	201e      	movs	r0, #30
 8002798:	f000 fe73 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800279c:	201e      	movs	r0, #30
 800279e:	f000 fe8c 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80027a2:	e052      	b.n	800284a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	; (800285c <HAL_TIM_Base_MspInit+0xf8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d116      	bne.n	80027dc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2032      	movs	r0, #50	; 0x32
 80027d0:	f000 fe57 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027d4:	2032      	movs	r0, #50	; 0x32
 80027d6:	f000 fe70 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 80027da:	e036      	b.n	800284a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_TIM_Base_MspInit+0xfc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d116      	bne.n	8002814 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	2019      	movs	r0, #25
 8002808:	f000 fe3b 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800280c:	2019      	movs	r0, #25
 800280e:	f000 fe54 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 8002812:	e01a      	b.n	800284a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_TIM_Base_MspInit+0x100>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d115      	bne.n	800284a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_TIM_Base_MspInit+0xf4>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	201a      	movs	r0, #26
 8002840:	f000 fe1f 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002844:	201a      	movs	r0, #26
 8002846:	f000 fe38 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40000800 	.word	0x40000800
 8002858:	40023800 	.word	0x40023800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800

08002868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002888:	d11e      	bne.n	80028c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a33      	ldr	r2, [pc, #204]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 80028a6:	2320      	movs	r3, #32
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028b6:	2301      	movs	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	4828      	ldr	r0, [pc, #160]	; (8002964 <HAL_TIM_MspPostInit+0xfc>)
 80028c2:	f001 f9cf 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80028c6:	e047      	b.n	8002958 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <HAL_TIM_MspPostInit+0x100>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11f      	bne.n	8002912 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002900:	2302      	movs	r3, #2
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4818      	ldr	r0, [pc, #96]	; (800296c <HAL_TIM_MspPostInit+0x104>)
 800290c:	f001 f9aa 	bl	8003c64 <HAL_GPIO_Init>
}
 8002910:	e022      	b.n	8002958 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_TIM_MspPostInit+0x108>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d11d      	bne.n	8002958 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002938:	2308      	movs	r3, #8
 800293a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002948:	2302      	movs	r3, #2
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <HAL_TIM_MspPostInit+0xfc>)
 8002954:	f001 f986 	bl	8003c64 <HAL_GPIO_Init>
}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	40020000 	.word	0x40020000
 8002968:	40000800 	.word	0x40000800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40000c00 	.word	0x40000c00

08002974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	; 0x30
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3a      	ldr	r2, [pc, #232]	; (8002a7c <HAL_UART_MspInit+0x108>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d135      	bne.n	8002a02 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a38      	ldr	r2, [pc, #224]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029e0:	2307      	movs	r3, #7
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	4826      	ldr	r0, [pc, #152]	; (8002a84 <HAL_UART_MspInit+0x110>)
 80029ec:	f001 f93a 	bl	8003c64 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2027      	movs	r0, #39	; 0x27
 80029f6:	f000 fd44 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029fa:	2027      	movs	r0, #39	; 0x27
 80029fc:	f000 fd5d 	bl	80034ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a00:	e038      	b.n	8002a74 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a20      	ldr	r2, [pc, #128]	; (8002a88 <HAL_UART_MspInit+0x114>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d133      	bne.n	8002a74 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 8002a16:	f043 0320 	orr.w	r3, r3, #32
 8002a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	6313      	str	r3, [r2, #48]	; 0x30
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_UART_MspInit+0x10c>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a44:	23c0      	movs	r3, #192	; 0xc0
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a54:	2308      	movs	r3, #8
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	480b      	ldr	r0, [pc, #44]	; (8002a8c <HAL_UART_MspInit+0x118>)
 8002a60:	f001 f900 	bl	8003c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	2047      	movs	r0, #71	; 0x47
 8002a6a:	f000 fd0a 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a6e:	2047      	movs	r0, #71	; 0x47
 8002a70:	f000 fd23 	bl	80034ba <HAL_NVIC_EnableIRQ>
}
 8002a74:	bf00      	nop
 8002a76:	3730      	adds	r7, #48	; 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40004800 	.word	0x40004800
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40011400 	.word	0x40011400
 8002a8c:	40020800 	.word	0x40020800

08002a90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab0:	d13f      	bne.n	8002b32 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ace:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4815      	ldr	r0, [pc, #84]	; (8002b40 <HAL_PCD_MspInit+0xb0>)
 8002aec:	f001 f8ba 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	480e      	ldr	r0, [pc, #56]	; (8002b40 <HAL_PCD_MspInit+0xb0>)
 8002b06:	f001 f8ad 	bl	8003c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	6353      	str	r3, [r2, #52]	; 0x34
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_PCD_MspInit+0xac>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000

08002b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <NMI_Handler+0x4>

08002b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4e:	e7fe      	b.n	8002b4e <HardFault_Handler+0x4>

08002b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <MemManage_Handler+0x4>

08002b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <BusFault_Handler+0x4>

08002b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <UsageFault_Handler+0x4>

08002b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b90:	f000 fb58 	bl	8003244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8002b94:	f7fe fe68 	bl	8001868 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ba2:	f003 fe4d 	bl	8006840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200005d8 	.word	0x200005d8

08002bb0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002bb6:	f003 fe43 	bl	8006840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000620 	.word	0x20000620

08002bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM2_IRQHandler+0x10>)
 8002bca:	f003 fe39 	bl	8006840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200004b8 	.word	0x200004b8

08002bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <TIM3_IRQHandler+0x10>)
 8002bde:	f003 fe2f 	bl	8006840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000500 	.word	0x20000500

08002bec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <TIM4_IRQHandler+0x10>)
 8002bf2:	f003 fe25 	bl	8006840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000548 	.word	0x20000548

08002c00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USART3_IRQHandler+0x10>)
 8002c06:	f004 ff85 	bl	8007b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000668 	.word	0x20000668

08002c14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <TIM5_IRQHandler+0x10>)
 8002c1a:	f003 fe11 	bl	8006840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000590 	.word	0x20000590

08002c28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <USART6_IRQHandler+0x10>)
 8002c2e:	f004 ff71 	bl	8007b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200006ac 	.word	0x200006ac

08002c3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e00a      	b.n	8002c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c4e:	f3af 8000 	nop.w
 8002c52:	4601      	mov	r1, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	b2ca      	uxtb	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf0      	blt.n	8002c4e <_read+0x12>
  }

  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e009      	b.n	8002c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fdf7 	bl	8001884 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dbf1      	blt.n	8002c88 <_write+0x12>
  }
  return len;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_close>:

int _close(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <_isatty>:

int _isatty(int file)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <_sbrk+0x5c>)
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <_sbrk+0x60>)
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <_sbrk+0x64>)
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <_sbrk+0x68>)
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d207      	bcs.n	8002d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d48:	f006 f952 	bl	8008ff0 <__errno>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	220c      	movs	r2, #12
 8002d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	e009      	b.n	8002d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <_sbrk+0x64>)
 8002d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20030000 	.word	0x20030000
 8002d78:	00000400 	.word	0x00000400
 8002d7c:	20000c14 	.word	0x20000c14
 8002d80:	20000c98 	.word	0x20000c98

08002d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <SystemInit+0x20>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <SystemInit+0x20>)
 8002d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <HAL_UART_RxCpltCallback+0xd4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d12c      	bne.n	8002e12 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b27      	cmp	r3, #39	; 0x27
 8002dbe:	dc1d      	bgt.n	8002dfc <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_UART_RxCpltCallback+0xdc>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b0a      	cmp	r3, #10
 8002dc6:	d003      	beq.n	8002dd0 <HAL_UART_RxCpltCallback+0x28>
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_UART_RxCpltCallback+0xdc>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b0d      	cmp	r3, #13
 8002dce:	d10b      	bne.n	8002de8 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <HAL_UART_RxCpltCallback+0xe0>)
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_UART_RxCpltCallback+0xe4>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e00f      	b.n	8002e08 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	4924      	ldr	r1, [pc, #144]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002df0:	600a      	str	r2, [r1, #0]
 8002df2:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <HAL_UART_RxCpltCallback+0xdc>)
 8002df4:	7811      	ldrb	r1, [r2, #0]
 8002df6:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <HAL_UART_RxCpltCallback+0xe0>)
 8002df8:	54d1      	strb	r1, [r2, r3]
 8002dfa:	e005      	b.n	8002e08 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8002e02:	4823      	ldr	r0, [pc, #140]	; (8002e90 <HAL_UART_RxCpltCallback+0xe8>)
 8002e04:	f006 f9ac 	bl	8009160 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	491e      	ldr	r1, [pc, #120]	; (8002e84 <HAL_UART_RxCpltCallback+0xdc>)
 8002e0c:	481b      	ldr	r0, [pc, #108]	; (8002e7c <HAL_UART_RxCpltCallback+0xd4>)
 8002e0e:	f004 fe50 	bl	8007ab2 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_UART_RxCpltCallback+0xec>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d12c      	bne.n	8002e74 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_UART_RxCpltCallback+0xf0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b27      	cmp	r3, #39	; 0x27
 8002e20:	dc1d      	bgt.n	8002e5e <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8002e22:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_UART_RxCpltCallback+0xf4>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d003      	beq.n	8002e32 <HAL_UART_RxCpltCallback+0x8a>
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_UART_RxCpltCallback+0xf4>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b0d      	cmp	r3, #13
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_UART_RxCpltCallback+0xd8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <HAL_UART_RxCpltCallback+0xf8>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_UART_RxCpltCallback+0xfc>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_UART_RxCpltCallback+0xf0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e00f      	b.n	8002e6a <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_UART_RxCpltCallback+0xf0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	4911      	ldr	r1, [pc, #68]	; (8002e98 <HAL_UART_RxCpltCallback+0xf0>)
 8002e52:	600a      	str	r2, [r1, #0]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_UART_RxCpltCallback+0xf4>)
 8002e56:	7811      	ldrb	r1, [r2, #0]
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_UART_RxCpltCallback+0xf8>)
 8002e5a:	54d1      	strb	r1, [r2, r3]
 8002e5c:	e005      	b.n	8002e6a <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_UART_RxCpltCallback+0xf0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <HAL_UART_RxCpltCallback+0x100>)
 8002e66:	f006 f97b 	bl	8009160 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	490b      	ldr	r1, [pc, #44]	; (8002e9c <HAL_UART_RxCpltCallback+0xf4>)
 8002e6e:	4809      	ldr	r0, [pc, #36]	; (8002e94 <HAL_UART_RxCpltCallback+0xec>)
 8002e70:	f004 fe1f 	bl	8007ab2 <HAL_UART_Receive_IT>
	}
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000668 	.word	0x20000668
 8002e80:	20000c40 	.word	0x20000c40
 8002e84:	20000bfc 	.word	0x20000bfc
 8002e88:	20000c18 	.word	0x20000c18
 8002e8c:	20000c44 	.word	0x20000c44
 8002e90:	0800a60c 	.word	0x0800a60c
 8002e94:	200006ac 	.word	0x200006ac
 8002e98:	20000c70 	.word	0x20000c70
 8002e9c:	20000bfd 	.word	0x20000bfd
 8002ea0:	20000c48 	.word	0x20000c48
 8002ea4:	20000c74 	.word	0x20000c74
 8002ea8:	0800a624 	.word	0x0800a624

08002eac <pc_command_processing>:

void pc_command_processing(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <pc_command_processing+0x104>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d079      	beq.n	8002fac <pc_command_processing+0x100>
	{
		newline_detect_flag=0;
 8002eb8:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <pc_command_processing+0x104>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 8002ebe:	483d      	ldr	r0, [pc, #244]	; (8002fb4 <pc_command_processing+0x108>)
 8002ec0:	f006 f94e 	bl	8009160 <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002ec4:	220a      	movs	r2, #10
 8002ec6:	493c      	ldr	r1, [pc, #240]	; (8002fb8 <pc_command_processing+0x10c>)
 8002ec8:	483a      	ldr	r0, [pc, #232]	; (8002fb4 <pc_command_processing+0x108>)
 8002eca:	f006 f971 	bl	80091b0 <strncmp>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <pc_command_processing+0x2e>
		{
			led_all_on();
 8002ed4:	f7fe fcb0 	bl	8001838 <led_all_on>
			return;
 8002ed8:	e068      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002eda:	220b      	movs	r2, #11
 8002edc:	4937      	ldr	r1, [pc, #220]	; (8002fbc <pc_command_processing+0x110>)
 8002ede:	4835      	ldr	r0, [pc, #212]	; (8002fb4 <pc_command_processing+0x108>)
 8002ee0:	f006 f966 	bl	80091b0 <strncmp>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <pc_command_processing+0x44>
		{
			led_all_off();
 8002eea:	f7fe fcb1 	bl	8001850 <led_all_off>
			return;
 8002eee:	e05d      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002ef0:	220b      	movs	r2, #11
 8002ef2:	4933      	ldr	r1, [pc, #204]	; (8002fc0 <pc_command_processing+0x114>)
 8002ef4:	482f      	ldr	r0, [pc, #188]	; (8002fb4 <pc_command_processing+0x108>)
 8002ef6:	f006 f95b 	bl	80091b0 <strncmp>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <pc_command_processing+0x5a>
		{
			led_on_down();
 8002f00:	f7fe fc6a 	bl	80017d8 <led_on_down>
			return;
 8002f04:	e052      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f06:	2209      	movs	r2, #9
 8002f08:	492e      	ldr	r1, [pc, #184]	; (8002fc4 <pc_command_processing+0x118>)
 8002f0a:	482a      	ldr	r0, [pc, #168]	; (8002fb4 <pc_command_processing+0x108>)
 8002f0c:	f006 f950 	bl	80091b0 <strncmp>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <pc_command_processing+0x70>
		{
			led_on_up();
 8002f16:	f7fe fc2f 	bl	8001778 <led_on_up>
			return;
 8002f1a:	e047      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f1c:	2209      	movs	r2, #9
 8002f1e:	492a      	ldr	r1, [pc, #168]	; (8002fc8 <pc_command_processing+0x11c>)
 8002f20:	4824      	ldr	r0, [pc, #144]	; (8002fb4 <pc_command_processing+0x108>)
 8002f22:	f006 f945 	bl	80091b0 <strncmp>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <pc_command_processing+0x86>
		{
			flower_on();
 8002f2c:	f7fe fb84 	bl	8001638 <flower_on>
			return;
 8002f30:	e03c      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f32:	220a      	movs	r2, #10
 8002f34:	4925      	ldr	r1, [pc, #148]	; (8002fcc <pc_command_processing+0x120>)
 8002f36:	481f      	ldr	r0, [pc, #124]	; (8002fb4 <pc_command_processing+0x108>)
 8002f38:	f006 f93a 	bl	80091b0 <strncmp>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <pc_command_processing+0x9c>
		{
			flower_off();
 8002f42:	f7fe fba9 	bl	8001698 <flower_off>
			return;
 8002f46:	e031      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f48:	220d      	movs	r2, #13
 8002f4a:	4921      	ldr	r1, [pc, #132]	; (8002fd0 <pc_command_processing+0x124>)
 8002f4c:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <pc_command_processing+0x108>)
 8002f4e:	f006 f92f 	bl	80091b0 <strncmp>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <pc_command_processing+0xb2>
		{
			led_keepon_up();
 8002f58:	f7fe fbce 	bl	80016f8 <led_keepon_up>
			return;
 8002f5c:	e026      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f5e:	220f      	movs	r2, #15
 8002f60:	491c      	ldr	r1, [pc, #112]	; (8002fd4 <pc_command_processing+0x128>)
 8002f62:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <pc_command_processing+0x108>)
 8002f64:	f006 f924 	bl	80091b0 <strncmp>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <pc_command_processing+0xc8>
		{
			led_keepon_down();
 8002f6e:	f7fe fbe3 	bl	8001738 <led_keepon_down>
			return;
 8002f72:	e01b      	b.n	8002fac <pc_command_processing+0x100>
		}
		//dht11time150
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f74:	2209      	movs	r2, #9
 8002f76:	4918      	ldr	r1, [pc, #96]	; (8002fd8 <pc_command_processing+0x12c>)
 8002f78:	480e      	ldr	r0, [pc, #56]	; (8002fb4 <pc_command_processing+0x108>)
 8002f7a:	f006 f919 	bl	80091b0 <strncmp>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff+9);
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <pc_command_processing+0x130>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 f82e 	bl	8008fe8 <atoi>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <pc_command_processing+0x134>)
 8002f90:	6013      	str	r3, [r2, #0]
			return;
 8002f92:	e00b      	b.n	8002fac <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002f94:	2206      	movs	r2, #6
 8002f96:	4913      	ldr	r1, [pc, #76]	; (8002fe4 <pc_command_processing+0x138>)
 8002f98:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <pc_command_processing+0x108>)
 8002f9a:	f006 f909 	bl	80091b0 <strncmp>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <pc_command_processing+0x100>
			{
				set_rtc(rx_buff);
 8002fa4:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <pc_command_processing+0x108>)
 8002fa6:	f7fe f9bd 	bl	8001324 <set_rtc>
				return;
 8002faa:	bf00      	nop
			}
	}
}
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000c44 	.word	0x20000c44
 8002fb4:	20000c18 	.word	0x20000c18
 8002fb8:	0800a640 	.word	0x0800a640
 8002fbc:	0800a64c 	.word	0x0800a64c
 8002fc0:	0800a658 	.word	0x0800a658
 8002fc4:	0800a664 	.word	0x0800a664
 8002fc8:	0800a670 	.word	0x0800a670
 8002fcc:	0800a67c 	.word	0x0800a67c
 8002fd0:	0800a688 	.word	0x0800a688
 8002fd4:	0800a698 	.word	0x0800a698
 8002fd8:	0800a6a8 	.word	0x0800a6a8
 8002fdc:	20000c21 	.word	0x20000c21
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	0800a6b4 	.word	0x0800a6b4

08002fe8 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11f      	bne.n	800303a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_TIM_IC_CaptureCallback+0x60>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8003012:	e012      	b.n	800303a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10d      	bne.n	800303a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8003024:	2100      	movs	r1, #0
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f003 ff38 	bl	8006e9c <HAL_TIM_ReadCapturedValue>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_TIM_IC_CaptureCallback+0x64>)
 8003032:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40000400 	.word	0x40000400
 8003048:	20000c80 	.word	0x20000c80
 800304c:	20000c78 	.word	0x20000c78
 8003050:	20000c7c 	.word	0x20000c7c
 8003054:	00000000 	.word	0x00000000

08003058 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
	int dis; // 거리를 측정한 펄스 갯수를 저장 하는 변수
	char lcd_buff[20];

	if (TIM10_10ms_ultrasonic >= 100)   // 1초
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <ultrasonic_processing+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b63      	cmp	r3, #99	; 0x63
 8003064:	dd3e      	ble.n	80030e4 <ultrasonic_processing+0x8c>
	{
		TIM10_10ms_ultrasonic=0;
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <ultrasonic_processing+0xa0>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
		make_trigger();
 800306c:	f000 f850 	bl	8003110 <make_trigger>
		if (ic_cpt_finish_flag)  // 초음파 측정이 완료 되었으면  if (ic_cpt_finish_flag >= 1)
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <ultrasonic_processing+0xa4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d035      	beq.n	80030e4 <ultrasonic_processing+0x8c>
		{
			ic_cpt_finish_flag=0;
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <ultrasonic_processing+0xa4>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
			dis = distance;
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <ultrasonic_processing+0xa8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	617b      	str	r3, [r7, #20]
			dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 8003084:	6978      	ldr	r0, [r7, #20]
 8003086:	f7fd fa55 	bl	8000534 <__aeabi_i2d>
 800308a:	a319      	add	r3, pc, #100	; (adr r3, 80030f0 <ultrasonic_processing+0x98>)
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f7fd faba 	bl	8000608 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a4:	f7fd fbda 	bl	800085c <__aeabi_ddiv>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fcbc 	bl	8000a2c <__aeabi_d2iz>
 80030b4:	4603      	mov	r3, r0
 80030b6:	617b      	str	r3, [r7, #20]
			// 왕복 거리를 리턴해 주기 떄문에 /2를 해주는 것이다.
			printf("dis: %dcm\n", dis);
 80030b8:	6979      	ldr	r1, [r7, #20]
 80030ba:	4812      	ldr	r0, [pc, #72]	; (8003104 <ultrasonic_processing+0xac>)
 80030bc:	f005 ffca 	bl	8009054 <iprintf>
			if (lcd_display_mode_flag==1)
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <ultrasonic_processing+0xb0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <ultrasonic_processing+0x8c>
			{
				sprintf(lcd_buff,"dis: %dcm", dis);
 80030c8:	463b      	mov	r3, r7
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	490f      	ldr	r1, [pc, #60]	; (800310c <ultrasonic_processing+0xb4>)
 80030ce:	4618      	mov	r0, r3
 80030d0:	f006 f84e 	bl	8009170 <siprintf>
				move_cursor(1,0);
 80030d4:	2100      	movs	r1, #0
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7fe f820 	bl	800111c <move_cursor>
				lcd_string(lcd_buff);
 80030dc:	463b      	mov	r3, r7
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe f807 	bl	80010f2 <lcd_string>
			}
		}
	}
}
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	f3af 8000 	nop.w
 80030f0:	b020c49c 	.word	0xb020c49c
 80030f4:	3fa16872 	.word	0x3fa16872
 80030f8:	20000c04 	.word	0x20000c04
 80030fc:	20000c7c 	.word	0x20000c7c
 8003100:	20000c78 	.word	0x20000c78
 8003104:	0800a6bc 	.word	0x0800a6bc
 8003108:	200001c0 	.word	0x200001c0
 800310c:	0800a6c8 	.word	0x0800a6c8

08003110 <make_trigger>:

void make_trigger()
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800311a:	480b      	ldr	r0, [pc, #44]	; (8003148 <make_trigger+0x38>)
 800311c:	f000 ff66 	bl	8003fec <HAL_GPIO_WritePin>
	delay_us(2);
 8003120:	2002      	movs	r0, #2
 8003122:	f7fe fbe1 	bl	80018e8 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 8003126:	2201      	movs	r2, #1
 8003128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800312c:	4806      	ldr	r0, [pc, #24]	; (8003148 <make_trigger+0x38>)
 800312e:	f000 ff5d 	bl	8003fec <HAL_GPIO_WritePin>
	delay_us(10);
 8003132:	200a      	movs	r0, #10
 8003134:	f7fe fbd8 	bl	80018e8 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800313e:	4802      	ldr	r0, [pc, #8]	; (8003148 <make_trigger+0x38>)
 8003140:	f000 ff54 	bl	8003fec <HAL_GPIO_WritePin>
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021400 	.word	0x40021400

0800314c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800314c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003184 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003152:	490e      	ldr	r1, [pc, #56]	; (800318c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003158:	e002      	b.n	8003160 <LoopCopyDataInit>

0800315a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800315c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315e:	3304      	adds	r3, #4

08003160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003164:	d3f9      	bcc.n	800315a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003168:	4c0b      	ldr	r4, [pc, #44]	; (8003198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800316c:	e001      	b.n	8003172 <LoopFillZerobss>

0800316e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003170:	3204      	adds	r2, #4

08003172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003174:	d3fb      	bcc.n	800316e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003176:	f7ff fe05 	bl	8002d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317a:	f005 ff3f 	bl	8008ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800317e:	f7fe fbcb 	bl	8001918 <main>
  bx  lr    
 8003182:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003184:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003190:	0800a898 	.word	0x0800a898
  ldr r2, =_sbss
 8003194:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8003198:	20000c98 	.word	0x20000c98

0800319c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC_IRQHandler>
	...

080031a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_Init+0x40>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_Init+0x40>)
 80031aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_Init+0x40>)
 80031b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_Init+0x40>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c8:	2003      	movs	r0, #3
 80031ca:	f000 f94f 	bl	800346c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f000 f808 	bl	80031e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d4:	f7ff f8f0 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00

080031e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_InitTick+0x54>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x58>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f967 	bl	80034d6 <HAL_SYSTICK_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00e      	b.n	8003230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0f      	cmp	r3, #15
 8003216:	d80a      	bhi.n	800322e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003218:	2200      	movs	r2, #0
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f000 f92f 	bl	8003482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003224:	4a06      	ldr	r2, [pc, #24]	; (8003240 <HAL_InitTick+0x5c>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000134 	.word	0x20000134
 800323c:	2000013c 	.word	0x2000013c
 8003240:	20000138 	.word	0x20000138

08003244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_IncTick+0x20>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x24>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4413      	add	r3, r2
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_IncTick+0x24>)
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	2000013c 	.word	0x2000013c
 8003268:	20000c84 	.word	0x20000c84

0800326c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return uwTick;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_GetTick+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000c84 	.word	0x20000c84

08003284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff ffee 	bl	800326c <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d005      	beq.n	80032aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_Delay+0x44>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032aa:	bf00      	nop
 80032ac:	f7ff ffde 	bl	800326c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d8f7      	bhi.n	80032ac <HAL_Delay+0x28>
  {
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2000013c 	.word	0x2000013c

080032cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fe:	4a04      	ldr	r2, [pc, #16]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	60d3      	str	r3, [r2, #12]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	; (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003438:	d301      	bcc.n	800343e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343a:	2301      	movs	r3, #1
 800343c:	e00f      	b.n	800345e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <SysTick_Config+0x40>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003446:	210f      	movs	r1, #15
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	f7ff ff8e 	bl	800336c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <SysTick_Config+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <SysTick_Config+0x40>)
 8003458:	2207      	movs	r2, #7
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff29 	bl	80032cc <__NVIC_SetPriorityGrouping>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003494:	f7ff ff3e 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	6978      	ldr	r0, [r7, #20]
 80034a0:	f7ff ff8e 	bl	80033c0 <NVIC_EncodePriority>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff5d 	bl	800336c <__NVIC_SetPriority>
}
 80034b2:	bf00      	nop
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff31 	bl	8003330 <__NVIC_EnableIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ffa2 	bl	8003428 <SysTick_Config>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff feb6 	bl	800326c <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d008      	beq.n	8003520 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e052      	b.n	80035c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0216 	bic.w	r2, r2, #22
 800352e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800353e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <HAL_DMA_Abort+0x62>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0208 	bic.w	r2, r2, #8
 800355e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003570:	e013      	b.n	800359a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003572:	f7ff fe7b 	bl	800326c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b05      	cmp	r3, #5
 800357e:	d90c      	bls.n	800359a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2203      	movs	r2, #3
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e015      	b.n	80035c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e4      	bne.n	8003572 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	223f      	movs	r2, #63	; 0x3f
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d004      	beq.n	80035ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e00c      	b.n	8003606 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2205      	movs	r2, #5
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06c      	b.n	8003700 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2223      	movs	r2, #35	; 0x23
 8003634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fe fee5 	bl	8002408 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_ETH_Init+0xf4>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	4a30      	ldr	r2, [pc, #192]	; (8003708 <HAL_ETH_Init+0xf4>)
 8003648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800364c:	6453      	str	r3, [r2, #68]	; 0x44
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_ETH_Init+0xf4>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_ETH_Init+0xf8>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a2b      	ldr	r2, [pc, #172]	; (800370c <HAL_ETH_Init+0xf8>)
 8003660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003664:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_ETH_Init+0xf8>)
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	4927      	ldr	r1, [pc, #156]	; (800370c <HAL_ETH_Init+0xf8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_ETH_Init+0xf8>)
 8003676:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800368e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7ff fdec 	bl	800326c <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003696:	e011      	b.n	80036bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003698:	f7ff fde8 	bl	800326c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80036a6:	d909      	bls.n	80036bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2204      	movs	r2, #4
 80036ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	22e0      	movs	r2, #224	; 0xe0
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e021      	b.n	8003700 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e4      	bne.n	8003698 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f958 	bl	8003984 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9ff 	bl	8003ad8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa55 	bl	8003b8a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	461a      	mov	r2, r3
 80036e6:	2100      	movs	r1, #0
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f9bd 	bl	8003a68 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2210      	movs	r2, #16
 80036fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800

08003710 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4b51      	ldr	r3, [pc, #324]	; (800386c <ETH_SetMACConfig+0x15c>)
 8003726:	4013      	ands	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7c1b      	ldrb	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <ETH_SetMACConfig+0x28>
 8003732:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003736:	e000      	b.n	800373a <ETH_SetMACConfig+0x2a>
 8003738:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	7c5b      	ldrb	r3, [r3, #17]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <ETH_SetMACConfig+0x38>
 8003742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003746:	e000      	b.n	800374a <ETH_SetMACConfig+0x3a>
 8003748:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800374a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003750:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	7fdb      	ldrb	r3, [r3, #31]
 8003756:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003758:	431a      	orrs	r2, r3
                        macconf->Speed |
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800375e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	7f92      	ldrb	r2, [r2, #30]
 8003764:	2a00      	cmp	r2, #0
 8003766:	d102      	bne.n	800376e <ETH_SetMACConfig+0x5e>
 8003768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800376c:	e000      	b.n	8003770 <ETH_SetMACConfig+0x60>
 800376e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003770:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	7f1b      	ldrb	r3, [r3, #28]
 8003776:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003778:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800377e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003786:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800378e:	2a00      	cmp	r2, #0
 8003790:	d102      	bne.n	8003798 <ETH_SetMACConfig+0x88>
 8003792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003796:	e000      	b.n	800379a <ETH_SetMACConfig+0x8a>
 8003798:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800379a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	7bdb      	ldrb	r3, [r3, #15]
 80037a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80037a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80037a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037b2:	4313      	orrs	r3, r2
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7ff fd5a 	bl	8003284 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80037e6:	4013      	ands	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d101      	bne.n	80037fe <ETH_SetMACConfig+0xee>
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	e000      	b.n	8003800 <ETH_SetMACConfig+0xf0>
 80037fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003800:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003806:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800380e:	2a01      	cmp	r2, #1
 8003810:	d101      	bne.n	8003816 <ETH_SetMACConfig+0x106>
 8003812:	2208      	movs	r2, #8
 8003814:	e000      	b.n	8003818 <ETH_SetMACConfig+0x108>
 8003816:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003818:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003820:	2a01      	cmp	r2, #1
 8003822:	d101      	bne.n	8003828 <ETH_SetMACConfig+0x118>
 8003824:	2204      	movs	r2, #4
 8003826:	e000      	b.n	800382a <ETH_SetMACConfig+0x11a>
 8003828:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800382a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003832:	2a01      	cmp	r2, #1
 8003834:	d101      	bne.n	800383a <ETH_SetMACConfig+0x12a>
 8003836:	2202      	movs	r2, #2
 8003838:	e000      	b.n	800383c <ETH_SetMACConfig+0x12c>
 800383a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800383c:	4313      	orrs	r3, r2
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003854:	2001      	movs	r0, #1
 8003856:	f7ff fd15 	bl	8003284 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	619a      	str	r2, [r3, #24]
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	ff20810f 	.word	0xff20810f

08003870 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <ETH_SetDMAConfig+0x110>)
 800388a:	4013      	ands	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	7b1b      	ldrb	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <ETH_SetDMAConfig+0x2c>
 8003896:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800389a:	e000      	b.n	800389e <ETH_SetDMAConfig+0x2e>
 800389c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	7b5b      	ldrb	r3, [r3, #13]
 80038a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	7f52      	ldrb	r2, [r2, #29]
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d102      	bne.n	80038b4 <ETH_SetDMAConfig+0x44>
 80038ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038b2:	e000      	b.n	80038b6 <ETH_SetDMAConfig+0x46>
 80038b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80038b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	7b9b      	ldrb	r3, [r3, #14]
 80038bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80038be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	7f1b      	ldrb	r3, [r3, #28]
 80038ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80038cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	7f9b      	ldrb	r3, [r3, #30]
 80038d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038e4:	4313      	orrs	r3, r2
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f4:	461a      	mov	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003906:	2001      	movs	r0, #1
 8003908:	f7ff fcbc 	bl	8003284 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003914:	461a      	mov	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	791b      	ldrb	r3, [r3, #4]
 800391e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003924:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800392a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003930:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003938:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800393a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003942:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003948:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003956:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff fc8d 	bl	8003284 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	f8de3f23 	.word	0xf8de3f23

08003984 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b0a6      	sub	sp, #152	; 0x98
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003998:	2300      	movs	r3, #0
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039c0:	2300      	movs	r3, #0
 80039c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80039da:	2300      	movs	r3, #0
 80039dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80039e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80039ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80039f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fe86 	bl	8003710 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a38:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff08 	bl	8003870 <ETH_SetDMAConfig>
}
 8003a60:	bf00      	nop
 8003a62:	3798      	adds	r7, #152	; 0x98
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3305      	adds	r3, #5
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	3204      	adds	r2, #4
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <ETH_MACAddressConfig+0x68>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3303      	adds	r3, #3
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	061a      	lsls	r2, r3, #24
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	4313      	orrs	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <ETH_MACAddressConfig+0x6c>)
 8003aba:	4413      	add	r3, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6013      	str	r3, [r2, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40028040 	.word	0x40028040
 8003ad4:	40028044 	.word	0x40028044

08003ad8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e03e      	b.n	8003b64 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68d9      	ldr	r1, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	3206      	adds	r2, #6
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d80c      	bhi.n	8003b48 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e004      	b.n	8003b52 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d9bd      	bls.n	8003ae6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7c:	611a      	str	r2, [r3, #16]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e046      	b.n	8003c26 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6919      	ldr	r1, [r3, #16]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003bdc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	3212      	adds	r2, #18
 8003bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d80c      	bhi.n	8003c16 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6919      	ldr	r1, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	e004      	b.n	8003c20 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3301      	adds	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d9b5      	bls.n	8003b98 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c56:	60da      	str	r2, [r3, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e177      	b.n	8003f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8166 	bne.w	8003f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d005      	beq.n	8003cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d130      	bne.n	8003d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 0201 	and.w	r2, r3, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d017      	beq.n	8003d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d123      	bne.n	8003da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3208      	adds	r2, #8
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80c0 	beq.w	8003f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e06:	4a61      	ldr	r2, [pc, #388]	; (8003f8c <HAL_GPIO_Init+0x328>)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_GPIO_Init+0x32c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d037      	beq.n	8003ea2 <HAL_GPIO_Init+0x23e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a57      	ldr	r2, [pc, #348]	; (8003f94 <HAL_GPIO_Init+0x330>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d031      	beq.n	8003e9e <HAL_GPIO_Init+0x23a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a56      	ldr	r2, [pc, #344]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02b      	beq.n	8003e9a <HAL_GPIO_Init+0x236>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <HAL_GPIO_Init+0x338>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d025      	beq.n	8003e96 <HAL_GPIO_Init+0x232>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a54      	ldr	r2, [pc, #336]	; (8003fa0 <HAL_GPIO_Init+0x33c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <HAL_GPIO_Init+0x22e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a53      	ldr	r2, [pc, #332]	; (8003fa4 <HAL_GPIO_Init+0x340>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_GPIO_Init+0x22a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_GPIO_Init+0x344>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_GPIO_Init+0x226>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_GPIO_Init+0x348>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00d      	beq.n	8003e86 <HAL_GPIO_Init+0x222>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <HAL_GPIO_Init+0x34c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <HAL_GPIO_Init+0x21e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4f      	ldr	r2, [pc, #316]	; (8003fb4 <HAL_GPIO_Init+0x350>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_GPIO_Init+0x21a>
 8003e7a:	2309      	movs	r3, #9
 8003e7c:	e012      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e7e:	230a      	movs	r3, #10
 8003e80:	e010      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e82:	2308      	movs	r3, #8
 8003e84:	e00e      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e86:	2307      	movs	r3, #7
 8003e88:	e00c      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e8a:	2306      	movs	r3, #6
 8003e8c:	e00a      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e8e:	2305      	movs	r3, #5
 8003e90:	e008      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e92:	2304      	movs	r3, #4
 8003e94:	e006      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e96:	2303      	movs	r3, #3
 8003e98:	e004      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e002      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_GPIO_Init+0x240>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	f002 0203 	and.w	r2, r2, #3
 8003eaa:	0092      	lsls	r2, r2, #2
 8003eac:	4093      	lsls	r3, r2
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb4:	4935      	ldr	r1, [pc, #212]	; (8003f8c <HAL_GPIO_Init+0x328>)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	3302      	adds	r3, #2
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ee6:	4a34      	ldr	r2, [pc, #208]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f16:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_GPIO_Init+0x354>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	f67f ae84 	bls.w	8003c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	40020000 	.word	0x40020000
 8003f94:	40020400 	.word	0x40020400
 8003f98:	40020800 	.word	0x40020800
 8003f9c:	40020c00 	.word	0x40020c00
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40021400 	.word	0x40021400
 8003fa8:	40021800 	.word	0x40021800
 8003fac:	40021c00 	.word	0x40021c00
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	40022400 	.word	0x40022400
 8003fb8:	40013c00 	.word	0x40013c00

08003fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e001      	b.n	8003fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004008:	e003      	b.n	8004012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	041a      	lsls	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	619a      	str	r2, [r3, #24]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e12b      	b.n	800428a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe faa4 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004084:	f001 fa20 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a81      	ldr	r2, [pc, #516]	; (8004294 <HAL_I2C_Init+0x274>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d807      	bhi.n	80040a4 <HAL_I2C_Init+0x84>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a80      	ldr	r2, [pc, #512]	; (8004298 <HAL_I2C_Init+0x278>)
 8004098:	4293      	cmp	r3, r2
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e006      	b.n	80040b2 <HAL_I2C_Init+0x92>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a7d      	ldr	r2, [pc, #500]	; (800429c <HAL_I2C_Init+0x27c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0e7      	b.n	800428a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a78      	ldr	r2, [pc, #480]	; (80042a0 <HAL_I2C_Init+0x280>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	; (8004294 <HAL_I2C_Init+0x274>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d802      	bhi.n	80040f4 <HAL_I2C_Init+0xd4>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	e009      	b.n	8004108 <HAL_I2C_Init+0xe8>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	4a69      	ldr	r2, [pc, #420]	; (80042a4 <HAL_I2C_Init+0x284>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	3301      	adds	r3, #1
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	430b      	orrs	r3, r1
 800410e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800411a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	495c      	ldr	r1, [pc, #368]	; (8004294 <HAL_I2C_Init+0x274>)
 8004124:	428b      	cmp	r3, r1
 8004126:	d819      	bhi.n	800415c <HAL_I2C_Init+0x13c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e59      	subs	r1, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fbb1 f3f3 	udiv	r3, r1, r3
 8004136:	1c59      	adds	r1, r3, #1
 8004138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800413c:	400b      	ands	r3, r1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_I2C_Init+0x138>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e59      	subs	r1, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004150:	3301      	adds	r3, #1
 8004152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004156:	e051      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 8004158:	2304      	movs	r3, #4
 800415a:	e04f      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d111      	bne.n	8004188 <HAL_I2C_Init+0x168>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e58      	subs	r0, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e012      	b.n	80041ae <HAL_I2C_Init+0x18e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1e58      	subs	r0, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	0099      	lsls	r1, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Init+0x196>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e022      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10e      	bne.n	80041dc <HAL_I2C_Init+0x1bc>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e58      	subs	r0, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	440b      	add	r3, r1
 80041cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	e00f      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1e58      	subs	r0, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	0099      	lsls	r1, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	6809      	ldr	r1, [r1, #0]
 8004200:	4313      	orrs	r3, r2
 8004202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800422a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6911      	ldr	r1, [r2, #16]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68d2      	ldr	r2, [r2, #12]
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	430b      	orrs	r3, r1
 800423e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	000186a0 	.word	0x000186a0
 8004298:	001e847f 	.word	0x001e847f
 800429c:	003d08ff 	.word	0x003d08ff
 80042a0:	431bde83 	.word	0x431bde83
 80042a4:	10624dd3 	.word	0x10624dd3

080042a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	461a      	mov	r2, r3
 80042b4:	460b      	mov	r3, r1
 80042b6:	817b      	strh	r3, [r7, #10]
 80042b8:	4613      	mov	r3, r2
 80042ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042bc:	f7fe ffd6 	bl	800326c <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	f040 80e0 	bne.w	8004490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2319      	movs	r3, #25
 80042d6:	2201      	movs	r2, #1
 80042d8:	4970      	ldr	r1, [pc, #448]	; (800449c <HAL_I2C_Master_Transmit+0x1f4>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f964 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	e0d3      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0x50>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0cc      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ea>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d007      	beq.n	800431e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2221      	movs	r2, #33	; 0x21
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2210      	movs	r2, #16
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	893a      	ldrh	r2, [r7, #8]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a50      	ldr	r2, [pc, #320]	; (80044a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004360:	8979      	ldrh	r1, [r7, #10]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f89c 	bl	80044a4 <I2C_MasterRequestWrite>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e08d      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800438c:	e066      	b.n	800445c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f9de 	bl	8004754 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06b      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d11b      	bne.n	8004430 <HAL_I2C_Master_Transmit+0x188>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	6a39      	ldr	r1, [r7, #32]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f9ce 	bl	80047d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2b04      	cmp	r3, #4
 8004446:	d107      	bne.n	8004458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e01a      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d194      	bne.n	800438e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d006      	beq.n	80044ce <I2C_MasterRequestWrite+0x2a>
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d003      	beq.n	80044ce <I2C_MasterRequestWrite+0x2a>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044cc:	d108      	bne.n	80044e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e00b      	b.n	80044f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	2b12      	cmp	r3, #18
 80044e6:	d107      	bne.n	80044f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f84f 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451e:	d103      	bne.n	8004528 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e035      	b.n	8004598 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004534:	d108      	bne.n	8004548 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004536:	897b      	ldrh	r3, [r7, #10]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	e01b      	b.n	8004580 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	11db      	asrs	r3, r3, #7
 800454c:	b2db      	uxtb	r3, r3
 800454e:	f003 0306 	and.w	r3, r3, #6
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f063 030f 	orn	r3, r3, #15
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	490e      	ldr	r1, [pc, #56]	; (80045a0 <I2C_MasterRequestWrite+0xfc>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f875 	bl	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e010      	b.n	8004598 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4907      	ldr	r1, [pc, #28]	; (80045a4 <I2C_MasterRequestWrite+0x100>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f865 	bl	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	00010008 	.word	0x00010008
 80045a4:	00010002 	.word	0x00010002

080045a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b8:	e025      	b.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d021      	beq.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fe fe53 	bl	800326c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d116      	bne.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e023      	b.n	800464e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10d      	bne.n	800462c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	43da      	mvns	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	e00c      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	43da      	mvns	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	429a      	cmp	r2, r3
 800464a:	d0b6      	beq.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004664:	e051      	b.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d123      	bne.n	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0204 	orr.w	r2, r3, #4
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e046      	b.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d021      	beq.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fe fdd1 	bl	800326c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d302      	bcc.n	80046dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d116      	bne.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e020      	b.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10c      	bne.n	800472e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e00b      	b.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	43da      	mvns	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d18d      	bne.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004760:	e02d      	b.n	80047be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f878 	bl	8004858 <I2C_IsAcknowledgeFailed>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e02d      	b.n	80047ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d021      	beq.n	80047be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477a:	f7fe fd77 	bl	800326c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d116      	bne.n	80047be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e007      	b.n	80047ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d1ca      	bne.n	8004762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047e2:	e02d      	b.n	8004840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f837 	bl	8004858 <I2C_IsAcknowledgeFailed>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e02d      	b.n	8004850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d021      	beq.n	8004840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fc:	f7fe fd36 	bl	800326c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e007      	b.n	8004850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d1ca      	bne.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	d11b      	bne.n	80048a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d129      	bne.n	8004920 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	; 0x24
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0210 	bic.w	r2, r2, #16
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b20      	cmp	r3, #32
 8004946:	d12a      	bne.n	800499e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	; 0x24
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	f023 030f 	bic.w	r3, r3, #15
 800496e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b29a      	uxth	r2, r3
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	4313      	orrs	r3, r2
 8004978:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	89fa      	ldrh	r2, [r7, #14]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ae:	b08f      	sub	sp, #60	; 0x3c
 80049b0:	af0a      	add	r7, sp, #40	; 0x28
 80049b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e10f      	b.n	8004bde <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fe f859 	bl	8002a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2203      	movs	r2, #3
 80049e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 f852 	bl	8008aa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	687e      	ldr	r6, [r7, #4]
 8004a0a:	466d      	mov	r5, sp
 8004a0c:	f106 0410 	add.w	r4, r6, #16
 8004a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a20:	1d33      	adds	r3, r6, #4
 8004a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a24:	6838      	ldr	r0, [r7, #0]
 8004a26:	f003 ffdd 	bl	80089e4 <USB_CoreInit>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0d0      	b.n	8004bde <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 f840 	bl	8008ac8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e04a      	b.n	8004ae4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	333d      	adds	r3, #61	; 0x3d
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	333c      	adds	r3, #60	; 0x3c
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	b298      	uxth	r0, r3
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3344      	adds	r3, #68	; 0x44
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3340      	adds	r3, #64	; 0x40
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3348      	adds	r3, #72	; 0x48
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334c      	adds	r3, #76	; 0x4c
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004aca:	7bfa      	ldrb	r2, [r7, #15]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3354      	adds	r3, #84	; 0x54
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3af      	bcc.n	8004a4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e044      	b.n	8004b7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004b06:	2200      	movs	r2, #0
 8004b08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b4c:	7bfa      	ldrb	r2, [r7, #15]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d3b5      	bcc.n	8004af4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	687e      	ldr	r6, [r7, #4]
 8004b90:	466d      	mov	r5, sp
 8004b92:	f106 0410 	add.w	r4, r6, #16
 8004b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ba2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ba6:	1d33      	adds	r3, r6, #4
 8004ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004baa:	6838      	ldr	r0, [r7, #0]
 8004bac:	f003 ffd8 	bl	8008b60 <USB_DevInit>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00d      	b.n	8004bde <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f004 f9a3 	bl	8008f22 <USB_DevDisconnect>

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e267      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d075      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c06:	4b88      	ldr	r3, [pc, #544]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d00c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4b85      	ldr	r3, [pc, #532]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d112      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1e:	4b82      	ldr	r3, [pc, #520]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05b      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x108>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d157      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e242      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_OscConfig+0x74>
 8004c4e:	4b76      	ldr	r3, [pc, #472]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a75      	ldr	r2, [pc, #468]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xb0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x98>
 8004c66:	4b70      	ldr	r3, [pc, #448]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6f      	ldr	r2, [pc, #444]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b6d      	ldr	r3, [pc, #436]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6c      	ldr	r2, [pc, #432]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xb0>
 8004c80:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a68      	ldr	r2, [pc, #416]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b66      	ldr	r3, [pc, #408]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a65      	ldr	r2, [pc, #404]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fae4 	bl	800326c <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fe fae0 	bl	800326c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e207      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xc0>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fad0 	bl	800326c <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fe facc 	bl	800326c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1f3      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xe8>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d063      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfe:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d16:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x152>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1c7      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4937      	ldr	r1, [pc, #220]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e03a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fa85 	bl	800326c <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fe fa81 	bl	800326c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e1a8      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4925      	ldr	r1, [pc, #148]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9a:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fe fa64 	bl	800326c <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fe fa60 	bl	800326c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e187      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d036      	beq.n	8004e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_RCC_OscConfig+0x248>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fe fa44 	bl	800326c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de8:	f7fe fa40 	bl	800326c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e167      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x200>
 8004e06:	e01b      	b.n	8004e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_OscConfig+0x248>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0e:	f7fe fa2d 	bl	800326c <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	e00e      	b.n	8004e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e16:	f7fe fa29 	bl	800326c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d907      	bls.n	8004e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e150      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	42470000 	.word	0x42470000
 8004e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	4b88      	ldr	r3, [pc, #544]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ea      	bne.n	8004e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8097 	beq.w	8004f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e52:	4b81      	ldr	r3, [pc, #516]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	4b7d      	ldr	r3, [pc, #500]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a7c      	ldr	r2, [pc, #496]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b7a      	ldr	r3, [pc, #488]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b77      	ldr	r3, [pc, #476]	; (800505c <HAL_RCC_OscConfig+0x474>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d118      	bne.n	8004ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8a:	4b74      	ldr	r3, [pc, #464]	; (800505c <HAL_RCC_OscConfig+0x474>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a73      	ldr	r2, [pc, #460]	; (800505c <HAL_RCC_OscConfig+0x474>)
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e96:	f7fe f9e9 	bl	800326c <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9e:	f7fe f9e5 	bl	800326c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e10c      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_OscConfig+0x474>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x2ea>
 8004ec4:	4b64      	ldr	r3, [pc, #400]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a63      	ldr	r2, [pc, #396]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed0:	e01c      	b.n	8004f0c <HAL_RCC_OscConfig+0x324>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b05      	cmp	r3, #5
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x30c>
 8004eda:	4b5f      	ldr	r3, [pc, #380]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	4a5e      	ldr	r2, [pc, #376]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee6:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a5b      	ldr	r2, [pc, #364]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCC_OscConfig+0x324>
 8004ef4:	4b58      	ldr	r3, [pc, #352]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	4a57      	ldr	r2, [pc, #348]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	6713      	str	r3, [r2, #112]	; 0x70
 8004f00:	4b55      	ldr	r3, [pc, #340]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	4a54      	ldr	r2, [pc, #336]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f06:	f023 0304 	bic.w	r3, r3, #4
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fe f9aa 	bl	800326c <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fe f9a6 	bl	800326c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0cb      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f32:	4b49      	ldr	r3, [pc, #292]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ee      	beq.n	8004f1c <HAL_RCC_OscConfig+0x334>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f40:	f7fe f994 	bl	800326c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f48:	f7fe f990 	bl	800326c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0b5      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5e:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1ee      	bne.n	8004f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f70:	4b39      	ldr	r3, [pc, #228]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	4a38      	ldr	r2, [pc, #224]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a1 	beq.w	80050c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f86:	4b34      	ldr	r3, [pc, #208]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d05c      	beq.n	800504c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d141      	bne.n	800501e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCC_OscConfig+0x478>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fe f964 	bl	800326c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fe f960 	bl	800326c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e087      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	4b27      	ldr	r3, [pc, #156]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	491b      	ldr	r1, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x478>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe f939 	bl	800326c <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe f935 	bl	800326c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e05c      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x416>
 800501c:	e054      	b.n	80050c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_OscConfig+0x478>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fe f922 	bl	800326c <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502c:	f7fe f91e 	bl	800326c <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e045      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_RCC_OscConfig+0x470>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x444>
 800504a:	e03d      	b.n	80050c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e038      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
 8005058:	40023800 	.word	0x40023800
 800505c:	40007000 	.word	0x40007000
 8005060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x4ec>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d028      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d121      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d11a      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800509a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800509c:	4293      	cmp	r3, r2
 800509e:	d111      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	3b01      	subs	r3, #1
 80050ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800

080050d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0cc      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050ec:	4b68      	ldr	r3, [pc, #416]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d90c      	bls.n	8005114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b65      	ldr	r3, [pc, #404]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0b8      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d020      	beq.n	8005162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800512c:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a58      	ldr	r2, [pc, #352]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005144:	4b53      	ldr	r3, [pc, #332]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a52      	ldr	r2, [pc, #328]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800514e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005150:	4b50      	ldr	r3, [pc, #320]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	494d      	ldr	r1, [pc, #308]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d044      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d119      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d003      	beq.n	8005196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005192:	2b03      	cmp	r3, #3
 8005194:	d107      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005196:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e067      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051b6:	4b37      	ldr	r3, [pc, #220]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 0203 	bic.w	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4934      	ldr	r1, [pc, #208]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c8:	f7fe f850 	bl	800326c <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d0:	f7fe f84c 	bl	800326c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e04f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 020c 	and.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1eb      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d20c      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e032      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4916      	ldr	r1, [pc, #88]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	490e      	ldr	r1, [pc, #56]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800525e:	f000 f821 	bl	80052a4 <HAL_RCC_GetSysClockFreq>
 8005262:	4602      	mov	r2, r0
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	490a      	ldr	r1, [pc, #40]	; (8005298 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	5ccb      	ldrb	r3, [r1, r3]
 8005272:	fa22 f303 	lsr.w	r3, r2, r3
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7fd ffb0 	bl	80031e4 <HAL_InitTick>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023c00 	.word	0x40023c00
 8005294:	40023800 	.word	0x40023800
 8005298:	0800a6d4 	.word	0x0800a6d4
 800529c:	20000134 	.word	0x20000134
 80052a0:	20000138 	.word	0x20000138

080052a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a8:	b094      	sub	sp, #80	; 0x50
 80052aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	647b      	str	r3, [r7, #68]	; 0x44
 80052b0:	2300      	movs	r3, #0
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b4:	2300      	movs	r3, #0
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052bc:	4b79      	ldr	r3, [pc, #484]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d00d      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x40>
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	f200 80e1 	bhi.w	8005490 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x34>
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d003      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0x3a>
 80052d6:	e0db      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d8:	4b73      	ldr	r3, [pc, #460]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80052da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052dc:	e0db      	b.n	8005496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052de:	4b73      	ldr	r3, [pc, #460]	; (80054ac <HAL_RCC_GetSysClockFreq+0x208>)
 80052e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052e2:	e0d8      	b.n	8005496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e4:	4b6f      	ldr	r3, [pc, #444]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ee:	4b6d      	ldr	r3, [pc, #436]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d063      	beq.n	80053c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fa:	4b6a      	ldr	r3, [pc, #424]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	099b      	lsrs	r3, r3, #6
 8005300:	2200      	movs	r2, #0
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
 8005304:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
 800530e:	2300      	movs	r3, #0
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	f04f 0000 	mov.w	r0, #0
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	0159      	lsls	r1, r3, #5
 8005324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005328:	0150      	lsls	r0, r2, #5
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4621      	mov	r1, r4
 8005330:	1a51      	subs	r1, r2, r1
 8005332:	6139      	str	r1, [r7, #16]
 8005334:	4629      	mov	r1, r5
 8005336:	eb63 0301 	sbc.w	r3, r3, r1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005348:	4659      	mov	r1, fp
 800534a:	018b      	lsls	r3, r1, #6
 800534c:	4651      	mov	r1, sl
 800534e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005352:	4651      	mov	r1, sl
 8005354:	018a      	lsls	r2, r1, #6
 8005356:	4651      	mov	r1, sl
 8005358:	ebb2 0801 	subs.w	r8, r2, r1
 800535c:	4659      	mov	r1, fp
 800535e:	eb63 0901 	sbc.w	r9, r3, r1
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800536e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005376:	4690      	mov	r8, r2
 8005378:	4699      	mov	r9, r3
 800537a:	4623      	mov	r3, r4
 800537c:	eb18 0303 	adds.w	r3, r8, r3
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	462b      	mov	r3, r5
 8005384:	eb49 0303 	adc.w	r3, r9, r3
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005396:	4629      	mov	r1, r5
 8005398:	024b      	lsls	r3, r1, #9
 800539a:	4621      	mov	r1, r4
 800539c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053a0:	4621      	mov	r1, r4
 80053a2:	024a      	lsls	r2, r1, #9
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053aa:	2200      	movs	r2, #0
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053b4:	f7fb fb62 	bl	8000a7c <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4613      	mov	r3, r2
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	e058      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	099b      	lsrs	r3, r3, #6
 80053c8:	2200      	movs	r2, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	4611      	mov	r1, r2
 80053ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	2300      	movs	r3, #0
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
 80053d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053dc:	4642      	mov	r2, r8
 80053de:	464b      	mov	r3, r9
 80053e0:	f04f 0000 	mov.w	r0, #0
 80053e4:	f04f 0100 	mov.w	r1, #0
 80053e8:	0159      	lsls	r1, r3, #5
 80053ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ee:	0150      	lsls	r0, r2, #5
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4641      	mov	r1, r8
 80053f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80053fa:	4649      	mov	r1, r9
 80053fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800540c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005414:	ebb2 040a 	subs.w	r4, r2, sl
 8005418:	eb63 050b 	sbc.w	r5, r3, fp
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	00eb      	lsls	r3, r5, #3
 8005426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542a:	00e2      	lsls	r2, r4, #3
 800542c:	4614      	mov	r4, r2
 800542e:	461d      	mov	r5, r3
 8005430:	4643      	mov	r3, r8
 8005432:	18e3      	adds	r3, r4, r3
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	464b      	mov	r3, r9
 8005438:	eb45 0303 	adc.w	r3, r5, r3
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800544a:	4629      	mov	r1, r5
 800544c:	028b      	lsls	r3, r1, #10
 800544e:	4621      	mov	r1, r4
 8005450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005454:	4621      	mov	r1, r4
 8005456:	028a      	lsls	r2, r1, #10
 8005458:	4610      	mov	r0, r2
 800545a:	4619      	mov	r1, r3
 800545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545e:	2200      	movs	r2, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	61fa      	str	r2, [r7, #28]
 8005464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005468:	f7fb fb08 	bl	8000a7c <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4613      	mov	r3, r2
 8005472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	0c1b      	lsrs	r3, r3, #16
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	3301      	adds	r3, #1
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800548e:	e002      	b.n	8005496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005498:	4618      	mov	r0, r3
 800549a:	3750      	adds	r7, #80	; 0x50
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	007a1200 	.word	0x007a1200

080054b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000134 	.word	0x20000134

080054c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054cc:	f7ff fff0 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0a9b      	lsrs	r3, r3, #10
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4903      	ldr	r1, [pc, #12]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40023800 	.word	0x40023800
 80054ec:	0800a6e4 	.word	0x0800a6e4

080054f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f4:	f7ff ffdc 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054f8:	4602      	mov	r2, r0
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	0b5b      	lsrs	r3, r3, #13
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	4903      	ldr	r1, [pc, #12]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005506:	5ccb      	ldrb	r3, [r1, r3]
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40023800 	.word	0x40023800
 8005514:	0800a6e4 	.word	0x0800a6e4

08005518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005548:	2b00      	cmp	r3, #0
 800554a:	d075      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800554c:	4b91      	ldr	r3, [pc, #580]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005552:	f7fd fe8b 	bl	800326c <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005558:	e008      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800555a:	f7fd fe87 	bl	800326c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e189      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800556c:	4b8a      	ldr	r3, [pc, #552]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	019a      	lsls	r2, r3, #6
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	071b      	lsls	r3, r3, #28
 8005590:	4981      	ldr	r1, [pc, #516]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055a4:	4b7c      	ldr	r3, [pc, #496]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055aa:	0f1b      	lsrs	r3, r3, #28
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	019a      	lsls	r2, r3, #6
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	431a      	orrs	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	071b      	lsls	r3, r3, #28
 80055c4:	4974      	ldr	r1, [pc, #464]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055cc:	4b72      	ldr	r3, [pc, #456]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d2:	f023 021f 	bic.w	r2, r3, #31
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	3b01      	subs	r3, #1
 80055dc:	496e      	ldr	r1, [pc, #440]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	019a      	lsls	r2, r3, #6
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	071b      	lsls	r3, r3, #28
 8005604:	4964      	ldr	r1, [pc, #400]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800560c:	4b61      	ldr	r3, [pc, #388]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005612:	f7fd fe2b 	bl	800326c <HAL_GetTick>
 8005616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800561a:	f7fd fe27 	bl	800326c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e129      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800562c:	4b5a      	ldr	r3, [pc, #360]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800564c:	2b00      	cmp	r3, #0
 800564e:	d079      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005650:	4b52      	ldr	r3, [pc, #328]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005656:	f7fd fe09 	bl	800326c <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800565e:	f7fd fe05 	bl	800326c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e107      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005670:	4b49      	ldr	r3, [pc, #292]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567c:	d0ef      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800568a:	4b43      	ldr	r3, [pc, #268]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	0f1b      	lsrs	r3, r3, #28
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	019a      	lsls	r2, r3, #6
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	431a      	orrs	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	071b      	lsls	r3, r3, #28
 80056aa:	493b      	ldr	r1, [pc, #236]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056b2:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	4934      	ldr	r1, [pc, #208]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056d8:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	0e1b      	lsrs	r3, r3, #24
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	019a      	lsls	r2, r3, #6
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	071b      	lsls	r3, r3, #28
 80056f8:	4927      	ldr	r1, [pc, #156]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005700:	4b25      	ldr	r3, [pc, #148]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005706:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	4922      	ldr	r1, [pc, #136]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005716:	4b21      	ldr	r3, [pc, #132]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571c:	f7fd fda6 	bl	800326c <HAL_GetTick>
 8005720:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005724:	f7fd fda2 	bl	800326c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e0a4      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005742:	d1ef      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 808b 	beq.w	8005868 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4a0f      	ldr	r2, [pc, #60]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	; 0x40
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800577a:	f7fd fd77 	bl	800326c <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005780:	e010      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005782:	f7fd fd73 	bl	800326c <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d909      	bls.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e075      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005794:	42470068 	.word	0x42470068
 8005798:	40023800 	.word	0x40023800
 800579c:	42470070 	.word	0x42470070
 80057a0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a4:	4b38      	ldr	r3, [pc, #224]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0e8      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b0:	4b36      	ldr	r3, [pc, #216]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02f      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d028      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ce:	4b2f      	ldr	r3, [pc, #188]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057d8:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057de:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057e4:	4a29      	ldr	r2, [pc, #164]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ea:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d114      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057f6:	f7fd fd39 	bl	800326c <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fd fd35 	bl	800326c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e035      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ee      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582c:	d10d      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800582e:	4b17      	ldr	r3, [pc, #92]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800583e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005842:	4912      	ldr	r1, [pc, #72]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4a0f      	ldr	r2, [pc, #60]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005850:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005854:	6093      	str	r3, [r2, #8]
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005862:	490a      	ldr	r1, [pc, #40]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005864:	4313      	orrs	r3, r2
 8005866:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d004      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800587c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40007000 	.word	0x40007000
 800588c:	40023800 	.word	0x40023800
 8005890:	42470e40 	.word	0x42470e40
 8005894:	424711e0 	.word	0x424711e0

08005898 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e066      	b.n	800597c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7f5b      	ldrb	r3, [r3, #29]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc feb0 	bl	8002624 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	22ca      	movs	r2, #202	; 0xca
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2253      	movs	r2, #83	; 0x53
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa45 	bl	8005d6a <RTC_EnterInitMode>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d12c      	bne.n	8005944 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6899      	ldr	r1, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	68d2      	ldr	r2, [r2, #12]
 8005924:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6919      	ldr	r1, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	041a      	lsls	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa4c 	bl	8005dd8 <RTC_ExitInitMode>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d113      	bne.n	8005972 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	22ff      	movs	r2, #255	; 0xff
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	7f1b      	ldrb	r3, [r3, #28]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_RTC_SetTime+0x1c>
 800599c:	2302      	movs	r3, #2
 800599e:	e087      	b.n	8005ab0 <HAL_RTC_SetTime+0x12c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2202      	movs	r2, #2
 80059aa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d126      	bne.n	8005a00 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fa29 	bl	8005e22 <RTC_ByteToBcd2>
 80059d0:	4603      	mov	r3, r0
 80059d2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fa22 	bl	8005e22 <RTC_ByteToBcd2>
 80059de:	4603      	mov	r3, r0
 80059e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	789b      	ldrb	r3, [r3, #2]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fa1a 	bl	8005e22 <RTC_ByteToBcd2>
 80059ee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e018      	b.n	8005a32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a20:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	78db      	ldrb	r3, [r3, #3]
 8005a2c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	22ca      	movs	r2, #202	; 0xca
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2253      	movs	r2, #83	; 0x53
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f991 	bl	8005d6a <RTC_EnterInitMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d120      	bne.n	8005a94 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a5c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a60:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6899      	ldr	r1, [r3, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f9a4 	bl	8005dd8 <RTC_ExitInitMode>
 8005a90:	4603      	mov	r3, r0
 8005a92:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	771a      	strb	r2, [r3, #28]

  return status;
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd90      	pop	{r4, r7, pc}

08005ab8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005aea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005aee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	0c1b      	lsrs	r3, r3, #16
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	0d9b      	lsrs	r3, r3, #22
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11a      	bne.n	8005b6a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f98f 	bl	8005e5c <RTC_Bcd2ToByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f986 	bl	8005e5c <RTC_Bcd2ToByte>
 8005b50:	4603      	mov	r3, r0
 8005b52:	461a      	mov	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	789b      	ldrb	r3, [r3, #2]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f97d 	bl	8005e5c <RTC_Bcd2ToByte>
 8005b62:	4603      	mov	r3, r0
 8005b64:	461a      	mov	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	7f1b      	ldrb	r3, [r3, #28]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_RTC_SetDate+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e071      	b.n	8005c74 <HAL_RTC_SetDate+0x100>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_RTC_SetDate+0x4c>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	330a      	adds	r3, #10
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d11c      	bne.n	8005c00 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f929 	bl	8005e22 <RTC_ByteToBcd2>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f922 	bl	8005e22 <RTC_ByteToBcd2>
 8005bde:	4603      	mov	r3, r0
 8005be0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005be2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	789b      	ldrb	r3, [r3, #2]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f91a 	bl	8005e22 <RTC_ByteToBcd2>
 8005bee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bf0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e00e      	b.n	8005c1e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	78db      	ldrb	r3, [r3, #3]
 8005c04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c0c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	22ca      	movs	r2, #202	; 0xca
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2253      	movs	r2, #83	; 0x53
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f89b 	bl	8005d6a <RTC_EnterInitMode>
 8005c34:	4603      	mov	r3, r0
 8005c36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f8c2 	bl	8005dd8 <RTC_ExitInitMode>
 8005c54:	4603      	mov	r3, r0
 8005c56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	771a      	strb	r2, [r3, #28]

  return status;
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd90      	pop	{r4, r7, pc}

08005c7c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	0b5b      	lsrs	r3, r3, #13
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11a      	bne.n	8005d10 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	78db      	ldrb	r3, [r3, #3]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f8bc 	bl	8005e5c <RTC_Bcd2ToByte>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f8b3 	bl	8005e5c <RTC_Bcd2ToByte>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	789b      	ldrb	r3, [r3, #2]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f8aa 	bl	8005e5c <RTC_Bcd2ToByte>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d34:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d36:	f7fd fa99 	bl	800326c <HAL_GetTick>
 8005d3a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d3c:	e009      	b.n	8005d52 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d3e:	f7fd fa95 	bl	800326c <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d4c:	d901      	bls.n	8005d52 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e007      	b.n	8005d62 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ee      	beq.n	8005d3e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d122      	bne.n	8005dce <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d98:	f7fd fa68 	bl	800326c <HAL_GetTick>
 8005d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d9e:	e00c      	b.n	8005dba <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005da0:	f7fd fa64 	bl	800326c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dae:	d904      	bls.n	8005dba <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <RTC_EnterInitMode+0x64>
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d1e8      	bne.n	8005da0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ff89 	bl	8005d1a <HAL_RTC_WaitForSynchro>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2204      	movs	r2, #4
 8005e12:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005e30:	e005      	b.n	8005e3e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	3301      	adds	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	3b0a      	subs	r3, #10
 8005e3c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d8f6      	bhi.n	8005e32 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	b2db      	uxtb	r3, r3
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	4413      	add	r3, r2
 8005e86:	b2db      	uxtb	r3, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e041      	b.n	8005f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fc fc52 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f001 f844 	bl	8006f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e04e      	b.n	8005fea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a23      	ldr	r2, [pc, #140]	; (8005ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d022      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d01d      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1c      	ldr	r2, [pc, #112]	; (8006004 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a19      	ldr	r2, [pc, #100]	; (800600c <HAL_TIM_Base_Start_IT+0xd8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x80>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a18      	ldr	r2, [pc, #96]	; (8006010 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d111      	bne.n	8005fd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b06      	cmp	r3, #6
 8005fc4:	d010      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd6:	e007      	b.n	8005fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40010400 	.word	0x40010400
 800600c:	40014000 	.word	0x40014000
 8006010:	40001800 	.word	0x40001800

08006014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e041      	b.n	80060aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc fb1c 	bl	8002678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f000 ff84 	bl	8006f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_PWM_Start+0x24>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e022      	b.n	800611e <HAL_TIM_PWM_Start+0x6a>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x3e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e015      	b.n	800611e <HAL_TIM_PWM_Start+0x6a>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d109      	bne.n	800610c <HAL_TIM_PWM_Start+0x58>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e008      	b.n	800611e <HAL_TIM_PWM_Start+0x6a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e07c      	b.n	8006220 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0x82>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006134:	e013      	b.n	800615e <HAL_TIM_PWM_Start+0xaa>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b04      	cmp	r3, #4
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0x92>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006144:	e00b      	b.n	800615e <HAL_TIM_PWM_Start+0xaa>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xa2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006154:	e003      	b.n	800615e <HAL_TIM_PWM_Start+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fb0e 	bl	8007788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2d      	ldr	r2, [pc, #180]	; (8006228 <HAL_TIM_PWM_Start+0x174>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIM_PWM_Start+0xcc>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2c      	ldr	r2, [pc, #176]	; (800622c <HAL_TIM_PWM_Start+0x178>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d101      	bne.n	8006184 <HAL_TIM_PWM_Start+0xd0>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_TIM_PWM_Start+0xd2>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a22      	ldr	r2, [pc, #136]	; (8006228 <HAL_TIM_PWM_Start+0x174>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ac:	d01d      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1f      	ldr	r2, [pc, #124]	; (8006230 <HAL_TIM_PWM_Start+0x17c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_TIM_PWM_Start+0x180>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <HAL_TIM_PWM_Start+0x184>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a16      	ldr	r2, [pc, #88]	; (800622c <HAL_TIM_PWM_Start+0x178>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a18      	ldr	r2, [pc, #96]	; (800623c <HAL_TIM_PWM_Start+0x188>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_TIM_PWM_Start+0x136>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a16      	ldr	r2, [pc, #88]	; (8006240 <HAL_TIM_PWM_Start+0x18c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d111      	bne.n	800620e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d010      	beq.n	800621e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	e007      	b.n	800621e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0201 	orr.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40010000 	.word	0x40010000
 800622c:	40010400 	.word	0x40010400
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800
 8006238:	40000c00 	.word	0x40000c00
 800623c:	40014000 	.word	0x40014000
 8006240:	40001800 	.word	0x40001800

08006244 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fa96 	bl	8007788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_TIM_PWM_Stop+0xd8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIM_PWM_Stop+0x2c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <HAL_TIM_PWM_Stop+0xdc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d101      	bne.n	8006274 <HAL_TIM_PWM_Stop+0x30>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_TIM_PWM_Stop+0x32>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d017      	beq.n	80062aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	f241 1311 	movw	r3, #4369	; 0x1111
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10f      	bne.n	80062aa <HAL_TIM_PWM_Stop+0x66>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	f240 4344 	movw	r3, #1092	; 0x444
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <HAL_TIM_PWM_Stop+0x66>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6a1a      	ldr	r2, [r3, #32]
 80062b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10f      	bne.n	80062da <HAL_TIM_PWM_Stop+0x96>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6a1a      	ldr	r2, [r3, #32]
 80062c0:	f240 4344 	movw	r3, #1092	; 0x444
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <HAL_TIM_PWM_Stop+0x96>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Stop+0xa6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e8:	e013      	b.n	8006312 <HAL_TIM_PWM_Stop+0xce>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Stop+0xb6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f8:	e00b      	b.n	8006312 <HAL_TIM_PWM_Stop+0xce>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Stop+0xc6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006308:	e003      	b.n	8006312 <HAL_TIM_PWM_Stop+0xce>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_TIM_PWM_Start_IT+0x28>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e022      	b.n	8006392 <HAL_TIM_PWM_Start_IT+0x6e>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d109      	bne.n	8006366 <HAL_TIM_PWM_Start_IT+0x42>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	e015      	b.n	8006392 <HAL_TIM_PWM_Start_IT+0x6e>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start_IT+0x5c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e008      	b.n	8006392 <HAL_TIM_PWM_Start_IT+0x6e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e0c7      	b.n	800652a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <HAL_TIM_PWM_Start_IT+0x86>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a8:	e013      	b.n	80063d2 <HAL_TIM_PWM_Start_IT+0xae>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start_IT+0x96>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b8:	e00b      	b.n	80063d2 <HAL_TIM_PWM_Start_IT+0xae>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d104      	bne.n	80063ca <HAL_TIM_PWM_Start_IT+0xa6>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c8:	e003      	b.n	80063d2 <HAL_TIM_PWM_Start_IT+0xae>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d841      	bhi.n	800645c <HAL_TIM_PWM_Start_IT+0x138>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006415 	.word	0x08006415
 80063e4:	0800645d 	.word	0x0800645d
 80063e8:	0800645d 	.word	0x0800645d
 80063ec:	0800645d 	.word	0x0800645d
 80063f0:	08006427 	.word	0x08006427
 80063f4:	0800645d 	.word	0x0800645d
 80063f8:	0800645d 	.word	0x0800645d
 80063fc:	0800645d 	.word	0x0800645d
 8006400:	08006439 	.word	0x08006439
 8006404:	0800645d 	.word	0x0800645d
 8006408:	0800645d 	.word	0x0800645d
 800640c:	0800645d 	.word	0x0800645d
 8006410:	0800644b 	.word	0x0800644b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0202 	orr.w	r2, r2, #2
 8006422:	60da      	str	r2, [r3, #12]
      break;
 8006424:	e01d      	b.n	8006462 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0204 	orr.w	r2, r2, #4
 8006434:	60da      	str	r2, [r3, #12]
      break;
 8006436:	e014      	b.n	8006462 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	60da      	str	r2, [r3, #12]
      break;
 8006448:	e00b      	b.n	8006462 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0210 	orr.w	r2, r2, #16
 8006458:	60da      	str	r2, [r3, #12]
      break;
 800645a:	e002      	b.n	8006462 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	bf00      	nop
  }

  if (status == HAL_OK)
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d15f      	bne.n	8006528 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2201      	movs	r2, #1
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f989 	bl	8007788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <HAL_TIM_PWM_Start_IT+0x210>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_TIM_PWM_Start_IT+0x166>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2c      	ldr	r2, [pc, #176]	; (8006538 <HAL_TIM_PWM_Start_IT+0x214>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <HAL_TIM_PWM_Start_IT+0x16a>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <HAL_TIM_PWM_Start_IT+0x16c>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_TIM_PWM_Start_IT+0x210>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d022      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b6:	d01d      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1f      	ldr	r2, [pc, #124]	; (800653c <HAL_TIM_PWM_Start_IT+0x218>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d018      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <HAL_TIM_PWM_Start_IT+0x21c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <HAL_TIM_PWM_Start_IT+0x220>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00e      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <HAL_TIM_PWM_Start_IT+0x214>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a18      	ldr	r2, [pc, #96]	; (8006548 <HAL_TIM_PWM_Start_IT+0x224>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a17      	ldr	r2, [pc, #92]	; (800654c <HAL_TIM_PWM_Start_IT+0x228>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d111      	bne.n	8006518 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b06      	cmp	r3, #6
 8006504:	d010      	beq.n	8006528 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	e007      	b.n	8006528 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40014000 	.word	0x40014000
 800654c:	40001800 	.word	0x40001800

08006550 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e041      	b.n	80065e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fc f8a4 	bl	80026c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 fce6 	bl	8006f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <HAL_TIM_IC_Start_IT+0x1e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e013      	b.n	8006636 <HAL_TIM_IC_Start_IT+0x46>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b04      	cmp	r3, #4
 8006612:	d104      	bne.n	800661e <HAL_TIM_IC_Start_IT+0x2e>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800661a:	b2db      	uxtb	r3, r3
 800661c:	e00b      	b.n	8006636 <HAL_TIM_IC_Start_IT+0x46>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b08      	cmp	r3, #8
 8006622:	d104      	bne.n	800662e <HAL_TIM_IC_Start_IT+0x3e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800662a:	b2db      	uxtb	r3, r3
 800662c:	e003      	b.n	8006636 <HAL_TIM_IC_Start_IT+0x46>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_TIM_IC_Start_IT+0x58>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e013      	b.n	8006670 <HAL_TIM_IC_Start_IT+0x80>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d104      	bne.n	8006658 <HAL_TIM_IC_Start_IT+0x68>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e00b      	b.n	8006670 <HAL_TIM_IC_Start_IT+0x80>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b08      	cmp	r3, #8
 800665c:	d104      	bne.n	8006668 <HAL_TIM_IC_Start_IT+0x78>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e003      	b.n	8006670 <HAL_TIM_IC_Start_IT+0x80>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800666e:	b2db      	uxtb	r3, r3
 8006670:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006678:	7b7b      	ldrb	r3, [r7, #13]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d001      	beq.n	8006682 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e0cc      	b.n	800681c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <HAL_TIM_IC_Start_IT+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006690:	e013      	b.n	80066ba <HAL_TIM_IC_Start_IT+0xca>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b04      	cmp	r3, #4
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_IC_Start_IT+0xb2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a0:	e00b      	b.n	80066ba <HAL_TIM_IC_Start_IT+0xca>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_IC_Start_IT+0xc2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b0:	e003      	b.n	80066ba <HAL_TIM_IC_Start_IT+0xca>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_TIM_IC_Start_IT+0xda>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c8:	e013      	b.n	80066f2 <HAL_TIM_IC_Start_IT+0x102>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d104      	bne.n	80066da <HAL_TIM_IC_Start_IT+0xea>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066d8:	e00b      	b.n	80066f2 <HAL_TIM_IC_Start_IT+0x102>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d104      	bne.n	80066ea <HAL_TIM_IC_Start_IT+0xfa>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e8:	e003      	b.n	80066f2 <HAL_TIM_IC_Start_IT+0x102>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d841      	bhi.n	800677c <HAL_TIM_IC_Start_IT+0x18c>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_TIM_IC_Start_IT+0x110>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006735 	.word	0x08006735
 8006704:	0800677d 	.word	0x0800677d
 8006708:	0800677d 	.word	0x0800677d
 800670c:	0800677d 	.word	0x0800677d
 8006710:	08006747 	.word	0x08006747
 8006714:	0800677d 	.word	0x0800677d
 8006718:	0800677d 	.word	0x0800677d
 800671c:	0800677d 	.word	0x0800677d
 8006720:	08006759 	.word	0x08006759
 8006724:	0800677d 	.word	0x0800677d
 8006728:	0800677d 	.word	0x0800677d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800676b 	.word	0x0800676b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0202 	orr.w	r2, r2, #2
 8006742:	60da      	str	r2, [r3, #12]
      break;
 8006744:	e01d      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0204 	orr.w	r2, r2, #4
 8006754:	60da      	str	r2, [r3, #12]
      break;
 8006756:	e014      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0208 	orr.w	r2, r2, #8
 8006766:	60da      	str	r2, [r3, #12]
      break;
 8006768:	e00b      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0210 	orr.w	r2, r2, #16
 8006778:	60da      	str	r2, [r3, #12]
      break;
 800677a:	e002      	b.n	8006782 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	73fb      	strb	r3, [r7, #15]
      break;
 8006780:	bf00      	nop
  }

  if (status == HAL_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d148      	bne.n	800681a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2201      	movs	r2, #1
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fff9 	bl	8007788 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a22      	ldr	r2, [pc, #136]	; (8006824 <HAL_TIM_IC_Start_IT+0x234>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d022      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_TIM_IC_Start_IT+0x238>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_TIM_IC_Start_IT+0x23c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_TIM_IC_Start_IT+0x240>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <HAL_TIM_IC_Start_IT+0x244>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <HAL_TIM_IC_Start_IT+0x248>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a16      	ldr	r2, [pc, #88]	; (800683c <HAL_TIM_IC_Start_IT+0x24c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d111      	bne.n	800680a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d010      	beq.n	800681a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006808:	e007      	b.n	800681a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40010400 	.word	0x40010400
 8006838:	40014000 	.word	0x40014000
 800683c:	40001800 	.word	0x40001800

08006840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0202 	mvn.w	r2, #2
 800686c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fc fbb0 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fb4a 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fb51 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d122      	bne.n	80068f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d11b      	bne.n	80068f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0204 	mvn.w	r2, #4
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fc fb86 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb20 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb27 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d122      	bne.n	8006944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b08      	cmp	r3, #8
 800690a:	d11b      	bne.n	8006944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0208 	mvn.w	r2, #8
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2204      	movs	r2, #4
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fc fb5c 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 faf6 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fafd 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b10      	cmp	r3, #16
 8006950:	d122      	bne.n	8006998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b10      	cmp	r3, #16
 800695e:	d11b      	bne.n	8006998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0210 	mvn.w	r2, #16
 8006968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2208      	movs	r2, #8
 800696e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fc fb32 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 facc 	bl	8006f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fad3 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d10e      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d107      	bne.n	80069c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0201 	mvn.w	r2, #1
 80069bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fa ff72 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d10e      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d107      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 ff78 	bl	80078e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d10e      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa98 	bl	8006f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d10e      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d107      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0220 	mvn.w	r2, #32
 8006a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 ff42 	bl	80078cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e088      	b.n	8006b80 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11b      	bne.n	8006ab4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6819      	ldr	r1, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f000 fcb8 	bl	8007400 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 020c 	bic.w	r2, r2, #12
 8006a9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
 8006ab2:	e060      	b.n	8006b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d11c      	bne.n	8006af4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f000 fd3c 	bl	8007546 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006adc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6999      	ldr	r1, [r3, #24]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	021a      	lsls	r2, r3, #8
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	619a      	str	r2, [r3, #24]
 8006af2:	e040      	b.n	8006b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d11b      	bne.n	8006b32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6819      	ldr	r1, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f000 fd89 	bl	8007620 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 020c 	bic.w	r2, r2, #12
 8006b1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69d9      	ldr	r1, [r3, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	61da      	str	r2, [r3, #28]
 8006b30:	e021      	b.n	8006b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	d11c      	bne.n	8006b72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f000 fda6 	bl	8007698 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69da      	ldr	r2, [r3, #28]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69d9      	ldr	r1, [r3, #28]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	021a      	lsls	r2, r3, #8
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	61da      	str	r2, [r3, #28]
 8006b70:	e001      	b.n	8006b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e0ae      	b.n	8006d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b0c      	cmp	r3, #12
 8006bb2:	f200 809f 	bhi.w	8006cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bf1 	.word	0x08006bf1
 8006bc0:	08006cf5 	.word	0x08006cf5
 8006bc4:	08006cf5 	.word	0x08006cf5
 8006bc8:	08006cf5 	.word	0x08006cf5
 8006bcc:	08006c31 	.word	0x08006c31
 8006bd0:	08006cf5 	.word	0x08006cf5
 8006bd4:	08006cf5 	.word	0x08006cf5
 8006bd8:	08006cf5 	.word	0x08006cf5
 8006bdc:	08006c73 	.word	0x08006c73
 8006be0:	08006cf5 	.word	0x08006cf5
 8006be4:	08006cf5 	.word	0x08006cf5
 8006be8:	08006cf5 	.word	0x08006cf5
 8006bec:	08006cb3 	.word	0x08006cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fa52 	bl	80070a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0208 	orr.w	r2, r2, #8
 8006c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6999      	ldr	r1, [r3, #24]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	619a      	str	r2, [r3, #24]
      break;
 8006c2e:	e064      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 faa2 	bl	8007180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6999      	ldr	r1, [r3, #24]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	619a      	str	r2, [r3, #24]
      break;
 8006c70:	e043      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 faf7 	bl	800726c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0208 	orr.w	r2, r2, #8
 8006c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0204 	bic.w	r2, r2, #4
 8006c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69d9      	ldr	r1, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	61da      	str	r2, [r3, #28]
      break;
 8006cb0:	e023      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fb4b 	bl	8007354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	021a      	lsls	r2, r3, #8
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	61da      	str	r2, [r3, #28]
      break;
 8006cf2:	e002      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_TIM_ConfigClockSource+0x1c>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e0b4      	b.n	8006e92 <HAL_TIM_ConfigClockSource+0x186>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d60:	d03e      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0xd4>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d66:	f200 8087 	bhi.w	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6e:	f000 8086 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x172>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	d87f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d78:	2b70      	cmp	r3, #112	; 0x70
 8006d7a:	d01a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xa6>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d87b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d80:	2b60      	cmp	r3, #96	; 0x60
 8006d82:	d050      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x11a>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d877      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d88:	2b50      	cmp	r3, #80	; 0x50
 8006d8a:	d03c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xfa>
 8006d8c:	2b50      	cmp	r3, #80	; 0x50
 8006d8e:	d873      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d058      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0x13a>
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d86f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	d064      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d86b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d060      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d867      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d05a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	e062      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f000 fcc1 	bl	8007748 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]
      break;
 8006dde:	e04f      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f000 fcaa 	bl	8007748 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e02:	609a      	str	r2, [r3, #8]
      break;
 8006e04:	e03c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 fb68 	bl	80074e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2150      	movs	r1, #80	; 0x50
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fc77 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006e24:	e02c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f000 fbc4 	bl	80075c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2160      	movs	r1, #96	; 0x60
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fc67 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006e44:	e01c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 fb48 	bl	80074e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2140      	movs	r1, #64	; 0x40
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fc57 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 fc4e 	bl	8007712 <TIM_ITRx_SetConfig>
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d831      	bhi.n	8006f14 <HAL_TIM_ReadCapturedValue+0x78>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f15 	.word	0x08006f15
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006f15 	.word	0x08006f15
 8006ec8:	08006ef7 	.word	0x08006ef7
 8006ecc:	08006f15 	.word	0x08006f15
 8006ed0:	08006f15 	.word	0x08006f15
 8006ed4:	08006f15 	.word	0x08006f15
 8006ed8:	08006f01 	.word	0x08006f01
 8006edc:	08006f15 	.word	0x08006f15
 8006ee0:	08006f15 	.word	0x08006f15
 8006ee4:	08006f15 	.word	0x08006f15
 8006ee8:	08006f0b 	.word	0x08006f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	60fb      	str	r3, [r7, #12]

      break;
 8006ef4:	e00f      	b.n	8006f16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	60fb      	str	r3, [r7, #12]

      break;
 8006efe:	e00a      	b.n	8006f16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	60fb      	str	r3, [r7, #12]

      break;
 8006f08:	e005      	b.n	8006f16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	60fb      	str	r3, [r7, #12]

      break;
 8006f12:	e000      	b.n	8006f16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f14:	bf00      	nop
  }

  return tmpreg;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a40      	ldr	r2, [pc, #256]	; (8007074 <TIM_Base_SetConfig+0x114>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <TIM_Base_SetConfig+0x40>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7e:	d00f      	beq.n	8006fa0 <TIM_Base_SetConfig+0x40>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a3d      	ldr	r2, [pc, #244]	; (8007078 <TIM_Base_SetConfig+0x118>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00b      	beq.n	8006fa0 <TIM_Base_SetConfig+0x40>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a3c      	ldr	r2, [pc, #240]	; (800707c <TIM_Base_SetConfig+0x11c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d007      	beq.n	8006fa0 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a3b      	ldr	r2, [pc, #236]	; (8007080 <TIM_Base_SetConfig+0x120>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d003      	beq.n	8006fa0 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3a      	ldr	r2, [pc, #232]	; (8007084 <TIM_Base_SetConfig+0x124>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d108      	bne.n	8006fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <TIM_Base_SetConfig+0x114>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d02b      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc0:	d027      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a2c      	ldr	r2, [pc, #176]	; (8007078 <TIM_Base_SetConfig+0x118>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d023      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2b      	ldr	r2, [pc, #172]	; (800707c <TIM_Base_SetConfig+0x11c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d01f      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2a      	ldr	r2, [pc, #168]	; (8007080 <TIM_Base_SetConfig+0x120>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01b      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a29      	ldr	r2, [pc, #164]	; (8007084 <TIM_Base_SetConfig+0x124>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d017      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a28      	ldr	r2, [pc, #160]	; (8007088 <TIM_Base_SetConfig+0x128>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <TIM_Base_SetConfig+0x12c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a26      	ldr	r2, [pc, #152]	; (8007090 <TIM_Base_SetConfig+0x130>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00b      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a25      	ldr	r2, [pc, #148]	; (8007094 <TIM_Base_SetConfig+0x134>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a24      	ldr	r2, [pc, #144]	; (8007098 <TIM_Base_SetConfig+0x138>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a23      	ldr	r2, [pc, #140]	; (800709c <TIM_Base_SetConfig+0x13c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d108      	bne.n	8007024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a0a      	ldr	r2, [pc, #40]	; (8007074 <TIM_Base_SetConfig+0x114>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_Base_SetConfig+0xf8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a0c      	ldr	r2, [pc, #48]	; (8007084 <TIM_Base_SetConfig+0x124>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d103      	bne.n	8007060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	615a      	str	r2, [r3, #20]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40010000 	.word	0x40010000
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40000c00 	.word	0x40000c00
 8007084:	40010400 	.word	0x40010400
 8007088:	40014000 	.word	0x40014000
 800708c:	40014400 	.word	0x40014400
 8007090:	40014800 	.word	0x40014800
 8007094:	40001800 	.word	0x40001800
 8007098:	40001c00 	.word	0x40001c00
 800709c:	40002000 	.word	0x40002000

080070a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f023 0201 	bic.w	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f023 0302 	bic.w	r3, r3, #2
 80070e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a20      	ldr	r2, [pc, #128]	; (8007178 <TIM_OC1_SetConfig+0xd8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC1_SetConfig+0x64>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1f      	ldr	r2, [pc, #124]	; (800717c <TIM_OC1_SetConfig+0xdc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d10c      	bne.n	800711e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f023 0308 	bic.w	r3, r3, #8
 800710a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f023 0304 	bic.w	r3, r3, #4
 800711c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <TIM_OC1_SetConfig+0xd8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_OC1_SetConfig+0x8e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <TIM_OC1_SetConfig+0xdc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d111      	bne.n	8007152 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800713c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	621a      	str	r2, [r3, #32]
}
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40010000 	.word	0x40010000
 800717c:	40010400 	.word	0x40010400

08007180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0210 	bic.w	r2, r3, #16
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a22      	ldr	r2, [pc, #136]	; (8007264 <TIM_OC2_SetConfig+0xe4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC2_SetConfig+0x68>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a21      	ldr	r2, [pc, #132]	; (8007268 <TIM_OC2_SetConfig+0xe8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10d      	bne.n	8007204 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a17      	ldr	r2, [pc, #92]	; (8007264 <TIM_OC2_SetConfig+0xe4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_OC2_SetConfig+0x94>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a16      	ldr	r2, [pc, #88]	; (8007268 <TIM_OC2_SetConfig+0xe8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d113      	bne.n	800723c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800721a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40010000 	.word	0x40010000
 8007268:	40010400 	.word	0x40010400

0800726c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a21      	ldr	r2, [pc, #132]	; (800734c <TIM_OC3_SetConfig+0xe0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d003      	beq.n	80072d2 <TIM_OC3_SetConfig+0x66>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a20      	ldr	r2, [pc, #128]	; (8007350 <TIM_OC3_SetConfig+0xe4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d10d      	bne.n	80072ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a16      	ldr	r2, [pc, #88]	; (800734c <TIM_OC3_SetConfig+0xe0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d003      	beq.n	80072fe <TIM_OC3_SetConfig+0x92>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a15      	ldr	r2, [pc, #84]	; (8007350 <TIM_OC3_SetConfig+0xe4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d113      	bne.n	8007326 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800730c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	621a      	str	r2, [r3, #32]
}
 8007340:	bf00      	nop
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40010000 	.word	0x40010000
 8007350:	40010400 	.word	0x40010400

08007354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	031b      	lsls	r3, r3, #12
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a12      	ldr	r2, [pc, #72]	; (80073f8 <TIM_OC4_SetConfig+0xa4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC4_SetConfig+0x68>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a11      	ldr	r2, [pc, #68]	; (80073fc <TIM_OC4_SetConfig+0xa8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d109      	bne.n	80073d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	019b      	lsls	r3, r3, #6
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40010000 	.word	0x40010000
 80073fc:	40010400 	.word	0x40010400

08007400 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a28      	ldr	r2, [pc, #160]	; (80074cc <TIM_TI1_SetConfig+0xcc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d01b      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007434:	d017      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <TIM_TI1_SetConfig+0xd0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a24      	ldr	r2, [pc, #144]	; (80074d4 <TIM_TI1_SetConfig+0xd4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00f      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a23      	ldr	r2, [pc, #140]	; (80074d8 <TIM_TI1_SetConfig+0xd8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a22      	ldr	r2, [pc, #136]	; (80074dc <TIM_TI1_SetConfig+0xdc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d007      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a21      	ldr	r2, [pc, #132]	; (80074e0 <TIM_TI1_SetConfig+0xe0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_TI1_SetConfig+0x66>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a20      	ldr	r2, [pc, #128]	; (80074e4 <TIM_TI1_SetConfig+0xe4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d101      	bne.n	800746a <TIM_TI1_SetConfig+0x6a>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <TIM_TI1_SetConfig+0x6c>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0303 	bic.w	r3, r3, #3
 8007476:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e003      	b.n	800748a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	b2db      	uxtb	r3, r3
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f023 030a 	bic.w	r3, r3, #10
 80074a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f003 030a 	and.w	r3, r3, #10
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40010400 	.word	0x40010400
 80074e0:	40014000 	.word	0x40014000
 80074e4:	40001800 	.word	0x40001800

080074e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f023 0201 	bic.w	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f023 030a 	bic.w	r3, r3, #10
 8007524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007546:	b480      	push	{r7}
 8007548:	b087      	sub	sp, #28
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	f023 0210 	bic.w	r2, r3, #16
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	031b      	lsls	r3, r3, #12
 800758a:	b29b      	uxth	r3, r3
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007598:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	621a      	str	r2, [r3, #32]
}
 80075b4:	bf00      	nop
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	f023 0210 	bic.w	r2, r3, #16
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	031b      	lsls	r3, r3, #12
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	621a      	str	r2, [r3, #32]
}
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 0303 	bic.w	r3, r3, #3
 800764c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800765c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	b2db      	uxtb	r3, r3
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007670:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	621a      	str	r2, [r3, #32]
}
 800768c:	bf00      	nop
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	031b      	lsls	r3, r3, #12
 80076dc:	b29b      	uxth	r3, r3
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	031b      	lsls	r3, r3, #12
 80076f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	f043 0307 	orr.w	r3, r3, #7
 8007734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	021a      	lsls	r2, r3, #8
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	431a      	orrs	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4313      	orrs	r3, r2
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	609a      	str	r2, [r3, #8]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 031f 	and.w	r3, r3, #31
 800779a:	2201      	movs	r2, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1a      	ldr	r2, [r3, #32]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1a      	ldr	r2, [r3, #32]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e05a      	b.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007838:	d01d      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a17      	ldr	r2, [pc, #92]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10c      	bne.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800787c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4313      	orrs	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40000400 	.word	0x40000400
 80078b8:	40000800 	.word	0x40000800
 80078bc:	40000c00 	.word	0x40000c00
 80078c0:	40010400 	.word	0x40010400
 80078c4:	40014000 	.word	0x40014000
 80078c8:	40001800 	.word	0x40001800

080078cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e03f      	b.n	8007986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb f82a 	bl	8002974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2224      	movs	r2, #36	; 0x24
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fddf 	bl	80084fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800794c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695a      	ldr	r2, [r3, #20]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800795c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800796c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b08a      	sub	sp, #40	; 0x28
 8007992:	af02      	add	r7, sp, #8
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d17c      	bne.n	8007aa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_UART_Transmit+0x2c>
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e075      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_UART_Transmit+0x3e>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e06e      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2221      	movs	r2, #33	; 0x21
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079e2:	f7fb fc43 	bl	800326c <HAL_GetTick>
 80079e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fc:	d108      	bne.n	8007a10 <HAL_UART_Transmit+0x82>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e003      	b.n	8007a18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a20:	e02a      	b.n	8007a78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fb1f 	bl	8008070 <UART_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e036      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	3302      	adds	r3, #2
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e007      	b.n	8007a6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	3301      	adds	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1cf      	bne.n	8007a22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2140      	movs	r1, #64	; 0x40
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 faef 	bl	8008070 <UART_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e006      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	4613      	mov	r3, r2
 8007abe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d11d      	bne.n	8007b08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_UART_Receive_IT+0x26>
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e016      	b.n	8007b0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Receive_IT+0x38>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e00f      	b.n	8007b0a <HAL_UART_Receive_IT+0x58>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	461a      	mov	r2, r3
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fb24 	bl	800814c <UART_Start_Receive_IT>
 8007b04:	4603      	mov	r3, r0
 8007b06:	e000      	b.n	8007b0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b08:	2302      	movs	r3, #2
  }
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b0ba      	sub	sp, #232	; 0xe8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10f      	bne.n	8007b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_UART_IRQHandler+0x66>
 8007b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fc07 	bl	8008386 <UART_Receive_IT>
      return;
 8007b78:	e256      	b.n	8008028 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80de 	beq.w	8007d40 <HAL_UART_IRQHandler+0x22c>
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80d1 	beq.w	8007d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00b      	beq.n	8007bc2 <HAL_UART_IRQHandler+0xae>
 8007baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0201 	orr.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <HAL_UART_IRQHandler+0xd2>
 8007bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f043 0202 	orr.w	r2, r3, #2
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00b      	beq.n	8007c0a <HAL_UART_IRQHandler+0xf6>
 8007bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f043 0204 	orr.w	r2, r3, #4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d011      	beq.n	8007c3a <HAL_UART_IRQHandler+0x126>
 8007c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d105      	bne.n	8007c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f043 0208 	orr.w	r2, r3, #8
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 81ed 	beq.w	800801e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <HAL_UART_IRQHandler+0x14e>
 8007c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fb92 	bl	8008386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <HAL_UART_IRQHandler+0x17a>
 8007c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d04f      	beq.n	8007d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa9a 	bl	80081c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d141      	bne.n	8007d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3314      	adds	r3, #20
 8007ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3314      	adds	r3, #20
 8007cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1d9      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d013      	beq.n	8007d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	4a7d      	ldr	r2, [pc, #500]	; (8007ef0 <HAL_UART_IRQHandler+0x3dc>)
 8007cfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fb fc63 	bl	80035ce <HAL_DMA_Abort_IT>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d016      	beq.n	8007d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1c:	e00e      	b.n	8007d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f990 	bl	8008044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	e00a      	b.n	8007d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f98c 	bl	8008044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2c:	e006      	b.n	8007d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f988 	bl	8008044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d3a:	e170      	b.n	800801e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	bf00      	nop
    return;
 8007d3e:	e16e      	b.n	800801e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	f040 814a 	bne.w	8007fde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8143 	beq.w	8007fde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 813c 	beq.w	8007fde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d66:	2300      	movs	r3, #0
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60bb      	str	r3, [r7, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	f040 80b4 	bne.w	8007ef4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8140 	beq.w	8008022 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007daa:	429a      	cmp	r2, r3
 8007dac:	f080 8139 	bcs.w	8008022 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007db6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc2:	f000 8088 	beq.w	8007ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	330c      	adds	r3, #12
 8007dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1d9      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e1      	bne.n	8007e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3314      	adds	r3, #20
 8007e54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3314      	adds	r3, #20
 8007e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e3      	bne.n	8007e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	330c      	adds	r3, #12
 8007eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ebe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e3      	bne.n	8007e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fb fb0c 	bl	80034ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8b6 	bl	8008058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eec:	e099      	b.n	8008022 <HAL_UART_IRQHandler+0x50e>
 8007eee:	bf00      	nop
 8007ef0:	0800828f 	.word	0x0800828f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 808b 	beq.w	8008026 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8086 	beq.w	8008026 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	330c      	adds	r3, #12
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e3      	bne.n	8007f1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3314      	adds	r3, #20
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	623b      	str	r3, [r7, #32]
   return(result);
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3314      	adds	r3, #20
 8007f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f76:	633a      	str	r2, [r7, #48]	; 0x30
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e3      	bne.n	8007f52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0310 	bic.w	r3, r3, #16
 8007fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fbc:	61fa      	str	r2, [r7, #28]
 8007fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e3      	bne.n	8007f98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f83e 	bl	8008058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fdc:	e023      	b.n	8008026 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <HAL_UART_IRQHandler+0x4ea>
 8007fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f95d 	bl	80082b6 <UART_Transmit_IT>
    return;
 8007ffc:	e014      	b.n	8008028 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <HAL_UART_IRQHandler+0x514>
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d008      	beq.n	8008028 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f99d 	bl	8008356 <UART_EndTransmit_IT>
    return;
 800801c:	e004      	b.n	8008028 <HAL_UART_IRQHandler+0x514>
    return;
 800801e:	bf00      	nop
 8008020:	e002      	b.n	8008028 <HAL_UART_IRQHandler+0x514>
      return;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <HAL_UART_IRQHandler+0x514>
      return;
 8008026:	bf00      	nop
  }
}
 8008028:	37e8      	adds	r7, #232	; 0xe8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop

08008030 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b090      	sub	sp, #64	; 0x40
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	4613      	mov	r3, r2
 800807e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008080:	e050      	b.n	8008124 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d04c      	beq.n	8008124 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800808a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008090:	f7fb f8ec 	bl	800326c <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809c:	429a      	cmp	r2, r3
 800809e:	d241      	bcs.n	8008124 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	330c      	adds	r3, #12
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c0:	637a      	str	r2, [r7, #52]	; 0x34
 80080c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e5      	bne.n	80080a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3314      	adds	r3, #20
 80080da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	613b      	str	r3, [r7, #16]
   return(result);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f023 0301 	bic.w	r3, r3, #1
 80080ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3314      	adds	r3, #20
 80080f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f4:	623a      	str	r2, [r7, #32]
 80080f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	69f9      	ldr	r1, [r7, #28]
 80080fa:	6a3a      	ldr	r2, [r7, #32]
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	61bb      	str	r3, [r7, #24]
   return(result);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e5      	bne.n	80080d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e00f      	b.n	8008144 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4013      	ands	r3, r2
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	bf0c      	ite	eq
 8008134:	2301      	moveq	r3, #1
 8008136:	2300      	movne	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	429a      	cmp	r2, r3
 8008140:	d09f      	beq.n	8008082 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3740      	adds	r7, #64	; 0x40
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	88fa      	ldrh	r2, [r7, #6]
 800816a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2222      	movs	r2, #34	; 0x22
 8008176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008198:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695a      	ldr	r2, [r3, #20]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0201 	orr.w	r2, r2, #1
 80081a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f042 0220 	orr.w	r2, r2, #32
 80081b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b095      	sub	sp, #84	; 0x54
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081f0:	643a      	str	r2, [r7, #64]	; 0x40
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e5      	bne.n	80081d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3314      	adds	r3, #20
 800820a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	61fb      	str	r3, [r7, #28]
   return(result);
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	64bb      	str	r3, [r7, #72]	; 0x48
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800822a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e5      	bne.n	8008204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	2b01      	cmp	r3, #1
 800823e:	d119      	bne.n	8008274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	330c      	adds	r3, #12
 8008246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f023 0310 	bic.w	r3, r3, #16
 8008256:	647b      	str	r3, [r7, #68]	; 0x44
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008260:	61ba      	str	r2, [r7, #24]
 8008262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	613b      	str	r3, [r7, #16]
   return(result);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e5      	bne.n	8008240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008282:	bf00      	nop
 8008284:	3754      	adds	r7, #84	; 0x54
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fecb 	bl	8008044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b21      	cmp	r3, #33	; 0x21
 80082c8:	d13e      	bne.n	8008348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d2:	d114      	bne.n	80082fe <UART_Transmit_IT+0x48>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d110      	bne.n	80082fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	1c9a      	adds	r2, r3, #2
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	621a      	str	r2, [r3, #32]
 80082fc:	e008      	b.n	8008310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	1c59      	adds	r1, r3, #1
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6211      	str	r1, [r2, #32]
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	b29b      	uxth	r3, r3
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4619      	mov	r1, r3
 800831e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10f      	bne.n	8008344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	e000      	b.n	800834a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008348:	2302      	movs	r3, #2
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800836c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fe5a 	bl	8008030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b08c      	sub	sp, #48	; 0x30
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b22      	cmp	r3, #34	; 0x22
 8008398:	f040 80ab 	bne.w	80084f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a4:	d117      	bne.n	80083d6 <UART_Receive_IT+0x50>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d113      	bne.n	80083d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	1c9a      	adds	r2, r3, #2
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	629a      	str	r2, [r3, #40]	; 0x28
 80083d4:	e026      	b.n	8008424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e8:	d007      	beq.n	80083fa <UART_Receive_IT+0x74>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <UART_Receive_IT+0x82>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e008      	b.n	800841a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008414:	b2da      	uxtb	r2, r3
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	b29b      	uxth	r3, r3
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4619      	mov	r1, r3
 8008432:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008434:	2b00      	cmp	r3, #0
 8008436:	d15a      	bne.n	80084ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0220 	bic.w	r2, r2, #32
 8008446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	695a      	ldr	r2, [r3, #20]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	2b01      	cmp	r3, #1
 8008476:	d135      	bne.n	80084e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	613b      	str	r3, [r7, #16]
   return(result);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f023 0310 	bic.w	r3, r3, #16
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	330c      	adds	r3, #12
 800849c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849e:	623a      	str	r2, [r7, #32]
 80084a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	69f9      	ldr	r1, [r7, #28]
 80084a4:	6a3a      	ldr	r2, [r7, #32]
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b10      	cmp	r3, #16
 80084be:	d10a      	bne.n	80084d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff fdbb 	bl	8008058 <HAL_UARTEx_RxEventCallback>
 80084e2:	e002      	b.n	80084ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fa fc5f 	bl	8002da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e002      	b.n	80084f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80084f2:	2302      	movs	r3, #2
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3730      	adds	r7, #48	; 0x30
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008500:	b0c0      	sub	sp, #256	; 0x100
 8008502:	af00      	add	r7, sp, #0
 8008504:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008518:	68d9      	ldr	r1, [r3, #12]
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	ea40 0301 	orr.w	r3, r0, r1
 8008524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	431a      	orrs	r2, r3
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	431a      	orrs	r2, r3
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008554:	f021 010c 	bic.w	r1, r1, #12
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008562:	430b      	orrs	r3, r1
 8008564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008576:	6999      	ldr	r1, [r3, #24]
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	ea40 0301 	orr.w	r3, r0, r1
 8008582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b8f      	ldr	r3, [pc, #572]	; (80087c8 <UART_SetConfig+0x2cc>)
 800858c:	429a      	cmp	r2, r3
 800858e:	d005      	beq.n	800859c <UART_SetConfig+0xa0>
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	4b8d      	ldr	r3, [pc, #564]	; (80087cc <UART_SetConfig+0x2d0>)
 8008598:	429a      	cmp	r2, r3
 800859a:	d104      	bne.n	80085a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800859c:	f7fc ffa8 	bl	80054f0 <HAL_RCC_GetPCLK2Freq>
 80085a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085a4:	e003      	b.n	80085ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085a6:	f7fc ff8f 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 80085aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b8:	f040 810c 	bne.w	80087d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085ce:	4622      	mov	r2, r4
 80085d0:	462b      	mov	r3, r5
 80085d2:	1891      	adds	r1, r2, r2
 80085d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80085d6:	415b      	adcs	r3, r3
 80085d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085de:	4621      	mov	r1, r4
 80085e0:	eb12 0801 	adds.w	r8, r2, r1
 80085e4:	4629      	mov	r1, r5
 80085e6:	eb43 0901 	adc.w	r9, r3, r1
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085fe:	4690      	mov	r8, r2
 8008600:	4699      	mov	r9, r3
 8008602:	4623      	mov	r3, r4
 8008604:	eb18 0303 	adds.w	r3, r8, r3
 8008608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800860c:	462b      	mov	r3, r5
 800860e:	eb49 0303 	adc.w	r3, r9, r3
 8008612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800862a:	460b      	mov	r3, r1
 800862c:	18db      	adds	r3, r3, r3
 800862e:	653b      	str	r3, [r7, #80]	; 0x50
 8008630:	4613      	mov	r3, r2
 8008632:	eb42 0303 	adc.w	r3, r2, r3
 8008636:	657b      	str	r3, [r7, #84]	; 0x54
 8008638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800863c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008640:	f7f8 fa1c 	bl	8000a7c <__aeabi_uldivmod>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4b61      	ldr	r3, [pc, #388]	; (80087d0 <UART_SetConfig+0x2d4>)
 800864a:	fba3 2302 	umull	r2, r3, r3, r2
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	011c      	lsls	r4, r3, #4
 8008652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008656:	2200      	movs	r2, #0
 8008658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800865c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008664:	4642      	mov	r2, r8
 8008666:	464b      	mov	r3, r9
 8008668:	1891      	adds	r1, r2, r2
 800866a:	64b9      	str	r1, [r7, #72]	; 0x48
 800866c:	415b      	adcs	r3, r3
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008674:	4641      	mov	r1, r8
 8008676:	eb12 0a01 	adds.w	sl, r2, r1
 800867a:	4649      	mov	r1, r9
 800867c:	eb43 0b01 	adc.w	fp, r3, r1
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800868c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008694:	4692      	mov	sl, r2
 8008696:	469b      	mov	fp, r3
 8008698:	4643      	mov	r3, r8
 800869a:	eb1a 0303 	adds.w	r3, sl, r3
 800869e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086a2:	464b      	mov	r3, r9
 80086a4:	eb4b 0303 	adc.w	r3, fp, r3
 80086a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086c0:	460b      	mov	r3, r1
 80086c2:	18db      	adds	r3, r3, r3
 80086c4:	643b      	str	r3, [r7, #64]	; 0x40
 80086c6:	4613      	mov	r3, r2
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	647b      	str	r3, [r7, #68]	; 0x44
 80086ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086d6:	f7f8 f9d1 	bl	8000a7c <__aeabi_uldivmod>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	4b3b      	ldr	r3, [pc, #236]	; (80087d0 <UART_SetConfig+0x2d4>)
 80086e2:	fba3 2301 	umull	r2, r3, r3, r1
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	2264      	movs	r2, #100	; 0x64
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
 80086ee:	1acb      	subs	r3, r1, r3
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086f6:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <UART_SetConfig+0x2d4>)
 80086f8:	fba3 2302 	umull	r2, r3, r3, r2
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008704:	441c      	add	r4, r3
 8008706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800870a:	2200      	movs	r2, #0
 800870c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008710:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	1891      	adds	r1, r2, r2
 800871e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008720:	415b      	adcs	r3, r3
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008728:	4641      	mov	r1, r8
 800872a:	1851      	adds	r1, r2, r1
 800872c:	6339      	str	r1, [r7, #48]	; 0x30
 800872e:	4649      	mov	r1, r9
 8008730:	414b      	adcs	r3, r1
 8008732:	637b      	str	r3, [r7, #52]	; 0x34
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008740:	4659      	mov	r1, fp
 8008742:	00cb      	lsls	r3, r1, #3
 8008744:	4651      	mov	r1, sl
 8008746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800874a:	4651      	mov	r1, sl
 800874c:	00ca      	lsls	r2, r1, #3
 800874e:	4610      	mov	r0, r2
 8008750:	4619      	mov	r1, r3
 8008752:	4603      	mov	r3, r0
 8008754:	4642      	mov	r2, r8
 8008756:	189b      	adds	r3, r3, r2
 8008758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800875c:	464b      	mov	r3, r9
 800875e:	460a      	mov	r2, r1
 8008760:	eb42 0303 	adc.w	r3, r2, r3
 8008764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008774:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800877c:	460b      	mov	r3, r1
 800877e:	18db      	adds	r3, r3, r3
 8008780:	62bb      	str	r3, [r7, #40]	; 0x28
 8008782:	4613      	mov	r3, r2
 8008784:	eb42 0303 	adc.w	r3, r2, r3
 8008788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800878e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008792:	f7f8 f973 	bl	8000a7c <__aeabi_uldivmod>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <UART_SetConfig+0x2d4>)
 800879c:	fba3 1302 	umull	r1, r3, r3, r2
 80087a0:	095b      	lsrs	r3, r3, #5
 80087a2:	2164      	movs	r1, #100	; 0x64
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	3332      	adds	r3, #50	; 0x32
 80087ae:	4a08      	ldr	r2, [pc, #32]	; (80087d0 <UART_SetConfig+0x2d4>)
 80087b0:	fba2 2303 	umull	r2, r3, r2, r3
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	f003 0207 	and.w	r2, r3, #7
 80087ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4422      	add	r2, r4
 80087c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087c4:	e105      	b.n	80089d2 <UART_SetConfig+0x4d6>
 80087c6:	bf00      	nop
 80087c8:	40011000 	.word	0x40011000
 80087cc:	40011400 	.word	0x40011400
 80087d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087e6:	4642      	mov	r2, r8
 80087e8:	464b      	mov	r3, r9
 80087ea:	1891      	adds	r1, r2, r2
 80087ec:	6239      	str	r1, [r7, #32]
 80087ee:	415b      	adcs	r3, r3
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
 80087f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087f6:	4641      	mov	r1, r8
 80087f8:	1854      	adds	r4, r2, r1
 80087fa:	4649      	mov	r1, r9
 80087fc:	eb43 0501 	adc.w	r5, r3, r1
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	00eb      	lsls	r3, r5, #3
 800880a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800880e:	00e2      	lsls	r2, r4, #3
 8008810:	4614      	mov	r4, r2
 8008812:	461d      	mov	r5, r3
 8008814:	4643      	mov	r3, r8
 8008816:	18e3      	adds	r3, r4, r3
 8008818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800881c:	464b      	mov	r3, r9
 800881e:	eb45 0303 	adc.w	r3, r5, r3
 8008822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008842:	4629      	mov	r1, r5
 8008844:	008b      	lsls	r3, r1, #2
 8008846:	4621      	mov	r1, r4
 8008848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800884c:	4621      	mov	r1, r4
 800884e:	008a      	lsls	r2, r1, #2
 8008850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008854:	f7f8 f912 	bl	8000a7c <__aeabi_uldivmod>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4b60      	ldr	r3, [pc, #384]	; (80089e0 <UART_SetConfig+0x4e4>)
 800885e:	fba3 2302 	umull	r2, r3, r3, r2
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	011c      	lsls	r4, r3, #4
 8008866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800886a:	2200      	movs	r2, #0
 800886c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008878:	4642      	mov	r2, r8
 800887a:	464b      	mov	r3, r9
 800887c:	1891      	adds	r1, r2, r2
 800887e:	61b9      	str	r1, [r7, #24]
 8008880:	415b      	adcs	r3, r3
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008888:	4641      	mov	r1, r8
 800888a:	1851      	adds	r1, r2, r1
 800888c:	6139      	str	r1, [r7, #16]
 800888e:	4649      	mov	r1, r9
 8008890:	414b      	adcs	r3, r1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088a0:	4659      	mov	r1, fp
 80088a2:	00cb      	lsls	r3, r1, #3
 80088a4:	4651      	mov	r1, sl
 80088a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088aa:	4651      	mov	r1, sl
 80088ac:	00ca      	lsls	r2, r1, #3
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	4642      	mov	r2, r8
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088bc:	464b      	mov	r3, r9
 80088be:	460a      	mov	r2, r1
 80088c0:	eb42 0303 	adc.w	r3, r2, r3
 80088c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80088d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088e0:	4649      	mov	r1, r9
 80088e2:	008b      	lsls	r3, r1, #2
 80088e4:	4641      	mov	r1, r8
 80088e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ea:	4641      	mov	r1, r8
 80088ec:	008a      	lsls	r2, r1, #2
 80088ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088f2:	f7f8 f8c3 	bl	8000a7c <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4b39      	ldr	r3, [pc, #228]	; (80089e0 <UART_SetConfig+0x4e4>)
 80088fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	2164      	movs	r1, #100	; 0x64
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	3332      	adds	r3, #50	; 0x32
 800890e:	4a34      	ldr	r2, [pc, #208]	; (80089e0 <UART_SetConfig+0x4e4>)
 8008910:	fba2 2303 	umull	r2, r3, r2, r3
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800891a:	441c      	add	r4, r3
 800891c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008920:	2200      	movs	r2, #0
 8008922:	673b      	str	r3, [r7, #112]	; 0x70
 8008924:	677a      	str	r2, [r7, #116]	; 0x74
 8008926:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800892a:	4642      	mov	r2, r8
 800892c:	464b      	mov	r3, r9
 800892e:	1891      	adds	r1, r2, r2
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	415b      	adcs	r3, r3
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800893a:	4641      	mov	r1, r8
 800893c:	1851      	adds	r1, r2, r1
 800893e:	6039      	str	r1, [r7, #0]
 8008940:	4649      	mov	r1, r9
 8008942:	414b      	adcs	r3, r1
 8008944:	607b      	str	r3, [r7, #4]
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008952:	4659      	mov	r1, fp
 8008954:	00cb      	lsls	r3, r1, #3
 8008956:	4651      	mov	r1, sl
 8008958:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800895c:	4651      	mov	r1, sl
 800895e:	00ca      	lsls	r2, r1, #3
 8008960:	4610      	mov	r0, r2
 8008962:	4619      	mov	r1, r3
 8008964:	4603      	mov	r3, r0
 8008966:	4642      	mov	r2, r8
 8008968:	189b      	adds	r3, r3, r2
 800896a:	66bb      	str	r3, [r7, #104]	; 0x68
 800896c:	464b      	mov	r3, r9
 800896e:	460a      	mov	r2, r1
 8008970:	eb42 0303 	adc.w	r3, r2, r3
 8008974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	663b      	str	r3, [r7, #96]	; 0x60
 8008980:	667a      	str	r2, [r7, #100]	; 0x64
 8008982:	f04f 0200 	mov.w	r2, #0
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800898e:	4649      	mov	r1, r9
 8008990:	008b      	lsls	r3, r1, #2
 8008992:	4641      	mov	r1, r8
 8008994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008998:	4641      	mov	r1, r8
 800899a:	008a      	lsls	r2, r1, #2
 800899c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089a0:	f7f8 f86c 	bl	8000a7c <__aeabi_uldivmod>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <UART_SetConfig+0x4e4>)
 80089aa:	fba3 1302 	umull	r1, r3, r3, r2
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	2164      	movs	r1, #100	; 0x64
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	3332      	adds	r3, #50	; 0x32
 80089bc:	4a08      	ldr	r2, [pc, #32]	; (80089e0 <UART_SetConfig+0x4e4>)
 80089be:	fba2 2303 	umull	r2, r3, r2, r3
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4422      	add	r2, r4
 80089d0:	609a      	str	r2, [r3, #8]
}
 80089d2:	bf00      	nop
 80089d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089d8:	46bd      	mov	sp, r7
 80089da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089de:	bf00      	nop
 80089e0:	51eb851f 	.word	0x51eb851f

080089e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089e4:	b084      	sub	sp, #16
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	f107 001c 	add.w	r0, r7, #28
 80089f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d122      	bne.n	8008a42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d105      	bne.n	8008a36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 faa2 	bl	8008f80 <USB_CoreReset>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]
 8008a40:	e01a      	b.n	8008a78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa96 	bl	8008f80 <USB_CoreReset>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	639a      	str	r2, [r3, #56]	; 0x38
 8008a6a:	e005      	b.n	8008a78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d10b      	bne.n	8008a96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f043 0206 	orr.w	r2, r3, #6
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f043 0220 	orr.w	r2, r3, #32
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aa2:	b004      	add	sp, #16
 8008aa4:	4770      	bx	lr

08008aa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f023 0201 	bic.w	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d115      	bne.n	8008b16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008af6:	2001      	movs	r0, #1
 8008af8:	f7fa fbc4 	bl	8003284 <HAL_Delay>
      ms++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa2e 	bl	8008f64 <USB_GetMode>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d01e      	beq.n	8008b4c <USB_SetCurrentMode+0x84>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b31      	cmp	r3, #49	; 0x31
 8008b12:	d9f0      	bls.n	8008af6 <USB_SetCurrentMode+0x2e>
 8008b14:	e01a      	b.n	8008b4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d115      	bne.n	8008b48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b28:	2001      	movs	r0, #1
 8008b2a:	f7fa fbab 	bl	8003284 <HAL_Delay>
      ms++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa15 	bl	8008f64 <USB_GetMode>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <USB_SetCurrentMode+0x84>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b31      	cmp	r3, #49	; 0x31
 8008b44:	d9f0      	bls.n	8008b28 <USB_SetCurrentMode+0x60>
 8008b46:	e001      	b.n	8008b4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e005      	b.n	8008b58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b32      	cmp	r3, #50	; 0x32
 8008b50:	d101      	bne.n	8008b56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e000      	b.n	8008b58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b60:	b084      	sub	sp, #16
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	e009      	b.n	8008b94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3340      	adds	r3, #64	; 0x40
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3301      	adds	r3, #1
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2b0e      	cmp	r3, #14
 8008b98:	d9f2      	bls.n	8008b80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11c      	bne.n	8008bda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bae:	f043 0302 	orr.w	r3, r3, #2
 8008bb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8008bd8:	e00b      	b.n	8008bf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c04:	4619      	mov	r1, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	680b      	ldr	r3, [r1, #0]
 8008c10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d10c      	bne.n	8008c32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c1e:	2100      	movs	r1, #0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f965 	bl	8008ef0 <USB_SetDevSpeed>
 8008c26:	e008      	b.n	8008c3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c28:	2101      	movs	r1, #1
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f960 	bl	8008ef0 <USB_SetDevSpeed>
 8008c30:	e003      	b.n	8008c3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c32:	2103      	movs	r1, #3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f95b 	bl	8008ef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c3a:	2110      	movs	r1, #16
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f8f3 	bl	8008e28 <USB_FlushTxFifo>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f91f 	bl	8008e90 <USB_FlushRxFifo>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	461a      	mov	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	e043      	b.n	8008d0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c9c:	d118      	bne.n	8008cd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	e013      	b.n	8008ce2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	e008      	b.n	8008ce2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cdc:	461a      	mov	r2, r3
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cee:	461a      	mov	r2, r3
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d00:	461a      	mov	r2, r3
 8008d02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d3b7      	bcc.n	8008c86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d16:	2300      	movs	r3, #0
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	e043      	b.n	8008da4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d32:	d118      	bne.n	8008d66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	461a      	mov	r2, r3
 8008d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	e013      	b.n	8008d78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	e008      	b.n	8008d78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d72:	461a      	mov	r2, r3
 8008d74:	2300      	movs	r3, #0
 8008d76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	461a      	mov	r2, r3
 8008d86:	2300      	movs	r3, #0
 8008d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d96:	461a      	mov	r2, r3
 8008d98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	3301      	adds	r3, #1
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3b7      	bcc.n	8008d1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	f043 0210 	orr.w	r2, r3, #16
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <USB_DevInit+0x2c4>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f043 0208 	orr.w	r2, r3, #8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d107      	bne.n	8008e14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e0c:	f043 0304 	orr.w	r3, r3, #4
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e20:	b004      	add	sp, #16
 8008e22:	4770      	bx	lr
 8008e24:	803c3800 	.word	0x803c3800

08008e28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <USB_FlushTxFifo+0x64>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e01b      	b.n	8008e80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	daf2      	bge.n	8008e36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	019b      	lsls	r3, r3, #6
 8008e58:	f043 0220 	orr.w	r2, r3, #32
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4a08      	ldr	r2, [pc, #32]	; (8008e8c <USB_FlushTxFifo+0x64>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d901      	bls.n	8008e72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e006      	b.n	8008e80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d0f0      	beq.n	8008e60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	00030d40 	.word	0x00030d40

08008e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4a11      	ldr	r2, [pc, #68]	; (8008eec <USB_FlushRxFifo+0x5c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d901      	bls.n	8008eae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e018      	b.n	8008ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	daf2      	bge.n	8008e9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2210      	movs	r2, #16
 8008ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4a08      	ldr	r2, [pc, #32]	; (8008eec <USB_FlushRxFifo+0x5c>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d901      	bls.n	8008ed2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e006      	b.n	8008ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	2b10      	cmp	r3, #16
 8008edc:	d0f0      	beq.n	8008ec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	00030d40 	.word	0x00030d40

08008ef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f10:	4313      	orrs	r3, r2
 8008f12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f3c:	f023 0303 	bic.w	r3, r3, #3
 8008f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f50:	f043 0302 	orr.w	r3, r3, #2
 8008f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	f003 0301 	and.w	r3, r3, #1
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4a13      	ldr	r2, [pc, #76]	; (8008fe4 <USB_CoreReset+0x64>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d901      	bls.n	8008f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e01b      	b.n	8008fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	daf2      	bge.n	8008f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f043 0201 	orr.w	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <USB_CoreReset+0x64>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d901      	bls.n	8008fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e006      	b.n	8008fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d0f0      	beq.n	8008fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	00030d40 	.word	0x00030d40

08008fe8 <atoi>:
 8008fe8:	220a      	movs	r2, #10
 8008fea:	2100      	movs	r1, #0
 8008fec:	f000 b98a 	b.w	8009304 <strtol>

08008ff0 <__errno>:
 8008ff0:	4b01      	ldr	r3, [pc, #4]	; (8008ff8 <__errno+0x8>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000140 	.word	0x20000140

08008ffc <__libc_init_array>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4d0d      	ldr	r5, [pc, #52]	; (8009034 <__libc_init_array+0x38>)
 8009000:	4c0d      	ldr	r4, [pc, #52]	; (8009038 <__libc_init_array+0x3c>)
 8009002:	1b64      	subs	r4, r4, r5
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	2600      	movs	r6, #0
 8009008:	42a6      	cmp	r6, r4
 800900a:	d109      	bne.n	8009020 <__libc_init_array+0x24>
 800900c:	4d0b      	ldr	r5, [pc, #44]	; (800903c <__libc_init_array+0x40>)
 800900e:	4c0c      	ldr	r4, [pc, #48]	; (8009040 <__libc_init_array+0x44>)
 8009010:	f001 fab4 	bl	800a57c <_init>
 8009014:	1b64      	subs	r4, r4, r5
 8009016:	10a4      	asrs	r4, r4, #2
 8009018:	2600      	movs	r6, #0
 800901a:	42a6      	cmp	r6, r4
 800901c:	d105      	bne.n	800902a <__libc_init_array+0x2e>
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	f855 3b04 	ldr.w	r3, [r5], #4
 8009024:	4798      	blx	r3
 8009026:	3601      	adds	r6, #1
 8009028:	e7ee      	b.n	8009008 <__libc_init_array+0xc>
 800902a:	f855 3b04 	ldr.w	r3, [r5], #4
 800902e:	4798      	blx	r3
 8009030:	3601      	adds	r6, #1
 8009032:	e7f2      	b.n	800901a <__libc_init_array+0x1e>
 8009034:	0800a890 	.word	0x0800a890
 8009038:	0800a890 	.word	0x0800a890
 800903c:	0800a890 	.word	0x0800a890
 8009040:	0800a894 	.word	0x0800a894

08009044 <memset>:
 8009044:	4402      	add	r2, r0
 8009046:	4603      	mov	r3, r0
 8009048:	4293      	cmp	r3, r2
 800904a:	d100      	bne.n	800904e <memset+0xa>
 800904c:	4770      	bx	lr
 800904e:	f803 1b01 	strb.w	r1, [r3], #1
 8009052:	e7f9      	b.n	8009048 <memset+0x4>

08009054 <iprintf>:
 8009054:	b40f      	push	{r0, r1, r2, r3}
 8009056:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <iprintf+0x2c>)
 8009058:	b513      	push	{r0, r1, r4, lr}
 800905a:	681c      	ldr	r4, [r3, #0]
 800905c:	b124      	cbz	r4, 8009068 <iprintf+0x14>
 800905e:	69a3      	ldr	r3, [r4, #24]
 8009060:	b913      	cbnz	r3, 8009068 <iprintf+0x14>
 8009062:	4620      	mov	r0, r4
 8009064:	f000 fb32 	bl	80096cc <__sinit>
 8009068:	ab05      	add	r3, sp, #20
 800906a:	9a04      	ldr	r2, [sp, #16]
 800906c:	68a1      	ldr	r1, [r4, #8]
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fe97 	bl	8009da4 <_vfiprintf_r>
 8009076:	b002      	add	sp, #8
 8009078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907c:	b004      	add	sp, #16
 800907e:	4770      	bx	lr
 8009080:	20000140 	.word	0x20000140

08009084 <_puts_r>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	460e      	mov	r6, r1
 8009088:	4605      	mov	r5, r0
 800908a:	b118      	cbz	r0, 8009094 <_puts_r+0x10>
 800908c:	6983      	ldr	r3, [r0, #24]
 800908e:	b90b      	cbnz	r3, 8009094 <_puts_r+0x10>
 8009090:	f000 fb1c 	bl	80096cc <__sinit>
 8009094:	69ab      	ldr	r3, [r5, #24]
 8009096:	68ac      	ldr	r4, [r5, #8]
 8009098:	b913      	cbnz	r3, 80090a0 <_puts_r+0x1c>
 800909a:	4628      	mov	r0, r5
 800909c:	f000 fb16 	bl	80096cc <__sinit>
 80090a0:	4b2c      	ldr	r3, [pc, #176]	; (8009154 <_puts_r+0xd0>)
 80090a2:	429c      	cmp	r4, r3
 80090a4:	d120      	bne.n	80090e8 <_puts_r+0x64>
 80090a6:	686c      	ldr	r4, [r5, #4]
 80090a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d405      	bmi.n	80090ba <_puts_r+0x36>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	0598      	lsls	r0, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_puts_r+0x36>
 80090b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b6:	f000 fba7 	bl	8009808 <__retarget_lock_acquire_recursive>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	0719      	lsls	r1, r3, #28
 80090be:	d51d      	bpl.n	80090fc <_puts_r+0x78>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	b1db      	cbz	r3, 80090fc <_puts_r+0x78>
 80090c4:	3e01      	subs	r6, #1
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090cc:	3b01      	subs	r3, #1
 80090ce:	60a3      	str	r3, [r4, #8]
 80090d0:	bb39      	cbnz	r1, 8009122 <_puts_r+0x9e>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da38      	bge.n	8009148 <_puts_r+0xc4>
 80090d6:	4622      	mov	r2, r4
 80090d8:	210a      	movs	r1, #10
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f91c 	bl	8009318 <__swbuf_r>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d011      	beq.n	8009108 <_puts_r+0x84>
 80090e4:	250a      	movs	r5, #10
 80090e6:	e011      	b.n	800910c <_puts_r+0x88>
 80090e8:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <_puts_r+0xd4>)
 80090ea:	429c      	cmp	r4, r3
 80090ec:	d101      	bne.n	80090f2 <_puts_r+0x6e>
 80090ee:	68ac      	ldr	r4, [r5, #8]
 80090f0:	e7da      	b.n	80090a8 <_puts_r+0x24>
 80090f2:	4b1a      	ldr	r3, [pc, #104]	; (800915c <_puts_r+0xd8>)
 80090f4:	429c      	cmp	r4, r3
 80090f6:	bf08      	it	eq
 80090f8:	68ec      	ldreq	r4, [r5, #12]
 80090fa:	e7d5      	b.n	80090a8 <_puts_r+0x24>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 f95c 	bl	80093bc <__swsetup_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	d0dd      	beq.n	80090c4 <_puts_r+0x40>
 8009108:	f04f 35ff 	mov.w	r5, #4294967295
 800910c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800910e:	07da      	lsls	r2, r3, #31
 8009110:	d405      	bmi.n	800911e <_puts_r+0x9a>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	059b      	lsls	r3, r3, #22
 8009116:	d402      	bmi.n	800911e <_puts_r+0x9a>
 8009118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911a:	f000 fb76 	bl	800980a <__retarget_lock_release_recursive>
 800911e:	4628      	mov	r0, r5
 8009120:	bd70      	pop	{r4, r5, r6, pc}
 8009122:	2b00      	cmp	r3, #0
 8009124:	da04      	bge.n	8009130 <_puts_r+0xac>
 8009126:	69a2      	ldr	r2, [r4, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	dc06      	bgt.n	800913a <_puts_r+0xb6>
 800912c:	290a      	cmp	r1, #10
 800912e:	d004      	beq.n	800913a <_puts_r+0xb6>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	6022      	str	r2, [r4, #0]
 8009136:	7019      	strb	r1, [r3, #0]
 8009138:	e7c5      	b.n	80090c6 <_puts_r+0x42>
 800913a:	4622      	mov	r2, r4
 800913c:	4628      	mov	r0, r5
 800913e:	f000 f8eb 	bl	8009318 <__swbuf_r>
 8009142:	3001      	adds	r0, #1
 8009144:	d1bf      	bne.n	80090c6 <_puts_r+0x42>
 8009146:	e7df      	b.n	8009108 <_puts_r+0x84>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	250a      	movs	r5, #10
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	701d      	strb	r5, [r3, #0]
 8009152:	e7db      	b.n	800910c <_puts_r+0x88>
 8009154:	0800a814 	.word	0x0800a814
 8009158:	0800a834 	.word	0x0800a834
 800915c:	0800a7f4 	.word	0x0800a7f4

08009160 <puts>:
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <puts+0xc>)
 8009162:	4601      	mov	r1, r0
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	f7ff bf8d 	b.w	8009084 <_puts_r>
 800916a:	bf00      	nop
 800916c:	20000140 	.word	0x20000140

08009170 <siprintf>:
 8009170:	b40e      	push	{r1, r2, r3}
 8009172:	b500      	push	{lr}
 8009174:	b09c      	sub	sp, #112	; 0x70
 8009176:	ab1d      	add	r3, sp, #116	; 0x74
 8009178:	9002      	str	r0, [sp, #8]
 800917a:	9006      	str	r0, [sp, #24]
 800917c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009180:	4809      	ldr	r0, [pc, #36]	; (80091a8 <siprintf+0x38>)
 8009182:	9107      	str	r1, [sp, #28]
 8009184:	9104      	str	r1, [sp, #16]
 8009186:	4909      	ldr	r1, [pc, #36]	; (80091ac <siprintf+0x3c>)
 8009188:	f853 2b04 	ldr.w	r2, [r3], #4
 800918c:	9105      	str	r1, [sp, #20]
 800918e:	6800      	ldr	r0, [r0, #0]
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	a902      	add	r1, sp, #8
 8009194:	f000 fcdc 	bl	8009b50 <_svfiprintf_r>
 8009198:	9b02      	ldr	r3, [sp, #8]
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	b01c      	add	sp, #112	; 0x70
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	20000140 	.word	0x20000140
 80091ac:	ffff0208 	.word	0xffff0208

080091b0 <strncmp>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	b17a      	cbz	r2, 80091d4 <strncmp+0x24>
 80091b4:	4603      	mov	r3, r0
 80091b6:	3901      	subs	r1, #1
 80091b8:	1884      	adds	r4, r0, r2
 80091ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091c2:	4290      	cmp	r0, r2
 80091c4:	d101      	bne.n	80091ca <strncmp+0x1a>
 80091c6:	42a3      	cmp	r3, r4
 80091c8:	d101      	bne.n	80091ce <strncmp+0x1e>
 80091ca:	1a80      	subs	r0, r0, r2
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d1f3      	bne.n	80091ba <strncmp+0xa>
 80091d2:	e7fa      	b.n	80091ca <strncmp+0x1a>
 80091d4:	4610      	mov	r0, r2
 80091d6:	e7f9      	b.n	80091cc <strncmp+0x1c>

080091d8 <strncpy>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	3901      	subs	r1, #1
 80091dc:	4603      	mov	r3, r0
 80091de:	b132      	cbz	r2, 80091ee <strncpy+0x16>
 80091e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80091e4:	f803 4b01 	strb.w	r4, [r3], #1
 80091e8:	3a01      	subs	r2, #1
 80091ea:	2c00      	cmp	r4, #0
 80091ec:	d1f7      	bne.n	80091de <strncpy+0x6>
 80091ee:	441a      	add	r2, r3
 80091f0:	2100      	movs	r1, #0
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d100      	bne.n	80091f8 <strncpy+0x20>
 80091f6:	bd10      	pop	{r4, pc}
 80091f8:	f803 1b01 	strb.w	r1, [r3], #1
 80091fc:	e7f9      	b.n	80091f2 <strncpy+0x1a>
	...

08009200 <_strtol_l.constprop.0>:
 8009200:	2b01      	cmp	r3, #1
 8009202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009206:	d001      	beq.n	800920c <_strtol_l.constprop.0+0xc>
 8009208:	2b24      	cmp	r3, #36	; 0x24
 800920a:	d906      	bls.n	800921a <_strtol_l.constprop.0+0x1a>
 800920c:	f7ff fef0 	bl	8008ff0 <__errno>
 8009210:	2316      	movs	r3, #22
 8009212:	6003      	str	r3, [r0, #0]
 8009214:	2000      	movs	r0, #0
 8009216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009300 <_strtol_l.constprop.0+0x100>
 800921e:	460d      	mov	r5, r1
 8009220:	462e      	mov	r6, r5
 8009222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009226:	f814 700c 	ldrb.w	r7, [r4, ip]
 800922a:	f017 0708 	ands.w	r7, r7, #8
 800922e:	d1f7      	bne.n	8009220 <_strtol_l.constprop.0+0x20>
 8009230:	2c2d      	cmp	r4, #45	; 0x2d
 8009232:	d132      	bne.n	800929a <_strtol_l.constprop.0+0x9a>
 8009234:	782c      	ldrb	r4, [r5, #0]
 8009236:	2701      	movs	r7, #1
 8009238:	1cb5      	adds	r5, r6, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d05b      	beq.n	80092f6 <_strtol_l.constprop.0+0xf6>
 800923e:	2b10      	cmp	r3, #16
 8009240:	d109      	bne.n	8009256 <_strtol_l.constprop.0+0x56>
 8009242:	2c30      	cmp	r4, #48	; 0x30
 8009244:	d107      	bne.n	8009256 <_strtol_l.constprop.0+0x56>
 8009246:	782c      	ldrb	r4, [r5, #0]
 8009248:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800924c:	2c58      	cmp	r4, #88	; 0x58
 800924e:	d14d      	bne.n	80092ec <_strtol_l.constprop.0+0xec>
 8009250:	786c      	ldrb	r4, [r5, #1]
 8009252:	2310      	movs	r3, #16
 8009254:	3502      	adds	r5, #2
 8009256:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800925a:	f108 38ff 	add.w	r8, r8, #4294967295
 800925e:	f04f 0c00 	mov.w	ip, #0
 8009262:	fbb8 f9f3 	udiv	r9, r8, r3
 8009266:	4666      	mov	r6, ip
 8009268:	fb03 8a19 	mls	sl, r3, r9, r8
 800926c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009270:	f1be 0f09 	cmp.w	lr, #9
 8009274:	d816      	bhi.n	80092a4 <_strtol_l.constprop.0+0xa4>
 8009276:	4674      	mov	r4, lr
 8009278:	42a3      	cmp	r3, r4
 800927a:	dd24      	ble.n	80092c6 <_strtol_l.constprop.0+0xc6>
 800927c:	f1bc 0f00 	cmp.w	ip, #0
 8009280:	db1e      	blt.n	80092c0 <_strtol_l.constprop.0+0xc0>
 8009282:	45b1      	cmp	r9, r6
 8009284:	d31c      	bcc.n	80092c0 <_strtol_l.constprop.0+0xc0>
 8009286:	d101      	bne.n	800928c <_strtol_l.constprop.0+0x8c>
 8009288:	45a2      	cmp	sl, r4
 800928a:	db19      	blt.n	80092c0 <_strtol_l.constprop.0+0xc0>
 800928c:	fb06 4603 	mla	r6, r6, r3, r4
 8009290:	f04f 0c01 	mov.w	ip, #1
 8009294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009298:	e7e8      	b.n	800926c <_strtol_l.constprop.0+0x6c>
 800929a:	2c2b      	cmp	r4, #43	; 0x2b
 800929c:	bf04      	itt	eq
 800929e:	782c      	ldrbeq	r4, [r5, #0]
 80092a0:	1cb5      	addeq	r5, r6, #2
 80092a2:	e7ca      	b.n	800923a <_strtol_l.constprop.0+0x3a>
 80092a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80092a8:	f1be 0f19 	cmp.w	lr, #25
 80092ac:	d801      	bhi.n	80092b2 <_strtol_l.constprop.0+0xb2>
 80092ae:	3c37      	subs	r4, #55	; 0x37
 80092b0:	e7e2      	b.n	8009278 <_strtol_l.constprop.0+0x78>
 80092b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80092b6:	f1be 0f19 	cmp.w	lr, #25
 80092ba:	d804      	bhi.n	80092c6 <_strtol_l.constprop.0+0xc6>
 80092bc:	3c57      	subs	r4, #87	; 0x57
 80092be:	e7db      	b.n	8009278 <_strtol_l.constprop.0+0x78>
 80092c0:	f04f 3cff 	mov.w	ip, #4294967295
 80092c4:	e7e6      	b.n	8009294 <_strtol_l.constprop.0+0x94>
 80092c6:	f1bc 0f00 	cmp.w	ip, #0
 80092ca:	da05      	bge.n	80092d8 <_strtol_l.constprop.0+0xd8>
 80092cc:	2322      	movs	r3, #34	; 0x22
 80092ce:	6003      	str	r3, [r0, #0]
 80092d0:	4646      	mov	r6, r8
 80092d2:	b942      	cbnz	r2, 80092e6 <_strtol_l.constprop.0+0xe6>
 80092d4:	4630      	mov	r0, r6
 80092d6:	e79e      	b.n	8009216 <_strtol_l.constprop.0+0x16>
 80092d8:	b107      	cbz	r7, 80092dc <_strtol_l.constprop.0+0xdc>
 80092da:	4276      	negs	r6, r6
 80092dc:	2a00      	cmp	r2, #0
 80092de:	d0f9      	beq.n	80092d4 <_strtol_l.constprop.0+0xd4>
 80092e0:	f1bc 0f00 	cmp.w	ip, #0
 80092e4:	d000      	beq.n	80092e8 <_strtol_l.constprop.0+0xe8>
 80092e6:	1e69      	subs	r1, r5, #1
 80092e8:	6011      	str	r1, [r2, #0]
 80092ea:	e7f3      	b.n	80092d4 <_strtol_l.constprop.0+0xd4>
 80092ec:	2430      	movs	r4, #48	; 0x30
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1b1      	bne.n	8009256 <_strtol_l.constprop.0+0x56>
 80092f2:	2308      	movs	r3, #8
 80092f4:	e7af      	b.n	8009256 <_strtol_l.constprop.0+0x56>
 80092f6:	2c30      	cmp	r4, #48	; 0x30
 80092f8:	d0a5      	beq.n	8009246 <_strtol_l.constprop.0+0x46>
 80092fa:	230a      	movs	r3, #10
 80092fc:	e7ab      	b.n	8009256 <_strtol_l.constprop.0+0x56>
 80092fe:	bf00      	nop
 8009300:	0800a6f1 	.word	0x0800a6f1

08009304 <strtol>:
 8009304:	4613      	mov	r3, r2
 8009306:	460a      	mov	r2, r1
 8009308:	4601      	mov	r1, r0
 800930a:	4802      	ldr	r0, [pc, #8]	; (8009314 <strtol+0x10>)
 800930c:	6800      	ldr	r0, [r0, #0]
 800930e:	f7ff bf77 	b.w	8009200 <_strtol_l.constprop.0>
 8009312:	bf00      	nop
 8009314:	20000140 	.word	0x20000140

08009318 <__swbuf_r>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	460e      	mov	r6, r1
 800931c:	4614      	mov	r4, r2
 800931e:	4605      	mov	r5, r0
 8009320:	b118      	cbz	r0, 800932a <__swbuf_r+0x12>
 8009322:	6983      	ldr	r3, [r0, #24]
 8009324:	b90b      	cbnz	r3, 800932a <__swbuf_r+0x12>
 8009326:	f000 f9d1 	bl	80096cc <__sinit>
 800932a:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <__swbuf_r+0x98>)
 800932c:	429c      	cmp	r4, r3
 800932e:	d12b      	bne.n	8009388 <__swbuf_r+0x70>
 8009330:	686c      	ldr	r4, [r5, #4]
 8009332:	69a3      	ldr	r3, [r4, #24]
 8009334:	60a3      	str	r3, [r4, #8]
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	071a      	lsls	r2, r3, #28
 800933a:	d52f      	bpl.n	800939c <__swbuf_r+0x84>
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	b36b      	cbz	r3, 800939c <__swbuf_r+0x84>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	1ac0      	subs	r0, r0, r3
 8009346:	6963      	ldr	r3, [r4, #20]
 8009348:	b2f6      	uxtb	r6, r6
 800934a:	4283      	cmp	r3, r0
 800934c:	4637      	mov	r7, r6
 800934e:	dc04      	bgt.n	800935a <__swbuf_r+0x42>
 8009350:	4621      	mov	r1, r4
 8009352:	4628      	mov	r0, r5
 8009354:	f000 f926 	bl	80095a4 <_fflush_r>
 8009358:	bb30      	cbnz	r0, 80093a8 <__swbuf_r+0x90>
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	3b01      	subs	r3, #1
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	6022      	str	r2, [r4, #0]
 8009366:	701e      	strb	r6, [r3, #0]
 8009368:	6963      	ldr	r3, [r4, #20]
 800936a:	3001      	adds	r0, #1
 800936c:	4283      	cmp	r3, r0
 800936e:	d004      	beq.n	800937a <__swbuf_r+0x62>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	07db      	lsls	r3, r3, #31
 8009374:	d506      	bpl.n	8009384 <__swbuf_r+0x6c>
 8009376:	2e0a      	cmp	r6, #10
 8009378:	d104      	bne.n	8009384 <__swbuf_r+0x6c>
 800937a:	4621      	mov	r1, r4
 800937c:	4628      	mov	r0, r5
 800937e:	f000 f911 	bl	80095a4 <_fflush_r>
 8009382:	b988      	cbnz	r0, 80093a8 <__swbuf_r+0x90>
 8009384:	4638      	mov	r0, r7
 8009386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <__swbuf_r+0x9c>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d101      	bne.n	8009392 <__swbuf_r+0x7a>
 800938e:	68ac      	ldr	r4, [r5, #8]
 8009390:	e7cf      	b.n	8009332 <__swbuf_r+0x1a>
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <__swbuf_r+0xa0>)
 8009394:	429c      	cmp	r4, r3
 8009396:	bf08      	it	eq
 8009398:	68ec      	ldreq	r4, [r5, #12]
 800939a:	e7ca      	b.n	8009332 <__swbuf_r+0x1a>
 800939c:	4621      	mov	r1, r4
 800939e:	4628      	mov	r0, r5
 80093a0:	f000 f80c 	bl	80093bc <__swsetup_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d0cb      	beq.n	8009340 <__swbuf_r+0x28>
 80093a8:	f04f 37ff 	mov.w	r7, #4294967295
 80093ac:	e7ea      	b.n	8009384 <__swbuf_r+0x6c>
 80093ae:	bf00      	nop
 80093b0:	0800a814 	.word	0x0800a814
 80093b4:	0800a834 	.word	0x0800a834
 80093b8:	0800a7f4 	.word	0x0800a7f4

080093bc <__swsetup_r>:
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <__swsetup_r+0xcc>)
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	4606      	mov	r6, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	b125      	cbz	r5, 80093d2 <__swsetup_r+0x16>
 80093c8:	69ab      	ldr	r3, [r5, #24]
 80093ca:	b913      	cbnz	r3, 80093d2 <__swsetup_r+0x16>
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f97d 	bl	80096cc <__sinit>
 80093d2:	4b2e      	ldr	r3, [pc, #184]	; (800948c <__swsetup_r+0xd0>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d10f      	bne.n	80093f8 <__swsetup_r+0x3c>
 80093d8:	686c      	ldr	r4, [r5, #4]
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e0:	0719      	lsls	r1, r3, #28
 80093e2:	d42c      	bmi.n	800943e <__swsetup_r+0x82>
 80093e4:	06dd      	lsls	r5, r3, #27
 80093e6:	d411      	bmi.n	800940c <__swsetup_r+0x50>
 80093e8:	2309      	movs	r3, #9
 80093ea:	6033      	str	r3, [r6, #0]
 80093ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	f04f 30ff 	mov.w	r0, #4294967295
 80093f6:	e03e      	b.n	8009476 <__swsetup_r+0xba>
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <__swsetup_r+0xd4>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d101      	bne.n	8009402 <__swsetup_r+0x46>
 80093fe:	68ac      	ldr	r4, [r5, #8]
 8009400:	e7eb      	b.n	80093da <__swsetup_r+0x1e>
 8009402:	4b24      	ldr	r3, [pc, #144]	; (8009494 <__swsetup_r+0xd8>)
 8009404:	429c      	cmp	r4, r3
 8009406:	bf08      	it	eq
 8009408:	68ec      	ldreq	r4, [r5, #12]
 800940a:	e7e6      	b.n	80093da <__swsetup_r+0x1e>
 800940c:	0758      	lsls	r0, r3, #29
 800940e:	d512      	bpl.n	8009436 <__swsetup_r+0x7a>
 8009410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009412:	b141      	cbz	r1, 8009426 <__swsetup_r+0x6a>
 8009414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009418:	4299      	cmp	r1, r3
 800941a:	d002      	beq.n	8009422 <__swsetup_r+0x66>
 800941c:	4630      	mov	r0, r6
 800941e:	f000 fa5b 	bl	80098d8 <_free_r>
 8009422:	2300      	movs	r3, #0
 8009424:	6363      	str	r3, [r4, #52]	; 0x34
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800942c:	81a3      	strh	r3, [r4, #12]
 800942e:	2300      	movs	r3, #0
 8009430:	6063      	str	r3, [r4, #4]
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f043 0308 	orr.w	r3, r3, #8
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	b94b      	cbnz	r3, 8009456 <__swsetup_r+0x9a>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944c:	d003      	beq.n	8009456 <__swsetup_r+0x9a>
 800944e:	4621      	mov	r1, r4
 8009450:	4630      	mov	r0, r6
 8009452:	f000 fa01 	bl	8009858 <__smakebuf_r>
 8009456:	89a0      	ldrh	r0, [r4, #12]
 8009458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800945c:	f010 0301 	ands.w	r3, r0, #1
 8009460:	d00a      	beq.n	8009478 <__swsetup_r+0xbc>
 8009462:	2300      	movs	r3, #0
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	6963      	ldr	r3, [r4, #20]
 8009468:	425b      	negs	r3, r3
 800946a:	61a3      	str	r3, [r4, #24]
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	b943      	cbnz	r3, 8009482 <__swsetup_r+0xc6>
 8009470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009474:	d1ba      	bne.n	80093ec <__swsetup_r+0x30>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	0781      	lsls	r1, r0, #30
 800947a:	bf58      	it	pl
 800947c:	6963      	ldrpl	r3, [r4, #20]
 800947e:	60a3      	str	r3, [r4, #8]
 8009480:	e7f4      	b.n	800946c <__swsetup_r+0xb0>
 8009482:	2000      	movs	r0, #0
 8009484:	e7f7      	b.n	8009476 <__swsetup_r+0xba>
 8009486:	bf00      	nop
 8009488:	20000140 	.word	0x20000140
 800948c:	0800a814 	.word	0x0800a814
 8009490:	0800a834 	.word	0x0800a834
 8009494:	0800a7f4 	.word	0x0800a7f4

08009498 <__sflush_r>:
 8009498:	898a      	ldrh	r2, [r1, #12]
 800949a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	4605      	mov	r5, r0
 80094a0:	0710      	lsls	r0, r2, #28
 80094a2:	460c      	mov	r4, r1
 80094a4:	d458      	bmi.n	8009558 <__sflush_r+0xc0>
 80094a6:	684b      	ldr	r3, [r1, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc05      	bgt.n	80094b8 <__sflush_r+0x20>
 80094ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dc02      	bgt.n	80094b8 <__sflush_r+0x20>
 80094b2:	2000      	movs	r0, #0
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	d0f9      	beq.n	80094b2 <__sflush_r+0x1a>
 80094be:	2300      	movs	r3, #0
 80094c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094c4:	682f      	ldr	r7, [r5, #0]
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	d032      	beq.n	8009530 <__sflush_r+0x98>
 80094ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	075a      	lsls	r2, r3, #29
 80094d0:	d505      	bpl.n	80094de <__sflush_r+0x46>
 80094d2:	6863      	ldr	r3, [r4, #4]
 80094d4:	1ac0      	subs	r0, r0, r3
 80094d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094d8:	b10b      	cbz	r3, 80094de <__sflush_r+0x46>
 80094da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094dc:	1ac0      	subs	r0, r0, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	4602      	mov	r2, r0
 80094e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094e4:	6a21      	ldr	r1, [r4, #32]
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b0      	blx	r6
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	d106      	bne.n	80094fe <__sflush_r+0x66>
 80094f0:	6829      	ldr	r1, [r5, #0]
 80094f2:	291d      	cmp	r1, #29
 80094f4:	d82c      	bhi.n	8009550 <__sflush_r+0xb8>
 80094f6:	4a2a      	ldr	r2, [pc, #168]	; (80095a0 <__sflush_r+0x108>)
 80094f8:	40ca      	lsrs	r2, r1
 80094fa:	07d6      	lsls	r6, r2, #31
 80094fc:	d528      	bpl.n	8009550 <__sflush_r+0xb8>
 80094fe:	2200      	movs	r2, #0
 8009500:	6062      	str	r2, [r4, #4]
 8009502:	04d9      	lsls	r1, r3, #19
 8009504:	6922      	ldr	r2, [r4, #16]
 8009506:	6022      	str	r2, [r4, #0]
 8009508:	d504      	bpl.n	8009514 <__sflush_r+0x7c>
 800950a:	1c42      	adds	r2, r0, #1
 800950c:	d101      	bne.n	8009512 <__sflush_r+0x7a>
 800950e:	682b      	ldr	r3, [r5, #0]
 8009510:	b903      	cbnz	r3, 8009514 <__sflush_r+0x7c>
 8009512:	6560      	str	r0, [r4, #84]	; 0x54
 8009514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009516:	602f      	str	r7, [r5, #0]
 8009518:	2900      	cmp	r1, #0
 800951a:	d0ca      	beq.n	80094b2 <__sflush_r+0x1a>
 800951c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009520:	4299      	cmp	r1, r3
 8009522:	d002      	beq.n	800952a <__sflush_r+0x92>
 8009524:	4628      	mov	r0, r5
 8009526:	f000 f9d7 	bl	80098d8 <_free_r>
 800952a:	2000      	movs	r0, #0
 800952c:	6360      	str	r0, [r4, #52]	; 0x34
 800952e:	e7c1      	b.n	80094b4 <__sflush_r+0x1c>
 8009530:	6a21      	ldr	r1, [r4, #32]
 8009532:	2301      	movs	r3, #1
 8009534:	4628      	mov	r0, r5
 8009536:	47b0      	blx	r6
 8009538:	1c41      	adds	r1, r0, #1
 800953a:	d1c7      	bne.n	80094cc <__sflush_r+0x34>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0c4      	beq.n	80094cc <__sflush_r+0x34>
 8009542:	2b1d      	cmp	r3, #29
 8009544:	d001      	beq.n	800954a <__sflush_r+0xb2>
 8009546:	2b16      	cmp	r3, #22
 8009548:	d101      	bne.n	800954e <__sflush_r+0xb6>
 800954a:	602f      	str	r7, [r5, #0]
 800954c:	e7b1      	b.n	80094b2 <__sflush_r+0x1a>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	e7ad      	b.n	80094b4 <__sflush_r+0x1c>
 8009558:	690f      	ldr	r7, [r1, #16]
 800955a:	2f00      	cmp	r7, #0
 800955c:	d0a9      	beq.n	80094b2 <__sflush_r+0x1a>
 800955e:	0793      	lsls	r3, r2, #30
 8009560:	680e      	ldr	r6, [r1, #0]
 8009562:	bf08      	it	eq
 8009564:	694b      	ldreq	r3, [r1, #20]
 8009566:	600f      	str	r7, [r1, #0]
 8009568:	bf18      	it	ne
 800956a:	2300      	movne	r3, #0
 800956c:	eba6 0807 	sub.w	r8, r6, r7
 8009570:	608b      	str	r3, [r1, #8]
 8009572:	f1b8 0f00 	cmp.w	r8, #0
 8009576:	dd9c      	ble.n	80094b2 <__sflush_r+0x1a>
 8009578:	6a21      	ldr	r1, [r4, #32]
 800957a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800957c:	4643      	mov	r3, r8
 800957e:	463a      	mov	r2, r7
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	2800      	cmp	r0, #0
 8009586:	dc06      	bgt.n	8009596 <__sflush_r+0xfe>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	e78e      	b.n	80094b4 <__sflush_r+0x1c>
 8009596:	4407      	add	r7, r0
 8009598:	eba8 0800 	sub.w	r8, r8, r0
 800959c:	e7e9      	b.n	8009572 <__sflush_r+0xda>
 800959e:	bf00      	nop
 80095a0:	20400001 	.word	0x20400001

080095a4 <_fflush_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	690b      	ldr	r3, [r1, #16]
 80095a8:	4605      	mov	r5, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	b913      	cbnz	r3, 80095b4 <_fflush_r+0x10>
 80095ae:	2500      	movs	r5, #0
 80095b0:	4628      	mov	r0, r5
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	b118      	cbz	r0, 80095be <_fflush_r+0x1a>
 80095b6:	6983      	ldr	r3, [r0, #24]
 80095b8:	b90b      	cbnz	r3, 80095be <_fflush_r+0x1a>
 80095ba:	f000 f887 	bl	80096cc <__sinit>
 80095be:	4b14      	ldr	r3, [pc, #80]	; (8009610 <_fflush_r+0x6c>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	d11b      	bne.n	80095fc <_fflush_r+0x58>
 80095c4:	686c      	ldr	r4, [r5, #4]
 80095c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0ef      	beq.n	80095ae <_fflush_r+0xa>
 80095ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095d0:	07d0      	lsls	r0, r2, #31
 80095d2:	d404      	bmi.n	80095de <_fflush_r+0x3a>
 80095d4:	0599      	lsls	r1, r3, #22
 80095d6:	d402      	bmi.n	80095de <_fflush_r+0x3a>
 80095d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095da:	f000 f915 	bl	8009808 <__retarget_lock_acquire_recursive>
 80095de:	4628      	mov	r0, r5
 80095e0:	4621      	mov	r1, r4
 80095e2:	f7ff ff59 	bl	8009498 <__sflush_r>
 80095e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e8:	07da      	lsls	r2, r3, #31
 80095ea:	4605      	mov	r5, r0
 80095ec:	d4e0      	bmi.n	80095b0 <_fflush_r+0xc>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	059b      	lsls	r3, r3, #22
 80095f2:	d4dd      	bmi.n	80095b0 <_fflush_r+0xc>
 80095f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f6:	f000 f908 	bl	800980a <__retarget_lock_release_recursive>
 80095fa:	e7d9      	b.n	80095b0 <_fflush_r+0xc>
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <_fflush_r+0x70>)
 80095fe:	429c      	cmp	r4, r3
 8009600:	d101      	bne.n	8009606 <_fflush_r+0x62>
 8009602:	68ac      	ldr	r4, [r5, #8]
 8009604:	e7df      	b.n	80095c6 <_fflush_r+0x22>
 8009606:	4b04      	ldr	r3, [pc, #16]	; (8009618 <_fflush_r+0x74>)
 8009608:	429c      	cmp	r4, r3
 800960a:	bf08      	it	eq
 800960c:	68ec      	ldreq	r4, [r5, #12]
 800960e:	e7da      	b.n	80095c6 <_fflush_r+0x22>
 8009610:	0800a814 	.word	0x0800a814
 8009614:	0800a834 	.word	0x0800a834
 8009618:	0800a7f4 	.word	0x0800a7f4

0800961c <std>:
 800961c:	2300      	movs	r3, #0
 800961e:	b510      	push	{r4, lr}
 8009620:	4604      	mov	r4, r0
 8009622:	e9c0 3300 	strd	r3, r3, [r0]
 8009626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962a:	6083      	str	r3, [r0, #8]
 800962c:	8181      	strh	r1, [r0, #12]
 800962e:	6643      	str	r3, [r0, #100]	; 0x64
 8009630:	81c2      	strh	r2, [r0, #14]
 8009632:	6183      	str	r3, [r0, #24]
 8009634:	4619      	mov	r1, r3
 8009636:	2208      	movs	r2, #8
 8009638:	305c      	adds	r0, #92	; 0x5c
 800963a:	f7ff fd03 	bl	8009044 <memset>
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <std+0x38>)
 8009640:	6263      	str	r3, [r4, #36]	; 0x24
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <std+0x3c>)
 8009644:	62a3      	str	r3, [r4, #40]	; 0x28
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <std+0x40>)
 8009648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <std+0x44>)
 800964c:	6224      	str	r4, [r4, #32]
 800964e:	6323      	str	r3, [r4, #48]	; 0x30
 8009650:	bd10      	pop	{r4, pc}
 8009652:	bf00      	nop
 8009654:	0800a34d 	.word	0x0800a34d
 8009658:	0800a36f 	.word	0x0800a36f
 800965c:	0800a3a7 	.word	0x0800a3a7
 8009660:	0800a3cb 	.word	0x0800a3cb

08009664 <_cleanup_r>:
 8009664:	4901      	ldr	r1, [pc, #4]	; (800966c <_cleanup_r+0x8>)
 8009666:	f000 b8af 	b.w	80097c8 <_fwalk_reent>
 800966a:	bf00      	nop
 800966c:	080095a5 	.word	0x080095a5

08009670 <__sfmoreglue>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	2268      	movs	r2, #104	; 0x68
 8009674:	1e4d      	subs	r5, r1, #1
 8009676:	4355      	muls	r5, r2
 8009678:	460e      	mov	r6, r1
 800967a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800967e:	f000 f997 	bl	80099b0 <_malloc_r>
 8009682:	4604      	mov	r4, r0
 8009684:	b140      	cbz	r0, 8009698 <__sfmoreglue+0x28>
 8009686:	2100      	movs	r1, #0
 8009688:	e9c0 1600 	strd	r1, r6, [r0]
 800968c:	300c      	adds	r0, #12
 800968e:	60a0      	str	r0, [r4, #8]
 8009690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009694:	f7ff fcd6 	bl	8009044 <memset>
 8009698:	4620      	mov	r0, r4
 800969a:	bd70      	pop	{r4, r5, r6, pc}

0800969c <__sfp_lock_acquire>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__sfp_lock_acquire+0x8>)
 800969e:	f000 b8b3 	b.w	8009808 <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	20000c89 	.word	0x20000c89

080096a8 <__sfp_lock_release>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__sfp_lock_release+0x8>)
 80096aa:	f000 b8ae 	b.w	800980a <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	20000c89 	.word	0x20000c89

080096b4 <__sinit_lock_acquire>:
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <__sinit_lock_acquire+0x8>)
 80096b6:	f000 b8a7 	b.w	8009808 <__retarget_lock_acquire_recursive>
 80096ba:	bf00      	nop
 80096bc:	20000c8a 	.word	0x20000c8a

080096c0 <__sinit_lock_release>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__sinit_lock_release+0x8>)
 80096c2:	f000 b8a2 	b.w	800980a <__retarget_lock_release_recursive>
 80096c6:	bf00      	nop
 80096c8:	20000c8a 	.word	0x20000c8a

080096cc <__sinit>:
 80096cc:	b510      	push	{r4, lr}
 80096ce:	4604      	mov	r4, r0
 80096d0:	f7ff fff0 	bl	80096b4 <__sinit_lock_acquire>
 80096d4:	69a3      	ldr	r3, [r4, #24]
 80096d6:	b11b      	cbz	r3, 80096e0 <__sinit+0x14>
 80096d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096dc:	f7ff bff0 	b.w	80096c0 <__sinit_lock_release>
 80096e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096e4:	6523      	str	r3, [r4, #80]	; 0x50
 80096e6:	4b13      	ldr	r3, [pc, #76]	; (8009734 <__sinit+0x68>)
 80096e8:	4a13      	ldr	r2, [pc, #76]	; (8009738 <__sinit+0x6c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	bf04      	itt	eq
 80096f2:	2301      	moveq	r3, #1
 80096f4:	61a3      	streq	r3, [r4, #24]
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f820 	bl	800973c <__sfp>
 80096fc:	6060      	str	r0, [r4, #4]
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 f81c 	bl	800973c <__sfp>
 8009704:	60a0      	str	r0, [r4, #8]
 8009706:	4620      	mov	r0, r4
 8009708:	f000 f818 	bl	800973c <__sfp>
 800970c:	2200      	movs	r2, #0
 800970e:	60e0      	str	r0, [r4, #12]
 8009710:	2104      	movs	r1, #4
 8009712:	6860      	ldr	r0, [r4, #4]
 8009714:	f7ff ff82 	bl	800961c <std>
 8009718:	68a0      	ldr	r0, [r4, #8]
 800971a:	2201      	movs	r2, #1
 800971c:	2109      	movs	r1, #9
 800971e:	f7ff ff7d 	bl	800961c <std>
 8009722:	68e0      	ldr	r0, [r4, #12]
 8009724:	2202      	movs	r2, #2
 8009726:	2112      	movs	r1, #18
 8009728:	f7ff ff78 	bl	800961c <std>
 800972c:	2301      	movs	r3, #1
 800972e:	61a3      	str	r3, [r4, #24]
 8009730:	e7d2      	b.n	80096d8 <__sinit+0xc>
 8009732:	bf00      	nop
 8009734:	0800a6ec 	.word	0x0800a6ec
 8009738:	08009665 	.word	0x08009665

0800973c <__sfp>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	4607      	mov	r7, r0
 8009740:	f7ff ffac 	bl	800969c <__sfp_lock_acquire>
 8009744:	4b1e      	ldr	r3, [pc, #120]	; (80097c0 <__sfp+0x84>)
 8009746:	681e      	ldr	r6, [r3, #0]
 8009748:	69b3      	ldr	r3, [r6, #24]
 800974a:	b913      	cbnz	r3, 8009752 <__sfp+0x16>
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff ffbd 	bl	80096cc <__sinit>
 8009752:	3648      	adds	r6, #72	; 0x48
 8009754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009758:	3b01      	subs	r3, #1
 800975a:	d503      	bpl.n	8009764 <__sfp+0x28>
 800975c:	6833      	ldr	r3, [r6, #0]
 800975e:	b30b      	cbz	r3, 80097a4 <__sfp+0x68>
 8009760:	6836      	ldr	r6, [r6, #0]
 8009762:	e7f7      	b.n	8009754 <__sfp+0x18>
 8009764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009768:	b9d5      	cbnz	r5, 80097a0 <__sfp+0x64>
 800976a:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <__sfp+0x88>)
 800976c:	60e3      	str	r3, [r4, #12]
 800976e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009772:	6665      	str	r5, [r4, #100]	; 0x64
 8009774:	f000 f847 	bl	8009806 <__retarget_lock_init_recursive>
 8009778:	f7ff ff96 	bl	80096a8 <__sfp_lock_release>
 800977c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009784:	6025      	str	r5, [r4, #0]
 8009786:	61a5      	str	r5, [r4, #24]
 8009788:	2208      	movs	r2, #8
 800978a:	4629      	mov	r1, r5
 800978c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009790:	f7ff fc58 	bl	8009044 <memset>
 8009794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800979c:	4620      	mov	r0, r4
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	3468      	adds	r4, #104	; 0x68
 80097a2:	e7d9      	b.n	8009758 <__sfp+0x1c>
 80097a4:	2104      	movs	r1, #4
 80097a6:	4638      	mov	r0, r7
 80097a8:	f7ff ff62 	bl	8009670 <__sfmoreglue>
 80097ac:	4604      	mov	r4, r0
 80097ae:	6030      	str	r0, [r6, #0]
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d1d5      	bne.n	8009760 <__sfp+0x24>
 80097b4:	f7ff ff78 	bl	80096a8 <__sfp_lock_release>
 80097b8:	230c      	movs	r3, #12
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	e7ee      	b.n	800979c <__sfp+0x60>
 80097be:	bf00      	nop
 80097c0:	0800a6ec 	.word	0x0800a6ec
 80097c4:	ffff0001 	.word	0xffff0001

080097c8 <_fwalk_reent>:
 80097c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097cc:	4606      	mov	r6, r0
 80097ce:	4688      	mov	r8, r1
 80097d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097d4:	2700      	movs	r7, #0
 80097d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097da:	f1b9 0901 	subs.w	r9, r9, #1
 80097de:	d505      	bpl.n	80097ec <_fwalk_reent+0x24>
 80097e0:	6824      	ldr	r4, [r4, #0]
 80097e2:	2c00      	cmp	r4, #0
 80097e4:	d1f7      	bne.n	80097d6 <_fwalk_reent+0xe>
 80097e6:	4638      	mov	r0, r7
 80097e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ec:	89ab      	ldrh	r3, [r5, #12]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d907      	bls.n	8009802 <_fwalk_reent+0x3a>
 80097f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097f6:	3301      	adds	r3, #1
 80097f8:	d003      	beq.n	8009802 <_fwalk_reent+0x3a>
 80097fa:	4629      	mov	r1, r5
 80097fc:	4630      	mov	r0, r6
 80097fe:	47c0      	blx	r8
 8009800:	4307      	orrs	r7, r0
 8009802:	3568      	adds	r5, #104	; 0x68
 8009804:	e7e9      	b.n	80097da <_fwalk_reent+0x12>

08009806 <__retarget_lock_init_recursive>:
 8009806:	4770      	bx	lr

08009808 <__retarget_lock_acquire_recursive>:
 8009808:	4770      	bx	lr

0800980a <__retarget_lock_release_recursive>:
 800980a:	4770      	bx	lr

0800980c <__swhatbuf_r>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	460e      	mov	r6, r1
 8009810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009814:	2900      	cmp	r1, #0
 8009816:	b096      	sub	sp, #88	; 0x58
 8009818:	4614      	mov	r4, r2
 800981a:	461d      	mov	r5, r3
 800981c:	da08      	bge.n	8009830 <__swhatbuf_r+0x24>
 800981e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	602a      	str	r2, [r5, #0]
 8009826:	061a      	lsls	r2, r3, #24
 8009828:	d410      	bmi.n	800984c <__swhatbuf_r+0x40>
 800982a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982e:	e00e      	b.n	800984e <__swhatbuf_r+0x42>
 8009830:	466a      	mov	r2, sp
 8009832:	f000 fdf1 	bl	800a418 <_fstat_r>
 8009836:	2800      	cmp	r0, #0
 8009838:	dbf1      	blt.n	800981e <__swhatbuf_r+0x12>
 800983a:	9a01      	ldr	r2, [sp, #4]
 800983c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009844:	425a      	negs	r2, r3
 8009846:	415a      	adcs	r2, r3
 8009848:	602a      	str	r2, [r5, #0]
 800984a:	e7ee      	b.n	800982a <__swhatbuf_r+0x1e>
 800984c:	2340      	movs	r3, #64	; 0x40
 800984e:	2000      	movs	r0, #0
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	b016      	add	sp, #88	; 0x58
 8009854:	bd70      	pop	{r4, r5, r6, pc}
	...

08009858 <__smakebuf_r>:
 8009858:	898b      	ldrh	r3, [r1, #12]
 800985a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800985c:	079d      	lsls	r5, r3, #30
 800985e:	4606      	mov	r6, r0
 8009860:	460c      	mov	r4, r1
 8009862:	d507      	bpl.n	8009874 <__smakebuf_r+0x1c>
 8009864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	6123      	str	r3, [r4, #16]
 800986c:	2301      	movs	r3, #1
 800986e:	6163      	str	r3, [r4, #20]
 8009870:	b002      	add	sp, #8
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	ab01      	add	r3, sp, #4
 8009876:	466a      	mov	r2, sp
 8009878:	f7ff ffc8 	bl	800980c <__swhatbuf_r>
 800987c:	9900      	ldr	r1, [sp, #0]
 800987e:	4605      	mov	r5, r0
 8009880:	4630      	mov	r0, r6
 8009882:	f000 f895 	bl	80099b0 <_malloc_r>
 8009886:	b948      	cbnz	r0, 800989c <__smakebuf_r+0x44>
 8009888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988c:	059a      	lsls	r2, r3, #22
 800988e:	d4ef      	bmi.n	8009870 <__smakebuf_r+0x18>
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	f043 0302 	orr.w	r3, r3, #2
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e7e3      	b.n	8009864 <__smakebuf_r+0xc>
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <__smakebuf_r+0x7c>)
 800989e:	62b3      	str	r3, [r6, #40]	; 0x28
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	6163      	str	r3, [r4, #20]
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	b15b      	cbz	r3, 80098cc <__smakebuf_r+0x74>
 80098b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 fdbf 	bl	800a43c <_isatty_r>
 80098be:	b128      	cbz	r0, 80098cc <__smakebuf_r+0x74>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	89a0      	ldrh	r0, [r4, #12]
 80098ce:	4305      	orrs	r5, r0
 80098d0:	81a5      	strh	r5, [r4, #12]
 80098d2:	e7cd      	b.n	8009870 <__smakebuf_r+0x18>
 80098d4:	08009665 	.word	0x08009665

080098d8 <_free_r>:
 80098d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098da:	2900      	cmp	r1, #0
 80098dc:	d044      	beq.n	8009968 <_free_r+0x90>
 80098de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e2:	9001      	str	r0, [sp, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f1a1 0404 	sub.w	r4, r1, #4
 80098ea:	bfb8      	it	lt
 80098ec:	18e4      	addlt	r4, r4, r3
 80098ee:	f000 fdef 	bl	800a4d0 <__malloc_lock>
 80098f2:	4a1e      	ldr	r2, [pc, #120]	; (800996c <_free_r+0x94>)
 80098f4:	9801      	ldr	r0, [sp, #4]
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	b933      	cbnz	r3, 8009908 <_free_r+0x30>
 80098fa:	6063      	str	r3, [r4, #4]
 80098fc:	6014      	str	r4, [r2, #0]
 80098fe:	b003      	add	sp, #12
 8009900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009904:	f000 bdea 	b.w	800a4dc <__malloc_unlock>
 8009908:	42a3      	cmp	r3, r4
 800990a:	d908      	bls.n	800991e <_free_r+0x46>
 800990c:	6825      	ldr	r5, [r4, #0]
 800990e:	1961      	adds	r1, r4, r5
 8009910:	428b      	cmp	r3, r1
 8009912:	bf01      	itttt	eq
 8009914:	6819      	ldreq	r1, [r3, #0]
 8009916:	685b      	ldreq	r3, [r3, #4]
 8009918:	1949      	addeq	r1, r1, r5
 800991a:	6021      	streq	r1, [r4, #0]
 800991c:	e7ed      	b.n	80098fa <_free_r+0x22>
 800991e:	461a      	mov	r2, r3
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	b10b      	cbz	r3, 8009928 <_free_r+0x50>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d9fa      	bls.n	800991e <_free_r+0x46>
 8009928:	6811      	ldr	r1, [r2, #0]
 800992a:	1855      	adds	r5, r2, r1
 800992c:	42a5      	cmp	r5, r4
 800992e:	d10b      	bne.n	8009948 <_free_r+0x70>
 8009930:	6824      	ldr	r4, [r4, #0]
 8009932:	4421      	add	r1, r4
 8009934:	1854      	adds	r4, r2, r1
 8009936:	42a3      	cmp	r3, r4
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	d1e0      	bne.n	80098fe <_free_r+0x26>
 800993c:	681c      	ldr	r4, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	6053      	str	r3, [r2, #4]
 8009942:	4421      	add	r1, r4
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	e7da      	b.n	80098fe <_free_r+0x26>
 8009948:	d902      	bls.n	8009950 <_free_r+0x78>
 800994a:	230c      	movs	r3, #12
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	e7d6      	b.n	80098fe <_free_r+0x26>
 8009950:	6825      	ldr	r5, [r4, #0]
 8009952:	1961      	adds	r1, r4, r5
 8009954:	428b      	cmp	r3, r1
 8009956:	bf04      	itt	eq
 8009958:	6819      	ldreq	r1, [r3, #0]
 800995a:	685b      	ldreq	r3, [r3, #4]
 800995c:	6063      	str	r3, [r4, #4]
 800995e:	bf04      	itt	eq
 8009960:	1949      	addeq	r1, r1, r5
 8009962:	6021      	streq	r1, [r4, #0]
 8009964:	6054      	str	r4, [r2, #4]
 8009966:	e7ca      	b.n	80098fe <_free_r+0x26>
 8009968:	b003      	add	sp, #12
 800996a:	bd30      	pop	{r4, r5, pc}
 800996c:	20000c8c 	.word	0x20000c8c

08009970 <sbrk_aligned>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	4e0e      	ldr	r6, [pc, #56]	; (80099ac <sbrk_aligned+0x3c>)
 8009974:	460c      	mov	r4, r1
 8009976:	6831      	ldr	r1, [r6, #0]
 8009978:	4605      	mov	r5, r0
 800997a:	b911      	cbnz	r1, 8009982 <sbrk_aligned+0x12>
 800997c:	f000 fcd6 	bl	800a32c <_sbrk_r>
 8009980:	6030      	str	r0, [r6, #0]
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f000 fcd1 	bl	800a32c <_sbrk_r>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	d00a      	beq.n	80099a4 <sbrk_aligned+0x34>
 800998e:	1cc4      	adds	r4, r0, #3
 8009990:	f024 0403 	bic.w	r4, r4, #3
 8009994:	42a0      	cmp	r0, r4
 8009996:	d007      	beq.n	80099a8 <sbrk_aligned+0x38>
 8009998:	1a21      	subs	r1, r4, r0
 800999a:	4628      	mov	r0, r5
 800999c:	f000 fcc6 	bl	800a32c <_sbrk_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d101      	bne.n	80099a8 <sbrk_aligned+0x38>
 80099a4:	f04f 34ff 	mov.w	r4, #4294967295
 80099a8:	4620      	mov	r0, r4
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	20000c90 	.word	0x20000c90

080099b0 <_malloc_r>:
 80099b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b4:	1ccd      	adds	r5, r1, #3
 80099b6:	f025 0503 	bic.w	r5, r5, #3
 80099ba:	3508      	adds	r5, #8
 80099bc:	2d0c      	cmp	r5, #12
 80099be:	bf38      	it	cc
 80099c0:	250c      	movcc	r5, #12
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	4607      	mov	r7, r0
 80099c6:	db01      	blt.n	80099cc <_malloc_r+0x1c>
 80099c8:	42a9      	cmp	r1, r5
 80099ca:	d905      	bls.n	80099d8 <_malloc_r+0x28>
 80099cc:	230c      	movs	r3, #12
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	2600      	movs	r6, #0
 80099d2:	4630      	mov	r0, r6
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	4e2e      	ldr	r6, [pc, #184]	; (8009a94 <_malloc_r+0xe4>)
 80099da:	f000 fd79 	bl	800a4d0 <__malloc_lock>
 80099de:	6833      	ldr	r3, [r6, #0]
 80099e0:	461c      	mov	r4, r3
 80099e2:	bb34      	cbnz	r4, 8009a32 <_malloc_r+0x82>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7ff ffc2 	bl	8009970 <sbrk_aligned>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	4604      	mov	r4, r0
 80099f0:	d14d      	bne.n	8009a8e <_malloc_r+0xde>
 80099f2:	6834      	ldr	r4, [r6, #0]
 80099f4:	4626      	mov	r6, r4
 80099f6:	2e00      	cmp	r6, #0
 80099f8:	d140      	bne.n	8009a7c <_malloc_r+0xcc>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	4631      	mov	r1, r6
 80099fe:	4638      	mov	r0, r7
 8009a00:	eb04 0803 	add.w	r8, r4, r3
 8009a04:	f000 fc92 	bl	800a32c <_sbrk_r>
 8009a08:	4580      	cmp	r8, r0
 8009a0a:	d13a      	bne.n	8009a82 <_malloc_r+0xd2>
 8009a0c:	6821      	ldr	r1, [r4, #0]
 8009a0e:	3503      	adds	r5, #3
 8009a10:	1a6d      	subs	r5, r5, r1
 8009a12:	f025 0503 	bic.w	r5, r5, #3
 8009a16:	3508      	adds	r5, #8
 8009a18:	2d0c      	cmp	r5, #12
 8009a1a:	bf38      	it	cc
 8009a1c:	250c      	movcc	r5, #12
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff ffa5 	bl	8009970 <sbrk_aligned>
 8009a26:	3001      	adds	r0, #1
 8009a28:	d02b      	beq.n	8009a82 <_malloc_r+0xd2>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	442b      	add	r3, r5
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	e00e      	b.n	8009a50 <_malloc_r+0xa0>
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	1b52      	subs	r2, r2, r5
 8009a36:	d41e      	bmi.n	8009a76 <_malloc_r+0xc6>
 8009a38:	2a0b      	cmp	r2, #11
 8009a3a:	d916      	bls.n	8009a6a <_malloc_r+0xba>
 8009a3c:	1961      	adds	r1, r4, r5
 8009a3e:	42a3      	cmp	r3, r4
 8009a40:	6025      	str	r5, [r4, #0]
 8009a42:	bf18      	it	ne
 8009a44:	6059      	strne	r1, [r3, #4]
 8009a46:	6863      	ldr	r3, [r4, #4]
 8009a48:	bf08      	it	eq
 8009a4a:	6031      	streq	r1, [r6, #0]
 8009a4c:	5162      	str	r2, [r4, r5]
 8009a4e:	604b      	str	r3, [r1, #4]
 8009a50:	4638      	mov	r0, r7
 8009a52:	f104 060b 	add.w	r6, r4, #11
 8009a56:	f000 fd41 	bl	800a4dc <__malloc_unlock>
 8009a5a:	f026 0607 	bic.w	r6, r6, #7
 8009a5e:	1d23      	adds	r3, r4, #4
 8009a60:	1af2      	subs	r2, r6, r3
 8009a62:	d0b6      	beq.n	80099d2 <_malloc_r+0x22>
 8009a64:	1b9b      	subs	r3, r3, r6
 8009a66:	50a3      	str	r3, [r4, r2]
 8009a68:	e7b3      	b.n	80099d2 <_malloc_r+0x22>
 8009a6a:	6862      	ldr	r2, [r4, #4]
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	bf0c      	ite	eq
 8009a70:	6032      	streq	r2, [r6, #0]
 8009a72:	605a      	strne	r2, [r3, #4]
 8009a74:	e7ec      	b.n	8009a50 <_malloc_r+0xa0>
 8009a76:	4623      	mov	r3, r4
 8009a78:	6864      	ldr	r4, [r4, #4]
 8009a7a:	e7b2      	b.n	80099e2 <_malloc_r+0x32>
 8009a7c:	4634      	mov	r4, r6
 8009a7e:	6876      	ldr	r6, [r6, #4]
 8009a80:	e7b9      	b.n	80099f6 <_malloc_r+0x46>
 8009a82:	230c      	movs	r3, #12
 8009a84:	603b      	str	r3, [r7, #0]
 8009a86:	4638      	mov	r0, r7
 8009a88:	f000 fd28 	bl	800a4dc <__malloc_unlock>
 8009a8c:	e7a1      	b.n	80099d2 <_malloc_r+0x22>
 8009a8e:	6025      	str	r5, [r4, #0]
 8009a90:	e7de      	b.n	8009a50 <_malloc_r+0xa0>
 8009a92:	bf00      	nop
 8009a94:	20000c8c 	.word	0x20000c8c

08009a98 <__ssputs_r>:
 8009a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9c:	688e      	ldr	r6, [r1, #8]
 8009a9e:	429e      	cmp	r6, r3
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	4690      	mov	r8, r2
 8009aa6:	461f      	mov	r7, r3
 8009aa8:	d838      	bhi.n	8009b1c <__ssputs_r+0x84>
 8009aaa:	898a      	ldrh	r2, [r1, #12]
 8009aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ab0:	d032      	beq.n	8009b18 <__ssputs_r+0x80>
 8009ab2:	6825      	ldr	r5, [r4, #0]
 8009ab4:	6909      	ldr	r1, [r1, #16]
 8009ab6:	eba5 0901 	sub.w	r9, r5, r1
 8009aba:	6965      	ldr	r5, [r4, #20]
 8009abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	444b      	add	r3, r9
 8009ac8:	106d      	asrs	r5, r5, #1
 8009aca:	429d      	cmp	r5, r3
 8009acc:	bf38      	it	cc
 8009ace:	461d      	movcc	r5, r3
 8009ad0:	0553      	lsls	r3, r2, #21
 8009ad2:	d531      	bpl.n	8009b38 <__ssputs_r+0xa0>
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7ff ff6b 	bl	80099b0 <_malloc_r>
 8009ada:	4606      	mov	r6, r0
 8009adc:	b950      	cbnz	r0, 8009af4 <__ssputs_r+0x5c>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	f8ca 3000 	str.w	r3, [sl]
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af4:	6921      	ldr	r1, [r4, #16]
 8009af6:	464a      	mov	r2, r9
 8009af8:	f000 fcc2 	bl	800a480 <memcpy>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	6126      	str	r6, [r4, #16]
 8009b0a:	6165      	str	r5, [r4, #20]
 8009b0c:	444e      	add	r6, r9
 8009b0e:	eba5 0509 	sub.w	r5, r5, r9
 8009b12:	6026      	str	r6, [r4, #0]
 8009b14:	60a5      	str	r5, [r4, #8]
 8009b16:	463e      	mov	r6, r7
 8009b18:	42be      	cmp	r6, r7
 8009b1a:	d900      	bls.n	8009b1e <__ssputs_r+0x86>
 8009b1c:	463e      	mov	r6, r7
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	4632      	mov	r2, r6
 8009b22:	4641      	mov	r1, r8
 8009b24:	f000 fcba 	bl	800a49c <memmove>
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	1b9b      	subs	r3, r3, r6
 8009b2c:	60a3      	str	r3, [r4, #8]
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	4433      	add	r3, r6
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	2000      	movs	r0, #0
 8009b36:	e7db      	b.n	8009af0 <__ssputs_r+0x58>
 8009b38:	462a      	mov	r2, r5
 8009b3a:	f000 fcd5 	bl	800a4e8 <_realloc_r>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d1e1      	bne.n	8009b08 <__ssputs_r+0x70>
 8009b44:	6921      	ldr	r1, [r4, #16]
 8009b46:	4650      	mov	r0, sl
 8009b48:	f7ff fec6 	bl	80098d8 <_free_r>
 8009b4c:	e7c7      	b.n	8009ade <__ssputs_r+0x46>
	...

08009b50 <_svfiprintf_r>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	4698      	mov	r8, r3
 8009b56:	898b      	ldrh	r3, [r1, #12]
 8009b58:	061b      	lsls	r3, r3, #24
 8009b5a:	b09d      	sub	sp, #116	; 0x74
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	4614      	mov	r4, r2
 8009b62:	d50e      	bpl.n	8009b82 <_svfiprintf_r+0x32>
 8009b64:	690b      	ldr	r3, [r1, #16]
 8009b66:	b963      	cbnz	r3, 8009b82 <_svfiprintf_r+0x32>
 8009b68:	2140      	movs	r1, #64	; 0x40
 8009b6a:	f7ff ff21 	bl	80099b0 <_malloc_r>
 8009b6e:	6028      	str	r0, [r5, #0]
 8009b70:	6128      	str	r0, [r5, #16]
 8009b72:	b920      	cbnz	r0, 8009b7e <_svfiprintf_r+0x2e>
 8009b74:	230c      	movs	r3, #12
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e0d1      	b.n	8009d22 <_svfiprintf_r+0x1d2>
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	616b      	str	r3, [r5, #20]
 8009b82:	2300      	movs	r3, #0
 8009b84:	9309      	str	r3, [sp, #36]	; 0x24
 8009b86:	2320      	movs	r3, #32
 8009b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b90:	2330      	movs	r3, #48	; 0x30
 8009b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d3c <_svfiprintf_r+0x1ec>
 8009b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b9a:	f04f 0901 	mov.w	r9, #1
 8009b9e:	4623      	mov	r3, r4
 8009ba0:	469a      	mov	sl, r3
 8009ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba6:	b10a      	cbz	r2, 8009bac <_svfiprintf_r+0x5c>
 8009ba8:	2a25      	cmp	r2, #37	; 0x25
 8009baa:	d1f9      	bne.n	8009ba0 <_svfiprintf_r+0x50>
 8009bac:	ebba 0b04 	subs.w	fp, sl, r4
 8009bb0:	d00b      	beq.n	8009bca <_svfiprintf_r+0x7a>
 8009bb2:	465b      	mov	r3, fp
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff ff6d 	bl	8009a98 <__ssputs_r>
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f000 80aa 	beq.w	8009d18 <_svfiprintf_r+0x1c8>
 8009bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bc6:	445a      	add	r2, fp
 8009bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8009bca:	f89a 3000 	ldrb.w	r3, [sl]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80a2 	beq.w	8009d18 <_svfiprintf_r+0x1c8>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bde:	f10a 0a01 	add.w	sl, sl, #1
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	9307      	str	r3, [sp, #28]
 8009be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bea:	931a      	str	r3, [sp, #104]	; 0x68
 8009bec:	4654      	mov	r4, sl
 8009bee:	2205      	movs	r2, #5
 8009bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf4:	4851      	ldr	r0, [pc, #324]	; (8009d3c <_svfiprintf_r+0x1ec>)
 8009bf6:	f7f6 fafb 	bl	80001f0 <memchr>
 8009bfa:	9a04      	ldr	r2, [sp, #16]
 8009bfc:	b9d8      	cbnz	r0, 8009c36 <_svfiprintf_r+0xe6>
 8009bfe:	06d0      	lsls	r0, r2, #27
 8009c00:	bf44      	itt	mi
 8009c02:	2320      	movmi	r3, #32
 8009c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c08:	0711      	lsls	r1, r2, #28
 8009c0a:	bf44      	itt	mi
 8009c0c:	232b      	movmi	r3, #43	; 0x2b
 8009c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c12:	f89a 3000 	ldrb.w	r3, [sl]
 8009c16:	2b2a      	cmp	r3, #42	; 0x2a
 8009c18:	d015      	beq.n	8009c46 <_svfiprintf_r+0xf6>
 8009c1a:	9a07      	ldr	r2, [sp, #28]
 8009c1c:	4654      	mov	r4, sl
 8009c1e:	2000      	movs	r0, #0
 8009c20:	f04f 0c0a 	mov.w	ip, #10
 8009c24:	4621      	mov	r1, r4
 8009c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c2a:	3b30      	subs	r3, #48	; 0x30
 8009c2c:	2b09      	cmp	r3, #9
 8009c2e:	d94e      	bls.n	8009cce <_svfiprintf_r+0x17e>
 8009c30:	b1b0      	cbz	r0, 8009c60 <_svfiprintf_r+0x110>
 8009c32:	9207      	str	r2, [sp, #28]
 8009c34:	e014      	b.n	8009c60 <_svfiprintf_r+0x110>
 8009c36:	eba0 0308 	sub.w	r3, r0, r8
 8009c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	46a2      	mov	sl, r4
 8009c44:	e7d2      	b.n	8009bec <_svfiprintf_r+0x9c>
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	1d19      	adds	r1, r3, #4
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	9103      	str	r1, [sp, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bfbb      	ittet	lt
 8009c52:	425b      	neglt	r3, r3
 8009c54:	f042 0202 	orrlt.w	r2, r2, #2
 8009c58:	9307      	strge	r3, [sp, #28]
 8009c5a:	9307      	strlt	r3, [sp, #28]
 8009c5c:	bfb8      	it	lt
 8009c5e:	9204      	strlt	r2, [sp, #16]
 8009c60:	7823      	ldrb	r3, [r4, #0]
 8009c62:	2b2e      	cmp	r3, #46	; 0x2e
 8009c64:	d10c      	bne.n	8009c80 <_svfiprintf_r+0x130>
 8009c66:	7863      	ldrb	r3, [r4, #1]
 8009c68:	2b2a      	cmp	r3, #42	; 0x2a
 8009c6a:	d135      	bne.n	8009cd8 <_svfiprintf_r+0x188>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	1d1a      	adds	r2, r3, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	9203      	str	r2, [sp, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	bfb8      	it	lt
 8009c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c7c:	3402      	adds	r4, #2
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d4c <_svfiprintf_r+0x1fc>
 8009c84:	7821      	ldrb	r1, [r4, #0]
 8009c86:	2203      	movs	r2, #3
 8009c88:	4650      	mov	r0, sl
 8009c8a:	f7f6 fab1 	bl	80001f0 <memchr>
 8009c8e:	b140      	cbz	r0, 8009ca2 <_svfiprintf_r+0x152>
 8009c90:	2340      	movs	r3, #64	; 0x40
 8009c92:	eba0 000a 	sub.w	r0, r0, sl
 8009c96:	fa03 f000 	lsl.w	r0, r3, r0
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	4303      	orrs	r3, r0
 8009c9e:	3401      	adds	r4, #1
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca6:	4826      	ldr	r0, [pc, #152]	; (8009d40 <_svfiprintf_r+0x1f0>)
 8009ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cac:	2206      	movs	r2, #6
 8009cae:	f7f6 fa9f 	bl	80001f0 <memchr>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d038      	beq.n	8009d28 <_svfiprintf_r+0x1d8>
 8009cb6:	4b23      	ldr	r3, [pc, #140]	; (8009d44 <_svfiprintf_r+0x1f4>)
 8009cb8:	bb1b      	cbnz	r3, 8009d02 <_svfiprintf_r+0x1b2>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	3307      	adds	r3, #7
 8009cbe:	f023 0307 	bic.w	r3, r3, #7
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	9303      	str	r3, [sp, #12]
 8009cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc8:	4433      	add	r3, r6
 8009cca:	9309      	str	r3, [sp, #36]	; 0x24
 8009ccc:	e767      	b.n	8009b9e <_svfiprintf_r+0x4e>
 8009cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	e7a5      	b.n	8009c24 <_svfiprintf_r+0xd4>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	3401      	adds	r4, #1
 8009cdc:	9305      	str	r3, [sp, #20]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	f04f 0c0a 	mov.w	ip, #10
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cea:	3a30      	subs	r2, #48	; 0x30
 8009cec:	2a09      	cmp	r2, #9
 8009cee:	d903      	bls.n	8009cf8 <_svfiprintf_r+0x1a8>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0c5      	beq.n	8009c80 <_svfiprintf_r+0x130>
 8009cf4:	9105      	str	r1, [sp, #20]
 8009cf6:	e7c3      	b.n	8009c80 <_svfiprintf_r+0x130>
 8009cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e7f0      	b.n	8009ce4 <_svfiprintf_r+0x194>
 8009d02:	ab03      	add	r3, sp, #12
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	462a      	mov	r2, r5
 8009d08:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <_svfiprintf_r+0x1f8>)
 8009d0a:	a904      	add	r1, sp, #16
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f3af 8000 	nop.w
 8009d12:	1c42      	adds	r2, r0, #1
 8009d14:	4606      	mov	r6, r0
 8009d16:	d1d6      	bne.n	8009cc6 <_svfiprintf_r+0x176>
 8009d18:	89ab      	ldrh	r3, [r5, #12]
 8009d1a:	065b      	lsls	r3, r3, #25
 8009d1c:	f53f af2c 	bmi.w	8009b78 <_svfiprintf_r+0x28>
 8009d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d22:	b01d      	add	sp, #116	; 0x74
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d28:	ab03      	add	r3, sp, #12
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	462a      	mov	r2, r5
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <_svfiprintf_r+0x1f8>)
 8009d30:	a904      	add	r1, sp, #16
 8009d32:	4638      	mov	r0, r7
 8009d34:	f000 f9d4 	bl	800a0e0 <_printf_i>
 8009d38:	e7eb      	b.n	8009d12 <_svfiprintf_r+0x1c2>
 8009d3a:	bf00      	nop
 8009d3c:	0800a854 	.word	0x0800a854
 8009d40:	0800a85e 	.word	0x0800a85e
 8009d44:	00000000 	.word	0x00000000
 8009d48:	08009a99 	.word	0x08009a99
 8009d4c:	0800a85a 	.word	0x0800a85a

08009d50 <__sfputc_r>:
 8009d50:	6893      	ldr	r3, [r2, #8]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	b410      	push	{r4}
 8009d58:	6093      	str	r3, [r2, #8]
 8009d5a:	da08      	bge.n	8009d6e <__sfputc_r+0x1e>
 8009d5c:	6994      	ldr	r4, [r2, #24]
 8009d5e:	42a3      	cmp	r3, r4
 8009d60:	db01      	blt.n	8009d66 <__sfputc_r+0x16>
 8009d62:	290a      	cmp	r1, #10
 8009d64:	d103      	bne.n	8009d6e <__sfputc_r+0x1e>
 8009d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6a:	f7ff bad5 	b.w	8009318 <__swbuf_r>
 8009d6e:	6813      	ldr	r3, [r2, #0]
 8009d70:	1c58      	adds	r0, r3, #1
 8009d72:	6010      	str	r0, [r2, #0]
 8009d74:	7019      	strb	r1, [r3, #0]
 8009d76:	4608      	mov	r0, r1
 8009d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <__sfputs_r>:
 8009d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d80:	4606      	mov	r6, r0
 8009d82:	460f      	mov	r7, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	18d5      	adds	r5, r2, r3
 8009d88:	42ac      	cmp	r4, r5
 8009d8a:	d101      	bne.n	8009d90 <__sfputs_r+0x12>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	e007      	b.n	8009da0 <__sfputs_r+0x22>
 8009d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d94:	463a      	mov	r2, r7
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ffda 	bl	8009d50 <__sfputc_r>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d1f3      	bne.n	8009d88 <__sfputs_r+0xa>
 8009da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009da4 <_vfiprintf_r>:
 8009da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	460d      	mov	r5, r1
 8009daa:	b09d      	sub	sp, #116	; 0x74
 8009dac:	4614      	mov	r4, r2
 8009dae:	4698      	mov	r8, r3
 8009db0:	4606      	mov	r6, r0
 8009db2:	b118      	cbz	r0, 8009dbc <_vfiprintf_r+0x18>
 8009db4:	6983      	ldr	r3, [r0, #24]
 8009db6:	b90b      	cbnz	r3, 8009dbc <_vfiprintf_r+0x18>
 8009db8:	f7ff fc88 	bl	80096cc <__sinit>
 8009dbc:	4b89      	ldr	r3, [pc, #548]	; (8009fe4 <_vfiprintf_r+0x240>)
 8009dbe:	429d      	cmp	r5, r3
 8009dc0:	d11b      	bne.n	8009dfa <_vfiprintf_r+0x56>
 8009dc2:	6875      	ldr	r5, [r6, #4]
 8009dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dc6:	07d9      	lsls	r1, r3, #31
 8009dc8:	d405      	bmi.n	8009dd6 <_vfiprintf_r+0x32>
 8009dca:	89ab      	ldrh	r3, [r5, #12]
 8009dcc:	059a      	lsls	r2, r3, #22
 8009dce:	d402      	bmi.n	8009dd6 <_vfiprintf_r+0x32>
 8009dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dd2:	f7ff fd19 	bl	8009808 <__retarget_lock_acquire_recursive>
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	071b      	lsls	r3, r3, #28
 8009dda:	d501      	bpl.n	8009de0 <_vfiprintf_r+0x3c>
 8009ddc:	692b      	ldr	r3, [r5, #16]
 8009dde:	b9eb      	cbnz	r3, 8009e1c <_vfiprintf_r+0x78>
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff faea 	bl	80093bc <__swsetup_r>
 8009de8:	b1c0      	cbz	r0, 8009e1c <_vfiprintf_r+0x78>
 8009dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dec:	07dc      	lsls	r4, r3, #31
 8009dee:	d50e      	bpl.n	8009e0e <_vfiprintf_r+0x6a>
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295
 8009df4:	b01d      	add	sp, #116	; 0x74
 8009df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfa:	4b7b      	ldr	r3, [pc, #492]	; (8009fe8 <_vfiprintf_r+0x244>)
 8009dfc:	429d      	cmp	r5, r3
 8009dfe:	d101      	bne.n	8009e04 <_vfiprintf_r+0x60>
 8009e00:	68b5      	ldr	r5, [r6, #8]
 8009e02:	e7df      	b.n	8009dc4 <_vfiprintf_r+0x20>
 8009e04:	4b79      	ldr	r3, [pc, #484]	; (8009fec <_vfiprintf_r+0x248>)
 8009e06:	429d      	cmp	r5, r3
 8009e08:	bf08      	it	eq
 8009e0a:	68f5      	ldreq	r5, [r6, #12]
 8009e0c:	e7da      	b.n	8009dc4 <_vfiprintf_r+0x20>
 8009e0e:	89ab      	ldrh	r3, [r5, #12]
 8009e10:	0598      	lsls	r0, r3, #22
 8009e12:	d4ed      	bmi.n	8009df0 <_vfiprintf_r+0x4c>
 8009e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e16:	f7ff fcf8 	bl	800980a <__retarget_lock_release_recursive>
 8009e1a:	e7e9      	b.n	8009df0 <_vfiprintf_r+0x4c>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e20:	2320      	movs	r3, #32
 8009e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e2a:	2330      	movs	r3, #48	; 0x30
 8009e2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ff0 <_vfiprintf_r+0x24c>
 8009e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e34:	f04f 0901 	mov.w	r9, #1
 8009e38:	4623      	mov	r3, r4
 8009e3a:	469a      	mov	sl, r3
 8009e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e40:	b10a      	cbz	r2, 8009e46 <_vfiprintf_r+0xa2>
 8009e42:	2a25      	cmp	r2, #37	; 0x25
 8009e44:	d1f9      	bne.n	8009e3a <_vfiprintf_r+0x96>
 8009e46:	ebba 0b04 	subs.w	fp, sl, r4
 8009e4a:	d00b      	beq.n	8009e64 <_vfiprintf_r+0xc0>
 8009e4c:	465b      	mov	r3, fp
 8009e4e:	4622      	mov	r2, r4
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f7ff ff93 	bl	8009d7e <__sfputs_r>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f000 80aa 	beq.w	8009fb2 <_vfiprintf_r+0x20e>
 8009e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e60:	445a      	add	r2, fp
 8009e62:	9209      	str	r2, [sp, #36]	; 0x24
 8009e64:	f89a 3000 	ldrb.w	r3, [sl]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 80a2 	beq.w	8009fb2 <_vfiprintf_r+0x20e>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f04f 32ff 	mov.w	r2, #4294967295
 8009e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e78:	f10a 0a01 	add.w	sl, sl, #1
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	9307      	str	r3, [sp, #28]
 8009e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e84:	931a      	str	r3, [sp, #104]	; 0x68
 8009e86:	4654      	mov	r4, sl
 8009e88:	2205      	movs	r2, #5
 8009e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8e:	4858      	ldr	r0, [pc, #352]	; (8009ff0 <_vfiprintf_r+0x24c>)
 8009e90:	f7f6 f9ae 	bl	80001f0 <memchr>
 8009e94:	9a04      	ldr	r2, [sp, #16]
 8009e96:	b9d8      	cbnz	r0, 8009ed0 <_vfiprintf_r+0x12c>
 8009e98:	06d1      	lsls	r1, r2, #27
 8009e9a:	bf44      	itt	mi
 8009e9c:	2320      	movmi	r3, #32
 8009e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea2:	0713      	lsls	r3, r2, #28
 8009ea4:	bf44      	itt	mi
 8009ea6:	232b      	movmi	r3, #43	; 0x2b
 8009ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eac:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb2:	d015      	beq.n	8009ee0 <_vfiprintf_r+0x13c>
 8009eb4:	9a07      	ldr	r2, [sp, #28]
 8009eb6:	4654      	mov	r4, sl
 8009eb8:	2000      	movs	r0, #0
 8009eba:	f04f 0c0a 	mov.w	ip, #10
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ec4:	3b30      	subs	r3, #48	; 0x30
 8009ec6:	2b09      	cmp	r3, #9
 8009ec8:	d94e      	bls.n	8009f68 <_vfiprintf_r+0x1c4>
 8009eca:	b1b0      	cbz	r0, 8009efa <_vfiprintf_r+0x156>
 8009ecc:	9207      	str	r2, [sp, #28]
 8009ece:	e014      	b.n	8009efa <_vfiprintf_r+0x156>
 8009ed0:	eba0 0308 	sub.w	r3, r0, r8
 8009ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	9304      	str	r3, [sp, #16]
 8009edc:	46a2      	mov	sl, r4
 8009ede:	e7d2      	b.n	8009e86 <_vfiprintf_r+0xe2>
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	1d19      	adds	r1, r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	9103      	str	r1, [sp, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bfbb      	ittet	lt
 8009eec:	425b      	neglt	r3, r3
 8009eee:	f042 0202 	orrlt.w	r2, r2, #2
 8009ef2:	9307      	strge	r3, [sp, #28]
 8009ef4:	9307      	strlt	r3, [sp, #28]
 8009ef6:	bfb8      	it	lt
 8009ef8:	9204      	strlt	r2, [sp, #16]
 8009efa:	7823      	ldrb	r3, [r4, #0]
 8009efc:	2b2e      	cmp	r3, #46	; 0x2e
 8009efe:	d10c      	bne.n	8009f1a <_vfiprintf_r+0x176>
 8009f00:	7863      	ldrb	r3, [r4, #1]
 8009f02:	2b2a      	cmp	r3, #42	; 0x2a
 8009f04:	d135      	bne.n	8009f72 <_vfiprintf_r+0x1ce>
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	1d1a      	adds	r2, r3, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	9203      	str	r2, [sp, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bfb8      	it	lt
 8009f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f16:	3402      	adds	r4, #2
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a000 <_vfiprintf_r+0x25c>
 8009f1e:	7821      	ldrb	r1, [r4, #0]
 8009f20:	2203      	movs	r2, #3
 8009f22:	4650      	mov	r0, sl
 8009f24:	f7f6 f964 	bl	80001f0 <memchr>
 8009f28:	b140      	cbz	r0, 8009f3c <_vfiprintf_r+0x198>
 8009f2a:	2340      	movs	r3, #64	; 0x40
 8009f2c:	eba0 000a 	sub.w	r0, r0, sl
 8009f30:	fa03 f000 	lsl.w	r0, r3, r0
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	4303      	orrs	r3, r0
 8009f38:	3401      	adds	r4, #1
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f40:	482c      	ldr	r0, [pc, #176]	; (8009ff4 <_vfiprintf_r+0x250>)
 8009f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f46:	2206      	movs	r2, #6
 8009f48:	f7f6 f952 	bl	80001f0 <memchr>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d03f      	beq.n	8009fd0 <_vfiprintf_r+0x22c>
 8009f50:	4b29      	ldr	r3, [pc, #164]	; (8009ff8 <_vfiprintf_r+0x254>)
 8009f52:	bb1b      	cbnz	r3, 8009f9c <_vfiprintf_r+0x1f8>
 8009f54:	9b03      	ldr	r3, [sp, #12]
 8009f56:	3307      	adds	r3, #7
 8009f58:	f023 0307 	bic.w	r3, r3, #7
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	9303      	str	r3, [sp, #12]
 8009f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f62:	443b      	add	r3, r7
 8009f64:	9309      	str	r3, [sp, #36]	; 0x24
 8009f66:	e767      	b.n	8009e38 <_vfiprintf_r+0x94>
 8009f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	2001      	movs	r0, #1
 8009f70:	e7a5      	b.n	8009ebe <_vfiprintf_r+0x11a>
 8009f72:	2300      	movs	r3, #0
 8009f74:	3401      	adds	r4, #1
 8009f76:	9305      	str	r3, [sp, #20]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f04f 0c0a 	mov.w	ip, #10
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f84:	3a30      	subs	r2, #48	; 0x30
 8009f86:	2a09      	cmp	r2, #9
 8009f88:	d903      	bls.n	8009f92 <_vfiprintf_r+0x1ee>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0c5      	beq.n	8009f1a <_vfiprintf_r+0x176>
 8009f8e:	9105      	str	r1, [sp, #20]
 8009f90:	e7c3      	b.n	8009f1a <_vfiprintf_r+0x176>
 8009f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f96:	4604      	mov	r4, r0
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e7f0      	b.n	8009f7e <_vfiprintf_r+0x1da>
 8009f9c:	ab03      	add	r3, sp, #12
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	4b16      	ldr	r3, [pc, #88]	; (8009ffc <_vfiprintf_r+0x258>)
 8009fa4:	a904      	add	r1, sp, #16
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f3af 8000 	nop.w
 8009fac:	4607      	mov	r7, r0
 8009fae:	1c78      	adds	r0, r7, #1
 8009fb0:	d1d6      	bne.n	8009f60 <_vfiprintf_r+0x1bc>
 8009fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fb4:	07d9      	lsls	r1, r3, #31
 8009fb6:	d405      	bmi.n	8009fc4 <_vfiprintf_r+0x220>
 8009fb8:	89ab      	ldrh	r3, [r5, #12]
 8009fba:	059a      	lsls	r2, r3, #22
 8009fbc:	d402      	bmi.n	8009fc4 <_vfiprintf_r+0x220>
 8009fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fc0:	f7ff fc23 	bl	800980a <__retarget_lock_release_recursive>
 8009fc4:	89ab      	ldrh	r3, [r5, #12]
 8009fc6:	065b      	lsls	r3, r3, #25
 8009fc8:	f53f af12 	bmi.w	8009df0 <_vfiprintf_r+0x4c>
 8009fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fce:	e711      	b.n	8009df4 <_vfiprintf_r+0x50>
 8009fd0:	ab03      	add	r3, sp, #12
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <_vfiprintf_r+0x258>)
 8009fd8:	a904      	add	r1, sp, #16
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 f880 	bl	800a0e0 <_printf_i>
 8009fe0:	e7e4      	b.n	8009fac <_vfiprintf_r+0x208>
 8009fe2:	bf00      	nop
 8009fe4:	0800a814 	.word	0x0800a814
 8009fe8:	0800a834 	.word	0x0800a834
 8009fec:	0800a7f4 	.word	0x0800a7f4
 8009ff0:	0800a854 	.word	0x0800a854
 8009ff4:	0800a85e 	.word	0x0800a85e
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	08009d7f 	.word	0x08009d7f
 800a000:	0800a85a 	.word	0x0800a85a

0800a004 <_printf_common>:
 800a004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a008:	4616      	mov	r6, r2
 800a00a:	4699      	mov	r9, r3
 800a00c:	688a      	ldr	r2, [r1, #8]
 800a00e:	690b      	ldr	r3, [r1, #16]
 800a010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a014:	4293      	cmp	r3, r2
 800a016:	bfb8      	it	lt
 800a018:	4613      	movlt	r3, r2
 800a01a:	6033      	str	r3, [r6, #0]
 800a01c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a020:	4607      	mov	r7, r0
 800a022:	460c      	mov	r4, r1
 800a024:	b10a      	cbz	r2, 800a02a <_printf_common+0x26>
 800a026:	3301      	adds	r3, #1
 800a028:	6033      	str	r3, [r6, #0]
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	0699      	lsls	r1, r3, #26
 800a02e:	bf42      	ittt	mi
 800a030:	6833      	ldrmi	r3, [r6, #0]
 800a032:	3302      	addmi	r3, #2
 800a034:	6033      	strmi	r3, [r6, #0]
 800a036:	6825      	ldr	r5, [r4, #0]
 800a038:	f015 0506 	ands.w	r5, r5, #6
 800a03c:	d106      	bne.n	800a04c <_printf_common+0x48>
 800a03e:	f104 0a19 	add.w	sl, r4, #25
 800a042:	68e3      	ldr	r3, [r4, #12]
 800a044:	6832      	ldr	r2, [r6, #0]
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	42ab      	cmp	r3, r5
 800a04a:	dc26      	bgt.n	800a09a <_printf_common+0x96>
 800a04c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a050:	1e13      	subs	r3, r2, #0
 800a052:	6822      	ldr	r2, [r4, #0]
 800a054:	bf18      	it	ne
 800a056:	2301      	movne	r3, #1
 800a058:	0692      	lsls	r2, r2, #26
 800a05a:	d42b      	bmi.n	800a0b4 <_printf_common+0xb0>
 800a05c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a060:	4649      	mov	r1, r9
 800a062:	4638      	mov	r0, r7
 800a064:	47c0      	blx	r8
 800a066:	3001      	adds	r0, #1
 800a068:	d01e      	beq.n	800a0a8 <_printf_common+0xa4>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	68e5      	ldr	r5, [r4, #12]
 800a06e:	6832      	ldr	r2, [r6, #0]
 800a070:	f003 0306 	and.w	r3, r3, #6
 800a074:	2b04      	cmp	r3, #4
 800a076:	bf08      	it	eq
 800a078:	1aad      	subeq	r5, r5, r2
 800a07a:	68a3      	ldr	r3, [r4, #8]
 800a07c:	6922      	ldr	r2, [r4, #16]
 800a07e:	bf0c      	ite	eq
 800a080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a084:	2500      	movne	r5, #0
 800a086:	4293      	cmp	r3, r2
 800a088:	bfc4      	itt	gt
 800a08a:	1a9b      	subgt	r3, r3, r2
 800a08c:	18ed      	addgt	r5, r5, r3
 800a08e:	2600      	movs	r6, #0
 800a090:	341a      	adds	r4, #26
 800a092:	42b5      	cmp	r5, r6
 800a094:	d11a      	bne.n	800a0cc <_printf_common+0xc8>
 800a096:	2000      	movs	r0, #0
 800a098:	e008      	b.n	800a0ac <_printf_common+0xa8>
 800a09a:	2301      	movs	r3, #1
 800a09c:	4652      	mov	r2, sl
 800a09e:	4649      	mov	r1, r9
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	47c0      	blx	r8
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d103      	bne.n	800a0b0 <_printf_common+0xac>
 800a0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b0:	3501      	adds	r5, #1
 800a0b2:	e7c6      	b.n	800a042 <_printf_common+0x3e>
 800a0b4:	18e1      	adds	r1, r4, r3
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	2030      	movs	r0, #48	; 0x30
 800a0ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0be:	4422      	add	r2, r4
 800a0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	e7c7      	b.n	800a05c <_printf_common+0x58>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	4622      	mov	r2, r4
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	47c0      	blx	r8
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	d0e6      	beq.n	800a0a8 <_printf_common+0xa4>
 800a0da:	3601      	adds	r6, #1
 800a0dc:	e7d9      	b.n	800a092 <_printf_common+0x8e>
	...

0800a0e0 <_printf_i>:
 800a0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e4:	7e0f      	ldrb	r7, [r1, #24]
 800a0e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0e8:	2f78      	cmp	r7, #120	; 0x78
 800a0ea:	4691      	mov	r9, r2
 800a0ec:	4680      	mov	r8, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	469a      	mov	sl, r3
 800a0f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0f6:	d807      	bhi.n	800a108 <_printf_i+0x28>
 800a0f8:	2f62      	cmp	r7, #98	; 0x62
 800a0fa:	d80a      	bhi.n	800a112 <_printf_i+0x32>
 800a0fc:	2f00      	cmp	r7, #0
 800a0fe:	f000 80d8 	beq.w	800a2b2 <_printf_i+0x1d2>
 800a102:	2f58      	cmp	r7, #88	; 0x58
 800a104:	f000 80a3 	beq.w	800a24e <_printf_i+0x16e>
 800a108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a10c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a110:	e03a      	b.n	800a188 <_printf_i+0xa8>
 800a112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a116:	2b15      	cmp	r3, #21
 800a118:	d8f6      	bhi.n	800a108 <_printf_i+0x28>
 800a11a:	a101      	add	r1, pc, #4	; (adr r1, 800a120 <_printf_i+0x40>)
 800a11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a120:	0800a179 	.word	0x0800a179
 800a124:	0800a18d 	.word	0x0800a18d
 800a128:	0800a109 	.word	0x0800a109
 800a12c:	0800a109 	.word	0x0800a109
 800a130:	0800a109 	.word	0x0800a109
 800a134:	0800a109 	.word	0x0800a109
 800a138:	0800a18d 	.word	0x0800a18d
 800a13c:	0800a109 	.word	0x0800a109
 800a140:	0800a109 	.word	0x0800a109
 800a144:	0800a109 	.word	0x0800a109
 800a148:	0800a109 	.word	0x0800a109
 800a14c:	0800a299 	.word	0x0800a299
 800a150:	0800a1bd 	.word	0x0800a1bd
 800a154:	0800a27b 	.word	0x0800a27b
 800a158:	0800a109 	.word	0x0800a109
 800a15c:	0800a109 	.word	0x0800a109
 800a160:	0800a2bb 	.word	0x0800a2bb
 800a164:	0800a109 	.word	0x0800a109
 800a168:	0800a1bd 	.word	0x0800a1bd
 800a16c:	0800a109 	.word	0x0800a109
 800a170:	0800a109 	.word	0x0800a109
 800a174:	0800a283 	.word	0x0800a283
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	1d1a      	adds	r2, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	602a      	str	r2, [r5, #0]
 800a180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a188:	2301      	movs	r3, #1
 800a18a:	e0a3      	b.n	800a2d4 <_printf_i+0x1f4>
 800a18c:	6820      	ldr	r0, [r4, #0]
 800a18e:	6829      	ldr	r1, [r5, #0]
 800a190:	0606      	lsls	r6, r0, #24
 800a192:	f101 0304 	add.w	r3, r1, #4
 800a196:	d50a      	bpl.n	800a1ae <_printf_i+0xce>
 800a198:	680e      	ldr	r6, [r1, #0]
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	2e00      	cmp	r6, #0
 800a19e:	da03      	bge.n	800a1a8 <_printf_i+0xc8>
 800a1a0:	232d      	movs	r3, #45	; 0x2d
 800a1a2:	4276      	negs	r6, r6
 800a1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a8:	485e      	ldr	r0, [pc, #376]	; (800a324 <_printf_i+0x244>)
 800a1aa:	230a      	movs	r3, #10
 800a1ac:	e019      	b.n	800a1e2 <_printf_i+0x102>
 800a1ae:	680e      	ldr	r6, [r1, #0]
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1b6:	bf18      	it	ne
 800a1b8:	b236      	sxthne	r6, r6
 800a1ba:	e7ef      	b.n	800a19c <_printf_i+0xbc>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	6820      	ldr	r0, [r4, #0]
 800a1c0:	1d19      	adds	r1, r3, #4
 800a1c2:	6029      	str	r1, [r5, #0]
 800a1c4:	0601      	lsls	r1, r0, #24
 800a1c6:	d501      	bpl.n	800a1cc <_printf_i+0xec>
 800a1c8:	681e      	ldr	r6, [r3, #0]
 800a1ca:	e002      	b.n	800a1d2 <_printf_i+0xf2>
 800a1cc:	0646      	lsls	r6, r0, #25
 800a1ce:	d5fb      	bpl.n	800a1c8 <_printf_i+0xe8>
 800a1d0:	881e      	ldrh	r6, [r3, #0]
 800a1d2:	4854      	ldr	r0, [pc, #336]	; (800a324 <_printf_i+0x244>)
 800a1d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a1d6:	bf0c      	ite	eq
 800a1d8:	2308      	moveq	r3, #8
 800a1da:	230a      	movne	r3, #10
 800a1dc:	2100      	movs	r1, #0
 800a1de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1e2:	6865      	ldr	r5, [r4, #4]
 800a1e4:	60a5      	str	r5, [r4, #8]
 800a1e6:	2d00      	cmp	r5, #0
 800a1e8:	bfa2      	ittt	ge
 800a1ea:	6821      	ldrge	r1, [r4, #0]
 800a1ec:	f021 0104 	bicge.w	r1, r1, #4
 800a1f0:	6021      	strge	r1, [r4, #0]
 800a1f2:	b90e      	cbnz	r6, 800a1f8 <_printf_i+0x118>
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	d04d      	beq.n	800a294 <_printf_i+0x1b4>
 800a1f8:	4615      	mov	r5, r2
 800a1fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a202:	5dc7      	ldrb	r7, [r0, r7]
 800a204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a208:	4637      	mov	r7, r6
 800a20a:	42bb      	cmp	r3, r7
 800a20c:	460e      	mov	r6, r1
 800a20e:	d9f4      	bls.n	800a1fa <_printf_i+0x11a>
 800a210:	2b08      	cmp	r3, #8
 800a212:	d10b      	bne.n	800a22c <_printf_i+0x14c>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	07de      	lsls	r6, r3, #31
 800a218:	d508      	bpl.n	800a22c <_printf_i+0x14c>
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	6861      	ldr	r1, [r4, #4]
 800a21e:	4299      	cmp	r1, r3
 800a220:	bfde      	ittt	le
 800a222:	2330      	movle	r3, #48	; 0x30
 800a224:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a22c:	1b52      	subs	r2, r2, r5
 800a22e:	6122      	str	r2, [r4, #16]
 800a230:	f8cd a000 	str.w	sl, [sp]
 800a234:	464b      	mov	r3, r9
 800a236:	aa03      	add	r2, sp, #12
 800a238:	4621      	mov	r1, r4
 800a23a:	4640      	mov	r0, r8
 800a23c:	f7ff fee2 	bl	800a004 <_printf_common>
 800a240:	3001      	adds	r0, #1
 800a242:	d14c      	bne.n	800a2de <_printf_i+0x1fe>
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	b004      	add	sp, #16
 800a24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24e:	4835      	ldr	r0, [pc, #212]	; (800a324 <_printf_i+0x244>)
 800a250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a254:	6829      	ldr	r1, [r5, #0]
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	f851 6b04 	ldr.w	r6, [r1], #4
 800a25c:	6029      	str	r1, [r5, #0]
 800a25e:	061d      	lsls	r5, r3, #24
 800a260:	d514      	bpl.n	800a28c <_printf_i+0x1ac>
 800a262:	07df      	lsls	r7, r3, #31
 800a264:	bf44      	itt	mi
 800a266:	f043 0320 	orrmi.w	r3, r3, #32
 800a26a:	6023      	strmi	r3, [r4, #0]
 800a26c:	b91e      	cbnz	r6, 800a276 <_printf_i+0x196>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	f023 0320 	bic.w	r3, r3, #32
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	2310      	movs	r3, #16
 800a278:	e7b0      	b.n	800a1dc <_printf_i+0xfc>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	f043 0320 	orr.w	r3, r3, #32
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	2378      	movs	r3, #120	; 0x78
 800a284:	4828      	ldr	r0, [pc, #160]	; (800a328 <_printf_i+0x248>)
 800a286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a28a:	e7e3      	b.n	800a254 <_printf_i+0x174>
 800a28c:	0659      	lsls	r1, r3, #25
 800a28e:	bf48      	it	mi
 800a290:	b2b6      	uxthmi	r6, r6
 800a292:	e7e6      	b.n	800a262 <_printf_i+0x182>
 800a294:	4615      	mov	r5, r2
 800a296:	e7bb      	b.n	800a210 <_printf_i+0x130>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	6826      	ldr	r6, [r4, #0]
 800a29c:	6961      	ldr	r1, [r4, #20]
 800a29e:	1d18      	adds	r0, r3, #4
 800a2a0:	6028      	str	r0, [r5, #0]
 800a2a2:	0635      	lsls	r5, r6, #24
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	d501      	bpl.n	800a2ac <_printf_i+0x1cc>
 800a2a8:	6019      	str	r1, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <_printf_i+0x1d2>
 800a2ac:	0670      	lsls	r0, r6, #25
 800a2ae:	d5fb      	bpl.n	800a2a8 <_printf_i+0x1c8>
 800a2b0:	8019      	strh	r1, [r3, #0]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	6123      	str	r3, [r4, #16]
 800a2b6:	4615      	mov	r5, r2
 800a2b8:	e7ba      	b.n	800a230 <_printf_i+0x150>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	1d1a      	adds	r2, r3, #4
 800a2be:	602a      	str	r2, [r5, #0]
 800a2c0:	681d      	ldr	r5, [r3, #0]
 800a2c2:	6862      	ldr	r2, [r4, #4]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f7f5 ff92 	bl	80001f0 <memchr>
 800a2cc:	b108      	cbz	r0, 800a2d2 <_printf_i+0x1f2>
 800a2ce:	1b40      	subs	r0, r0, r5
 800a2d0:	6060      	str	r0, [r4, #4]
 800a2d2:	6863      	ldr	r3, [r4, #4]
 800a2d4:	6123      	str	r3, [r4, #16]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2dc:	e7a8      	b.n	800a230 <_printf_i+0x150>
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	47d0      	blx	sl
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d0ab      	beq.n	800a244 <_printf_i+0x164>
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	079b      	lsls	r3, r3, #30
 800a2f0:	d413      	bmi.n	800a31a <_printf_i+0x23a>
 800a2f2:	68e0      	ldr	r0, [r4, #12]
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	4298      	cmp	r0, r3
 800a2f8:	bfb8      	it	lt
 800a2fa:	4618      	movlt	r0, r3
 800a2fc:	e7a4      	b.n	800a248 <_printf_i+0x168>
 800a2fe:	2301      	movs	r3, #1
 800a300:	4632      	mov	r2, r6
 800a302:	4649      	mov	r1, r9
 800a304:	4640      	mov	r0, r8
 800a306:	47d0      	blx	sl
 800a308:	3001      	adds	r0, #1
 800a30a:	d09b      	beq.n	800a244 <_printf_i+0x164>
 800a30c:	3501      	adds	r5, #1
 800a30e:	68e3      	ldr	r3, [r4, #12]
 800a310:	9903      	ldr	r1, [sp, #12]
 800a312:	1a5b      	subs	r3, r3, r1
 800a314:	42ab      	cmp	r3, r5
 800a316:	dcf2      	bgt.n	800a2fe <_printf_i+0x21e>
 800a318:	e7eb      	b.n	800a2f2 <_printf_i+0x212>
 800a31a:	2500      	movs	r5, #0
 800a31c:	f104 0619 	add.w	r6, r4, #25
 800a320:	e7f5      	b.n	800a30e <_printf_i+0x22e>
 800a322:	bf00      	nop
 800a324:	0800a865 	.word	0x0800a865
 800a328:	0800a876 	.word	0x0800a876

0800a32c <_sbrk_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_sbrk_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f8 fcee 	bl	8002d18 <_sbrk>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_sbrk_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_sbrk_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20000c94 	.word	0x20000c94

0800a34c <__sread>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	460c      	mov	r4, r1
 800a350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a354:	f000 f8f8 	bl	800a548 <_read_r>
 800a358:	2800      	cmp	r0, #0
 800a35a:	bfab      	itete	ge
 800a35c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a35e:	89a3      	ldrhlt	r3, [r4, #12]
 800a360:	181b      	addge	r3, r3, r0
 800a362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a366:	bfac      	ite	ge
 800a368:	6563      	strge	r3, [r4, #84]	; 0x54
 800a36a:	81a3      	strhlt	r3, [r4, #12]
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <__swrite>:
 800a36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a372:	461f      	mov	r7, r3
 800a374:	898b      	ldrh	r3, [r1, #12]
 800a376:	05db      	lsls	r3, r3, #23
 800a378:	4605      	mov	r5, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	4616      	mov	r6, r2
 800a37e:	d505      	bpl.n	800a38c <__swrite+0x1e>
 800a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a384:	2302      	movs	r3, #2
 800a386:	2200      	movs	r2, #0
 800a388:	f000 f868 	bl	800a45c <_lseek_r>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	4632      	mov	r2, r6
 800a39a:	463b      	mov	r3, r7
 800a39c:	4628      	mov	r0, r5
 800a39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a2:	f000 b817 	b.w	800a3d4 <_write_r>

0800a3a6 <__sseek>:
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ae:	f000 f855 	bl	800a45c <_lseek_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	bf15      	itete	ne
 800a3b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3c2:	81a3      	strheq	r3, [r4, #12]
 800a3c4:	bf18      	it	ne
 800a3c6:	81a3      	strhne	r3, [r4, #12]
 800a3c8:	bd10      	pop	{r4, pc}

0800a3ca <__sclose>:
 800a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ce:	f000 b813 	b.w	800a3f8 <_close_r>
	...

0800a3d4 <_write_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4d07      	ldr	r5, [pc, #28]	; (800a3f4 <_write_r+0x20>)
 800a3d8:	4604      	mov	r4, r0
 800a3da:	4608      	mov	r0, r1
 800a3dc:	4611      	mov	r1, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	602a      	str	r2, [r5, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f7f8 fc47 	bl	8002c76 <_write>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_write_r+0x1e>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_write_r+0x1e>
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	20000c94 	.word	0x20000c94

0800a3f8 <_close_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d06      	ldr	r5, [pc, #24]	; (800a414 <_close_r+0x1c>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	f7f8 fc53 	bl	8002cae <_close>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_close_r+0x1a>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_close_r+0x1a>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	20000c94 	.word	0x20000c94

0800a418 <_fstat_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	; (800a438 <_fstat_r+0x20>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	f7f8 fc4e 	bl	8002cc6 <_fstat>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d102      	bne.n	800a434 <_fstat_r+0x1c>
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	b103      	cbz	r3, 800a434 <_fstat_r+0x1c>
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	20000c94 	.word	0x20000c94

0800a43c <_isatty_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d06      	ldr	r5, [pc, #24]	; (800a458 <_isatty_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7f8 fc4d 	bl	8002ce6 <_isatty>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_isatty_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_isatty_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20000c94 	.word	0x20000c94

0800a45c <_lseek_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	; (800a47c <_lseek_r+0x20>)
 800a460:	4604      	mov	r4, r0
 800a462:	4608      	mov	r0, r1
 800a464:	4611      	mov	r1, r2
 800a466:	2200      	movs	r2, #0
 800a468:	602a      	str	r2, [r5, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	f7f8 fc46 	bl	8002cfc <_lseek>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_lseek_r+0x1e>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_lseek_r+0x1e>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	20000c94 	.word	0x20000c94

0800a480 <memcpy>:
 800a480:	440a      	add	r2, r1
 800a482:	4291      	cmp	r1, r2
 800a484:	f100 33ff 	add.w	r3, r0, #4294967295
 800a488:	d100      	bne.n	800a48c <memcpy+0xc>
 800a48a:	4770      	bx	lr
 800a48c:	b510      	push	{r4, lr}
 800a48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a496:	4291      	cmp	r1, r2
 800a498:	d1f9      	bne.n	800a48e <memcpy+0xe>
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <memmove>:
 800a49c:	4288      	cmp	r0, r1
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	eb01 0402 	add.w	r4, r1, r2
 800a4a4:	d902      	bls.n	800a4ac <memmove+0x10>
 800a4a6:	4284      	cmp	r4, r0
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	d807      	bhi.n	800a4bc <memmove+0x20>
 800a4ac:	1e43      	subs	r3, r0, #1
 800a4ae:	42a1      	cmp	r1, r4
 800a4b0:	d008      	beq.n	800a4c4 <memmove+0x28>
 800a4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ba:	e7f8      	b.n	800a4ae <memmove+0x12>
 800a4bc:	4402      	add	r2, r0
 800a4be:	4601      	mov	r1, r0
 800a4c0:	428a      	cmp	r2, r1
 800a4c2:	d100      	bne.n	800a4c6 <memmove+0x2a>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4ce:	e7f7      	b.n	800a4c0 <memmove+0x24>

0800a4d0 <__malloc_lock>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <__malloc_lock+0x8>)
 800a4d2:	f7ff b999 	b.w	8009808 <__retarget_lock_acquire_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	20000c88 	.word	0x20000c88

0800a4dc <__malloc_unlock>:
 800a4dc:	4801      	ldr	r0, [pc, #4]	; (800a4e4 <__malloc_unlock+0x8>)
 800a4de:	f7ff b994 	b.w	800980a <__retarget_lock_release_recursive>
 800a4e2:	bf00      	nop
 800a4e4:	20000c88 	.word	0x20000c88

0800a4e8 <_realloc_r>:
 800a4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	4614      	mov	r4, r2
 800a4f0:	460e      	mov	r6, r1
 800a4f2:	b921      	cbnz	r1, 800a4fe <_realloc_r+0x16>
 800a4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	f7ff ba59 	b.w	80099b0 <_malloc_r>
 800a4fe:	b92a      	cbnz	r2, 800a50c <_realloc_r+0x24>
 800a500:	f7ff f9ea 	bl	80098d8 <_free_r>
 800a504:	4625      	mov	r5, r4
 800a506:	4628      	mov	r0, r5
 800a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a50c:	f000 f82e 	bl	800a56c <_malloc_usable_size_r>
 800a510:	4284      	cmp	r4, r0
 800a512:	4607      	mov	r7, r0
 800a514:	d802      	bhi.n	800a51c <_realloc_r+0x34>
 800a516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a51a:	d812      	bhi.n	800a542 <_realloc_r+0x5a>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4640      	mov	r0, r8
 800a520:	f7ff fa46 	bl	80099b0 <_malloc_r>
 800a524:	4605      	mov	r5, r0
 800a526:	2800      	cmp	r0, #0
 800a528:	d0ed      	beq.n	800a506 <_realloc_r+0x1e>
 800a52a:	42bc      	cmp	r4, r7
 800a52c:	4622      	mov	r2, r4
 800a52e:	4631      	mov	r1, r6
 800a530:	bf28      	it	cs
 800a532:	463a      	movcs	r2, r7
 800a534:	f7ff ffa4 	bl	800a480 <memcpy>
 800a538:	4631      	mov	r1, r6
 800a53a:	4640      	mov	r0, r8
 800a53c:	f7ff f9cc 	bl	80098d8 <_free_r>
 800a540:	e7e1      	b.n	800a506 <_realloc_r+0x1e>
 800a542:	4635      	mov	r5, r6
 800a544:	e7df      	b.n	800a506 <_realloc_r+0x1e>
	...

0800a548 <_read_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	; (800a568 <_read_r+0x20>)
 800a54c:	4604      	mov	r4, r0
 800a54e:	4608      	mov	r0, r1
 800a550:	4611      	mov	r1, r2
 800a552:	2200      	movs	r2, #0
 800a554:	602a      	str	r2, [r5, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	f7f8 fb70 	bl	8002c3c <_read>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d102      	bne.n	800a566 <_read_r+0x1e>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	b103      	cbz	r3, 800a566 <_read_r+0x1e>
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	20000c94 	.word	0x20000c94

0800a56c <_malloc_usable_size_r>:
 800a56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a570:	1f18      	subs	r0, r3, #4
 800a572:	2b00      	cmp	r3, #0
 800a574:	bfbc      	itt	lt
 800a576:	580b      	ldrlt	r3, [r1, r0]
 800a578:	18c0      	addlt	r0, r0, r3
 800a57a:	4770      	bx	lr

0800a57c <_init>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr

0800a588 <_fini>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	bf00      	nop
 800a58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58e:	bc08      	pop	{r3}
 800a590:	469e      	mov	lr, r3
 800a592:	4770      	bx	lr
