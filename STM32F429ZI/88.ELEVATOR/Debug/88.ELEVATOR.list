
88.ELEVATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c094  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800c244  0800c244  0001c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c490  0800c490  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c490  0800c490  0001c490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c498  0800c498  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c49c  0800c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800c4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00005568  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005684  20005684  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b538  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005582  00000000  00000000  0004b684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d0  00000000  00000000  00050c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fc0  00000000  00000000  00052dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006c3b  00000000  00000000  00054d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028891  00000000  00000000  0005b9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104fa7  00000000  00000000  00084264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018920b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009748  00000000  00000000  0018925c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c22c 	.word	0x0800c22c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	0800c22c 	.word	0x0800c22c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <get_button>:
	}
}
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 fb95 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <get_button+0x40>
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <get_button+0x6c>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d108      	bne.n	80005d4 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 80005c2:	2050      	movs	r0, #80	; 0x50
 80005c4:	f002 f890 	bl	80026e8 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <get_button+0x6c>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 80005d0:	2301      	movs	r3, #1
 80005d2:	e011      	b.n	80005f8 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10d      	bne.n	80005f6 <get_button+0x62>
 80005da:	787b      	ldrb	r3, [r7, #1]
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <get_button+0x6c>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d108      	bne.n	80005f6 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 80005e4:	201e      	movs	r0, #30
 80005e6:	f002 f87f 	bl	80026e8 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <get_button+0x6c>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000

08000604 <write_column_data>:
	}
}
*/

void write_column_data(int column)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<8; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e01f      	b.n	8000652 <write_column_data+0x4e>
	{
		if (i == column)
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d10c      	bne.n	8000634 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0); // on
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <write_column_data+0x60>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <write_column_data+0x64>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	f003 fb6b 	bl	8003d08 <HAL_GPIO_WritePin>
 8000632:	e00b      	b.n	800064c <write_column_data+0x48>
		else
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // off
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <write_column_data+0x60>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <write_column_data+0x64>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	f003 fb5e 	bl	8003d08 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b07      	cmp	r3, #7
 8000656:	dddc      	ble.n	8000612 <write_column_data+0xe>
	}
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	20000048 	.word	0x20000048

0800066c <write_row_data>:

//0b00111100
void write_row_data(unsigned char data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	unsigned char d = data;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	72fb      	strb	r3, [r7, #11]

	for (int i=0; i<8; i++)
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e023      	b.n	80006c8 <write_row_data+0x5c>
	{
		if ( d & (1 << i)) // 1인 경우
 8000680:	7afa      	ldrb	r2, [r7, #11]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	fa42 f303 	asr.w	r3, r2, r3
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <write_row_data+0x6c>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000698:	4a10      	ldr	r2, [pc, #64]	; (80006dc <write_row_data+0x70>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a0:	2201      	movs	r2, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	f003 fb30 	bl	8003d08 <HAL_GPIO_WritePin>
 80006a8:	e00b      	b.n	80006c2 <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <write_row_data+0x6c>)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <write_row_data+0x70>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	f003 fb23 	bl	8003d08 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	ddd8      	ble.n	8000680 <write_row_data+0x14>
	}
}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000028 	.word	0x20000028
 80006dc:	20000058 	.word	0x20000058

080006e0 <dotmatrix_main_test>:

#if 1
// scroll 문자 출력 프로그램
int dotmatrix_main_test(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
	static int count = 0;	// 컬럼 count
	static uint32_t past_time = 0;	// 이전 tick값 저장

	while(1)
	{
		if(forward)
 80006e6:	4b59      	ldr	r3, [pc, #356]	; (800084c <dotmatrix_main_test+0x16c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d054      	beq.n	8000798 <dotmatrix_main_test+0xb8>
		{
			uint32_t now = HAL_GetTick();	// 1ms
 80006ee:	f001 ffef 	bl	80026d0 <HAL_GetTick>
 80006f2:	6078      	str	r0, [r7, #4]
			// 1. 처음시작시 past_time = 0; now: 500 --> past_time = 500
			if (now - past_time >= 100)	// 100ms scroll
 80006f4:	4b56      	ldr	r3, [pc, #344]	; (8000850 <dotmatrix_main_test+0x170>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	2b63      	cmp	r3, #99	; 0x63
 80006fe:	d935      	bls.n	800076c <dotmatrix_main_test+0x8c>
			{
				past_time = now;
 8000700:	4a53      	ldr	r2, [pc, #332]	; (8000850 <dotmatrix_main_test+0x170>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
				for (int i=0; i<8; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e020      	b.n	800074e <dotmatrix_main_test+0x6e>
				{
					display_data[i] = (up_data[i] >> count) | (up_data)[i] << (8 - count);
 800070c:	4a51      	ldr	r2, [pc, #324]	; (8000854 <dotmatrix_main_test+0x174>)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b50      	ldr	r3, [pc, #320]	; (8000858 <dotmatrix_main_test+0x178>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	fa42 f303 	asr.w	r3, r2, r3
 800071e:	b25a      	sxtb	r2, r3
 8000720:	494c      	ldr	r1, [pc, #304]	; (8000854 <dotmatrix_main_test+0x174>)
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	440b      	add	r3, r1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <dotmatrix_main_test+0x178>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f1c3 0308 	rsb	r3, r3, #8
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b25b      	sxtb	r3, r3
 800073c:	b2d9      	uxtb	r1, r3
 800073e:	4a47      	ldr	r2, [pc, #284]	; (800085c <dotmatrix_main_test+0x17c>)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
				for (int i=0; i<8; i++)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	2b07      	cmp	r3, #7
 8000752:	dddb      	ble.n	800070c <dotmatrix_main_test+0x2c>
				}
				if (++count == 8)	// 8칼럼을 다 처리 했으면 다음 scroll_buffer로 이동
 8000754:	4b40      	ldr	r3, [pc, #256]	; (8000858 <dotmatrix_main_test+0x178>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a3f      	ldr	r2, [pc, #252]	; (8000858 <dotmatrix_main_test+0x178>)
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <dotmatrix_main_test+0x178>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b08      	cmp	r3, #8
 8000764:	d102      	bne.n	800076c <dotmatrix_main_test+0x8c>
				{
					count = 0;
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <dotmatrix_main_test+0x178>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
					// if (index == number_of_character+1) index = 0;
					// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
				}
			}
			for(int i=0; i<8; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	e00f      	b.n	8000792 <dotmatrix_main_test+0xb2>
			{
				// common anode 방식
				// column 에는 low, row 에는 high 를 출력해야 해당 LED 가 켜진다.
				write_column_data(i);
 8000772:	6938      	ldr	r0, [r7, #16]
 8000774:	f7ff ff46 	bl	8000604 <write_column_data>
				write_row_data(display_data[i]);
 8000778:	4a38      	ldr	r2, [pc, #224]	; (800085c <dotmatrix_main_test+0x17c>)
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff73 	bl	800066c <write_row_data>
				HAL_Delay(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f001 ffae 	bl	80026e8 <HAL_Delay>
			for(int i=0; i<8; i++)
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	3301      	adds	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	2b07      	cmp	r3, #7
 8000796:	ddec      	ble.n	8000772 <dotmatrix_main_test+0x92>
			}
		}

		if(backward)
 8000798:	4b31      	ldr	r3, [pc, #196]	; (8000860 <dotmatrix_main_test+0x180>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0a2      	beq.n	80006e6 <dotmatrix_main_test+0x6>
		{
			uint32_t now = HAL_GetTick();	// 1ms
 80007a0:	f001 ff96 	bl	80026d0 <HAL_GetTick>
 80007a4:	6038      	str	r0, [r7, #0]
			// 1. 처음시작시 past_time = 0; now: 500 --> past_time = 500
			if (now - past_time >= 100)	// 100ms scroll
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <dotmatrix_main_test+0x170>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	2b63      	cmp	r3, #99	; 0x63
 80007b0:	d935      	bls.n	800081e <dotmatrix_main_test+0x13e>
			{
				past_time = now;
 80007b2:	4a27      	ldr	r2, [pc, #156]	; (8000850 <dotmatrix_main_test+0x170>)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	6013      	str	r3, [r2, #0]
				for (int i=0; i<8; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e020      	b.n	8000800 <dotmatrix_main_test+0x120>
				{
					display_data[i] = (down_data[i] >> count) | (down_data)[i] << (8 - count);
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <dotmatrix_main_test+0x184>)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <dotmatrix_main_test+0x178>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	fa42 f303 	asr.w	r3, r2, r3
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	4924      	ldr	r1, [pc, #144]	; (8000864 <dotmatrix_main_test+0x184>)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	440b      	add	r3, r1
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <dotmatrix_main_test+0x178>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f1c3 0308 	rsb	r3, r3, #8
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <dotmatrix_main_test+0x17c>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	460a      	mov	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
				for (int i=0; i<8; i++)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b07      	cmp	r3, #7
 8000804:	dddb      	ble.n	80007be <dotmatrix_main_test+0xde>
				}
				if (++count == 8)	// 8칼럼을 다 처리 했으면 다음 scroll_buffer로 이동
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <dotmatrix_main_test+0x178>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <dotmatrix_main_test+0x178>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <dotmatrix_main_test+0x178>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b08      	cmp	r3, #8
 8000816:	d102      	bne.n	800081e <dotmatrix_main_test+0x13e>
				{
					count = 0;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <dotmatrix_main_test+0x178>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
					// if (index == number_of_character+1) index = 0;
					// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
				}
			}
			for(int i=0; i<8; i++)
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	e00f      	b.n	8000844 <dotmatrix_main_test+0x164>
			{
				// common anode 방식
				// column 에는 low, row 에는 high 를 출력해야 해당 LED 가 켜진다.
				write_column_data(i);
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f7ff feed 	bl	8000604 <write_column_data>
				write_row_data(display_data[i]);
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <dotmatrix_main_test+0x17c>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff1a 	bl	800066c <write_row_data>
				HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f001 ff55 	bl	80026e8 <HAL_Delay>
			for(int i=0; i<8; i++)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3301      	adds	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b07      	cmp	r3, #7
 8000848:	ddec      	ble.n	8000824 <dotmatrix_main_test+0x144>
		if(forward)
 800084a:	e74c      	b.n	80006e6 <dotmatrix_main_test+0x6>
 800084c:	20000b98 	.word	0x20000b98
 8000850:	20000140 	.word	0x20000140
 8000854:	20000068 	.word	0x20000068
 8000858:	20000144 	.word	0x20000144
 800085c:	20000138 	.word	0x20000138
 8000860:	20000b9c 	.word	0x20000b9c
 8000864:	20000070 	.word	0x20000070

08000868 <fnd4digit_main>:
  FND_a|FND_b|FND_c|FND_d|FND_e|FND_f|FND_g,   // 8
  FND_a|FND_b|FND_c|FND_d|FND_f|FND_g   // 9
};

void fnd4digit_main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8], GPIO_PIN_SET);
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <fnd4digit_main+0x30>)
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	b29b      	uxth	r3, r3
 8000872:	2201      	movs	r2, #1
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <fnd4digit_main+0x34>)
 8000878:	f003 fa46 	bl	8003d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT, FND_font[fnd_floor], GPIO_PIN_RESET);
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <fnd4digit_main+0x38>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <fnd4digit_main+0x30>)
 8000882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000886:	b29b      	uxth	r3, r3
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <fnd4digit_main+0x34>)
 800088e:	f003 fa3b 	bl	8003d08 <HAL_GPIO_WritePin>


		HAL_Delay(1000);
	}
*/
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000078 	.word	0x20000078
 800089c:	40021400 	.word	0x40021400
 80008a0:	20000ba0 	.word	0x20000ba0

080008a4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80008ac:	1d39      	adds	r1, r7, #4
 80008ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b2:	2201      	movs	r2, #1
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <__io_putchar+0x20>)
 80008b6:	f006 fb1a 	bl	8006eee <HAL_UART_Transmit>

  return ch;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200005dc 	.word	0x200005dc

080008c8 <HAL_ADC_ConvCpltCallback>:
	}
}
*/
uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_ADC_ConvCpltCallback+0x30>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d109      	bne.n	80008ee <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <HAL_ADC_ConvCpltCallback+0x34>)
 80008dc:	f002 f95a 	bl	8002b94 <HAL_ADC_GetValue>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_ADC_ConvCpltCallback+0x38>)
 80008e6:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <HAL_ADC_ConvCpltCallback+0x34>)
 80008ea:	f001 ff65 	bl	80027b8 <HAL_ADC_Start_IT>
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012000 	.word	0x40012000
 80008fc:	200002c0 	.word	0x200002c0
 8000900:	20000b88 	.word	0x20000b88

08000904 <delay_us>:
void delay_us(unsigned long us)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <delay_us+0x2c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8000914:	bf00      	nop
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <delay_us+0x2c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	429a      	cmp	r2, r3
 8000920:	d8f9      	bhi.n	8000916 <delay_us+0x12>
		;
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	20000594 	.word	0x20000594

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f001 fe94 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f8a4 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f000 fc84 	bl	800124c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000944:	f000 fc00 	bl	8001148 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000948:	f000 fc52 	bl	80011f0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 800094c:	f000 fc26 	bl	800119c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000950:	f000 fbb2 	bl	80010b8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000954:	f000 fbd4 	bl	8001100 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000958:	f000 fa96 	bl	8000e88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800095c:	f000 fae8 	bl	8000f30 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000960:	f000 fa38 	bl	8000dd4 <MX_TIM2_Init>
  MX_RTC_Init();
 8000964:	f000 f9dc 	bl	8000d20 <MX_RTC_Init>
  MX_TIM5_Init();
 8000968:	f000 fb30 	bl	8000fcc <MX_TIM5_Init>
  MX_I2C1_Init();
 800096c:	f000 f998 	bl	8000ca0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000970:	f000 f8f6 	bl	8000b60 <MX_ADC1_Init>
  MX_ETH_Init();
 8000974:	f000 f946 	bl	8000c04 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000978:	2201      	movs	r2, #1
 800097a:	4929      	ldr	r1, [pc, #164]	; (8000a20 <main+0xec>)
 800097c:	4829      	ldr	r0, [pc, #164]	; (8000a24 <main+0xf0>)
 800097e:	f006 fb48 	bl	8007012 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000982:	2201      	movs	r2, #1
 8000984:	4928      	ldr	r1, [pc, #160]	; (8000a28 <main+0xf4>)
 8000986:	4829      	ldr	r0, [pc, #164]	; (8000a2c <main+0xf8>)
 8000988:	f006 fb43 	bl	8007012 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 800098c:	4828      	ldr	r0, [pc, #160]	; (8000a30 <main+0xfc>)
 800098e:	f004 fdf1 	bl	8005574 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000992:	4828      	ldr	r0, [pc, #160]	; (8000a34 <main+0x100>)
 8000994:	f004 fdee 	bl	8005574 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000998:	2100      	movs	r1, #0
 800099a:	4827      	ldr	r0, [pc, #156]	; (8000a38 <main+0x104>)
 800099c:	f005 f8d8 	bl	8005b50 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 80009a0:	2100      	movs	r1, #0
 80009a2:	4826      	ldr	r0, [pc, #152]	; (8000a3c <main+0x108>)
 80009a4:	f004 ff6e 	bl	8005884 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 80009a8:	2100      	movs	r1, #0
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <main+0x10c>)
 80009ac:	f004 fea2 	bl	80056f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 80009b0:	210c      	movs	r1, #12
 80009b2:	4824      	ldr	r0, [pc, #144]	; (8000a44 <main+0x110>)
 80009b4:	f004 fe9e 	bl	80056f4 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 80009b8:	4823      	ldr	r0, [pc, #140]	; (8000a48 <main+0x114>)
 80009ba:	f001 fefd 	bl	80027b8 <HAL_ADC_Start_IT>

//  DHT11_Init();
//  i2c_lcd_init();
  TIM10_10ms_counter=0;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <main+0x118>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
//    buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009c4:	f007 fe04 	bl	80085d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <main+0x11c>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4821      	ldr	r0, [pc, #132]	; (8000a54 <main+0x120>)
 80009ce:	f007 fe49 	bl	8008664 <osThreadNew>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <main+0x124>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* creation of stepmotor_task */
  stepmotor_taskHandle = osThreadNew(task1_func, NULL, &stepmotor_task_attributes);
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <main+0x128>)
 80009da:	2100      	movs	r1, #0
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <main+0x12c>)
 80009de:	f007 fe41 	bl	8008664 <osThreadNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <main+0x130>)
 80009e6:	6013      	str	r3, [r2, #0]

  /* creation of fnd_task */
  fnd_taskHandle = osThreadNew(task2_func, NULL, &fnd_task_attributes);
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <main+0x134>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <main+0x138>)
 80009ee:	f007 fe39 	bl	8008664 <osThreadNew>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <main+0x13c>)
 80009f6:	6013      	str	r3, [r2, #0]

  /* creation of dotmatrix */
  dotmatrixHandle = osThreadNew(task3_func, NULL, &dotmatrix_attributes);
 80009f8:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <main+0x140>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	481e      	ldr	r0, [pc, #120]	; (8000a78 <main+0x144>)
 80009fe:	f007 fe31 	bl	8008664 <osThreadNew>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <main+0x148>)
 8000a06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a08:	f007 fe06 	bl	8008618 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("cds sensor: %d\n", adcValue[0]);
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <main+0x14c>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <main+0x150>)
 8000a14:	f00a fd28 	bl	800b468 <iprintf>
	if (adcValue[0] < 2500)
	{
		nucleo_stm32f429zi_led_on();
	}
	*/
	HAL_Delay(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f001 fe65 	bl	80026e8 <HAL_Delay>
  {
 8000a1e:	e7f5      	b.n	8000a0c <main+0xd8>
 8000a20:	20000b80 	.word	0x20000b80
 8000a24:	200005dc 	.word	0x200005dc
 8000a28:	20000b81 	.word	0x20000b81
 8000a2c:	20000620 	.word	0x20000620
 8000a30:	2000054c 	.word	0x2000054c
 8000a34:	20000594 	.word	0x20000594
 8000a38:	20000474 	.word	0x20000474
 8000a3c:	200004bc 	.word	0x200004bc
 8000a40:	2000042c 	.word	0x2000042c
 8000a44:	20000504 	.word	0x20000504
 8000a48:	200002c0 	.word	0x200002c0
 8000a4c:	20000b84 	.word	0x20000b84
 8000a50:	0800c350 	.word	0x0800c350
 8000a54:	080014ed 	.word	0x080014ed
 8000a58:	20000b70 	.word	0x20000b70
 8000a5c:	0800c374 	.word	0x0800c374
 8000a60:	080014fd 	.word	0x080014fd
 8000a64:	20000b74 	.word	0x20000b74
 8000a68:	0800c398 	.word	0x0800c398
 8000a6c:	08001511 	.word	0x08001511
 8000a70:	20000b78 	.word	0x20000b78
 8000a74:	0800c3bc 	.word	0x0800c3bc
 8000a78:	08001525 	.word	0x08001525
 8000a7c:	20000b7c 	.word	0x20000b7c
 8000a80:	20000b88 	.word	0x20000b88
 8000a84:	0800c278 	.word	0x0800c278

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2230      	movs	r2, #48	; 0x30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00a fc49 	bl	800b32e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemClock_Config+0xd0>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b00:	23a8      	movs	r3, #168	; 0xa8
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fc21 	bl	8004358 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b1c:	f000 fd1e 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fe82 	bl	8004848 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b4a:	f000 fd07 	bl	800155c <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x9c>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_ADC1_Init+0xa0>)
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000bc2:	f001 fdb5 	bl	8002730 <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fcc6 	bl	800155c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000be2:	f001 fff9 	bl	8002bd8 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 fcb6 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200002c0 	.word	0x200002c0
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	0f000001 	.word	0x0f000001

08000c04 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <MX_ETH_Init+0x88>)
 8000c0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c1c:	22e1      	movs	r2, #225	; 0xe1
 8000c1e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c34:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <MX_ETH_Init+0x8c>)
 8000c36:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c3e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <MX_ETH_Init+0x90>)
 8000c44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_ETH_Init+0x94>)
 8000c4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c4e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_ETH_Init+0x84>)
 8000c56:	f002 fb6b 	bl	8003330 <HAL_ETH_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c60:	f000 fc7c 	bl	800155c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c64:	2238      	movs	r2, #56	; 0x38
 8000c66:	2100      	movs	r1, #0
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_ETH_Init+0x98>)
 8000c6a:	f00a fb60 	bl	800b32e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_ETH_Init+0x98>)
 8000c70:	2221      	movs	r2, #33	; 0x21
 8000c72:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_ETH_Init+0x98>)
 8000c76:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c7a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_ETH_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000308 	.word	0x20000308
 8000c8c:	40028000 	.word	0x40028000
 8000c90:	20000b90 	.word	0x20000b90
 8000c94:	20000220 	.word	0x20000220
 8000c98:	20000180 	.word	0x20000180
 8000c9c:	20000148 	.word	0x20000148

08000ca0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_I2C1_Init+0x78>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x7c>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cde:	f003 f85f 	bl	8003da0 <HAL_I2C_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 fc38 	bl	800155c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4809      	ldr	r0, [pc, #36]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000cf0:	f003 f99a 	bl	8004028 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cfa:	f000 fc2f 	bl	800155c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_I2C1_Init+0x74>)
 8000d02:	f003 f9cd 	bl	80040a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 fc26 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200003b8 	.word	0x200003b8
 8000d18:	40005400 	.word	0x40005400
 8000d1c:	000186a0 	.word	0x000186a0

08000d20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d3a:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <MX_RTC_Init+0xb0>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d46:	227f      	movs	r2, #127	; 0x7f
 8000d48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d4c:	22ff      	movs	r2, #255	; 0xff
 8000d4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d64:	f004 f982 	bl	800506c <HAL_RTC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 fbf5 	bl	800155c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000d72:	2309      	movs	r3, #9
 8000d74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <MX_RTC_Init+0xac>)
 8000d8e:	f004 f9e3 	bl	8005158 <HAL_RTC_SetTime>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 fbe0 	bl	800155c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000da0:	2310      	movs	r3, #16
 8000da2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000da4:	2316      	movs	r3, #22
 8000da6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000da8:	2323      	movs	r3, #35	; 0x23
 8000daa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_RTC_Init+0xac>)
 8000db4:	f004 fa6a 	bl	800528c <HAL_RTC_SetDate>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000dbe:	f000 fbcd 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000040c 	.word	0x2000040c
 8000dd0:	40002800 	.word	0x40002800

08000dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e00:	f240 628f 	movw	r2, #1679	; 0x68f
 8000e04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e22:	f004 fc17 	bl	8005654 <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 fb96 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e40:	f005 ff78 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e4a:	f000 fb87 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000e52:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e68:	f005 f93e 	bl	80060e8 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000e72:	f000 fb73 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM2_Init+0xb0>)
 8000e78:	f001 f802 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000042c 	.word	0x2000042c

08000e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eac:	2253      	movs	r2, #83	; 0x53
 8000eae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ebc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ecc:	f004 fdf0 	bl	8005ab0 <HAL_TIM_IC_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 fb41 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480f      	ldr	r0, [pc, #60]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eea:	f005 ff23 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ef4:	f000 fb32 	bl	800155c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000efc:	2301      	movs	r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000f10:	f005 f84e 	bl	8005fb0 <HAL_TIM_IC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f1a:	f000 fb1f 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000474 	.word	0x20000474
 8000f2c:	40000400 	.word	0x40000400

08000f30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <MX_TIM4_Init+0x98>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f54:	f240 3247 	movw	r2, #839	; 0x347
 8000f58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f62:	2263      	movs	r2, #99	; 0x63
 8000f64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f74:	f004 faaf 	bl	80054d6 <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f000 faed 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f90:	f005 f96c 	bl	800626c <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fadf 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000fac:	f005 fec2 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fb6:	f000 fad1 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200004bc 	.word	0x200004bc
 8000fc8:	40000800 	.word	0x40000800

08000fcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	; 0x38
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8000ffe:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <MX_TIM5_Init+0xe8>)
 8001000:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001004:	2233      	movs	r2, #51	; 0x33
 8001006:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_TIM5_Init+0xe4>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001010:	f240 128f 	movw	r2, #399	; 0x18f
 8001014:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_TIM5_Init+0xe4>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001022:	4823      	ldr	r0, [pc, #140]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001024:	f004 fa57 	bl	80054d6 <HAL_TIM_Base_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800102e:	f000 fa95 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103c:	4619      	mov	r1, r3
 800103e:	481c      	ldr	r0, [pc, #112]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001040:	f005 f914 	bl	800626c <HAL_TIM_ConfigClockSource>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800104a:	f000 fa87 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001050:	f004 fb00 	bl	8005654 <HAL_TIM_PWM_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800105a:	f000 fa7f 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_TIM5_Init+0xe4>)
 800106e:	f005 fe61 	bl	8006d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001078:	f000 fa70 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001080:	23c7      	movs	r3, #199	; 0xc7
 8001082:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	220c      	movs	r2, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM5_Init+0xe4>)
 8001094:	f005 f828 	bl	80060e8 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800109e:	f000 fa5d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM5_Init+0xe4>)
 80010a4:	f000 feec 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000504 	.word	0x20000504
 80010b4:	40000c00 	.word	0x40000c00

080010b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <MX_TIM10_Init+0x44>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010c4:	22a7      	movs	r2, #167	; 0xa7
 80010c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80010d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM10_Init+0x40>)
 80010e4:	f004 f9f7 	bl	80054d6 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010ee:	f000 fa35 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000054c 	.word	0x2000054c
 80010fc:	40014400 	.word	0x40014400

08001100 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_TIM11_Init+0x40>)
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <MX_TIM11_Init+0x44>)
 8001108:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <MX_TIM11_Init+0x40>)
 800110c:	22a7      	movs	r2, #167	; 0xa7
 800110e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_TIM11_Init+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_TIM11_Init+0x40>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_TIM11_Init+0x40>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_TIM11_Init+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM11_Init+0x40>)
 800112c:	f004 f9d3 	bl	80054d6 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001136:	f000 fa11 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000594 	.word	0x20000594
 8001144:	40014800 	.word	0x40014800

08001148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_USART3_UART_Init+0x50>)
 8001150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001154:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USART3_UART_Init+0x4c>)
 8001180:	f005 fe68 	bl	8006e54 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800118a:	f000 f9e7 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200005dc 	.word	0x200005dc
 8001198:	40004800 	.word	0x40004800

0800119c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <MX_USART6_UART_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_USART6_UART_Init+0x4c>)
 80011d4:	f005 fe3e 	bl	8006e54 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011de:	f000 f9bd 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000620 	.word	0x20000620
 80011ec:	40011400 	.word	0x40011400

080011f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fe:	2204      	movs	r2, #4
 8001200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001204:	2202      	movs	r2, #2
 8001206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001210:	2202      	movs	r2, #2
 8001212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001216:	2201      	movs	r2, #1
 8001218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001228:	2201      	movs	r2, #1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001234:	f002 ff73 	bl	800411e <HAL_PCD_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 f98d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000664 	.word	0x20000664

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	4b99      	ldr	r3, [pc, #612]	; (80014cc <MX_GPIO_Init+0x280>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a98      	ldr	r2, [pc, #608]	; (80014cc <MX_GPIO_Init+0x280>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b96      	ldr	r3, [pc, #600]	; (80014cc <MX_GPIO_Init+0x280>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	4b92      	ldr	r3, [pc, #584]	; (80014cc <MX_GPIO_Init+0x280>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a91      	ldr	r2, [pc, #580]	; (80014cc <MX_GPIO_Init+0x280>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b8f      	ldr	r3, [pc, #572]	; (80014cc <MX_GPIO_Init+0x280>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <MX_GPIO_Init+0x280>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a8a      	ldr	r2, [pc, #552]	; (80014cc <MX_GPIO_Init+0x280>)
 80012a4:	f043 0320 	orr.w	r3, r3, #32
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b88      	ldr	r3, [pc, #544]	; (80014cc <MX_GPIO_Init+0x280>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	4b84      	ldr	r3, [pc, #528]	; (80014cc <MX_GPIO_Init+0x280>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a83      	ldr	r2, [pc, #524]	; (80014cc <MX_GPIO_Init+0x280>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <MX_GPIO_Init+0x280>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <MX_GPIO_Init+0x280>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a7c      	ldr	r2, [pc, #496]	; (80014cc <MX_GPIO_Init+0x280>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <MX_GPIO_Init+0x280>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <MX_GPIO_Init+0x280>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a75      	ldr	r2, [pc, #468]	; (80014cc <MX_GPIO_Init+0x280>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b73      	ldr	r3, [pc, #460]	; (80014cc <MX_GPIO_Init+0x280>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <MX_GPIO_Init+0x280>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <MX_GPIO_Init+0x280>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <MX_GPIO_Init+0x280>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b68      	ldr	r3, [pc, #416]	; (80014cc <MX_GPIO_Init+0x280>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a67      	ldr	r2, [pc, #412]	; (80014cc <MX_GPIO_Init+0x280>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <MX_GPIO_Init+0x280>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001348:	4861      	ldr	r0, [pc, #388]	; (80014d0 <MX_GPIO_Init+0x284>)
 800134a:	f002 fcdd 	bl	8003d08 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FND0_Pin|FND1_Pin|FND2_Pin|FND3_Pin
 800134e:	2200      	movs	r2, #0
 8001350:	f241 11bf 	movw	r1, #4543	; 0x11bf
 8001354:	485f      	ldr	r0, [pc, #380]	; (80014d4 <MX_GPIO_Init+0x288>)
 8001356:	f002 fcd7 	bl	8003d08 <HAL_GPIO_WritePin>
                          |FND4_Pin|FND5_Pin|FND6_Pin|FND7_Pin
                          |ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2101      	movs	r1, #1
 800135e:	485e      	ldr	r0, [pc, #376]	; (80014d8 <MX_GPIO_Init+0x28c>)
 8001360:	f002 fcd2 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f244 0181 	movw	r1, #16513	; 0x4081
 800136a:	485c      	ldr	r0, [pc, #368]	; (80014dc <MX_GPIO_Init+0x290>)
 800136c:	f002 fccc 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001370:	2200      	movs	r2, #0
 8001372:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001376:	485a      	ldr	r0, [pc, #360]	; (80014e0 <MX_GPIO_Init+0x294>)
 8001378:	f002 fcc6 	bl	8003d08 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2140      	movs	r1, #64	; 0x40
 8001380:	4858      	ldr	r0, [pc, #352]	; (80014e4 <MX_GPIO_Init+0x298>)
 8001382:	f002 fcc1 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001386:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	484c      	ldr	r0, [pc, #304]	; (80014d0 <MX_GPIO_Init+0x284>)
 80013a0:	f002 faee 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin
                           PHOTO3_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin
 80013a4:	f242 130d 	movw	r3, #8461	; 0x210d
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PHOTO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	484b      	ldr	r0, [pc, #300]	; (80014e8 <MX_GPIO_Init+0x29c>)
 80013bc:	f002 fae0 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND0_Pin FND1_Pin FND2_Pin FND3_Pin
                           FND4_Pin FND5_Pin FND6_Pin FND7_Pin
                           ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = FND0_Pin|FND1_Pin|FND2_Pin|FND3_Pin
 80013c0:	f241 13bf 	movw	r3, #4543	; 0x11bf
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND4_Pin|FND5_Pin|FND6_Pin|FND7_Pin
                          |ULTRASONIC_TRIGGER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	483e      	ldr	r0, [pc, #248]	; (80014d4 <MX_GPIO_Init+0x288>)
 80013da:	f002 fad1 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4838      	ldr	r0, [pc, #224]	; (80014d8 <MX_GPIO_Init+0x28c>)
 80013f6:	f002 fac3 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013fa:	f244 0381 	movw	r3, #16513	; 0x4081
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <MX_GPIO_Init+0x290>)
 8001414:	f002 fab4 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001418:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	4828      	ldr	r0, [pc, #160]	; (80014d0 <MX_GPIO_Init+0x284>)
 800142e:	f002 faa7 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001432:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <MX_GPIO_Init+0x294>)
 800144c:	f002 fa98 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <MX_GPIO_Init+0x298>)
 8001468:	f002 fa8a 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4819      	ldr	r0, [pc, #100]	; (80014e4 <MX_GPIO_Init+0x298>)
 8001480:	f002 fa7e 	bl	8003980 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2105      	movs	r1, #5
 8001488:	2006      	movs	r0, #6
 800148a:	f001 fe95 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800148e:	2006      	movs	r0, #6
 8001490:	f001 feae 	bl	80031f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2105      	movs	r1, #5
 8001498:	2008      	movs	r0, #8
 800149a:	f001 fe8d 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800149e:	2008      	movs	r0, #8
 80014a0:	f001 fea6 	bl	80031f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2105      	movs	r1, #5
 80014a8:	2009      	movs	r0, #9
 80014aa:	f001 fe85 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014ae:	2009      	movs	r0, #9
 80014b0:	f001 fe9e 	bl	80031f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2105      	movs	r1, #5
 80014b8:	2017      	movs	r0, #23
 80014ba:	f001 fe7d 	bl	80031b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014be:	2017      	movs	r0, #23
 80014c0:	f001 fe96 	bl	80031f0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	; 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40021400 	.word	0x40021400
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40020800 	.word	0x40020800

080014ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f007 f947 	bl	8008788 <osDelay>
 80014fa:	e7fb      	b.n	80014f4 <StartDefaultTask+0x8>

080014fc <task1_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_func */
void task1_func(void *argument)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task1_func */
  /* Infinite loop */
  for(;;)
  {
	  stepmotor_main_test();
 8001504:	f000 f896 	bl	8001634 <stepmotor_main_test>
    osDelay(1);
 8001508:	2001      	movs	r0, #1
 800150a:	f007 f93d 	bl	8008788 <osDelay>
	  stepmotor_main_test();
 800150e:	e7f9      	b.n	8001504 <task1_func+0x8>

08001510 <task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_func */
void task2_func(void *argument)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_func */
  /* Infinite loop */
  for(;;)
  {
	fnd4digit_main();
 8001518:	f7ff f9a6 	bl	8000868 <fnd4digit_main>
    osDelay(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f007 f933 	bl	8008788 <osDelay>
	fnd4digit_main();
 8001522:	e7f9      	b.n	8001518 <task2_func+0x8>

08001524 <task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task3_func */
void task3_func(void *argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task3_func */
  /* Infinite loop */
  for(;;)
  {
	dotmatrix_main_test();
 800152c:	f7ff f8d8 	bl	80006e0 <dotmatrix_main_test>
    osDelay(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f007 f929 	bl	8008788 <osDelay>
	dotmatrix_main_test();
 8001536:	e7f9      	b.n	800152c <task3_func+0x8>

08001538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800154a:	f001 f8ad 	bl	80026a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40001000 	.word	0x40001000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>

08001566 <set_rpm>:
//							   = 4612ms
//							   = 4.6초
// 60초 / 4.6(1회전시 소요시간 초) ==> 13회전
// 시계방향으로 1회전 <---> 반시계방향으로 1회전
void set_rpm(int rpm) // rpm 1~13
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 800156e:	f643 1238 	movw	r2, #14648	; 0x3938
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	fb92 f3f3 	sdiv	r3, r2, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f9c3 	bl	8000904 <delay_us>
	// 최대 speed 기준(13) : delay_us(1126);
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_EXTI_Callback>:
int forward = 0;
int backward = 0;
int fnd_floor = 0;
volatile int ext_int_no = -1;	// GPIO_Pin?�� 0번도 존재?��?���?????? 구분?���?????? ?��?��?�� -1�?????? 집어?��?��	photo interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001598:	d02d      	beq.n	80015f6 <HAL_GPIO_EXTI_Callback+0x6e>
 800159a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800159e:	dc3e      	bgt.n	800161e <HAL_GPIO_EXTI_Callback+0x96>
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d01c      	beq.n	80015de <HAL_GPIO_EXTI_Callback+0x56>
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	dc3a      	bgt.n	800161e <HAL_GPIO_EXTI_Callback+0x96>
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d002      	beq.n	80015b2 <HAL_GPIO_EXTI_Callback+0x2a>
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d00b      	beq.n	80015c8 <HAL_GPIO_EXTI_Callback+0x40>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);	// LED1
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	// LED2
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED3
		break;
	}
}
 80015b0:	e035      	b.n	800161e <HAL_GPIO_EXTI_Callback+0x96>
		ext_int_no=GPIO_Pin;
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015b6:	6013      	str	r3, [r2, #0]
		fnd_floor = 1;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);	// LED1
 80015be:	2101      	movs	r1, #1
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015c2:	f002 fbba 	bl	8003d3a <HAL_GPIO_TogglePin>
		break;
 80015c6:	e02a      	b.n	800161e <HAL_GPIO_EXTI_Callback+0x96>
		ext_int_no=GPIO_Pin;
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015cc:	6013      	str	r3, [r2, #0]
		fnd_floor = 2;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	// LED2
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	4816      	ldr	r0, [pc, #88]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015d8:	f002 fbaf 	bl	8003d3a <HAL_GPIO_TogglePin>
		break;
 80015dc:	e01f      	b.n	800161e <HAL_GPIO_EXTI_Callback+0x96>
		ext_int_no=GPIO_Pin;
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015e2:	6013      	str	r3, [r2, #0]
		fnd_floor = 3;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED3
 80015ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ee:	4810      	ldr	r0, [pc, #64]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015f0:	f002 fba3 	bl	8003d3a <HAL_GPIO_TogglePin>
		break;
 80015f4:	e013      	b.n	800161e <HAL_GPIO_EXTI_Callback+0x96>
		ext_int_no=GPIO_Pin;
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015fa:	6013      	str	r3, [r2, #0]
		fnd_floor = 4;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_GPIO_EXTI_Callback+0xa4>)
 80015fe:	2204      	movs	r2, #4
 8001600:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);	// LED1
 8001602:	2101      	movs	r1, #1
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001606:	f002 fb98 	bl	8003d3a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	// LED2
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa8>)
 800160e:	f002 fb94 	bl	8003d3a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED3
 8001612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001618:	f002 fb8f 	bl	8003d3a <HAL_GPIO_TogglePin>
		break;
 800161c:	bf00      	nop
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000a4 	.word	0x200000a4
 800162c:	20000ba0 	.word	0x20000ba0
 8001630:	40020400 	.word	0x40020400

08001634 <stepmotor_main_test>:

void stepmotor_main_test(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
#if 1
	//버튼 처리에 의한
	while(1)
	{
		if(idle)
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <stepmotor_main_test+0xcc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <stepmotor_main_test+0x2a>
		{
			if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001646:	482f      	ldr	r0, [pc, #188]	; (8001704 <stepmotor_main_test+0xd0>)
 8001648:	f7fe ffa4 	bl	8000594 <get_button>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <stepmotor_main_test+0x2a>
			{
				forward = 1;
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <stepmotor_main_test+0xd4>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
				idle = 0;
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <stepmotor_main_test+0xcc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
				//backward = 0;
			}
		}
		if(forward)
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <stepmotor_main_test+0xd4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d023      	beq.n	80016ae <stepmotor_main_test+0x7a>
		{
			stepmotor_drive(0);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f852 	bl	8001710 <stepmotor_drive>
			set_rpm(13);
 800166c:	200d      	movs	r0, #13
 800166e:	f7ff ff7a 	bl	8001566 <set_rpm>

			if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001678:	4822      	ldr	r0, [pc, #136]	; (8001704 <stepmotor_main_test+0xd0>)
 800167a:	f7fe ff8b 	bl	8000594 <get_button>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <stepmotor_main_test+0x5c>
			{
				backward = 1;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <stepmotor_main_test+0xd8>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
				forward = 0;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <stepmotor_main_test+0xd4>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
			}
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001696:	481b      	ldr	r0, [pc, #108]	; (8001704 <stepmotor_main_test+0xd0>)
 8001698:	f7fe ff7c 	bl	8000594 <get_button>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <stepmotor_main_test+0x7a>
			{
				idle = 1;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <stepmotor_main_test+0xcc>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
				forward = 0;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <stepmotor_main_test+0xd4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
			}
		}
		if(backward)
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <stepmotor_main_test+0xd8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0c0      	beq.n	8001638 <stepmotor_main_test+0x4>
		{
			stepmotor_drive(1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f000 f82a 	bl	8001710 <stepmotor_drive>
			set_rpm(10);
 80016bc:	200a      	movs	r0, #10
 80016be:	f7ff ff52 	bl	8001566 <set_rpm>

			if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <stepmotor_main_test+0xd0>)
 80016ca:	f7fe ff63 	bl	8000594 <get_button>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <stepmotor_main_test+0xac>
			{
				forward = 1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <stepmotor_main_test+0xd4>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
				backward = 0;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <stepmotor_main_test+0xd8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
			}
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <stepmotor_main_test+0xd0>)
 80016e8:	f7fe ff54 	bl	8000594 <get_button>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1a2      	bne.n	8001638 <stepmotor_main_test+0x4>
			{
				idle = 1;
 80016f2:	4b03      	ldr	r3, [pc, #12]	; (8001700 <stepmotor_main_test+0xcc>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
				backward = 0;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <stepmotor_main_test+0xd8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
		if(idle)
 80016fe:	e79b      	b.n	8001638 <stepmotor_main_test+0x4>
 8001700:	200000a0 	.word	0x200000a0
 8001704:	40021000 	.word	0x40021000
 8001708:	20000b98 	.word	0x20000b98
 800170c:	20000b9c 	.word	0x20000b9c

08001710 <stepmotor_drive>:
//
// direction : 1 == 시계방향 회전
//			   2 ---> 반시계
//			   0 : idle
void stepmotor_drive(int direction)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	static int step = 0;	// static을 쓰면 전역변수처럼 동작
	switch(step){
 8001718:	4b83      	ldr	r3, [pc, #524]	; (8001928 <stepmotor_drive+0x218>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b07      	cmp	r3, #7
 800171e:	f200 80db 	bhi.w	80018d8 <stepmotor_drive+0x1c8>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <stepmotor_drive+0x18>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001749 	.word	0x08001749
 800172c:	0800177b 	.word	0x0800177b
 8001730:	080017ad 	.word	0x080017ad
 8001734:	080017df 	.word	0x080017df
 8001738:	08001811 	.word	0x08001811
 800173c:	08001843 	.word	0x08001843
 8001740:	08001875 	.word	0x08001875
 8001744:	080018a7 	.word	0x080018a7
	case 0:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174e:	4877      	ldr	r0, [pc, #476]	; (800192c <stepmotor_drive+0x21c>)
 8001750:	f002 fada 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175a:	4874      	ldr	r0, [pc, #464]	; (800192c <stepmotor_drive+0x21c>)
 800175c:	f002 fad4 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	4871      	ldr	r0, [pc, #452]	; (800192c <stepmotor_drive+0x21c>)
 8001768:	f002 face 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001772:	486e      	ldr	r0, [pc, #440]	; (800192c <stepmotor_drive+0x21c>)
 8001774:	f002 fac8 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 8001778:	e0ae      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 1:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	486a      	ldr	r0, [pc, #424]	; (800192c <stepmotor_drive+0x21c>)
 8001782:	f002 fac1 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178c:	4867      	ldr	r0, [pc, #412]	; (800192c <stepmotor_drive+0x21c>)
 800178e:	f002 fabb 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001798:	4864      	ldr	r0, [pc, #400]	; (800192c <stepmotor_drive+0x21c>)
 800179a:	f002 fab5 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a4:	4861      	ldr	r0, [pc, #388]	; (800192c <stepmotor_drive+0x21c>)
 80017a6:	f002 faaf 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 80017aa:	e095      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 2:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b2:	485e      	ldr	r0, [pc, #376]	; (800192c <stepmotor_drive+0x21c>)
 80017b4:	f002 faa8 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017be:	485b      	ldr	r0, [pc, #364]	; (800192c <stepmotor_drive+0x21c>)
 80017c0:	f002 faa2 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	4858      	ldr	r0, [pc, #352]	; (800192c <stepmotor_drive+0x21c>)
 80017cc:	f002 fa9c 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d6:	4855      	ldr	r0, [pc, #340]	; (800192c <stepmotor_drive+0x21c>)
 80017d8:	f002 fa96 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 80017dc:	e07c      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 3:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e4:	4851      	ldr	r0, [pc, #324]	; (800192c <stepmotor_drive+0x21c>)
 80017e6:	f002 fa8f 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f0:	484e      	ldr	r0, [pc, #312]	; (800192c <stepmotor_drive+0x21c>)
 80017f2:	f002 fa89 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fc:	484b      	ldr	r0, [pc, #300]	; (800192c <stepmotor_drive+0x21c>)
 80017fe:	f002 fa83 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001808:	4848      	ldr	r0, [pc, #288]	; (800192c <stepmotor_drive+0x21c>)
 800180a:	f002 fa7d 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 800180e:	e063      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 4:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001816:	4845      	ldr	r0, [pc, #276]	; (800192c <stepmotor_drive+0x21c>)
 8001818:	f002 fa76 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001822:	4842      	ldr	r0, [pc, #264]	; (800192c <stepmotor_drive+0x21c>)
 8001824:	f002 fa70 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	483f      	ldr	r0, [pc, #252]	; (800192c <stepmotor_drive+0x21c>)
 8001830:	f002 fa6a 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183a:	483c      	ldr	r0, [pc, #240]	; (800192c <stepmotor_drive+0x21c>)
 800183c:	f002 fa64 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 8001840:	e04a      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 5:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001848:	4838      	ldr	r0, [pc, #224]	; (800192c <stepmotor_drive+0x21c>)
 800184a:	f002 fa5d 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001854:	4835      	ldr	r0, [pc, #212]	; (800192c <stepmotor_drive+0x21c>)
 8001856:	f002 fa57 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001860:	4832      	ldr	r0, [pc, #200]	; (800192c <stepmotor_drive+0x21c>)
 8001862:	f002 fa51 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186c:	482f      	ldr	r0, [pc, #188]	; (800192c <stepmotor_drive+0x21c>)
 800186e:	f002 fa4b 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 8001872:	e031      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 6:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187a:	482c      	ldr	r0, [pc, #176]	; (800192c <stepmotor_drive+0x21c>)
 800187c:	f002 fa44 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001886:	4829      	ldr	r0, [pc, #164]	; (800192c <stepmotor_drive+0x21c>)
 8001888:	f002 fa3e 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001892:	4826      	ldr	r0, [pc, #152]	; (800192c <stepmotor_drive+0x21c>)
 8001894:	f002 fa38 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4823      	ldr	r0, [pc, #140]	; (800192c <stepmotor_drive+0x21c>)
 80018a0:	f002 fa32 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 80018a4:	e018      	b.n	80018d8 <stepmotor_drive+0x1c8>
	case 7:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ac:	481f      	ldr	r0, [pc, #124]	; (800192c <stepmotor_drive+0x21c>)
 80018ae:	f002 fa2b 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	481c      	ldr	r0, [pc, #112]	; (800192c <stepmotor_drive+0x21c>)
 80018ba:	f002 fa25 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c4:	4819      	ldr	r0, [pc, #100]	; (800192c <stepmotor_drive+0x21c>)
 80018c6:	f002 fa1f 	bl	8003d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d0:	4816      	ldr	r0, [pc, #88]	; (800192c <stepmotor_drive+0x21c>)
 80018d2:	f002 fa19 	bl	8003d08 <HAL_GPIO_WritePin>
		break;
 80018d6:	bf00      	nop
	}
	if(direction == 0)	// 정회전
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d110      	bne.n	8001900 <stepmotor_drive+0x1f0>
	{
		step++;	// for(step = 0; step<8; step++)
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <stepmotor_drive+0x218>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <stepmotor_drive+0x218>)
 80018e6:	6013      	str	r3, [r2, #0]
		step %= 8;	// 다음 진행할 step 준비
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <stepmotor_drive+0x218>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	425a      	negs	r2, r3
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	f002 0207 	and.w	r2, r2, #7
 80018f6:	bf58      	it	pl
 80018f8:	4253      	negpl	r3, r2
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <stepmotor_drive+0x218>)
 80018fc:	6013      	str	r3, [r2, #0]
	else if(direction == 1)	// 역회전
	{
		step--;
		if(step<0) step=7;
	}
}
 80018fe:	e00e      	b.n	800191e <stepmotor_drive+0x20e>
	else if(direction == 1)	// 역회전
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10b      	bne.n	800191e <stepmotor_drive+0x20e>
		step--;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <stepmotor_drive+0x218>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3b01      	subs	r3, #1
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <stepmotor_drive+0x218>)
 800190e:	6013      	str	r3, [r2, #0]
		if(step<0) step=7;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <stepmotor_drive+0x218>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da02      	bge.n	800191e <stepmotor_drive+0x20e>
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <stepmotor_drive+0x218>)
 800191a:	2207      	movs	r2, #7
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000ba4 	.word	0x20000ba4
 800192c:	40020c00 	.word	0x40020c00

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_MspInit+0x54>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_MspInit+0x54>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x54>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_MspInit+0x54>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_MspInit+0x54>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_MspInit+0x54>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	210f      	movs	r1, #15
 8001972:	f06f 0001 	mvn.w	r0, #1
 8001976:	f001 fc1f 	bl	80031b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_ADC_MspInit+0x8c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12f      	bne.n	8001a0a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_ADC_MspInit+0x90>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019e2:	2310      	movs	r3, #16
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_ADC_MspInit+0x94>)
 80019f6:	f001 ffc3 	bl	8003980 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	2012      	movs	r0, #18
 8001a00:	f001 fbda 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a04:	2012      	movs	r0, #18
 8001a06:	f001 fbf3 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40012000 	.word	0x40012000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a55      	ldr	r2, [pc, #340]	; (8001b94 <HAL_ETH_MspInit+0x174>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	f040 80a4 	bne.w	8001b8c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a70:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	4a44      	ldr	r2, [pc, #272]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8c:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afa:	6313      	str	r3, [r2, #48]	; 0x30
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_ETH_MspInit+0x178>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b08:	2332      	movs	r3, #50	; 0x32
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b18:	230b      	movs	r3, #11
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	481e      	ldr	r0, [pc, #120]	; (8001b9c <HAL_ETH_MspInit+0x17c>)
 8001b24:	f001 ff2c 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b28:	2386      	movs	r3, #134	; 0x86
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b38:	230b      	movs	r3, #11
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <HAL_ETH_MspInit+0x180>)
 8001b44:	f001 ff1c 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b5a:	230b      	movs	r3, #11
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <HAL_ETH_MspInit+0x184>)
 8001b66:	f001 ff0b 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b7c:	230b      	movs	r3, #11
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	4619      	mov	r1, r3
 8001b86:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <HAL_ETH_MspInit+0x188>)
 8001b88:	f001 fefa 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3738      	adds	r7, #56	; 0x38
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40028000 	.word	0x40028000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40021800 	.word	0x40021800

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_I2C_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12c      	bne.n	8001c28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_I2C_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_I2C_MspInit+0x88>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_I2C_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <HAL_I2C_MspInit+0x8c>)
 8001c08:	f001 feba 	bl	8003980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0x88>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_I2C_MspInit+0x88>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_I2C_MspInit+0x88>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400

08001c3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2230      	movs	r2, #48	; 0x30
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f009 fb6e 	bl	800b32e <memset>
  if(hrtc->Instance==RTC)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_RTC_MspInit+0x4c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f83e 	bl	8004cec <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c76:	f7ff fc71 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RTC_MspInit+0x50>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40002800 	.word	0x40002800
 8001c8c:	42470e3c 	.word	0x42470e3c

08001c90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d115      	bne.n	8001cce <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x48>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	201c      	movs	r0, #28
 8001cc4:	f001 fa78 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc8:	201c      	movs	r0, #28
 8001cca:	f001 fa91 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_TIM_IC_MspInit+0x94>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d133      	bne.n	8001d66 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_TIM_IC_MspInit+0x98>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_TIM_IC_MspInit+0x98>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_TIM_IC_MspInit+0x98>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_TIM_IC_MspInit+0x98>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_TIM_IC_MspInit+0x98>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_TIM_IC_MspInit+0x98>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001d36:	2340      	movs	r3, #64	; 0x40
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d46:	2302      	movs	r3, #2
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <HAL_TIM_IC_MspInit+0x9c>)
 8001d52:	f001 fe15 	bl	8003980 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	201d      	movs	r0, #29
 8001d5c:	f001 fa2c 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d60:	201d      	movs	r0, #29
 8001d62:	f001 fa45 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_TIM_Base_MspInit+0xf0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d116      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2105      	movs	r1, #5
 8001dae:	201e      	movs	r0, #30
 8001db0:	f001 fa02 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001db4:	201e      	movs	r0, #30
 8001db6:	f001 fa1b 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001dba:	e052      	b.n	8001e62 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <HAL_TIM_Base_MspInit+0xf8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d116      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2105      	movs	r1, #5
 8001de6:	2032      	movs	r0, #50	; 0x32
 8001de8:	f001 f9e6 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001dec:	2032      	movs	r0, #50	; 0x32
 8001dee:	f001 f9ff 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8001df2:	e036      	b.n	8001e62 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_TIM_Base_MspInit+0xfc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d116      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	2019      	movs	r0, #25
 8001e20:	f001 f9ca 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e24:	2019      	movs	r0, #25
 8001e26:	f001 f9e3 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8001e2a:	e01a      	b.n	8001e62 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_TIM_Base_MspInit+0x100>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d115      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_TIM_Base_MspInit+0xf4>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2105      	movs	r1, #5
 8001e56:	201a      	movs	r0, #26
 8001e58:	f001 f9ae 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e5c:	201a      	movs	r0, #26
 8001e5e:	f001 f9c7 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40014400 	.word	0x40014400
 8001e7c:	40014800 	.word	0x40014800

08001e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d11e      	bne.n	8001ee0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_TIM_MspPostInit+0xb0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_TIM_MspPostInit+0xb0>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_TIM_MspPostInit+0xb0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4816      	ldr	r0, [pc, #88]	; (8001f34 <HAL_TIM_MspPostInit+0xb4>)
 8001eda:	f001 fd51 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ede:	e022      	b.n	8001f26 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_TIM_MspPostInit+0xb8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d11d      	bne.n	8001f26 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_TIM_MspPostInit+0xb0>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_TIM_MspPostInit+0xb0>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_TIM_MspPostInit+0xb0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f06:	2308      	movs	r3, #8
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f16:	2302      	movs	r3, #2
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <HAL_TIM_MspPostInit+0xb4>)
 8001f22:	f001 fd2d 	bl	8003980 <HAL_GPIO_Init>
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40000c00 	.word	0x40000c00

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <HAL_UART_MspInit+0x108>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d135      	bne.n	8001fca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a38      	ldr	r2, [pc, #224]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b36      	ldr	r3, [pc, #216]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa8:	2307      	movs	r3, #7
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4826      	ldr	r0, [pc, #152]	; (800204c <HAL_UART_MspInit+0x110>)
 8001fb4:	f001 fce4 	bl	8003980 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2105      	movs	r1, #5
 8001fbc:	2027      	movs	r0, #39	; 0x27
 8001fbe:	f001 f8fb 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fc2:	2027      	movs	r0, #39	; 0x27
 8001fc4:	f001 f914 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fc8:	e038      	b.n	800203c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_UART_MspInit+0x114>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d133      	bne.n	800203c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a13      	ldr	r2, [pc, #76]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_UART_MspInit+0x10c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800201c:	2308      	movs	r3, #8
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	480b      	ldr	r0, [pc, #44]	; (8002054 <HAL_UART_MspInit+0x118>)
 8002028:	f001 fcaa 	bl	8003980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2105      	movs	r1, #5
 8002030:	2047      	movs	r0, #71	; 0x47
 8002032:	f001 f8c1 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002036:	2047      	movs	r0, #71	; 0x47
 8002038:	f001 f8da 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 800203c:	bf00      	nop
 800203e:	3730      	adds	r7, #48	; 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40004800 	.word	0x40004800
 8002048:	40023800 	.word	0x40023800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40011400 	.word	0x40011400
 8002054:	40020800 	.word	0x40020800

08002058 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002078:	d13f      	bne.n	80020fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_PCD_MspInit+0xac>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_PCD_MspInit+0xac>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_PCD_MspInit+0xac>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002096:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020a8:	230a      	movs	r3, #10
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <HAL_PCD_MspInit+0xb0>)
 80020b4:	f001 fc64 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	480e      	ldr	r0, [pc, #56]	; (8002108 <HAL_PCD_MspInit+0xb0>)
 80020ce:	f001 fc57 	bl	8003980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_PCD_MspInit+0xac>)
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_PCD_MspInit+0xac>)
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	6353      	str	r3, [r2, #52]	; 0x34
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_PCD_MspInit+0xac>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_PCD_MspInit+0xac>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_PCD_MspInit+0xac>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3728      	adds	r7, #40	; 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000

0800210c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_InitTick+0xe4>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <HAL_InitTick+0xe4>)
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	6413      	str	r3, [r2, #64]	; 0x40
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_InitTick+0xe4>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002138:	f107 0210 	add.w	r2, r7, #16
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fda0 	bl	8004c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002152:	f002 fd71 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8002156:	6378      	str	r0, [r7, #52]	; 0x34
 8002158:	e004      	b.n	8002164 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800215a:	f002 fd6d 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 800215e:	4603      	mov	r3, r0
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_InitTick+0xe8>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	3b01      	subs	r3, #1
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_InitTick+0xec>)
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_InitTick+0xf0>)
 8002176:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_InitTick+0xec>)
 800217a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_InitTick+0xec>)
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_InitTick+0xec>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_InitTick+0xec>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_InitTick+0xec>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002198:	4817      	ldr	r0, [pc, #92]	; (80021f8 <HAL_InitTick+0xec>)
 800219a:	f003 f99c 	bl	80054d6 <HAL_TIM_Base_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11b      	bne.n	80021e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021ac:	4812      	ldr	r0, [pc, #72]	; (80021f8 <HAL_InitTick+0xec>)
 80021ae:	f003 f9e1 	bl	8005574 <HAL_TIM_Base_Start_IT>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021c0:	2036      	movs	r0, #54	; 0x36
 80021c2:	f001 f815 	bl	80031f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d808      	bhi.n	80021de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	2036      	movs	r0, #54	; 0x36
 80021d2:	f000 fff1 	bl	80031b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_InitTick+0xf4>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e002      	b.n	80021e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3738      	adds	r7, #56	; 0x38
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	431bde83 	.word	0x431bde83
 80021f8:	20000ba8 	.word	0x20000ba8
 80021fc:	40001000 	.word	0x40001000
 8002200:	200000ac 	.word	0x200000ac

08002204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <NMI_Handler+0x4>

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 8002234:	2001      	movs	r0, #1
 8002236:	f001 fd9b 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}

0800223e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 8002242:	2004      	movs	r0, #4
 8002244:	f001 fd94 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 8002250:	2008      	movs	r0, #8
 8002252:	f001 fd8d 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <ADC_IRQHandler+0x10>)
 8002262:	f000 fb87 	bl	8002974 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200002c0 	.word	0x200002c0

08002270 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO3_Pin);
 8002274:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002278:	f001 fd7a 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002286:	f003 fd8b 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000054c 	.word	0x2000054c

08002294 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800229a:	f003 fd81 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000594 	.word	0x20000594

080022a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM2_IRQHandler+0x10>)
 80022ae:	f003 fd77 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000042c 	.word	0x2000042c

080022bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM3_IRQHandler+0x10>)
 80022c2:	f003 fd6d 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000474 	.word	0x20000474

080022d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM4_IRQHandler+0x10>)
 80022d6:	f003 fd63 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200004bc 	.word	0x200004bc

080022e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <USART3_IRQHandler+0x10>)
 80022ea:	f004 fec3 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200005dc 	.word	0x200005dc

080022f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <TIM5_IRQHandler+0x10>)
 80022fe:	f003 fd4f 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000504 	.word	0x20000504

0800230c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM6_DAC_IRQHandler+0x10>)
 8002312:	f003 fd45 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000ba8 	.word	0x20000ba8

08002320 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <USART6_IRQHandler+0x10>)
 8002326:	f004 fea5 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000620 	.word	0x20000620

08002334 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e00a      	b.n	800235c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002346:	f3af 8000 	nop.w
 800234a:	4601      	mov	r1, r0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	b2ca      	uxtb	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf0      	blt.n	8002346 <_read+0x12>
  }

  return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e009      	b.n	8002394 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fa8b 	bl	80008a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf1      	blt.n	8002380 <_write+0x12>
  }
  return len;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_close>:

int _close(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ce:	605a      	str	r2, [r3, #4]
  return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_isatty>:

int _isatty(int file)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <_sbrk+0x5c>)
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <_sbrk+0x60>)
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <_sbrk+0x64>)
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <_sbrk+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	429a      	cmp	r2, r3
 800243e:	d207      	bcs.n	8002450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002440:	f008 fe44 	bl	800b0cc <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	220c      	movs	r2, #12
 8002448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e009      	b.n	8002464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <_sbrk+0x64>)
 8002460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20030000 	.word	0x20030000
 8002470:	00000400 	.word	0x00000400
 8002474:	20000bf0 	.word	0x20000bf0
 8002478:	20005688 	.word	0x20005688

0800247c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x20>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <SystemInit+0x20>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_UART_RxCpltCallback+0xd4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d12c      	bne.n	800250a <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b27      	cmp	r3, #39	; 0x27
 80024b6:	dc1d      	bgt.n	80024f4 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_UART_RxCpltCallback+0xdc>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b0a      	cmp	r3, #10
 80024be:	d003      	beq.n	80024c8 <HAL_UART_RxCpltCallback+0x28>
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_UART_RxCpltCallback+0xdc>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b0d      	cmp	r3, #13
 80024c6:	d10b      	bne.n	80024e0 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <HAL_UART_RxCpltCallback+0xe0>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_UART_RxCpltCallback+0xe4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e00f      	b.n	8002500 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	4924      	ldr	r1, [pc, #144]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 80024e8:	600a      	str	r2, [r1, #0]
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_UART_RxCpltCallback+0xdc>)
 80024ec:	7811      	ldrb	r1, [r2, #0]
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_UART_RxCpltCallback+0xe0>)
 80024f0:	54d1      	strb	r1, [r2, r3]
 80024f2:	e005      	b.n	8002500 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 80024fa:	4823      	ldr	r0, [pc, #140]	; (8002588 <HAL_UART_RxCpltCallback+0xe8>)
 80024fc:	f009 f83a 	bl	800b574 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002500:	2201      	movs	r2, #1
 8002502:	491e      	ldr	r1, [pc, #120]	; (800257c <HAL_UART_RxCpltCallback+0xdc>)
 8002504:	481b      	ldr	r0, [pc, #108]	; (8002574 <HAL_UART_RxCpltCallback+0xd4>)
 8002506:	f004 fd84 	bl	8007012 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_UART_RxCpltCallback+0xec>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12c      	bne.n	800256c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_UART_RxCpltCallback+0xf0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b27      	cmp	r3, #39	; 0x27
 8002518:	dc1d      	bgt.n	8002556 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_UART_RxCpltCallback+0xf4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d003      	beq.n	800252a <HAL_UART_RxCpltCallback+0x8a>
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_UART_RxCpltCallback+0xf4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b0d      	cmp	r3, #13
 8002528:	d10b      	bne.n	8002542 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_UART_RxCpltCallback+0xd8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_UART_RxCpltCallback+0xf8>)
 8002530:	2100      	movs	r1, #0
 8002532:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_UART_RxCpltCallback+0xfc>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_UART_RxCpltCallback+0xf0>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e00f      	b.n	8002562 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_UART_RxCpltCallback+0xf0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4911      	ldr	r1, [pc, #68]	; (8002590 <HAL_UART_RxCpltCallback+0xf0>)
 800254a:	600a      	str	r2, [r1, #0]
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_UART_RxCpltCallback+0xf4>)
 800254e:	7811      	ldrb	r1, [r2, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_UART_RxCpltCallback+0xf8>)
 8002552:	54d1      	strb	r1, [r2, r3]
 8002554:	e005      	b.n	8002562 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_UART_RxCpltCallback+0xf0>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 800255c:	4810      	ldr	r0, [pc, #64]	; (80025a0 <HAL_UART_RxCpltCallback+0x100>)
 800255e:	f009 f809 	bl	800b574 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002562:	2201      	movs	r2, #1
 8002564:	490b      	ldr	r1, [pc, #44]	; (8002594 <HAL_UART_RxCpltCallback+0xf4>)
 8002566:	4809      	ldr	r0, [pc, #36]	; (800258c <HAL_UART_RxCpltCallback+0xec>)
 8002568:	f004 fd53 	bl	8007012 <HAL_UART_Receive_IT>
	}
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200005dc 	.word	0x200005dc
 8002578:	20000c1c 	.word	0x20000c1c
 800257c:	20000b80 	.word	0x20000b80
 8002580:	20000bf4 	.word	0x20000bf4
 8002584:	20000c20 	.word	0x20000c20
 8002588:	0800c288 	.word	0x0800c288
 800258c:	20000620 	.word	0x20000620
 8002590:	20000c4c 	.word	0x20000c4c
 8002594:	20000b81 	.word	0x20000b81
 8002598:	20000c24 	.word	0x20000c24
 800259c:	20000c50 	.word	0x20000c50
 80025a0:	0800c2a0 	.word	0x0800c2a0

080025a4 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d11f      	bne.n	80025f6 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 80025ce:	e012      	b.n	80025f6 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x60>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 80025e0:	2100      	movs	r1, #0
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f003 ff0a 	bl	80063fc <HAL_TIM_ReadCapturedValue>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x64>)
 80025ee:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_TIM_IC_CaptureCallback+0x68>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40000400 	.word	0x40000400
 8002604:	20000c5c 	.word	0x20000c5c
 8002608:	20000c54 	.word	0x20000c54
 800260c:	20000c58 	.word	0x20000c58

08002610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002648 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002614:	480d      	ldr	r0, [pc, #52]	; (800264c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800261c:	e002      	b.n	8002624 <LoopCopyDataInit>

0800261e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002622:	3304      	adds	r3, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002628:	d3f9      	bcc.n	800261e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800262c:	4c0b      	ldr	r4, [pc, #44]	; (800265c <LoopFillZerobss+0x26>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002630:	e001      	b.n	8002636 <LoopFillZerobss>

08002632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002634:	3204      	adds	r2, #4

08002636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002638:	d3fb      	bcc.n	8002632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800263a:	f7ff ff1f 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263e:	f008 fe41 	bl	800b2c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002642:	f7fe f977 	bl	8000934 <main>
  bx  lr    
 8002646:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002648:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8002654:	0800c4a0 	.word	0x0800c4a0
  ldr r2, =_sbss
 8002658:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 800265c:	20005684 	.word	0x20005684

08002660 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <CAN1_RX0_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_Init+0x40>)
 800266e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_Init+0x40>)
 800267a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_Init+0x40>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 fd88 	bl	80031a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002692:	200f      	movs	r0, #15
 8002694:	f7ff fd3a 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002698:	f7ff f94a 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x24>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_IncTick+0x24>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	200000b0 	.word	0x200000b0
 80026cc:	20000c60 	.word	0x20000c60

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000c60 	.word	0x20000c60

080026e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff ffee 	bl	80026d0 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d005      	beq.n	800270e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_Delay+0x44>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270e:	bf00      	nop
 8002710:	f7ff ffde 	bl	80026d0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d8f7      	bhi.n	8002710 <HAL_Delay+0x28>
  {
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200000b0 	.word	0x200000b0

08002730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e033      	b.n	80027ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff f91a 	bl	8001988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002776:	f023 0302 	bic.w	r3, r3, #2
 800277a:	f043 0202 	orr.w	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb5a 	bl	8002e3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
 800279e:	e001      	b.n	80027a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_Start_IT+0x1a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0bd      	b.n	800294e <HAL_ADC_Start_IT+0x196>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d018      	beq.n	800281a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f8:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_ADC_Start_IT+0x1a4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_ADC_Start_IT+0x1a8>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0c9a      	lsrs	r2, r3, #18
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800280c:	e002      	b.n	8002814 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3b01      	subs	r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f9      	bne.n	800280e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	f040 8085 	bne.w	8002934 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002854:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	d106      	bne.n	8002878 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f023 0206 	bic.w	r2, r3, #6
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
 8002876:	e002      	b.n	800287e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002886:	4b37      	ldr	r3, [pc, #220]	; (8002964 <HAL_ADC_Start_IT+0x1ac>)
 8002888:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002892:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12a      	bne.n	800290a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <HAL_ADC_Start_IT+0x1b0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d015      	beq.n	80028ea <HAL_ADC_Start_IT+0x132>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_ADC_Start_IT+0x1b4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d105      	bne.n	80028d4 <HAL_ADC_Start_IT+0x11c>
 80028c8:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_ADC_Start_IT+0x1ac>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_ADC_Start_IT+0x1b8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d136      	bne.n	800294c <HAL_ADC_Start_IT+0x194>
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_ADC_Start_IT+0x1ac>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d130      	bne.n	800294c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d129      	bne.n	800294c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e020      	b.n	800294c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_ADC_Start_IT+0x1b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d11b      	bne.n	800294c <HAL_ADC_Start_IT+0x194>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d114      	bne.n	800294c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	e00b      	b.n	800294c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0210 	orr.w	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	200000a8 	.word	0x200000a8
 8002960:	431bde83 	.word	0x431bde83
 8002964:	40012300 	.word	0x40012300
 8002968:	40012000 	.word	0x40012000
 800296c:	40012100 	.word	0x40012100
 8002970:	40012200 	.word	0x40012200

08002974 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d049      	beq.n	8002a3e <HAL_ADC_IRQHandler+0xca>
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d046      	beq.n	8002a3e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d12b      	bne.n	8002a2e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d127      	bne.n	8002a2e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d119      	bne.n	8002a2e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0220 	bic.w	r2, r2, #32
 8002a08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd ff4a 	bl	80008c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0212 	mvn.w	r2, #18
 8002a3c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d057      	beq.n	8002b04 <HAL_ADC_IRQHandler+0x190>
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d054      	beq.n	8002b04 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d139      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d12b      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d124      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11d      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d119      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ace:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa9d 	bl	8003034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f06f 020c 	mvn.w	r2, #12
 8002b02:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d017      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x1d6>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d014      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10d      	bne.n	8002b4a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f837 	bl	8002bae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0201 	mvn.w	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b58:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_ADC_IRQHandler+0x218>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d012      	beq.n	8002b8c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0220 	mvn.w	r2, #32
 8002b7a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f820 	bl	8002bc2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0220 	mvn.w	r2, #32
 8002b8a:	601a      	str	r2, [r3, #0]
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x1c>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e113      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x244>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b09      	cmp	r3, #9
 8002c02:	d925      	bls.n	8002c50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43da      	mvns	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	400a      	ands	r2, r1
 8002c28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68d9      	ldr	r1, [r3, #12]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4403      	add	r3, r0
 8002c42:	3b1e      	subs	r3, #30
 8002c44:	409a      	lsls	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	e022      	b.n	8002c96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	2207      	movs	r2, #7
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	400a      	ands	r2, r1
 8002c72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6919      	ldr	r1, [r3, #16]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4403      	add	r3, r0
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d824      	bhi.n	8002ce8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	3b05      	subs	r3, #5
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b05      	subs	r3, #5
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce6:	e04c      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d824      	bhi.n	8002d3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b23      	subs	r3, #35	; 0x23
 8002d02:	221f      	movs	r2, #31
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	400a      	ands	r2, r1
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	3b23      	subs	r3, #35	; 0x23
 8002d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
 8002d38:	e023      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b41      	subs	r3, #65	; 0x41
 8002d4c:	221f      	movs	r2, #31
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	3b41      	subs	r3, #65	; 0x41
 8002d76:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d82:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <HAL_ADC_ConfigChannel+0x250>)
 8002d84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <HAL_ADC_ConfigChannel+0x254>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10f      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x1d8>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b12      	cmp	r3, #18
 8002d96:	d10b      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_ADC_ConfigChannel+0x254>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d12b      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x23a>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_ADC_ConfigChannel+0x258>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x1f4>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b11      	cmp	r3, #17
 8002dca:	d122      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_ADC_ConfigChannel+0x258>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d111      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_ADC_ConfigChannel+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_ADC_ConfigChannel+0x260>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	0c9a      	lsrs	r2, r3, #18
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40012300 	.word	0x40012300
 8002e2c:	40012000 	.word	0x40012000
 8002e30:	10000012 	.word	0x10000012
 8002e34:	200000a8 	.word	0x200000a8
 8002e38:	431bde83 	.word	0x431bde83

08002e3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <ADC_Init+0x1f0>)
 8002e46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	4a58      	ldr	r2, [pc, #352]	; (8003030 <ADC_Init+0x1f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e00f      	b.n	8002f3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0202 	bic.w	r2, r2, #2
 8002f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7e1b      	ldrb	r3, [r3, #24]
 8002f54:	005a      	lsls	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	3b01      	subs	r3, #1
 8002f94:	035a      	lsls	r2, r3, #13
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	e007      	b.n	8002fb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	051a      	lsls	r2, r3, #20
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ff2:	025a      	lsls	r2, r3, #9
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	029a      	lsls	r2, r3, #10
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40012300 	.word	0x40012300
 8003030:	0f000001 	.word	0x0f000001

08003034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff4c 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ca:	f7ff ff61 	bl	8003090 <__NVIC_GetPriorityGrouping>
 80031ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f7ff ffb1 	bl	800313c <NVIC_EncodePriority>
 80031da:	4602      	mov	r2, r0
 80031dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff80 	bl	80030e8 <__NVIC_SetPriority>
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff54 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7ff fa59 	bl	80026d0 <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e052      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0216 	bic.w	r2, r2, #22
 800324c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_DMA_Abort+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0208 	bic.w	r2, r2, #8
 800327c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328e:	e013      	b.n	80032b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003290:	f7ff fa1e 	bl	80026d0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	d90c      	bls.n	80032b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e015      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e4      	bne.n	8003290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	223f      	movs	r2, #63	; 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d004      	beq.n	800330a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00c      	b.n	8003324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2205      	movs	r2, #5
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06c      	b.n	800341c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2223      	movs	r2, #35	; 0x23
 8003350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe fb63 	bl	8001a20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_ETH_Init+0xf4>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a30      	ldr	r2, [pc, #192]	; (8003424 <HAL_ETH_Init+0xf4>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_ETH_Init+0xf4>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_ETH_Init+0xf8>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_ETH_Init+0xf8>)
 800337c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003380:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_ETH_Init+0xf8>)
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4927      	ldr	r1, [pc, #156]	; (8003428 <HAL_ETH_Init+0xf8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_ETH_Init+0xf8>)
 8003392:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ac:	f7ff f990 	bl	80026d0 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033b2:	e011      	b.n	80033d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80033b4:	f7ff f98c 	bl	80026d0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033c2:	d909      	bls.n	80033d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2204      	movs	r2, #4
 80033c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	22e0      	movs	r2, #224	; 0xe0
 80033d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e021      	b.n	800341c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e4      	bne.n	80033b4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f958 	bl	80036a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f9ff 	bl	80037f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa55 	bl	80038a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9bd 	bl	8003784 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2210      	movs	r2, #16
 8003416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	40013800 	.word	0x40013800

0800342c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4b51      	ldr	r3, [pc, #324]	; (8003588 <ETH_SetMACConfig+0x15c>)
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	7c1b      	ldrb	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <ETH_SetMACConfig+0x28>
 800344e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003452:	e000      	b.n	8003456 <ETH_SetMACConfig+0x2a>
 8003454:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7c5b      	ldrb	r3, [r3, #17]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <ETH_SetMACConfig+0x38>
 800345e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003462:	e000      	b.n	8003466 <ETH_SetMACConfig+0x3a>
 8003464:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003466:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800346c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7fdb      	ldrb	r3, [r3, #31]
 8003472:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003474:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800347a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	7f92      	ldrb	r2, [r2, #30]
 8003480:	2a00      	cmp	r2, #0
 8003482:	d102      	bne.n	800348a <ETH_SetMACConfig+0x5e>
 8003484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003488:	e000      	b.n	800348c <ETH_SetMACConfig+0x60>
 800348a:	2200      	movs	r2, #0
                        macconf->Speed |
 800348c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	7f1b      	ldrb	r3, [r3, #28]
 8003492:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003494:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800349a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	791b      	ldrb	r3, [r3, #4]
 80034a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80034a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	d102      	bne.n	80034b4 <ETH_SetMACConfig+0x88>
 80034ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b2:	e000      	b.n	80034b6 <ETH_SetMACConfig+0x8a>
 80034b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80034b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	7bdb      	ldrb	r3, [r3, #15]
 80034bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80034be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80034c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034ce:	4313      	orrs	r3, r2
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f7ff f8fe 	bl	80026e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003512:	2a00      	cmp	r2, #0
 8003514:	d101      	bne.n	800351a <ETH_SetMACConfig+0xee>
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	e000      	b.n	800351c <ETH_SetMACConfig+0xf0>
 800351a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800351c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800352a:	2a01      	cmp	r2, #1
 800352c:	d101      	bne.n	8003532 <ETH_SetMACConfig+0x106>
 800352e:	2208      	movs	r2, #8
 8003530:	e000      	b.n	8003534 <ETH_SetMACConfig+0x108>
 8003532:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003534:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800353c:	2a01      	cmp	r2, #1
 800353e:	d101      	bne.n	8003544 <ETH_SetMACConfig+0x118>
 8003540:	2204      	movs	r2, #4
 8003542:	e000      	b.n	8003546 <ETH_SetMACConfig+0x11a>
 8003544:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800354e:	2a01      	cmp	r2, #1
 8003550:	d101      	bne.n	8003556 <ETH_SetMACConfig+0x12a>
 8003552:	2202      	movs	r2, #2
 8003554:	e000      	b.n	8003558 <ETH_SetMACConfig+0x12c>
 8003556:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003558:	4313      	orrs	r3, r2
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003570:	2001      	movs	r0, #1
 8003572:	f7ff f8b9 	bl	80026e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	619a      	str	r2, [r3, #24]
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	ff20810f 	.word	0xff20810f

0800358c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <ETH_SetDMAConfig+0x110>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	7b1b      	ldrb	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <ETH_SetDMAConfig+0x2c>
 80035b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035b6:	e000      	b.n	80035ba <ETH_SetDMAConfig+0x2e>
 80035b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	7b5b      	ldrb	r3, [r3, #13]
 80035be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80035c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	7f52      	ldrb	r2, [r2, #29]
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	d102      	bne.n	80035d0 <ETH_SetDMAConfig+0x44>
 80035ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035ce:	e000      	b.n	80035d2 <ETH_SetDMAConfig+0x46>
 80035d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80035d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	7b9b      	ldrb	r3, [r3, #14]
 80035d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80035da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80035e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	7f1b      	ldrb	r3, [r3, #28]
 80035e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80035e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	7f9b      	ldrb	r3, [r3, #30]
 80035ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80035f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80035f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003600:	4313      	orrs	r3, r2
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003610:	461a      	mov	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003622:	2001      	movs	r0, #1
 8003624:	f7ff f860 	bl	80026e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	791b      	ldrb	r3, [r3, #4]
 800363a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003640:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003646:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800364c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003654:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003656:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800365e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003664:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800366e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003672:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003680:	2001      	movs	r0, #1
 8003682:	f7ff f831 	bl	80026e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	f8de3f23 	.word	0xf8de3f23

080036a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b0a6      	sub	sp, #152	; 0x98
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80036b4:	2300      	movs	r3, #0
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80036dc:	2300      	movs	r3, #0
 80036de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003706:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800370e:	2300      	movs	r3, #0
 8003710:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fe86 	bl	800342c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003720:	2301      	movs	r3, #1
 8003722:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003724:	2301      	movs	r3, #1
 8003726:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800372e:	2301      	movs	r3, #1
 8003730:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800373c:	2300      	movs	r3, #0
 800373e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003742:	2300      	movs	r3, #0
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800374c:	2301      	movs	r3, #1
 800374e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003754:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800375a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800375c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003760:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003768:	2300      	movs	r3, #0
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003770:	f107 0308 	add.w	r3, r7, #8
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff08 	bl	800358c <ETH_SetDMAConfig>
}
 800377c:	bf00      	nop
 800377e:	3798      	adds	r7, #152	; 0x98
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3305      	adds	r3, #5
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	3204      	adds	r2, #4
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <ETH_MACAddressConfig+0x68>)
 80037a6:	4413      	add	r3, r2
 80037a8:	461a      	mov	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3303      	adds	r3, #3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	061a      	lsls	r2, r3, #24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3302      	adds	r3, #2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3301      	adds	r3, #1
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	4313      	orrs	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <ETH_MACAddressConfig+0x6c>)
 80037d6:	4413      	add	r3, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6013      	str	r3, [r2, #0]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40028040 	.word	0x40028040
 80037f0:	40028044 	.word	0x40028044

080037f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e03e      	b.n	8003880 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68d9      	ldr	r1, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	3206      	adds	r2, #6
 8003834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d80c      	bhi.n	8003864 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68d9      	ldr	r1, [r3, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	e004      	b.n	800386e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d9bd      	bls.n	8003802 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003898:	611a      	str	r2, [r3, #16]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e046      	b.n	8003942 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6919      	ldr	r1, [r3, #16]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2200      	movs	r2, #0
 80038dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2200      	movs	r2, #0
 80038e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2200      	movs	r2, #0
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80038f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80038f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	3212      	adds	r2, #18
 800390e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d80c      	bhi.n	8003932 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6919      	ldr	r1, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e004      	b.n	800393c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	461a      	mov	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d9b5      	bls.n	80038b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003972:	60da      	str	r2, [r3, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e177      	b.n	8003c8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f040 8166 	bne.w	8003c86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d005      	beq.n	80039d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d130      	bne.n	8003a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 0201 	and.w	r2, r3, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d017      	beq.n	8003a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d123      	bne.n	8003ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3208      	adds	r2, #8
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80c0 	beq.w	8003c86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	4b66      	ldr	r3, [pc, #408]	; (8003ca4 <HAL_GPIO_Init+0x324>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_GPIO_Init+0x324>)
 8003b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b14:	6453      	str	r3, [r2, #68]	; 0x44
 8003b16:	4b63      	ldr	r3, [pc, #396]	; (8003ca4 <HAL_GPIO_Init+0x324>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b22:	4a61      	ldr	r2, [pc, #388]	; (8003ca8 <HAL_GPIO_Init+0x328>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_GPIO_Init+0x32c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d037      	beq.n	8003bbe <HAL_GPIO_Init+0x23e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a57      	ldr	r2, [pc, #348]	; (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d031      	beq.n	8003bba <HAL_GPIO_Init+0x23a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a56      	ldr	r2, [pc, #344]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d02b      	beq.n	8003bb6 <HAL_GPIO_Init+0x236>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a55      	ldr	r2, [pc, #340]	; (8003cb8 <HAL_GPIO_Init+0x338>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d025      	beq.n	8003bb2 <HAL_GPIO_Init+0x232>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a54      	ldr	r2, [pc, #336]	; (8003cbc <HAL_GPIO_Init+0x33c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <HAL_GPIO_Init+0x22e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a53      	ldr	r2, [pc, #332]	; (8003cc0 <HAL_GPIO_Init+0x340>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d019      	beq.n	8003baa <HAL_GPIO_Init+0x22a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a52      	ldr	r2, [pc, #328]	; (8003cc4 <HAL_GPIO_Init+0x344>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_GPIO_Init+0x226>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a51      	ldr	r2, [pc, #324]	; (8003cc8 <HAL_GPIO_Init+0x348>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00d      	beq.n	8003ba2 <HAL_GPIO_Init+0x222>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a50      	ldr	r2, [pc, #320]	; (8003ccc <HAL_GPIO_Init+0x34c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <HAL_GPIO_Init+0x21e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4f      	ldr	r2, [pc, #316]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_GPIO_Init+0x21a>
 8003b96:	2309      	movs	r3, #9
 8003b98:	e012      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003b9a:	230a      	movs	r3, #10
 8003b9c:	e010      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	e00e      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003ba2:	2307      	movs	r3, #7
 8003ba4:	e00c      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	e00a      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003baa:	2305      	movs	r3, #5
 8003bac:	e008      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	e006      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e004      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_GPIO_Init+0x240>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	f002 0203 	and.w	r2, r2, #3
 8003bc6:	0092      	lsls	r2, r2, #2
 8003bc8:	4093      	lsls	r3, r2
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bd0:	4935      	ldr	r1, [pc, #212]	; (8003ca8 <HAL_GPIO_Init+0x328>)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c02:	4a34      	ldr	r2, [pc, #208]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c08:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c32:	4b28      	ldr	r3, [pc, #160]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_GPIO_Init+0x354>)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b0f      	cmp	r3, #15
 8003c90:	f67f ae84 	bls.w	800399c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3724      	adds	r7, #36	; 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40013800 	.word	0x40013800
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	40020400 	.word	0x40020400
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020c00 	.word	0x40020c00
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40021400 	.word	0x40021400
 8003cc4:	40021800 	.word	0x40021800
 8003cc8:	40021c00 	.word	0x40021c00
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	40022400 	.word	0x40022400
 8003cd4:	40013c00 	.word	0x40013c00

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e001      	b.n	8003cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d4c:	887a      	ldrh	r2, [r7, #2]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	041a      	lsls	r2, r3, #16
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d86:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd fbfa 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e12b      	b.n	800400a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fef0 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e04:	f000 ff18 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4a81      	ldr	r2, [pc, #516]	; (8004014 <HAL_I2C_Init+0x274>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d807      	bhi.n	8003e24 <HAL_I2C_Init+0x84>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_I2C_Init+0x278>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bf94      	ite	ls
 8003e1c:	2301      	movls	r3, #1
 8003e1e:	2300      	movhi	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e006      	b.n	8003e32 <HAL_I2C_Init+0x92>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a7d      	ldr	r2, [pc, #500]	; (800401c <HAL_I2C_Init+0x27c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0e7      	b.n	800400a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a78      	ldr	r2, [pc, #480]	; (8004020 <HAL_I2C_Init+0x280>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0c9b      	lsrs	r3, r3, #18
 8003e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a6a      	ldr	r2, [pc, #424]	; (8004014 <HAL_I2C_Init+0x274>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d802      	bhi.n	8003e74 <HAL_I2C_Init+0xd4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	e009      	b.n	8003e88 <HAL_I2C_Init+0xe8>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	4a69      	ldr	r2, [pc, #420]	; (8004024 <HAL_I2C_Init+0x284>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	3301      	adds	r3, #1
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	495c      	ldr	r1, [pc, #368]	; (8004014 <HAL_I2C_Init+0x274>)
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d819      	bhi.n	8003edc <HAL_I2C_Init+0x13c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e59      	subs	r1, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb6:	1c59      	adds	r1, r3, #1
 8003eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_I2C_Init+0x138>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e59      	subs	r1, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed6:	e051      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e04f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <HAL_I2C_Init+0x168>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e012      	b.n	8003f2e <HAL_I2C_Init+0x18e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e58      	subs	r0, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	0099      	lsls	r1, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Init+0x196>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_I2C_Init+0x1bc>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1e58      	subs	r0, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	440b      	add	r3, r1
 8003f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5a:	e00f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6911      	ldr	r1, [r2, #16]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	000186a0 	.word	0x000186a0
 8004018:	001e847f 	.word	0x001e847f
 800401c:	003d08ff 	.word	0x003d08ff
 8004020:	431bde83 	.word	0x431bde83
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	d129      	bne.n	8004092 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	; 0x24
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0210 	bic.w	r2, r2, #16
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d12a      	bne.n	8004110 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2224      	movs	r2, #36	; 0x24
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80040da:	89fb      	ldrh	r3, [r7, #14]
 80040dc:	f023 030f 	bic.w	r3, r3, #15
 80040e0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	89fa      	ldrh	r2, [r7, #14]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800411e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004120:	b08f      	sub	sp, #60	; 0x3c
 8004122:	af0a      	add	r7, sp, #40	; 0x28
 8004124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e10f      	b.n	8004350 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd ff84 	bl	8002058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2203      	movs	r2, #3
 8004154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f003 ff49 	bl	8008006 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	687e      	ldr	r6, [r7, #4]
 800417c:	466d      	mov	r5, sp
 800417e:	f106 0410 	add.w	r4, r6, #16
 8004182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800418e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004192:	1d33      	adds	r3, r6, #4
 8004194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	f003 fed4 	bl	8007f44 <USB_CoreInit>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0d0      	b.n	8004350 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 ff37 	bl	8008028 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
 80041be:	e04a      	b.n	8004256 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	333d      	adds	r3, #61	; 0x3d
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	333c      	adds	r3, #60	; 0x3c
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	b298      	uxth	r0, r3
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3344      	adds	r3, #68	; 0x44
 80041fc:	4602      	mov	r2, r0
 80041fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	3340      	adds	r3, #64	; 0x40
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	3348      	adds	r3, #72	; 0x48
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	334c      	adds	r3, #76	; 0x4c
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3354      	adds	r3, #84	; 0x54
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	3301      	adds	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d3af      	bcc.n	80041c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	e044      	b.n	80042f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	3301      	adds	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	7bfa      	ldrb	r2, [r7, #15]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d3b5      	bcc.n	8004266 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	687e      	ldr	r6, [r7, #4]
 8004302:	466d      	mov	r5, sp
 8004304:	f106 0410 	add.w	r4, r6, #16
 8004308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800430c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800430e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004310:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004314:	e885 0003 	stmia.w	r5, {r0, r1}
 8004318:	1d33      	adds	r3, r6, #4
 800431a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f003 fecf 	bl	80080c0 <USB_DevInit>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e00d      	b.n	8004350 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f004 f89a 	bl	8008482 <USB_DevDisconnect>

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e267      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d075      	beq.n	8004462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004376:	4b88      	ldr	r3, [pc, #544]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00c      	beq.n	800439c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b85      	ldr	r3, [pc, #532]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	2b08      	cmp	r3, #8
 800438c:	d112      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b82      	ldr	r3, [pc, #520]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439a:	d10b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05b      	beq.n	8004460 <HAL_RCC_OscConfig+0x108>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d157      	bne.n	8004460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e242      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x74>
 80043be:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x98>
 80043d6:	4b70      	ldr	r3, [pc, #448]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6f      	ldr	r2, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6c      	ldr	r2, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043f0:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fe f95e 	bl	80026d0 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fe f95a 	bl	80026d0 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e207      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xc0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe f94a 	bl	80026d0 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fe f946 	bl	80026d0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1f3      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0xe8>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	2b08      	cmp	r3, #8
 8004484:	d11c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d116      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e1c7      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4937      	ldr	r1, [pc, #220]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	e03a      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c8:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_OscConfig+0x244>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe f8ff 	bl	80026d0 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fe f8fb 	bl	80026d0 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1a8      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4925      	ldr	r1, [pc, #148]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_OscConfig+0x244>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fe f8de 	bl	80026d0 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004518:	f7fe f8da 	bl	80026d0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e187      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d036      	beq.n	80045b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe f8be 	bl	80026d0 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004558:	f7fe f8ba 	bl	80026d0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e167      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x200>
 8004576:	e01b      	b.n	80045b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fe f8a7 	bl	80026d0 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	e00e      	b.n	80045a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004586:	f7fe f8a3 	bl	80026d0 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d907      	bls.n	80045a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e150      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 8004598:	40023800 	.word	0x40023800
 800459c:	42470000 	.word	0x42470000
 80045a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8097 	beq.w	80046ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c2:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	4b7d      	ldr	r3, [pc, #500]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
 80045de:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b77      	ldr	r3, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a73      	ldr	r2, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fe f863 	bl	80026d0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fe f85f 	bl	80026d0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e10c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x2ea>
 8004634:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	e01c      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x30c>
 800464a:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	4b5c      	ldr	r3, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004664:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a54      	ldr	r2, [pc, #336]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fe f824 	bl	80026d0 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe f820 	bl	80026d0 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0cb      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ee      	beq.n	800468c <HAL_RCC_OscConfig+0x334>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fe f80e 	bl	80026d0 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fe f80a 	bl	80026d0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0b5      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e0:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	4a38      	ldr	r2, [pc, #224]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a1 	beq.w	8004838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d05c      	beq.n	80047bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d141      	bne.n	800478e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd ffde 	bl	80026d0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004718:	f7fd ffda 	bl	80026d0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e087      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fd ffb3 	bl	80026d0 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fd ffaf 	bl	80026d0 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e05c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x416>
 800478c:	e054      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd ff9c 	bl	80026d0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd ff98 	bl	80026d0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e045      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x444>
 80047ba:	e03d      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e038      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x4ec>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d028      	beq.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d121      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11a      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800480a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cc      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b68      	ldr	r3, [pc, #416]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90c      	bls.n	8004884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b65      	ldr	r3, [pc, #404]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b8      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	494d      	ldr	r1, [pc, #308]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d044      	beq.n	8004968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e067      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b37      	ldr	r3, [pc, #220]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4934      	ldr	r1, [pc, #208]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004938:	f7fd feca 	bl	80026d0 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fd fec6 	bl	80026d0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d20c      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4916      	ldr	r1, [pc, #88]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ce:	f000 f821 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049d2:	4602      	mov	r2, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	5ccb      	ldrb	r3, [r1, r3]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fd fb8c 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	0800c3e0 	.word	0x0800c3e0
 8004a0c:	200000a8 	.word	0x200000a8
 8004a10:	200000ac 	.word	0x200000ac

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b094      	sub	sp, #80	; 0x50
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a20:	2300      	movs	r3, #0
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	2300      	movs	r3, #0
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2c:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d00d      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x40>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	f200 80e1 	bhi.w	8004c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x34>
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a46:	e0db      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a4c:	e0db      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4e:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a52:	e0d8      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a54:	4b6f      	ldr	r3, [pc, #444]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d063      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	2200      	movs	r2, #0
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	6139      	str	r1, [r7, #16]
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab8:	4659      	mov	r1, fp
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8004acc:	4659      	mov	r1, fp
 8004ace:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae6:	4690      	mov	r8, r2
 8004ae8:	4699      	mov	r9, r3
 8004aea:	4623      	mov	r3, r4
 8004aec:	eb18 0303 	adds.w	r3, r8, r3
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	462b      	mov	r3, r5
 8004af4:	eb49 0303 	adc.w	r3, r9, r3
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b06:	4629      	mov	r1, r5
 8004b08:	024b      	lsls	r3, r1, #9
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b10:	4621      	mov	r1, r4
 8004b12:	024a      	lsls	r2, r1, #9
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b24:	f7fb fbb4 	bl	8000290 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b30:	e058      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	0159      	lsls	r1, r3, #5
 8004b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5e:	0150      	lsls	r0, r2, #5
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4641      	mov	r1, r8
 8004b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b84:	ebb2 040a 	subs.w	r4, r2, sl
 8004b88:	eb63 050b 	sbc.w	r5, r3, fp
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	eb45 0303 	adc.w	r3, r5, r3
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bba:	4629      	mov	r1, r5
 8004bbc:	028b      	lsls	r3, r1, #10
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	028a      	lsls	r2, r1, #10
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	61fa      	str	r2, [r7, #28]
 8004bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd8:	f7fb fb5a 	bl	8000290 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bfe:	e002      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3750      	adds	r7, #80	; 0x50
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	007a1200 	.word	0x007a1200

08004c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	200000a8 	.word	0x200000a8

08004c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c3c:	f7ff fff0 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0a9b      	lsrs	r3, r3, #10
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	0800c3f0 	.word	0x0800c3f0

08004c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c64:	f7ff ffdc 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0b5b      	lsrs	r3, r3, #13
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	; (8004c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0800c3f0 	.word	0x0800c3f0

08004c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	220f      	movs	r2, #15
 8004c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0203 	and.w	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_RCC_GetClockConfig+0x60>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40023c00 	.word	0x40023c00

08004cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d075      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d20:	4b91      	ldr	r3, [pc, #580]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d26:	f7fd fcd3 	bl	80026d0 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d2e:	f7fd fccf 	bl	80026d0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e189      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d40:	4b8a      	ldr	r3, [pc, #552]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	019a      	lsls	r2, r3, #6
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	071b      	lsls	r3, r3, #28
 8004d64:	4981      	ldr	r1, [pc, #516]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d78:	4b7c      	ldr	r3, [pc, #496]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7e:	0f1b      	lsrs	r3, r3, #28
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	431a      	orrs	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	071b      	lsls	r3, r3, #28
 8004d98:	4974      	ldr	r1, [pc, #464]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004da0:	4b72      	ldr	r3, [pc, #456]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da6:	f023 021f 	bic.w	r2, r3, #31
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	496e      	ldr	r1, [pc, #440]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	019a      	lsls	r2, r3, #6
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	071b      	lsls	r3, r3, #28
 8004dd8:	4964      	ldr	r1, [pc, #400]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fd fc73 	bl	80026d0 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dee:	f7fd fc6f 	bl	80026d0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e129      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e00:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d079      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e24:	4b52      	ldr	r3, [pc, #328]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd fc51 	bl	80026d0 <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e32:	f7fd fc4d 	bl	80026d0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e107      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e44:	4b49      	ldr	r3, [pc, #292]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e50:	d0ef      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e5e:	4b43      	ldr	r3, [pc, #268]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	0f1b      	lsrs	r3, r3, #28
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	019a      	lsls	r2, r3, #6
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	493b      	ldr	r1, [pc, #236]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e86:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	4934      	ldr	r1, [pc, #208]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01e      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eac:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	0e1b      	lsrs	r3, r3, #24
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	019a      	lsls	r2, r3, #6
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	071b      	lsls	r3, r3, #28
 8004ecc:	4927      	ldr	r1, [pc, #156]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ed4:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	4922      	ldr	r1, [pc, #136]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eea:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fbee 	bl	80026d0 <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ef8:	f7fd fbea 	bl	80026d0 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0a4      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f16:	d1ef      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 808b 	beq.w	800503c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	4a0f      	ldr	r2, [pc, #60]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6413      	str	r3, [r2, #64]	; 0x40
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4e:	f7fd fbbf 	bl	80026d0 <HAL_GetTick>
 8004f52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f54:	e010      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fd fbbb 	bl	80026d0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d909      	bls.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e075      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f68:	42470068 	.word	0x42470068
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	42470070 	.word	0x42470070
 8004f74:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f78:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0e8      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d02f      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d028      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fac:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fb8:	4a29      	ldr	r2, [pc, #164]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fbe:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d114      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fd fb81 	bl	80026d0 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fd fb7d 	bl	80026d0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e035      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0ee      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005000:	d10d      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	4912      	ldr	r1, [pc, #72]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005018:	4313      	orrs	r3, r2
 800501a:	608b      	str	r3, [r1, #8]
 800501c:	e005      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005024:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005028:	6093      	str	r3, [r2, #8]
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800502c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005036:	490a      	ldr	r1, [pc, #40]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005038:	4313      	orrs	r3, r2
 800503a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005050:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40007000 	.word	0x40007000
 8005060:	40023800 	.word	0x40023800
 8005064:	42470e40 	.word	0x42470e40
 8005068:	424711e0 	.word	0x424711e0

0800506c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e066      	b.n	8005150 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7f5b      	ldrb	r3, [r3, #29]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fdd2 	bl	8001c3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	22ca      	movs	r2, #202	; 0xca
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2253      	movs	r2, #83	; 0x53
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f998 	bl	80053e4 <RTC_EnterInitMode>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d12c      	bne.n	8005118 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6899      	ldr	r1, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68d2      	ldr	r2, [r2, #12]
 80050f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6919      	ldr	r1, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	041a      	lsls	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f99f 	bl	8005452 <RTC_ExitInitMode>
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d113      	bne.n	8005146 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	7f1b      	ldrb	r3, [r3, #28]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_RTC_SetTime+0x1c>
 8005170:	2302      	movs	r3, #2
 8005172:	e087      	b.n	8005284 <HAL_RTC_SetTime+0x12c>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2202      	movs	r2, #2
 800517e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d126      	bne.n	80051d4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2200      	movs	r2, #0
 8005198:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f97c 	bl	800549c <RTC_ByteToBcd2>
 80051a4:	4603      	mov	r3, r0
 80051a6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f975 	bl	800549c <RTC_ByteToBcd2>
 80051b2:	4603      	mov	r3, r0
 80051b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051b6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f96d 	bl	800549c <RTC_ByteToBcd2>
 80051c2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e018      	b.n	8005206 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051f4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80051fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	22ca      	movs	r2, #202	; 0xca
 800520c:	625a      	str	r2, [r3, #36]	; 0x24
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2253      	movs	r2, #83	; 0x53
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f8e4 	bl	80053e4 <RTC_EnterInitMode>
 800521c:	4603      	mov	r3, r0
 800521e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d120      	bne.n	8005268 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005230:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005234:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005244:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6899      	ldr	r1, [r3, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	431a      	orrs	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f8f7 	bl	8005452 <RTC_ExitInitMode>
 8005264:	4603      	mov	r3, r0
 8005266:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	22ff      	movs	r2, #255	; 0xff
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	771a      	strb	r2, [r3, #28]

  return status;
 8005282:	7cfb      	ldrb	r3, [r7, #19]
}
 8005284:	4618      	mov	r0, r3
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd90      	pop	{r4, r7, pc}

0800528c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	7f1b      	ldrb	r3, [r3, #28]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_RTC_SetDate+0x1c>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e071      	b.n	800538c <HAL_RTC_SetDate+0x100>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2202      	movs	r2, #2
 80052b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10e      	bne.n	80052d8 <HAL_RTC_SetDate+0x4c>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	330a      	adds	r3, #10
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11c      	bne.n	8005318 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	78db      	ldrb	r3, [r3, #3]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f8da 	bl	800549c <RTC_ByteToBcd2>
 80052e8:	4603      	mov	r3, r0
 80052ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f8d3 	bl	800549c <RTC_ByteToBcd2>
 80052f6:	4603      	mov	r3, r0
 80052f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	789b      	ldrb	r3, [r3, #2]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f8cb 	bl	800549c <RTC_ByteToBcd2>
 8005306:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005308:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e00e      	b.n	8005336 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005324:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800532a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	22ca      	movs	r2, #202	; 0xca
 800533c:	625a      	str	r2, [r3, #36]	; 0x24
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2253      	movs	r2, #83	; 0x53
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f84c 	bl	80053e4 <RTC_EnterInitMode>
 800534c:	4603      	mov	r3, r0
 800534e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005364:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f873 	bl	8005452 <RTC_ExitInitMode>
 800536c:	4603      	mov	r3, r0
 800536e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	771a      	strb	r2, [r3, #28]

  return status;
 800538a:	7cfb      	ldrb	r3, [r7, #19]
}
 800538c:	4618      	mov	r0, r3
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}

08005394 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053b0:	f7fd f98e 	bl	80026d0 <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053b6:	e009      	b.n	80053cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053b8:	f7fd f98a 	bl	80026d0 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053c6:	d901      	bls.n	80053cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e007      	b.n	80053dc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ee      	beq.n	80053b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d122      	bne.n	8005448 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005410:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005412:	f7fd f95d 	bl	80026d0 <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005418:	e00c      	b.n	8005434 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800541a:	f7fd f959 	bl	80026d0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005428:	d904      	bls.n	8005434 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2204      	movs	r2, #4
 800542e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <RTC_EnterInitMode+0x64>
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d1e8      	bne.n	800541a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800546c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff ff89 	bl	8005394 <HAL_RTC_WaitForSynchro>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2204      	movs	r2, #4
 800548c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80054aa:	e005      	b.n	80054b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	3301      	adds	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	3b0a      	subs	r3, #10
 80054b6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	2b09      	cmp	r3, #9
 80054bc:	d8f6      	bhi.n	80054ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	b2db      	uxtb	r3, r3
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e041      	b.n	800556c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fc fc3d 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f000 ffd3 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d001      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e04e      	b.n	800562a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a23      	ldr	r2, [pc, #140]	; (8005638 <HAL_TIM_Base_Start_IT+0xc4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d022      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d01d      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1f      	ldr	r2, [pc, #124]	; (800563c <HAL_TIM_Base_Start_IT+0xc8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d018      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <HAL_TIM_Base_Start_IT+0xcc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d013      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <HAL_TIM_Base_Start_IT+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00e      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <HAL_TIM_Base_Start_IT+0xd4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_TIM_Base_Start_IT+0xd8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_TIM_Base_Start_IT+0xdc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d111      	bne.n	8005618 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b06      	cmp	r3, #6
 8005604:	d010      	beq.n	8005628 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	e007      	b.n	8005628 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40010400 	.word	0x40010400
 800564c:	40014000 	.word	0x40014000
 8005650:	40001800 	.word	0x40001800

08005654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e041      	b.n	80056ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fb08 	bl	8001c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 ff14 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <HAL_TIM_PWM_Start+0x24>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e022      	b.n	800575e <HAL_TIM_PWM_Start+0x6a>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d109      	bne.n	8005732 <HAL_TIM_PWM_Start+0x3e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b01      	cmp	r3, #1
 8005728:	bf14      	ite	ne
 800572a:	2301      	movne	r3, #1
 800572c:	2300      	moveq	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	e015      	b.n	800575e <HAL_TIM_PWM_Start+0x6a>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d109      	bne.n	800574c <HAL_TIM_PWM_Start+0x58>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e008      	b.n	800575e <HAL_TIM_PWM_Start+0x6a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e07c      	b.n	8005860 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <HAL_TIM_PWM_Start+0x82>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005774:	e013      	b.n	800579e <HAL_TIM_PWM_Start+0xaa>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0x92>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005784:	e00b      	b.n	800579e <HAL_TIM_PWM_Start+0xaa>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005794:	e003      	b.n	800579e <HAL_TIM_PWM_Start+0xaa>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2201      	movs	r2, #1
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fa9e 	bl	8006ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2d      	ldr	r2, [pc, #180]	; (8005868 <HAL_TIM_PWM_Start+0x174>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIM_PWM_Start+0xcc>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	; (800586c <HAL_TIM_PWM_Start+0x178>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_PWM_Start+0xd0>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_TIM_PWM_Start+0xd2>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a22      	ldr	r2, [pc, #136]	; (8005868 <HAL_TIM_PWM_Start+0x174>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ec:	d01d      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <HAL_TIM_PWM_Start+0x17c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_TIM_PWM_Start+0x180>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_TIM_PWM_Start+0x184>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <HAL_TIM_PWM_Start+0x178>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <HAL_TIM_PWM_Start+0x188>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIM_PWM_Start+0x136>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <HAL_TIM_PWM_Start+0x18c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d111      	bne.n	800584e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b06      	cmp	r3, #6
 800583a:	d010      	beq.n	800585e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584c:	e007      	b.n	800585e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40010000 	.word	0x40010000
 800586c:	40010400 	.word	0x40010400
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40001800 	.word	0x40001800

08005884 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_TIM_PWM_Start_IT+0x28>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e022      	b.n	80058f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d109      	bne.n	80058c6 <HAL_TIM_PWM_Start_IT+0x42>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e015      	b.n	80058f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d109      	bne.n	80058e0 <HAL_TIM_PWM_Start_IT+0x5c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e008      	b.n	80058f2 <HAL_TIM_PWM_Start_IT+0x6e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e0c7      	b.n	8005a8a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start_IT+0x86>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005908:	e013      	b.n	8005932 <HAL_TIM_PWM_Start_IT+0xae>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start_IT+0x96>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005918:	e00b      	b.n	8005932 <HAL_TIM_PWM_Start_IT+0xae>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Start_IT+0xa6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005928:	e003      	b.n	8005932 <HAL_TIM_PWM_Start_IT+0xae>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b0c      	cmp	r3, #12
 8005936:	d841      	bhi.n	80059bc <HAL_TIM_PWM_Start_IT+0x138>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <HAL_TIM_PWM_Start_IT+0xbc>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005975 	.word	0x08005975
 8005944:	080059bd 	.word	0x080059bd
 8005948:	080059bd 	.word	0x080059bd
 800594c:	080059bd 	.word	0x080059bd
 8005950:	08005987 	.word	0x08005987
 8005954:	080059bd 	.word	0x080059bd
 8005958:	080059bd 	.word	0x080059bd
 800595c:	080059bd 	.word	0x080059bd
 8005960:	08005999 	.word	0x08005999
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059bd 	.word	0x080059bd
 800596c:	080059bd 	.word	0x080059bd
 8005970:	080059ab 	.word	0x080059ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0202 	orr.w	r2, r2, #2
 8005982:	60da      	str	r2, [r3, #12]
      break;
 8005984:	e01d      	b.n	80059c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0204 	orr.w	r2, r2, #4
 8005994:	60da      	str	r2, [r3, #12]
      break;
 8005996:	e014      	b.n	80059c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0208 	orr.w	r2, r2, #8
 80059a6:	60da      	str	r2, [r3, #12]
      break;
 80059a8:	e00b      	b.n	80059c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0210 	orr.w	r2, r2, #16
 80059b8:	60da      	str	r2, [r3, #12]
      break;
 80059ba:	e002      	b.n	80059c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d15f      	bne.n	8005a88 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 f989 	bl	8006ce8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2e      	ldr	r2, [pc, #184]	; (8005a94 <HAL_TIM_PWM_Start_IT+0x210>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIM_PWM_Start_IT+0x166>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <HAL_TIM_PWM_Start_IT+0x214>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Start_IT+0x16a>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_TIM_PWM_Start_IT+0x16c>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <HAL_TIM_PWM_Start_IT+0x210>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d01d      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_TIM_PWM_Start_IT+0x218>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <HAL_TIM_PWM_Start_IT+0x220>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <HAL_TIM_PWM_Start_IT+0x214>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <HAL_TIM_PWM_Start_IT+0x224>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_TIM_PWM_Start_IT+0x228>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d111      	bne.n	8005a78 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d010      	beq.n	8005a88 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	e007      	b.n	8005a88 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40010400 	.word	0x40010400
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40001800 	.word	0x40001800

08005ab0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e041      	b.n	8005b46 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc f900 	bl	8001cdc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 fce6 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_IC_Start_IT+0x1e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e013      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x46>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_IC_Start_IT+0x2e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e00b      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x46>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_IC_Start_IT+0x3e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	e003      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x46>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <HAL_TIM_IC_Start_IT+0x58>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e013      	b.n	8005bd0 <HAL_TIM_IC_Start_IT+0x80>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d104      	bne.n	8005bb8 <HAL_TIM_IC_Start_IT+0x68>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e00b      	b.n	8005bd0 <HAL_TIM_IC_Start_IT+0x80>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d104      	bne.n	8005bc8 <HAL_TIM_IC_Start_IT+0x78>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e003      	b.n	8005bd0 <HAL_TIM_IC_Start_IT+0x80>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bd8:	7b7b      	ldrb	r3, [r7, #13]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e0cc      	b.n	8005d7c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_IC_Start_IT+0xa2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	e013      	b.n	8005c1a <HAL_TIM_IC_Start_IT+0xca>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_IC_Start_IT+0xb2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c00:	e00b      	b.n	8005c1a <HAL_TIM_IC_Start_IT+0xca>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_IC_Start_IT+0xc2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	e003      	b.n	8005c1a <HAL_TIM_IC_Start_IT+0xca>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_IC_Start_IT+0xda>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c28:	e013      	b.n	8005c52 <HAL_TIM_IC_Start_IT+0x102>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_IC_Start_IT+0xea>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	e00b      	b.n	8005c52 <HAL_TIM_IC_Start_IT+0x102>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_IC_Start_IT+0xfa>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c48:	e003      	b.n	8005c52 <HAL_TIM_IC_Start_IT+0x102>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d841      	bhi.n	8005cdc <HAL_TIM_IC_Start_IT+0x18c>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <HAL_TIM_IC_Start_IT+0x110>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005cdd 	.word	0x08005cdd
 8005c68:	08005cdd 	.word	0x08005cdd
 8005c6c:	08005cdd 	.word	0x08005cdd
 8005c70:	08005ca7 	.word	0x08005ca7
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	08005cdd 	.word	0x08005cdd
 8005c7c:	08005cdd 	.word	0x08005cdd
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005cdd 	.word	0x08005cdd
 8005c88:	08005cdd 	.word	0x08005cdd
 8005c8c:	08005cdd 	.word	0x08005cdd
 8005c90:	08005ccb 	.word	0x08005ccb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0202 	orr.w	r2, r2, #2
 8005ca2:	60da      	str	r2, [r3, #12]
      break;
 8005ca4:	e01d      	b.n	8005ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0204 	orr.w	r2, r2, #4
 8005cb4:	60da      	str	r2, [r3, #12]
      break;
 8005cb6:	e014      	b.n	8005ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0208 	orr.w	r2, r2, #8
 8005cc6:	60da      	str	r2, [r3, #12]
      break;
 8005cc8:	e00b      	b.n	8005ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0210 	orr.w	r2, r2, #16
 8005cd8:	60da      	str	r2, [r3, #12]
      break;
 8005cda:	e002      	b.n	8005ce2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d148      	bne.n	8005d7a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fff9 	bl	8006ce8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <HAL_TIM_IC_Start_IT+0x234>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d022      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d08:	d01d      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <HAL_TIM_IC_Start_IT+0x238>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d018      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <HAL_TIM_IC_Start_IT+0x23c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_TIM_IC_Start_IT+0x240>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00e      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <HAL_TIM_IC_Start_IT+0x244>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d009      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <HAL_TIM_IC_Start_IT+0x248>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d004      	beq.n	8005d46 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a16      	ldr	r2, [pc, #88]	; (8005d9c <HAL_TIM_IC_Start_IT+0x24c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d111      	bne.n	8005d6a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b06      	cmp	r3, #6
 8005d56:	d010      	beq.n	8005d7a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d68:	e007      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40000800 	.word	0x40000800
 8005d90:	40000c00 	.word	0x40000c00
 8005d94:	40010400 	.word	0x40010400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40001800 	.word	0x40001800

08005da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0202 	mvn.w	r2, #2
 8005dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fc fbde 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fb4a 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb51 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0204 	mvn.w	r2, #4
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc fbb4 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb20 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fb27 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0208 	mvn.w	r2, #8
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fc fb8a 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 faf6 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fafd 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b10      	cmp	r3, #16
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0210 	mvn.w	r2, #16
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fc fb60 	bl	80025a4 <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 facc 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fad3 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0201 	mvn.w	r2, #1
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fb fb0a 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d10e      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d107      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 ff78 	bl	8006e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d10e      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d107      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa98 	bl	80064ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0220 	mvn.w	r2, #32
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 ff42 	bl	8006e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e088      	b.n	80060e0 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f000 fcb8 	bl	8006960 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 020c 	bic.w	r2, r2, #12
 8005ffe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	619a      	str	r2, [r3, #24]
 8006012:	e060      	b.n	80060d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b04      	cmp	r3, #4
 8006018:	d11c      	bne.n	8006054 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f000 fd3c 	bl	8006aa6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800603c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6999      	ldr	r1, [r3, #24]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	021a      	lsls	r2, r3, #8
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	619a      	str	r2, [r3, #24]
 8006052:	e040      	b.n	80060d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b08      	cmp	r3, #8
 8006058:	d11b      	bne.n	8006092 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f000 fd89 	bl	8006b80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 020c 	bic.w	r2, r2, #12
 800607c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
 8006090:	e021      	b.n	80060d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d11c      	bne.n	80060d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f000 fda6 	bl	8006bf8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69d9      	ldr	r1, [r3, #28]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	61da      	str	r2, [r3, #28]
 80060d0:	e001      	b.n	80060d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006102:	2302      	movs	r3, #2
 8006104:	e0ae      	b.n	8006264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b0c      	cmp	r3, #12
 8006112:	f200 809f 	bhi.w	8006254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006151 	.word	0x08006151
 8006120:	08006255 	.word	0x08006255
 8006124:	08006255 	.word	0x08006255
 8006128:	08006255 	.word	0x08006255
 800612c:	08006191 	.word	0x08006191
 8006130:	08006255 	.word	0x08006255
 8006134:	08006255 	.word	0x08006255
 8006138:	08006255 	.word	0x08006255
 800613c:	080061d3 	.word	0x080061d3
 8006140:	08006255 	.word	0x08006255
 8006144:	08006255 	.word	0x08006255
 8006148:	08006255 	.word	0x08006255
 800614c:	08006213 	.word	0x08006213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fa52 	bl	8006600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0208 	orr.w	r2, r2, #8
 800616a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0204 	bic.w	r2, r2, #4
 800617a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	619a      	str	r2, [r3, #24]
      break;
 800618e:	e064      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 faa2 	bl	80066e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	021a      	lsls	r2, r3, #8
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	619a      	str	r2, [r3, #24]
      break;
 80061d0:	e043      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 faf7 	bl	80067cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0208 	orr.w	r2, r2, #8
 80061ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0204 	bic.w	r2, r2, #4
 80061fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	61da      	str	r2, [r3, #28]
      break;
 8006210:	e023      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fb4b 	bl	80068b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	021a      	lsls	r2, r3, #8
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	61da      	str	r2, [r3, #28]
      break;
 8006252:	e002      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006262:	7dfb      	ldrb	r3, [r7, #23]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIM_ConfigClockSource+0x1c>
 8006284:	2302      	movs	r3, #2
 8006286:	e0b4      	b.n	80063f2 <HAL_TIM_ConfigClockSource+0x186>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c0:	d03e      	beq.n	8006340 <HAL_TIM_ConfigClockSource+0xd4>
 80062c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c6:	f200 8087 	bhi.w	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ce:	f000 8086 	beq.w	80063de <HAL_TIM_ConfigClockSource+0x172>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	d87f      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b70      	cmp	r3, #112	; 0x70
 80062da:	d01a      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0xa6>
 80062dc:	2b70      	cmp	r3, #112	; 0x70
 80062de:	d87b      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b60      	cmp	r3, #96	; 0x60
 80062e2:	d050      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x11a>
 80062e4:	2b60      	cmp	r3, #96	; 0x60
 80062e6:	d877      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b50      	cmp	r3, #80	; 0x50
 80062ea:	d03c      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0xfa>
 80062ec:	2b50      	cmp	r3, #80	; 0x50
 80062ee:	d873      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d058      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x13a>
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d86f      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b30      	cmp	r3, #48	; 0x30
 80062fa:	d064      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d86b      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d060      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d867      	bhi.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d05c      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	2b10      	cmp	r3, #16
 800630e:	d05a      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	e062      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6899      	ldr	r1, [r3, #8]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f000 fcc1 	bl	8006ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	609a      	str	r2, [r3, #8]
      break;
 800633e:	e04f      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	6899      	ldr	r1, [r3, #8]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f000 fcaa 	bl	8006ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006362:	609a      	str	r2, [r3, #8]
      break;
 8006364:	e03c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	461a      	mov	r2, r3
 8006374:	f000 fb68 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2150      	movs	r1, #80	; 0x50
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fc77 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 8006384:	e02c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	f000 fbc4 	bl	8006b20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2160      	movs	r1, #96	; 0x60
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fc67 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063a4:	e01c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fb48 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2140      	movs	r1, #64	; 0x40
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc57 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063c4:	e00c      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f000 fc4e 	bl	8006c72 <TIM_ITRx_SetConfig>
      break;
 80063d6:	e003      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
      break;
 80063dc:	e000      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b0c      	cmp	r3, #12
 800640e:	d831      	bhi.n	8006474 <HAL_TIM_ReadCapturedValue+0x78>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800644d 	.word	0x0800644d
 800641c:	08006475 	.word	0x08006475
 8006420:	08006475 	.word	0x08006475
 8006424:	08006475 	.word	0x08006475
 8006428:	08006457 	.word	0x08006457
 800642c:	08006475 	.word	0x08006475
 8006430:	08006475 	.word	0x08006475
 8006434:	08006475 	.word	0x08006475
 8006438:	08006461 	.word	0x08006461
 800643c:	08006475 	.word	0x08006475
 8006440:	08006475 	.word	0x08006475
 8006444:	08006475 	.word	0x08006475
 8006448:	0800646b 	.word	0x0800646b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	60fb      	str	r3, [r7, #12]

      break;
 8006454:	e00f      	b.n	8006476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	60fb      	str	r3, [r7, #12]

      break;
 800645e:	e00a      	b.n	8006476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	60fb      	str	r3, [r7, #12]

      break;
 8006468:	e005      	b.n	8006476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	60fb      	str	r3, [r7, #12]

      break;
 8006472:	e000      	b.n	8006476 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006474:	bf00      	nop
  }

  return tmpreg;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d00f      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3d      	ldr	r2, [pc, #244]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3a      	ldr	r2, [pc, #232]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2f      	ldr	r2, [pc, #188]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d027      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d023      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d017      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <TIM_Base_SetConfig+0x128>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_Base_SetConfig+0x130>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <TIM_Base_SetConfig+0x134>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <TIM_Base_SetConfig+0x138>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <TIM_Base_SetConfig+0x13c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d108      	bne.n	8006584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	40001800 	.word	0x40001800
 80065f8:	40001c00 	.word	0x40001c00
 80065fc:	40002000 	.word	0x40002000

08006600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 0302 	bic.w	r3, r3, #2
 8006648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <TIM_OC1_SetConfig+0xd8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC1_SetConfig+0x64>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1f      	ldr	r2, [pc, #124]	; (80066dc <TIM_OC1_SetConfig+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d10c      	bne.n	800667e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0308 	bic.w	r3, r3, #8
 800666a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0304 	bic.w	r3, r3, #4
 800667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <TIM_OC1_SetConfig+0xd8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC1_SetConfig+0x8e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a14      	ldr	r2, [pc, #80]	; (80066dc <TIM_OC1_SetConfig+0xdc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d111      	bne.n	80066b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40010400 	.word	0x40010400

080066e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0210 	bic.w	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0320 	bic.w	r3, r3, #32
 800672a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <TIM_OC2_SetConfig+0xe4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC2_SetConfig+0x68>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <TIM_OC2_SetConfig+0xe8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d10d      	bne.n	8006764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800674e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <TIM_OC2_SetConfig+0xe4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC2_SetConfig+0x94>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <TIM_OC2_SetConfig+0xe8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d113      	bne.n	800679c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800677a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40010400 	.word	0x40010400

080067cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a21      	ldr	r2, [pc, #132]	; (80068ac <TIM_OC3_SetConfig+0xe0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC3_SetConfig+0x66>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <TIM_OC3_SetConfig+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d10d      	bne.n	800684e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800684c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a16      	ldr	r2, [pc, #88]	; (80068ac <TIM_OC3_SetConfig+0xe0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_OC3_SetConfig+0x92>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <TIM_OC3_SetConfig+0xe4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d113      	bne.n	8006886 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800686c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40010400 	.word	0x40010400

080068b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	031b      	lsls	r3, r3, #12
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a12      	ldr	r2, [pc, #72]	; (8006958 <TIM_OC4_SetConfig+0xa4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC4_SetConfig+0x68>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a11      	ldr	r2, [pc, #68]	; (800695c <TIM_OC4_SetConfig+0xa8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d109      	bne.n	8006930 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	019b      	lsls	r3, r3, #6
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f023 0201 	bic.w	r2, r3, #1
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <TIM_TI1_SetConfig+0xcc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01b      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006994:	d017      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <TIM_TI1_SetConfig+0xd0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <TIM_TI1_SetConfig+0xd4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00f      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <TIM_TI1_SetConfig+0xd8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00b      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <TIM_TI1_SetConfig+0xdc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <TIM_TI1_SetConfig+0xe0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_TI1_SetConfig+0x66>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <TIM_TI1_SetConfig+0xe4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d101      	bne.n	80069ca <TIM_TI1_SetConfig+0x6a>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <TIM_TI1_SetConfig+0x6c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e003      	b.n	80069ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f043 0301 	orr.w	r3, r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f023 030a 	bic.w	r3, r3, #10
 8006a04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f003 030a 	and.w	r3, r3, #10
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40001800 	.word	0x40001800

08006a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 030a 	bic.w	r3, r3, #10
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0210 	bic.w	r2, r3, #16
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	031b      	lsls	r3, r3, #12
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f023 0210 	bic.w	r2, r3, #16
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	031b      	lsls	r3, r3, #12
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	621a      	str	r2, [r3, #32]
}
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 0303 	bic.w	r3, r3, #3
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	031b      	lsls	r3, r3, #12
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	031b      	lsls	r3, r3, #12
 8006c50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f043 0307 	orr.w	r3, r3, #7
 8006c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	609a      	str	r2, [r3, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	021a      	lsls	r2, r3, #8
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	609a      	str	r2, [r3, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1a      	ldr	r2, [r3, #32]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	401a      	ands	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e05a      	b.n	8006e02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d98:	d01d      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1b      	ldr	r2, [pc, #108]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d10c      	bne.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40001800 	.word	0x40001800

08006e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e03f      	b.n	8006ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fb f85e 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2224      	movs	r2, #36	; 0x24
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fddf 	bl	8007a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b08a      	sub	sp, #40	; 0x28
 8006ef2:	af02      	add	r7, sp, #8
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d17c      	bne.n	8007008 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_Transmit+0x2c>
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e075      	b.n	800700a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Transmit+0x3e>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e06e      	b.n	800700a <HAL_UART_Transmit+0x11c>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2221      	movs	r2, #33	; 0x21
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f42:	f7fb fbc5 	bl	80026d0 <HAL_GetTick>
 8006f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	88fa      	ldrh	r2, [r7, #6]
 8006f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5c:	d108      	bne.n	8006f70 <HAL_UART_Transmit+0x82>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	e003      	b.n	8006f78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f80:	e02a      	b.n	8006fd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2180      	movs	r1, #128	; 0x80
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fb1f 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e036      	b.n	800700a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	e007      	b.n	8006fca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1cf      	bne.n	8006f82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2140      	movs	r1, #64	; 0x40
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 faef 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4613      	mov	r3, r2
 800701e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b20      	cmp	r3, #32
 800702a:	d11d      	bne.n	8007068 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_UART_Receive_IT+0x26>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e016      	b.n	800706a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_UART_Receive_IT+0x38>
 8007046:	2302      	movs	r3, #2
 8007048:	e00f      	b.n	800706a <HAL_UART_Receive_IT+0x58>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	461a      	mov	r2, r3
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fb24 	bl	80076ac <UART_Start_Receive_IT>
 8007064:	4603      	mov	r3, r0
 8007066:	e000      	b.n	800706a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b0ba      	sub	sp, #232	; 0xe8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800709a:	2300      	movs	r3, #0
 800709c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10f      	bne.n	80070da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_UART_IRQHandler+0x66>
 80070c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fc07 	bl	80078e6 <UART_Receive_IT>
      return;
 80070d8:	e256      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80de 	beq.w	80072a0 <HAL_UART_IRQHandler+0x22c>
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80d1 	beq.w	80072a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_UART_IRQHandler+0xae>
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f043 0201 	orr.w	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
 800712e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f043 0202 	orr.w	r2, r3, #2
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <HAL_UART_IRQHandler+0xf6>
 8007152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0204 	orr.w	r2, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d011      	beq.n	800719a <HAL_UART_IRQHandler+0x126>
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d105      	bne.n	800718e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f043 0208 	orr.w	r2, r3, #8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 81ed 	beq.w	800757e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_UART_IRQHandler+0x14e>
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fb92 	bl	80078e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b40      	cmp	r3, #64	; 0x40
 80071ce:	bf0c      	ite	eq
 80071d0:	2301      	moveq	r3, #1
 80071d2:	2300      	movne	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <HAL_UART_IRQHandler+0x17a>
 80071e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d04f      	beq.n	800728e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa9a 	bl	8007728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d141      	bne.n	8007286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3314      	adds	r3, #20
 8007208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800721c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800722e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800723a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d9      	bne.n	8007202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	4a7d      	ldr	r2, [pc, #500]	; (8007450 <HAL_UART_IRQHandler+0x3dc>)
 800725c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc f842 	bl	80032ec <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00e      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f990 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00a      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f98c 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e006      	b.n	800729c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f988 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800729a:	e170      	b.n	800757e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	bf00      	nop
    return;
 800729e:	e16e      	b.n	800757e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f040 814a 	bne.w	800753e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8143 	beq.w	800753e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 813c 	beq.w	800753e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b40      	cmp	r3, #64	; 0x40
 80072e8:	f040 80b4 	bne.w	8007454 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8140 	beq.w	8007582 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730a:	429a      	cmp	r2, r3
 800730c:	f080 8139 	bcs.w	8007582 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007322:	f000 8088 	beq.w	8007436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800733c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800735e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800736a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1d9      	bne.n	8007326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3314      	adds	r3, #20
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800739a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800739e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e1      	bne.n	8007372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3314      	adds	r3, #20
 80073ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e3      	bne.n	80073ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007418:	65ba      	str	r2, [r7, #88]	; 0x58
 800741a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800741e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e3      	bne.n	80073f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	4618      	mov	r0, r3
 8007432:	f7fb feeb 	bl	800320c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743e:	b29b      	uxth	r3, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	b29b      	uxth	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8b6 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800744c:	e099      	b.n	8007582 <HAL_UART_IRQHandler+0x50e>
 800744e:	bf00      	nop
 8007450:	080077ef 	.word	0x080077ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800745c:	b29b      	uxth	r3, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 808b 	beq.w	8007586 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8086 	beq.w	8007586 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800749e:	647a      	str	r2, [r7, #68]	; 0x44
 80074a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e3      	bne.n	800747a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3314      	adds	r3, #20
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	623b      	str	r3, [r7, #32]
   return(result);
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3314      	adds	r3, #20
 80074d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074d6:	633a      	str	r2, [r7, #48]	; 0x30
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e3      	bne.n	80074b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60fb      	str	r3, [r7, #12]
   return(result);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800751c:	61fa      	str	r2, [r7, #28]
 800751e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	617b      	str	r3, [r7, #20]
   return(result);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e3      	bne.n	80074f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f83e 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800753c:	e023      	b.n	8007586 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <HAL_UART_IRQHandler+0x4ea>
 800754a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f95d 	bl	8007816 <UART_Transmit_IT>
    return;
 800755c:	e014      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00e      	beq.n	8007588 <HAL_UART_IRQHandler+0x514>
 800756a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f99d 	bl	80078b6 <UART_EndTransmit_IT>
    return;
 800757c:	e004      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
    return;
 800757e:	bf00      	nop
 8007580:	e002      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
      return;
 8007582:	bf00      	nop
 8007584:	e000      	b.n	8007588 <HAL_UART_IRQHandler+0x514>
      return;
 8007586:	bf00      	nop
  }
}
 8007588:	37e8      	adds	r7, #232	; 0xe8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop

08007590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b090      	sub	sp, #64	; 0x40
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e0:	e050      	b.n	8007684 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d04c      	beq.n	8007684 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d007      	beq.n	8007600 <UART_WaitOnFlagUntilTimeout+0x30>
 80075f0:	f7fb f86e 	bl	80026d0 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d241      	bcs.n	8007684 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	330c      	adds	r3, #12
 800761e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007620:	637a      	str	r2, [r7, #52]	; 0x34
 8007622:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3314      	adds	r3, #20
 800763a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	613b      	str	r3, [r7, #16]
   return(result);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3314      	adds	r3, #20
 8007652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007654:	623a      	str	r2, [r7, #32]
 8007656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	69f9      	ldr	r1, [r7, #28]
 800765a:	6a3a      	ldr	r2, [r7, #32]
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	61bb      	str	r3, [r7, #24]
   return(result);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e5      	bne.n	8007634 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e00f      	b.n	80076a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4013      	ands	r3, r2
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	429a      	cmp	r2, r3
 8007692:	bf0c      	ite	eq
 8007694:	2301      	moveq	r3, #1
 8007696:	2300      	movne	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d09f      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3740      	adds	r7, #64	; 0x40
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2222      	movs	r2, #34	; 0x22
 80076d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0220 	orr.w	r2, r2, #32
 8007718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b095      	sub	sp, #84	; 0x54
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	61fb      	str	r3, [r7, #28]
   return(result);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	64bb      	str	r3, [r7, #72]	; 0x48
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	2b01      	cmp	r3, #1
 800779e:	d119      	bne.n	80077d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f023 0310 	bic.w	r3, r3, #16
 80077b6:	647b      	str	r3, [r7, #68]	; 0x44
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077c0:	61ba      	str	r2, [r7, #24]
 80077c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6979      	ldr	r1, [r7, #20]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	613b      	str	r3, [r7, #16]
   return(result);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e5      	bne.n	80077a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077e2:	bf00      	nop
 80077e4:	3754      	adds	r7, #84	; 0x54
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff fecb 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b21      	cmp	r3, #33	; 0x21
 8007828:	d13e      	bne.n	80078a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007832:	d114      	bne.n	800785e <UART_Transmit_IT+0x48>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d110      	bne.n	800785e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007850:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	621a      	str	r2, [r3, #32]
 800785c:	e008      	b.n	8007870 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	1c59      	adds	r1, r3, #1
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6211      	str	r1, [r2, #32]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4619      	mov	r1, r3
 800787e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10f      	bne.n	80078a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fe5a 	bl	8007590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08c      	sub	sp, #48	; 0x30
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b22      	cmp	r3, #34	; 0x22
 80078f8:	f040 80ab 	bne.w	8007a52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007904:	d117      	bne.n	8007936 <UART_Receive_IT+0x50>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d113      	bne.n	8007936 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007924:	b29a      	uxth	r2, r3
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	629a      	str	r2, [r3, #40]	; 0x28
 8007934:	e026      	b.n	8007984 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007948:	d007      	beq.n	800795a <UART_Receive_IT+0x74>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <UART_Receive_IT+0x82>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e008      	b.n	800797a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007974:	b2da      	uxtb	r2, r3
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007994:	2b00      	cmp	r3, #0
 8007996:	d15a      	bne.n	8007a4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0220 	bic.w	r2, r2, #32
 80079a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d135      	bne.n	8007a44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	613b      	str	r3, [r7, #16]
   return(result);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f023 0310 	bic.w	r3, r3, #16
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	623a      	str	r2, [r7, #32]
 8007a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	69f9      	ldr	r1, [r7, #28]
 8007a04:	6a3a      	ldr	r2, [r7, #32]
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e5      	bne.n	80079de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d10a      	bne.n	8007a36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fdbb 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
 8007a42:	e002      	b.n	8007a4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7fa fd2b 	bl	80024a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e002      	b.n	8007a54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e000      	b.n	8007a54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3730      	adds	r7, #48	; 0x30
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a60:	b0c0      	sub	sp, #256	; 0x100
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a78:	68d9      	ldr	r1, [r3, #12]
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	ea40 0301 	orr.w	r3, r0, r1
 8007a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ab4:	f021 010c 	bic.w	r1, r1, #12
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad6:	6999      	ldr	r1, [r3, #24]
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	ea40 0301 	orr.w	r3, r0, r1
 8007ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b8f      	ldr	r3, [pc, #572]	; (8007d28 <UART_SetConfig+0x2cc>)
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d005      	beq.n	8007afc <UART_SetConfig+0xa0>
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b8d      	ldr	r3, [pc, #564]	; (8007d2c <UART_SetConfig+0x2d0>)
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d104      	bne.n	8007b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007afc:	f7fd f8b0 	bl	8004c60 <HAL_RCC_GetPCLK2Freq>
 8007b00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b04:	e003      	b.n	8007b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b06:	f7fd f897 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8007b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b18:	f040 810c 	bne.w	8007d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	1891      	adds	r1, r2, r2
 8007b34:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b36:	415b      	adcs	r3, r3
 8007b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b3e:	4621      	mov	r1, r4
 8007b40:	eb12 0801 	adds.w	r8, r2, r1
 8007b44:	4629      	mov	r1, r5
 8007b46:	eb43 0901 	adc.w	r9, r3, r1
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b5e:	4690      	mov	r8, r2
 8007b60:	4699      	mov	r9, r3
 8007b62:	4623      	mov	r3, r4
 8007b64:	eb18 0303 	adds.w	r3, r8, r3
 8007b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	eb49 0303 	adc.w	r3, r9, r3
 8007b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	18db      	adds	r3, r3, r3
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b90:	4613      	mov	r3, r2
 8007b92:	eb42 0303 	adc.w	r3, r2, r3
 8007b96:	657b      	str	r3, [r7, #84]	; 0x54
 8007b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ba0:	f7f8 fb76 	bl	8000290 <__aeabi_uldivmod>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4b61      	ldr	r3, [pc, #388]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007baa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	011c      	lsls	r4, r3, #4
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	1891      	adds	r1, r2, r2
 8007bca:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bcc:	415b      	adcs	r3, r3
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bda:	4649      	mov	r1, r9
 8007bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bf4:	4692      	mov	sl, r2
 8007bf6:	469b      	mov	fp, r3
 8007bf8:	4643      	mov	r3, r8
 8007bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8007bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c02:	464b      	mov	r3, r9
 8007c04:	eb4b 0303 	adc.w	r3, fp, r3
 8007c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c20:	460b      	mov	r3, r1
 8007c22:	18db      	adds	r3, r3, r3
 8007c24:	643b      	str	r3, [r7, #64]	; 0x40
 8007c26:	4613      	mov	r3, r2
 8007c28:	eb42 0303 	adc.w	r3, r2, r3
 8007c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c36:	f7f8 fb2b 	bl	8000290 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007c42:	fba3 2301 	umull	r2, r3, r3, r1
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	2264      	movs	r2, #100	; 0x64
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	1acb      	subs	r3, r1, r3
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c56:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007c58:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c64:	441c      	add	r4, r3
 8007c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	1891      	adds	r1, r2, r2
 8007c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c80:	415b      	adcs	r3, r3
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c88:	4641      	mov	r1, r8
 8007c8a:	1851      	adds	r1, r2, r1
 8007c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c8e:	4649      	mov	r1, r9
 8007c90:	414b      	adcs	r3, r1
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	00cb      	lsls	r3, r1, #3
 8007ca4:	4651      	mov	r1, sl
 8007ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007caa:	4651      	mov	r1, sl
 8007cac:	00ca      	lsls	r2, r1, #3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	eb42 0303 	adc.w	r3, r2, r3
 8007cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cdc:	460b      	mov	r3, r1
 8007cde:	18db      	adds	r3, r3, r3
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cf2:	f7f8 facd 	bl	8000290 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	2164      	movs	r1, #100	; 0x64
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	3332      	adds	r3, #50	; 0x32
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f003 0207 	and.w	r2, r3, #7
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4422      	add	r2, r4
 8007d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d24:	e105      	b.n	8007f32 <UART_SetConfig+0x4d6>
 8007d26:	bf00      	nop
 8007d28:	40011000 	.word	0x40011000
 8007d2c:	40011400 	.word	0x40011400
 8007d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d46:	4642      	mov	r2, r8
 8007d48:	464b      	mov	r3, r9
 8007d4a:	1891      	adds	r1, r2, r2
 8007d4c:	6239      	str	r1, [r7, #32]
 8007d4e:	415b      	adcs	r3, r3
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
 8007d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d56:	4641      	mov	r1, r8
 8007d58:	1854      	adds	r4, r2, r1
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	eb43 0501 	adc.w	r5, r3, r1
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	00eb      	lsls	r3, r5, #3
 8007d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d6e:	00e2      	lsls	r2, r4, #3
 8007d70:	4614      	mov	r4, r2
 8007d72:	461d      	mov	r5, r3
 8007d74:	4643      	mov	r3, r8
 8007d76:	18e3      	adds	r3, r4, r3
 8007d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	eb45 0303 	adc.w	r3, r5, r3
 8007d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007da2:	4629      	mov	r1, r5
 8007da4:	008b      	lsls	r3, r1, #2
 8007da6:	4621      	mov	r1, r4
 8007da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dac:	4621      	mov	r1, r4
 8007dae:	008a      	lsls	r2, r1, #2
 8007db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007db4:	f7f8 fa6c 	bl	8000290 <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4b60      	ldr	r3, [pc, #384]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	011c      	lsls	r4, r3, #4
 8007dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	1891      	adds	r1, r2, r2
 8007dde:	61b9      	str	r1, [r7, #24]
 8007de0:	415b      	adcs	r3, r3
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007de8:	4641      	mov	r1, r8
 8007dea:	1851      	adds	r1, r2, r1
 8007dec:	6139      	str	r1, [r7, #16]
 8007dee:	4649      	mov	r1, r9
 8007df0:	414b      	adcs	r3, r1
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e00:	4659      	mov	r1, fp
 8007e02:	00cb      	lsls	r3, r1, #3
 8007e04:	4651      	mov	r1, sl
 8007e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e0a:	4651      	mov	r1, sl
 8007e0c:	00ca      	lsls	r2, r1, #3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	4642      	mov	r2, r8
 8007e16:	189b      	adds	r3, r3, r2
 8007e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	460a      	mov	r2, r1
 8007e20:	eb42 0303 	adc.w	r3, r2, r3
 8007e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e40:	4649      	mov	r1, r9
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	4641      	mov	r1, r8
 8007e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	008a      	lsls	r2, r1, #2
 8007e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e52:	f7f8 fa1d 	bl	8000290 <__aeabi_uldivmod>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4b39      	ldr	r3, [pc, #228]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	2164      	movs	r1, #100	; 0x64
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	3332      	adds	r3, #50	; 0x32
 8007e6e:	4a34      	ldr	r2, [pc, #208]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007e70:	fba2 2303 	umull	r2, r3, r2, r3
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e7a:	441c      	add	r4, r3
 8007e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e80:	2200      	movs	r2, #0
 8007e82:	673b      	str	r3, [r7, #112]	; 0x70
 8007e84:	677a      	str	r2, [r7, #116]	; 0x74
 8007e86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e8a:	4642      	mov	r2, r8
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	1891      	adds	r1, r2, r2
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	415b      	adcs	r3, r3
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	1851      	adds	r1, r2, r1
 8007e9e:	6039      	str	r1, [r7, #0]
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	414b      	adcs	r3, r1
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007eb2:	4659      	mov	r1, fp
 8007eb4:	00cb      	lsls	r3, r1, #3
 8007eb6:	4651      	mov	r1, sl
 8007eb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ebc:	4651      	mov	r1, sl
 8007ebe:	00ca      	lsls	r2, r1, #3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ecc:	464b      	mov	r3, r9
 8007ece:	460a      	mov	r2, r1
 8007ed0:	eb42 0303 	adc.w	r3, r2, r3
 8007ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee0:	667a      	str	r2, [r7, #100]	; 0x64
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eee:	4649      	mov	r1, r9
 8007ef0:	008b      	lsls	r3, r1, #2
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ef8:	4641      	mov	r1, r8
 8007efa:	008a      	lsls	r2, r1, #2
 8007efc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f00:	f7f8 f9c6 	bl	8000290 <__aeabi_uldivmod>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	2164      	movs	r1, #100	; 0x64
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	3332      	adds	r3, #50	; 0x32
 8007f1c:	4a08      	ldr	r2, [pc, #32]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4422      	add	r2, r4
 8007f30:	609a      	str	r2, [r3, #8]
}
 8007f32:	bf00      	nop
 8007f34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3e:	bf00      	nop
 8007f40:	51eb851f 	.word	0x51eb851f

08007f44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f44:	b084      	sub	sp, #16
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	f107 001c 	add.w	r0, r7, #28
 8007f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d122      	bne.n	8007fa2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d105      	bne.n	8007f96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 faa2 	bl	80084e0 <USB_CoreReset>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
 8007fa0:	e01a      	b.n	8007fd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa96 	bl	80084e0 <USB_CoreReset>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8007fca:	e005      	b.n	8007fd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d10b      	bne.n	8007ff6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f043 0206 	orr.w	r2, r3, #6
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f043 0220 	orr.w	r2, r3, #32
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008002:	b004      	add	sp, #16
 8008004:	4770      	bx	lr

08008006 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f023 0201 	bic.w	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d115      	bne.n	8008076 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008056:	2001      	movs	r0, #1
 8008058:	f7fa fb46 	bl	80026e8 <HAL_Delay>
      ms++;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa2e 	bl	80084c4 <USB_GetMode>
 8008068:	4603      	mov	r3, r0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d01e      	beq.n	80080ac <USB_SetCurrentMode+0x84>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b31      	cmp	r3, #49	; 0x31
 8008072:	d9f0      	bls.n	8008056 <USB_SetCurrentMode+0x2e>
 8008074:	e01a      	b.n	80080ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d115      	bne.n	80080a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008088:	2001      	movs	r0, #1
 800808a:	f7fa fb2d 	bl	80026e8 <HAL_Delay>
      ms++;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa15 	bl	80084c4 <USB_GetMode>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <USB_SetCurrentMode+0x84>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b31      	cmp	r3, #49	; 0x31
 80080a4:	d9f0      	bls.n	8008088 <USB_SetCurrentMode+0x60>
 80080a6:	e001      	b.n	80080ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e005      	b.n	80080b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b32      	cmp	r3, #50	; 0x32
 80080b0:	d101      	bne.n	80080b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080c0:	b084      	sub	sp, #16
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	e009      	b.n	80080f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	3340      	adds	r3, #64	; 0x40
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	2200      	movs	r2, #0
 80080ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3301      	adds	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b0e      	cmp	r3, #14
 80080f8:	d9f2      	bls.n	80080e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11c      	bne.n	800813a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800810e:	f043 0302 	orr.w	r3, r3, #2
 8008112:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
 8008138:	e00b      	b.n	8008152 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008158:	461a      	mov	r2, r3
 800815a:	2300      	movs	r3, #0
 800815c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008164:	4619      	mov	r1, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816c:	461a      	mov	r2, r3
 800816e:	680b      	ldr	r3, [r1, #0]
 8008170:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	2b01      	cmp	r3, #1
 8008176:	d10c      	bne.n	8008192 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d104      	bne.n	8008188 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f965 	bl	8008450 <USB_SetDevSpeed>
 8008186:	e008      	b.n	800819a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008188:	2101      	movs	r1, #1
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f960 	bl	8008450 <USB_SetDevSpeed>
 8008190:	e003      	b.n	800819a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008192:	2103      	movs	r1, #3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f95b 	bl	8008450 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800819a:	2110      	movs	r1, #16
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8f3 	bl	8008388 <USB_FlushTxFifo>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f91f 	bl	80083f0 <USB_FlushRxFifo>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	461a      	mov	r2, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	461a      	mov	r2, r3
 80081dc:	2300      	movs	r3, #0
 80081de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081e0:	2300      	movs	r3, #0
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	e043      	b.n	800826e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fc:	d118      	bne.n	8008230 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	461a      	mov	r2, r3
 8008212:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e013      	b.n	8008242 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008226:	461a      	mov	r2, r3
 8008228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e008      	b.n	8008242 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	461a      	mov	r2, r3
 800823e:	2300      	movs	r3, #0
 8008240:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	461a      	mov	r2, r3
 8008250:	2300      	movs	r3, #0
 8008252:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008260:	461a      	mov	r2, r3
 8008262:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008266:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3301      	adds	r3, #1
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	429a      	cmp	r2, r3
 8008274:	d3b7      	bcc.n	80081e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	e043      	b.n	8008304 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800828e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008292:	d118      	bne.n	80082c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	461a      	mov	r2, r3
 80082a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	e013      	b.n	80082d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082bc:	461a      	mov	r2, r3
 80082be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	e008      	b.n	80082d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	461a      	mov	r2, r3
 80082d4:	2300      	movs	r3, #0
 80082d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	461a      	mov	r2, r3
 80082e6:	2300      	movs	r3, #0
 80082e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	461a      	mov	r2, r3
 80082f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	429a      	cmp	r2, r3
 800830a:	d3b7      	bcc.n	800827c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800831a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800832c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	f043 0210 	orr.w	r2, r3, #16
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699a      	ldr	r2, [r3, #24]
 8008344:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <USB_DevInit+0x2c4>)
 8008346:	4313      	orrs	r3, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f043 0208 	orr.w	r2, r3, #8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800835e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008360:	2b01      	cmp	r3, #1
 8008362:	d107      	bne.n	8008374 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800836c:	f043 0304 	orr.w	r3, r3, #4
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008380:	b004      	add	sp, #16
 8008382:	4770      	bx	lr
 8008384:	803c3800 	.word	0x803c3800

08008388 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4a13      	ldr	r2, [pc, #76]	; (80083ec <USB_FlushTxFifo+0x64>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d901      	bls.n	80083a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e01b      	b.n	80083e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	daf2      	bge.n	8008396 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	019b      	lsls	r3, r3, #6
 80083b8:	f043 0220 	orr.w	r2, r3, #32
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4a08      	ldr	r2, [pc, #32]	; (80083ec <USB_FlushTxFifo+0x64>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e006      	b.n	80083e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d0f0      	beq.n	80083c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	00030d40 	.word	0x00030d40

080083f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4a11      	ldr	r2, [pc, #68]	; (800844c <USB_FlushRxFifo+0x5c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e018      	b.n	8008440 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	daf2      	bge.n	80083fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2210      	movs	r2, #16
 800841e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3301      	adds	r3, #1
 8008424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4a08      	ldr	r2, [pc, #32]	; (800844c <USB_FlushRxFifo+0x5c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e006      	b.n	8008440 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b10      	cmp	r3, #16
 800843c:	d0f0      	beq.n	8008420 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	00030d40 	.word	0x00030d40

08008450 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	68f9      	ldr	r1, [r7, #12]
 800846c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008470:	4313      	orrs	r3, r2
 8008472:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084b0:	f043 0302 	orr.w	r3, r3, #2
 80084b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	f003 0301 	and.w	r3, r3, #1
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3301      	adds	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a13      	ldr	r2, [pc, #76]	; (8008544 <USB_CoreReset+0x64>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d901      	bls.n	80084fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e01b      	b.n	8008536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	daf2      	bge.n	80084ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f043 0201 	orr.w	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3301      	adds	r3, #1
 800851a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a09      	ldr	r2, [pc, #36]	; (8008544 <USB_CoreReset+0x64>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d901      	bls.n	8008528 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e006      	b.n	8008536 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b01      	cmp	r3, #1
 8008532:	d0f0      	beq.n	8008516 <USB_CoreReset+0x36>

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	00030d40 	.word	0x00030d40

08008548 <__NVIC_SetPriority>:
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008558:	2b00      	cmp	r3, #0
 800855a:	db0a      	blt.n	8008572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	b2da      	uxtb	r2, r3
 8008560:	490c      	ldr	r1, [pc, #48]	; (8008594 <__NVIC_SetPriority+0x4c>)
 8008562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008566:	0112      	lsls	r2, r2, #4
 8008568:	b2d2      	uxtb	r2, r2
 800856a:	440b      	add	r3, r1
 800856c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008570:	e00a      	b.n	8008588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	b2da      	uxtb	r2, r3
 8008576:	4908      	ldr	r1, [pc, #32]	; (8008598 <__NVIC_SetPriority+0x50>)
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	f003 030f 	and.w	r3, r3, #15
 800857e:	3b04      	subs	r3, #4
 8008580:	0112      	lsls	r2, r2, #4
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	440b      	add	r3, r1
 8008586:	761a      	strb	r2, [r3, #24]
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	e000e100 	.word	0xe000e100
 8008598:	e000ed00 	.word	0xe000ed00

0800859c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <SysTick_Handler+0x1c>)
 80085a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80085a4:	f001 fd28 	bl	8009ff8 <xTaskGetSchedulerState>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d001      	beq.n	80085b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80085ae:	f002 fb13 	bl	800abd8 <xPortSysTickHandler>
  }
}
 80085b2:	bf00      	nop
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	e000e010 	.word	0xe000e010

080085bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80085c0:	2100      	movs	r1, #0
 80085c2:	f06f 0004 	mvn.w	r0, #4
 80085c6:	f7ff ffbf 	bl	8008548 <__NVIC_SetPriority>
#endif
}
 80085ca:	bf00      	nop
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085d6:	f3ef 8305 	mrs	r3, IPSR
 80085da:	603b      	str	r3, [r7, #0]
  return(result);
 80085dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80085e2:	f06f 0305 	mvn.w	r3, #5
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	e00c      	b.n	8008604 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <osKernelInitialize+0x44>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d105      	bne.n	80085fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <osKernelInitialize+0x44>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	e002      	b.n	8008604 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008604:	687b      	ldr	r3, [r7, #4]
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20000c64 	.word	0x20000c64

08008618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800861e:	f3ef 8305 	mrs	r3, IPSR
 8008622:	603b      	str	r3, [r7, #0]
  return(result);
 8008624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <osKernelStart+0x1a>
    stat = osErrorISR;
 800862a:	f06f 0305 	mvn.w	r3, #5
 800862e:	607b      	str	r3, [r7, #4]
 8008630:	e010      	b.n	8008654 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008632:	4b0b      	ldr	r3, [pc, #44]	; (8008660 <osKernelStart+0x48>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d109      	bne.n	800864e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800863a:	f7ff ffbf 	bl	80085bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800863e:	4b08      	ldr	r3, [pc, #32]	; (8008660 <osKernelStart+0x48>)
 8008640:	2202      	movs	r2, #2
 8008642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008644:	f001 f87c 	bl	8009740 <vTaskStartScheduler>
      stat = osOK;
 8008648:	2300      	movs	r3, #0
 800864a:	607b      	str	r3, [r7, #4]
 800864c:	e002      	b.n	8008654 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800864e:	f04f 33ff 	mov.w	r3, #4294967295
 8008652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008654:	687b      	ldr	r3, [r7, #4]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000c64 	.word	0x20000c64

08008664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008664:	b580      	push	{r7, lr}
 8008666:	b08e      	sub	sp, #56	; 0x38
 8008668:	af04      	add	r7, sp, #16
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008670:	2300      	movs	r3, #0
 8008672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008674:	f3ef 8305 	mrs	r3, IPSR
 8008678:	617b      	str	r3, [r7, #20]
  return(result);
 800867a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800867c:	2b00      	cmp	r3, #0
 800867e:	d17e      	bne.n	800877e <osThreadNew+0x11a>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d07b      	beq.n	800877e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008686:	2380      	movs	r3, #128	; 0x80
 8008688:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800868a:	2318      	movs	r3, #24
 800868c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d045      	beq.n	800872a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <osThreadNew+0x48>
        name = attr->name;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <osThreadNew+0x6e>
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b38      	cmp	r3, #56	; 0x38
 80086c4:	d805      	bhi.n	80086d2 <osThreadNew+0x6e>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <osThreadNew+0x72>
        return (NULL);
 80086d2:	2300      	movs	r3, #0
 80086d4:	e054      	b.n	8008780 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	089b      	lsrs	r3, r3, #2
 80086e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00e      	beq.n	800870c <osThreadNew+0xa8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	2bbb      	cmp	r3, #187	; 0xbb
 80086f4:	d90a      	bls.n	800870c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d006      	beq.n	800870c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <osThreadNew+0xa8>
        mem = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	e010      	b.n	800872e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10c      	bne.n	800872e <osThreadNew+0xca>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d108      	bne.n	800872e <osThreadNew+0xca>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <osThreadNew+0xca>
          mem = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	e001      	b.n	800872e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d110      	bne.n	8008756 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800873c:	9202      	str	r2, [sp, #8]
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6a3a      	ldr	r2, [r7, #32]
 8008748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 fe0c 	bl	8009368 <xTaskCreateStatic>
 8008750:	4603      	mov	r3, r0
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	e013      	b.n	800877e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d110      	bne.n	800877e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	b29a      	uxth	r2, r3
 8008760:	f107 0310 	add.w	r3, r7, #16
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fe57 	bl	8009422 <xTaskCreate>
 8008774:	4603      	mov	r3, r0
 8008776:	2b01      	cmp	r3, #1
 8008778:	d001      	beq.n	800877e <osThreadNew+0x11a>
            hTask = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800877e:	693b      	ldr	r3, [r7, #16]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3728      	adds	r7, #40	; 0x28
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008790:	f3ef 8305 	mrs	r3, IPSR
 8008794:	60bb      	str	r3, [r7, #8]
  return(result);
 8008796:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <osDelay+0x1c>
    stat = osErrorISR;
 800879c:	f06f 0305 	mvn.w	r3, #5
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	e007      	b.n	80087b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 ff92 	bl	80096d8 <vTaskDelay>
    }
  }

  return (stat);
 80087b4:	68fb      	ldr	r3, [r7, #12]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a07      	ldr	r2, [pc, #28]	; (80087ec <vApplicationGetIdleTaskMemory+0x2c>)
 80087d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vApplicationGetIdleTaskMemory+0x30>)
 80087d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2280      	movs	r2, #128	; 0x80
 80087dc:	601a      	str	r2, [r3, #0]
}
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20000c68 	.word	0x20000c68
 80087f0:	20000d24 	.word	0x20000d24

080087f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a07      	ldr	r2, [pc, #28]	; (8008820 <vApplicationGetTimerTaskMemory+0x2c>)
 8008804:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4a06      	ldr	r2, [pc, #24]	; (8008824 <vApplicationGetTimerTaskMemory+0x30>)
 800880a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008812:	601a      	str	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	20000f24 	.word	0x20000f24
 8008824:	20000fe0 	.word	0x20000fe0

08008828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f103 0208 	add.w	r2, r3, #8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f04f 32ff 	mov.w	r2, #4294967295
 8008840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f103 0208 	add.w	r2, r3, #8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f103 0208 	add.w	r2, r3, #8
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008882:	b480      	push	{r7}
 8008884:	b085      	sub	sp, #20
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	601a      	str	r2, [r3, #0]
}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d103      	bne.n	80088ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e00c      	b.n	8008904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3308      	adds	r3, #8
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	e002      	b.n	80088f8 <vListInsert+0x2e>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	d2f6      	bcs.n	80088f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
}
 8008930:	bf00      	nop
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6892      	ldr	r2, [r2, #8]
 8008952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6852      	ldr	r2, [r2, #4]
 800895c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	d103      	bne.n	8008970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	1e5a      	subs	r2, r3, #1
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089ba:	f002 f87b 	bl	800aab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	441a      	add	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ea:	3b01      	subs	r3, #1
 80089ec:	68f9      	ldr	r1, [r7, #12]
 80089ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	441a      	add	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	22ff      	movs	r2, #255	; 0xff
 80089fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d114      	bne.n	8008a3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01a      	beq.n	8008a4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3310      	adds	r3, #16
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f001 f929 	bl	8009c74 <xTaskRemoveFromEventList>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d012      	beq.n	8008a4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <xQueueGenericReset+0xcc>)
 8008a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	e009      	b.n	8008a4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3310      	adds	r3, #16
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff fef2 	bl	8008828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3324      	adds	r3, #36	; 0x24
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff feed 	bl	8008828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a4e:	f002 f861 	bl	800ab14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a52:	2301      	movs	r3, #1
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	e000ed04 	.word	0xe000ed04

08008a60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08e      	sub	sp, #56	; 0x38
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <xQueueGenericCreateStatic+0x52>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <xQueueGenericCreateStatic+0x56>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <xQueueGenericCreateStatic+0x58>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	623b      	str	r3, [r7, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <xQueueGenericCreateStatic+0x7e>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <xQueueGenericCreateStatic+0x82>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <xQueueGenericCreateStatic+0x84>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	61fb      	str	r3, [r7, #28]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008afe:	2350      	movs	r3, #80	; 0x50
 8008b00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b50      	cmp	r3, #80	; 0x50
 8008b06:	d00a      	beq.n	8008b1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	61bb      	str	r3, [r7, #24]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00d      	beq.n	8008b46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f805 	bl	8008b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3730      	adds	r7, #48	; 0x30
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e002      	b.n	8008b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b7e:	2101      	movs	r1, #1
 8008b80:	69b8      	ldr	r0, [r7, #24]
 8008b82:	f7ff ff05 	bl	8008990 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08e      	sub	sp, #56	; 0x38
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <xQueueGenericSend+0x32>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d103      	bne.n	8008bd8 <xQueueGenericSend+0x40>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <xQueueGenericSend+0x44>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <xQueueGenericSend+0x46>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <xQueueGenericSend+0x60>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d103      	bne.n	8008c06 <xQueueGenericSend+0x6e>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <xQueueGenericSend+0x72>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <xQueueGenericSend+0x74>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xQueueGenericSend+0x8e>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	623b      	str	r3, [r7, #32]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c26:	f001 f9e7 	bl	8009ff8 <xTaskGetSchedulerState>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d102      	bne.n	8008c36 <xQueueGenericSend+0x9e>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <xQueueGenericSend+0xa2>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e000      	b.n	8008c3c <xQueueGenericSend+0xa4>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <xQueueGenericSend+0xbe>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	61fb      	str	r3, [r7, #28]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c56:	f001 ff2d 	bl	800aab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d302      	bcc.n	8008c6c <xQueueGenericSend+0xd4>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d129      	bne.n	8008cc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c72:	f000 fa0b 	bl	800908c <prvCopyDataToQueue>
 8008c76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	3324      	adds	r3, #36	; 0x24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fff5 	bl	8009c74 <xTaskRemoveFromEventList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d013      	beq.n	8008cb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c90:	4b3f      	ldr	r3, [pc, #252]	; (8008d90 <xQueueGenericSend+0x1f8>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	e00a      	b.n	8008cb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d007      	beq.n	8008cb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ca8:	4b39      	ldr	r3, [pc, #228]	; (8008d90 <xQueueGenericSend+0x1f8>)
 8008caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cb8:	f001 ff2c 	bl	800ab14 <vPortExitCritical>
				return pdPASS;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e063      	b.n	8008d88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cc6:	f001 ff25 	bl	800ab14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e05c      	b.n	8008d88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 f82f 	bl	8009d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ce2:	f001 ff17 	bl	800ab14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ce6:	f000 fd9b 	bl	8009820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cea:	f001 fee3 	bl	800aab4 <vPortEnterCritical>
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cf4:	b25b      	sxtb	r3, r3
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d103      	bne.n	8008d04 <xQueueGenericSend+0x16c>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d0a:	b25b      	sxtb	r3, r3
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d10:	d103      	bne.n	8008d1a <xQueueGenericSend+0x182>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d1a:	f001 fefb 	bl	800ab14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d1e:	1d3a      	adds	r2, r7, #4
 8008d20:	f107 0314 	add.w	r3, r7, #20
 8008d24:	4611      	mov	r1, r2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f001 f81e 	bl	8009d68 <xTaskCheckForTimeOut>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d124      	bne.n	8008d7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d34:	f000 faa2 	bl	800927c <prvIsQueueFull>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d018      	beq.n	8008d70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	3310      	adds	r3, #16
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 ff44 	bl	8009bd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d4e:	f000 fa2d 	bl	80091ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d52:	f000 fd73 	bl	800983c <xTaskResumeAll>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f47f af7c 	bne.w	8008c56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <xQueueGenericSend+0x1f8>)
 8008d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	e772      	b.n	8008c56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d72:	f000 fa1b 	bl	80091ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d76:	f000 fd61 	bl	800983c <xTaskResumeAll>
 8008d7a:	e76c      	b.n	8008c56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7e:	f000 fa15 	bl	80091ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d82:	f000 fd5b 	bl	800983c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3738      	adds	r7, #56	; 0x38
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b090      	sub	sp, #64	; 0x40
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d103      	bne.n	8008dd0 <xQueueGenericSendFromISR+0x3c>
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <xQueueGenericSendFromISR+0x40>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <xQueueGenericSendFromISR+0x42>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d103      	bne.n	8008dfe <xQueueGenericSendFromISR+0x6a>
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <xQueueGenericSendFromISR+0x6e>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericSendFromISR+0x70>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	623b      	str	r3, [r7, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e1e:	f001 ff2b 	bl	800ac78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e22:	f3ef 8211 	mrs	r2, BASEPRI
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	61fa      	str	r2, [r7, #28]
 8008e38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d302      	bcc.n	8008e50 <xQueueGenericSendFromISR+0xbc>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d12f      	bne.n	8008eb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e66:	f000 f911 	bl	800908c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d112      	bne.n	8008e9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d016      	beq.n	8008eaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	3324      	adds	r3, #36	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fef7 	bl	8009c74 <xTaskRemoveFromEventList>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00e      	beq.n	8008eaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e007      	b.n	8008eaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	b25a      	sxtb	r2, r3
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008eae:	e001      	b.n	8008eb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ebe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3740      	adds	r7, #64	; 0x40
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08c      	sub	sp, #48	; 0x30
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <xQueueReceive+0x30>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	623b      	str	r3, [r7, #32]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <xQueueReceive+0x3e>
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <xQueueReceive+0x42>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <xQueueReceive+0x44>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <xQueueReceive+0x5e>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	61fb      	str	r3, [r7, #28]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f2a:	f001 f865 	bl	8009ff8 <xTaskGetSchedulerState>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <xQueueReceive+0x6e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <xQueueReceive+0x72>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e000      	b.n	8008f40 <xQueueReceive+0x74>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xQueueReceive+0x8e>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	61bb      	str	r3, [r7, #24]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f5a:	f001 fdab 	bl	800aab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01f      	beq.n	8008faa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f6e:	f000 f8f7 	bl	8009160 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	1e5a      	subs	r2, r3, #1
 8008f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00f      	beq.n	8008fa2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	3310      	adds	r3, #16
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fe74 	bl	8009c74 <xTaskRemoveFromEventList>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f92:	4b3d      	ldr	r3, [pc, #244]	; (8009088 <xQueueReceive+0x1bc>)
 8008f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fa2:	f001 fdb7 	bl	800ab14 <vPortExitCritical>
				return pdPASS;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e069      	b.n	800907e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fb0:	f001 fdb0 	bl	800ab14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	e062      	b.n	800907e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d106      	bne.n	8008fcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fbe:	f107 0310 	add.w	r3, r7, #16
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 feba 	bl	8009d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fcc:	f001 fda2 	bl	800ab14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fd0:	f000 fc26 	bl	8009820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fd4:	f001 fd6e 	bl	800aab4 <vPortEnterCritical>
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fde:	b25b      	sxtb	r3, r3
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe4:	d103      	bne.n	8008fee <xQueueReceive+0x122>
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d103      	bne.n	8009004 <xQueueReceive+0x138>
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009004:	f001 fd86 	bl	800ab14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009008:	1d3a      	adds	r2, r7, #4
 800900a:	f107 0310 	add.w	r3, r7, #16
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fea9 	bl	8009d68 <xTaskCheckForTimeOut>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d123      	bne.n	8009064 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800901c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800901e:	f000 f917 	bl	8009250 <prvIsQueueEmpty>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d017      	beq.n	8009058 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fdcf 	bl	8009bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009038:	f000 f8b8 	bl	80091ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800903c:	f000 fbfe 	bl	800983c <xTaskResumeAll>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d189      	bne.n	8008f5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009046:	4b10      	ldr	r3, [pc, #64]	; (8009088 <xQueueReceive+0x1bc>)
 8009048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	e780      	b.n	8008f5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905a:	f000 f8a7 	bl	80091ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800905e:	f000 fbed 	bl	800983c <xTaskResumeAll>
 8009062:	e77a      	b.n	8008f5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009066:	f000 f8a1 	bl	80091ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800906a:	f000 fbe7 	bl	800983c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800906e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009070:	f000 f8ee 	bl	8009250 <prvIsQueueEmpty>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	f43f af6f 	beq.w	8008f5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800907c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800907e:	4618      	mov	r0, r3
 8009080:	3730      	adds	r7, #48	; 0x30
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009098:	2300      	movs	r3, #0
 800909a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10d      	bne.n	80090c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d14d      	bne.n	800914e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 ffbc 	bl	800a034 <xTaskPriorityDisinherit>
 80090bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	609a      	str	r2, [r3, #8]
 80090c4:	e043      	b.n	800914e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d119      	bne.n	8009100 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6858      	ldr	r0, [r3, #4]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	461a      	mov	r2, r3
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	f002 f91b 	bl	800b312 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	441a      	add	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d32b      	bcc.n	800914e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	605a      	str	r2, [r3, #4]
 80090fe:	e026      	b.n	800914e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68d8      	ldr	r0, [r3, #12]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	461a      	mov	r2, r3
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	f002 f901 	bl	800b312 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	425b      	negs	r3, r3
 800911a:	441a      	add	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d207      	bcs.n	800913c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	425b      	negs	r3, r3
 8009136:	441a      	add	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d105      	bne.n	800914e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	3b01      	subs	r3, #1
 800914c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009156:	697b      	ldr	r3, [r7, #20]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d018      	beq.n	80091a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	441a      	add	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	429a      	cmp	r2, r3
 800918a:	d303      	bcc.n	8009194 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68d9      	ldr	r1, [r3, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	461a      	mov	r2, r3
 800919e:	6838      	ldr	r0, [r7, #0]
 80091a0:	f002 f8b7 	bl	800b312 <memcpy>
	}
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091b4:	f001 fc7e 	bl	800aab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091c0:	e011      	b.n	80091e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d012      	beq.n	80091f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3324      	adds	r3, #36	; 0x24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fd50 	bl	8009c74 <xTaskRemoveFromEventList>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091da:	f000 fe27 	bl	8009e2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	dce9      	bgt.n	80091c2 <prvUnlockQueue+0x16>
 80091ee:	e000      	b.n	80091f2 <prvUnlockQueue+0x46>
					break;
 80091f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	22ff      	movs	r2, #255	; 0xff
 80091f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091fa:	f001 fc8b 	bl	800ab14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091fe:	f001 fc59 	bl	800aab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009208:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800920a:	e011      	b.n	8009230 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d012      	beq.n	800923a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3310      	adds	r3, #16
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fd2b 	bl	8009c74 <xTaskRemoveFromEventList>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009224:	f000 fe02 	bl	8009e2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	3b01      	subs	r3, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009234:	2b00      	cmp	r3, #0
 8009236:	dce9      	bgt.n	800920c <prvUnlockQueue+0x60>
 8009238:	e000      	b.n	800923c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800923a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	22ff      	movs	r2, #255	; 0xff
 8009240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009244:	f001 fc66 	bl	800ab14 <vPortExitCritical>
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009258:	f001 fc2c 	bl	800aab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e001      	b.n	800926e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800926e:	f001 fc51 	bl	800ab14 <vPortExitCritical>

	return xReturn;
 8009272:	68fb      	ldr	r3, [r7, #12]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009284:	f001 fc16 	bl	800aab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009290:	429a      	cmp	r2, r3
 8009292:	d102      	bne.n	800929a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	e001      	b.n	800929e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800929e:	f001 fc39 	bl	800ab14 <vPortExitCritical>

	return xReturn;
 80092a2:	68fb      	ldr	r3, [r7, #12]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	e014      	b.n	80092e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092bc:	4a0f      	ldr	r2, [pc, #60]	; (80092fc <vQueueAddToRegistry+0x50>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10b      	bne.n	80092e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092c8:	490c      	ldr	r1, [pc, #48]	; (80092fc <vQueueAddToRegistry+0x50>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092d2:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <vQueueAddToRegistry+0x50>)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4413      	add	r3, r2
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092de:	e006      	b.n	80092ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b07      	cmp	r3, #7
 80092ea:	d9e7      	bls.n	80092bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	200013e0 	.word	0x200013e0

08009300 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009310:	f001 fbd0 	bl	800aab4 <vPortEnterCritical>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800931a:	b25b      	sxtb	r3, r3
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d103      	bne.n	800932a <vQueueWaitForMessageRestricted+0x2a>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009330:	b25b      	sxtb	r3, r3
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	d103      	bne.n	8009340 <vQueueWaitForMessageRestricted+0x40>
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009340:	f001 fbe8 	bl	800ab14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fc61 	bl	8009c1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800935a:	6978      	ldr	r0, [r7, #20]
 800935c:	f7ff ff26 	bl	80091ac <prvUnlockQueue>
	}
 8009360:	bf00      	nop
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08e      	sub	sp, #56	; 0x38
 800936c:	af04      	add	r7, sp, #16
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <xTaskCreateStatic+0x2a>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	623b      	str	r3, [r7, #32]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <xTaskCreateStatic+0x46>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	61fb      	str	r3, [r7, #28]
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093ae:	23bc      	movs	r3, #188	; 0xbc
 80093b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2bbc      	cmp	r3, #188	; 0xbc
 80093b6:	d00a      	beq.n	80093ce <xTaskCreateStatic+0x66>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	61bb      	str	r3, [r7, #24]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01e      	beq.n	8009414 <xTaskCreateStatic+0xac>
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01b      	beq.n	8009414 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	2202      	movs	r2, #2
 80093ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093ee:	2300      	movs	r3, #0
 80093f0:	9303      	str	r3, [sp, #12]
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	f107 0314 	add.w	r3, r7, #20
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f850 	bl	80094ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800940c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800940e:	f000 f8f3 	bl	80095f8 <prvAddNewTaskToReadyList>
 8009412:	e001      	b.n	8009418 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009418:	697b      	ldr	r3, [r7, #20]
	}
 800941a:	4618      	mov	r0, r3
 800941c:	3728      	adds	r7, #40	; 0x28
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009422:	b580      	push	{r7, lr}
 8009424:	b08c      	sub	sp, #48	; 0x30
 8009426:	af04      	add	r7, sp, #16
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	603b      	str	r3, [r7, #0]
 800942e:	4613      	mov	r3, r2
 8009430:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fc5e 	bl	800acf8 <pvPortMalloc>
 800943c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00e      	beq.n	8009462 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009444:	20bc      	movs	r0, #188	; 0xbc
 8009446:	f001 fc57 	bl	800acf8 <pvPortMalloc>
 800944a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	631a      	str	r2, [r3, #48]	; 0x30
 8009458:	e005      	b.n	8009466 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800945a:	6978      	ldr	r0, [r7, #20]
 800945c:	f001 fd18 	bl	800ae90 <vPortFree>
 8009460:	e001      	b.n	8009466 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d017      	beq.n	800949c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	2300      	movs	r3, #0
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 f80e 	bl	80094ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009490:	69f8      	ldr	r0, [r7, #28]
 8009492:	f000 f8b1 	bl	80095f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009496:	2301      	movs	r3, #1
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	e002      	b.n	80094a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800949c:	f04f 33ff 	mov.w	r3, #4294967295
 80094a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094a2:	69bb      	ldr	r3, [r7, #24]
	}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	461a      	mov	r2, r3
 80094c4:	21a5      	movs	r1, #165	; 0xa5
 80094c6:	f001 ff32 	bl	800b32e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094d4:	3b01      	subs	r3, #1
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	f023 0307 	bic.w	r3, r3, #7
 80094e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <prvInitialiseNewTask+0x58>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	617b      	str	r3, [r7, #20]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01f      	beq.n	800954a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800950a:	2300      	movs	r3, #0
 800950c:	61fb      	str	r3, [r7, #28]
 800950e:	e012      	b.n	8009536 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	4413      	add	r3, r2
 8009516:	7819      	ldrb	r1, [r3, #0]
 8009518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	3334      	adds	r3, #52	; 0x34
 8009520:	460a      	mov	r2, r1
 8009522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	3301      	adds	r3, #1
 8009534:	61fb      	str	r3, [r7, #28]
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	2b0f      	cmp	r3, #15
 800953a:	d9e9      	bls.n	8009510 <prvInitialiseNewTask+0x64>
 800953c:	e000      	b.n	8009540 <prvInitialiseNewTask+0x94>
			{
				break;
 800953e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009548:	e003      	b.n	8009552 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	2b37      	cmp	r3, #55	; 0x37
 8009556:	d901      	bls.n	800955c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009558:	2337      	movs	r3, #55	; 0x37
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009566:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	2200      	movs	r2, #0
 800956c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff f978 	bl	8008868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	3318      	adds	r3, #24
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff f973 	bl	8008868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	2200      	movs	r2, #0
 800959c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	3354      	adds	r3, #84	; 0x54
 80095ac:	2260      	movs	r2, #96	; 0x60
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 febc 	bl	800b32e <memset>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	4a0c      	ldr	r2, [pc, #48]	; (80095ec <prvInitialiseNewTask+0x140>)
 80095ba:	659a      	str	r2, [r3, #88]	; 0x58
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	4a0c      	ldr	r2, [pc, #48]	; (80095f0 <prvInitialiseNewTask+0x144>)
 80095c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	4a0b      	ldr	r2, [pc, #44]	; (80095f4 <prvInitialiseNewTask+0x148>)
 80095c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	69b8      	ldr	r0, [r7, #24]
 80095ce:	f001 f941 	bl	800a854 <pxPortInitialiseStack>
 80095d2:	4602      	mov	r2, r0
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095e4:	bf00      	nop
 80095e6:	3720      	adds	r7, #32
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	0800c418 	.word	0x0800c418
 80095f0:	0800c438 	.word	0x0800c438
 80095f4:	0800c3f8 	.word	0x0800c3f8

080095f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009600:	f001 fa58 	bl	800aab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009604:	4b2d      	ldr	r3, [pc, #180]	; (80096bc <prvAddNewTaskToReadyList+0xc4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3301      	adds	r3, #1
 800960a:	4a2c      	ldr	r2, [pc, #176]	; (80096bc <prvAddNewTaskToReadyList+0xc4>)
 800960c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800960e:	4b2c      	ldr	r3, [pc, #176]	; (80096c0 <prvAddNewTaskToReadyList+0xc8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009616:	4a2a      	ldr	r2, [pc, #168]	; (80096c0 <prvAddNewTaskToReadyList+0xc8>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800961c:	4b27      	ldr	r3, [pc, #156]	; (80096bc <prvAddNewTaskToReadyList+0xc4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d110      	bne.n	8009646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009624:	f000 fc26 	bl	8009e74 <prvInitialiseTaskLists>
 8009628:	e00d      	b.n	8009646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800962a:	4b26      	ldr	r3, [pc, #152]	; (80096c4 <prvAddNewTaskToReadyList+0xcc>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009632:	4b23      	ldr	r3, [pc, #140]	; (80096c0 <prvAddNewTaskToReadyList+0xc8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	429a      	cmp	r2, r3
 800963e:	d802      	bhi.n	8009646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009640:	4a1f      	ldr	r2, [pc, #124]	; (80096c0 <prvAddNewTaskToReadyList+0xc8>)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009646:	4b20      	ldr	r3, [pc, #128]	; (80096c8 <prvAddNewTaskToReadyList+0xd0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3301      	adds	r3, #1
 800964c:	4a1e      	ldr	r2, [pc, #120]	; (80096c8 <prvAddNewTaskToReadyList+0xd0>)
 800964e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009650:	4b1d      	ldr	r3, [pc, #116]	; (80096c8 <prvAddNewTaskToReadyList+0xd0>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4b1b      	ldr	r3, [pc, #108]	; (80096cc <prvAddNewTaskToReadyList+0xd4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <prvAddNewTaskToReadyList+0x74>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a18      	ldr	r2, [pc, #96]	; (80096cc <prvAddNewTaskToReadyList+0xd4>)
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <prvAddNewTaskToReadyList+0xd8>)
 800967a:	441a      	add	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7ff f8fd 	bl	8008882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009688:	f001 fa44 	bl	800ab14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800968c:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <prvAddNewTaskToReadyList+0xcc>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009694:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <prvAddNewTaskToReadyList+0xc8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	429a      	cmp	r2, r3
 80096a0:	d207      	bcs.n	80096b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096a2:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <prvAddNewTaskToReadyList+0xdc>)
 80096a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200018f4 	.word	0x200018f4
 80096c0:	20001420 	.word	0x20001420
 80096c4:	20001900 	.word	0x20001900
 80096c8:	20001910 	.word	0x20001910
 80096cc:	200018fc 	.word	0x200018fc
 80096d0:	20001424 	.word	0x20001424
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d017      	beq.n	800971a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <vTaskDelay+0x60>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <vTaskDelay+0x30>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60bb      	str	r3, [r7, #8]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009708:	f000 f88a 	bl	8009820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800970c:	2100      	movs	r1, #0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fcfe 	bl	800a110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009714:	f000 f892 	bl	800983c <xTaskResumeAll>
 8009718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d107      	bne.n	8009730 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <vTaskDelay+0x64>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	2000191c 	.word	0x2000191c
 800973c:	e000ed04 	.word	0xe000ed04

08009740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	; 0x28
 8009744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800974a:	2300      	movs	r3, #0
 800974c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800974e:	463a      	mov	r2, r7
 8009750:	1d39      	adds	r1, r7, #4
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff f832 	bl	80087c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	9202      	str	r2, [sp, #8]
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	2300      	movs	r3, #0
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	2300      	movs	r3, #0
 800976c:	460a      	mov	r2, r1
 800976e:	4924      	ldr	r1, [pc, #144]	; (8009800 <vTaskStartScheduler+0xc0>)
 8009770:	4824      	ldr	r0, [pc, #144]	; (8009804 <vTaskStartScheduler+0xc4>)
 8009772:	f7ff fdf9 	bl	8009368 <xTaskCreateStatic>
 8009776:	4603      	mov	r3, r0
 8009778:	4a23      	ldr	r2, [pc, #140]	; (8009808 <vTaskStartScheduler+0xc8>)
 800977a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800977c:	4b22      	ldr	r3, [pc, #136]	; (8009808 <vTaskStartScheduler+0xc8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009784:	2301      	movs	r3, #1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e001      	b.n	800978e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d102      	bne.n	800979a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009794:	f000 fd10 	bl	800a1b8 <xTimerCreateTimerTask>
 8009798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d11b      	bne.n	80097d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	613b      	str	r3, [r7, #16]
}
 80097b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097b4:	4b15      	ldr	r3, [pc, #84]	; (800980c <vTaskStartScheduler+0xcc>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3354      	adds	r3, #84	; 0x54
 80097ba:	4a15      	ldr	r2, [pc, #84]	; (8009810 <vTaskStartScheduler+0xd0>)
 80097bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <vTaskStartScheduler+0xd4>)
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295
 80097c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <vTaskStartScheduler+0xd8>)
 80097c8:	2201      	movs	r2, #1
 80097ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097cc:	4b13      	ldr	r3, [pc, #76]	; (800981c <vTaskStartScheduler+0xdc>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097d2:	f001 f8cd 	bl	800a970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097d6:	e00e      	b.n	80097f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d10a      	bne.n	80097f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <vTaskStartScheduler+0xb4>
}
 80097f6:	bf00      	nop
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	0800c338 	.word	0x0800c338
 8009804:	08009e45 	.word	0x08009e45
 8009808:	20001918 	.word	0x20001918
 800980c:	20001420 	.word	0x20001420
 8009810:	200000b8 	.word	0x200000b8
 8009814:	20001914 	.word	0x20001914
 8009818:	20001900 	.word	0x20001900
 800981c:	200018f8 	.word	0x200018f8

08009820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009820:	b480      	push	{r7}
 8009822:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009824:	4b04      	ldr	r3, [pc, #16]	; (8009838 <vTaskSuspendAll+0x18>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3301      	adds	r3, #1
 800982a:	4a03      	ldr	r2, [pc, #12]	; (8009838 <vTaskSuspendAll+0x18>)
 800982c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800982e:	bf00      	nop
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	2000191c 	.word	0x2000191c

0800983c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009846:	2300      	movs	r3, #0
 8009848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800984a:	4b42      	ldr	r3, [pc, #264]	; (8009954 <xTaskResumeAll+0x118>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <xTaskResumeAll+0x2c>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	603b      	str	r3, [r7, #0]
}
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009868:	f001 f924 	bl	800aab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800986c:	4b39      	ldr	r3, [pc, #228]	; (8009954 <xTaskResumeAll+0x118>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3b01      	subs	r3, #1
 8009872:	4a38      	ldr	r2, [pc, #224]	; (8009954 <xTaskResumeAll+0x118>)
 8009874:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009876:	4b37      	ldr	r3, [pc, #220]	; (8009954 <xTaskResumeAll+0x118>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d162      	bne.n	8009944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800987e:	4b36      	ldr	r3, [pc, #216]	; (8009958 <xTaskResumeAll+0x11c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d05e      	beq.n	8009944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009886:	e02f      	b.n	80098e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009888:	4b34      	ldr	r3, [pc, #208]	; (800995c <xTaskResumeAll+0x120>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3318      	adds	r3, #24
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff f851 	bl	800893c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3304      	adds	r3, #4
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff f84c 	bl	800893c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a8:	4b2d      	ldr	r3, [pc, #180]	; (8009960 <xTaskResumeAll+0x124>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d903      	bls.n	80098b8 <xTaskResumeAll+0x7c>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	4a2a      	ldr	r2, [pc, #168]	; (8009960 <xTaskResumeAll+0x124>)
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4a27      	ldr	r2, [pc, #156]	; (8009964 <xTaskResumeAll+0x128>)
 80098c6:	441a      	add	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	f7fe ffd7 	bl	8008882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	4b23      	ldr	r3, [pc, #140]	; (8009968 <xTaskResumeAll+0x12c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80098e2:	4b22      	ldr	r3, [pc, #136]	; (800996c <xTaskResumeAll+0x130>)
 80098e4:	2201      	movs	r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098e8:	4b1c      	ldr	r3, [pc, #112]	; (800995c <xTaskResumeAll+0x120>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1cb      	bne.n	8009888 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098f6:	f000 fb5f 	bl	8009fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098fa:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <xTaskResumeAll+0x134>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d010      	beq.n	8009928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009906:	f000 f847 	bl	8009998 <xTaskIncrementTick>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009910:	4b16      	ldr	r3, [pc, #88]	; (800996c <xTaskResumeAll+0x130>)
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3b01      	subs	r3, #1
 800991a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f1      	bne.n	8009906 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009922:	4b13      	ldr	r3, [pc, #76]	; (8009970 <xTaskResumeAll+0x134>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009928:	4b10      	ldr	r3, [pc, #64]	; (800996c <xTaskResumeAll+0x130>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d009      	beq.n	8009944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <xTaskResumeAll+0x138>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009944:	f001 f8e6 	bl	800ab14 <vPortExitCritical>

	return xAlreadyYielded;
 8009948:	68bb      	ldr	r3, [r7, #8]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	2000191c 	.word	0x2000191c
 8009958:	200018f4 	.word	0x200018f4
 800995c:	200018b4 	.word	0x200018b4
 8009960:	200018fc 	.word	0x200018fc
 8009964:	20001424 	.word	0x20001424
 8009968:	20001420 	.word	0x20001420
 800996c:	20001908 	.word	0x20001908
 8009970:	20001904 	.word	0x20001904
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <xTaskGetTickCount+0x1c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009984:	687b      	ldr	r3, [r7, #4]
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	200018f8 	.word	0x200018f8

08009998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099a2:	4b4f      	ldr	r3, [pc, #316]	; (8009ae0 <xTaskIncrementTick+0x148>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 808f 	bne.w	8009aca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099ac:	4b4d      	ldr	r3, [pc, #308]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099b4:	4a4b      	ldr	r2, [pc, #300]	; (8009ae4 <xTaskIncrementTick+0x14c>)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d120      	bne.n	8009a02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099c0:	4b49      	ldr	r3, [pc, #292]	; (8009ae8 <xTaskIncrementTick+0x150>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	603b      	str	r3, [r7, #0]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <xTaskIncrementTick+0x46>
 80099e0:	4b41      	ldr	r3, [pc, #260]	; (8009ae8 <xTaskIncrementTick+0x150>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	4b41      	ldr	r3, [pc, #260]	; (8009aec <xTaskIncrementTick+0x154>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a3f      	ldr	r2, [pc, #252]	; (8009ae8 <xTaskIncrementTick+0x150>)
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	4a3f      	ldr	r2, [pc, #252]	; (8009aec <xTaskIncrementTick+0x154>)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	4b3e      	ldr	r3, [pc, #248]	; (8009af0 <xTaskIncrementTick+0x158>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	4a3d      	ldr	r2, [pc, #244]	; (8009af0 <xTaskIncrementTick+0x158>)
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	f000 fadb 	bl	8009fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a02:	4b3c      	ldr	r3, [pc, #240]	; (8009af4 <xTaskIncrementTick+0x15c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d349      	bcc.n	8009aa0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a0c:	4b36      	ldr	r3, [pc, #216]	; (8009ae8 <xTaskIncrementTick+0x150>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d104      	bne.n	8009a20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a16:	4b37      	ldr	r3, [pc, #220]	; (8009af4 <xTaskIncrementTick+0x15c>)
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1c:	601a      	str	r2, [r3, #0]
					break;
 8009a1e:	e03f      	b.n	8009aa0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	4b31      	ldr	r3, [pc, #196]	; (8009ae8 <xTaskIncrementTick+0x150>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d203      	bcs.n	8009a40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a38:	4a2e      	ldr	r2, [pc, #184]	; (8009af4 <xTaskIncrementTick+0x15c>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a3e:	e02f      	b.n	8009aa0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe ff79 	bl	800893c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d004      	beq.n	8009a5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	3318      	adds	r3, #24
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe ff70 	bl	800893c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4b25      	ldr	r3, [pc, #148]	; (8009af8 <xTaskIncrementTick+0x160>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d903      	bls.n	8009a70 <xTaskIncrementTick+0xd8>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	4a22      	ldr	r2, [pc, #136]	; (8009af8 <xTaskIncrementTick+0x160>)
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4a1f      	ldr	r2, [pc, #124]	; (8009afc <xTaskIncrementTick+0x164>)
 8009a7e:	441a      	add	r2, r3
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f7fe fefb 	bl	8008882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4b1b      	ldr	r3, [pc, #108]	; (8009b00 <xTaskIncrementTick+0x168>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d3b8      	bcc.n	8009a0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9e:	e7b5      	b.n	8009a0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009aa0:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <xTaskIncrementTick+0x168>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa6:	4915      	ldr	r1, [pc, #84]	; (8009afc <xTaskIncrementTick+0x164>)
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d901      	bls.n	8009abc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009abc:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <xTaskIncrementTick+0x16c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d007      	beq.n	8009ad4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e004      	b.n	8009ad4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009aca:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <xTaskIncrementTick+0x170>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	4a0d      	ldr	r2, [pc, #52]	; (8009b08 <xTaskIncrementTick+0x170>)
 8009ad2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ad4:	697b      	ldr	r3, [r7, #20]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	2000191c 	.word	0x2000191c
 8009ae4:	200018f8 	.word	0x200018f8
 8009ae8:	200018ac 	.word	0x200018ac
 8009aec:	200018b0 	.word	0x200018b0
 8009af0:	2000190c 	.word	0x2000190c
 8009af4:	20001914 	.word	0x20001914
 8009af8:	200018fc 	.word	0x200018fc
 8009afc:	20001424 	.word	0x20001424
 8009b00:	20001420 	.word	0x20001420
 8009b04:	20001908 	.word	0x20001908
 8009b08:	20001904 	.word	0x20001904

08009b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b12:	4b2a      	ldr	r3, [pc, #168]	; (8009bbc <vTaskSwitchContext+0xb0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b1a:	4b29      	ldr	r3, [pc, #164]	; (8009bc0 <vTaskSwitchContext+0xb4>)
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b20:	e046      	b.n	8009bb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009b22:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <vTaskSwitchContext+0xb4>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b28:	4b26      	ldr	r3, [pc, #152]	; (8009bc4 <vTaskSwitchContext+0xb8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]
 8009b2e:	e010      	b.n	8009b52 <vTaskSwitchContext+0x46>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <vTaskSwitchContext+0x40>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	607b      	str	r3, [r7, #4]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <vTaskSwitchContext+0x3e>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	491d      	ldr	r1, [pc, #116]	; (8009bc8 <vTaskSwitchContext+0xbc>)
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	440b      	add	r3, r1
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0e4      	beq.n	8009b30 <vTaskSwitchContext+0x24>
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <vTaskSwitchContext+0xbc>)
 8009b72:	4413      	add	r3, r2
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	605a      	str	r2, [r3, #4]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3308      	adds	r3, #8
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d104      	bne.n	8009b96 <vTaskSwitchContext+0x8a>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	605a      	str	r2, [r3, #4]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	4a0b      	ldr	r2, [pc, #44]	; (8009bcc <vTaskSwitchContext+0xc0>)
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <vTaskSwitchContext+0xb8>)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <vTaskSwitchContext+0xc0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3354      	adds	r3, #84	; 0x54
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <vTaskSwitchContext+0xc4>)
 8009bae:	6013      	str	r3, [r2, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	2000191c 	.word	0x2000191c
 8009bc0:	20001908 	.word	0x20001908
 8009bc4:	200018fc 	.word	0x200018fc
 8009bc8:	20001424 	.word	0x20001424
 8009bcc:	20001420 	.word	0x20001420
 8009bd0:	200000b8 	.word	0x200000b8

08009bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10a      	bne.n	8009bfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <vTaskPlaceOnEventList+0x44>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3318      	adds	r3, #24
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fe fe61 	bl	80088ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c08:	2101      	movs	r1, #1
 8009c0a:	6838      	ldr	r0, [r7, #0]
 8009c0c:	f000 fa80 	bl	800a110 <prvAddCurrentTaskToDelayedList>
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20001420 	.word	0x20001420

08009c1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	617b      	str	r3, [r7, #20]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <vTaskPlaceOnEventListRestricted+0x54>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3318      	adds	r3, #24
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7fe fe18 	bl	8008882 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	68b8      	ldr	r0, [r7, #8]
 8009c62:	f000 fa55 	bl	800a110 <prvAddCurrentTaskToDelayedList>
	}
 8009c66:	bf00      	nop
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20001420 	.word	0x20001420

08009c74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10a      	bne.n	8009ca0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	60fb      	str	r3, [r7, #12]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	3318      	adds	r3, #24
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe fe49 	bl	800893c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009caa:	4b1e      	ldr	r3, [pc, #120]	; (8009d24 <xTaskRemoveFromEventList+0xb0>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d11d      	bne.n	8009cee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fe40 	bl	800893c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <xTaskRemoveFromEventList+0xb4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d903      	bls.n	8009cd0 <xTaskRemoveFromEventList+0x5c>
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	4a16      	ldr	r2, [pc, #88]	; (8009d28 <xTaskRemoveFromEventList+0xb4>)
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4a13      	ldr	r2, [pc, #76]	; (8009d2c <xTaskRemoveFromEventList+0xb8>)
 8009cde:	441a      	add	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7fe fdcb 	bl	8008882 <vListInsertEnd>
 8009cec:	e005      	b.n	8009cfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	3318      	adds	r3, #24
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	480e      	ldr	r0, [pc, #56]	; (8009d30 <xTaskRemoveFromEventList+0xbc>)
 8009cf6:	f7fe fdc4 	bl	8008882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <xTaskRemoveFromEventList+0xc0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d905      	bls.n	8009d14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <xTaskRemoveFromEventList+0xc4>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e001      	b.n	8009d18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d18:	697b      	ldr	r3, [r7, #20]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	2000191c 	.word	0x2000191c
 8009d28:	200018fc 	.word	0x200018fc
 8009d2c:	20001424 	.word	0x20001424
 8009d30:	200018b4 	.word	0x200018b4
 8009d34:	20001420 	.word	0x20001420
 8009d38:	20001908 	.word	0x20001908

08009d3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <vTaskInternalSetTimeOutState+0x24>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <vTaskInternalSetTimeOutState+0x28>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	605a      	str	r2, [r3, #4]
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	2000190c 	.word	0x2000190c
 8009d64:	200018f8 	.word	0x200018f8

08009d68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10a      	bne.n	8009d8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	613b      	str	r3, [r7, #16]
}
 8009d8a:	bf00      	nop
 8009d8c:	e7fe      	b.n	8009d8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	60fb      	str	r3, [r7, #12]
}
 8009da6:	bf00      	nop
 8009da8:	e7fe      	b.n	8009da8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009daa:	f000 fe83 	bl	800aab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009dae:	4b1d      	ldr	r3, [pc, #116]	; (8009e24 <xTaskCheckForTimeOut+0xbc>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d102      	bne.n	8009dce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61fb      	str	r3, [r7, #28]
 8009dcc:	e023      	b.n	8009e16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <xTaskCheckForTimeOut+0xc0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d007      	beq.n	8009dea <xTaskCheckForTimeOut+0x82>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d302      	bcc.n	8009dea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009de4:	2301      	movs	r3, #1
 8009de6:	61fb      	str	r3, [r7, #28]
 8009de8:	e015      	b.n	8009e16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d20b      	bcs.n	8009e0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	1ad2      	subs	r2, r2, r3
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff ff9b 	bl	8009d3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e004      	b.n	8009e16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e12:	2301      	movs	r3, #1
 8009e14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e16:	f000 fe7d 	bl	800ab14 <vPortExitCritical>

	return xReturn;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	200018f8 	.word	0x200018f8
 8009e28:	2000190c 	.word	0x2000190c

08009e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <vTaskMissedYield+0x14>)
 8009e32:	2201      	movs	r2, #1
 8009e34:	601a      	str	r2, [r3, #0]
}
 8009e36:	bf00      	nop
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	20001908 	.word	0x20001908

08009e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e4c:	f000 f852 	bl	8009ef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <prvIdleTask+0x28>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d9f9      	bls.n	8009e4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <prvIdleTask+0x2c>)
 8009e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e68:	e7f0      	b.n	8009e4c <prvIdleTask+0x8>
 8009e6a:	bf00      	nop
 8009e6c:	20001424 	.word	0x20001424
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	e00c      	b.n	8009e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4a12      	ldr	r2, [pc, #72]	; (8009ed4 <prvInitialiseTaskLists+0x60>)
 8009e8c:	4413      	add	r3, r2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fcca 	bl	8008828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3301      	adds	r3, #1
 8009e98:	607b      	str	r3, [r7, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b37      	cmp	r3, #55	; 0x37
 8009e9e:	d9ef      	bls.n	8009e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ea0:	480d      	ldr	r0, [pc, #52]	; (8009ed8 <prvInitialiseTaskLists+0x64>)
 8009ea2:	f7fe fcc1 	bl	8008828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ea6:	480d      	ldr	r0, [pc, #52]	; (8009edc <prvInitialiseTaskLists+0x68>)
 8009ea8:	f7fe fcbe 	bl	8008828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009eac:	480c      	ldr	r0, [pc, #48]	; (8009ee0 <prvInitialiseTaskLists+0x6c>)
 8009eae:	f7fe fcbb 	bl	8008828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009eb2:	480c      	ldr	r0, [pc, #48]	; (8009ee4 <prvInitialiseTaskLists+0x70>)
 8009eb4:	f7fe fcb8 	bl	8008828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009eb8:	480b      	ldr	r0, [pc, #44]	; (8009ee8 <prvInitialiseTaskLists+0x74>)
 8009eba:	f7fe fcb5 	bl	8008828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <prvInitialiseTaskLists+0x78>)
 8009ec0:	4a05      	ldr	r2, [pc, #20]	; (8009ed8 <prvInitialiseTaskLists+0x64>)
 8009ec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <prvInitialiseTaskLists+0x7c>)
 8009ec6:	4a05      	ldr	r2, [pc, #20]	; (8009edc <prvInitialiseTaskLists+0x68>)
 8009ec8:	601a      	str	r2, [r3, #0]
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20001424 	.word	0x20001424
 8009ed8:	20001884 	.word	0x20001884
 8009edc:	20001898 	.word	0x20001898
 8009ee0:	200018b4 	.word	0x200018b4
 8009ee4:	200018c8 	.word	0x200018c8
 8009ee8:	200018e0 	.word	0x200018e0
 8009eec:	200018ac 	.word	0x200018ac
 8009ef0:	200018b0 	.word	0x200018b0

08009ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009efa:	e019      	b.n	8009f30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009efc:	f000 fdda 	bl	800aab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f00:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <prvCheckTasksWaitingTermination+0x50>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fd15 	bl	800893c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f12:	4b0d      	ldr	r3, [pc, #52]	; (8009f48 <prvCheckTasksWaitingTermination+0x54>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	4a0b      	ldr	r2, [pc, #44]	; (8009f48 <prvCheckTasksWaitingTermination+0x54>)
 8009f1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <prvCheckTasksWaitingTermination+0x58>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	4a0a      	ldr	r2, [pc, #40]	; (8009f4c <prvCheckTasksWaitingTermination+0x58>)
 8009f24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f26:	f000 fdf5 	bl	800ab14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f810 	bl	8009f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f30:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <prvCheckTasksWaitingTermination+0x58>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e1      	bne.n	8009efc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	200018c8 	.word	0x200018c8
 8009f48:	200018f4 	.word	0x200018f4
 8009f4c:	200018dc 	.word	0x200018dc

08009f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3354      	adds	r3, #84	; 0x54
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 fb1f 	bl	800b5a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d108      	bne.n	8009f7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 ff8d 	bl	800ae90 <vPortFree>
				vPortFree( pxTCB );
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 ff8a 	bl	800ae90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f7c:	e018      	b.n	8009fb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d103      	bne.n	8009f90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 ff81 	bl	800ae90 <vPortFree>
	}
 8009f8e:	e00f      	b.n	8009fb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d00a      	beq.n	8009fb0 <prvDeleteTCB+0x60>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60fb      	str	r3, [r7, #12]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <prvDeleteTCB+0x5e>
	}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fbe:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <prvResetNextTaskUnblockTime+0x38>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d104      	bne.n	8009fd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8009fca:	f04f 32ff 	mov.w	r2, #4294967295
 8009fce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fd0:	e008      	b.n	8009fe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd2:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <prvResetNextTaskUnblockTime+0x38>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	4a04      	ldr	r2, [pc, #16]	; (8009ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8009fe2:	6013      	str	r3, [r2, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	200018ac 	.word	0x200018ac
 8009ff4:	20001914 	.word	0x20001914

08009ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <xTaskGetSchedulerState+0x34>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a006:	2301      	movs	r3, #1
 800a008:	607b      	str	r3, [r7, #4]
 800a00a:	e008      	b.n	800a01e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a00c:	4b08      	ldr	r3, [pc, #32]	; (800a030 <xTaskGetSchedulerState+0x38>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a014:	2302      	movs	r3, #2
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	e001      	b.n	800a01e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a01a:	2300      	movs	r3, #0
 800a01c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a01e:	687b      	ldr	r3, [r7, #4]
	}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20001900 	.word	0x20001900
 800a030:	2000191c 	.word	0x2000191c

0800a034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d056      	beq.n	800a0f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a04a:	4b2e      	ldr	r3, [pc, #184]	; (800a104 <xTaskPriorityDisinherit+0xd0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	d00a      	beq.n	800a06a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60bb      	str	r3, [r7, #8]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08c:	1e5a      	subs	r2, r3, #1
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d02c      	beq.n	800a0f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d128      	bne.n	800a0f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fc46 	bl	800893c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	4b0f      	ldr	r3, [pc, #60]	; (800a108 <xTaskPriorityDisinherit+0xd4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d903      	bls.n	800a0d8 <xTaskPriorityDisinherit+0xa4>
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	4a0c      	ldr	r2, [pc, #48]	; (800a108 <xTaskPriorityDisinherit+0xd4>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a09      	ldr	r2, [pc, #36]	; (800a10c <xTaskPriorityDisinherit+0xd8>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fe fbc7 	bl	8008882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0f8:	697b      	ldr	r3, [r7, #20]
	}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20001420 	.word	0x20001420
 800a108:	200018fc 	.word	0x200018fc
 800a10c:	20001424 	.word	0x20001424

0800a110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11a:	4b21      	ldr	r3, [pc, #132]	; (800a1a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a120:	4b20      	ldr	r3, [pc, #128]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fc08 	bl	800893c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a132:	d10a      	bne.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a13a:	4b1a      	ldr	r3, [pc, #104]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4819      	ldr	r0, [pc, #100]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a144:	f7fe fb9d 	bl	8008882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a148:	e026      	b.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a152:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d209      	bcs.n	800a176 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7fe fbab 	bl	80088ca <vListInsert>
}
 800a174:	e010      	b.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a176:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	4b0a      	ldr	r3, [pc, #40]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe fba1 	bl	80088ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d202      	bcs.n	800a198 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a192:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200018f8 	.word	0x200018f8
 800a1a4:	20001420 	.word	0x20001420
 800a1a8:	200018e0 	.word	0x200018e0
 800a1ac:	200018b0 	.word	0x200018b0
 800a1b0:	200018ac 	.word	0x200018ac
 800a1b4:	20001914 	.word	0x20001914

0800a1b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1c2:	f000 fb07 	bl	800a7d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1c6:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <xTimerCreateTimerTask+0x80>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d021      	beq.n	800a212 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1d6:	1d3a      	adds	r2, r7, #4
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fe fb07 	bl	80087f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	9202      	str	r2, [sp, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	460a      	mov	r2, r1
 800a1f8:	4910      	ldr	r1, [pc, #64]	; (800a23c <xTimerCreateTimerTask+0x84>)
 800a1fa:	4811      	ldr	r0, [pc, #68]	; (800a240 <xTimerCreateTimerTask+0x88>)
 800a1fc:	f7ff f8b4 	bl	8009368 <xTaskCreateStatic>
 800a200:	4603      	mov	r3, r0
 800a202:	4a10      	ldr	r2, [pc, #64]	; (800a244 <xTimerCreateTimerTask+0x8c>)
 800a204:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <xTimerCreateTimerTask+0x8c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a20e:	2301      	movs	r3, #1
 800a210:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	613b      	str	r3, [r7, #16]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a22e:	697b      	ldr	r3, [r7, #20]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20001950 	.word	0x20001950
 800a23c:	0800c340 	.word	0x0800c340
 800a240:	0800a37d 	.word	0x0800a37d
 800a244:	20001954 	.word	0x20001954

0800a248 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08a      	sub	sp, #40	; 0x28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a256:	2300      	movs	r3, #0
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	623b      	str	r3, [r7, #32]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <xTimerGenericCommand+0x98>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d02a      	beq.n	800a2d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b05      	cmp	r3, #5
 800a28e:	dc18      	bgt.n	800a2c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a290:	f7ff feb2 	bl	8009ff8 <xTaskGetSchedulerState>
 800a294:	4603      	mov	r3, r0
 800a296:	2b02      	cmp	r3, #2
 800a298:	d109      	bne.n	800a2ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a29a:	4b11      	ldr	r3, [pc, #68]	; (800a2e0 <xTimerGenericCommand+0x98>)
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	f107 0110 	add.w	r1, r7, #16
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a6:	f7fe fc77 	bl	8008b98 <xQueueGenericSend>
 800a2aa:	6278      	str	r0, [r7, #36]	; 0x24
 800a2ac:	e012      	b.n	800a2d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2ae:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <xTimerGenericCommand+0x98>)
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f107 0110 	add.w	r1, r7, #16
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f7fe fc6d 	bl	8008b98 <xQueueGenericSend>
 800a2be:	6278      	str	r0, [r7, #36]	; 0x24
 800a2c0:	e008      	b.n	800a2d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2c2:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <xTimerGenericCommand+0x98>)
 800a2c4:	6818      	ldr	r0, [r3, #0]
 800a2c6:	f107 0110 	add.w	r1, r7, #16
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	f7fe fd61 	bl	8008d94 <xQueueGenericSendFromISR>
 800a2d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3728      	adds	r7, #40	; 0x28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20001950 	.word	0x20001950

0800a2e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ee:	4b22      	ldr	r3, [pc, #136]	; (800a378 <prvProcessExpiredTimer+0x94>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fb1d 	bl	800893c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d022      	beq.n	800a356 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	699a      	ldr	r2, [r3, #24]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	18d1      	adds	r1, r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	6978      	ldr	r0, [r7, #20]
 800a31e:	f000 f8d1 	bl	800a4c4 <prvInsertTimerInActiveList>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01f      	beq.n	800a368 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	2300      	movs	r3, #0
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	2100      	movs	r1, #0
 800a332:	6978      	ldr	r0, [r7, #20]
 800a334:	f7ff ff88 	bl	800a248 <xTimerGenericCommand>
 800a338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d113      	bne.n	800a368 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	60fb      	str	r3, [r7, #12]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35c:	f023 0301 	bic.w	r3, r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	6a1b      	ldr	r3, [r3, #32]
 800a36c:	6978      	ldr	r0, [r7, #20]
 800a36e:	4798      	blx	r3
}
 800a370:	bf00      	nop
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20001948 	.word	0x20001948

0800a37c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a384:	f107 0308 	add.w	r3, r7, #8
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 f857 	bl	800a43c <prvGetNextExpireTime>
 800a38e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	4619      	mov	r1, r3
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 f803 	bl	800a3a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a39a:	f000 f8d5 	bl	800a548 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a39e:	e7f1      	b.n	800a384 <prvTimerTask+0x8>

0800a3a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3aa:	f7ff fa39 	bl	8009820 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ae:	f107 0308 	add.w	r3, r7, #8
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f866 	bl	800a484 <prvSampleTimeNow>
 800a3b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d130      	bne.n	800a422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10a      	bne.n	800a3dc <prvProcessTimerOrBlockTask+0x3c>
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d806      	bhi.n	800a3dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3ce:	f7ff fa35 	bl	800983c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff ff85 	bl	800a2e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3da:	e024      	b.n	800a426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d008      	beq.n	800a3f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <prvProcessTimerOrBlockTask+0x90>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <prvProcessTimerOrBlockTask+0x50>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <prvProcessTimerOrBlockTask+0x52>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <prvProcessTimerOrBlockTask+0x94>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	4619      	mov	r1, r3
 800a402:	f7fe ff7d 	bl	8009300 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a406:	f7ff fa19 	bl	800983c <xTaskResumeAll>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <prvProcessTimerOrBlockTask+0x98>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
}
 800a420:	e001      	b.n	800a426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a422:	f7ff fa0b 	bl	800983c <xTaskResumeAll>
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2000194c 	.word	0x2000194c
 800a434:	20001950 	.word	0x20001950
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <prvGetNextExpireTime+0x44>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <prvGetNextExpireTime+0x16>
 800a44e:	2201      	movs	r2, #1
 800a450:	e000      	b.n	800a454 <prvGetNextExpireTime+0x18>
 800a452:	2200      	movs	r2, #0
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <prvGetNextExpireTime+0x44>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	e001      	b.n	800a470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	20001948 	.word	0x20001948

0800a484 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a48c:	f7ff fa74 	bl	8009978 <xTaskGetTickCount>
 800a490:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a492:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <prvSampleTimeNow+0x3c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d205      	bcs.n	800a4a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a49c:	f000 f936 	bl	800a70c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	e002      	b.n	800a4ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4ae:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <prvSampleTimeNow+0x3c>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20001958 	.word	0x20001958

0800a4c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d812      	bhi.n	800a510 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	1ad2      	subs	r2, r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d302      	bcc.n	800a4fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e01b      	b.n	800a536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4fe:	4b10      	ldr	r3, [pc, #64]	; (800a540 <prvInsertTimerInActiveList+0x7c>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3304      	adds	r3, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7fe f9de 	bl	80088ca <vListInsert>
 800a50e:	e012      	b.n	800a536 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	429a      	cmp	r2, r3
 800a516:	d206      	bcs.n	800a526 <prvInsertTimerInActiveList+0x62>
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d302      	bcc.n	800a526 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a520:	2301      	movs	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	e007      	b.n	800a536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a526:	4b07      	ldr	r3, [pc, #28]	; (800a544 <prvInsertTimerInActiveList+0x80>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3304      	adds	r3, #4
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7fe f9ca 	bl	80088ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a536:	697b      	ldr	r3, [r7, #20]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	2000194c 	.word	0x2000194c
 800a544:	20001948 	.word	0x20001948

0800a548 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08e      	sub	sp, #56	; 0x38
 800a54c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a54e:	e0ca      	b.n	800a6e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	da18      	bge.n	800a588 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a556:	1d3b      	adds	r3, r7, #4
 800a558:	3304      	adds	r3, #4
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	61fb      	str	r3, [r7, #28]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a57e:	6850      	ldr	r0, [r2, #4]
 800a580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a582:	6892      	ldr	r2, [r2, #8]
 800a584:	4611      	mov	r1, r2
 800a586:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f2c0 80aa 	blt.w	800a6e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe f9cb 	bl	800893c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff ff6b 	bl	800a484 <prvSampleTimeNow>
 800a5ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b09      	cmp	r3, #9
 800a5b4:	f200 8097 	bhi.w	800a6e6 <prvProcessReceivedCommands+0x19e>
 800a5b8:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <prvProcessReceivedCommands+0x78>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a5e9 	.word	0x0800a5e9
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5e9 	.word	0x0800a5e9
 800a5cc:	0800a65d 	.word	0x0800a65d
 800a5d0:	0800a671 	.word	0x0800a671
 800a5d4:	0800a6bb 	.word	0x0800a6bb
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a5e9 	.word	0x0800a5e9
 800a5e0:	0800a65d 	.word	0x0800a65d
 800a5e4:	0800a671 	.word	0x0800a671
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ee:	f043 0301 	orr.w	r3, r3, #1
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	18d1      	adds	r1, r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a608:	f7ff ff5c 	bl	800a4c4 <prvInsertTimerInActiveList>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d069      	beq.n	800a6e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a618:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	d05e      	beq.n	800a6e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	441a      	add	r2, r3
 800a630:	2300      	movs	r3, #0
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	2300      	movs	r3, #0
 800a636:	2100      	movs	r1, #0
 800a638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63a:	f7ff fe05 	bl	800a248 <xTimerGenericCommand>
 800a63e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d14f      	bne.n	800a6e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	61bb      	str	r3, [r7, #24]
}
 800a658:	bf00      	nop
 800a65a:	e7fe      	b.n	800a65a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	b2da      	uxtb	r2, r3
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a66e:	e03a      	b.n	800a6e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a676:	f043 0301 	orr.w	r3, r3, #1
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	617b      	str	r3, [r7, #20]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	18d1      	adds	r1, r2, r3
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b4:	f7ff ff06 	bl	800a4c4 <prvInsertTimerInActiveList>
					break;
 800a6b8:	e015      	b.n	800a6e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6c0:	f003 0302 	and.w	r3, r3, #2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d103      	bne.n	800a6d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ca:	f000 fbe1 	bl	800ae90 <vPortFree>
 800a6ce:	e00a      	b.n	800a6e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6d6:	f023 0301 	bic.w	r3, r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6e2:	e000      	b.n	800a6e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6e6:	4b08      	ldr	r3, [pc, #32]	; (800a708 <prvProcessReceivedCommands+0x1c0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	1d39      	adds	r1, r7, #4
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fbec 	bl	8008ecc <xQueueReceive>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f47f af2a 	bne.w	800a550 <prvProcessReceivedCommands+0x8>
	}
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	3730      	adds	r7, #48	; 0x30
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20001950 	.word	0x20001950

0800a70c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a712:	e048      	b.n	800a7a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a714:	4b2d      	ldr	r3, [pc, #180]	; (800a7cc <prvSwitchTimerLists+0xc0>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71e:	4b2b      	ldr	r3, [pc, #172]	; (800a7cc <prvSwitchTimerLists+0xc0>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe f905 	bl	800893c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02e      	beq.n	800a7a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	429a      	cmp	r2, r3
 800a758:	d90e      	bls.n	800a778 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a766:	4b19      	ldr	r3, [pc, #100]	; (800a7cc <prvSwitchTimerLists+0xc0>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3304      	adds	r3, #4
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f7fe f8aa 	bl	80088ca <vListInsert>
 800a776:	e016      	b.n	800a7a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a778:	2300      	movs	r3, #0
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	2100      	movs	r1, #0
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f7ff fd60 	bl	800a248 <xTimerGenericCommand>
 800a788:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	603b      	str	r3, [r7, #0]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <prvSwitchTimerLists+0xc0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1b1      	bne.n	800a714 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7b0:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <prvSwitchTimerLists+0xc0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7b6:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a04      	ldr	r2, [pc, #16]	; (800a7cc <prvSwitchTimerLists+0xc0>)
 800a7bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7be:	4a04      	ldr	r2, [pc, #16]	; (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	6013      	str	r3, [r2, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20001948 	.word	0x20001948
 800a7d0:	2000194c 	.word	0x2000194c

0800a7d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7da:	f000 f96b 	bl	800aab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7de:	4b15      	ldr	r3, [pc, #84]	; (800a834 <prvCheckForValidListAndQueue+0x60>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d120      	bne.n	800a828 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7e6:	4814      	ldr	r0, [pc, #80]	; (800a838 <prvCheckForValidListAndQueue+0x64>)
 800a7e8:	f7fe f81e 	bl	8008828 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7ec:	4813      	ldr	r0, [pc, #76]	; (800a83c <prvCheckForValidListAndQueue+0x68>)
 800a7ee:	f7fe f81b 	bl	8008828 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <prvCheckForValidListAndQueue+0x6c>)
 800a7f4:	4a10      	ldr	r2, [pc, #64]	; (800a838 <prvCheckForValidListAndQueue+0x64>)
 800a7f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7f8:	4b12      	ldr	r3, [pc, #72]	; (800a844 <prvCheckForValidListAndQueue+0x70>)
 800a7fa:	4a10      	ldr	r2, [pc, #64]	; (800a83c <prvCheckForValidListAndQueue+0x68>)
 800a7fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7fe:	2300      	movs	r3, #0
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	4b11      	ldr	r3, [pc, #68]	; (800a848 <prvCheckForValidListAndQueue+0x74>)
 800a804:	4a11      	ldr	r2, [pc, #68]	; (800a84c <prvCheckForValidListAndQueue+0x78>)
 800a806:	2110      	movs	r1, #16
 800a808:	200a      	movs	r0, #10
 800a80a:	f7fe f929 	bl	8008a60 <xQueueGenericCreateStatic>
 800a80e:	4603      	mov	r3, r0
 800a810:	4a08      	ldr	r2, [pc, #32]	; (800a834 <prvCheckForValidListAndQueue+0x60>)
 800a812:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a814:	4b07      	ldr	r3, [pc, #28]	; (800a834 <prvCheckForValidListAndQueue+0x60>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d005      	beq.n	800a828 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <prvCheckForValidListAndQueue+0x60>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	490b      	ldr	r1, [pc, #44]	; (800a850 <prvCheckForValidListAndQueue+0x7c>)
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fd42 	bl	80092ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a828:	f000 f974 	bl	800ab14 <vPortExitCritical>
}
 800a82c:	bf00      	nop
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20001950 	.word	0x20001950
 800a838:	20001920 	.word	0x20001920
 800a83c:	20001934 	.word	0x20001934
 800a840:	20001948 	.word	0x20001948
 800a844:	2000194c 	.word	0x2000194c
 800a848:	200019fc 	.word	0x200019fc
 800a84c:	2000195c 	.word	0x2000195c
 800a850:	0800c348 	.word	0x0800c348

0800a854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3b04      	subs	r3, #4
 800a864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a86c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b04      	subs	r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f023 0201 	bic.w	r2, r3, #1
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b04      	subs	r3, #4
 800a882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a884:	4a0c      	ldr	r2, [pc, #48]	; (800a8b8 <pxPortInitialiseStack+0x64>)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b14      	subs	r3, #20
 800a88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3b04      	subs	r3, #4
 800a89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f06f 0202 	mvn.w	r2, #2
 800a8a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3b20      	subs	r3, #32
 800a8a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	0800a8bd 	.word	0x0800a8bd

0800a8bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8c6:	4b12      	ldr	r3, [pc, #72]	; (800a910 <prvTaskExitError+0x54>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ce:	d00a      	beq.n	800a8e6 <prvTaskExitError+0x2a>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	60fb      	str	r3, [r7, #12]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <prvTaskExitError+0x28>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60bb      	str	r3, [r7, #8]
}
 800a8f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8fa:	bf00      	nop
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0fc      	beq.n	800a8fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a902:	bf00      	nop
 800a904:	bf00      	nop
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	200000b4 	.word	0x200000b4
	...

0800a920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <pxCurrentTCBConst2>)
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	6808      	ldr	r0, [r1, #0]
 800a926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	f380 8809 	msr	PSP, r0
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8811 	msr	BASEPRI, r0
 800a93a:	4770      	bx	lr
 800a93c:	f3af 8000 	nop.w

0800a940 <pxCurrentTCBConst2>:
 800a940:	20001420 	.word	0x20001420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop

0800a948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a948:	4808      	ldr	r0, [pc, #32]	; (800a96c <prvPortStartFirstTask+0x24>)
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	6800      	ldr	r0, [r0, #0]
 800a94e:	f380 8808 	msr	MSP, r0
 800a952:	f04f 0000 	mov.w	r0, #0
 800a956:	f380 8814 	msr	CONTROL, r0
 800a95a:	b662      	cpsie	i
 800a95c:	b661      	cpsie	f
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	df00      	svc	0
 800a968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a96a:	bf00      	nop
 800a96c:	e000ed08 	.word	0xe000ed08

0800a970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a976:	4b46      	ldr	r3, [pc, #280]	; (800aa90 <xPortStartScheduler+0x120>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a46      	ldr	r2, [pc, #280]	; (800aa94 <xPortStartScheduler+0x124>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d10a      	bne.n	800a996 <xPortStartScheduler+0x26>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	613b      	str	r3, [r7, #16]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a996:	4b3e      	ldr	r3, [pc, #248]	; (800aa90 <xPortStartScheduler+0x120>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a3f      	ldr	r2, [pc, #252]	; (800aa98 <xPortStartScheduler+0x128>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d10a      	bne.n	800a9b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60fb      	str	r3, [r7, #12]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9b6:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <xPortStartScheduler+0x12c>)
 800a9b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	22ff      	movs	r2, #255	; 0xff
 800a9c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4b31      	ldr	r3, [pc, #196]	; (800aaa0 <xPortStartScheduler+0x130>)
 800a9dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9de:	4b31      	ldr	r3, [pc, #196]	; (800aaa4 <xPortStartScheduler+0x134>)
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e4:	e009      	b.n	800a9fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a9e6:	4b2f      	ldr	r3, [pc, #188]	; (800aaa4 <xPortStartScheduler+0x134>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a2d      	ldr	r2, [pc, #180]	; (800aaa4 <xPortStartScheduler+0x134>)
 800a9ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa02:	2b80      	cmp	r3, #128	; 0x80
 800aa04:	d0ef      	beq.n	800a9e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa06:	4b27      	ldr	r3, [pc, #156]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f1c3 0307 	rsb	r3, r3, #7
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d00a      	beq.n	800aa28 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	60bb      	str	r3, [r7, #8]
}
 800aa24:	bf00      	nop
 800aa26:	e7fe      	b.n	800aa26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa28:	4b1e      	ldr	r3, [pc, #120]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	021b      	lsls	r3, r3, #8
 800aa2e:	4a1d      	ldr	r2, [pc, #116]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa32:	4b1c      	ldr	r3, [pc, #112]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa3a:	4a1a      	ldr	r2, [pc, #104]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa46:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa5e:	f000 f8dd 	bl	800ac1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa62:	4b12      	ldr	r3, [pc, #72]	; (800aaac <xPortStartScheduler+0x13c>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa68:	f000 f8fc 	bl	800ac64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa6c:	4b10      	ldr	r3, [pc, #64]	; (800aab0 <xPortStartScheduler+0x140>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0f      	ldr	r2, [pc, #60]	; (800aab0 <xPortStartScheduler+0x140>)
 800aa72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa78:	f7ff ff66 	bl	800a948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa7c:	f7ff f846 	bl	8009b0c <vTaskSwitchContext>
	prvTaskExitError();
 800aa80:	f7ff ff1c 	bl	800a8bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	e000ed00 	.word	0xe000ed00
 800aa94:	410fc271 	.word	0x410fc271
 800aa98:	410fc270 	.word	0x410fc270
 800aa9c:	e000e400 	.word	0xe000e400
 800aaa0:	20001a4c 	.word	0x20001a4c
 800aaa4:	20001a50 	.word	0x20001a50
 800aaa8:	e000ed20 	.word	0xe000ed20
 800aaac:	200000b4 	.word	0x200000b4
 800aab0:	e000ef34 	.word	0xe000ef34

0800aab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	607b      	str	r3, [r7, #4]
}
 800aacc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <vPortEnterCritical+0x58>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	4a0d      	ldr	r2, [pc, #52]	; (800ab0c <vPortEnterCritical+0x58>)
 800aad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <vPortEnterCritical+0x58>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d10f      	bne.n	800ab00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aae0:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <vPortEnterCritical+0x5c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <vPortEnterCritical+0x4c>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	603b      	str	r3, [r7, #0]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <vPortEnterCritical+0x4a>
	}
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	200000b4 	.word	0x200000b4
 800ab10:	e000ed04 	.word	0xe000ed04

0800ab14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab1a:	4b12      	ldr	r3, [pc, #72]	; (800ab64 <vPortExitCritical+0x50>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <vPortExitCritical+0x24>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	607b      	str	r3, [r7, #4]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab38:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <vPortExitCritical+0x50>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <vPortExitCritical+0x50>)
 800ab40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab42:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <vPortExitCritical+0x50>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <vPortExitCritical+0x42>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	f383 8811 	msr	BASEPRI, r3
}
 800ab54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	200000b4 	.word	0x200000b4
	...

0800ab70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab70:	f3ef 8009 	mrs	r0, PSP
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4b15      	ldr	r3, [pc, #84]	; (800abd0 <pxCurrentTCBConst>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f01e 0f10 	tst.w	lr, #16
 800ab80:	bf08      	it	eq
 800ab82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab94:	f380 8811 	msr	BASEPRI, r0
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f7fe ffb4 	bl	8009b0c <vTaskSwitchContext>
 800aba4:	f04f 0000 	mov.w	r0, #0
 800aba8:	f380 8811 	msr	BASEPRI, r0
 800abac:	bc09      	pop	{r0, r3}
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	6808      	ldr	r0, [r1, #0]
 800abb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb6:	f01e 0f10 	tst.w	lr, #16
 800abba:	bf08      	it	eq
 800abbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abc0:	f380 8809 	msr	PSP, r0
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w

0800abd0 <pxCurrentTCBConst>:
 800abd0:	20001420 	.word	0x20001420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop

0800abd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abf2:	f7fe fed1 	bl	8009998 <xTaskIncrementTick>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abfc:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <xPortSysTickHandler+0x40>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	2300      	movs	r3, #0
 800ac06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f383 8811 	msr	BASEPRI, r3
}
 800ac0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac20:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac26:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <vPortSetupTimerInterrupt+0x38>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <vPortSetupTimerInterrupt+0x3c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a0a      	ldr	r2, [pc, #40]	; (800ac5c <vPortSetupTimerInterrupt+0x40>)
 800ac32:	fba2 2303 	umull	r2, r3, r2, r3
 800ac36:	099b      	lsrs	r3, r3, #6
 800ac38:	4a09      	ldr	r2, [pc, #36]	; (800ac60 <vPortSetupTimerInterrupt+0x44>)
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac3e:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac40:	2207      	movs	r2, #7
 800ac42:	601a      	str	r2, [r3, #0]
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	e000e010 	.word	0xe000e010
 800ac54:	e000e018 	.word	0xe000e018
 800ac58:	200000a8 	.word	0x200000a8
 800ac5c:	10624dd3 	.word	0x10624dd3
 800ac60:	e000e014 	.word	0xe000e014

0800ac64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac74 <vPortEnableVFP+0x10>
 800ac68:	6801      	ldr	r1, [r0, #0]
 800ac6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac6e:	6001      	str	r1, [r0, #0]
 800ac70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac72:	bf00      	nop
 800ac74:	e000ed88 	.word	0xe000ed88

0800ac78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac7e:	f3ef 8305 	mrs	r3, IPSR
 800ac82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d914      	bls.n	800acb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac8a:	4a17      	ldr	r2, [pc, #92]	; (800ace8 <vPortValidateInterruptPriority+0x70>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac94:	4b15      	ldr	r3, [pc, #84]	; (800acec <vPortValidateInterruptPriority+0x74>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	7afa      	ldrb	r2, [r7, #11]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d20a      	bcs.n	800acb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acb4:	4b0e      	ldr	r3, [pc, #56]	; (800acf0 <vPortValidateInterruptPriority+0x78>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acbc:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <vPortValidateInterruptPriority+0x7c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d90a      	bls.n	800acda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	603b      	str	r3, [r7, #0]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <vPortValidateInterruptPriority+0x60>
	}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	e000e3f0 	.word	0xe000e3f0
 800acec:	20001a4c 	.word	0x20001a4c
 800acf0:	e000ed0c 	.word	0xe000ed0c
 800acf4:	20001a50 	.word	0x20001a50

0800acf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08a      	sub	sp, #40	; 0x28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad04:	f7fe fd8c 	bl	8009820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad08:	4b5b      	ldr	r3, [pc, #364]	; (800ae78 <pvPortMalloc+0x180>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad10:	f000 f920 	bl	800af54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad14:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <pvPortMalloc+0x184>)
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f040 8093 	bne.w	800ae48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d01d      	beq.n	800ad64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad28:	2208      	movs	r2, #8
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d014      	beq.n	800ad64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f023 0307 	bic.w	r3, r3, #7
 800ad40:	3308      	adds	r3, #8
 800ad42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f003 0307 	and.w	r3, r3, #7
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <pvPortMalloc+0x6c>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	617b      	str	r3, [r7, #20]
}
 800ad60:	bf00      	nop
 800ad62:	e7fe      	b.n	800ad62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d06e      	beq.n	800ae48 <pvPortMalloc+0x150>
 800ad6a:	4b45      	ldr	r3, [pc, #276]	; (800ae80 <pvPortMalloc+0x188>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d869      	bhi.n	800ae48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad74:	4b43      	ldr	r3, [pc, #268]	; (800ae84 <pvPortMalloc+0x18c>)
 800ad76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad78:	4b42      	ldr	r3, [pc, #264]	; (800ae84 <pvPortMalloc+0x18c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad7e:	e004      	b.n	800ad8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d903      	bls.n	800ad9c <pvPortMalloc+0xa4>
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1f1      	bne.n	800ad80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad9c:	4b36      	ldr	r3, [pc, #216]	; (800ae78 <pvPortMalloc+0x180>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d050      	beq.n	800ae48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2208      	movs	r2, #8
 800adac:	4413      	add	r3, r2
 800adae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	2308      	movs	r3, #8
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d91f      	bls.n	800ae08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4413      	add	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <pvPortMalloc+0xf8>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	613b      	str	r3, [r7, #16]
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	1ad2      	subs	r2, r2, r3
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae02:	69b8      	ldr	r0, [r7, #24]
 800ae04:	f000 f908 	bl	800b018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <pvPortMalloc+0x188>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	4a1b      	ldr	r2, [pc, #108]	; (800ae80 <pvPortMalloc+0x188>)
 800ae14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae16:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <pvPortMalloc+0x188>)
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <pvPortMalloc+0x190>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d203      	bcs.n	800ae2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae22:	4b17      	ldr	r3, [pc, #92]	; (800ae80 <pvPortMalloc+0x188>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a18      	ldr	r2, [pc, #96]	; (800ae88 <pvPortMalloc+0x190>)
 800ae28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <pvPortMalloc+0x184>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	431a      	orrs	r2, r3
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <pvPortMalloc+0x194>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	4a11      	ldr	r2, [pc, #68]	; (800ae8c <pvPortMalloc+0x194>)
 800ae46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae48:	f7fe fcf8 	bl	800983c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <pvPortMalloc+0x174>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60fb      	str	r3, [r7, #12]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <pvPortMalloc+0x172>
	return pvReturn;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3728      	adds	r7, #40	; 0x28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	2000565c 	.word	0x2000565c
 800ae7c:	20005670 	.word	0x20005670
 800ae80:	20005660 	.word	0x20005660
 800ae84:	20005654 	.word	0x20005654
 800ae88:	20005664 	.word	0x20005664
 800ae8c:	20005668 	.word	0x20005668

0800ae90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d04d      	beq.n	800af3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aea2:	2308      	movs	r3, #8
 800aea4:	425b      	negs	r3, r3
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	4b24      	ldr	r3, [pc, #144]	; (800af48 <vPortFree+0xb8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <vPortFree+0x44>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	60fb      	str	r3, [r7, #12]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <vPortFree+0x62>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	60bb      	str	r3, [r7, #8]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	4b14      	ldr	r3, [pc, #80]	; (800af48 <vPortFree+0xb8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4013      	ands	r3, r2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01e      	beq.n	800af3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d11a      	bne.n	800af3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <vPortFree+0xb8>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	43db      	mvns	r3, r3
 800af12:	401a      	ands	r2, r3
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af18:	f7fe fc82 	bl	8009820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <vPortFree+0xbc>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4413      	add	r3, r2
 800af26:	4a09      	ldr	r2, [pc, #36]	; (800af4c <vPortFree+0xbc>)
 800af28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af2a:	6938      	ldr	r0, [r7, #16]
 800af2c:	f000 f874 	bl	800b018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af30:	4b07      	ldr	r3, [pc, #28]	; (800af50 <vPortFree+0xc0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3301      	adds	r3, #1
 800af36:	4a06      	ldr	r2, [pc, #24]	; (800af50 <vPortFree+0xc0>)
 800af38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af3a:	f7fe fc7f 	bl	800983c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af3e:	bf00      	nop
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20005670 	.word	0x20005670
 800af4c:	20005660 	.word	0x20005660
 800af50:	2000566c 	.word	0x2000566c

0800af54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800af5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af60:	4b27      	ldr	r3, [pc, #156]	; (800b000 <prvHeapInit+0xac>)
 800af62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00c      	beq.n	800af88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3307      	adds	r3, #7
 800af72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0307 	bic.w	r3, r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	4a1f      	ldr	r2, [pc, #124]	; (800b000 <prvHeapInit+0xac>)
 800af84:	4413      	add	r3, r2
 800af86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af8c:	4a1d      	ldr	r2, [pc, #116]	; (800b004 <prvHeapInit+0xb0>)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <prvHeapInit+0xb0>)
 800af94:	2200      	movs	r2, #0
 800af96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afa0:	2208      	movs	r2, #8
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f023 0307 	bic.w	r3, r3, #7
 800afae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a15      	ldr	r2, [pc, #84]	; (800b008 <prvHeapInit+0xb4>)
 800afb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afb6:	4b14      	ldr	r3, [pc, #80]	; (800b008 <prvHeapInit+0xb4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2200      	movs	r2, #0
 800afbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afbe:	4b12      	ldr	r3, [pc, #72]	; (800b008 <prvHeapInit+0xb4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	1ad2      	subs	r2, r2, r3
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afd4:	4b0c      	ldr	r3, [pc, #48]	; (800b008 <prvHeapInit+0xb4>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	4a0a      	ldr	r2, [pc, #40]	; (800b00c <prvHeapInit+0xb8>)
 800afe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	4a09      	ldr	r2, [pc, #36]	; (800b010 <prvHeapInit+0xbc>)
 800afea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <prvHeapInit+0xc0>)
 800afee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aff2:	601a      	str	r2, [r3, #0]
}
 800aff4:	bf00      	nop
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	20001a54 	.word	0x20001a54
 800b004:	20005654 	.word	0x20005654
 800b008:	2000565c 	.word	0x2000565c
 800b00c:	20005664 	.word	0x20005664
 800b010:	20005660 	.word	0x20005660
 800b014:	20005670 	.word	0x20005670

0800b018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b020:	4b28      	ldr	r3, [pc, #160]	; (800b0c4 <prvInsertBlockIntoFreeList+0xac>)
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e002      	b.n	800b02c <prvInsertBlockIntoFreeList+0x14>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	429a      	cmp	r2, r3
 800b034:	d8f7      	bhi.n	800b026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	4413      	add	r3, r2
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	429a      	cmp	r2, r3
 800b046:	d108      	bne.n	800b05a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	441a      	add	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	441a      	add	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d118      	bne.n	800b0a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d00d      	beq.n	800b096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	441a      	add	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	e008      	b.n	800b0a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	e003      	b.n	800b0a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d002      	beq.n	800b0b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20005654 	.word	0x20005654
 800b0c8:	2000565c 	.word	0x2000565c

0800b0cc <__errno>:
 800b0cc:	4b01      	ldr	r3, [pc, #4]	; (800b0d4 <__errno+0x8>)
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	200000b8 	.word	0x200000b8

0800b0d8 <std>:
 800b0d8:	2300      	movs	r3, #0
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	4604      	mov	r4, r0
 800b0de:	e9c0 3300 	strd	r3, r3, [r0]
 800b0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0e6:	6083      	str	r3, [r0, #8]
 800b0e8:	8181      	strh	r1, [r0, #12]
 800b0ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b0ec:	81c2      	strh	r2, [r0, #14]
 800b0ee:	6183      	str	r3, [r0, #24]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	2208      	movs	r2, #8
 800b0f4:	305c      	adds	r0, #92	; 0x5c
 800b0f6:	f000 f91a 	bl	800b32e <memset>
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <std+0x38>)
 800b0fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <std+0x3c>)
 800b100:	62a3      	str	r3, [r4, #40]	; 0x28
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <std+0x40>)
 800b104:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <std+0x44>)
 800b108:	6224      	str	r4, [r4, #32]
 800b10a:	6323      	str	r3, [r4, #48]	; 0x30
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	0800b679 	.word	0x0800b679
 800b114:	0800b69b 	.word	0x0800b69b
 800b118:	0800b6d3 	.word	0x0800b6d3
 800b11c:	0800b6f7 	.word	0x0800b6f7

0800b120 <_cleanup_r>:
 800b120:	4901      	ldr	r1, [pc, #4]	; (800b128 <_cleanup_r+0x8>)
 800b122:	f000 b8af 	b.w	800b284 <_fwalk_reent>
 800b126:	bf00      	nop
 800b128:	0800b9d1 	.word	0x0800b9d1

0800b12c <__sfmoreglue>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	2268      	movs	r2, #104	; 0x68
 800b130:	1e4d      	subs	r5, r1, #1
 800b132:	4355      	muls	r5, r2
 800b134:	460e      	mov	r6, r1
 800b136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b13a:	f000 f921 	bl	800b380 <_malloc_r>
 800b13e:	4604      	mov	r4, r0
 800b140:	b140      	cbz	r0, 800b154 <__sfmoreglue+0x28>
 800b142:	2100      	movs	r1, #0
 800b144:	e9c0 1600 	strd	r1, r6, [r0]
 800b148:	300c      	adds	r0, #12
 800b14a:	60a0      	str	r0, [r4, #8]
 800b14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b150:	f000 f8ed 	bl	800b32e <memset>
 800b154:	4620      	mov	r0, r4
 800b156:	bd70      	pop	{r4, r5, r6, pc}

0800b158 <__sfp_lock_acquire>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__sfp_lock_acquire+0x8>)
 800b15a:	f000 b8d8 	b.w	800b30e <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	20005675 	.word	0x20005675

0800b164 <__sfp_lock_release>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__sfp_lock_release+0x8>)
 800b166:	f000 b8d3 	b.w	800b310 <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	20005675 	.word	0x20005675

0800b170 <__sinit_lock_acquire>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__sinit_lock_acquire+0x8>)
 800b172:	f000 b8cc 	b.w	800b30e <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	20005676 	.word	0x20005676

0800b17c <__sinit_lock_release>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sinit_lock_release+0x8>)
 800b17e:	f000 b8c7 	b.w	800b310 <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	20005676 	.word	0x20005676

0800b188 <__sinit>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	4604      	mov	r4, r0
 800b18c:	f7ff fff0 	bl	800b170 <__sinit_lock_acquire>
 800b190:	69a3      	ldr	r3, [r4, #24]
 800b192:	b11b      	cbz	r3, 800b19c <__sinit+0x14>
 800b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b198:	f7ff bff0 	b.w	800b17c <__sinit_lock_release>
 800b19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b1a2:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <__sinit+0x68>)
 800b1a4:	4a13      	ldr	r2, [pc, #76]	; (800b1f4 <__sinit+0x6c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	bf04      	itt	eq
 800b1ae:	2301      	moveq	r3, #1
 800b1b0:	61a3      	streq	r3, [r4, #24]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 f820 	bl	800b1f8 <__sfp>
 800b1b8:	6060      	str	r0, [r4, #4]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f81c 	bl	800b1f8 <__sfp>
 800b1c0:	60a0      	str	r0, [r4, #8]
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 f818 	bl	800b1f8 <__sfp>
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	60e0      	str	r0, [r4, #12]
 800b1cc:	2104      	movs	r1, #4
 800b1ce:	6860      	ldr	r0, [r4, #4]
 800b1d0:	f7ff ff82 	bl	800b0d8 <std>
 800b1d4:	68a0      	ldr	r0, [r4, #8]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	2109      	movs	r1, #9
 800b1da:	f7ff ff7d 	bl	800b0d8 <std>
 800b1de:	68e0      	ldr	r0, [r4, #12]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	2112      	movs	r1, #18
 800b1e4:	f7ff ff78 	bl	800b0d8 <std>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	61a3      	str	r3, [r4, #24]
 800b1ec:	e7d2      	b.n	800b194 <__sinit+0xc>
 800b1ee:	bf00      	nop
 800b1f0:	0800c458 	.word	0x0800c458
 800b1f4:	0800b121 	.word	0x0800b121

0800b1f8 <__sfp>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	f7ff ffac 	bl	800b158 <__sfp_lock_acquire>
 800b200:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <__sfp+0x84>)
 800b202:	681e      	ldr	r6, [r3, #0]
 800b204:	69b3      	ldr	r3, [r6, #24]
 800b206:	b913      	cbnz	r3, 800b20e <__sfp+0x16>
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff ffbd 	bl	800b188 <__sinit>
 800b20e:	3648      	adds	r6, #72	; 0x48
 800b210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b214:	3b01      	subs	r3, #1
 800b216:	d503      	bpl.n	800b220 <__sfp+0x28>
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	b30b      	cbz	r3, 800b260 <__sfp+0x68>
 800b21c:	6836      	ldr	r6, [r6, #0]
 800b21e:	e7f7      	b.n	800b210 <__sfp+0x18>
 800b220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b224:	b9d5      	cbnz	r5, 800b25c <__sfp+0x64>
 800b226:	4b16      	ldr	r3, [pc, #88]	; (800b280 <__sfp+0x88>)
 800b228:	60e3      	str	r3, [r4, #12]
 800b22a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b22e:	6665      	str	r5, [r4, #100]	; 0x64
 800b230:	f000 f86c 	bl	800b30c <__retarget_lock_init_recursive>
 800b234:	f7ff ff96 	bl	800b164 <__sfp_lock_release>
 800b238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b23c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b240:	6025      	str	r5, [r4, #0]
 800b242:	61a5      	str	r5, [r4, #24]
 800b244:	2208      	movs	r2, #8
 800b246:	4629      	mov	r1, r5
 800b248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b24c:	f000 f86f 	bl	800b32e <memset>
 800b250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b258:	4620      	mov	r0, r4
 800b25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25c:	3468      	adds	r4, #104	; 0x68
 800b25e:	e7d9      	b.n	800b214 <__sfp+0x1c>
 800b260:	2104      	movs	r1, #4
 800b262:	4638      	mov	r0, r7
 800b264:	f7ff ff62 	bl	800b12c <__sfmoreglue>
 800b268:	4604      	mov	r4, r0
 800b26a:	6030      	str	r0, [r6, #0]
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d1d5      	bne.n	800b21c <__sfp+0x24>
 800b270:	f7ff ff78 	bl	800b164 <__sfp_lock_release>
 800b274:	230c      	movs	r3, #12
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	e7ee      	b.n	800b258 <__sfp+0x60>
 800b27a:	bf00      	nop
 800b27c:	0800c458 	.word	0x0800c458
 800b280:	ffff0001 	.word	0xffff0001

0800b284 <_fwalk_reent>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	4606      	mov	r6, r0
 800b28a:	4688      	mov	r8, r1
 800b28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b290:	2700      	movs	r7, #0
 800b292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b296:	f1b9 0901 	subs.w	r9, r9, #1
 800b29a:	d505      	bpl.n	800b2a8 <_fwalk_reent+0x24>
 800b29c:	6824      	ldr	r4, [r4, #0]
 800b29e:	2c00      	cmp	r4, #0
 800b2a0:	d1f7      	bne.n	800b292 <_fwalk_reent+0xe>
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a8:	89ab      	ldrh	r3, [r5, #12]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d907      	bls.n	800b2be <_fwalk_reent+0x3a>
 800b2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	d003      	beq.n	800b2be <_fwalk_reent+0x3a>
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	47c0      	blx	r8
 800b2bc:	4307      	orrs	r7, r0
 800b2be:	3568      	adds	r5, #104	; 0x68
 800b2c0:	e7e9      	b.n	800b296 <_fwalk_reent+0x12>
	...

0800b2c4 <__libc_init_array>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4d0d      	ldr	r5, [pc, #52]	; (800b2fc <__libc_init_array+0x38>)
 800b2c8:	4c0d      	ldr	r4, [pc, #52]	; (800b300 <__libc_init_array+0x3c>)
 800b2ca:	1b64      	subs	r4, r4, r5
 800b2cc:	10a4      	asrs	r4, r4, #2
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	42a6      	cmp	r6, r4
 800b2d2:	d109      	bne.n	800b2e8 <__libc_init_array+0x24>
 800b2d4:	4d0b      	ldr	r5, [pc, #44]	; (800b304 <__libc_init_array+0x40>)
 800b2d6:	4c0c      	ldr	r4, [pc, #48]	; (800b308 <__libc_init_array+0x44>)
 800b2d8:	f000 ffa8 	bl	800c22c <_init>
 800b2dc:	1b64      	subs	r4, r4, r5
 800b2de:	10a4      	asrs	r4, r4, #2
 800b2e0:	2600      	movs	r6, #0
 800b2e2:	42a6      	cmp	r6, r4
 800b2e4:	d105      	bne.n	800b2f2 <__libc_init_array+0x2e>
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ec:	4798      	blx	r3
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7ee      	b.n	800b2d0 <__libc_init_array+0xc>
 800b2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f6:	4798      	blx	r3
 800b2f8:	3601      	adds	r6, #1
 800b2fa:	e7f2      	b.n	800b2e2 <__libc_init_array+0x1e>
 800b2fc:	0800c498 	.word	0x0800c498
 800b300:	0800c498 	.word	0x0800c498
 800b304:	0800c498 	.word	0x0800c498
 800b308:	0800c49c 	.word	0x0800c49c

0800b30c <__retarget_lock_init_recursive>:
 800b30c:	4770      	bx	lr

0800b30e <__retarget_lock_acquire_recursive>:
 800b30e:	4770      	bx	lr

0800b310 <__retarget_lock_release_recursive>:
 800b310:	4770      	bx	lr

0800b312 <memcpy>:
 800b312:	440a      	add	r2, r1
 800b314:	4291      	cmp	r1, r2
 800b316:	f100 33ff 	add.w	r3, r0, #4294967295
 800b31a:	d100      	bne.n	800b31e <memcpy+0xc>
 800b31c:	4770      	bx	lr
 800b31e:	b510      	push	{r4, lr}
 800b320:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b324:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b328:	4291      	cmp	r1, r2
 800b32a:	d1f9      	bne.n	800b320 <memcpy+0xe>
 800b32c:	bd10      	pop	{r4, pc}

0800b32e <memset>:
 800b32e:	4402      	add	r2, r0
 800b330:	4603      	mov	r3, r0
 800b332:	4293      	cmp	r3, r2
 800b334:	d100      	bne.n	800b338 <memset+0xa>
 800b336:	4770      	bx	lr
 800b338:	f803 1b01 	strb.w	r1, [r3], #1
 800b33c:	e7f9      	b.n	800b332 <memset+0x4>
	...

0800b340 <sbrk_aligned>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	4e0e      	ldr	r6, [pc, #56]	; (800b37c <sbrk_aligned+0x3c>)
 800b344:	460c      	mov	r4, r1
 800b346:	6831      	ldr	r1, [r6, #0]
 800b348:	4605      	mov	r5, r0
 800b34a:	b911      	cbnz	r1, 800b352 <sbrk_aligned+0x12>
 800b34c:	f000 f984 	bl	800b658 <_sbrk_r>
 800b350:	6030      	str	r0, [r6, #0]
 800b352:	4621      	mov	r1, r4
 800b354:	4628      	mov	r0, r5
 800b356:	f000 f97f 	bl	800b658 <_sbrk_r>
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	d00a      	beq.n	800b374 <sbrk_aligned+0x34>
 800b35e:	1cc4      	adds	r4, r0, #3
 800b360:	f024 0403 	bic.w	r4, r4, #3
 800b364:	42a0      	cmp	r0, r4
 800b366:	d007      	beq.n	800b378 <sbrk_aligned+0x38>
 800b368:	1a21      	subs	r1, r4, r0
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 f974 	bl	800b658 <_sbrk_r>
 800b370:	3001      	adds	r0, #1
 800b372:	d101      	bne.n	800b378 <sbrk_aligned+0x38>
 800b374:	f04f 34ff 	mov.w	r4, #4294967295
 800b378:	4620      	mov	r0, r4
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	2000567c 	.word	0x2000567c

0800b380 <_malloc_r>:
 800b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b384:	1ccd      	adds	r5, r1, #3
 800b386:	f025 0503 	bic.w	r5, r5, #3
 800b38a:	3508      	adds	r5, #8
 800b38c:	2d0c      	cmp	r5, #12
 800b38e:	bf38      	it	cc
 800b390:	250c      	movcc	r5, #12
 800b392:	2d00      	cmp	r5, #0
 800b394:	4607      	mov	r7, r0
 800b396:	db01      	blt.n	800b39c <_malloc_r+0x1c>
 800b398:	42a9      	cmp	r1, r5
 800b39a:	d905      	bls.n	800b3a8 <_malloc_r+0x28>
 800b39c:	230c      	movs	r3, #12
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	2600      	movs	r6, #0
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a8:	4e2e      	ldr	r6, [pc, #184]	; (800b464 <_malloc_r+0xe4>)
 800b3aa:	f000 fbc5 	bl	800bb38 <__malloc_lock>
 800b3ae:	6833      	ldr	r3, [r6, #0]
 800b3b0:	461c      	mov	r4, r3
 800b3b2:	bb34      	cbnz	r4, 800b402 <_malloc_r+0x82>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	f7ff ffc2 	bl	800b340 <sbrk_aligned>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	4604      	mov	r4, r0
 800b3c0:	d14d      	bne.n	800b45e <_malloc_r+0xde>
 800b3c2:	6834      	ldr	r4, [r6, #0]
 800b3c4:	4626      	mov	r6, r4
 800b3c6:	2e00      	cmp	r6, #0
 800b3c8:	d140      	bne.n	800b44c <_malloc_r+0xcc>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	eb04 0803 	add.w	r8, r4, r3
 800b3d4:	f000 f940 	bl	800b658 <_sbrk_r>
 800b3d8:	4580      	cmp	r8, r0
 800b3da:	d13a      	bne.n	800b452 <_malloc_r+0xd2>
 800b3dc:	6821      	ldr	r1, [r4, #0]
 800b3de:	3503      	adds	r5, #3
 800b3e0:	1a6d      	subs	r5, r5, r1
 800b3e2:	f025 0503 	bic.w	r5, r5, #3
 800b3e6:	3508      	adds	r5, #8
 800b3e8:	2d0c      	cmp	r5, #12
 800b3ea:	bf38      	it	cc
 800b3ec:	250c      	movcc	r5, #12
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff ffa5 	bl	800b340 <sbrk_aligned>
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d02b      	beq.n	800b452 <_malloc_r+0xd2>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	442b      	add	r3, r5
 800b3fe:	6023      	str	r3, [r4, #0]
 800b400:	e00e      	b.n	800b420 <_malloc_r+0xa0>
 800b402:	6822      	ldr	r2, [r4, #0]
 800b404:	1b52      	subs	r2, r2, r5
 800b406:	d41e      	bmi.n	800b446 <_malloc_r+0xc6>
 800b408:	2a0b      	cmp	r2, #11
 800b40a:	d916      	bls.n	800b43a <_malloc_r+0xba>
 800b40c:	1961      	adds	r1, r4, r5
 800b40e:	42a3      	cmp	r3, r4
 800b410:	6025      	str	r5, [r4, #0]
 800b412:	bf18      	it	ne
 800b414:	6059      	strne	r1, [r3, #4]
 800b416:	6863      	ldr	r3, [r4, #4]
 800b418:	bf08      	it	eq
 800b41a:	6031      	streq	r1, [r6, #0]
 800b41c:	5162      	str	r2, [r4, r5]
 800b41e:	604b      	str	r3, [r1, #4]
 800b420:	4638      	mov	r0, r7
 800b422:	f104 060b 	add.w	r6, r4, #11
 800b426:	f000 fb8d 	bl	800bb44 <__malloc_unlock>
 800b42a:	f026 0607 	bic.w	r6, r6, #7
 800b42e:	1d23      	adds	r3, r4, #4
 800b430:	1af2      	subs	r2, r6, r3
 800b432:	d0b6      	beq.n	800b3a2 <_malloc_r+0x22>
 800b434:	1b9b      	subs	r3, r3, r6
 800b436:	50a3      	str	r3, [r4, r2]
 800b438:	e7b3      	b.n	800b3a2 <_malloc_r+0x22>
 800b43a:	6862      	ldr	r2, [r4, #4]
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	bf0c      	ite	eq
 800b440:	6032      	streq	r2, [r6, #0]
 800b442:	605a      	strne	r2, [r3, #4]
 800b444:	e7ec      	b.n	800b420 <_malloc_r+0xa0>
 800b446:	4623      	mov	r3, r4
 800b448:	6864      	ldr	r4, [r4, #4]
 800b44a:	e7b2      	b.n	800b3b2 <_malloc_r+0x32>
 800b44c:	4634      	mov	r4, r6
 800b44e:	6876      	ldr	r6, [r6, #4]
 800b450:	e7b9      	b.n	800b3c6 <_malloc_r+0x46>
 800b452:	230c      	movs	r3, #12
 800b454:	603b      	str	r3, [r7, #0]
 800b456:	4638      	mov	r0, r7
 800b458:	f000 fb74 	bl	800bb44 <__malloc_unlock>
 800b45c:	e7a1      	b.n	800b3a2 <_malloc_r+0x22>
 800b45e:	6025      	str	r5, [r4, #0]
 800b460:	e7de      	b.n	800b420 <_malloc_r+0xa0>
 800b462:	bf00      	nop
 800b464:	20005678 	.word	0x20005678

0800b468 <iprintf>:
 800b468:	b40f      	push	{r0, r1, r2, r3}
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <iprintf+0x2c>)
 800b46c:	b513      	push	{r0, r1, r4, lr}
 800b46e:	681c      	ldr	r4, [r3, #0]
 800b470:	b124      	cbz	r4, 800b47c <iprintf+0x14>
 800b472:	69a3      	ldr	r3, [r4, #24]
 800b474:	b913      	cbnz	r3, 800b47c <iprintf+0x14>
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff fe86 	bl	800b188 <__sinit>
 800b47c:	ab05      	add	r3, sp, #20
 800b47e:	9a04      	ldr	r2, [sp, #16]
 800b480:	68a1      	ldr	r1, [r4, #8]
 800b482:	9301      	str	r3, [sp, #4]
 800b484:	4620      	mov	r0, r4
 800b486:	f000 fbd9 	bl	800bc3c <_vfiprintf_r>
 800b48a:	b002      	add	sp, #8
 800b48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b490:	b004      	add	sp, #16
 800b492:	4770      	bx	lr
 800b494:	200000b8 	.word	0x200000b8

0800b498 <_puts_r>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	460e      	mov	r6, r1
 800b49c:	4605      	mov	r5, r0
 800b49e:	b118      	cbz	r0, 800b4a8 <_puts_r+0x10>
 800b4a0:	6983      	ldr	r3, [r0, #24]
 800b4a2:	b90b      	cbnz	r3, 800b4a8 <_puts_r+0x10>
 800b4a4:	f7ff fe70 	bl	800b188 <__sinit>
 800b4a8:	69ab      	ldr	r3, [r5, #24]
 800b4aa:	68ac      	ldr	r4, [r5, #8]
 800b4ac:	b913      	cbnz	r3, 800b4b4 <_puts_r+0x1c>
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f7ff fe6a 	bl	800b188 <__sinit>
 800b4b4:	4b2c      	ldr	r3, [pc, #176]	; (800b568 <_puts_r+0xd0>)
 800b4b6:	429c      	cmp	r4, r3
 800b4b8:	d120      	bne.n	800b4fc <_puts_r+0x64>
 800b4ba:	686c      	ldr	r4, [r5, #4]
 800b4bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4be:	07db      	lsls	r3, r3, #31
 800b4c0:	d405      	bmi.n	800b4ce <_puts_r+0x36>
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	0598      	lsls	r0, r3, #22
 800b4c6:	d402      	bmi.n	800b4ce <_puts_r+0x36>
 800b4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ca:	f7ff ff20 	bl	800b30e <__retarget_lock_acquire_recursive>
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	0719      	lsls	r1, r3, #28
 800b4d2:	d51d      	bpl.n	800b510 <_puts_r+0x78>
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	b1db      	cbz	r3, 800b510 <_puts_r+0x78>
 800b4d8:	3e01      	subs	r6, #1
 800b4da:	68a3      	ldr	r3, [r4, #8]
 800b4dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	60a3      	str	r3, [r4, #8]
 800b4e4:	bb39      	cbnz	r1, 800b536 <_puts_r+0x9e>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	da38      	bge.n	800b55c <_puts_r+0xc4>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	210a      	movs	r1, #10
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	f000 f906 	bl	800b700 <__swbuf_r>
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d011      	beq.n	800b51c <_puts_r+0x84>
 800b4f8:	250a      	movs	r5, #10
 800b4fa:	e011      	b.n	800b520 <_puts_r+0x88>
 800b4fc:	4b1b      	ldr	r3, [pc, #108]	; (800b56c <_puts_r+0xd4>)
 800b4fe:	429c      	cmp	r4, r3
 800b500:	d101      	bne.n	800b506 <_puts_r+0x6e>
 800b502:	68ac      	ldr	r4, [r5, #8]
 800b504:	e7da      	b.n	800b4bc <_puts_r+0x24>
 800b506:	4b1a      	ldr	r3, [pc, #104]	; (800b570 <_puts_r+0xd8>)
 800b508:	429c      	cmp	r4, r3
 800b50a:	bf08      	it	eq
 800b50c:	68ec      	ldreq	r4, [r5, #12]
 800b50e:	e7d5      	b.n	800b4bc <_puts_r+0x24>
 800b510:	4621      	mov	r1, r4
 800b512:	4628      	mov	r0, r5
 800b514:	f000 f958 	bl	800b7c8 <__swsetup_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d0dd      	beq.n	800b4d8 <_puts_r+0x40>
 800b51c:	f04f 35ff 	mov.w	r5, #4294967295
 800b520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b522:	07da      	lsls	r2, r3, #31
 800b524:	d405      	bmi.n	800b532 <_puts_r+0x9a>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	059b      	lsls	r3, r3, #22
 800b52a:	d402      	bmi.n	800b532 <_puts_r+0x9a>
 800b52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b52e:	f7ff feef 	bl	800b310 <__retarget_lock_release_recursive>
 800b532:	4628      	mov	r0, r5
 800b534:	bd70      	pop	{r4, r5, r6, pc}
 800b536:	2b00      	cmp	r3, #0
 800b538:	da04      	bge.n	800b544 <_puts_r+0xac>
 800b53a:	69a2      	ldr	r2, [r4, #24]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	dc06      	bgt.n	800b54e <_puts_r+0xb6>
 800b540:	290a      	cmp	r1, #10
 800b542:	d004      	beq.n	800b54e <_puts_r+0xb6>
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	6022      	str	r2, [r4, #0]
 800b54a:	7019      	strb	r1, [r3, #0]
 800b54c:	e7c5      	b.n	800b4da <_puts_r+0x42>
 800b54e:	4622      	mov	r2, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f000 f8d5 	bl	800b700 <__swbuf_r>
 800b556:	3001      	adds	r0, #1
 800b558:	d1bf      	bne.n	800b4da <_puts_r+0x42>
 800b55a:	e7df      	b.n	800b51c <_puts_r+0x84>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	250a      	movs	r5, #10
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	6022      	str	r2, [r4, #0]
 800b564:	701d      	strb	r5, [r3, #0]
 800b566:	e7db      	b.n	800b520 <_puts_r+0x88>
 800b568:	0800c418 	.word	0x0800c418
 800b56c:	0800c438 	.word	0x0800c438
 800b570:	0800c3f8 	.word	0x0800c3f8

0800b574 <puts>:
 800b574:	4b02      	ldr	r3, [pc, #8]	; (800b580 <puts+0xc>)
 800b576:	4601      	mov	r1, r0
 800b578:	6818      	ldr	r0, [r3, #0]
 800b57a:	f7ff bf8d 	b.w	800b498 <_puts_r>
 800b57e:	bf00      	nop
 800b580:	200000b8 	.word	0x200000b8

0800b584 <cleanup_glue>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	460c      	mov	r4, r1
 800b588:	6809      	ldr	r1, [r1, #0]
 800b58a:	4605      	mov	r5, r0
 800b58c:	b109      	cbz	r1, 800b592 <cleanup_glue+0xe>
 800b58e:	f7ff fff9 	bl	800b584 <cleanup_glue>
 800b592:	4621      	mov	r1, r4
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b59a:	f000 bad9 	b.w	800bb50 <_free_r>
	...

0800b5a0 <_reclaim_reent>:
 800b5a0:	4b2c      	ldr	r3, [pc, #176]	; (800b654 <_reclaim_reent+0xb4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4283      	cmp	r3, r0
 800b5a6:	b570      	push	{r4, r5, r6, lr}
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	d051      	beq.n	800b650 <_reclaim_reent+0xb0>
 800b5ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b5ae:	b143      	cbz	r3, 800b5c2 <_reclaim_reent+0x22>
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d14a      	bne.n	800b64c <_reclaim_reent+0xac>
 800b5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b8:	6819      	ldr	r1, [r3, #0]
 800b5ba:	b111      	cbz	r1, 800b5c2 <_reclaim_reent+0x22>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fac7 	bl	800bb50 <_free_r>
 800b5c2:	6961      	ldr	r1, [r4, #20]
 800b5c4:	b111      	cbz	r1, 800b5cc <_reclaim_reent+0x2c>
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 fac2 	bl	800bb50 <_free_r>
 800b5cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b5ce:	b111      	cbz	r1, 800b5d6 <_reclaim_reent+0x36>
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 fabd 	bl	800bb50 <_free_r>
 800b5d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b5d8:	b111      	cbz	r1, 800b5e0 <_reclaim_reent+0x40>
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 fab8 	bl	800bb50 <_free_r>
 800b5e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b5e2:	b111      	cbz	r1, 800b5ea <_reclaim_reent+0x4a>
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 fab3 	bl	800bb50 <_free_r>
 800b5ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b5ec:	b111      	cbz	r1, 800b5f4 <_reclaim_reent+0x54>
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f000 faae 	bl	800bb50 <_free_r>
 800b5f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b5f6:	b111      	cbz	r1, 800b5fe <_reclaim_reent+0x5e>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 faa9 	bl	800bb50 <_free_r>
 800b5fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b600:	b111      	cbz	r1, 800b608 <_reclaim_reent+0x68>
 800b602:	4620      	mov	r0, r4
 800b604:	f000 faa4 	bl	800bb50 <_free_r>
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	b111      	cbz	r1, 800b612 <_reclaim_reent+0x72>
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 fa9f 	bl	800bb50 <_free_r>
 800b612:	69a3      	ldr	r3, [r4, #24]
 800b614:	b1e3      	cbz	r3, 800b650 <_reclaim_reent+0xb0>
 800b616:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b618:	4620      	mov	r0, r4
 800b61a:	4798      	blx	r3
 800b61c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b61e:	b1b9      	cbz	r1, 800b650 <_reclaim_reent+0xb0>
 800b620:	4620      	mov	r0, r4
 800b622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b626:	f7ff bfad 	b.w	800b584 <cleanup_glue>
 800b62a:	5949      	ldr	r1, [r1, r5]
 800b62c:	b941      	cbnz	r1, 800b640 <_reclaim_reent+0xa0>
 800b62e:	3504      	adds	r5, #4
 800b630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b632:	2d80      	cmp	r5, #128	; 0x80
 800b634:	68d9      	ldr	r1, [r3, #12]
 800b636:	d1f8      	bne.n	800b62a <_reclaim_reent+0x8a>
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fa89 	bl	800bb50 <_free_r>
 800b63e:	e7ba      	b.n	800b5b6 <_reclaim_reent+0x16>
 800b640:	680e      	ldr	r6, [r1, #0]
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fa84 	bl	800bb50 <_free_r>
 800b648:	4631      	mov	r1, r6
 800b64a:	e7ef      	b.n	800b62c <_reclaim_reent+0x8c>
 800b64c:	2500      	movs	r5, #0
 800b64e:	e7ef      	b.n	800b630 <_reclaim_reent+0x90>
 800b650:	bd70      	pop	{r4, r5, r6, pc}
 800b652:	bf00      	nop
 800b654:	200000b8 	.word	0x200000b8

0800b658 <_sbrk_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	; (800b674 <_sbrk_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f6 fed4 	bl	8002410 <_sbrk>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_sbrk_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_sbrk_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	20005680 	.word	0x20005680

0800b678 <__sread>:
 800b678:	b510      	push	{r4, lr}
 800b67a:	460c      	mov	r4, r1
 800b67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b680:	f000 fda0 	bl	800c1c4 <_read_r>
 800b684:	2800      	cmp	r0, #0
 800b686:	bfab      	itete	ge
 800b688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b68a:	89a3      	ldrhlt	r3, [r4, #12]
 800b68c:	181b      	addge	r3, r3, r0
 800b68e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b692:	bfac      	ite	ge
 800b694:	6563      	strge	r3, [r4, #84]	; 0x54
 800b696:	81a3      	strhlt	r3, [r4, #12]
 800b698:	bd10      	pop	{r4, pc}

0800b69a <__swrite>:
 800b69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69e:	461f      	mov	r7, r3
 800b6a0:	898b      	ldrh	r3, [r1, #12]
 800b6a2:	05db      	lsls	r3, r3, #23
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4616      	mov	r6, r2
 800b6aa:	d505      	bpl.n	800b6b8 <__swrite+0x1e>
 800b6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f000 f9c8 	bl	800ba48 <_lseek_r>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	4632      	mov	r2, r6
 800b6c6:	463b      	mov	r3, r7
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ce:	f000 b869 	b.w	800b7a4 <_write_r>

0800b6d2 <__sseek>:
 800b6d2:	b510      	push	{r4, lr}
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6da:	f000 f9b5 	bl	800ba48 <_lseek_r>
 800b6de:	1c43      	adds	r3, r0, #1
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	bf15      	itete	ne
 800b6e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6ee:	81a3      	strheq	r3, [r4, #12]
 800b6f0:	bf18      	it	ne
 800b6f2:	81a3      	strhne	r3, [r4, #12]
 800b6f4:	bd10      	pop	{r4, pc}

0800b6f6 <__sclose>:
 800b6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fa:	f000 b8d3 	b.w	800b8a4 <_close_r>
	...

0800b700 <__swbuf_r>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	460e      	mov	r6, r1
 800b704:	4614      	mov	r4, r2
 800b706:	4605      	mov	r5, r0
 800b708:	b118      	cbz	r0, 800b712 <__swbuf_r+0x12>
 800b70a:	6983      	ldr	r3, [r0, #24]
 800b70c:	b90b      	cbnz	r3, 800b712 <__swbuf_r+0x12>
 800b70e:	f7ff fd3b 	bl	800b188 <__sinit>
 800b712:	4b21      	ldr	r3, [pc, #132]	; (800b798 <__swbuf_r+0x98>)
 800b714:	429c      	cmp	r4, r3
 800b716:	d12b      	bne.n	800b770 <__swbuf_r+0x70>
 800b718:	686c      	ldr	r4, [r5, #4]
 800b71a:	69a3      	ldr	r3, [r4, #24]
 800b71c:	60a3      	str	r3, [r4, #8]
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	071a      	lsls	r2, r3, #28
 800b722:	d52f      	bpl.n	800b784 <__swbuf_r+0x84>
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	b36b      	cbz	r3, 800b784 <__swbuf_r+0x84>
 800b728:	6923      	ldr	r3, [r4, #16]
 800b72a:	6820      	ldr	r0, [r4, #0]
 800b72c:	1ac0      	subs	r0, r0, r3
 800b72e:	6963      	ldr	r3, [r4, #20]
 800b730:	b2f6      	uxtb	r6, r6
 800b732:	4283      	cmp	r3, r0
 800b734:	4637      	mov	r7, r6
 800b736:	dc04      	bgt.n	800b742 <__swbuf_r+0x42>
 800b738:	4621      	mov	r1, r4
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 f948 	bl	800b9d0 <_fflush_r>
 800b740:	bb30      	cbnz	r0, 800b790 <__swbuf_r+0x90>
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	3b01      	subs	r3, #1
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	701e      	strb	r6, [r3, #0]
 800b750:	6963      	ldr	r3, [r4, #20]
 800b752:	3001      	adds	r0, #1
 800b754:	4283      	cmp	r3, r0
 800b756:	d004      	beq.n	800b762 <__swbuf_r+0x62>
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	07db      	lsls	r3, r3, #31
 800b75c:	d506      	bpl.n	800b76c <__swbuf_r+0x6c>
 800b75e:	2e0a      	cmp	r6, #10
 800b760:	d104      	bne.n	800b76c <__swbuf_r+0x6c>
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 f933 	bl	800b9d0 <_fflush_r>
 800b76a:	b988      	cbnz	r0, 800b790 <__swbuf_r+0x90>
 800b76c:	4638      	mov	r0, r7
 800b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b770:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <__swbuf_r+0x9c>)
 800b772:	429c      	cmp	r4, r3
 800b774:	d101      	bne.n	800b77a <__swbuf_r+0x7a>
 800b776:	68ac      	ldr	r4, [r5, #8]
 800b778:	e7cf      	b.n	800b71a <__swbuf_r+0x1a>
 800b77a:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <__swbuf_r+0xa0>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	bf08      	it	eq
 800b780:	68ec      	ldreq	r4, [r5, #12]
 800b782:	e7ca      	b.n	800b71a <__swbuf_r+0x1a>
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f81e 	bl	800b7c8 <__swsetup_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0cb      	beq.n	800b728 <__swbuf_r+0x28>
 800b790:	f04f 37ff 	mov.w	r7, #4294967295
 800b794:	e7ea      	b.n	800b76c <__swbuf_r+0x6c>
 800b796:	bf00      	nop
 800b798:	0800c418 	.word	0x0800c418
 800b79c:	0800c438 	.word	0x0800c438
 800b7a0:	0800c3f8 	.word	0x0800c3f8

0800b7a4 <_write_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d07      	ldr	r5, [pc, #28]	; (800b7c4 <_write_r+0x20>)
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	4608      	mov	r0, r1
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	602a      	str	r2, [r5, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f7f6 fddb 	bl	800236e <_write>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_write_r+0x1e>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_write_r+0x1e>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20005680 	.word	0x20005680

0800b7c8 <__swsetup_r>:
 800b7c8:	4b32      	ldr	r3, [pc, #200]	; (800b894 <__swsetup_r+0xcc>)
 800b7ca:	b570      	push	{r4, r5, r6, lr}
 800b7cc:	681d      	ldr	r5, [r3, #0]
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	b125      	cbz	r5, 800b7de <__swsetup_r+0x16>
 800b7d4:	69ab      	ldr	r3, [r5, #24]
 800b7d6:	b913      	cbnz	r3, 800b7de <__swsetup_r+0x16>
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f7ff fcd5 	bl	800b188 <__sinit>
 800b7de:	4b2e      	ldr	r3, [pc, #184]	; (800b898 <__swsetup_r+0xd0>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	d10f      	bne.n	800b804 <__swsetup_r+0x3c>
 800b7e4:	686c      	ldr	r4, [r5, #4]
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ec:	0719      	lsls	r1, r3, #28
 800b7ee:	d42c      	bmi.n	800b84a <__swsetup_r+0x82>
 800b7f0:	06dd      	lsls	r5, r3, #27
 800b7f2:	d411      	bmi.n	800b818 <__swsetup_r+0x50>
 800b7f4:	2309      	movs	r3, #9
 800b7f6:	6033      	str	r3, [r6, #0]
 800b7f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7fc:	81a3      	strh	r3, [r4, #12]
 800b7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b802:	e03e      	b.n	800b882 <__swsetup_r+0xba>
 800b804:	4b25      	ldr	r3, [pc, #148]	; (800b89c <__swsetup_r+0xd4>)
 800b806:	429c      	cmp	r4, r3
 800b808:	d101      	bne.n	800b80e <__swsetup_r+0x46>
 800b80a:	68ac      	ldr	r4, [r5, #8]
 800b80c:	e7eb      	b.n	800b7e6 <__swsetup_r+0x1e>
 800b80e:	4b24      	ldr	r3, [pc, #144]	; (800b8a0 <__swsetup_r+0xd8>)
 800b810:	429c      	cmp	r4, r3
 800b812:	bf08      	it	eq
 800b814:	68ec      	ldreq	r4, [r5, #12]
 800b816:	e7e6      	b.n	800b7e6 <__swsetup_r+0x1e>
 800b818:	0758      	lsls	r0, r3, #29
 800b81a:	d512      	bpl.n	800b842 <__swsetup_r+0x7a>
 800b81c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b81e:	b141      	cbz	r1, 800b832 <__swsetup_r+0x6a>
 800b820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b824:	4299      	cmp	r1, r3
 800b826:	d002      	beq.n	800b82e <__swsetup_r+0x66>
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f991 	bl	800bb50 <_free_r>
 800b82e:	2300      	movs	r3, #0
 800b830:	6363      	str	r3, [r4, #52]	; 0x34
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	2300      	movs	r3, #0
 800b83c:	6063      	str	r3, [r4, #4]
 800b83e:	6923      	ldr	r3, [r4, #16]
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f043 0308 	orr.w	r3, r3, #8
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	b94b      	cbnz	r3, 800b862 <__swsetup_r+0x9a>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b858:	d003      	beq.n	800b862 <__swsetup_r+0x9a>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 f92b 	bl	800bab8 <__smakebuf_r>
 800b862:	89a0      	ldrh	r0, [r4, #12]
 800b864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b868:	f010 0301 	ands.w	r3, r0, #1
 800b86c:	d00a      	beq.n	800b884 <__swsetup_r+0xbc>
 800b86e:	2300      	movs	r3, #0
 800b870:	60a3      	str	r3, [r4, #8]
 800b872:	6963      	ldr	r3, [r4, #20]
 800b874:	425b      	negs	r3, r3
 800b876:	61a3      	str	r3, [r4, #24]
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	b943      	cbnz	r3, 800b88e <__swsetup_r+0xc6>
 800b87c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b880:	d1ba      	bne.n	800b7f8 <__swsetup_r+0x30>
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	0781      	lsls	r1, r0, #30
 800b886:	bf58      	it	pl
 800b888:	6963      	ldrpl	r3, [r4, #20]
 800b88a:	60a3      	str	r3, [r4, #8]
 800b88c:	e7f4      	b.n	800b878 <__swsetup_r+0xb0>
 800b88e:	2000      	movs	r0, #0
 800b890:	e7f7      	b.n	800b882 <__swsetup_r+0xba>
 800b892:	bf00      	nop
 800b894:	200000b8 	.word	0x200000b8
 800b898:	0800c418 	.word	0x0800c418
 800b89c:	0800c438 	.word	0x0800c438
 800b8a0:	0800c3f8 	.word	0x0800c3f8

0800b8a4 <_close_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_close_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f6 fd79 	bl	80023a6 <_close>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_close_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_close_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20005680 	.word	0x20005680

0800b8c4 <__sflush_r>:
 800b8c4:	898a      	ldrh	r2, [r1, #12]
 800b8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	0710      	lsls	r0, r2, #28
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	d458      	bmi.n	800b984 <__sflush_r+0xc0>
 800b8d2:	684b      	ldr	r3, [r1, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dc05      	bgt.n	800b8e4 <__sflush_r+0x20>
 800b8d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dc02      	bgt.n	800b8e4 <__sflush_r+0x20>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	d0f9      	beq.n	800b8de <__sflush_r+0x1a>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8f0:	682f      	ldr	r7, [r5, #0]
 800b8f2:	602b      	str	r3, [r5, #0]
 800b8f4:	d032      	beq.n	800b95c <__sflush_r+0x98>
 800b8f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	075a      	lsls	r2, r3, #29
 800b8fc:	d505      	bpl.n	800b90a <__sflush_r+0x46>
 800b8fe:	6863      	ldr	r3, [r4, #4]
 800b900:	1ac0      	subs	r0, r0, r3
 800b902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b904:	b10b      	cbz	r3, 800b90a <__sflush_r+0x46>
 800b906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b908:	1ac0      	subs	r0, r0, r3
 800b90a:	2300      	movs	r3, #0
 800b90c:	4602      	mov	r2, r0
 800b90e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b910:	6a21      	ldr	r1, [r4, #32]
 800b912:	4628      	mov	r0, r5
 800b914:	47b0      	blx	r6
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	d106      	bne.n	800b92a <__sflush_r+0x66>
 800b91c:	6829      	ldr	r1, [r5, #0]
 800b91e:	291d      	cmp	r1, #29
 800b920:	d82c      	bhi.n	800b97c <__sflush_r+0xb8>
 800b922:	4a2a      	ldr	r2, [pc, #168]	; (800b9cc <__sflush_r+0x108>)
 800b924:	40ca      	lsrs	r2, r1
 800b926:	07d6      	lsls	r6, r2, #31
 800b928:	d528      	bpl.n	800b97c <__sflush_r+0xb8>
 800b92a:	2200      	movs	r2, #0
 800b92c:	6062      	str	r2, [r4, #4]
 800b92e:	04d9      	lsls	r1, r3, #19
 800b930:	6922      	ldr	r2, [r4, #16]
 800b932:	6022      	str	r2, [r4, #0]
 800b934:	d504      	bpl.n	800b940 <__sflush_r+0x7c>
 800b936:	1c42      	adds	r2, r0, #1
 800b938:	d101      	bne.n	800b93e <__sflush_r+0x7a>
 800b93a:	682b      	ldr	r3, [r5, #0]
 800b93c:	b903      	cbnz	r3, 800b940 <__sflush_r+0x7c>
 800b93e:	6560      	str	r0, [r4, #84]	; 0x54
 800b940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b942:	602f      	str	r7, [r5, #0]
 800b944:	2900      	cmp	r1, #0
 800b946:	d0ca      	beq.n	800b8de <__sflush_r+0x1a>
 800b948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b94c:	4299      	cmp	r1, r3
 800b94e:	d002      	beq.n	800b956 <__sflush_r+0x92>
 800b950:	4628      	mov	r0, r5
 800b952:	f000 f8fd 	bl	800bb50 <_free_r>
 800b956:	2000      	movs	r0, #0
 800b958:	6360      	str	r0, [r4, #52]	; 0x34
 800b95a:	e7c1      	b.n	800b8e0 <__sflush_r+0x1c>
 800b95c:	6a21      	ldr	r1, [r4, #32]
 800b95e:	2301      	movs	r3, #1
 800b960:	4628      	mov	r0, r5
 800b962:	47b0      	blx	r6
 800b964:	1c41      	adds	r1, r0, #1
 800b966:	d1c7      	bne.n	800b8f8 <__sflush_r+0x34>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0c4      	beq.n	800b8f8 <__sflush_r+0x34>
 800b96e:	2b1d      	cmp	r3, #29
 800b970:	d001      	beq.n	800b976 <__sflush_r+0xb2>
 800b972:	2b16      	cmp	r3, #22
 800b974:	d101      	bne.n	800b97a <__sflush_r+0xb6>
 800b976:	602f      	str	r7, [r5, #0]
 800b978:	e7b1      	b.n	800b8de <__sflush_r+0x1a>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	e7ad      	b.n	800b8e0 <__sflush_r+0x1c>
 800b984:	690f      	ldr	r7, [r1, #16]
 800b986:	2f00      	cmp	r7, #0
 800b988:	d0a9      	beq.n	800b8de <__sflush_r+0x1a>
 800b98a:	0793      	lsls	r3, r2, #30
 800b98c:	680e      	ldr	r6, [r1, #0]
 800b98e:	bf08      	it	eq
 800b990:	694b      	ldreq	r3, [r1, #20]
 800b992:	600f      	str	r7, [r1, #0]
 800b994:	bf18      	it	ne
 800b996:	2300      	movne	r3, #0
 800b998:	eba6 0807 	sub.w	r8, r6, r7
 800b99c:	608b      	str	r3, [r1, #8]
 800b99e:	f1b8 0f00 	cmp.w	r8, #0
 800b9a2:	dd9c      	ble.n	800b8de <__sflush_r+0x1a>
 800b9a4:	6a21      	ldr	r1, [r4, #32]
 800b9a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9a8:	4643      	mov	r3, r8
 800b9aa:	463a      	mov	r2, r7
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b0      	blx	r6
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	dc06      	bgt.n	800b9c2 <__sflush_r+0xfe>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e78e      	b.n	800b8e0 <__sflush_r+0x1c>
 800b9c2:	4407      	add	r7, r0
 800b9c4:	eba8 0800 	sub.w	r8, r8, r0
 800b9c8:	e7e9      	b.n	800b99e <__sflush_r+0xda>
 800b9ca:	bf00      	nop
 800b9cc:	20400001 	.word	0x20400001

0800b9d0 <_fflush_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	690b      	ldr	r3, [r1, #16]
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	b913      	cbnz	r3, 800b9e0 <_fflush_r+0x10>
 800b9da:	2500      	movs	r5, #0
 800b9dc:	4628      	mov	r0, r5
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	b118      	cbz	r0, 800b9ea <_fflush_r+0x1a>
 800b9e2:	6983      	ldr	r3, [r0, #24]
 800b9e4:	b90b      	cbnz	r3, 800b9ea <_fflush_r+0x1a>
 800b9e6:	f7ff fbcf 	bl	800b188 <__sinit>
 800b9ea:	4b14      	ldr	r3, [pc, #80]	; (800ba3c <_fflush_r+0x6c>)
 800b9ec:	429c      	cmp	r4, r3
 800b9ee:	d11b      	bne.n	800ba28 <_fflush_r+0x58>
 800b9f0:	686c      	ldr	r4, [r5, #4]
 800b9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0ef      	beq.n	800b9da <_fflush_r+0xa>
 800b9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9fc:	07d0      	lsls	r0, r2, #31
 800b9fe:	d404      	bmi.n	800ba0a <_fflush_r+0x3a>
 800ba00:	0599      	lsls	r1, r3, #22
 800ba02:	d402      	bmi.n	800ba0a <_fflush_r+0x3a>
 800ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba06:	f7ff fc82 	bl	800b30e <__retarget_lock_acquire_recursive>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	f7ff ff59 	bl	800b8c4 <__sflush_r>
 800ba12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba14:	07da      	lsls	r2, r3, #31
 800ba16:	4605      	mov	r5, r0
 800ba18:	d4e0      	bmi.n	800b9dc <_fflush_r+0xc>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	059b      	lsls	r3, r3, #22
 800ba1e:	d4dd      	bmi.n	800b9dc <_fflush_r+0xc>
 800ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba22:	f7ff fc75 	bl	800b310 <__retarget_lock_release_recursive>
 800ba26:	e7d9      	b.n	800b9dc <_fflush_r+0xc>
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <_fflush_r+0x70>)
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d101      	bne.n	800ba32 <_fflush_r+0x62>
 800ba2e:	68ac      	ldr	r4, [r5, #8]
 800ba30:	e7df      	b.n	800b9f2 <_fflush_r+0x22>
 800ba32:	4b04      	ldr	r3, [pc, #16]	; (800ba44 <_fflush_r+0x74>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	bf08      	it	eq
 800ba38:	68ec      	ldreq	r4, [r5, #12]
 800ba3a:	e7da      	b.n	800b9f2 <_fflush_r+0x22>
 800ba3c:	0800c418 	.word	0x0800c418
 800ba40:	0800c438 	.word	0x0800c438
 800ba44:	0800c3f8 	.word	0x0800c3f8

0800ba48 <_lseek_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d07      	ldr	r5, [pc, #28]	; (800ba68 <_lseek_r+0x20>)
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	4608      	mov	r0, r1
 800ba50:	4611      	mov	r1, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	602a      	str	r2, [r5, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f7f6 fccc 	bl	80023f4 <_lseek>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_lseek_r+0x1e>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_lseek_r+0x1e>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20005680 	.word	0x20005680

0800ba6c <__swhatbuf_r>:
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	460e      	mov	r6, r1
 800ba70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba74:	2900      	cmp	r1, #0
 800ba76:	b096      	sub	sp, #88	; 0x58
 800ba78:	4614      	mov	r4, r2
 800ba7a:	461d      	mov	r5, r3
 800ba7c:	da08      	bge.n	800ba90 <__swhatbuf_r+0x24>
 800ba7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	602a      	str	r2, [r5, #0]
 800ba86:	061a      	lsls	r2, r3, #24
 800ba88:	d410      	bmi.n	800baac <__swhatbuf_r+0x40>
 800ba8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba8e:	e00e      	b.n	800baae <__swhatbuf_r+0x42>
 800ba90:	466a      	mov	r2, sp
 800ba92:	f000 fba9 	bl	800c1e8 <_fstat_r>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	dbf1      	blt.n	800ba7e <__swhatbuf_r+0x12>
 800ba9a:	9a01      	ldr	r2, [sp, #4]
 800ba9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baa4:	425a      	negs	r2, r3
 800baa6:	415a      	adcs	r2, r3
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	e7ee      	b.n	800ba8a <__swhatbuf_r+0x1e>
 800baac:	2340      	movs	r3, #64	; 0x40
 800baae:	2000      	movs	r0, #0
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	b016      	add	sp, #88	; 0x58
 800bab4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bab8 <__smakebuf_r>:
 800bab8:	898b      	ldrh	r3, [r1, #12]
 800baba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800babc:	079d      	lsls	r5, r3, #30
 800babe:	4606      	mov	r6, r0
 800bac0:	460c      	mov	r4, r1
 800bac2:	d507      	bpl.n	800bad4 <__smakebuf_r+0x1c>
 800bac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	6123      	str	r3, [r4, #16]
 800bacc:	2301      	movs	r3, #1
 800bace:	6163      	str	r3, [r4, #20]
 800bad0:	b002      	add	sp, #8
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	ab01      	add	r3, sp, #4
 800bad6:	466a      	mov	r2, sp
 800bad8:	f7ff ffc8 	bl	800ba6c <__swhatbuf_r>
 800badc:	9900      	ldr	r1, [sp, #0]
 800bade:	4605      	mov	r5, r0
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7ff fc4d 	bl	800b380 <_malloc_r>
 800bae6:	b948      	cbnz	r0, 800bafc <__smakebuf_r+0x44>
 800bae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baec:	059a      	lsls	r2, r3, #22
 800baee:	d4ef      	bmi.n	800bad0 <__smakebuf_r+0x18>
 800baf0:	f023 0303 	bic.w	r3, r3, #3
 800baf4:	f043 0302 	orr.w	r3, r3, #2
 800baf8:	81a3      	strh	r3, [r4, #12]
 800bafa:	e7e3      	b.n	800bac4 <__smakebuf_r+0xc>
 800bafc:	4b0d      	ldr	r3, [pc, #52]	; (800bb34 <__smakebuf_r+0x7c>)
 800bafe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	6020      	str	r0, [r4, #0]
 800bb04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb08:	81a3      	strh	r3, [r4, #12]
 800bb0a:	9b00      	ldr	r3, [sp, #0]
 800bb0c:	6163      	str	r3, [r4, #20]
 800bb0e:	9b01      	ldr	r3, [sp, #4]
 800bb10:	6120      	str	r0, [r4, #16]
 800bb12:	b15b      	cbz	r3, 800bb2c <__smakebuf_r+0x74>
 800bb14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f000 fb77 	bl	800c20c <_isatty_r>
 800bb1e:	b128      	cbz	r0, 800bb2c <__smakebuf_r+0x74>
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	f023 0303 	bic.w	r3, r3, #3
 800bb26:	f043 0301 	orr.w	r3, r3, #1
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	89a0      	ldrh	r0, [r4, #12]
 800bb2e:	4305      	orrs	r5, r0
 800bb30:	81a5      	strh	r5, [r4, #12]
 800bb32:	e7cd      	b.n	800bad0 <__smakebuf_r+0x18>
 800bb34:	0800b121 	.word	0x0800b121

0800bb38 <__malloc_lock>:
 800bb38:	4801      	ldr	r0, [pc, #4]	; (800bb40 <__malloc_lock+0x8>)
 800bb3a:	f7ff bbe8 	b.w	800b30e <__retarget_lock_acquire_recursive>
 800bb3e:	bf00      	nop
 800bb40:	20005674 	.word	0x20005674

0800bb44 <__malloc_unlock>:
 800bb44:	4801      	ldr	r0, [pc, #4]	; (800bb4c <__malloc_unlock+0x8>)
 800bb46:	f7ff bbe3 	b.w	800b310 <__retarget_lock_release_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	20005674 	.word	0x20005674

0800bb50 <_free_r>:
 800bb50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb52:	2900      	cmp	r1, #0
 800bb54:	d044      	beq.n	800bbe0 <_free_r+0x90>
 800bb56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb5a:	9001      	str	r0, [sp, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb62:	bfb8      	it	lt
 800bb64:	18e4      	addlt	r4, r4, r3
 800bb66:	f7ff ffe7 	bl	800bb38 <__malloc_lock>
 800bb6a:	4a1e      	ldr	r2, [pc, #120]	; (800bbe4 <_free_r+0x94>)
 800bb6c:	9801      	ldr	r0, [sp, #4]
 800bb6e:	6813      	ldr	r3, [r2, #0]
 800bb70:	b933      	cbnz	r3, 800bb80 <_free_r+0x30>
 800bb72:	6063      	str	r3, [r4, #4]
 800bb74:	6014      	str	r4, [r2, #0]
 800bb76:	b003      	add	sp, #12
 800bb78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb7c:	f7ff bfe2 	b.w	800bb44 <__malloc_unlock>
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	d908      	bls.n	800bb96 <_free_r+0x46>
 800bb84:	6825      	ldr	r5, [r4, #0]
 800bb86:	1961      	adds	r1, r4, r5
 800bb88:	428b      	cmp	r3, r1
 800bb8a:	bf01      	itttt	eq
 800bb8c:	6819      	ldreq	r1, [r3, #0]
 800bb8e:	685b      	ldreq	r3, [r3, #4]
 800bb90:	1949      	addeq	r1, r1, r5
 800bb92:	6021      	streq	r1, [r4, #0]
 800bb94:	e7ed      	b.n	800bb72 <_free_r+0x22>
 800bb96:	461a      	mov	r2, r3
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	b10b      	cbz	r3, 800bba0 <_free_r+0x50>
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d9fa      	bls.n	800bb96 <_free_r+0x46>
 800bba0:	6811      	ldr	r1, [r2, #0]
 800bba2:	1855      	adds	r5, r2, r1
 800bba4:	42a5      	cmp	r5, r4
 800bba6:	d10b      	bne.n	800bbc0 <_free_r+0x70>
 800bba8:	6824      	ldr	r4, [r4, #0]
 800bbaa:	4421      	add	r1, r4
 800bbac:	1854      	adds	r4, r2, r1
 800bbae:	42a3      	cmp	r3, r4
 800bbb0:	6011      	str	r1, [r2, #0]
 800bbb2:	d1e0      	bne.n	800bb76 <_free_r+0x26>
 800bbb4:	681c      	ldr	r4, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	6053      	str	r3, [r2, #4]
 800bbba:	4421      	add	r1, r4
 800bbbc:	6011      	str	r1, [r2, #0]
 800bbbe:	e7da      	b.n	800bb76 <_free_r+0x26>
 800bbc0:	d902      	bls.n	800bbc8 <_free_r+0x78>
 800bbc2:	230c      	movs	r3, #12
 800bbc4:	6003      	str	r3, [r0, #0]
 800bbc6:	e7d6      	b.n	800bb76 <_free_r+0x26>
 800bbc8:	6825      	ldr	r5, [r4, #0]
 800bbca:	1961      	adds	r1, r4, r5
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	bf04      	itt	eq
 800bbd0:	6819      	ldreq	r1, [r3, #0]
 800bbd2:	685b      	ldreq	r3, [r3, #4]
 800bbd4:	6063      	str	r3, [r4, #4]
 800bbd6:	bf04      	itt	eq
 800bbd8:	1949      	addeq	r1, r1, r5
 800bbda:	6021      	streq	r1, [r4, #0]
 800bbdc:	6054      	str	r4, [r2, #4]
 800bbde:	e7ca      	b.n	800bb76 <_free_r+0x26>
 800bbe0:	b003      	add	sp, #12
 800bbe2:	bd30      	pop	{r4, r5, pc}
 800bbe4:	20005678 	.word	0x20005678

0800bbe8 <__sfputc_r>:
 800bbe8:	6893      	ldr	r3, [r2, #8]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	b410      	push	{r4}
 800bbf0:	6093      	str	r3, [r2, #8]
 800bbf2:	da08      	bge.n	800bc06 <__sfputc_r+0x1e>
 800bbf4:	6994      	ldr	r4, [r2, #24]
 800bbf6:	42a3      	cmp	r3, r4
 800bbf8:	db01      	blt.n	800bbfe <__sfputc_r+0x16>
 800bbfa:	290a      	cmp	r1, #10
 800bbfc:	d103      	bne.n	800bc06 <__sfputc_r+0x1e>
 800bbfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc02:	f7ff bd7d 	b.w	800b700 <__swbuf_r>
 800bc06:	6813      	ldr	r3, [r2, #0]
 800bc08:	1c58      	adds	r0, r3, #1
 800bc0a:	6010      	str	r0, [r2, #0]
 800bc0c:	7019      	strb	r1, [r3, #0]
 800bc0e:	4608      	mov	r0, r1
 800bc10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <__sfputs_r>:
 800bc16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc18:	4606      	mov	r6, r0
 800bc1a:	460f      	mov	r7, r1
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	18d5      	adds	r5, r2, r3
 800bc20:	42ac      	cmp	r4, r5
 800bc22:	d101      	bne.n	800bc28 <__sfputs_r+0x12>
 800bc24:	2000      	movs	r0, #0
 800bc26:	e007      	b.n	800bc38 <__sfputs_r+0x22>
 800bc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2c:	463a      	mov	r2, r7
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7ff ffda 	bl	800bbe8 <__sfputc_r>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d1f3      	bne.n	800bc20 <__sfputs_r+0xa>
 800bc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc3c <_vfiprintf_r>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	460d      	mov	r5, r1
 800bc42:	b09d      	sub	sp, #116	; 0x74
 800bc44:	4614      	mov	r4, r2
 800bc46:	4698      	mov	r8, r3
 800bc48:	4606      	mov	r6, r0
 800bc4a:	b118      	cbz	r0, 800bc54 <_vfiprintf_r+0x18>
 800bc4c:	6983      	ldr	r3, [r0, #24]
 800bc4e:	b90b      	cbnz	r3, 800bc54 <_vfiprintf_r+0x18>
 800bc50:	f7ff fa9a 	bl	800b188 <__sinit>
 800bc54:	4b89      	ldr	r3, [pc, #548]	; (800be7c <_vfiprintf_r+0x240>)
 800bc56:	429d      	cmp	r5, r3
 800bc58:	d11b      	bne.n	800bc92 <_vfiprintf_r+0x56>
 800bc5a:	6875      	ldr	r5, [r6, #4]
 800bc5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc5e:	07d9      	lsls	r1, r3, #31
 800bc60:	d405      	bmi.n	800bc6e <_vfiprintf_r+0x32>
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	059a      	lsls	r2, r3, #22
 800bc66:	d402      	bmi.n	800bc6e <_vfiprintf_r+0x32>
 800bc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc6a:	f7ff fb50 	bl	800b30e <__retarget_lock_acquire_recursive>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	071b      	lsls	r3, r3, #28
 800bc72:	d501      	bpl.n	800bc78 <_vfiprintf_r+0x3c>
 800bc74:	692b      	ldr	r3, [r5, #16]
 800bc76:	b9eb      	cbnz	r3, 800bcb4 <_vfiprintf_r+0x78>
 800bc78:	4629      	mov	r1, r5
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f7ff fda4 	bl	800b7c8 <__swsetup_r>
 800bc80:	b1c0      	cbz	r0, 800bcb4 <_vfiprintf_r+0x78>
 800bc82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc84:	07dc      	lsls	r4, r3, #31
 800bc86:	d50e      	bpl.n	800bca6 <_vfiprintf_r+0x6a>
 800bc88:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8c:	b01d      	add	sp, #116	; 0x74
 800bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc92:	4b7b      	ldr	r3, [pc, #492]	; (800be80 <_vfiprintf_r+0x244>)
 800bc94:	429d      	cmp	r5, r3
 800bc96:	d101      	bne.n	800bc9c <_vfiprintf_r+0x60>
 800bc98:	68b5      	ldr	r5, [r6, #8]
 800bc9a:	e7df      	b.n	800bc5c <_vfiprintf_r+0x20>
 800bc9c:	4b79      	ldr	r3, [pc, #484]	; (800be84 <_vfiprintf_r+0x248>)
 800bc9e:	429d      	cmp	r5, r3
 800bca0:	bf08      	it	eq
 800bca2:	68f5      	ldreq	r5, [r6, #12]
 800bca4:	e7da      	b.n	800bc5c <_vfiprintf_r+0x20>
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	0598      	lsls	r0, r3, #22
 800bcaa:	d4ed      	bmi.n	800bc88 <_vfiprintf_r+0x4c>
 800bcac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcae:	f7ff fb2f 	bl	800b310 <__retarget_lock_release_recursive>
 800bcb2:	e7e9      	b.n	800bc88 <_vfiprintf_r+0x4c>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb8:	2320      	movs	r3, #32
 800bcba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcc2:	2330      	movs	r3, #48	; 0x30
 800bcc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be88 <_vfiprintf_r+0x24c>
 800bcc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bccc:	f04f 0901 	mov.w	r9, #1
 800bcd0:	4623      	mov	r3, r4
 800bcd2:	469a      	mov	sl, r3
 800bcd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcd8:	b10a      	cbz	r2, 800bcde <_vfiprintf_r+0xa2>
 800bcda:	2a25      	cmp	r2, #37	; 0x25
 800bcdc:	d1f9      	bne.n	800bcd2 <_vfiprintf_r+0x96>
 800bcde:	ebba 0b04 	subs.w	fp, sl, r4
 800bce2:	d00b      	beq.n	800bcfc <_vfiprintf_r+0xc0>
 800bce4:	465b      	mov	r3, fp
 800bce6:	4622      	mov	r2, r4
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	f7ff ff93 	bl	800bc16 <__sfputs_r>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f000 80aa 	beq.w	800be4a <_vfiprintf_r+0x20e>
 800bcf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf8:	445a      	add	r2, fp
 800bcfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfc:	f89a 3000 	ldrb.w	r3, [sl]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f000 80a2 	beq.w	800be4a <_vfiprintf_r+0x20e>
 800bd06:	2300      	movs	r3, #0
 800bd08:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd10:	f10a 0a01 	add.w	sl, sl, #1
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	9307      	str	r3, [sp, #28]
 800bd18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd1c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd1e:	4654      	mov	r4, sl
 800bd20:	2205      	movs	r2, #5
 800bd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd26:	4858      	ldr	r0, [pc, #352]	; (800be88 <_vfiprintf_r+0x24c>)
 800bd28:	f7f4 fa62 	bl	80001f0 <memchr>
 800bd2c:	9a04      	ldr	r2, [sp, #16]
 800bd2e:	b9d8      	cbnz	r0, 800bd68 <_vfiprintf_r+0x12c>
 800bd30:	06d1      	lsls	r1, r2, #27
 800bd32:	bf44      	itt	mi
 800bd34:	2320      	movmi	r3, #32
 800bd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd3a:	0713      	lsls	r3, r2, #28
 800bd3c:	bf44      	itt	mi
 800bd3e:	232b      	movmi	r3, #43	; 0x2b
 800bd40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd44:	f89a 3000 	ldrb.w	r3, [sl]
 800bd48:	2b2a      	cmp	r3, #42	; 0x2a
 800bd4a:	d015      	beq.n	800bd78 <_vfiprintf_r+0x13c>
 800bd4c:	9a07      	ldr	r2, [sp, #28]
 800bd4e:	4654      	mov	r4, sl
 800bd50:	2000      	movs	r0, #0
 800bd52:	f04f 0c0a 	mov.w	ip, #10
 800bd56:	4621      	mov	r1, r4
 800bd58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd5c:	3b30      	subs	r3, #48	; 0x30
 800bd5e:	2b09      	cmp	r3, #9
 800bd60:	d94e      	bls.n	800be00 <_vfiprintf_r+0x1c4>
 800bd62:	b1b0      	cbz	r0, 800bd92 <_vfiprintf_r+0x156>
 800bd64:	9207      	str	r2, [sp, #28]
 800bd66:	e014      	b.n	800bd92 <_vfiprintf_r+0x156>
 800bd68:	eba0 0308 	sub.w	r3, r0, r8
 800bd6c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd70:	4313      	orrs	r3, r2
 800bd72:	9304      	str	r3, [sp, #16]
 800bd74:	46a2      	mov	sl, r4
 800bd76:	e7d2      	b.n	800bd1e <_vfiprintf_r+0xe2>
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	1d19      	adds	r1, r3, #4
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	9103      	str	r1, [sp, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	bfbb      	ittet	lt
 800bd84:	425b      	neglt	r3, r3
 800bd86:	f042 0202 	orrlt.w	r2, r2, #2
 800bd8a:	9307      	strge	r3, [sp, #28]
 800bd8c:	9307      	strlt	r3, [sp, #28]
 800bd8e:	bfb8      	it	lt
 800bd90:	9204      	strlt	r2, [sp, #16]
 800bd92:	7823      	ldrb	r3, [r4, #0]
 800bd94:	2b2e      	cmp	r3, #46	; 0x2e
 800bd96:	d10c      	bne.n	800bdb2 <_vfiprintf_r+0x176>
 800bd98:	7863      	ldrb	r3, [r4, #1]
 800bd9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd9c:	d135      	bne.n	800be0a <_vfiprintf_r+0x1ce>
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	1d1a      	adds	r2, r3, #4
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	9203      	str	r2, [sp, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	bfb8      	it	lt
 800bdaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdae:	3402      	adds	r4, #2
 800bdb0:	9305      	str	r3, [sp, #20]
 800bdb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be98 <_vfiprintf_r+0x25c>
 800bdb6:	7821      	ldrb	r1, [r4, #0]
 800bdb8:	2203      	movs	r2, #3
 800bdba:	4650      	mov	r0, sl
 800bdbc:	f7f4 fa18 	bl	80001f0 <memchr>
 800bdc0:	b140      	cbz	r0, 800bdd4 <_vfiprintf_r+0x198>
 800bdc2:	2340      	movs	r3, #64	; 0x40
 800bdc4:	eba0 000a 	sub.w	r0, r0, sl
 800bdc8:	fa03 f000 	lsl.w	r0, r3, r0
 800bdcc:	9b04      	ldr	r3, [sp, #16]
 800bdce:	4303      	orrs	r3, r0
 800bdd0:	3401      	adds	r4, #1
 800bdd2:	9304      	str	r3, [sp, #16]
 800bdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd8:	482c      	ldr	r0, [pc, #176]	; (800be8c <_vfiprintf_r+0x250>)
 800bdda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdde:	2206      	movs	r2, #6
 800bde0:	f7f4 fa06 	bl	80001f0 <memchr>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d03f      	beq.n	800be68 <_vfiprintf_r+0x22c>
 800bde8:	4b29      	ldr	r3, [pc, #164]	; (800be90 <_vfiprintf_r+0x254>)
 800bdea:	bb1b      	cbnz	r3, 800be34 <_vfiprintf_r+0x1f8>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	3307      	adds	r3, #7
 800bdf0:	f023 0307 	bic.w	r3, r3, #7
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfa:	443b      	add	r3, r7
 800bdfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfe:	e767      	b.n	800bcd0 <_vfiprintf_r+0x94>
 800be00:	fb0c 3202 	mla	r2, ip, r2, r3
 800be04:	460c      	mov	r4, r1
 800be06:	2001      	movs	r0, #1
 800be08:	e7a5      	b.n	800bd56 <_vfiprintf_r+0x11a>
 800be0a:	2300      	movs	r3, #0
 800be0c:	3401      	adds	r4, #1
 800be0e:	9305      	str	r3, [sp, #20]
 800be10:	4619      	mov	r1, r3
 800be12:	f04f 0c0a 	mov.w	ip, #10
 800be16:	4620      	mov	r0, r4
 800be18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be1c:	3a30      	subs	r2, #48	; 0x30
 800be1e:	2a09      	cmp	r2, #9
 800be20:	d903      	bls.n	800be2a <_vfiprintf_r+0x1ee>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0c5      	beq.n	800bdb2 <_vfiprintf_r+0x176>
 800be26:	9105      	str	r1, [sp, #20]
 800be28:	e7c3      	b.n	800bdb2 <_vfiprintf_r+0x176>
 800be2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800be2e:	4604      	mov	r4, r0
 800be30:	2301      	movs	r3, #1
 800be32:	e7f0      	b.n	800be16 <_vfiprintf_r+0x1da>
 800be34:	ab03      	add	r3, sp, #12
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	462a      	mov	r2, r5
 800be3a:	4b16      	ldr	r3, [pc, #88]	; (800be94 <_vfiprintf_r+0x258>)
 800be3c:	a904      	add	r1, sp, #16
 800be3e:	4630      	mov	r0, r6
 800be40:	f3af 8000 	nop.w
 800be44:	4607      	mov	r7, r0
 800be46:	1c78      	adds	r0, r7, #1
 800be48:	d1d6      	bne.n	800bdf8 <_vfiprintf_r+0x1bc>
 800be4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be4c:	07d9      	lsls	r1, r3, #31
 800be4e:	d405      	bmi.n	800be5c <_vfiprintf_r+0x220>
 800be50:	89ab      	ldrh	r3, [r5, #12]
 800be52:	059a      	lsls	r2, r3, #22
 800be54:	d402      	bmi.n	800be5c <_vfiprintf_r+0x220>
 800be56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be58:	f7ff fa5a 	bl	800b310 <__retarget_lock_release_recursive>
 800be5c:	89ab      	ldrh	r3, [r5, #12]
 800be5e:	065b      	lsls	r3, r3, #25
 800be60:	f53f af12 	bmi.w	800bc88 <_vfiprintf_r+0x4c>
 800be64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be66:	e711      	b.n	800bc8c <_vfiprintf_r+0x50>
 800be68:	ab03      	add	r3, sp, #12
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	462a      	mov	r2, r5
 800be6e:	4b09      	ldr	r3, [pc, #36]	; (800be94 <_vfiprintf_r+0x258>)
 800be70:	a904      	add	r1, sp, #16
 800be72:	4630      	mov	r0, r6
 800be74:	f000 f880 	bl	800bf78 <_printf_i>
 800be78:	e7e4      	b.n	800be44 <_vfiprintf_r+0x208>
 800be7a:	bf00      	nop
 800be7c:	0800c418 	.word	0x0800c418
 800be80:	0800c438 	.word	0x0800c438
 800be84:	0800c3f8 	.word	0x0800c3f8
 800be88:	0800c45c 	.word	0x0800c45c
 800be8c:	0800c466 	.word	0x0800c466
 800be90:	00000000 	.word	0x00000000
 800be94:	0800bc17 	.word	0x0800bc17
 800be98:	0800c462 	.word	0x0800c462

0800be9c <_printf_common>:
 800be9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea0:	4616      	mov	r6, r2
 800bea2:	4699      	mov	r9, r3
 800bea4:	688a      	ldr	r2, [r1, #8]
 800bea6:	690b      	ldr	r3, [r1, #16]
 800bea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800beac:	4293      	cmp	r3, r2
 800beae:	bfb8      	it	lt
 800beb0:	4613      	movlt	r3, r2
 800beb2:	6033      	str	r3, [r6, #0]
 800beb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beb8:	4607      	mov	r7, r0
 800beba:	460c      	mov	r4, r1
 800bebc:	b10a      	cbz	r2, 800bec2 <_printf_common+0x26>
 800bebe:	3301      	adds	r3, #1
 800bec0:	6033      	str	r3, [r6, #0]
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	0699      	lsls	r1, r3, #26
 800bec6:	bf42      	ittt	mi
 800bec8:	6833      	ldrmi	r3, [r6, #0]
 800beca:	3302      	addmi	r3, #2
 800becc:	6033      	strmi	r3, [r6, #0]
 800bece:	6825      	ldr	r5, [r4, #0]
 800bed0:	f015 0506 	ands.w	r5, r5, #6
 800bed4:	d106      	bne.n	800bee4 <_printf_common+0x48>
 800bed6:	f104 0a19 	add.w	sl, r4, #25
 800beda:	68e3      	ldr	r3, [r4, #12]
 800bedc:	6832      	ldr	r2, [r6, #0]
 800bede:	1a9b      	subs	r3, r3, r2
 800bee0:	42ab      	cmp	r3, r5
 800bee2:	dc26      	bgt.n	800bf32 <_printf_common+0x96>
 800bee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bee8:	1e13      	subs	r3, r2, #0
 800beea:	6822      	ldr	r2, [r4, #0]
 800beec:	bf18      	it	ne
 800beee:	2301      	movne	r3, #1
 800bef0:	0692      	lsls	r2, r2, #26
 800bef2:	d42b      	bmi.n	800bf4c <_printf_common+0xb0>
 800bef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bef8:	4649      	mov	r1, r9
 800befa:	4638      	mov	r0, r7
 800befc:	47c0      	blx	r8
 800befe:	3001      	adds	r0, #1
 800bf00:	d01e      	beq.n	800bf40 <_printf_common+0xa4>
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	68e5      	ldr	r5, [r4, #12]
 800bf06:	6832      	ldr	r2, [r6, #0]
 800bf08:	f003 0306 	and.w	r3, r3, #6
 800bf0c:	2b04      	cmp	r3, #4
 800bf0e:	bf08      	it	eq
 800bf10:	1aad      	subeq	r5, r5, r2
 800bf12:	68a3      	ldr	r3, [r4, #8]
 800bf14:	6922      	ldr	r2, [r4, #16]
 800bf16:	bf0c      	ite	eq
 800bf18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf1c:	2500      	movne	r5, #0
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	bfc4      	itt	gt
 800bf22:	1a9b      	subgt	r3, r3, r2
 800bf24:	18ed      	addgt	r5, r5, r3
 800bf26:	2600      	movs	r6, #0
 800bf28:	341a      	adds	r4, #26
 800bf2a:	42b5      	cmp	r5, r6
 800bf2c:	d11a      	bne.n	800bf64 <_printf_common+0xc8>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e008      	b.n	800bf44 <_printf_common+0xa8>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4652      	mov	r2, sl
 800bf36:	4649      	mov	r1, r9
 800bf38:	4638      	mov	r0, r7
 800bf3a:	47c0      	blx	r8
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d103      	bne.n	800bf48 <_printf_common+0xac>
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf48:	3501      	adds	r5, #1
 800bf4a:	e7c6      	b.n	800beda <_printf_common+0x3e>
 800bf4c:	18e1      	adds	r1, r4, r3
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	2030      	movs	r0, #48	; 0x30
 800bf52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf56:	4422      	add	r2, r4
 800bf58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf60:	3302      	adds	r3, #2
 800bf62:	e7c7      	b.n	800bef4 <_printf_common+0x58>
 800bf64:	2301      	movs	r3, #1
 800bf66:	4622      	mov	r2, r4
 800bf68:	4649      	mov	r1, r9
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	47c0      	blx	r8
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d0e6      	beq.n	800bf40 <_printf_common+0xa4>
 800bf72:	3601      	adds	r6, #1
 800bf74:	e7d9      	b.n	800bf2a <_printf_common+0x8e>
	...

0800bf78 <_printf_i>:
 800bf78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf7c:	7e0f      	ldrb	r7, [r1, #24]
 800bf7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf80:	2f78      	cmp	r7, #120	; 0x78
 800bf82:	4691      	mov	r9, r2
 800bf84:	4680      	mov	r8, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	469a      	mov	sl, r3
 800bf8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf8e:	d807      	bhi.n	800bfa0 <_printf_i+0x28>
 800bf90:	2f62      	cmp	r7, #98	; 0x62
 800bf92:	d80a      	bhi.n	800bfaa <_printf_i+0x32>
 800bf94:	2f00      	cmp	r7, #0
 800bf96:	f000 80d8 	beq.w	800c14a <_printf_i+0x1d2>
 800bf9a:	2f58      	cmp	r7, #88	; 0x58
 800bf9c:	f000 80a3 	beq.w	800c0e6 <_printf_i+0x16e>
 800bfa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfa8:	e03a      	b.n	800c020 <_printf_i+0xa8>
 800bfaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfae:	2b15      	cmp	r3, #21
 800bfb0:	d8f6      	bhi.n	800bfa0 <_printf_i+0x28>
 800bfb2:	a101      	add	r1, pc, #4	; (adr r1, 800bfb8 <_printf_i+0x40>)
 800bfb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfb8:	0800c011 	.word	0x0800c011
 800bfbc:	0800c025 	.word	0x0800c025
 800bfc0:	0800bfa1 	.word	0x0800bfa1
 800bfc4:	0800bfa1 	.word	0x0800bfa1
 800bfc8:	0800bfa1 	.word	0x0800bfa1
 800bfcc:	0800bfa1 	.word	0x0800bfa1
 800bfd0:	0800c025 	.word	0x0800c025
 800bfd4:	0800bfa1 	.word	0x0800bfa1
 800bfd8:	0800bfa1 	.word	0x0800bfa1
 800bfdc:	0800bfa1 	.word	0x0800bfa1
 800bfe0:	0800bfa1 	.word	0x0800bfa1
 800bfe4:	0800c131 	.word	0x0800c131
 800bfe8:	0800c055 	.word	0x0800c055
 800bfec:	0800c113 	.word	0x0800c113
 800bff0:	0800bfa1 	.word	0x0800bfa1
 800bff4:	0800bfa1 	.word	0x0800bfa1
 800bff8:	0800c153 	.word	0x0800c153
 800bffc:	0800bfa1 	.word	0x0800bfa1
 800c000:	0800c055 	.word	0x0800c055
 800c004:	0800bfa1 	.word	0x0800bfa1
 800c008:	0800bfa1 	.word	0x0800bfa1
 800c00c:	0800c11b 	.word	0x0800c11b
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	1d1a      	adds	r2, r3, #4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	602a      	str	r2, [r5, #0]
 800c018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c01c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c020:	2301      	movs	r3, #1
 800c022:	e0a3      	b.n	800c16c <_printf_i+0x1f4>
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	6829      	ldr	r1, [r5, #0]
 800c028:	0606      	lsls	r6, r0, #24
 800c02a:	f101 0304 	add.w	r3, r1, #4
 800c02e:	d50a      	bpl.n	800c046 <_printf_i+0xce>
 800c030:	680e      	ldr	r6, [r1, #0]
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	2e00      	cmp	r6, #0
 800c036:	da03      	bge.n	800c040 <_printf_i+0xc8>
 800c038:	232d      	movs	r3, #45	; 0x2d
 800c03a:	4276      	negs	r6, r6
 800c03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c040:	485e      	ldr	r0, [pc, #376]	; (800c1bc <_printf_i+0x244>)
 800c042:	230a      	movs	r3, #10
 800c044:	e019      	b.n	800c07a <_printf_i+0x102>
 800c046:	680e      	ldr	r6, [r1, #0]
 800c048:	602b      	str	r3, [r5, #0]
 800c04a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c04e:	bf18      	it	ne
 800c050:	b236      	sxthne	r6, r6
 800c052:	e7ef      	b.n	800c034 <_printf_i+0xbc>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	6820      	ldr	r0, [r4, #0]
 800c058:	1d19      	adds	r1, r3, #4
 800c05a:	6029      	str	r1, [r5, #0]
 800c05c:	0601      	lsls	r1, r0, #24
 800c05e:	d501      	bpl.n	800c064 <_printf_i+0xec>
 800c060:	681e      	ldr	r6, [r3, #0]
 800c062:	e002      	b.n	800c06a <_printf_i+0xf2>
 800c064:	0646      	lsls	r6, r0, #25
 800c066:	d5fb      	bpl.n	800c060 <_printf_i+0xe8>
 800c068:	881e      	ldrh	r6, [r3, #0]
 800c06a:	4854      	ldr	r0, [pc, #336]	; (800c1bc <_printf_i+0x244>)
 800c06c:	2f6f      	cmp	r7, #111	; 0x6f
 800c06e:	bf0c      	ite	eq
 800c070:	2308      	moveq	r3, #8
 800c072:	230a      	movne	r3, #10
 800c074:	2100      	movs	r1, #0
 800c076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c07a:	6865      	ldr	r5, [r4, #4]
 800c07c:	60a5      	str	r5, [r4, #8]
 800c07e:	2d00      	cmp	r5, #0
 800c080:	bfa2      	ittt	ge
 800c082:	6821      	ldrge	r1, [r4, #0]
 800c084:	f021 0104 	bicge.w	r1, r1, #4
 800c088:	6021      	strge	r1, [r4, #0]
 800c08a:	b90e      	cbnz	r6, 800c090 <_printf_i+0x118>
 800c08c:	2d00      	cmp	r5, #0
 800c08e:	d04d      	beq.n	800c12c <_printf_i+0x1b4>
 800c090:	4615      	mov	r5, r2
 800c092:	fbb6 f1f3 	udiv	r1, r6, r3
 800c096:	fb03 6711 	mls	r7, r3, r1, r6
 800c09a:	5dc7      	ldrb	r7, [r0, r7]
 800c09c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0a0:	4637      	mov	r7, r6
 800c0a2:	42bb      	cmp	r3, r7
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	d9f4      	bls.n	800c092 <_printf_i+0x11a>
 800c0a8:	2b08      	cmp	r3, #8
 800c0aa:	d10b      	bne.n	800c0c4 <_printf_i+0x14c>
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	07de      	lsls	r6, r3, #31
 800c0b0:	d508      	bpl.n	800c0c4 <_printf_i+0x14c>
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	6861      	ldr	r1, [r4, #4]
 800c0b6:	4299      	cmp	r1, r3
 800c0b8:	bfde      	ittt	le
 800c0ba:	2330      	movle	r3, #48	; 0x30
 800c0bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0c4:	1b52      	subs	r2, r2, r5
 800c0c6:	6122      	str	r2, [r4, #16]
 800c0c8:	f8cd a000 	str.w	sl, [sp]
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	aa03      	add	r2, sp, #12
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	f7ff fee2 	bl	800be9c <_printf_common>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d14c      	bne.n	800c176 <_printf_i+0x1fe>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	b004      	add	sp, #16
 800c0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e6:	4835      	ldr	r0, [pc, #212]	; (800c1bc <_printf_i+0x244>)
 800c0e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0ec:	6829      	ldr	r1, [r5, #0]
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0f4:	6029      	str	r1, [r5, #0]
 800c0f6:	061d      	lsls	r5, r3, #24
 800c0f8:	d514      	bpl.n	800c124 <_printf_i+0x1ac>
 800c0fa:	07df      	lsls	r7, r3, #31
 800c0fc:	bf44      	itt	mi
 800c0fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c102:	6023      	strmi	r3, [r4, #0]
 800c104:	b91e      	cbnz	r6, 800c10e <_printf_i+0x196>
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	f023 0320 	bic.w	r3, r3, #32
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	2310      	movs	r3, #16
 800c110:	e7b0      	b.n	800c074 <_printf_i+0xfc>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	f043 0320 	orr.w	r3, r3, #32
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	2378      	movs	r3, #120	; 0x78
 800c11c:	4828      	ldr	r0, [pc, #160]	; (800c1c0 <_printf_i+0x248>)
 800c11e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c122:	e7e3      	b.n	800c0ec <_printf_i+0x174>
 800c124:	0659      	lsls	r1, r3, #25
 800c126:	bf48      	it	mi
 800c128:	b2b6      	uxthmi	r6, r6
 800c12a:	e7e6      	b.n	800c0fa <_printf_i+0x182>
 800c12c:	4615      	mov	r5, r2
 800c12e:	e7bb      	b.n	800c0a8 <_printf_i+0x130>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	6826      	ldr	r6, [r4, #0]
 800c134:	6961      	ldr	r1, [r4, #20]
 800c136:	1d18      	adds	r0, r3, #4
 800c138:	6028      	str	r0, [r5, #0]
 800c13a:	0635      	lsls	r5, r6, #24
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	d501      	bpl.n	800c144 <_printf_i+0x1cc>
 800c140:	6019      	str	r1, [r3, #0]
 800c142:	e002      	b.n	800c14a <_printf_i+0x1d2>
 800c144:	0670      	lsls	r0, r6, #25
 800c146:	d5fb      	bpl.n	800c140 <_printf_i+0x1c8>
 800c148:	8019      	strh	r1, [r3, #0]
 800c14a:	2300      	movs	r3, #0
 800c14c:	6123      	str	r3, [r4, #16]
 800c14e:	4615      	mov	r5, r2
 800c150:	e7ba      	b.n	800c0c8 <_printf_i+0x150>
 800c152:	682b      	ldr	r3, [r5, #0]
 800c154:	1d1a      	adds	r2, r3, #4
 800c156:	602a      	str	r2, [r5, #0]
 800c158:	681d      	ldr	r5, [r3, #0]
 800c15a:	6862      	ldr	r2, [r4, #4]
 800c15c:	2100      	movs	r1, #0
 800c15e:	4628      	mov	r0, r5
 800c160:	f7f4 f846 	bl	80001f0 <memchr>
 800c164:	b108      	cbz	r0, 800c16a <_printf_i+0x1f2>
 800c166:	1b40      	subs	r0, r0, r5
 800c168:	6060      	str	r0, [r4, #4]
 800c16a:	6863      	ldr	r3, [r4, #4]
 800c16c:	6123      	str	r3, [r4, #16]
 800c16e:	2300      	movs	r3, #0
 800c170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c174:	e7a8      	b.n	800c0c8 <_printf_i+0x150>
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	462a      	mov	r2, r5
 800c17a:	4649      	mov	r1, r9
 800c17c:	4640      	mov	r0, r8
 800c17e:	47d0      	blx	sl
 800c180:	3001      	adds	r0, #1
 800c182:	d0ab      	beq.n	800c0dc <_printf_i+0x164>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	079b      	lsls	r3, r3, #30
 800c188:	d413      	bmi.n	800c1b2 <_printf_i+0x23a>
 800c18a:	68e0      	ldr	r0, [r4, #12]
 800c18c:	9b03      	ldr	r3, [sp, #12]
 800c18e:	4298      	cmp	r0, r3
 800c190:	bfb8      	it	lt
 800c192:	4618      	movlt	r0, r3
 800c194:	e7a4      	b.n	800c0e0 <_printf_i+0x168>
 800c196:	2301      	movs	r3, #1
 800c198:	4632      	mov	r2, r6
 800c19a:	4649      	mov	r1, r9
 800c19c:	4640      	mov	r0, r8
 800c19e:	47d0      	blx	sl
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d09b      	beq.n	800c0dc <_printf_i+0x164>
 800c1a4:	3501      	adds	r5, #1
 800c1a6:	68e3      	ldr	r3, [r4, #12]
 800c1a8:	9903      	ldr	r1, [sp, #12]
 800c1aa:	1a5b      	subs	r3, r3, r1
 800c1ac:	42ab      	cmp	r3, r5
 800c1ae:	dcf2      	bgt.n	800c196 <_printf_i+0x21e>
 800c1b0:	e7eb      	b.n	800c18a <_printf_i+0x212>
 800c1b2:	2500      	movs	r5, #0
 800c1b4:	f104 0619 	add.w	r6, r4, #25
 800c1b8:	e7f5      	b.n	800c1a6 <_printf_i+0x22e>
 800c1ba:	bf00      	nop
 800c1bc:	0800c46d 	.word	0x0800c46d
 800c1c0:	0800c47e 	.word	0x0800c47e

0800c1c4 <_read_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_read_r+0x20>)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f6 f8ae 	bl	8002334 <_read>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_read_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_read_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20005680 	.word	0x20005680

0800c1e8 <_fstat_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	; (800c208 <_fstat_r+0x20>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	f7f6 f8e2 	bl	80023be <_fstat>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d102      	bne.n	800c204 <_fstat_r+0x1c>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	b103      	cbz	r3, 800c204 <_fstat_r+0x1c>
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	20005680 	.word	0x20005680

0800c20c <_isatty_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d06      	ldr	r5, [pc, #24]	; (800c228 <_isatty_r+0x1c>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f6 f8e1 	bl	80023de <_isatty>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_isatty_r+0x1a>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_isatty_r+0x1a>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	20005680 	.word	0x20005680

0800c22c <_init>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr

0800c238 <_fini>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr
