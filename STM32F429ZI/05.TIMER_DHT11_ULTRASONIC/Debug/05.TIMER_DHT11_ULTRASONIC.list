
05.TIMER_DHT11_ULTRASONIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a0  080080a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a8  080080a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080080b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000009a0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a14  20000a14  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a47d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b9  00000000  00000000  0003a521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  0003ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272da  00000000  00000000  000402c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a36f  00000000  00000000  0006759a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e70b0  00000000  00000000  00081909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001689b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068ec  00000000  00000000  00168a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ee0 	.word	0x08007ee0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007ee0 	.word	0x08007ee0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_processing>:
	
}

int dht11time=150;
void DHT11_processing(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if (TIM10_10ms_counter >= dht11time)  //1500ms
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <DHT11_processing+0x8c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <DHT11_processing+0x90>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db37      	blt.n	8000e02 <DHT11_processing+0x82>
	{
		TIM10_10ms_counter=0;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <DHT11_processing+0x8c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		DHT11_trriger();
 8000d98:	f000 f854 	bl	8000e44 <DHT11_trriger>
		DHT11_DataLine_Input();
 8000d9c:	f000 f868 	bl	8000e70 <DHT11_DataLine_Input>
		DHT11_dumi_read();
 8000da0:	f000 f8d6 	bl	8000f50 <DHT11_dumi_read>

		i_RH = DHT11_rx_Data();
 8000da4:	f000 f89e 	bl	8000ee4 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
		d_RH = DHT11_rx_Data();
 8000dac:	f000 f89a 	bl	8000ee4 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
		i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f896 	bl	8000ee4 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
		d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f892 	bl	8000ee4 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

		DHT11_DataLine_Output();
 8000dc4:	f000 f870 	bl	8000ea8 <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <DHT11_processing+0x94>)
 8000dce:	f002 f9a7 	bl	8003120 <HAL_GPIO_WritePin>
		printf("[Tmp]%d\n",(int)i_Tmp);
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4810      	ldr	r0, [pc, #64]	; (8000e18 <DHT11_processing+0x98>)
 8000dd8:	f005 fea2 	bl	8006b20 <iprintf>
		printf("[Wet]%d\n",(int)i_RH);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	480e      	ldr	r0, [pc, #56]	; (8000e1c <DHT11_processing+0x9c>)
 8000de2:	f005 fe9d 	bl	8006b20 <iprintf>
		sprintf(lcd_buff,"Tmp:%d Wet:%d", (int)i_Tmp, (int)i_RH);
 8000de6:	7d7a      	ldrb	r2, [r7, #21]
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	4638      	mov	r0, r7
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <DHT11_processing+0xa0>)
 8000dee:	f005 ff25 	bl	8006c3c <siprintf>
		move_cursor(0,0);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f95f 	bl	80010b8 <move_cursor>
		lcd_string(lcd_buff);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f946 	bl	800108e <lcd_string>
	}
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000097c 	.word	0x2000097c
 8000e10:	20000000 	.word	0x20000000
 8000e14:	40020000 	.word	0x40020000
 8000e18:	08007f08 	.word	0x08007f08
 8000e1c:	08007f14 	.word	0x08007f14
 8000e20:	08007f20 	.word	0x08007f20

08000e24 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <DHT11_Init+0x1c>)
 8000e2e:	f002 f977 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e36:	f001 fabf 	bl	80023b8 <HAL_Delay>
	return;
 8000e3a:	bf00      	nop
}
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40020000 	.word	0x40020000

08000e44 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <DHT11_trriger+0x28>)
 8000e4e:	f002 f967 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e52:	2014      	movs	r0, #20
 8000e54:	f001 fab0 	bl	80023b8 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <DHT11_trriger+0x28>)
 8000e5e:	f002 f95f 	bl	8003120 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f000 f980 	bl	8001168 <delay_us>
	return;
 8000e68:	bf00      	nop
}
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40020000 	.word	0x40020000

08000e70 <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e84:	2301      	movs	r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <DHT11_DataLine_Input+0x34>)
 8000e96:	f001 ff7f 	bl	8002d98 <HAL_GPIO_Init>
	
	return;
 8000e9a:	bf00      	nop
}
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <DHT11_DataLine_Output+0x38>)
 8000ed2:	f001 ff61 	bl	8002d98 <HAL_GPIO_Init>
	
	return;
 8000ed6:	bf00      	nop
}
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	e023      	b.n	8000f3c <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000ef4:	bf00      	nop
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <DHT11_rx_Data+0x68>)
 8000efa:	f002 f8f9 	bl	80030f0 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f8      	beq.n	8000ef6 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);
 8000f04:	2028      	movs	r0, #40	; 0x28
 8000f06:	f000 f92f 	bl	8001168 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f10:	2101      	movs	r1, #1
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <DHT11_rx_Data+0x68>)
 8000f14:	f002 f8ec 	bl	80030f0 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f26:	bf00      	nop
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <DHT11_rx_Data+0x68>)
 8000f2c:	f002 f8e0 	bl	80030f0 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d0f8      	beq.n	8000f28 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b07      	cmp	r3, #7
 8000f40:	ddd8      	ble.n	8000ef4 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40020000 	.word	0x40020000

08000f50 <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f54:	bf00      	nop
 8000f56:	2101      	movs	r1, #1
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <DHT11_dumi_read+0x38>)
 8000f5a:	f002 f8c9 	bl	80030f0 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d0f8      	beq.n	8000f56 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f64:	bf00      	nop
 8000f66:	2101      	movs	r1, #1
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <DHT11_dumi_read+0x38>)
 8000f6a:	f002 f8c1 	bl	80030f0 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f8      	beq.n	8000f66 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f74:	bf00      	nop
 8000f76:	2101      	movs	r1, #1
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <DHT11_dumi_read+0x38>)
 8000f7a:	f002 f8b9 	bl	80030f0 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d0f8      	beq.n	8000f76 <DHT11_dumi_read+0x26>
	return;
 8000f84:	bf00      	nop
}
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020000 	.word	0x40020000

08000f8c <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	f043 030c 	orr.w	r3, r3, #12
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000fcc:	bf00      	nop
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	214e      	movs	r1, #78	; 0x4e
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <lcd_command+0x64>)
 8000fdc:	f002 f9fe 	bl	80033dc <HAL_I2C_Master_Transmit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f3      	bne.n	8000fce <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000fe6:	bf00      	nop
}
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002b8 	.word	0x200002b8

08000ff4 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f023 030f 	bic.w	r3, r3, #15
 8001004:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f043 030d 	orr.w	r3, r3, #13
 8001012:	b2db      	uxtb	r3, r3
 8001014:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f043 0309 	orr.w	r3, r3, #9
 800101c:	b2db      	uxtb	r3, r3
 800101e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	f043 030d 	orr.w	r3, r3, #13
 8001026:	b2db      	uxtb	r3, r3
 8001028:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	f043 0309 	orr.w	r3, r3, #9
 8001030:	b2db      	uxtb	r3, r3
 8001032:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001034:	bf00      	nop
 8001036:	f107 0208 	add.w	r2, r7, #8
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2304      	movs	r3, #4
 8001040:	214e      	movs	r1, #78	; 0x4e
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <lcd_data+0x64>)
 8001044:	f002 f9ca 	bl	80033dc <HAL_I2C_Master_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f3      	bne.n	8001036 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800104e:	bf00      	nop
}
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200002b8 	.word	0x200002b8

0800105c <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8001060:	2033      	movs	r0, #51	; 0x33
 8001062:	f7ff ff93 	bl	8000f8c <lcd_command>
	lcd_command(0x32);
 8001066:	2032      	movs	r0, #50	; 0x32
 8001068:	f7ff ff90 	bl	8000f8c <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 800106c:	2028      	movs	r0, #40	; 0x28
 800106e:	f7ff ff8d 	bl	8000f8c <lcd_command>
	lcd_command(DISPLAY_ON);
 8001072:	200c      	movs	r0, #12
 8001074:	f7ff ff8a 	bl	8000f8c <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8001078:	2006      	movs	r0, #6
 800107a:	f7ff ff87 	bl	8000f8c <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff ff84 	bl	8000f8c <lcd_command>
	HAL_Delay(2);
 8001084:	2002      	movs	r0, #2
 8001086:	f001 f997 	bl	80023b8 <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}

0800108e <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	while(*str)
 8001096:	e006      	b.n	80010a6 <lcd_string+0x18>
	{
		lcd_data(*str++);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffa7 	bl	8000ff4 <lcd_data>
	while(*str)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f4      	bne.n	8001098 <lcd_string+0xa>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	019b      	lsls	r3, r3, #6
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff56 	bl	8000f8c <lcd_command>
	return;
 80010e0:	bf00      	nop
}
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_SYSTICK_Handler+0x18>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_SYSTICK_Handler+0x18>)
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	20000984 	.word	0x20000984

08001104 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800110c:	1d39      	adds	r1, r7, #4
 800110e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001112:	2201      	movs	r2, #1
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <__io_putchar+0x20>)
 8001116:	f004 f9a4 	bl	8005462 <HAL_UART_Transmit>

  return ch;
 800111a:	687b      	ldr	r3, [r7, #4]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200003e4 	.word	0x200003e4

08001128 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d109      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001142:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800114c:	6013      	str	r3, [r2, #0]
	}
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40014400 	.word	0x40014400
 8001160:	2000097c 	.word	0x2000097c
 8001164:	20000980 	.word	0x20000980

08001168 <delay_us>:

void delay_us(unsigned long us)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <delay_us+0x2c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001178:	bf00      	nop
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <delay_us+0x2c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d8f9      	bhi.n	800117a <delay_us+0x12>
		;
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	2000039c 	.word	0x2000039c

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f001 f89a 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f842 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 fa56 	bl	8001654 <MX_GPIO_Init>
  MX_ETH_Init();
 80011a8:	f000 f8a8 	bl	80012fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011ac:	f000 f9d0 	bl	8001550 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011b0:	f000 fa22 	bl	80015f8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80011b4:	f000 f9f6 	bl	80015a4 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80011b8:	f000 f982 	bl	80014c0 <MX_TIM10_Init>
  MX_TIM11_Init();
 80011bc:	f000 f9a4 	bl	8001508 <MX_TIM11_Init>
  MX_TIM3_Init();
 80011c0:	f000 f92a 	bl	8001418 <MX_TIM3_Init>
  MX_I2C1_Init();
 80011c4:	f000 f8e8 	bl	8001398 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 80011c8:	2201      	movs	r2, #1
 80011ca:	490f      	ldr	r1, [pc, #60]	; (8001208 <main+0x70>)
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <main+0x74>)
 80011ce:	f004 f9da 	bl	8005586 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 80011d2:	2201      	movs	r2, #1
 80011d4:	490e      	ldr	r1, [pc, #56]	; (8001210 <main+0x78>)
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <main+0x7c>)
 80011d8:	f004 f9d5 	bl	8005586 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <main+0x80>)
 80011de:	f003 fa85 	bl	80046ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <main+0x84>)
 80011e4:	f003 fa82 	bl	80046ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <main+0x88>)
 80011ec:	f003 fb3e 	bl	800486c <HAL_TIM_IC_Start_IT>

  DHT11_Init();
 80011f0:	f7ff fe18 	bl	8000e24 <DHT11_Init>
  i2c_lcd_init();
 80011f4:	f7ff ff32 	bl	800105c <i2c_lcd_init>

  TIM10_10ms_counter=0;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <main+0x8c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DHT11_processing();
 80011fe:	f7ff fdbf 	bl	8000d80 <DHT11_processing>
 //	pc_command_processing();
 //	bt_command_processing();
 	ultrasonic_processing();
 8001202:	f000 ffc9 	bl	8002198 <ultrasonic_processing>
	DHT11_processing();
 8001206:	e7fa      	b.n	80011fe <main+0x66>
 8001208:	20000978 	.word	0x20000978
 800120c:	200003e4 	.word	0x200003e4
 8001210:	20000979 	.word	0x20000979
 8001214:	20000428 	.word	0x20000428
 8001218:	20000354 	.word	0x20000354
 800121c:	2000039c 	.word	0x2000039c
 8001220:	2000030c 	.word	0x2000030c
 8001224:	2000097c 	.word	0x2000097c

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fc6a 	bl	8006b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <SystemClock_Config+0xcc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <SystemClock_Config+0xd0>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001288:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800129c:	23a8      	movs	r3, #168	; 0xa8
 800129e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a4:	2307      	movs	r3, #7
 80012a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fd35 	bl	8003d1c <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b8:	f000 fae6 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	230f      	movs	r3, #15
 80012be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c0:	2302      	movs	r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2105      	movs	r1, #5
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 ff96 	bl	800420c <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012e6:	f000 facf 	bl	8001888 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3750      	adds	r7, #80	; 0x50
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <MX_ETH_Init+0x84>)
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <MX_ETH_Init+0x88>)
 8001304:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_ETH_Init+0x8c>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_ETH_Init+0x8c>)
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_ETH_Init+0x8c>)
 8001314:	22e1      	movs	r2, #225	; 0xe1
 8001316:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_ETH_Init+0x8c>)
 800131a:	2200      	movs	r2, #0
 800131c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_ETH_Init+0x8c>)
 8001320:	2200      	movs	r2, #0
 8001322:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_ETH_Init+0x8c>)
 8001326:	2200      	movs	r2, #0
 8001328:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_ETH_Init+0x84>)
 800132c:	4a16      	ldr	r2, [pc, #88]	; (8001388 <MX_ETH_Init+0x8c>)
 800132e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_ETH_Init+0x84>)
 8001332:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001336:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_ETH_Init+0x84>)
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <MX_ETH_Init+0x90>)
 800133c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_ETH_Init+0x84>)
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <MX_ETH_Init+0x94>)
 8001342:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_ETH_Init+0x84>)
 8001346:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800134a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_ETH_Init+0x84>)
 800134e:	f001 f9fb 	bl	8002748 <HAL_ETH_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001358:	f000 fa96 	bl	8001888 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800135c:	2238      	movs	r2, #56	; 0x38
 800135e:	2100      	movs	r1, #0
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_ETH_Init+0x98>)
 8001362:	f005 fbd5 	bl	8006b10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_ETH_Init+0x98>)
 8001368:	2221      	movs	r2, #33	; 0x21
 800136a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_ETH_Init+0x98>)
 800136e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001372:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_ETH_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000208 	.word	0x20000208
 8001384:	40028000 	.word	0x40028000
 8001388:	20000988 	.word	0x20000988
 800138c:	20000168 	.word	0x20000168
 8001390:	200000c8 	.word	0x200000c8
 8001394:	20000090 	.word	0x20000090

08001398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_I2C1_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <MX_I2C1_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_I2C1_Init+0x74>)
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <MX_I2C1_Init+0x7c>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_I2C1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_I2C1_Init+0x74>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_I2C1_Init+0x74>)
 80013d6:	f001 febd 	bl	8003154 <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 fa52 	bl	8001888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_I2C1_Init+0x74>)
 80013e8:	f002 faff 	bl	80039ea <HAL_I2CEx_ConfigAnalogFilter>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013f2:	f000 fa49 	bl	8001888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_I2C1_Init+0x74>)
 80013fa:	f002 fb32 	bl	8003a62 <HAL_I2CEx_ConfigDigitalFilter>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 fa40 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002b8 	.word	0x200002b8
 8001410:	40005400 	.word	0x40005400
 8001414:	000186a0 	.word	0x000186a0

08001418 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <MX_TIM3_Init+0xa4>)
 8001438:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_TIM3_Init+0xa0>)
 800143c:	2253      	movs	r2, #83	; 0x53
 800143e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM3_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800145a:	4817      	ldr	r0, [pc, #92]	; (80014b8 <MX_TIM3_Init+0xa0>)
 800145c:	f003 f9b6 	bl	80047cc <HAL_TIM_IC_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001466:	f000 fa0f 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_TIM3_Init+0xa0>)
 800147a:	f003 ff15 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001484:	f000 fa00 	bl	8001888 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001488:	230a      	movs	r3, #10
 800148a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800148c:	2301      	movs	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM3_Init+0xa0>)
 80014a0:	f003 fc14 	bl	8004ccc <HAL_TIM_IC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014aa:	f000 f9ed 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000030c 	.word	0x2000030c
 80014bc:	40000400 	.word	0x40000400

080014c0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_TIM10_Init+0x40>)
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <MX_TIM10_Init+0x44>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_TIM10_Init+0x40>)
 80014cc:	22a7      	movs	r2, #167	; 0xa7
 80014ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_TIM10_Init+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_TIM10_Init+0x40>)
 80014d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80014dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_TIM10_Init+0x40>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_TIM10_Init+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM10_Init+0x40>)
 80014ec:	f003 f8ae 	bl	800464c <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014f6:	f000 f9c7 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000354 	.word	0x20000354
 8001504:	40014400 	.word	0x40014400

08001508 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM11_Init+0x40>)
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <MX_TIM11_Init+0x44>)
 8001510:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <MX_TIM11_Init+0x40>)
 8001514:	22a7      	movs	r2, #167	; 0xa7
 8001516:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_TIM11_Init+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_TIM11_Init+0x40>)
 8001520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001524:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_TIM11_Init+0x40>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_TIM11_Init+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_TIM11_Init+0x40>)
 8001534:	f003 f88a 	bl	800464c <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800153e:	f000 f9a3 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000039c 	.word	0x2000039c
 800154c:	40014800 	.word	0x40014800

08001550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_USART3_UART_Init+0x4c>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <MX_USART3_UART_Init+0x50>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_USART3_UART_Init+0x4c>)
 800155c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_USART3_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_USART3_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_USART3_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_USART3_UART_Init+0x4c>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_USART3_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_USART3_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_USART3_UART_Init+0x4c>)
 8001588:	f003 ff1e 	bl	80053c8 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001592:	f000 f979 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003e4 	.word	0x200003e4
 80015a0:	40004800 	.word	0x40004800

080015a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_USART6_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART6_UART_Init+0x4c>)
 80015dc:	f003 fef4 	bl	80053c8 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f000 f94f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000428 	.word	0x20000428
 80015f4:	40011400 	.word	0x40011400

080015f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001602:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2204      	movs	r2, #4
 8001608:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2202      	movs	r2, #2
 800160e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2202      	movs	r2, #2
 800161a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2201      	movs	r2, #1
 8001620:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001630:	2201      	movs	r2, #1
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800163c:	f002 fa50 	bl	8003ae0 <HAL_PCD_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 f91f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000046c 	.word	0x2000046c

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <MX_GPIO_Init+0x214>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a7d      	ldr	r2, [pc, #500]	; (8001868 <MX_GPIO_Init+0x214>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <MX_GPIO_Init+0x214>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	4b77      	ldr	r3, [pc, #476]	; (8001868 <MX_GPIO_Init+0x214>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a76      	ldr	r2, [pc, #472]	; (8001868 <MX_GPIO_Init+0x214>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b74      	ldr	r3, [pc, #464]	; (8001868 <MX_GPIO_Init+0x214>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <MX_GPIO_Init+0x214>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <MX_GPIO_Init+0x214>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <MX_GPIO_Init+0x214>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	4b69      	ldr	r3, [pc, #420]	; (8001868 <MX_GPIO_Init+0x214>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a68      	ldr	r2, [pc, #416]	; (8001868 <MX_GPIO_Init+0x214>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b66      	ldr	r3, [pc, #408]	; (8001868 <MX_GPIO_Init+0x214>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b62      	ldr	r3, [pc, #392]	; (8001868 <MX_GPIO_Init+0x214>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a61      	ldr	r2, [pc, #388]	; (8001868 <MX_GPIO_Init+0x214>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <MX_GPIO_Init+0x214>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <MX_GPIO_Init+0x214>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a5a      	ldr	r2, [pc, #360]	; (8001868 <MX_GPIO_Init+0x214>)
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b58      	ldr	r3, [pc, #352]	; (8001868 <MX_GPIO_Init+0x214>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <MX_GPIO_Init+0x214>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a53      	ldr	r2, [pc, #332]	; (8001868 <MX_GPIO_Init+0x214>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <MX_GPIO_Init+0x214>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <MX_GPIO_Init+0x214>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <MX_GPIO_Init+0x214>)
 8001738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <MX_GPIO_Init+0x214>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2101      	movs	r1, #1
 800174e:	4847      	ldr	r0, [pc, #284]	; (800186c <MX_GPIO_Init+0x218>)
 8001750:	f001 fce6 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f244 0181 	movw	r1, #16513	; 0x4081
 800175a:	4845      	ldr	r0, [pc, #276]	; (8001870 <MX_GPIO_Init+0x21c>)
 800175c:	f001 fce0 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001766:	4843      	ldr	r0, [pc, #268]	; (8001874 <MX_GPIO_Init+0x220>)
 8001768:	f001 fcda 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	4841      	ldr	r0, [pc, #260]	; (8001878 <MX_GPIO_Init+0x224>)
 8001772:	f001 fcd5 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001776:	2200      	movs	r2, #0
 8001778:	21ff      	movs	r1, #255	; 0xff
 800177a:	4840      	ldr	r0, [pc, #256]	; (800187c <MX_GPIO_Init+0x228>)
 800177c:	f001 fcd0 	bl	8003120 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001786:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	483a      	ldr	r0, [pc, #232]	; (8001880 <MX_GPIO_Init+0x22c>)
 8001798:	f001 fafe 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800179c:	2301      	movs	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	482e      	ldr	r0, [pc, #184]	; (800186c <MX_GPIO_Init+0x218>)
 80017b4:	f001 faf0 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4827      	ldr	r0, [pc, #156]	; (8001870 <MX_GPIO_Init+0x21c>)
 80017d2:	f001 fae1 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4821      	ldr	r0, [pc, #132]	; (8001874 <MX_GPIO_Init+0x220>)
 80017f0:	f001 fad2 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80017f4:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	481e      	ldr	r0, [pc, #120]	; (8001884 <MX_GPIO_Init+0x230>)
 800180a:	f001 fac5 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4814      	ldr	r0, [pc, #80]	; (8001878 <MX_GPIO_Init+0x224>)
 8001826:	f001 fab7 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	480e      	ldr	r0, [pc, #56]	; (8001878 <MX_GPIO_Init+0x224>)
 800183e:	f001 faab 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001842:	23ff      	movs	r3, #255	; 0xff
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <MX_GPIO_Init+0x228>)
 800185a:	f001 fa9d 	bl	8002d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185e:	bf00      	nop
 8001860:	3738      	adds	r7, #56	; 0x38
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40021400 	.word	0x40021400
 8001878:	40021800 	.word	0x40021800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40020800 	.word	0x40020800
 8001884:	40021000 	.word	0x40021000

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <HAL_ETH_MspInit+0x174>)
 8001902:	4293      	cmp	r3, r2
 8001904:	f040 80a4 	bne.w	8001a50 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	623b      	str	r3, [r7, #32]
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800192e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800194a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a36      	ldr	r2, [pc, #216]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 80019ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019be:	6313      	str	r3, [r2, #48]	; 0x30
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_ETH_MspInit+0x178>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019cc:	2332      	movs	r3, #50	; 0x32
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019dc:	230b      	movs	r3, #11
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <HAL_ETH_MspInit+0x17c>)
 80019e8:	f001 f9d6 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019ec:	2386      	movs	r3, #134	; 0x86
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fc:	230b      	movs	r3, #11
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4817      	ldr	r0, [pc, #92]	; (8001a64 <HAL_ETH_MspInit+0x180>)
 8001a08:	f001 f9c6 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a1e:	230b      	movs	r3, #11
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	480f      	ldr	r0, [pc, #60]	; (8001a68 <HAL_ETH_MspInit+0x184>)
 8001a2a:	f001 f9b5 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a40:	230b      	movs	r3, #11
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4808      	ldr	r0, [pc, #32]	; (8001a6c <HAL_ETH_MspInit+0x188>)
 8001a4c:	f001 f9a4 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3738      	adds	r7, #56	; 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40028000 	.word	0x40028000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40021800 	.word	0x40021800

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_I2C_MspInit+0x84>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12c      	bne.n	8001aec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab4:	2312      	movs	r3, #18
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <HAL_I2C_MspInit+0x8c>)
 8001acc:	f001 f964 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_I2C_MspInit+0x88>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400

08001b00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_TIM_IC_MspInit+0x94>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d133      	bne.n	8001b8a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_TIM_IC_MspInit+0x98>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_TIM_IC_MspInit+0x98>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_TIM_IC_MspInit+0x98>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_TIM_IC_MspInit+0x98>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_TIM_IC_MspInit+0x98>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_TIM_IC_MspInit+0x98>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001b5a:	2340      	movs	r3, #64	; 0x40
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_TIM_IC_MspInit+0x9c>)
 8001b76:	f001 f90f 	bl	8002d98 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	201d      	movs	r0, #29
 8001b80:	f000 fd19 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b84:	201d      	movs	r0, #29
 8001b86:	f000 fd32 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_TIM_Base_MspInit+0x80>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d116      	bne.n	8001be0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f000 fcef 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f000 fd08 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bde:	e01a      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_TIM_Base_MspInit+0x88>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d115      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201a      	movs	r0, #26
 8001c0c:	f000 fcd3 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c10:	201a      	movs	r0, #26
 8001c12:	f000 fcec 	bl	80025ee <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40014400 	.word	0x40014400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40014800 	.word	0x40014800

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_UART_MspInit+0x108>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d135      	bne.n	8001cba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4826      	ldr	r0, [pc, #152]	; (8001d3c <HAL_UART_MspInit+0x110>)
 8001ca4:	f001 f878 	bl	8002d98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2027      	movs	r0, #39	; 0x27
 8001cae:	f000 fc82 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cb2:	2027      	movs	r0, #39	; 0x27
 8001cb4:	f000 fc9b 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001cb8:	e038      	b.n	8001d2c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_UART_MspInit+0x114>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d133      	bne.n	8001d2c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_UART_MspInit+0x10c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfc:	23c0      	movs	r3, #192	; 0xc0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <HAL_UART_MspInit+0x118>)
 8001d18:	f001 f83e 	bl	8002d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2047      	movs	r0, #71	; 0x47
 8001d22:	f000 fc48 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d26:	2047      	movs	r0, #71	; 0x47
 8001d28:	f000 fc61 	bl	80025ee <HAL_NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40004800 	.word	0x40004800
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40011400 	.word	0x40011400
 8001d44:	40020800 	.word	0x40020800

08001d48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d68:	d13f      	bne.n	8001dea <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d86:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d98:	230a      	movs	r3, #10
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4815      	ldr	r0, [pc, #84]	; (8001df8 <HAL_PCD_MspInit+0xb0>)
 8001da4:	f000 fff8 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480e      	ldr	r0, [pc, #56]	; (8001df8 <HAL_PCD_MspInit+0xb0>)
 8001dbe:	f000 ffeb 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6353      	str	r3, [r2, #52]	; 0x34
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_PCD_MspInit+0xac>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 fa96 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8001e4c:	f7ff f94c 	bl	80010e8 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e5a:	f002 fe2f 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000354 	.word	0x20000354

08001e68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e6e:	f002 fe25 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000039c 	.word	0x2000039c

08001e7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM3_IRQHandler+0x10>)
 8001e82:	f002 fe1b 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000030c 	.word	0x2000030c

08001e90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <USART3_IRQHandler+0x10>)
 8001e96:	f003 fba7 	bl	80055e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200003e4 	.word	0x200003e4

08001ea4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <USART6_IRQHandler+0x10>)
 8001eaa:	f003 fb9d 	bl	80055e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000428 	.word	0x20000428

08001eb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e00a      	b.n	8001ee0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eca:	f3af 8000 	nop.w
 8001ece:	4601      	mov	r1, r0
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	60ba      	str	r2, [r7, #8]
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf0      	blt.n	8001eca <_read+0x12>
  }

  return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e009      	b.n	8001f18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	60ba      	str	r2, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f8f9 	bl	8001104 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf1      	blt.n	8001f04 <_write+0x12>
  }
  return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_close>:

int _close(int file)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f52:	605a      	str	r2, [r3, #4]
  return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_isatty>:

int _isatty(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <_sbrk+0x5c>)
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <_sbrk+0x60>)
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <_sbrk+0x64>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <_sbrk+0x68>)
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d207      	bcs.n	8001fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc4:	f004 fd7a 	bl	8006abc <__errno>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	220c      	movs	r2, #12
 8001fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	e009      	b.n	8001fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <_sbrk+0x64>)
 8001fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20030000 	.word	0x20030000
 8001ff4:	00000400 	.word	0x00000400
 8001ff8:	20000990 	.word	0x20000990
 8001ffc:	20000a18 	.word	0x20000a18

08002000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <SystemInit+0x20>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <SystemInit+0x20>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a32      	ldr	r2, [pc, #200]	; (80020f8 <HAL_UART_RxCpltCallback+0xd4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12c      	bne.n	800208e <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b27      	cmp	r3, #39	; 0x27
 800203a:	dc1d      	bgt.n	8002078 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_UART_RxCpltCallback+0xdc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b0a      	cmp	r3, #10
 8002042:	d003      	beq.n	800204c <HAL_UART_RxCpltCallback+0x28>
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_UART_RxCpltCallback+0xdc>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b0d      	cmp	r3, #13
 800204a:	d10b      	bne.n	8002064 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <HAL_UART_RxCpltCallback+0xe0>)
 8002052:	2100      	movs	r1, #0
 8002054:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_UART_RxCpltCallback+0xe4>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e00f      	b.n	8002084 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	4924      	ldr	r1, [pc, #144]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 800206c:	600a      	str	r2, [r1, #0]
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_UART_RxCpltCallback+0xdc>)
 8002070:	7811      	ldrb	r1, [r2, #0]
 8002072:	4a24      	ldr	r2, [pc, #144]	; (8002104 <HAL_UART_RxCpltCallback+0xe0>)
 8002074:	54d1      	strb	r1, [r2, r3]
 8002076:	e005      	b.n	8002084 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 800207e:	4823      	ldr	r0, [pc, #140]	; (800210c <HAL_UART_RxCpltCallback+0xe8>)
 8002080:	f004 fdd4 	bl	8006c2c <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002084:	2201      	movs	r2, #1
 8002086:	491e      	ldr	r1, [pc, #120]	; (8002100 <HAL_UART_RxCpltCallback+0xdc>)
 8002088:	481b      	ldr	r0, [pc, #108]	; (80020f8 <HAL_UART_RxCpltCallback+0xd4>)
 800208a:	f003 fa7c 	bl	8005586 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <HAL_UART_RxCpltCallback+0xec>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12c      	bne.n	80020f0 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_UART_RxCpltCallback+0xf0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b27      	cmp	r3, #39	; 0x27
 800209c:	dc1d      	bgt.n	80020da <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_UART_RxCpltCallback+0xf4>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d003      	beq.n	80020ae <HAL_UART_RxCpltCallback+0x8a>
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_UART_RxCpltCallback+0xf4>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b0d      	cmp	r3, #13
 80020ac:	d10b      	bne.n	80020c6 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_UART_RxCpltCallback+0xd8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_UART_RxCpltCallback+0xf8>)
 80020b4:	2100      	movs	r1, #0
 80020b6:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_UART_RxCpltCallback+0xfc>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_UART_RxCpltCallback+0xf0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e00f      	b.n	80020e6 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_UART_RxCpltCallback+0xf0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	4911      	ldr	r1, [pc, #68]	; (8002114 <HAL_UART_RxCpltCallback+0xf0>)
 80020ce:	600a      	str	r2, [r1, #0]
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_UART_RxCpltCallback+0xf4>)
 80020d2:	7811      	ldrb	r1, [r2, #0]
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_UART_RxCpltCallback+0xf8>)
 80020d6:	54d1      	strb	r1, [r2, r3]
 80020d8:	e005      	b.n	80020e6 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_UART_RxCpltCallback+0xf0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 80020e0:	4810      	ldr	r0, [pc, #64]	; (8002124 <HAL_UART_RxCpltCallback+0x100>)
 80020e2:	f004 fda3 	bl	8006c2c <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80020e6:	2201      	movs	r2, #1
 80020e8:	490b      	ldr	r1, [pc, #44]	; (8002118 <HAL_UART_RxCpltCallback+0xf4>)
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <HAL_UART_RxCpltCallback+0xec>)
 80020ec:	f003 fa4b 	bl	8005586 <HAL_UART_Receive_IT>
	}
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200003e4 	.word	0x200003e4
 80020fc:	200009bc 	.word	0x200009bc
 8002100:	20000978 	.word	0x20000978
 8002104:	20000994 	.word	0x20000994
 8002108:	200009c0 	.word	0x200009c0
 800210c:	08007f30 	.word	0x08007f30
 8002110:	20000428 	.word	0x20000428
 8002114:	200009ec 	.word	0x200009ec
 8002118:	20000979 	.word	0x20000979
 800211c:	200009c4 	.word	0x200009c4
 8002120:	200009f0 	.word	0x200009f0
 8002124:	08007f48 	.word	0x08007f48

08002128 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d11f      	bne.n	800217a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x60>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x60>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002152:	e012      	b.n	800217a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10d      	bne.n	800217a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f002 fe4c 	bl	8004e04 <HAL_TIM_ReadCapturedValue>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_TIM_IC_CaptureCallback+0x64>)
 8002172:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40000400 	.word	0x40000400
 8002188:	200009fc 	.word	0x200009fc
 800218c:	200009f4 	.word	0x200009f4
 8002190:	200009f8 	.word	0x200009f8
 8002194:	00000000 	.word	0x00000000

08002198 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
	int dis; // 거리를 측정한 펄스 갯수를 저장 하는 변수
	char lcd_buff[20];

	if (TIM10_10ms_ultrasonic >= 100)   // 1초
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <ultrasonic_processing+0x98>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b63      	cmp	r3, #99	; 0x63
 80021a4:	dd3a      	ble.n	800221c <ultrasonic_processing+0x84>
	{
		TIM10_10ms_ultrasonic=0;
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <ultrasonic_processing+0x98>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
		make_trigger();
 80021ac:	f000 f84a 	bl	8002244 <make_trigger>
		if (ic_cpt_finish_flag)  // 초음파 측정이 완료 되었으면  if (ic_cpt_finish_flag >= 1)
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <ultrasonic_processing+0x9c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d031      	beq.n	800221c <ultrasonic_processing+0x84>
		{
			ic_cpt_finish_flag=0;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <ultrasonic_processing+0x9c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
			dis = distance;
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <ultrasonic_processing+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]
			dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 80021c4:	6978      	ldr	r0, [r7, #20]
 80021c6:	f7fe f9b5 	bl	8000534 <__aeabi_i2d>
 80021ca:	a317      	add	r3, pc, #92	; (adr r3, 8002228 <ultrasonic_processing+0x90>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fa1a 	bl	8000608 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e4:	f7fe fb3a 	bl	800085c <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fc1c 	bl	8000a2c <__aeabi_d2iz>
 80021f4:	4603      	mov	r3, r0
 80021f6:	617b      	str	r3, [r7, #20]
			// 왕복 거리를 리턴해 주기 떄문에 /2를 해주는 것이다.
			printf("dis: %dcm\n", dis);
 80021f8:	6979      	ldr	r1, [r7, #20]
 80021fa:	4810      	ldr	r0, [pc, #64]	; (800223c <ultrasonic_processing+0xa4>)
 80021fc:	f004 fc90 	bl	8006b20 <iprintf>
			sprintf(lcd_buff,"dis: %dcm", dis);
 8002200:	463b      	mov	r3, r7
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	490e      	ldr	r1, [pc, #56]	; (8002240 <ultrasonic_processing+0xa8>)
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fd18 	bl	8006c3c <siprintf>
			move_cursor(1,0);
 800220c:	2100      	movs	r1, #0
 800220e:	2001      	movs	r0, #1
 8002210:	f7fe ff52 	bl	80010b8 <move_cursor>
			lcd_string(lcd_buff);
 8002214:	463b      	mov	r3, r7
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ff39 	bl	800108e <lcd_string>
		}
	}
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	f3af 8000 	nop.w
 8002228:	b020c49c 	.word	0xb020c49c
 800222c:	3fa16872 	.word	0x3fa16872
 8002230:	20000980 	.word	0x20000980
 8002234:	200009f8 	.word	0x200009f8
 8002238:	200009f4 	.word	0x200009f4
 800223c:	08007fd8 	.word	0x08007fd8
 8002240:	08007fe4 	.word	0x08007fe4

08002244 <make_trigger>:

void make_trigger()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <make_trigger+0x38>)
 8002250:	f000 ff66 	bl	8003120 <HAL_GPIO_WritePin>
	delay_us(2);
 8002254:	2002      	movs	r0, #2
 8002256:	f7fe ff87 	bl	8001168 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002260:	4806      	ldr	r0, [pc, #24]	; (800227c <make_trigger+0x38>)
 8002262:	f000 ff5d 	bl	8003120 <HAL_GPIO_WritePin>
	delay_us(10);
 8002266:	200a      	movs	r0, #10
 8002268:	f7fe ff7e 	bl	8001168 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002272:	4802      	ldr	r0, [pc, #8]	; (800227c <make_trigger+0x38>)
 8002274:	f000 ff54 	bl	8003120 <HAL_GPIO_WritePin>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021400 	.word	0x40021400

08002280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002286:	490e      	ldr	r1, [pc, #56]	; (80022c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800229c:	4c0b      	ldr	r4, [pc, #44]	; (80022cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022aa:	f7ff fea9 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ae:	f004 fc0b 	bl	8006ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b2:	f7fe ff71 	bl	8001198 <main>
  bx  lr    
 80022b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022c4:	080080b0 	.word	0x080080b0
  ldr r2, =_sbss
 80022c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022cc:	20000a14 	.word	0x20000a14

080022d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_Init+0x40>)
 80022de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_Init+0x40>)
 80022ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_Init+0x40>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f94f 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	2000      	movs	r0, #0
 8002304:	f000 f808 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff fac4 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f967 	bl	800260a <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f000 f92f 	bl	80025b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000004 	.word	0x20000004
 8002370:	2000000c 	.word	0x2000000c
 8002374:	20000008 	.word	0x20000008

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	2000000c 	.word	0x2000000c
 800239c:	20000a00 	.word	0x20000a00

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000a00 	.word	0x20000a00

080023b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff ffee 	bl	80023a0 <HAL_GetTick>
 80023c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d005      	beq.n	80023de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_Delay+0x44>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023de:	bf00      	nop
 80023e0:	f7ff ffde 	bl	80023a0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d8f7      	bhi.n	80023e0 <HAL_Delay+0x28>
  {
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000000c 	.word	0x2000000c

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <__NVIC_EnableIRQ+0x38>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	; (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	; (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256c:	d301      	bcc.n	8002572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256e:	2301      	movs	r3, #1
 8002570:	e00f      	b.n	8002592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <SysTick_Config+0x40>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257a:	210f      	movs	r1, #15
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f7ff ff8e 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <SysTick_Config+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <SysTick_Config+0x40>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff29 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c8:	f7ff ff3e 	bl	8002448 <__NVIC_GetPriorityGrouping>
 80025cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff8e 	bl	80024f4 <NVIC_EncodePriority>
 80025d8:	4602      	mov	r2, r0
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff5d 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff31 	bl	8002464 <__NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffa2 	bl	800255c <SysTick_Config>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff feb6 	bl	80023a0 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e052      	b.n	80026fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0216 	bic.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002672:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <HAL_DMA_Abort+0x62>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0208 	bic.w	r2, r2, #8
 8002692:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	e013      	b.n	80026ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a6:	f7ff fe7b 	bl	80023a0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d90c      	bls.n	80026ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2203      	movs	r2, #3
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e015      	b.n	80026fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e4      	bne.n	80026a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	223f      	movs	r2, #63	; 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e00c      	b.n	800273a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2205      	movs	r2, #5
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06c      	b.n	8002834 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2223      	movs	r2, #35	; 0x23
 8002768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff f8b9 	bl	80018e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_ETH_Init+0xf4>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a30      	ldr	r2, [pc, #192]	; (800283c <HAL_ETH_Init+0xf4>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b2e      	ldr	r3, [pc, #184]	; (800283c <HAL_ETH_Init+0xf4>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800278e:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <HAL_ETH_Init+0xf8>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <HAL_ETH_Init+0xf8>)
 8002794:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002798:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_ETH_Init+0xf8>)
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4927      	ldr	r1, [pc, #156]	; (8002840 <HAL_ETH_Init+0xf8>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_ETH_Init+0xf8>)
 80027aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c4:	f7ff fdec 	bl	80023a0 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027ca:	e011      	b.n	80027f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80027cc:	f7ff fde8 	bl	80023a0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027da:	d909      	bls.n	80027f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2204      	movs	r2, #4
 80027e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	22e0      	movs	r2, #224	; 0xe0
 80027e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e021      	b.n	8002834 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e4      	bne.n	80027cc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f958 	bl	8002ab8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9ff 	bl	8002c0c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa55 	bl	8002cbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	461a      	mov	r2, r3
 800281a:	2100      	movs	r1, #0
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f9bd 	bl	8002b9c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2210      	movs	r2, #16
 800282e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	40013800 	.word	0x40013800

08002844 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4b51      	ldr	r3, [pc, #324]	; (80029a0 <ETH_SetMACConfig+0x15c>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7c1b      	ldrb	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <ETH_SetMACConfig+0x28>
 8002866:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800286a:	e000      	b.n	800286e <ETH_SetMACConfig+0x2a>
 800286c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7c5b      	ldrb	r3, [r3, #17]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <ETH_SetMACConfig+0x38>
 8002876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287a:	e000      	b.n	800287e <ETH_SetMACConfig+0x3a>
 800287c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800287e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002884:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	7fdb      	ldrb	r3, [r3, #31]
 800288a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800288c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	7f92      	ldrb	r2, [r2, #30]
 8002898:	2a00      	cmp	r2, #0
 800289a:	d102      	bne.n	80028a2 <ETH_SetMACConfig+0x5e>
 800289c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a0:	e000      	b.n	80028a4 <ETH_SetMACConfig+0x60>
 80028a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80028a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	7f1b      	ldrb	r3, [r3, #28]
 80028aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	791b      	ldrb	r3, [r3, #4]
 80028b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	d102      	bne.n	80028cc <ETH_SetMACConfig+0x88>
 80028c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ca:	e000      	b.n	80028ce <ETH_SetMACConfig+0x8a>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	7bdb      	ldrb	r3, [r3, #15]
 80028d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028e6:	4313      	orrs	r3, r2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028fe:	2001      	movs	r0, #1
 8002900:	f7ff fd5a 	bl	80023b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	f64f 7341 	movw	r3, #65345	; 0xff41
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800292a:	2a00      	cmp	r2, #0
 800292c:	d101      	bne.n	8002932 <ETH_SetMACConfig+0xee>
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	e000      	b.n	8002934 <ETH_SetMACConfig+0xf0>
 8002932:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002934:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800293a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002942:	2a01      	cmp	r2, #1
 8002944:	d101      	bne.n	800294a <ETH_SetMACConfig+0x106>
 8002946:	2208      	movs	r2, #8
 8002948:	e000      	b.n	800294c <ETH_SetMACConfig+0x108>
 800294a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800294c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002954:	2a01      	cmp	r2, #1
 8002956:	d101      	bne.n	800295c <ETH_SetMACConfig+0x118>
 8002958:	2204      	movs	r2, #4
 800295a:	e000      	b.n	800295e <ETH_SetMACConfig+0x11a>
 800295c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800295e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002966:	2a01      	cmp	r2, #1
 8002968:	d101      	bne.n	800296e <ETH_SetMACConfig+0x12a>
 800296a:	2202      	movs	r2, #2
 800296c:	e000      	b.n	8002970 <ETH_SetMACConfig+0x12c>
 800296e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002970:	4313      	orrs	r3, r2
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002988:	2001      	movs	r0, #1
 800298a:	f7ff fd15 	bl	80023b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	619a      	str	r2, [r3, #24]
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	ff20810f 	.word	0xff20810f

080029a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <ETH_SetDMAConfig+0x110>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	7b1b      	ldrb	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <ETH_SetDMAConfig+0x2c>
 80029ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029ce:	e000      	b.n	80029d2 <ETH_SetDMAConfig+0x2e>
 80029d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	7b5b      	ldrb	r3, [r3, #13]
 80029d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	7f52      	ldrb	r2, [r2, #29]
 80029de:	2a00      	cmp	r2, #0
 80029e0:	d102      	bne.n	80029e8 <ETH_SetDMAConfig+0x44>
 80029e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029e6:	e000      	b.n	80029ea <ETH_SetDMAConfig+0x46>
 80029e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	7b9b      	ldrb	r3, [r3, #14]
 80029f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	7f1b      	ldrb	r3, [r3, #28]
 80029fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7f9b      	ldrb	r3, [r3, #30]
 8002a06:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a08:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a16:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fcbc 	bl	80023b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	791b      	ldrb	r3, [r3, #4]
 8002a52:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a58:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a5e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a64:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a6c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a6e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a76:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a7c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a8a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f7ff fc8d 	bl	80023b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	f8de3f23 	.word	0xf8de3f23

08002ab8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0a6      	sub	sp, #152	; 0x98
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002acc:	2300      	movs	r3, #0
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002af4:	2300      	movs	r3, #0
 8002af6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe86 	bl	8002844 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b6c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b78:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff08 	bl	80029a4 <ETH_SetDMAConfig>
}
 8002b94:	bf00      	nop
 8002b96:	3798      	adds	r7, #152	; 0x98
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3305      	adds	r3, #5
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	3204      	adds	r2, #4
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <ETH_MACAddressConfig+0x68>)
 8002bbe:	4413      	add	r3, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3303      	adds	r3, #3
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	061a      	lsls	r2, r3, #24
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	4313      	orrs	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <ETH_MACAddressConfig+0x6c>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6013      	str	r3, [r2, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40028040 	.word	0x40028040
 8002c08:	40028044 	.word	0x40028044

08002c0c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e03e      	b.n	8002c98 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68d9      	ldr	r1, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	3206      	adds	r2, #6
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d80c      	bhi.n	8002c7c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68d9      	ldr	r1, [r3, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	e004      	b.n	8002c86 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d9bd      	bls.n	8002c1a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb0:	611a      	str	r2, [r3, #16]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e046      	b.n	8002d5a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6919      	ldr	r1, [r3, #16]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d08:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002d10:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	3212      	adds	r2, #18
 8002d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d80c      	bhi.n	8002d4a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6919      	ldr	r1, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e004      	b.n	8002d54 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d9b5      	bls.n	8002ccc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8a:	60da      	str	r2, [r3, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e177      	b.n	80030a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db4:	2201      	movs	r2, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	f040 8166 	bne.w	800309e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d005      	beq.n	8002dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d130      	bne.n	8002e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e20:	2201      	movs	r2, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 0201 	and.w	r2, r3, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d017      	beq.n	8002e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d123      	bne.n	8002edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	08da      	lsrs	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3208      	adds	r2, #8
 8002e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	08da      	lsrs	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3208      	adds	r2, #8
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0203 	and.w	r2, r3, #3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80c0 	beq.w	800309e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_GPIO_Init+0x324>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	4a65      	ldr	r2, [pc, #404]	; (80030bc <HAL_GPIO_Init+0x324>)
 8002f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_GPIO_Init+0x324>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f3a:	4a61      	ldr	r2, [pc, #388]	; (80030c0 <HAL_GPIO_Init+0x328>)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220f      	movs	r2, #15
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_GPIO_Init+0x32c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d037      	beq.n	8002fd6 <HAL_GPIO_Init+0x23e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a57      	ldr	r2, [pc, #348]	; (80030c8 <HAL_GPIO_Init+0x330>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_GPIO_Init+0x23a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a56      	ldr	r2, [pc, #344]	; (80030cc <HAL_GPIO_Init+0x334>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02b      	beq.n	8002fce <HAL_GPIO_Init+0x236>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a55      	ldr	r2, [pc, #340]	; (80030d0 <HAL_GPIO_Init+0x338>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d025      	beq.n	8002fca <HAL_GPIO_Init+0x232>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a54      	ldr	r2, [pc, #336]	; (80030d4 <HAL_GPIO_Init+0x33c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01f      	beq.n	8002fc6 <HAL_GPIO_Init+0x22e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a53      	ldr	r2, [pc, #332]	; (80030d8 <HAL_GPIO_Init+0x340>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d019      	beq.n	8002fc2 <HAL_GPIO_Init+0x22a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a52      	ldr	r2, [pc, #328]	; (80030dc <HAL_GPIO_Init+0x344>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0x226>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_GPIO_Init+0x348>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00d      	beq.n	8002fba <HAL_GPIO_Init+0x222>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_Init+0x21e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <HAL_GPIO_Init+0x350>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_GPIO_Init+0x21a>
 8002fae:	2309      	movs	r3, #9
 8002fb0:	e012      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fb2:	230a      	movs	r3, #10
 8002fb4:	e010      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	e00e      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fba:	2307      	movs	r3, #7
 8002fbc:	e00c      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fbe:	2306      	movs	r3, #6
 8002fc0:	e00a      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	e008      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e004      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_GPIO_Init+0x240>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f002 0203 	and.w	r2, r2, #3
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	4093      	lsls	r3, r2
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe8:	4935      	ldr	r1, [pc, #212]	; (80030c0 <HAL_GPIO_Init+0x328>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_GPIO_Init+0x354>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301a:	4a34      	ldr	r2, [pc, #208]	; (80030ec <HAL_GPIO_Init+0x354>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_GPIO_Init+0x354>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003044:	4a29      	ldr	r2, [pc, #164]	; (80030ec <HAL_GPIO_Init+0x354>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_GPIO_Init+0x354>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <HAL_GPIO_Init+0x354>)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_GPIO_Init+0x354>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003098:	4a14      	ldr	r2, [pc, #80]	; (80030ec <HAL_GPIO_Init+0x354>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	f67f ae84 	bls.w	8002db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40021400 	.word	0x40021400
 80030dc:	40021800 	.word	0x40021800
 80030e0:	40021c00 	.word	0x40021c00
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40022400 	.word	0x40022400
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e001      	b.n	8003112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800313c:	e003      	b.n	8003146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e12b      	b.n	80033be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fe fc78 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031b8:	f001 fa20 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 80031bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a81      	ldr	r2, [pc, #516]	; (80033c8 <HAL_I2C_Init+0x274>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d807      	bhi.n	80031d8 <HAL_I2C_Init+0x84>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a80      	ldr	r2, [pc, #512]	; (80033cc <HAL_I2C_Init+0x278>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e006      	b.n	80031e6 <HAL_I2C_Init+0x92>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a7d      	ldr	r2, [pc, #500]	; (80033d0 <HAL_I2C_Init+0x27c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	bf94      	ite	ls
 80031e0:	2301      	movls	r3, #1
 80031e2:	2300      	movhi	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0e7      	b.n	80033be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a78      	ldr	r2, [pc, #480]	; (80033d4 <HAL_I2C_Init+0x280>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9b      	lsrs	r3, r3, #18
 80031f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <HAL_I2C_Init+0x274>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d802      	bhi.n	8003228 <HAL_I2C_Init+0xd4>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3301      	adds	r3, #1
 8003226:	e009      	b.n	800323c <HAL_I2C_Init+0xe8>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_I2C_Init+0x284>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	3301      	adds	r3, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800324e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	495c      	ldr	r1, [pc, #368]	; (80033c8 <HAL_I2C_Init+0x274>)
 8003258:	428b      	cmp	r3, r1
 800325a:	d819      	bhi.n	8003290 <HAL_I2C_Init+0x13c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e59      	subs	r1, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fbb1 f3f3 	udiv	r3, r1, r3
 800326a:	1c59      	adds	r1, r3, #1
 800326c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003270:	400b      	ands	r3, r1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_I2C_Init+0x138>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e59      	subs	r1, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fbb1 f3f3 	udiv	r3, r1, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	e051      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 800328c:	2304      	movs	r3, #4
 800328e:	e04f      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <HAL_I2C_Init+0x168>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e012      	b.n	80032e2 <HAL_I2C_Init+0x18e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Init+0x196>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <HAL_I2C_Init+0x1bc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e58      	subs	r0, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	440b      	add	r3, r1
 8003300:	fbb0 f3f3 	udiv	r3, r0, r3
 8003304:	3301      	adds	r3, #1
 8003306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	6809      	ldr	r1, [r1, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800335e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6911      	ldr	r1, [r2, #16]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	430b      	orrs	r3, r1
 8003372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	000186a0 	.word	0x000186a0
 80033cc:	001e847f 	.word	0x001e847f
 80033d0:	003d08ff 	.word	0x003d08ff
 80033d4:	431bde83 	.word	0x431bde83
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	460b      	mov	r3, r1
 80033ea:	817b      	strh	r3, [r7, #10]
 80033ec:	4613      	mov	r3, r2
 80033ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7fe ffd6 	bl	80023a0 <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	f040 80e0 	bne.w	80035c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2319      	movs	r3, #25
 800340a:	2201      	movs	r2, #1
 800340c:	4970      	ldr	r1, [pc, #448]	; (80035d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f964 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	e0d3      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_I2C_Master_Transmit+0x50>
 8003428:	2302      	movs	r3, #2
 800342a:	e0cc      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d007      	beq.n	8003452 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2221      	movs	r2, #33	; 0x21
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2210      	movs	r2, #16
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	893a      	ldrh	r2, [r7, #8]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a50      	ldr	r2, [pc, #320]	; (80035d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003494:	8979      	ldrh	r1, [r7, #10]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f89c 	bl	80035d8 <I2C_MasterRequestWrite>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e08d      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034c0:	e066      	b.n	8003590 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	6a39      	ldr	r1, [r7, #32]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f9de 	bl	8003888 <I2C_WaitOnTXEFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06b      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d11b      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x188>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d017      	beq.n	8003564 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6a39      	ldr	r1, [r7, #32]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f9ce 	bl	800390a <I2C_WaitOnBTFFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e01a      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d194      	bne.n	80034c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000

080035d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d006      	beq.n	8003602 <I2C_MasterRequestWrite+0x2a>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d003      	beq.n	8003602 <I2C_MasterRequestWrite+0x2a>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003600:	d108      	bne.n	8003614 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e00b      	b.n	800362c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b12      	cmp	r3, #18
 800361a:	d107      	bne.n	800362c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f84f 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	d103      	bne.n	800365c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e035      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003668:	d108      	bne.n	800367c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e01b      	b.n	80036b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	11db      	asrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f063 030f 	orn	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <I2C_MasterRequestWrite+0xfc>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f875 	bl	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e010      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <I2C_MasterRequestWrite+0x100>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f865 	bl	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	00010008 	.word	0x00010008
 80036d8:	00010002 	.word	0x00010002

080036dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ec:	e025      	b.n	800373a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d021      	beq.n	800373a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fe53 	bl	80023a0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e023      	b.n	8003782 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10d      	bne.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	e00c      	b.n	800377a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d0b6      	beq.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003798:	e051      	b.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d123      	bne.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e046      	b.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d021      	beq.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7fe fdd1 	bl	80023a0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e020      	b.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10c      	bne.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e00b      	b.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	43da      	mvns	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d18d      	bne.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003894:	e02d      	b.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f878 	bl	800398c <I2C_IsAcknowledgeFailed>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e02d      	b.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d021      	beq.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7fe fd77 	bl	80023a0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e007      	b.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d1ca      	bne.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003916:	e02d      	b.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f837 	bl	800398c <I2C_IsAcknowledgeFailed>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e02d      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d021      	beq.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fe fd36 	bl	80023a0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e007      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d1ca      	bne.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d11b      	bne.n	80039dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d129      	bne.n	8003a54 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0210 	bic.w	r2, r2, #16
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d12a      	bne.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a9c:	89fb      	ldrh	r3, [r7, #14]
 8003a9e:	f023 030f 	bic.w	r3, r3, #15
 8003aa2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	89fb      	ldrh	r3, [r7, #14]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	89fa      	ldrh	r2, [r7, #14]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b08f      	sub	sp, #60	; 0x3c
 8003ae4:	af0a      	add	r7, sp, #40	; 0x28
 8003ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e10f      	b.n	8003d12 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fe f91b 	bl	8001d48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f002 fd22 	bl	800657a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	687e      	ldr	r6, [r7, #4]
 8003b3e:	466d      	mov	r5, sp
 8003b40:	f106 0410 	add.w	r4, r6, #16
 8003b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b54:	1d33      	adds	r3, r6, #4
 8003b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b58:	6838      	ldr	r0, [r7, #0]
 8003b5a:	f002 fcad 	bl	80064b8 <USB_CoreInit>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0d0      	b.n	8003d12 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 fd10 	bl	800659c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e04a      	b.n	8003c18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	333d      	adds	r3, #61	; 0x3d
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	333c      	adds	r3, #60	; 0x3c
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	b298      	uxth	r0, r3
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3344      	adds	r3, #68	; 0x44
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3340      	adds	r3, #64	; 0x40
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3348      	adds	r3, #72	; 0x48
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334c      	adds	r3, #76	; 0x4c
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3354      	adds	r3, #84	; 0x54
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	3301      	adds	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3af      	bcc.n	8003b82 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	e044      	b.n	8003cb2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3b5      	bcc.n	8003c28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	687e      	ldr	r6, [r7, #4]
 8003cc4:	466d      	mov	r5, sp
 8003cc6:	f106 0410 	add.w	r4, r6, #16
 8003cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cda:	1d33      	adds	r3, r6, #4
 8003cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cde:	6838      	ldr	r0, [r7, #0]
 8003ce0:	f002 fca8 	bl	8006634 <USB_DevInit>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00d      	b.n	8003d12 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fe73 	bl	80069f6 <USB_DevDisconnect>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e267      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d075      	beq.n	8003e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	4b88      	ldr	r3, [pc, #544]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d00c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4b85      	ldr	r3, [pc, #532]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d112      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d52:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4b7e      	ldr	r3, [pc, #504]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05b      	beq.n	8003e24 <HAL_RCC_OscConfig+0x108>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d157      	bne.n	8003e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e242      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x74>
 8003d82:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x98>
 8003d9a:	4b70      	ldr	r3, [pc, #448]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6f      	ldr	r2, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b6d      	ldr	r3, [pc, #436]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6c      	ldr	r2, [pc, #432]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fae4 	bl	80023a0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe fae0 	bl	80023a0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e207      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b5b      	ldr	r3, [pc, #364]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0xc0>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fad0 	bl	80023a0 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe facc 	bl	80023a0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e1f3      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0xe8>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d063      	beq.n	8003efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b44      	ldr	r3, [pc, #272]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x152>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1c7      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4937      	ldr	r1, [pc, #220]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	e03a      	b.n	8003efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8c:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <HAL_RCC_OscConfig+0x244>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe fa85 	bl	80023a0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fe fa81 	bl	80023a0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1a8      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4925      	ldr	r1, [pc, #148]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
 8003ecc:	e015      	b.n	8003efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_OscConfig+0x244>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fa64 	bl	80023a0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003edc:	f7fe fa60 	bl	80023a0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e187      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d036      	beq.n	8003f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_RCC_OscConfig+0x248>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fe fa44 	bl	80023a0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fe fa40 	bl	80023a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e167      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x200>
 8003f3a:	e01b      	b.n	8003f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_OscConfig+0x248>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fe fa2d 	bl	80023a0 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e00e      	b.n	8003f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fa29 	bl	80023a0 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d907      	bls.n	8003f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e150      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	42470000 	.word	0x42470000
 8003f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ea      	bne.n	8003f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8097 	beq.w	80040b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	4b7d      	ldr	r3, [pc, #500]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a7c      	ldr	r2, [pc, #496]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa2:	4b7a      	ldr	r3, [pc, #488]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b77      	ldr	r3, [pc, #476]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fe f9e9 	bl	80023a0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fe f9e5 	bl	80023a0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e10c      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x2ea>
 8003ff8:	4b64      	ldr	r3, [pc, #400]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a63      	ldr	r2, [pc, #396]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	e01c      	b.n	8004040 <HAL_RCC_OscConfig+0x324>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b05      	cmp	r3, #5
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x30c>
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a5e      	ldr	r2, [pc, #376]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a5b      	ldr	r2, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0x324>
 8004028:	4b58      	ldr	r3, [pc, #352]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a57      	ldr	r2, [pc, #348]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	4b55      	ldr	r3, [pc, #340]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a54      	ldr	r2, [pc, #336]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fe f9aa 	bl	80023a0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fe f9a6 	bl	80023a0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0cb      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	4b49      	ldr	r3, [pc, #292]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCC_OscConfig+0x334>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004074:	f7fe f994 	bl	80023a0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fe f990 	bl	80023a0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0b5      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ee      	bne.n	800407c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a4:	4b39      	ldr	r3, [pc, #228]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	4a38      	ldr	r2, [pc, #224]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80a1 	beq.w	80041fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ba:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d05c      	beq.n	8004180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d141      	bne.n	8004152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_OscConfig+0x478>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe f964 	bl	80023a0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fe f960 	bl	80023a0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e087      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	491b      	ldr	r1, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x478>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe f939 	bl	80023a0 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004132:	f7fe f935 	bl	80023a0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e05c      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x416>
 8004150:	e054      	b.n	80041fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_OscConfig+0x478>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe f922 	bl	80023a0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7fe f91e 	bl	80023a0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e045      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x444>
 800417e:	e03d      	b.n	80041fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e038      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
 800418c:	40023800 	.word	0x40023800
 8004190:	40007000 	.word	0x40007000
 8004194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <HAL_RCC_OscConfig+0x4ec>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d028      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d121      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d11a      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d111      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0cc      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d90c      	bls.n	8004248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b63      	ldr	r3, [pc, #396]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b8      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b50      	ldr	r3, [pc, #320]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	494d      	ldr	r1, [pc, #308]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d044      	beq.n	800432c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d119      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e07f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e06f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e067      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4934      	ldr	r1, [pc, #208]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042fc:	f7fe f850 	bl	80023a0 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fe f84c 	bl	80023a0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e04f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d20c      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e032      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4916      	ldr	r1, [pc, #88]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	490e      	ldr	r1, [pc, #56]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004392:	f000 f821 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004396:	4602      	mov	r2, r0
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	490a      	ldr	r1, [pc, #40]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	5ccb      	ldrb	r3, [r1, r3]
 80043a6:	fa22 f303 	lsr.w	r3, r2, r3
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd ffb0 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08007ff0 	.word	0x08007ff0
 80043d0:	20000004 	.word	0x20000004
 80043d4:	20000008 	.word	0x20000008

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b094      	sub	sp, #80	; 0x50
 80043de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	647b      	str	r3, [r7, #68]	; 0x44
 80043e4:	2300      	movs	r3, #0
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	2300      	movs	r3, #0
 80043ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f0:	4b79      	ldr	r3, [pc, #484]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d00d      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x40>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	f200 80e1 	bhi.w	80045c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x34>
 8004406:	2b04      	cmp	r3, #4
 8004408:	d003      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0x3a>
 800440a:	e0db      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCC_GetSysClockFreq+0x204>)
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004410:	e0db      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004412:	4b73      	ldr	r3, [pc, #460]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004416:	e0d8      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004418:	4b6f      	ldr	r3, [pc, #444]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004422:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d063      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442e:	4b6a      	ldr	r3, [pc, #424]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	099b      	lsrs	r3, r3, #6
 8004434:	2200      	movs	r2, #0
 8004436:	63bb      	str	r3, [r7, #56]	; 0x38
 8004438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004440:	633b      	str	r3, [r7, #48]	; 0x30
 8004442:	2300      	movs	r3, #0
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
 8004446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800444a:	4622      	mov	r2, r4
 800444c:	462b      	mov	r3, r5
 800444e:	f04f 0000 	mov.w	r0, #0
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	0159      	lsls	r1, r3, #5
 8004458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800445c:	0150      	lsls	r0, r2, #5
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4621      	mov	r1, r4
 8004464:	1a51      	subs	r1, r2, r1
 8004466:	6139      	str	r1, [r7, #16]
 8004468:	4629      	mov	r1, r5
 800446a:	eb63 0301 	sbc.w	r3, r3, r1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800447c:	4659      	mov	r1, fp
 800447e:	018b      	lsls	r3, r1, #6
 8004480:	4651      	mov	r1, sl
 8004482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004486:	4651      	mov	r1, sl
 8004488:	018a      	lsls	r2, r1, #6
 800448a:	4651      	mov	r1, sl
 800448c:	ebb2 0801 	subs.w	r8, r2, r1
 8004490:	4659      	mov	r1, fp
 8004492:	eb63 0901 	sbc.w	r9, r3, r1
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044aa:	4690      	mov	r8, r2
 80044ac:	4699      	mov	r9, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	eb18 0303 	adds.w	r3, r8, r3
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	462b      	mov	r3, r5
 80044b8:	eb49 0303 	adc.w	r3, r9, r3
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044ca:	4629      	mov	r1, r5
 80044cc:	024b      	lsls	r3, r1, #9
 80044ce:	4621      	mov	r1, r4
 80044d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044d4:	4621      	mov	r1, r4
 80044d6:	024a      	lsls	r2, r1, #9
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044de:	2200      	movs	r2, #0
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e8:	f7fc fac8 	bl	8000a7c <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4613      	mov	r3, r2
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f4:	e058      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f6:	4b38      	ldr	r3, [pc, #224]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	099b      	lsrs	r3, r3, #6
 80044fc:	2200      	movs	r2, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	4611      	mov	r1, r2
 8004502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004506:	623b      	str	r3, [r7, #32]
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	0159      	lsls	r1, r3, #5
 800451e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004522:	0150      	lsls	r0, r2, #5
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4641      	mov	r1, r8
 800452a:	ebb2 0a01 	subs.w	sl, r2, r1
 800452e:	4649      	mov	r1, r9
 8004530:	eb63 0b01 	sbc.w	fp, r3, r1
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004548:	ebb2 040a 	subs.w	r4, r2, sl
 800454c:	eb63 050b 	sbc.w	r5, r3, fp
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	00eb      	lsls	r3, r5, #3
 800455a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455e:	00e2      	lsls	r2, r4, #3
 8004560:	4614      	mov	r4, r2
 8004562:	461d      	mov	r5, r3
 8004564:	4643      	mov	r3, r8
 8004566:	18e3      	adds	r3, r4, r3
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	464b      	mov	r3, r9
 800456c:	eb45 0303 	adc.w	r3, r5, r3
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457e:	4629      	mov	r1, r5
 8004580:	028b      	lsls	r3, r1, #10
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004588:	4621      	mov	r1, r4
 800458a:	028a      	lsls	r2, r1, #10
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004592:	2200      	movs	r2, #0
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	61fa      	str	r2, [r7, #28]
 8004598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800459c:	f7fc fa6e 	bl	8000a7c <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	3301      	adds	r3, #1
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c2:	e002      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetSysClockFreq+0x204>)
 80045c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3750      	adds	r7, #80	; 0x50
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	007a1200 	.word	0x007a1200

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000004 	.word	0x20000004

080045fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004600:	f7ff fff0 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0a9b      	lsrs	r3, r3, #10
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	08008000 	.word	0x08008000

08004624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004628:	f7ff ffdc 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0b5b      	lsrs	r3, r3, #13
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	08008000 	.word	0x08008000

0800464c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e041      	b.n	80046e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fa94 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f000 fc1c 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d001      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e04e      	b.n	80047a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d01d      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <HAL_TIM_Base_Start_IT+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d111      	bne.n	8004790 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b06      	cmp	r3, #6
 800477c:	d010      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	e007      	b.n	80047a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	40010400 	.word	0x40010400
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40001800 	.word	0x40001800

080047cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e041      	b.n	8004862 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd f984 	bl	8001b00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 fb5c 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_TIM_IC_Start_IT+0x1e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e013      	b.n	80048b2 <HAL_TIM_IC_Start_IT+0x46>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b04      	cmp	r3, #4
 800488e:	d104      	bne.n	800489a <HAL_TIM_IC_Start_IT+0x2e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e00b      	b.n	80048b2 <HAL_TIM_IC_Start_IT+0x46>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d104      	bne.n	80048aa <HAL_TIM_IC_Start_IT+0x3e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	e003      	b.n	80048b2 <HAL_TIM_IC_Start_IT+0x46>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <HAL_TIM_IC_Start_IT+0x58>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e013      	b.n	80048ec <HAL_TIM_IC_Start_IT+0x80>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d104      	bne.n	80048d4 <HAL_TIM_IC_Start_IT+0x68>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e00b      	b.n	80048ec <HAL_TIM_IC_Start_IT+0x80>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d104      	bne.n	80048e4 <HAL_TIM_IC_Start_IT+0x78>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e003      	b.n	80048ec <HAL_TIM_IC_Start_IT+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048ee:	7bbb      	ldrb	r3, [r7, #14]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d102      	bne.n	80048fa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80048f4:	7b7b      	ldrb	r3, [r7, #13]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d001      	beq.n	80048fe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e0cc      	b.n	8004a98 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_TIM_IC_Start_IT+0xa2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490c:	e013      	b.n	8004936 <HAL_TIM_IC_Start_IT+0xca>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d104      	bne.n	800491e <HAL_TIM_IC_Start_IT+0xb2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491c:	e00b      	b.n	8004936 <HAL_TIM_IC_Start_IT+0xca>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d104      	bne.n	800492e <HAL_TIM_IC_Start_IT+0xc2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800492c:	e003      	b.n	8004936 <HAL_TIM_IC_Start_IT+0xca>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <HAL_TIM_IC_Start_IT+0xda>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	e013      	b.n	800496e <HAL_TIM_IC_Start_IT+0x102>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d104      	bne.n	8004956 <HAL_TIM_IC_Start_IT+0xea>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004954:	e00b      	b.n	800496e <HAL_TIM_IC_Start_IT+0x102>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d104      	bne.n	8004966 <HAL_TIM_IC_Start_IT+0xfa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004964:	e003      	b.n	800496e <HAL_TIM_IC_Start_IT+0x102>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d841      	bhi.n	80049f8 <HAL_TIM_IC_Start_IT+0x18c>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <HAL_TIM_IC_Start_IT+0x110>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049f9 	.word	0x080049f9
 8004984:	080049f9 	.word	0x080049f9
 8004988:	080049f9 	.word	0x080049f9
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049f9 	.word	0x080049f9
 8004994:	080049f9 	.word	0x080049f9
 8004998:	080049f9 	.word	0x080049f9
 800499c:	080049d5 	.word	0x080049d5
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	080049e7 	.word	0x080049e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0202 	orr.w	r2, r2, #2
 80049be:	60da      	str	r2, [r3, #12]
      break;
 80049c0:	e01d      	b.n	80049fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0204 	orr.w	r2, r2, #4
 80049d0:	60da      	str	r2, [r3, #12]
      break;
 80049d2:	e014      	b.n	80049fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0208 	orr.w	r2, r2, #8
 80049e2:	60da      	str	r2, [r3, #12]
      break;
 80049e4:	e00b      	b.n	80049fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0210 	orr.w	r2, r2, #16
 80049f4:	60da      	str	r2, [r3, #12]
      break;
 80049f6:	e002      	b.n	80049fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d148      	bne.n	8004a96 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fc25 	bl	800525c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a22      	ldr	r2, [pc, #136]	; (8004aa0 <HAL_TIM_IC_Start_IT+0x234>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d01d      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_TIM_IC_Start_IT+0x238>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <HAL_TIM_IC_Start_IT+0x23c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_TIM_IC_Start_IT+0x240>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <HAL_TIM_IC_Start_IT+0x244>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_TIM_IC_Start_IT+0x248>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIM_IC_Start_IT+0x1f6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_TIM_IC_Start_IT+0x24c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d010      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	e007      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40010400 	.word	0x40010400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40001800 	.word	0x40001800

08004abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0202 	mvn.w	r2, #2
 8004ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fb12 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9c0 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f9c7 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d122      	bne.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d11b      	bne.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0204 	mvn.w	r2, #4
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fae8 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f996 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f99d 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0208 	mvn.w	r2, #8
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2204      	movs	r2, #4
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd fabe 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f96c 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f973 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0210 	mvn.w	r2, #16
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2208      	movs	r2, #8
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd fa94 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f942 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f949 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0201 	mvn.w	r2, #1
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc fa74 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fba4 	bl	80053b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f90e 	bl	8004eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0220 	mvn.w	r2, #32
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fb6e 	bl	80053a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e088      	b.n	8004dfc <HAL_TIM_IC_ConfigChannel+0x130>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11b      	bne.n	8004d30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f000 f97e 	bl	8005008 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 020c 	bic.w	r2, r2, #12
 8004d1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	619a      	str	r2, [r3, #24]
 8004d2e:	e060      	b.n	8004df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d11c      	bne.n	8004d70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f000 f9d3 	bl	80050f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6999      	ldr	r1, [r3, #24]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	021a      	lsls	r2, r3, #8
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	619a      	str	r2, [r3, #24]
 8004d6e:	e040      	b.n	8004df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d11b      	bne.n	8004dae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f000 f9f0 	bl	800516a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 020c 	bic.w	r2, r2, #12
 8004d98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
 8004dac:	e021      	b.n	8004df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d11c      	bne.n	8004dee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6819      	ldr	r1, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f000 fa0d 	bl	80051e2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69d9      	ldr	r1, [r3, #28]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	021a      	lsls	r2, r3, #8
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]
 8004dec:	e001      	b.n	8004df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d831      	bhi.n	8004e7c <HAL_TIM_ReadCapturedValue+0x78>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e7d 	.word	0x08004e7d
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004e7d 	.word	0x08004e7d
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e7d 	.word	0x08004e7d
 8004e38:	08004e7d 	.word	0x08004e7d
 8004e3c:	08004e7d 	.word	0x08004e7d
 8004e40:	08004e69 	.word	0x08004e69
 8004e44:	08004e7d 	.word	0x08004e7d
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004e7d 	.word	0x08004e7d
 8004e50:	08004e73 	.word	0x08004e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	60fb      	str	r3, [r7, #12]

      break;
 8004e5c:	e00f      	b.n	8004e7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	60fb      	str	r3, [r7, #12]

      break;
 8004e66:	e00a      	b.n	8004e7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	60fb      	str	r3, [r7, #12]

      break;
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	60fb      	str	r3, [r7, #12]

      break;
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e7c:	bf00      	nop
  }

  return tmpreg;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a40      	ldr	r2, [pc, #256]	; (8004fdc <TIM_Base_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3d      	ldr	r2, [pc, #244]	; (8004fe0 <TIM_Base_SetConfig+0x118>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3c      	ldr	r2, [pc, #240]	; (8004fe4 <TIM_Base_SetConfig+0x11c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3a      	ldr	r2, [pc, #232]	; (8004fec <TIM_Base_SetConfig+0x124>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <TIM_Base_SetConfig+0x114>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d027      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2c      	ldr	r2, [pc, #176]	; (8004fe0 <TIM_Base_SetConfig+0x118>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d023      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <TIM_Base_SetConfig+0x11c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a29      	ldr	r2, [pc, #164]	; (8004fec <TIM_Base_SetConfig+0x124>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d017      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <TIM_Base_SetConfig+0x128>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <TIM_Base_SetConfig+0x12c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <TIM_Base_SetConfig+0x130>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <TIM_Base_SetConfig+0x134>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a24      	ldr	r2, [pc, #144]	; (8005000 <TIM_Base_SetConfig+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a23      	ldr	r2, [pc, #140]	; (8005004 <TIM_Base_SetConfig+0x13c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <TIM_Base_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0xf8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a0c      	ldr	r2, [pc, #48]	; (8004fec <TIM_Base_SetConfig+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d103      	bne.n	8004fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	615a      	str	r2, [r3, #20]
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800
 8004ffc:	40001800 	.word	0x40001800
 8005000:	40001c00 	.word	0x40001c00
 8005004:	40002000 	.word	0x40002000

08005008 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f023 0201 	bic.w	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <TIM_TI1_SetConfig+0xcc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01b      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d017      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <TIM_TI1_SetConfig+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a24      	ldr	r2, [pc, #144]	; (80050dc <TIM_TI1_SetConfig+0xd4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <TIM_TI1_SetConfig+0xd8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <TIM_TI1_SetConfig+0xdc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <TIM_TI1_SetConfig+0xe0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_TI1_SetConfig+0x66>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a20      	ldr	r2, [pc, #128]	; (80050ec <TIM_TI1_SetConfig+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <TIM_TI1_SetConfig+0x6a>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <TIM_TI1_SetConfig+0x6c>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e003      	b.n	8005092 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f023 030a 	bic.w	r3, r3, #10
 80050ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 030a 	and.w	r3, r3, #10
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40010400 	.word	0x40010400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40001800 	.word	0x40001800

080050f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800512e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	031b      	lsls	r3, r3, #12
 8005134:	b29b      	uxth	r3, r3
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005142:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800516a:	b480      	push	{r7}
 800516c:	b087      	sub	sp, #28
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80051ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005220:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	031b      	lsls	r3, r3, #12
 8005226:	b29b      	uxth	r3, r3
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005234:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	621a      	str	r2, [r3, #32]
}
 8005250:	bf00      	nop
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2201      	movs	r2, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1a      	ldr	r2, [r3, #32]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052bc:	2302      	movs	r3, #2
 80052be:	e05a      	b.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a21      	ldr	r2, [pc, #132]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d01d      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1b      	ldr	r2, [pc, #108]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a15      	ldr	r2, [pc, #84]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10c      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e03f      	b.n	800545a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc fc1c 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800540a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fddf 	bl	8005fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b08a      	sub	sp, #40	; 0x28
 8005466:	af02      	add	r7, sp, #8
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b20      	cmp	r3, #32
 8005480:	d17c      	bne.n	800557c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_UART_Transmit+0x2c>
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e075      	b.n	800557e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_UART_Transmit+0x3e>
 800549c:	2302      	movs	r3, #2
 800549e:	e06e      	b.n	800557e <HAL_UART_Transmit+0x11c>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2221      	movs	r2, #33	; 0x21
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b6:	f7fc ff73 	bl	80023a0 <HAL_GetTick>
 80054ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d0:	d108      	bne.n	80054e4 <HAL_UART_Transmit+0x82>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e003      	b.n	80054ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054f4:	e02a      	b.n	800554c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fb1f 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e036      	b.n	800557e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	3302      	adds	r3, #2
 800552a:	61bb      	str	r3, [r7, #24]
 800552c:	e007      	b.n	800553e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1cf      	bne.n	80054f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2140      	movs	r1, #64	; 0x40
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 faef 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800557c:	2302      	movs	r3, #2
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	4613      	mov	r3, r2
 8005592:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b20      	cmp	r3, #32
 800559e:	d11d      	bne.n	80055dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Receive_IT+0x26>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e016      	b.n	80055de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UART_Receive_IT+0x38>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e00f      	b.n	80055de <HAL_UART_Receive_IT+0x58>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	461a      	mov	r2, r3
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fb24 	bl	8005c20 <UART_Start_Receive_IT>
 80055d8:	4603      	mov	r3, r0
 80055da:	e000      	b.n	80055de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b0ba      	sub	sp, #232	; 0xe8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <HAL_UART_IRQHandler+0x66>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fc07 	bl	8005e5a <UART_Receive_IT>
      return;
 800564c:	e256      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800564e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80de 	beq.w	8005814 <HAL_UART_IRQHandler+0x22c>
 8005658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80d1 	beq.w	8005814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_UART_IRQHandler+0xae>
 800567e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_UART_IRQHandler+0xd2>
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_UART_IRQHandler+0xf6>
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d011      	beq.n	800570e <HAL_UART_IRQHandler+0x126>
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f043 0208 	orr.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 81ed 	beq.w	8005af2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_UART_IRQHandler+0x14e>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fb92 	bl	8005e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_UART_IRQHandler+0x17a>
 800575a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04f      	beq.n	8005802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa9a 	bl	8005c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d141      	bne.n	80057fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800578c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3314      	adds	r3, #20
 800579e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1d9      	bne.n	8005776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d013      	beq.n	80057f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4a7d      	ldr	r2, [pc, #500]	; (80059c4 <HAL_UART_IRQHandler+0x3dc>)
 80057d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fc ff93 	bl	8002702 <HAL_DMA_Abort_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057ec:	4610      	mov	r0, r2
 80057ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00e      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f990 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e00a      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f98c 	bl	8005b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	e006      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f988 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800580e:	e170      	b.n	8005af2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	bf00      	nop
    return;
 8005812:	e16e      	b.n	8005af2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	f040 814a 	bne.w	8005ab2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8143 	beq.w	8005ab2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 813c 	beq.w	8005ab2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	f040 80b4 	bne.w	80059c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800586c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8140 	beq.w	8005af6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800587a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800587e:	429a      	cmp	r2, r3
 8005880:	f080 8139 	bcs.w	8005af6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800588a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	f000 8088 	beq.w	80059aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d9      	bne.n	800589a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3314      	adds	r3, #20
 80058ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800590a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800590e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800591c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e1      	bne.n	80058e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800594c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800598c:	65ba      	str	r2, [r7, #88]	; 0x58
 800598e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e3      	bne.n	8005968 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fc fe3c 	bl	8002622 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8b6 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059c0:	e099      	b.n	8005af6 <HAL_UART_IRQHandler+0x50e>
 80059c2:	bf00      	nop
 80059c4:	08005d63 	.word	0x08005d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 808b 	beq.w	8005afa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8086 	beq.w	8005afa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a12:	647a      	str	r2, [r7, #68]	; 0x44
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	623b      	str	r3, [r7, #32]
   return(result);
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a90:	61fa      	str	r2, [r7, #28]
 8005a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e3      	bne.n	8005a6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f83e 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ab0:	e023      	b.n	8005afa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x4ea>
 8005abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f95d 	bl	8005d8a <UART_Transmit_IT>
    return;
 8005ad0:	e014      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <HAL_UART_IRQHandler+0x514>
 8005ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f99d 	bl	8005e2a <UART_EndTransmit_IT>
    return;
 8005af0:	e004      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
    return;
 8005af2:	bf00      	nop
 8005af4:	e002      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
      return;
 8005af6:	bf00      	nop
 8005af8:	e000      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
      return;
 8005afa:	bf00      	nop
  }
}
 8005afc:	37e8      	adds	r7, #232	; 0xe8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop

08005b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b090      	sub	sp, #64	; 0x40
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b54:	e050      	b.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d04c      	beq.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b64:	f7fc fc1c 	bl	80023a0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d241      	bcs.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b94:	637a      	str	r2, [r7, #52]	; 0x34
 8005b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc8:	623a      	str	r2, [r7, #32]
 8005bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	69f9      	ldr	r1, [r7, #28]
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e5      	bne.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e00f      	b.n	8005c18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4013      	ands	r3, r2
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	bf0c      	ite	eq
 8005c08:	2301      	moveq	r3, #1
 8005c0a:	2300      	movne	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d09f      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3740      	adds	r7, #64	; 0x40
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2222      	movs	r2, #34	; 0x22
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0220 	orr.w	r2, r2, #32
 8005c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b095      	sub	sp, #84	; 0x54
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e5      	bne.n	8005cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d119      	bne.n	8005d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d34:	61ba      	str	r2, [r7, #24]
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d56:	bf00      	nop
 8005d58:	3754      	adds	r7, #84	; 0x54
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fecb 	bl	8005b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b21      	cmp	r3, #33	; 0x21
 8005d9c:	d13e      	bne.n	8005e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	d114      	bne.n	8005dd2 <UART_Transmit_IT+0x48>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d110      	bne.n	8005dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]
 8005dd0:	e008      	b.n	8005de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6211      	str	r1, [r2, #32]
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4619      	mov	r1, r3
 8005df2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fe5a 	bl	8005b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08c      	sub	sp, #48	; 0x30
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b22      	cmp	r3, #34	; 0x22
 8005e6c:	f040 80ab 	bne.w	8005fc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e78:	d117      	bne.n	8005eaa <UART_Receive_IT+0x50>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ea8:	e026      	b.n	8005ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebc:	d007      	beq.n	8005ece <UART_Receive_IT+0x74>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <UART_Receive_IT+0x82>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e008      	b.n	8005eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d15a      	bne.n	8005fc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0220 	bic.w	r2, r2, #32
 8005f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d135      	bne.n	8005fb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	613b      	str	r3, [r7, #16]
   return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f023 0310 	bic.w	r3, r3, #16
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	623a      	str	r2, [r7, #32]
 8005f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	69f9      	ldr	r1, [r7, #28]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d10a      	bne.n	8005faa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fdbb 	bl	8005b2c <HAL_UARTEx_RxEventCallback>
 8005fb6:	e002      	b.n	8005fbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fc f833 	bl	8002024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e002      	b.n	8005fc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3730      	adds	r7, #48	; 0x30
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b0c0      	sub	sp, #256	; 0x100
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	68d9      	ldr	r1, [r3, #12]
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	ea40 0301 	orr.w	r3, r0, r1
 8005ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	431a      	orrs	r2, r3
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	431a      	orrs	r2, r3
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006028:	f021 010c 	bic.w	r1, r1, #12
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006036:	430b      	orrs	r3, r1
 8006038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604a:	6999      	ldr	r1, [r3, #24]
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	ea40 0301 	orr.w	r3, r0, r1
 8006056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b8f      	ldr	r3, [pc, #572]	; (800629c <UART_SetConfig+0x2cc>)
 8006060:	429a      	cmp	r2, r3
 8006062:	d005      	beq.n	8006070 <UART_SetConfig+0xa0>
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b8d      	ldr	r3, [pc, #564]	; (80062a0 <UART_SetConfig+0x2d0>)
 800606c:	429a      	cmp	r2, r3
 800606e:	d104      	bne.n	800607a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fe fad8 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8006074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006078:	e003      	b.n	8006082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800607a:	f7fe fabf 	bl	80045fc <HAL_RCC_GetPCLK1Freq>
 800607e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608c:	f040 810c 	bne.w	80062a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800609a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800609e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	1891      	adds	r1, r2, r2
 80060a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80060aa:	415b      	adcs	r3, r3
 80060ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060b2:	4621      	mov	r1, r4
 80060b4:	eb12 0801 	adds.w	r8, r2, r1
 80060b8:	4629      	mov	r1, r5
 80060ba:	eb43 0901 	adc.w	r9, r3, r1
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060d2:	4690      	mov	r8, r2
 80060d4:	4699      	mov	r9, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	eb18 0303 	adds.w	r3, r8, r3
 80060dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060e0:	462b      	mov	r3, r5
 80060e2:	eb49 0303 	adc.w	r3, r9, r3
 80060e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060fe:	460b      	mov	r3, r1
 8006100:	18db      	adds	r3, r3, r3
 8006102:	653b      	str	r3, [r7, #80]	; 0x50
 8006104:	4613      	mov	r3, r2
 8006106:	eb42 0303 	adc.w	r3, r2, r3
 800610a:	657b      	str	r3, [r7, #84]	; 0x54
 800610c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006114:	f7fa fcb2 	bl	8000a7c <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4b61      	ldr	r3, [pc, #388]	; (80062a4 <UART_SetConfig+0x2d4>)
 800611e:	fba3 2302 	umull	r2, r3, r3, r2
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	011c      	lsls	r4, r3, #4
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	1891      	adds	r1, r2, r2
 800613e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006140:	415b      	adcs	r3, r3
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006148:	4641      	mov	r1, r8
 800614a:	eb12 0a01 	adds.w	sl, r2, r1
 800614e:	4649      	mov	r1, r9
 8006150:	eb43 0b01 	adc.w	fp, r3, r1
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006168:	4692      	mov	sl, r2
 800616a:	469b      	mov	fp, r3
 800616c:	4643      	mov	r3, r8
 800616e:	eb1a 0303 	adds.w	r3, sl, r3
 8006172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006176:	464b      	mov	r3, r9
 8006178:	eb4b 0303 	adc.w	r3, fp, r3
 800617c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800618c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006194:	460b      	mov	r3, r1
 8006196:	18db      	adds	r3, r3, r3
 8006198:	643b      	str	r3, [r7, #64]	; 0x40
 800619a:	4613      	mov	r3, r2
 800619c:	eb42 0303 	adc.w	r3, r2, r3
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
 80061a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061aa:	f7fa fc67 	bl	8000a7c <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	4b3b      	ldr	r3, [pc, #236]	; (80062a4 <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2264      	movs	r2, #100	; 0x64
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	1acb      	subs	r3, r1, r3
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <UART_SetConfig+0x2d4>)
 80061cc:	fba3 2302 	umull	r2, r3, r3, r2
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d8:	441c      	add	r4, r3
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80061f4:	415b      	adcs	r3, r3
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061fc:	4641      	mov	r1, r8
 80061fe:	1851      	adds	r1, r2, r1
 8006200:	6339      	str	r1, [r7, #48]	; 0x30
 8006202:	4649      	mov	r1, r9
 8006204:	414b      	adcs	r3, r1
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006214:	4659      	mov	r1, fp
 8006216:	00cb      	lsls	r3, r1, #3
 8006218:	4651      	mov	r1, sl
 800621a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621e:	4651      	mov	r1, sl
 8006220:	00ca      	lsls	r2, r1, #3
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	4603      	mov	r3, r0
 8006228:	4642      	mov	r2, r8
 800622a:	189b      	adds	r3, r3, r2
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006230:	464b      	mov	r3, r9
 8006232:	460a      	mov	r2, r1
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800624c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006250:	460b      	mov	r3, r1
 8006252:	18db      	adds	r3, r3, r3
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
 8006256:	4613      	mov	r3, r2
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006266:	f7fa fc09 	bl	8000a7c <__aeabi_uldivmod>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <UART_SetConfig+0x2d4>)
 8006270:	fba3 1302 	umull	r1, r3, r3, r2
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	2164      	movs	r1, #100	; 0x64
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	3332      	adds	r3, #50	; 0x32
 8006282:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <UART_SetConfig+0x2d4>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	f003 0207 	and.w	r2, r3, #7
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4422      	add	r2, r4
 8006296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006298:	e105      	b.n	80064a6 <UART_SetConfig+0x4d6>
 800629a:	bf00      	nop
 800629c:	40011000 	.word	0x40011000
 80062a0:	40011400 	.word	0x40011400
 80062a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062ba:	4642      	mov	r2, r8
 80062bc:	464b      	mov	r3, r9
 80062be:	1891      	adds	r1, r2, r2
 80062c0:	6239      	str	r1, [r7, #32]
 80062c2:	415b      	adcs	r3, r3
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ca:	4641      	mov	r1, r8
 80062cc:	1854      	adds	r4, r2, r1
 80062ce:	4649      	mov	r1, r9
 80062d0:	eb43 0501 	adc.w	r5, r3, r1
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	00eb      	lsls	r3, r5, #3
 80062de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062e2:	00e2      	lsls	r2, r4, #3
 80062e4:	4614      	mov	r4, r2
 80062e6:	461d      	mov	r5, r3
 80062e8:	4643      	mov	r3, r8
 80062ea:	18e3      	adds	r3, r4, r3
 80062ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062f0:	464b      	mov	r3, r9
 80062f2:	eb45 0303 	adc.w	r3, r5, r3
 80062f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006316:	4629      	mov	r1, r5
 8006318:	008b      	lsls	r3, r1, #2
 800631a:	4621      	mov	r1, r4
 800631c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006320:	4621      	mov	r1, r4
 8006322:	008a      	lsls	r2, r1, #2
 8006324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006328:	f7fa fba8 	bl	8000a7c <__aeabi_uldivmod>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4b60      	ldr	r3, [pc, #384]	; (80064b4 <UART_SetConfig+0x4e4>)
 8006332:	fba3 2302 	umull	r2, r3, r3, r2
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	011c      	lsls	r4, r3, #4
 800633a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633e:	2200      	movs	r2, #0
 8006340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	1891      	adds	r1, r2, r2
 8006352:	61b9      	str	r1, [r7, #24]
 8006354:	415b      	adcs	r3, r3
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800635c:	4641      	mov	r1, r8
 800635e:	1851      	adds	r1, r2, r1
 8006360:	6139      	str	r1, [r7, #16]
 8006362:	4649      	mov	r1, r9
 8006364:	414b      	adcs	r3, r1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006374:	4659      	mov	r1, fp
 8006376:	00cb      	lsls	r3, r1, #3
 8006378:	4651      	mov	r1, sl
 800637a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637e:	4651      	mov	r1, sl
 8006380:	00ca      	lsls	r2, r1, #3
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	4603      	mov	r3, r0
 8006388:	4642      	mov	r2, r8
 800638a:	189b      	adds	r3, r3, r2
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006390:	464b      	mov	r3, r9
 8006392:	460a      	mov	r2, r1
 8006394:	eb42 0303 	adc.w	r3, r2, r3
 8006398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063b4:	4649      	mov	r1, r9
 80063b6:	008b      	lsls	r3, r1, #2
 80063b8:	4641      	mov	r1, r8
 80063ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063be:	4641      	mov	r1, r8
 80063c0:	008a      	lsls	r2, r1, #2
 80063c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063c6:	f7fa fb59 	bl	8000a7c <__aeabi_uldivmod>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4b39      	ldr	r3, [pc, #228]	; (80064b4 <UART_SetConfig+0x4e4>)
 80063d0:	fba3 1302 	umull	r1, r3, r3, r2
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	2164      	movs	r1, #100	; 0x64
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	3332      	adds	r3, #50	; 0x32
 80063e2:	4a34      	ldr	r2, [pc, #208]	; (80064b4 <UART_SetConfig+0x4e4>)
 80063e4:	fba2 2303 	umull	r2, r3, r2, r3
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ee:	441c      	add	r4, r3
 80063f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f4:	2200      	movs	r2, #0
 80063f6:	673b      	str	r3, [r7, #112]	; 0x70
 80063f8:	677a      	str	r2, [r7, #116]	; 0x74
 80063fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063fe:	4642      	mov	r2, r8
 8006400:	464b      	mov	r3, r9
 8006402:	1891      	adds	r1, r2, r2
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	415b      	adcs	r3, r3
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800640e:	4641      	mov	r1, r8
 8006410:	1851      	adds	r1, r2, r1
 8006412:	6039      	str	r1, [r7, #0]
 8006414:	4649      	mov	r1, r9
 8006416:	414b      	adcs	r3, r1
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006426:	4659      	mov	r1, fp
 8006428:	00cb      	lsls	r3, r1, #3
 800642a:	4651      	mov	r1, sl
 800642c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006430:	4651      	mov	r1, sl
 8006432:	00ca      	lsls	r2, r1, #3
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	4603      	mov	r3, r0
 800643a:	4642      	mov	r2, r8
 800643c:	189b      	adds	r3, r3, r2
 800643e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	663b      	str	r3, [r7, #96]	; 0x60
 8006454:	667a      	str	r2, [r7, #100]	; 0x64
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006462:	4649      	mov	r1, r9
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	4641      	mov	r1, r8
 8006468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646c:	4641      	mov	r1, r8
 800646e:	008a      	lsls	r2, r1, #2
 8006470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006474:	f7fa fb02 	bl	8000a7c <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <UART_SetConfig+0x4e4>)
 800647e:	fba3 1302 	umull	r1, r3, r3, r2
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	2164      	movs	r1, #100	; 0x64
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	3332      	adds	r3, #50	; 0x32
 8006490:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <UART_SetConfig+0x4e4>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4422      	add	r2, r4
 80064a4:	609a      	str	r2, [r3, #8]
}
 80064a6:	bf00      	nop
 80064a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	51eb851f 	.word	0x51eb851f

080064b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b8:	b084      	sub	sp, #16
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	f107 001c 	add.w	r0, r7, #28
 80064c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d122      	bne.n	8006516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d105      	bne.n	800650a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 faa2 	bl	8006a54 <USB_CoreReset>
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]
 8006514:	e01a      	b.n	800654c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa96 	bl	8006a54 <USB_CoreReset>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
 800653e:	e005      	b.n	800654c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10b      	bne.n	800656a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f043 0206 	orr.w	r2, r3, #6
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006576:	b004      	add	sp, #16
 8006578:	4770      	bx	lr

0800657a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d115      	bne.n	80065ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ca:	2001      	movs	r0, #1
 80065cc:	f7fb fef4 	bl	80023b8 <HAL_Delay>
      ms++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa2e 	bl	8006a38 <USB_GetMode>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d01e      	beq.n	8006620 <USB_SetCurrentMode+0x84>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b31      	cmp	r3, #49	; 0x31
 80065e6:	d9f0      	bls.n	80065ca <USB_SetCurrentMode+0x2e>
 80065e8:	e01a      	b.n	8006620 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d115      	bne.n	800661c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065fc:	2001      	movs	r0, #1
 80065fe:	f7fb fedb 	bl	80023b8 <HAL_Delay>
      ms++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fa15 	bl	8006a38 <USB_GetMode>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <USB_SetCurrentMode+0x84>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b31      	cmp	r3, #49	; 0x31
 8006618:	d9f0      	bls.n	80065fc <USB_SetCurrentMode+0x60>
 800661a:	e001      	b.n	8006620 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e005      	b.n	800662c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b32      	cmp	r3, #50	; 0x32
 8006624:	d101      	bne.n	800662a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006634:	b084      	sub	sp, #16
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e009      	b.n	8006668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	2200      	movs	r2, #0
 8006660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3301      	adds	r3, #1
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b0e      	cmp	r3, #14
 800666c:	d9f2      	bls.n	8006654 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11c      	bne.n	80066ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006682:	f043 0302 	orr.w	r3, r3, #2
 8006686:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
 80066ac:	e00b      	b.n	80066c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066cc:	461a      	mov	r2, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d8:	4619      	mov	r1, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	461a      	mov	r2, r3
 80066e2:	680b      	ldr	r3, [r1, #0]
 80066e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10c      	bne.n	8006706 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066f2:	2100      	movs	r1, #0
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f965 	bl	80069c4 <USB_SetDevSpeed>
 80066fa:	e008      	b.n	800670e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066fc:	2101      	movs	r1, #1
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f960 	bl	80069c4 <USB_SetDevSpeed>
 8006704:	e003      	b.n	800670e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006706:	2103      	movs	r1, #3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f95b 	bl	80069c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800670e:	2110      	movs	r1, #16
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8f3 	bl	80068fc <USB_FlushTxFifo>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f91f 	bl	8006964 <USB_FlushRxFifo>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	461a      	mov	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	461a      	mov	r2, r3
 8006744:	2300      	movs	r3, #0
 8006746:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	461a      	mov	r2, r3
 8006750:	2300      	movs	r3, #0
 8006752:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	e043      	b.n	80067e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006770:	d118      	bne.n	80067a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	461a      	mov	r2, r3
 8006786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	e013      	b.n	80067b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	461a      	mov	r2, r3
 800679c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e008      	b.n	80067b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	461a      	mov	r2, r3
 80067b2:	2300      	movs	r3, #0
 80067b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c2:	461a      	mov	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	461a      	mov	r2, r3
 80067d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3301      	adds	r3, #1
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d3b7      	bcc.n	800675a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	e043      	b.n	8006878 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006806:	d118      	bne.n	800683a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	461a      	mov	r2, r3
 800681c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	e013      	b.n	800684c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	461a      	mov	r2, r3
 8006832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	e008      	b.n	800684c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006846:	461a      	mov	r2, r3
 8006848:	2300      	movs	r3, #0
 800684a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006858:	461a      	mov	r2, r3
 800685a:	2300      	movs	r3, #0
 800685c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	461a      	mov	r2, r3
 800686c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006870:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	3301      	adds	r3, #1
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d3b7      	bcc.n	80067f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006892:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f043 0210 	orr.w	r2, r3, #16
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699a      	ldr	r2, [r3, #24]
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <USB_DevInit+0x2c4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f043 0208 	orr.w	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e0:	f043 0304 	orr.w	r3, r3, #4
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068f4:	b004      	add	sp, #16
 80068f6:	4770      	bx	lr
 80068f8:	803c3800 	.word	0x803c3800

080068fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a13      	ldr	r2, [pc, #76]	; (8006960 <USB_FlushTxFifo+0x64>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e01b      	b.n	8006954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	daf2      	bge.n	800690a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	019b      	lsls	r3, r3, #6
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4a08      	ldr	r2, [pc, #32]	; (8006960 <USB_FlushTxFifo+0x64>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e006      	b.n	8006954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b20      	cmp	r3, #32
 8006950:	d0f0      	beq.n	8006934 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	00030d40 	.word	0x00030d40

08006964 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a11      	ldr	r2, [pc, #68]	; (80069c0 <USB_FlushRxFifo+0x5c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d901      	bls.n	8006982 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e018      	b.n	80069b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	daf2      	bge.n	8006970 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2210      	movs	r2, #16
 8006992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <USB_FlushRxFifo+0x5c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e006      	b.n	80069b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d0f0      	beq.n	8006994 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	00030d40 	.word	0x00030d40

080069c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e4:	4313      	orrs	r3, r2
 80069e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a10:	f023 0303 	bic.w	r3, r3, #3
 8006a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0301 	and.w	r3, r3, #1
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <USB_CoreReset+0x64>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e01b      	b.n	8006aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	daf2      	bge.n	8006a60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f043 0201 	orr.w	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <USB_CoreReset+0x64>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e006      	b.n	8006aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d0f0      	beq.n	8006a8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	00030d40 	.word	0x00030d40

08006abc <__errno>:
 8006abc:	4b01      	ldr	r3, [pc, #4]	; (8006ac4 <__errno+0x8>)
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20000010 	.word	0x20000010

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4d0d      	ldr	r5, [pc, #52]	; (8006b00 <__libc_init_array+0x38>)
 8006acc:	4c0d      	ldr	r4, [pc, #52]	; (8006b04 <__libc_init_array+0x3c>)
 8006ace:	1b64      	subs	r4, r4, r5
 8006ad0:	10a4      	asrs	r4, r4, #2
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	42a6      	cmp	r6, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	4d0b      	ldr	r5, [pc, #44]	; (8006b08 <__libc_init_array+0x40>)
 8006ada:	4c0c      	ldr	r4, [pc, #48]	; (8006b0c <__libc_init_array+0x44>)
 8006adc:	f001 fa00 	bl	8007ee0 <_init>
 8006ae0:	1b64      	subs	r4, r4, r5
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af0:	4798      	blx	r3
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afa:	4798      	blx	r3
 8006afc:	3601      	adds	r6, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	080080a8 	.word	0x080080a8
 8006b04:	080080a8 	.word	0x080080a8
 8006b08:	080080a8 	.word	0x080080a8
 8006b0c:	080080ac 	.word	0x080080ac

08006b10 <memset>:
 8006b10:	4402      	add	r2, r0
 8006b12:	4603      	mov	r3, r0
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d100      	bne.n	8006b1a <memset+0xa>
 8006b18:	4770      	bx	lr
 8006b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1e:	e7f9      	b.n	8006b14 <memset+0x4>

08006b20 <iprintf>:
 8006b20:	b40f      	push	{r0, r1, r2, r3}
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <iprintf+0x2c>)
 8006b24:	b513      	push	{r0, r1, r4, lr}
 8006b26:	681c      	ldr	r4, [r3, #0]
 8006b28:	b124      	cbz	r4, 8006b34 <iprintf+0x14>
 8006b2a:	69a3      	ldr	r3, [r4, #24]
 8006b2c:	b913      	cbnz	r3, 8006b34 <iprintf+0x14>
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 fa7e 	bl	8007030 <__sinit>
 8006b34:	ab05      	add	r3, sp, #20
 8006b36:	9a04      	ldr	r2, [sp, #16]
 8006b38:	68a1      	ldr	r1, [r4, #8]
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fde3 	bl	8007708 <_vfiprintf_r>
 8006b42:	b002      	add	sp, #8
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	b004      	add	sp, #16
 8006b4a:	4770      	bx	lr
 8006b4c:	20000010 	.word	0x20000010

08006b50 <_puts_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	460e      	mov	r6, r1
 8006b54:	4605      	mov	r5, r0
 8006b56:	b118      	cbz	r0, 8006b60 <_puts_r+0x10>
 8006b58:	6983      	ldr	r3, [r0, #24]
 8006b5a:	b90b      	cbnz	r3, 8006b60 <_puts_r+0x10>
 8006b5c:	f000 fa68 	bl	8007030 <__sinit>
 8006b60:	69ab      	ldr	r3, [r5, #24]
 8006b62:	68ac      	ldr	r4, [r5, #8]
 8006b64:	b913      	cbnz	r3, 8006b6c <_puts_r+0x1c>
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 fa62 	bl	8007030 <__sinit>
 8006b6c:	4b2c      	ldr	r3, [pc, #176]	; (8006c20 <_puts_r+0xd0>)
 8006b6e:	429c      	cmp	r4, r3
 8006b70:	d120      	bne.n	8006bb4 <_puts_r+0x64>
 8006b72:	686c      	ldr	r4, [r5, #4]
 8006b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b76:	07db      	lsls	r3, r3, #31
 8006b78:	d405      	bmi.n	8006b86 <_puts_r+0x36>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	0598      	lsls	r0, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_puts_r+0x36>
 8006b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b82:	f000 faf3 	bl	800716c <__retarget_lock_acquire_recursive>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	0719      	lsls	r1, r3, #28
 8006b8a:	d51d      	bpl.n	8006bc8 <_puts_r+0x78>
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	b1db      	cbz	r3, 8006bc8 <_puts_r+0x78>
 8006b90:	3e01      	subs	r6, #1
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	bb39      	cbnz	r1, 8006bee <_puts_r+0x9e>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	da38      	bge.n	8006c14 <_puts_r+0xc4>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	210a      	movs	r1, #10
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f868 	bl	8006c7c <__swbuf_r>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d011      	beq.n	8006bd4 <_puts_r+0x84>
 8006bb0:	250a      	movs	r5, #10
 8006bb2:	e011      	b.n	8006bd8 <_puts_r+0x88>
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <_puts_r+0xd4>)
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	d101      	bne.n	8006bbe <_puts_r+0x6e>
 8006bba:	68ac      	ldr	r4, [r5, #8]
 8006bbc:	e7da      	b.n	8006b74 <_puts_r+0x24>
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <_puts_r+0xd8>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	bf08      	it	eq
 8006bc4:	68ec      	ldreq	r4, [r5, #12]
 8006bc6:	e7d5      	b.n	8006b74 <_puts_r+0x24>
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 f8a8 	bl	8006d20 <__swsetup_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0dd      	beq.n	8006b90 <_puts_r+0x40>
 8006bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8006bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bda:	07da      	lsls	r2, r3, #31
 8006bdc:	d405      	bmi.n	8006bea <_puts_r+0x9a>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	059b      	lsls	r3, r3, #22
 8006be2:	d402      	bmi.n	8006bea <_puts_r+0x9a>
 8006be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be6:	f000 fac2 	bl	800716e <__retarget_lock_release_recursive>
 8006bea:	4628      	mov	r0, r5
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da04      	bge.n	8006bfc <_puts_r+0xac>
 8006bf2:	69a2      	ldr	r2, [r4, #24]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	dc06      	bgt.n	8006c06 <_puts_r+0xb6>
 8006bf8:	290a      	cmp	r1, #10
 8006bfa:	d004      	beq.n	8006c06 <_puts_r+0xb6>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	6022      	str	r2, [r4, #0]
 8006c02:	7019      	strb	r1, [r3, #0]
 8006c04:	e7c5      	b.n	8006b92 <_puts_r+0x42>
 8006c06:	4622      	mov	r2, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f837 	bl	8006c7c <__swbuf_r>
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d1bf      	bne.n	8006b92 <_puts_r+0x42>
 8006c12:	e7df      	b.n	8006bd4 <_puts_r+0x84>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	250a      	movs	r5, #10
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	701d      	strb	r5, [r3, #0]
 8006c1e:	e7db      	b.n	8006bd8 <_puts_r+0x88>
 8006c20:	0800802c 	.word	0x0800802c
 8006c24:	0800804c 	.word	0x0800804c
 8006c28:	0800800c 	.word	0x0800800c

08006c2c <puts>:
 8006c2c:	4b02      	ldr	r3, [pc, #8]	; (8006c38 <puts+0xc>)
 8006c2e:	4601      	mov	r1, r0
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f7ff bf8d 	b.w	8006b50 <_puts_r>
 8006c36:	bf00      	nop
 8006c38:	20000010 	.word	0x20000010

08006c3c <siprintf>:
 8006c3c:	b40e      	push	{r1, r2, r3}
 8006c3e:	b500      	push	{lr}
 8006c40:	b09c      	sub	sp, #112	; 0x70
 8006c42:	ab1d      	add	r3, sp, #116	; 0x74
 8006c44:	9002      	str	r0, [sp, #8]
 8006c46:	9006      	str	r0, [sp, #24]
 8006c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c4c:	4809      	ldr	r0, [pc, #36]	; (8006c74 <siprintf+0x38>)
 8006c4e:	9107      	str	r1, [sp, #28]
 8006c50:	9104      	str	r1, [sp, #16]
 8006c52:	4909      	ldr	r1, [pc, #36]	; (8006c78 <siprintf+0x3c>)
 8006c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c58:	9105      	str	r1, [sp, #20]
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	a902      	add	r1, sp, #8
 8006c60:	f000 fc28 	bl	80074b4 <_svfiprintf_r>
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	b01c      	add	sp, #112	; 0x70
 8006c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c70:	b003      	add	sp, #12
 8006c72:	4770      	bx	lr
 8006c74:	20000010 	.word	0x20000010
 8006c78:	ffff0208 	.word	0xffff0208

08006c7c <__swbuf_r>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	460e      	mov	r6, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	4605      	mov	r5, r0
 8006c84:	b118      	cbz	r0, 8006c8e <__swbuf_r+0x12>
 8006c86:	6983      	ldr	r3, [r0, #24]
 8006c88:	b90b      	cbnz	r3, 8006c8e <__swbuf_r+0x12>
 8006c8a:	f000 f9d1 	bl	8007030 <__sinit>
 8006c8e:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <__swbuf_r+0x98>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	d12b      	bne.n	8006cec <__swbuf_r+0x70>
 8006c94:	686c      	ldr	r4, [r5, #4]
 8006c96:	69a3      	ldr	r3, [r4, #24]
 8006c98:	60a3      	str	r3, [r4, #8]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	071a      	lsls	r2, r3, #28
 8006c9e:	d52f      	bpl.n	8006d00 <__swbuf_r+0x84>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b36b      	cbz	r3, 8006d00 <__swbuf_r+0x84>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	1ac0      	subs	r0, r0, r3
 8006caa:	6963      	ldr	r3, [r4, #20]
 8006cac:	b2f6      	uxtb	r6, r6
 8006cae:	4283      	cmp	r3, r0
 8006cb0:	4637      	mov	r7, r6
 8006cb2:	dc04      	bgt.n	8006cbe <__swbuf_r+0x42>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f000 f926 	bl	8006f08 <_fflush_r>
 8006cbc:	bb30      	cbnz	r0, 8006d0c <__swbuf_r+0x90>
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	6022      	str	r2, [r4, #0]
 8006cca:	701e      	strb	r6, [r3, #0]
 8006ccc:	6963      	ldr	r3, [r4, #20]
 8006cce:	3001      	adds	r0, #1
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	d004      	beq.n	8006cde <__swbuf_r+0x62>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	07db      	lsls	r3, r3, #31
 8006cd8:	d506      	bpl.n	8006ce8 <__swbuf_r+0x6c>
 8006cda:	2e0a      	cmp	r6, #10
 8006cdc:	d104      	bne.n	8006ce8 <__swbuf_r+0x6c>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 f911 	bl	8006f08 <_fflush_r>
 8006ce6:	b988      	cbnz	r0, 8006d0c <__swbuf_r+0x90>
 8006ce8:	4638      	mov	r0, r7
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <__swbuf_r+0x9c>)
 8006cee:	429c      	cmp	r4, r3
 8006cf0:	d101      	bne.n	8006cf6 <__swbuf_r+0x7a>
 8006cf2:	68ac      	ldr	r4, [r5, #8]
 8006cf4:	e7cf      	b.n	8006c96 <__swbuf_r+0x1a>
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <__swbuf_r+0xa0>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	bf08      	it	eq
 8006cfc:	68ec      	ldreq	r4, [r5, #12]
 8006cfe:	e7ca      	b.n	8006c96 <__swbuf_r+0x1a>
 8006d00:	4621      	mov	r1, r4
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 f80c 	bl	8006d20 <__swsetup_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0cb      	beq.n	8006ca4 <__swbuf_r+0x28>
 8006d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d10:	e7ea      	b.n	8006ce8 <__swbuf_r+0x6c>
 8006d12:	bf00      	nop
 8006d14:	0800802c 	.word	0x0800802c
 8006d18:	0800804c 	.word	0x0800804c
 8006d1c:	0800800c 	.word	0x0800800c

08006d20 <__swsetup_r>:
 8006d20:	4b32      	ldr	r3, [pc, #200]	; (8006dec <__swsetup_r+0xcc>)
 8006d22:	b570      	push	{r4, r5, r6, lr}
 8006d24:	681d      	ldr	r5, [r3, #0]
 8006d26:	4606      	mov	r6, r0
 8006d28:	460c      	mov	r4, r1
 8006d2a:	b125      	cbz	r5, 8006d36 <__swsetup_r+0x16>
 8006d2c:	69ab      	ldr	r3, [r5, #24]
 8006d2e:	b913      	cbnz	r3, 8006d36 <__swsetup_r+0x16>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 f97d 	bl	8007030 <__sinit>
 8006d36:	4b2e      	ldr	r3, [pc, #184]	; (8006df0 <__swsetup_r+0xd0>)
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	d10f      	bne.n	8006d5c <__swsetup_r+0x3c>
 8006d3c:	686c      	ldr	r4, [r5, #4]
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d44:	0719      	lsls	r1, r3, #28
 8006d46:	d42c      	bmi.n	8006da2 <__swsetup_r+0x82>
 8006d48:	06dd      	lsls	r5, r3, #27
 8006d4a:	d411      	bmi.n	8006d70 <__swsetup_r+0x50>
 8006d4c:	2309      	movs	r3, #9
 8006d4e:	6033      	str	r3, [r6, #0]
 8006d50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5a:	e03e      	b.n	8006dda <__swsetup_r+0xba>
 8006d5c:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <__swsetup_r+0xd4>)
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	d101      	bne.n	8006d66 <__swsetup_r+0x46>
 8006d62:	68ac      	ldr	r4, [r5, #8]
 8006d64:	e7eb      	b.n	8006d3e <__swsetup_r+0x1e>
 8006d66:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <__swsetup_r+0xd8>)
 8006d68:	429c      	cmp	r4, r3
 8006d6a:	bf08      	it	eq
 8006d6c:	68ec      	ldreq	r4, [r5, #12]
 8006d6e:	e7e6      	b.n	8006d3e <__swsetup_r+0x1e>
 8006d70:	0758      	lsls	r0, r3, #29
 8006d72:	d512      	bpl.n	8006d9a <__swsetup_r+0x7a>
 8006d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d76:	b141      	cbz	r1, 8006d8a <__swsetup_r+0x6a>
 8006d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d002      	beq.n	8006d86 <__swsetup_r+0x66>
 8006d80:	4630      	mov	r0, r6
 8006d82:	f000 fa5b 	bl	800723c <_free_r>
 8006d86:	2300      	movs	r3, #0
 8006d88:	6363      	str	r3, [r4, #52]	; 0x34
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	2300      	movs	r3, #0
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f043 0308 	orr.w	r3, r3, #8
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	b94b      	cbnz	r3, 8006dba <__swsetup_r+0x9a>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db0:	d003      	beq.n	8006dba <__swsetup_r+0x9a>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4630      	mov	r0, r6
 8006db6:	f000 fa01 	bl	80071bc <__smakebuf_r>
 8006dba:	89a0      	ldrh	r0, [r4, #12]
 8006dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dc0:	f010 0301 	ands.w	r3, r0, #1
 8006dc4:	d00a      	beq.n	8006ddc <__swsetup_r+0xbc>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	6963      	ldr	r3, [r4, #20]
 8006dcc:	425b      	negs	r3, r3
 8006dce:	61a3      	str	r3, [r4, #24]
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	b943      	cbnz	r3, 8006de6 <__swsetup_r+0xc6>
 8006dd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dd8:	d1ba      	bne.n	8006d50 <__swsetup_r+0x30>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	0781      	lsls	r1, r0, #30
 8006dde:	bf58      	it	pl
 8006de0:	6963      	ldrpl	r3, [r4, #20]
 8006de2:	60a3      	str	r3, [r4, #8]
 8006de4:	e7f4      	b.n	8006dd0 <__swsetup_r+0xb0>
 8006de6:	2000      	movs	r0, #0
 8006de8:	e7f7      	b.n	8006dda <__swsetup_r+0xba>
 8006dea:	bf00      	nop
 8006dec:	20000010 	.word	0x20000010
 8006df0:	0800802c 	.word	0x0800802c
 8006df4:	0800804c 	.word	0x0800804c
 8006df8:	0800800c 	.word	0x0800800c

08006dfc <__sflush_r>:
 8006dfc:	898a      	ldrh	r2, [r1, #12]
 8006dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	4605      	mov	r5, r0
 8006e04:	0710      	lsls	r0, r2, #28
 8006e06:	460c      	mov	r4, r1
 8006e08:	d458      	bmi.n	8006ebc <__sflush_r+0xc0>
 8006e0a:	684b      	ldr	r3, [r1, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dc05      	bgt.n	8006e1c <__sflush_r+0x20>
 8006e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dc02      	bgt.n	8006e1c <__sflush_r+0x20>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	d0f9      	beq.n	8006e16 <__sflush_r+0x1a>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e28:	682f      	ldr	r7, [r5, #0]
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	d032      	beq.n	8006e94 <__sflush_r+0x98>
 8006e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	075a      	lsls	r2, r3, #29
 8006e34:	d505      	bpl.n	8006e42 <__sflush_r+0x46>
 8006e36:	6863      	ldr	r3, [r4, #4]
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e3c:	b10b      	cbz	r3, 8006e42 <__sflush_r+0x46>
 8006e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	4602      	mov	r2, r0
 8006e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e48:	6a21      	ldr	r1, [r4, #32]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b0      	blx	r6
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	d106      	bne.n	8006e62 <__sflush_r+0x66>
 8006e54:	6829      	ldr	r1, [r5, #0]
 8006e56:	291d      	cmp	r1, #29
 8006e58:	d82c      	bhi.n	8006eb4 <__sflush_r+0xb8>
 8006e5a:	4a2a      	ldr	r2, [pc, #168]	; (8006f04 <__sflush_r+0x108>)
 8006e5c:	40ca      	lsrs	r2, r1
 8006e5e:	07d6      	lsls	r6, r2, #31
 8006e60:	d528      	bpl.n	8006eb4 <__sflush_r+0xb8>
 8006e62:	2200      	movs	r2, #0
 8006e64:	6062      	str	r2, [r4, #4]
 8006e66:	04d9      	lsls	r1, r3, #19
 8006e68:	6922      	ldr	r2, [r4, #16]
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	d504      	bpl.n	8006e78 <__sflush_r+0x7c>
 8006e6e:	1c42      	adds	r2, r0, #1
 8006e70:	d101      	bne.n	8006e76 <__sflush_r+0x7a>
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	b903      	cbnz	r3, 8006e78 <__sflush_r+0x7c>
 8006e76:	6560      	str	r0, [r4, #84]	; 0x54
 8006e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e7a:	602f      	str	r7, [r5, #0]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d0ca      	beq.n	8006e16 <__sflush_r+0x1a>
 8006e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e84:	4299      	cmp	r1, r3
 8006e86:	d002      	beq.n	8006e8e <__sflush_r+0x92>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f9d7 	bl	800723c <_free_r>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	6360      	str	r0, [r4, #52]	; 0x34
 8006e92:	e7c1      	b.n	8006e18 <__sflush_r+0x1c>
 8006e94:	6a21      	ldr	r1, [r4, #32]
 8006e96:	2301      	movs	r3, #1
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b0      	blx	r6
 8006e9c:	1c41      	adds	r1, r0, #1
 8006e9e:	d1c7      	bne.n	8006e30 <__sflush_r+0x34>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0c4      	beq.n	8006e30 <__sflush_r+0x34>
 8006ea6:	2b1d      	cmp	r3, #29
 8006ea8:	d001      	beq.n	8006eae <__sflush_r+0xb2>
 8006eaa:	2b16      	cmp	r3, #22
 8006eac:	d101      	bne.n	8006eb2 <__sflush_r+0xb6>
 8006eae:	602f      	str	r7, [r5, #0]
 8006eb0:	e7b1      	b.n	8006e16 <__sflush_r+0x1a>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	e7ad      	b.n	8006e18 <__sflush_r+0x1c>
 8006ebc:	690f      	ldr	r7, [r1, #16]
 8006ebe:	2f00      	cmp	r7, #0
 8006ec0:	d0a9      	beq.n	8006e16 <__sflush_r+0x1a>
 8006ec2:	0793      	lsls	r3, r2, #30
 8006ec4:	680e      	ldr	r6, [r1, #0]
 8006ec6:	bf08      	it	eq
 8006ec8:	694b      	ldreq	r3, [r1, #20]
 8006eca:	600f      	str	r7, [r1, #0]
 8006ecc:	bf18      	it	ne
 8006ece:	2300      	movne	r3, #0
 8006ed0:	eba6 0807 	sub.w	r8, r6, r7
 8006ed4:	608b      	str	r3, [r1, #8]
 8006ed6:	f1b8 0f00 	cmp.w	r8, #0
 8006eda:	dd9c      	ble.n	8006e16 <__sflush_r+0x1a>
 8006edc:	6a21      	ldr	r1, [r4, #32]
 8006ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	463a      	mov	r2, r7
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b0      	blx	r6
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	dc06      	bgt.n	8006efa <__sflush_r+0xfe>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	e78e      	b.n	8006e18 <__sflush_r+0x1c>
 8006efa:	4407      	add	r7, r0
 8006efc:	eba8 0800 	sub.w	r8, r8, r0
 8006f00:	e7e9      	b.n	8006ed6 <__sflush_r+0xda>
 8006f02:	bf00      	nop
 8006f04:	20400001 	.word	0x20400001

08006f08 <_fflush_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b913      	cbnz	r3, 8006f18 <_fflush_r+0x10>
 8006f12:	2500      	movs	r5, #0
 8006f14:	4628      	mov	r0, r5
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	b118      	cbz	r0, 8006f22 <_fflush_r+0x1a>
 8006f1a:	6983      	ldr	r3, [r0, #24]
 8006f1c:	b90b      	cbnz	r3, 8006f22 <_fflush_r+0x1a>
 8006f1e:	f000 f887 	bl	8007030 <__sinit>
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <_fflush_r+0x6c>)
 8006f24:	429c      	cmp	r4, r3
 8006f26:	d11b      	bne.n	8006f60 <_fflush_r+0x58>
 8006f28:	686c      	ldr	r4, [r5, #4]
 8006f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ef      	beq.n	8006f12 <_fflush_r+0xa>
 8006f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f34:	07d0      	lsls	r0, r2, #31
 8006f36:	d404      	bmi.n	8006f42 <_fflush_r+0x3a>
 8006f38:	0599      	lsls	r1, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <_fflush_r+0x3a>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3e:	f000 f915 	bl	800716c <__retarget_lock_acquire_recursive>
 8006f42:	4628      	mov	r0, r5
 8006f44:	4621      	mov	r1, r4
 8006f46:	f7ff ff59 	bl	8006dfc <__sflush_r>
 8006f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f4c:	07da      	lsls	r2, r3, #31
 8006f4e:	4605      	mov	r5, r0
 8006f50:	d4e0      	bmi.n	8006f14 <_fflush_r+0xc>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	059b      	lsls	r3, r3, #22
 8006f56:	d4dd      	bmi.n	8006f14 <_fflush_r+0xc>
 8006f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f5a:	f000 f908 	bl	800716e <__retarget_lock_release_recursive>
 8006f5e:	e7d9      	b.n	8006f14 <_fflush_r+0xc>
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <_fflush_r+0x70>)
 8006f62:	429c      	cmp	r4, r3
 8006f64:	d101      	bne.n	8006f6a <_fflush_r+0x62>
 8006f66:	68ac      	ldr	r4, [r5, #8]
 8006f68:	e7df      	b.n	8006f2a <_fflush_r+0x22>
 8006f6a:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <_fflush_r+0x74>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	bf08      	it	eq
 8006f70:	68ec      	ldreq	r4, [r5, #12]
 8006f72:	e7da      	b.n	8006f2a <_fflush_r+0x22>
 8006f74:	0800802c 	.word	0x0800802c
 8006f78:	0800804c 	.word	0x0800804c
 8006f7c:	0800800c 	.word	0x0800800c

08006f80 <std>:
 8006f80:	2300      	movs	r3, #0
 8006f82:	b510      	push	{r4, lr}
 8006f84:	4604      	mov	r4, r0
 8006f86:	e9c0 3300 	strd	r3, r3, [r0]
 8006f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f8e:	6083      	str	r3, [r0, #8]
 8006f90:	8181      	strh	r1, [r0, #12]
 8006f92:	6643      	str	r3, [r0, #100]	; 0x64
 8006f94:	81c2      	strh	r2, [r0, #14]
 8006f96:	6183      	str	r3, [r0, #24]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	305c      	adds	r0, #92	; 0x5c
 8006f9e:	f7ff fdb7 	bl	8006b10 <memset>
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x38>)
 8006fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <std+0x3c>)
 8006fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x40>)
 8006fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <std+0x44>)
 8006fb0:	6224      	str	r4, [r4, #32]
 8006fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08007cb1 	.word	0x08007cb1
 8006fbc:	08007cd3 	.word	0x08007cd3
 8006fc0:	08007d0b 	.word	0x08007d0b
 8006fc4:	08007d2f 	.word	0x08007d2f

08006fc8 <_cleanup_r>:
 8006fc8:	4901      	ldr	r1, [pc, #4]	; (8006fd0 <_cleanup_r+0x8>)
 8006fca:	f000 b8af 	b.w	800712c <_fwalk_reent>
 8006fce:	bf00      	nop
 8006fd0:	08006f09 	.word	0x08006f09

08006fd4 <__sfmoreglue>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	2268      	movs	r2, #104	; 0x68
 8006fd8:	1e4d      	subs	r5, r1, #1
 8006fda:	4355      	muls	r5, r2
 8006fdc:	460e      	mov	r6, r1
 8006fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fe2:	f000 f997 	bl	8007314 <_malloc_r>
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	b140      	cbz	r0, 8006ffc <__sfmoreglue+0x28>
 8006fea:	2100      	movs	r1, #0
 8006fec:	e9c0 1600 	strd	r1, r6, [r0]
 8006ff0:	300c      	adds	r0, #12
 8006ff2:	60a0      	str	r0, [r4, #8]
 8006ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ff8:	f7ff fd8a 	bl	8006b10 <memset>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}

08007000 <__sfp_lock_acquire>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sfp_lock_acquire+0x8>)
 8007002:	f000 b8b3 	b.w	800716c <__retarget_lock_acquire_recursive>
 8007006:	bf00      	nop
 8007008:	20000a05 	.word	0x20000a05

0800700c <__sfp_lock_release>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sfp_lock_release+0x8>)
 800700e:	f000 b8ae 	b.w	800716e <__retarget_lock_release_recursive>
 8007012:	bf00      	nop
 8007014:	20000a05 	.word	0x20000a05

08007018 <__sinit_lock_acquire>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sinit_lock_acquire+0x8>)
 800701a:	f000 b8a7 	b.w	800716c <__retarget_lock_acquire_recursive>
 800701e:	bf00      	nop
 8007020:	20000a06 	.word	0x20000a06

08007024 <__sinit_lock_release>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__sinit_lock_release+0x8>)
 8007026:	f000 b8a2 	b.w	800716e <__retarget_lock_release_recursive>
 800702a:	bf00      	nop
 800702c:	20000a06 	.word	0x20000a06

08007030 <__sinit>:
 8007030:	b510      	push	{r4, lr}
 8007032:	4604      	mov	r4, r0
 8007034:	f7ff fff0 	bl	8007018 <__sinit_lock_acquire>
 8007038:	69a3      	ldr	r3, [r4, #24]
 800703a:	b11b      	cbz	r3, 8007044 <__sinit+0x14>
 800703c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007040:	f7ff bff0 	b.w	8007024 <__sinit_lock_release>
 8007044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007048:	6523      	str	r3, [r4, #80]	; 0x50
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <__sinit+0x68>)
 800704c:	4a13      	ldr	r2, [pc, #76]	; (800709c <__sinit+0x6c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	62a2      	str	r2, [r4, #40]	; 0x28
 8007052:	42a3      	cmp	r3, r4
 8007054:	bf04      	itt	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	61a3      	streq	r3, [r4, #24]
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f820 	bl	80070a0 <__sfp>
 8007060:	6060      	str	r0, [r4, #4]
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f81c 	bl	80070a0 <__sfp>
 8007068:	60a0      	str	r0, [r4, #8]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f818 	bl	80070a0 <__sfp>
 8007070:	2200      	movs	r2, #0
 8007072:	60e0      	str	r0, [r4, #12]
 8007074:	2104      	movs	r1, #4
 8007076:	6860      	ldr	r0, [r4, #4]
 8007078:	f7ff ff82 	bl	8006f80 <std>
 800707c:	68a0      	ldr	r0, [r4, #8]
 800707e:	2201      	movs	r2, #1
 8007080:	2109      	movs	r1, #9
 8007082:	f7ff ff7d 	bl	8006f80 <std>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	2202      	movs	r2, #2
 800708a:	2112      	movs	r1, #18
 800708c:	f7ff ff78 	bl	8006f80 <std>
 8007090:	2301      	movs	r3, #1
 8007092:	61a3      	str	r3, [r4, #24]
 8007094:	e7d2      	b.n	800703c <__sinit+0xc>
 8007096:	bf00      	nop
 8007098:	08008008 	.word	0x08008008
 800709c:	08006fc9 	.word	0x08006fc9

080070a0 <__sfp>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	4607      	mov	r7, r0
 80070a4:	f7ff ffac 	bl	8007000 <__sfp_lock_acquire>
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <__sfp+0x84>)
 80070aa:	681e      	ldr	r6, [r3, #0]
 80070ac:	69b3      	ldr	r3, [r6, #24]
 80070ae:	b913      	cbnz	r3, 80070b6 <__sfp+0x16>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff ffbd 	bl	8007030 <__sinit>
 80070b6:	3648      	adds	r6, #72	; 0x48
 80070b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070bc:	3b01      	subs	r3, #1
 80070be:	d503      	bpl.n	80070c8 <__sfp+0x28>
 80070c0:	6833      	ldr	r3, [r6, #0]
 80070c2:	b30b      	cbz	r3, 8007108 <__sfp+0x68>
 80070c4:	6836      	ldr	r6, [r6, #0]
 80070c6:	e7f7      	b.n	80070b8 <__sfp+0x18>
 80070c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070cc:	b9d5      	cbnz	r5, 8007104 <__sfp+0x64>
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <__sfp+0x88>)
 80070d0:	60e3      	str	r3, [r4, #12]
 80070d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d6:	6665      	str	r5, [r4, #100]	; 0x64
 80070d8:	f000 f847 	bl	800716a <__retarget_lock_init_recursive>
 80070dc:	f7ff ff96 	bl	800700c <__sfp_lock_release>
 80070e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070e8:	6025      	str	r5, [r4, #0]
 80070ea:	61a5      	str	r5, [r4, #24]
 80070ec:	2208      	movs	r2, #8
 80070ee:	4629      	mov	r1, r5
 80070f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f4:	f7ff fd0c 	bl	8006b10 <memset>
 80070f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007100:	4620      	mov	r0, r4
 8007102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007104:	3468      	adds	r4, #104	; 0x68
 8007106:	e7d9      	b.n	80070bc <__sfp+0x1c>
 8007108:	2104      	movs	r1, #4
 800710a:	4638      	mov	r0, r7
 800710c:	f7ff ff62 	bl	8006fd4 <__sfmoreglue>
 8007110:	4604      	mov	r4, r0
 8007112:	6030      	str	r0, [r6, #0]
 8007114:	2800      	cmp	r0, #0
 8007116:	d1d5      	bne.n	80070c4 <__sfp+0x24>
 8007118:	f7ff ff78 	bl	800700c <__sfp_lock_release>
 800711c:	230c      	movs	r3, #12
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	e7ee      	b.n	8007100 <__sfp+0x60>
 8007122:	bf00      	nop
 8007124:	08008008 	.word	0x08008008
 8007128:	ffff0001 	.word	0xffff0001

0800712c <_fwalk_reent>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4606      	mov	r6, r0
 8007132:	4688      	mov	r8, r1
 8007134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007138:	2700      	movs	r7, #0
 800713a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800713e:	f1b9 0901 	subs.w	r9, r9, #1
 8007142:	d505      	bpl.n	8007150 <_fwalk_reent+0x24>
 8007144:	6824      	ldr	r4, [r4, #0]
 8007146:	2c00      	cmp	r4, #0
 8007148:	d1f7      	bne.n	800713a <_fwalk_reent+0xe>
 800714a:	4638      	mov	r0, r7
 800714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007150:	89ab      	ldrh	r3, [r5, #12]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d907      	bls.n	8007166 <_fwalk_reent+0x3a>
 8007156:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800715a:	3301      	adds	r3, #1
 800715c:	d003      	beq.n	8007166 <_fwalk_reent+0x3a>
 800715e:	4629      	mov	r1, r5
 8007160:	4630      	mov	r0, r6
 8007162:	47c0      	blx	r8
 8007164:	4307      	orrs	r7, r0
 8007166:	3568      	adds	r5, #104	; 0x68
 8007168:	e7e9      	b.n	800713e <_fwalk_reent+0x12>

0800716a <__retarget_lock_init_recursive>:
 800716a:	4770      	bx	lr

0800716c <__retarget_lock_acquire_recursive>:
 800716c:	4770      	bx	lr

0800716e <__retarget_lock_release_recursive>:
 800716e:	4770      	bx	lr

08007170 <__swhatbuf_r>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	460e      	mov	r6, r1
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	2900      	cmp	r1, #0
 800717a:	b096      	sub	sp, #88	; 0x58
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	da08      	bge.n	8007194 <__swhatbuf_r+0x24>
 8007182:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	061a      	lsls	r2, r3, #24
 800718c:	d410      	bmi.n	80071b0 <__swhatbuf_r+0x40>
 800718e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007192:	e00e      	b.n	80071b2 <__swhatbuf_r+0x42>
 8007194:	466a      	mov	r2, sp
 8007196:	f000 fdf1 	bl	8007d7c <_fstat_r>
 800719a:	2800      	cmp	r0, #0
 800719c:	dbf1      	blt.n	8007182 <__swhatbuf_r+0x12>
 800719e:	9a01      	ldr	r2, [sp, #4]
 80071a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a8:	425a      	negs	r2, r3
 80071aa:	415a      	adcs	r2, r3
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	e7ee      	b.n	800718e <__swhatbuf_r+0x1e>
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2000      	movs	r0, #0
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	b016      	add	sp, #88	; 0x58
 80071b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080071bc <__smakebuf_r>:
 80071bc:	898b      	ldrh	r3, [r1, #12]
 80071be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071c0:	079d      	lsls	r5, r3, #30
 80071c2:	4606      	mov	r6, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	d507      	bpl.n	80071d8 <__smakebuf_r+0x1c>
 80071c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	2301      	movs	r3, #1
 80071d2:	6163      	str	r3, [r4, #20]
 80071d4:	b002      	add	sp, #8
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	ab01      	add	r3, sp, #4
 80071da:	466a      	mov	r2, sp
 80071dc:	f7ff ffc8 	bl	8007170 <__swhatbuf_r>
 80071e0:	9900      	ldr	r1, [sp, #0]
 80071e2:	4605      	mov	r5, r0
 80071e4:	4630      	mov	r0, r6
 80071e6:	f000 f895 	bl	8007314 <_malloc_r>
 80071ea:	b948      	cbnz	r0, 8007200 <__smakebuf_r+0x44>
 80071ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f0:	059a      	lsls	r2, r3, #22
 80071f2:	d4ef      	bmi.n	80071d4 <__smakebuf_r+0x18>
 80071f4:	f023 0303 	bic.w	r3, r3, #3
 80071f8:	f043 0302 	orr.w	r3, r3, #2
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	e7e3      	b.n	80071c8 <__smakebuf_r+0xc>
 8007200:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <__smakebuf_r+0x7c>)
 8007202:	62b3      	str	r3, [r6, #40]	; 0x28
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	6020      	str	r0, [r4, #0]
 8007208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	6163      	str	r3, [r4, #20]
 8007212:	9b01      	ldr	r3, [sp, #4]
 8007214:	6120      	str	r0, [r4, #16]
 8007216:	b15b      	cbz	r3, 8007230 <__smakebuf_r+0x74>
 8007218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800721c:	4630      	mov	r0, r6
 800721e:	f000 fdbf 	bl	8007da0 <_isatty_r>
 8007222:	b128      	cbz	r0, 8007230 <__smakebuf_r+0x74>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	89a0      	ldrh	r0, [r4, #12]
 8007232:	4305      	orrs	r5, r0
 8007234:	81a5      	strh	r5, [r4, #12]
 8007236:	e7cd      	b.n	80071d4 <__smakebuf_r+0x18>
 8007238:	08006fc9 	.word	0x08006fc9

0800723c <_free_r>:
 800723c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800723e:	2900      	cmp	r1, #0
 8007240:	d044      	beq.n	80072cc <_free_r+0x90>
 8007242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007246:	9001      	str	r0, [sp, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f1a1 0404 	sub.w	r4, r1, #4
 800724e:	bfb8      	it	lt
 8007250:	18e4      	addlt	r4, r4, r3
 8007252:	f000 fdef 	bl	8007e34 <__malloc_lock>
 8007256:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <_free_r+0x94>)
 8007258:	9801      	ldr	r0, [sp, #4]
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	b933      	cbnz	r3, 800726c <_free_r+0x30>
 800725e:	6063      	str	r3, [r4, #4]
 8007260:	6014      	str	r4, [r2, #0]
 8007262:	b003      	add	sp, #12
 8007264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007268:	f000 bdea 	b.w	8007e40 <__malloc_unlock>
 800726c:	42a3      	cmp	r3, r4
 800726e:	d908      	bls.n	8007282 <_free_r+0x46>
 8007270:	6825      	ldr	r5, [r4, #0]
 8007272:	1961      	adds	r1, r4, r5
 8007274:	428b      	cmp	r3, r1
 8007276:	bf01      	itttt	eq
 8007278:	6819      	ldreq	r1, [r3, #0]
 800727a:	685b      	ldreq	r3, [r3, #4]
 800727c:	1949      	addeq	r1, r1, r5
 800727e:	6021      	streq	r1, [r4, #0]
 8007280:	e7ed      	b.n	800725e <_free_r+0x22>
 8007282:	461a      	mov	r2, r3
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	b10b      	cbz	r3, 800728c <_free_r+0x50>
 8007288:	42a3      	cmp	r3, r4
 800728a:	d9fa      	bls.n	8007282 <_free_r+0x46>
 800728c:	6811      	ldr	r1, [r2, #0]
 800728e:	1855      	adds	r5, r2, r1
 8007290:	42a5      	cmp	r5, r4
 8007292:	d10b      	bne.n	80072ac <_free_r+0x70>
 8007294:	6824      	ldr	r4, [r4, #0]
 8007296:	4421      	add	r1, r4
 8007298:	1854      	adds	r4, r2, r1
 800729a:	42a3      	cmp	r3, r4
 800729c:	6011      	str	r1, [r2, #0]
 800729e:	d1e0      	bne.n	8007262 <_free_r+0x26>
 80072a0:	681c      	ldr	r4, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	6053      	str	r3, [r2, #4]
 80072a6:	4421      	add	r1, r4
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	e7da      	b.n	8007262 <_free_r+0x26>
 80072ac:	d902      	bls.n	80072b4 <_free_r+0x78>
 80072ae:	230c      	movs	r3, #12
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	e7d6      	b.n	8007262 <_free_r+0x26>
 80072b4:	6825      	ldr	r5, [r4, #0]
 80072b6:	1961      	adds	r1, r4, r5
 80072b8:	428b      	cmp	r3, r1
 80072ba:	bf04      	itt	eq
 80072bc:	6819      	ldreq	r1, [r3, #0]
 80072be:	685b      	ldreq	r3, [r3, #4]
 80072c0:	6063      	str	r3, [r4, #4]
 80072c2:	bf04      	itt	eq
 80072c4:	1949      	addeq	r1, r1, r5
 80072c6:	6021      	streq	r1, [r4, #0]
 80072c8:	6054      	str	r4, [r2, #4]
 80072ca:	e7ca      	b.n	8007262 <_free_r+0x26>
 80072cc:	b003      	add	sp, #12
 80072ce:	bd30      	pop	{r4, r5, pc}
 80072d0:	20000a08 	.word	0x20000a08

080072d4 <sbrk_aligned>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4e0e      	ldr	r6, [pc, #56]	; (8007310 <sbrk_aligned+0x3c>)
 80072d8:	460c      	mov	r4, r1
 80072da:	6831      	ldr	r1, [r6, #0]
 80072dc:	4605      	mov	r5, r0
 80072de:	b911      	cbnz	r1, 80072e6 <sbrk_aligned+0x12>
 80072e0:	f000 fcd6 	bl	8007c90 <_sbrk_r>
 80072e4:	6030      	str	r0, [r6, #0]
 80072e6:	4621      	mov	r1, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 fcd1 	bl	8007c90 <_sbrk_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d00a      	beq.n	8007308 <sbrk_aligned+0x34>
 80072f2:	1cc4      	adds	r4, r0, #3
 80072f4:	f024 0403 	bic.w	r4, r4, #3
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d007      	beq.n	800730c <sbrk_aligned+0x38>
 80072fc:	1a21      	subs	r1, r4, r0
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fcc6 	bl	8007c90 <_sbrk_r>
 8007304:	3001      	adds	r0, #1
 8007306:	d101      	bne.n	800730c <sbrk_aligned+0x38>
 8007308:	f04f 34ff 	mov.w	r4, #4294967295
 800730c:	4620      	mov	r0, r4
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	20000a0c 	.word	0x20000a0c

08007314 <_malloc_r>:
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	1ccd      	adds	r5, r1, #3
 800731a:	f025 0503 	bic.w	r5, r5, #3
 800731e:	3508      	adds	r5, #8
 8007320:	2d0c      	cmp	r5, #12
 8007322:	bf38      	it	cc
 8007324:	250c      	movcc	r5, #12
 8007326:	2d00      	cmp	r5, #0
 8007328:	4607      	mov	r7, r0
 800732a:	db01      	blt.n	8007330 <_malloc_r+0x1c>
 800732c:	42a9      	cmp	r1, r5
 800732e:	d905      	bls.n	800733c <_malloc_r+0x28>
 8007330:	230c      	movs	r3, #12
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	2600      	movs	r6, #0
 8007336:	4630      	mov	r0, r6
 8007338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800733c:	4e2e      	ldr	r6, [pc, #184]	; (80073f8 <_malloc_r+0xe4>)
 800733e:	f000 fd79 	bl	8007e34 <__malloc_lock>
 8007342:	6833      	ldr	r3, [r6, #0]
 8007344:	461c      	mov	r4, r3
 8007346:	bb34      	cbnz	r4, 8007396 <_malloc_r+0x82>
 8007348:	4629      	mov	r1, r5
 800734a:	4638      	mov	r0, r7
 800734c:	f7ff ffc2 	bl	80072d4 <sbrk_aligned>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	4604      	mov	r4, r0
 8007354:	d14d      	bne.n	80073f2 <_malloc_r+0xde>
 8007356:	6834      	ldr	r4, [r6, #0]
 8007358:	4626      	mov	r6, r4
 800735a:	2e00      	cmp	r6, #0
 800735c:	d140      	bne.n	80073e0 <_malloc_r+0xcc>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	4631      	mov	r1, r6
 8007362:	4638      	mov	r0, r7
 8007364:	eb04 0803 	add.w	r8, r4, r3
 8007368:	f000 fc92 	bl	8007c90 <_sbrk_r>
 800736c:	4580      	cmp	r8, r0
 800736e:	d13a      	bne.n	80073e6 <_malloc_r+0xd2>
 8007370:	6821      	ldr	r1, [r4, #0]
 8007372:	3503      	adds	r5, #3
 8007374:	1a6d      	subs	r5, r5, r1
 8007376:	f025 0503 	bic.w	r5, r5, #3
 800737a:	3508      	adds	r5, #8
 800737c:	2d0c      	cmp	r5, #12
 800737e:	bf38      	it	cc
 8007380:	250c      	movcc	r5, #12
 8007382:	4629      	mov	r1, r5
 8007384:	4638      	mov	r0, r7
 8007386:	f7ff ffa5 	bl	80072d4 <sbrk_aligned>
 800738a:	3001      	adds	r0, #1
 800738c:	d02b      	beq.n	80073e6 <_malloc_r+0xd2>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	442b      	add	r3, r5
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	e00e      	b.n	80073b4 <_malloc_r+0xa0>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	1b52      	subs	r2, r2, r5
 800739a:	d41e      	bmi.n	80073da <_malloc_r+0xc6>
 800739c:	2a0b      	cmp	r2, #11
 800739e:	d916      	bls.n	80073ce <_malloc_r+0xba>
 80073a0:	1961      	adds	r1, r4, r5
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	6025      	str	r5, [r4, #0]
 80073a6:	bf18      	it	ne
 80073a8:	6059      	strne	r1, [r3, #4]
 80073aa:	6863      	ldr	r3, [r4, #4]
 80073ac:	bf08      	it	eq
 80073ae:	6031      	streq	r1, [r6, #0]
 80073b0:	5162      	str	r2, [r4, r5]
 80073b2:	604b      	str	r3, [r1, #4]
 80073b4:	4638      	mov	r0, r7
 80073b6:	f104 060b 	add.w	r6, r4, #11
 80073ba:	f000 fd41 	bl	8007e40 <__malloc_unlock>
 80073be:	f026 0607 	bic.w	r6, r6, #7
 80073c2:	1d23      	adds	r3, r4, #4
 80073c4:	1af2      	subs	r2, r6, r3
 80073c6:	d0b6      	beq.n	8007336 <_malloc_r+0x22>
 80073c8:	1b9b      	subs	r3, r3, r6
 80073ca:	50a3      	str	r3, [r4, r2]
 80073cc:	e7b3      	b.n	8007336 <_malloc_r+0x22>
 80073ce:	6862      	ldr	r2, [r4, #4]
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	bf0c      	ite	eq
 80073d4:	6032      	streq	r2, [r6, #0]
 80073d6:	605a      	strne	r2, [r3, #4]
 80073d8:	e7ec      	b.n	80073b4 <_malloc_r+0xa0>
 80073da:	4623      	mov	r3, r4
 80073dc:	6864      	ldr	r4, [r4, #4]
 80073de:	e7b2      	b.n	8007346 <_malloc_r+0x32>
 80073e0:	4634      	mov	r4, r6
 80073e2:	6876      	ldr	r6, [r6, #4]
 80073e4:	e7b9      	b.n	800735a <_malloc_r+0x46>
 80073e6:	230c      	movs	r3, #12
 80073e8:	603b      	str	r3, [r7, #0]
 80073ea:	4638      	mov	r0, r7
 80073ec:	f000 fd28 	bl	8007e40 <__malloc_unlock>
 80073f0:	e7a1      	b.n	8007336 <_malloc_r+0x22>
 80073f2:	6025      	str	r5, [r4, #0]
 80073f4:	e7de      	b.n	80073b4 <_malloc_r+0xa0>
 80073f6:	bf00      	nop
 80073f8:	20000a08 	.word	0x20000a08

080073fc <__ssputs_r>:
 80073fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007400:	688e      	ldr	r6, [r1, #8]
 8007402:	429e      	cmp	r6, r3
 8007404:	4682      	mov	sl, r0
 8007406:	460c      	mov	r4, r1
 8007408:	4690      	mov	r8, r2
 800740a:	461f      	mov	r7, r3
 800740c:	d838      	bhi.n	8007480 <__ssputs_r+0x84>
 800740e:	898a      	ldrh	r2, [r1, #12]
 8007410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007414:	d032      	beq.n	800747c <__ssputs_r+0x80>
 8007416:	6825      	ldr	r5, [r4, #0]
 8007418:	6909      	ldr	r1, [r1, #16]
 800741a:	eba5 0901 	sub.w	r9, r5, r1
 800741e:	6965      	ldr	r5, [r4, #20]
 8007420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007428:	3301      	adds	r3, #1
 800742a:	444b      	add	r3, r9
 800742c:	106d      	asrs	r5, r5, #1
 800742e:	429d      	cmp	r5, r3
 8007430:	bf38      	it	cc
 8007432:	461d      	movcc	r5, r3
 8007434:	0553      	lsls	r3, r2, #21
 8007436:	d531      	bpl.n	800749c <__ssputs_r+0xa0>
 8007438:	4629      	mov	r1, r5
 800743a:	f7ff ff6b 	bl	8007314 <_malloc_r>
 800743e:	4606      	mov	r6, r0
 8007440:	b950      	cbnz	r0, 8007458 <__ssputs_r+0x5c>
 8007442:	230c      	movs	r3, #12
 8007444:	f8ca 3000 	str.w	r3, [sl]
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	464a      	mov	r2, r9
 800745c:	f000 fcc2 	bl	8007de4 <memcpy>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	81a3      	strh	r3, [r4, #12]
 800746c:	6126      	str	r6, [r4, #16]
 800746e:	6165      	str	r5, [r4, #20]
 8007470:	444e      	add	r6, r9
 8007472:	eba5 0509 	sub.w	r5, r5, r9
 8007476:	6026      	str	r6, [r4, #0]
 8007478:	60a5      	str	r5, [r4, #8]
 800747a:	463e      	mov	r6, r7
 800747c:	42be      	cmp	r6, r7
 800747e:	d900      	bls.n	8007482 <__ssputs_r+0x86>
 8007480:	463e      	mov	r6, r7
 8007482:	6820      	ldr	r0, [r4, #0]
 8007484:	4632      	mov	r2, r6
 8007486:	4641      	mov	r1, r8
 8007488:	f000 fcba 	bl	8007e00 <memmove>
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	1b9b      	subs	r3, r3, r6
 8007490:	60a3      	str	r3, [r4, #8]
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	4433      	add	r3, r6
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	2000      	movs	r0, #0
 800749a:	e7db      	b.n	8007454 <__ssputs_r+0x58>
 800749c:	462a      	mov	r2, r5
 800749e:	f000 fcd5 	bl	8007e4c <_realloc_r>
 80074a2:	4606      	mov	r6, r0
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d1e1      	bne.n	800746c <__ssputs_r+0x70>
 80074a8:	6921      	ldr	r1, [r4, #16]
 80074aa:	4650      	mov	r0, sl
 80074ac:	f7ff fec6 	bl	800723c <_free_r>
 80074b0:	e7c7      	b.n	8007442 <__ssputs_r+0x46>
	...

080074b4 <_svfiprintf_r>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	4698      	mov	r8, r3
 80074ba:	898b      	ldrh	r3, [r1, #12]
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	b09d      	sub	sp, #116	; 0x74
 80074c0:	4607      	mov	r7, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	4614      	mov	r4, r2
 80074c6:	d50e      	bpl.n	80074e6 <_svfiprintf_r+0x32>
 80074c8:	690b      	ldr	r3, [r1, #16]
 80074ca:	b963      	cbnz	r3, 80074e6 <_svfiprintf_r+0x32>
 80074cc:	2140      	movs	r1, #64	; 0x40
 80074ce:	f7ff ff21 	bl	8007314 <_malloc_r>
 80074d2:	6028      	str	r0, [r5, #0]
 80074d4:	6128      	str	r0, [r5, #16]
 80074d6:	b920      	cbnz	r0, 80074e2 <_svfiprintf_r+0x2e>
 80074d8:	230c      	movs	r3, #12
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295
 80074e0:	e0d1      	b.n	8007686 <_svfiprintf_r+0x1d2>
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	616b      	str	r3, [r5, #20]
 80074e6:	2300      	movs	r3, #0
 80074e8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ea:	2320      	movs	r3, #32
 80074ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074f4:	2330      	movs	r3, #48	; 0x30
 80074f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076a0 <_svfiprintf_r+0x1ec>
 80074fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074fe:	f04f 0901 	mov.w	r9, #1
 8007502:	4623      	mov	r3, r4
 8007504:	469a      	mov	sl, r3
 8007506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800750a:	b10a      	cbz	r2, 8007510 <_svfiprintf_r+0x5c>
 800750c:	2a25      	cmp	r2, #37	; 0x25
 800750e:	d1f9      	bne.n	8007504 <_svfiprintf_r+0x50>
 8007510:	ebba 0b04 	subs.w	fp, sl, r4
 8007514:	d00b      	beq.n	800752e <_svfiprintf_r+0x7a>
 8007516:	465b      	mov	r3, fp
 8007518:	4622      	mov	r2, r4
 800751a:	4629      	mov	r1, r5
 800751c:	4638      	mov	r0, r7
 800751e:	f7ff ff6d 	bl	80073fc <__ssputs_r>
 8007522:	3001      	adds	r0, #1
 8007524:	f000 80aa 	beq.w	800767c <_svfiprintf_r+0x1c8>
 8007528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800752a:	445a      	add	r2, fp
 800752c:	9209      	str	r2, [sp, #36]	; 0x24
 800752e:	f89a 3000 	ldrb.w	r3, [sl]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80a2 	beq.w	800767c <_svfiprintf_r+0x1c8>
 8007538:	2300      	movs	r3, #0
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007542:	f10a 0a01 	add.w	sl, sl, #1
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	9307      	str	r3, [sp, #28]
 800754a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800754e:	931a      	str	r3, [sp, #104]	; 0x68
 8007550:	4654      	mov	r4, sl
 8007552:	2205      	movs	r2, #5
 8007554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007558:	4851      	ldr	r0, [pc, #324]	; (80076a0 <_svfiprintf_r+0x1ec>)
 800755a:	f7f8 fe49 	bl	80001f0 <memchr>
 800755e:	9a04      	ldr	r2, [sp, #16]
 8007560:	b9d8      	cbnz	r0, 800759a <_svfiprintf_r+0xe6>
 8007562:	06d0      	lsls	r0, r2, #27
 8007564:	bf44      	itt	mi
 8007566:	2320      	movmi	r3, #32
 8007568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756c:	0711      	lsls	r1, r2, #28
 800756e:	bf44      	itt	mi
 8007570:	232b      	movmi	r3, #43	; 0x2b
 8007572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007576:	f89a 3000 	ldrb.w	r3, [sl]
 800757a:	2b2a      	cmp	r3, #42	; 0x2a
 800757c:	d015      	beq.n	80075aa <_svfiprintf_r+0xf6>
 800757e:	9a07      	ldr	r2, [sp, #28]
 8007580:	4654      	mov	r4, sl
 8007582:	2000      	movs	r0, #0
 8007584:	f04f 0c0a 	mov.w	ip, #10
 8007588:	4621      	mov	r1, r4
 800758a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758e:	3b30      	subs	r3, #48	; 0x30
 8007590:	2b09      	cmp	r3, #9
 8007592:	d94e      	bls.n	8007632 <_svfiprintf_r+0x17e>
 8007594:	b1b0      	cbz	r0, 80075c4 <_svfiprintf_r+0x110>
 8007596:	9207      	str	r2, [sp, #28]
 8007598:	e014      	b.n	80075c4 <_svfiprintf_r+0x110>
 800759a:	eba0 0308 	sub.w	r3, r0, r8
 800759e:	fa09 f303 	lsl.w	r3, r9, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	46a2      	mov	sl, r4
 80075a8:	e7d2      	b.n	8007550 <_svfiprintf_r+0x9c>
 80075aa:	9b03      	ldr	r3, [sp, #12]
 80075ac:	1d19      	adds	r1, r3, #4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	9103      	str	r1, [sp, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bfbb      	ittet	lt
 80075b6:	425b      	neglt	r3, r3
 80075b8:	f042 0202 	orrlt.w	r2, r2, #2
 80075bc:	9307      	strge	r3, [sp, #28]
 80075be:	9307      	strlt	r3, [sp, #28]
 80075c0:	bfb8      	it	lt
 80075c2:	9204      	strlt	r2, [sp, #16]
 80075c4:	7823      	ldrb	r3, [r4, #0]
 80075c6:	2b2e      	cmp	r3, #46	; 0x2e
 80075c8:	d10c      	bne.n	80075e4 <_svfiprintf_r+0x130>
 80075ca:	7863      	ldrb	r3, [r4, #1]
 80075cc:	2b2a      	cmp	r3, #42	; 0x2a
 80075ce:	d135      	bne.n	800763c <_svfiprintf_r+0x188>
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	1d1a      	adds	r2, r3, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	9203      	str	r2, [sp, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfb8      	it	lt
 80075dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80075e0:	3402      	adds	r4, #2
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076b0 <_svfiprintf_r+0x1fc>
 80075e8:	7821      	ldrb	r1, [r4, #0]
 80075ea:	2203      	movs	r2, #3
 80075ec:	4650      	mov	r0, sl
 80075ee:	f7f8 fdff 	bl	80001f0 <memchr>
 80075f2:	b140      	cbz	r0, 8007606 <_svfiprintf_r+0x152>
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	eba0 000a 	sub.w	r0, r0, sl
 80075fa:	fa03 f000 	lsl.w	r0, r3, r0
 80075fe:	9b04      	ldr	r3, [sp, #16]
 8007600:	4303      	orrs	r3, r0
 8007602:	3401      	adds	r4, #1
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760a:	4826      	ldr	r0, [pc, #152]	; (80076a4 <_svfiprintf_r+0x1f0>)
 800760c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007610:	2206      	movs	r2, #6
 8007612:	f7f8 fded 	bl	80001f0 <memchr>
 8007616:	2800      	cmp	r0, #0
 8007618:	d038      	beq.n	800768c <_svfiprintf_r+0x1d8>
 800761a:	4b23      	ldr	r3, [pc, #140]	; (80076a8 <_svfiprintf_r+0x1f4>)
 800761c:	bb1b      	cbnz	r3, 8007666 <_svfiprintf_r+0x1b2>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	f023 0307 	bic.w	r3, r3, #7
 8007626:	3308      	adds	r3, #8
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	4433      	add	r3, r6
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	e767      	b.n	8007502 <_svfiprintf_r+0x4e>
 8007632:	fb0c 3202 	mla	r2, ip, r2, r3
 8007636:	460c      	mov	r4, r1
 8007638:	2001      	movs	r0, #1
 800763a:	e7a5      	b.n	8007588 <_svfiprintf_r+0xd4>
 800763c:	2300      	movs	r3, #0
 800763e:	3401      	adds	r4, #1
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	4619      	mov	r1, r3
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	4620      	mov	r0, r4
 800764a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764e:	3a30      	subs	r2, #48	; 0x30
 8007650:	2a09      	cmp	r2, #9
 8007652:	d903      	bls.n	800765c <_svfiprintf_r+0x1a8>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0c5      	beq.n	80075e4 <_svfiprintf_r+0x130>
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	e7c3      	b.n	80075e4 <_svfiprintf_r+0x130>
 800765c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007660:	4604      	mov	r4, r0
 8007662:	2301      	movs	r3, #1
 8007664:	e7f0      	b.n	8007648 <_svfiprintf_r+0x194>
 8007666:	ab03      	add	r3, sp, #12
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	462a      	mov	r2, r5
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <_svfiprintf_r+0x1f8>)
 800766e:	a904      	add	r1, sp, #16
 8007670:	4638      	mov	r0, r7
 8007672:	f3af 8000 	nop.w
 8007676:	1c42      	adds	r2, r0, #1
 8007678:	4606      	mov	r6, r0
 800767a:	d1d6      	bne.n	800762a <_svfiprintf_r+0x176>
 800767c:	89ab      	ldrh	r3, [r5, #12]
 800767e:	065b      	lsls	r3, r3, #25
 8007680:	f53f af2c 	bmi.w	80074dc <_svfiprintf_r+0x28>
 8007684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007686:	b01d      	add	sp, #116	; 0x74
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	ab03      	add	r3, sp, #12
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	462a      	mov	r2, r5
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <_svfiprintf_r+0x1f8>)
 8007694:	a904      	add	r1, sp, #16
 8007696:	4638      	mov	r0, r7
 8007698:	f000 f9d4 	bl	8007a44 <_printf_i>
 800769c:	e7eb      	b.n	8007676 <_svfiprintf_r+0x1c2>
 800769e:	bf00      	nop
 80076a0:	0800806c 	.word	0x0800806c
 80076a4:	08008076 	.word	0x08008076
 80076a8:	00000000 	.word	0x00000000
 80076ac:	080073fd 	.word	0x080073fd
 80076b0:	08008072 	.word	0x08008072

080076b4 <__sfputc_r>:
 80076b4:	6893      	ldr	r3, [r2, #8]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	b410      	push	{r4}
 80076bc:	6093      	str	r3, [r2, #8]
 80076be:	da08      	bge.n	80076d2 <__sfputc_r+0x1e>
 80076c0:	6994      	ldr	r4, [r2, #24]
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	db01      	blt.n	80076ca <__sfputc_r+0x16>
 80076c6:	290a      	cmp	r1, #10
 80076c8:	d103      	bne.n	80076d2 <__sfputc_r+0x1e>
 80076ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ce:	f7ff bad5 	b.w	8006c7c <__swbuf_r>
 80076d2:	6813      	ldr	r3, [r2, #0]
 80076d4:	1c58      	adds	r0, r3, #1
 80076d6:	6010      	str	r0, [r2, #0]
 80076d8:	7019      	strb	r1, [r3, #0]
 80076da:	4608      	mov	r0, r1
 80076dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <__sfputs_r>:
 80076e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	4614      	mov	r4, r2
 80076ea:	18d5      	adds	r5, r2, r3
 80076ec:	42ac      	cmp	r4, r5
 80076ee:	d101      	bne.n	80076f4 <__sfputs_r+0x12>
 80076f0:	2000      	movs	r0, #0
 80076f2:	e007      	b.n	8007704 <__sfputs_r+0x22>
 80076f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f8:	463a      	mov	r2, r7
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ffda 	bl	80076b4 <__sfputc_r>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d1f3      	bne.n	80076ec <__sfputs_r+0xa>
 8007704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007708 <_vfiprintf_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	460d      	mov	r5, r1
 800770e:	b09d      	sub	sp, #116	; 0x74
 8007710:	4614      	mov	r4, r2
 8007712:	4698      	mov	r8, r3
 8007714:	4606      	mov	r6, r0
 8007716:	b118      	cbz	r0, 8007720 <_vfiprintf_r+0x18>
 8007718:	6983      	ldr	r3, [r0, #24]
 800771a:	b90b      	cbnz	r3, 8007720 <_vfiprintf_r+0x18>
 800771c:	f7ff fc88 	bl	8007030 <__sinit>
 8007720:	4b89      	ldr	r3, [pc, #548]	; (8007948 <_vfiprintf_r+0x240>)
 8007722:	429d      	cmp	r5, r3
 8007724:	d11b      	bne.n	800775e <_vfiprintf_r+0x56>
 8007726:	6875      	ldr	r5, [r6, #4]
 8007728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772a:	07d9      	lsls	r1, r3, #31
 800772c:	d405      	bmi.n	800773a <_vfiprintf_r+0x32>
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	059a      	lsls	r2, r3, #22
 8007732:	d402      	bmi.n	800773a <_vfiprintf_r+0x32>
 8007734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007736:	f7ff fd19 	bl	800716c <__retarget_lock_acquire_recursive>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	071b      	lsls	r3, r3, #28
 800773e:	d501      	bpl.n	8007744 <_vfiprintf_r+0x3c>
 8007740:	692b      	ldr	r3, [r5, #16]
 8007742:	b9eb      	cbnz	r3, 8007780 <_vfiprintf_r+0x78>
 8007744:	4629      	mov	r1, r5
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff faea 	bl	8006d20 <__swsetup_r>
 800774c:	b1c0      	cbz	r0, 8007780 <_vfiprintf_r+0x78>
 800774e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007750:	07dc      	lsls	r4, r3, #31
 8007752:	d50e      	bpl.n	8007772 <_vfiprintf_r+0x6a>
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	b01d      	add	sp, #116	; 0x74
 800775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775e:	4b7b      	ldr	r3, [pc, #492]	; (800794c <_vfiprintf_r+0x244>)
 8007760:	429d      	cmp	r5, r3
 8007762:	d101      	bne.n	8007768 <_vfiprintf_r+0x60>
 8007764:	68b5      	ldr	r5, [r6, #8]
 8007766:	e7df      	b.n	8007728 <_vfiprintf_r+0x20>
 8007768:	4b79      	ldr	r3, [pc, #484]	; (8007950 <_vfiprintf_r+0x248>)
 800776a:	429d      	cmp	r5, r3
 800776c:	bf08      	it	eq
 800776e:	68f5      	ldreq	r5, [r6, #12]
 8007770:	e7da      	b.n	8007728 <_vfiprintf_r+0x20>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	0598      	lsls	r0, r3, #22
 8007776:	d4ed      	bmi.n	8007754 <_vfiprintf_r+0x4c>
 8007778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777a:	f7ff fcf8 	bl	800716e <__retarget_lock_release_recursive>
 800777e:	e7e9      	b.n	8007754 <_vfiprintf_r+0x4c>
 8007780:	2300      	movs	r3, #0
 8007782:	9309      	str	r3, [sp, #36]	; 0x24
 8007784:	2320      	movs	r3, #32
 8007786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800778a:	f8cd 800c 	str.w	r8, [sp, #12]
 800778e:	2330      	movs	r3, #48	; 0x30
 8007790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007954 <_vfiprintf_r+0x24c>
 8007794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007798:	f04f 0901 	mov.w	r9, #1
 800779c:	4623      	mov	r3, r4
 800779e:	469a      	mov	sl, r3
 80077a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a4:	b10a      	cbz	r2, 80077aa <_vfiprintf_r+0xa2>
 80077a6:	2a25      	cmp	r2, #37	; 0x25
 80077a8:	d1f9      	bne.n	800779e <_vfiprintf_r+0x96>
 80077aa:	ebba 0b04 	subs.w	fp, sl, r4
 80077ae:	d00b      	beq.n	80077c8 <_vfiprintf_r+0xc0>
 80077b0:	465b      	mov	r3, fp
 80077b2:	4622      	mov	r2, r4
 80077b4:	4629      	mov	r1, r5
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7ff ff93 	bl	80076e2 <__sfputs_r>
 80077bc:	3001      	adds	r0, #1
 80077be:	f000 80aa 	beq.w	8007916 <_vfiprintf_r+0x20e>
 80077c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c4:	445a      	add	r2, fp
 80077c6:	9209      	str	r2, [sp, #36]	; 0x24
 80077c8:	f89a 3000 	ldrb.w	r3, [sl]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a2 	beq.w	8007916 <_vfiprintf_r+0x20e>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077dc:	f10a 0a01 	add.w	sl, sl, #1
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e8:	931a      	str	r3, [sp, #104]	; 0x68
 80077ea:	4654      	mov	r4, sl
 80077ec:	2205      	movs	r2, #5
 80077ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f2:	4858      	ldr	r0, [pc, #352]	; (8007954 <_vfiprintf_r+0x24c>)
 80077f4:	f7f8 fcfc 	bl	80001f0 <memchr>
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	b9d8      	cbnz	r0, 8007834 <_vfiprintf_r+0x12c>
 80077fc:	06d1      	lsls	r1, r2, #27
 80077fe:	bf44      	itt	mi
 8007800:	2320      	movmi	r3, #32
 8007802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007806:	0713      	lsls	r3, r2, #28
 8007808:	bf44      	itt	mi
 800780a:	232b      	movmi	r3, #43	; 0x2b
 800780c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007810:	f89a 3000 	ldrb.w	r3, [sl]
 8007814:	2b2a      	cmp	r3, #42	; 0x2a
 8007816:	d015      	beq.n	8007844 <_vfiprintf_r+0x13c>
 8007818:	9a07      	ldr	r2, [sp, #28]
 800781a:	4654      	mov	r4, sl
 800781c:	2000      	movs	r0, #0
 800781e:	f04f 0c0a 	mov.w	ip, #10
 8007822:	4621      	mov	r1, r4
 8007824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007828:	3b30      	subs	r3, #48	; 0x30
 800782a:	2b09      	cmp	r3, #9
 800782c:	d94e      	bls.n	80078cc <_vfiprintf_r+0x1c4>
 800782e:	b1b0      	cbz	r0, 800785e <_vfiprintf_r+0x156>
 8007830:	9207      	str	r2, [sp, #28]
 8007832:	e014      	b.n	800785e <_vfiprintf_r+0x156>
 8007834:	eba0 0308 	sub.w	r3, r0, r8
 8007838:	fa09 f303 	lsl.w	r3, r9, r3
 800783c:	4313      	orrs	r3, r2
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	46a2      	mov	sl, r4
 8007842:	e7d2      	b.n	80077ea <_vfiprintf_r+0xe2>
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	1d19      	adds	r1, r3, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	9103      	str	r1, [sp, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfbb      	ittet	lt
 8007850:	425b      	neglt	r3, r3
 8007852:	f042 0202 	orrlt.w	r2, r2, #2
 8007856:	9307      	strge	r3, [sp, #28]
 8007858:	9307      	strlt	r3, [sp, #28]
 800785a:	bfb8      	it	lt
 800785c:	9204      	strlt	r2, [sp, #16]
 800785e:	7823      	ldrb	r3, [r4, #0]
 8007860:	2b2e      	cmp	r3, #46	; 0x2e
 8007862:	d10c      	bne.n	800787e <_vfiprintf_r+0x176>
 8007864:	7863      	ldrb	r3, [r4, #1]
 8007866:	2b2a      	cmp	r3, #42	; 0x2a
 8007868:	d135      	bne.n	80078d6 <_vfiprintf_r+0x1ce>
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	9203      	str	r2, [sp, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfb8      	it	lt
 8007876:	f04f 33ff 	movlt.w	r3, #4294967295
 800787a:	3402      	adds	r4, #2
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007964 <_vfiprintf_r+0x25c>
 8007882:	7821      	ldrb	r1, [r4, #0]
 8007884:	2203      	movs	r2, #3
 8007886:	4650      	mov	r0, sl
 8007888:	f7f8 fcb2 	bl	80001f0 <memchr>
 800788c:	b140      	cbz	r0, 80078a0 <_vfiprintf_r+0x198>
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	eba0 000a 	sub.w	r0, r0, sl
 8007894:	fa03 f000 	lsl.w	r0, r3, r0
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4303      	orrs	r3, r0
 800789c:	3401      	adds	r4, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	482c      	ldr	r0, [pc, #176]	; (8007958 <_vfiprintf_r+0x250>)
 80078a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078aa:	2206      	movs	r2, #6
 80078ac:	f7f8 fca0 	bl	80001f0 <memchr>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d03f      	beq.n	8007934 <_vfiprintf_r+0x22c>
 80078b4:	4b29      	ldr	r3, [pc, #164]	; (800795c <_vfiprintf_r+0x254>)
 80078b6:	bb1b      	cbnz	r3, 8007900 <_vfiprintf_r+0x1f8>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	3307      	adds	r3, #7
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c6:	443b      	add	r3, r7
 80078c8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ca:	e767      	b.n	800779c <_vfiprintf_r+0x94>
 80078cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d0:	460c      	mov	r4, r1
 80078d2:	2001      	movs	r0, #1
 80078d4:	e7a5      	b.n	8007822 <_vfiprintf_r+0x11a>
 80078d6:	2300      	movs	r3, #0
 80078d8:	3401      	adds	r4, #1
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	4619      	mov	r1, r3
 80078de:	f04f 0c0a 	mov.w	ip, #10
 80078e2:	4620      	mov	r0, r4
 80078e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e8:	3a30      	subs	r2, #48	; 0x30
 80078ea:	2a09      	cmp	r2, #9
 80078ec:	d903      	bls.n	80078f6 <_vfiprintf_r+0x1ee>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c5      	beq.n	800787e <_vfiprintf_r+0x176>
 80078f2:	9105      	str	r1, [sp, #20]
 80078f4:	e7c3      	b.n	800787e <_vfiprintf_r+0x176>
 80078f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078fa:	4604      	mov	r4, r0
 80078fc:	2301      	movs	r3, #1
 80078fe:	e7f0      	b.n	80078e2 <_vfiprintf_r+0x1da>
 8007900:	ab03      	add	r3, sp, #12
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	462a      	mov	r2, r5
 8007906:	4b16      	ldr	r3, [pc, #88]	; (8007960 <_vfiprintf_r+0x258>)
 8007908:	a904      	add	r1, sp, #16
 800790a:	4630      	mov	r0, r6
 800790c:	f3af 8000 	nop.w
 8007910:	4607      	mov	r7, r0
 8007912:	1c78      	adds	r0, r7, #1
 8007914:	d1d6      	bne.n	80078c4 <_vfiprintf_r+0x1bc>
 8007916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007918:	07d9      	lsls	r1, r3, #31
 800791a:	d405      	bmi.n	8007928 <_vfiprintf_r+0x220>
 800791c:	89ab      	ldrh	r3, [r5, #12]
 800791e:	059a      	lsls	r2, r3, #22
 8007920:	d402      	bmi.n	8007928 <_vfiprintf_r+0x220>
 8007922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007924:	f7ff fc23 	bl	800716e <__retarget_lock_release_recursive>
 8007928:	89ab      	ldrh	r3, [r5, #12]
 800792a:	065b      	lsls	r3, r3, #25
 800792c:	f53f af12 	bmi.w	8007754 <_vfiprintf_r+0x4c>
 8007930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007932:	e711      	b.n	8007758 <_vfiprintf_r+0x50>
 8007934:	ab03      	add	r3, sp, #12
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	462a      	mov	r2, r5
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <_vfiprintf_r+0x258>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	4630      	mov	r0, r6
 8007940:	f000 f880 	bl	8007a44 <_printf_i>
 8007944:	e7e4      	b.n	8007910 <_vfiprintf_r+0x208>
 8007946:	bf00      	nop
 8007948:	0800802c 	.word	0x0800802c
 800794c:	0800804c 	.word	0x0800804c
 8007950:	0800800c 	.word	0x0800800c
 8007954:	0800806c 	.word	0x0800806c
 8007958:	08008076 	.word	0x08008076
 800795c:	00000000 	.word	0x00000000
 8007960:	080076e3 	.word	0x080076e3
 8007964:	08008072 	.word	0x08008072

08007968 <_printf_common>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	4616      	mov	r6, r2
 800796e:	4699      	mov	r9, r3
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007978:	4293      	cmp	r3, r2
 800797a:	bfb8      	it	lt
 800797c:	4613      	movlt	r3, r2
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007984:	4607      	mov	r7, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b10a      	cbz	r2, 800798e <_printf_common+0x26>
 800798a:	3301      	adds	r3, #1
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	0699      	lsls	r1, r3, #26
 8007992:	bf42      	ittt	mi
 8007994:	6833      	ldrmi	r3, [r6, #0]
 8007996:	3302      	addmi	r3, #2
 8007998:	6033      	strmi	r3, [r6, #0]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	f015 0506 	ands.w	r5, r5, #6
 80079a0:	d106      	bne.n	80079b0 <_printf_common+0x48>
 80079a2:	f104 0a19 	add.w	sl, r4, #25
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	6832      	ldr	r2, [r6, #0]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	dc26      	bgt.n	80079fe <_printf_common+0x96>
 80079b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b4:	1e13      	subs	r3, r2, #0
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	bf18      	it	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	0692      	lsls	r2, r2, #26
 80079be:	d42b      	bmi.n	8007a18 <_printf_common+0xb0>
 80079c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c4:	4649      	mov	r1, r9
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d01e      	beq.n	8007a0c <_printf_common+0xa4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	68e5      	ldr	r5, [r4, #12]
 80079d2:	6832      	ldr	r2, [r6, #0]
 80079d4:	f003 0306 	and.w	r3, r3, #6
 80079d8:	2b04      	cmp	r3, #4
 80079da:	bf08      	it	eq
 80079dc:	1aad      	subeq	r5, r5, r2
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	bf0c      	ite	eq
 80079e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e8:	2500      	movne	r5, #0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bfc4      	itt	gt
 80079ee:	1a9b      	subgt	r3, r3, r2
 80079f0:	18ed      	addgt	r5, r5, r3
 80079f2:	2600      	movs	r6, #0
 80079f4:	341a      	adds	r4, #26
 80079f6:	42b5      	cmp	r5, r6
 80079f8:	d11a      	bne.n	8007a30 <_printf_common+0xc8>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e008      	b.n	8007a10 <_printf_common+0xa8>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	4649      	mov	r1, r9
 8007a04:	4638      	mov	r0, r7
 8007a06:	47c0      	blx	r8
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d103      	bne.n	8007a14 <_printf_common+0xac>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a14:	3501      	adds	r5, #1
 8007a16:	e7c6      	b.n	80079a6 <_printf_common+0x3e>
 8007a18:	18e1      	adds	r1, r4, r3
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	2030      	movs	r0, #48	; 0x30
 8007a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a22:	4422      	add	r2, r4
 8007a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	e7c7      	b.n	80079c0 <_printf_common+0x58>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4622      	mov	r2, r4
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d0e6      	beq.n	8007a0c <_printf_common+0xa4>
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7d9      	b.n	80079f6 <_printf_common+0x8e>
	...

08007a44 <_printf_i>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	7e0f      	ldrb	r7, [r1, #24]
 8007a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a4c:	2f78      	cmp	r7, #120	; 0x78
 8007a4e:	4691      	mov	r9, r2
 8007a50:	4680      	mov	r8, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	469a      	mov	sl, r3
 8007a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a5a:	d807      	bhi.n	8007a6c <_printf_i+0x28>
 8007a5c:	2f62      	cmp	r7, #98	; 0x62
 8007a5e:	d80a      	bhi.n	8007a76 <_printf_i+0x32>
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	f000 80d8 	beq.w	8007c16 <_printf_i+0x1d2>
 8007a66:	2f58      	cmp	r7, #88	; 0x58
 8007a68:	f000 80a3 	beq.w	8007bb2 <_printf_i+0x16e>
 8007a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a74:	e03a      	b.n	8007aec <_printf_i+0xa8>
 8007a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a7a:	2b15      	cmp	r3, #21
 8007a7c:	d8f6      	bhi.n	8007a6c <_printf_i+0x28>
 8007a7e:	a101      	add	r1, pc, #4	; (adr r1, 8007a84 <_printf_i+0x40>)
 8007a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007af1 	.word	0x08007af1
 8007a8c:	08007a6d 	.word	0x08007a6d
 8007a90:	08007a6d 	.word	0x08007a6d
 8007a94:	08007a6d 	.word	0x08007a6d
 8007a98:	08007a6d 	.word	0x08007a6d
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007a6d 	.word	0x08007a6d
 8007aa4:	08007a6d 	.word	0x08007a6d
 8007aa8:	08007a6d 	.word	0x08007a6d
 8007aac:	08007a6d 	.word	0x08007a6d
 8007ab0:	08007bfd 	.word	0x08007bfd
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007bdf 	.word	0x08007bdf
 8007abc:	08007a6d 	.word	0x08007a6d
 8007ac0:	08007a6d 	.word	0x08007a6d
 8007ac4:	08007c1f 	.word	0x08007c1f
 8007ac8:	08007a6d 	.word	0x08007a6d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a6d 	.word	0x08007a6d
 8007ad4:	08007a6d 	.word	0x08007a6d
 8007ad8:	08007be7 	.word	0x08007be7
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	602a      	str	r2, [r5, #0]
 8007ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0a3      	b.n	8007c38 <_printf_i+0x1f4>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	6829      	ldr	r1, [r5, #0]
 8007af4:	0606      	lsls	r6, r0, #24
 8007af6:	f101 0304 	add.w	r3, r1, #4
 8007afa:	d50a      	bpl.n	8007b12 <_printf_i+0xce>
 8007afc:	680e      	ldr	r6, [r1, #0]
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	2e00      	cmp	r6, #0
 8007b02:	da03      	bge.n	8007b0c <_printf_i+0xc8>
 8007b04:	232d      	movs	r3, #45	; 0x2d
 8007b06:	4276      	negs	r6, r6
 8007b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0c:	485e      	ldr	r0, [pc, #376]	; (8007c88 <_printf_i+0x244>)
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e019      	b.n	8007b46 <_printf_i+0x102>
 8007b12:	680e      	ldr	r6, [r1, #0]
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b1a:	bf18      	it	ne
 8007b1c:	b236      	sxthne	r6, r6
 8007b1e:	e7ef      	b.n	8007b00 <_printf_i+0xbc>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6820      	ldr	r0, [r4, #0]
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	6029      	str	r1, [r5, #0]
 8007b28:	0601      	lsls	r1, r0, #24
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0xec>
 8007b2c:	681e      	ldr	r6, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0xf2>
 8007b30:	0646      	lsls	r6, r0, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0xe8>
 8007b34:	881e      	ldrh	r6, [r3, #0]
 8007b36:	4854      	ldr	r0, [pc, #336]	; (8007c88 <_printf_i+0x244>)
 8007b38:	2f6f      	cmp	r7, #111	; 0x6f
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2308      	moveq	r3, #8
 8007b3e:	230a      	movne	r3, #10
 8007b40:	2100      	movs	r1, #0
 8007b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b46:	6865      	ldr	r5, [r4, #4]
 8007b48:	60a5      	str	r5, [r4, #8]
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	bfa2      	ittt	ge
 8007b4e:	6821      	ldrge	r1, [r4, #0]
 8007b50:	f021 0104 	bicge.w	r1, r1, #4
 8007b54:	6021      	strge	r1, [r4, #0]
 8007b56:	b90e      	cbnz	r6, 8007b5c <_printf_i+0x118>
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	d04d      	beq.n	8007bf8 <_printf_i+0x1b4>
 8007b5c:	4615      	mov	r5, r2
 8007b5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b62:	fb03 6711 	mls	r7, r3, r1, r6
 8007b66:	5dc7      	ldrb	r7, [r0, r7]
 8007b68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b6c:	4637      	mov	r7, r6
 8007b6e:	42bb      	cmp	r3, r7
 8007b70:	460e      	mov	r6, r1
 8007b72:	d9f4      	bls.n	8007b5e <_printf_i+0x11a>
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d10b      	bne.n	8007b90 <_printf_i+0x14c>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	07de      	lsls	r6, r3, #31
 8007b7c:	d508      	bpl.n	8007b90 <_printf_i+0x14c>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	4299      	cmp	r1, r3
 8007b84:	bfde      	ittt	le
 8007b86:	2330      	movle	r3, #48	; 0x30
 8007b88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b90:	1b52      	subs	r2, r2, r5
 8007b92:	6122      	str	r2, [r4, #16]
 8007b94:	f8cd a000 	str.w	sl, [sp]
 8007b98:	464b      	mov	r3, r9
 8007b9a:	aa03      	add	r2, sp, #12
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f7ff fee2 	bl	8007968 <_printf_common>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d14c      	bne.n	8007c42 <_printf_i+0x1fe>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b004      	add	sp, #16
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	4835      	ldr	r0, [pc, #212]	; (8007c88 <_printf_i+0x244>)
 8007bb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bb8:	6829      	ldr	r1, [r5, #0]
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bc0:	6029      	str	r1, [r5, #0]
 8007bc2:	061d      	lsls	r5, r3, #24
 8007bc4:	d514      	bpl.n	8007bf0 <_printf_i+0x1ac>
 8007bc6:	07df      	lsls	r7, r3, #31
 8007bc8:	bf44      	itt	mi
 8007bca:	f043 0320 	orrmi.w	r3, r3, #32
 8007bce:	6023      	strmi	r3, [r4, #0]
 8007bd0:	b91e      	cbnz	r6, 8007bda <_printf_i+0x196>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f023 0320 	bic.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2310      	movs	r3, #16
 8007bdc:	e7b0      	b.n	8007b40 <_printf_i+0xfc>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	2378      	movs	r3, #120	; 0x78
 8007be8:	4828      	ldr	r0, [pc, #160]	; (8007c8c <_printf_i+0x248>)
 8007bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bee:	e7e3      	b.n	8007bb8 <_printf_i+0x174>
 8007bf0:	0659      	lsls	r1, r3, #25
 8007bf2:	bf48      	it	mi
 8007bf4:	b2b6      	uxthmi	r6, r6
 8007bf6:	e7e6      	b.n	8007bc6 <_printf_i+0x182>
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	e7bb      	b.n	8007b74 <_printf_i+0x130>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	6826      	ldr	r6, [r4, #0]
 8007c00:	6961      	ldr	r1, [r4, #20]
 8007c02:	1d18      	adds	r0, r3, #4
 8007c04:	6028      	str	r0, [r5, #0]
 8007c06:	0635      	lsls	r5, r6, #24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	d501      	bpl.n	8007c10 <_printf_i+0x1cc>
 8007c0c:	6019      	str	r1, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <_printf_i+0x1d2>
 8007c10:	0670      	lsls	r0, r6, #25
 8007c12:	d5fb      	bpl.n	8007c0c <_printf_i+0x1c8>
 8007c14:	8019      	strh	r1, [r3, #0]
 8007c16:	2300      	movs	r3, #0
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	4615      	mov	r5, r2
 8007c1c:	e7ba      	b.n	8007b94 <_printf_i+0x150>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	602a      	str	r2, [r5, #0]
 8007c24:	681d      	ldr	r5, [r3, #0]
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f7f8 fae0 	bl	80001f0 <memchr>
 8007c30:	b108      	cbz	r0, 8007c36 <_printf_i+0x1f2>
 8007c32:	1b40      	subs	r0, r0, r5
 8007c34:	6060      	str	r0, [r4, #4]
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c40:	e7a8      	b.n	8007b94 <_printf_i+0x150>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	462a      	mov	r2, r5
 8007c46:	4649      	mov	r1, r9
 8007c48:	4640      	mov	r0, r8
 8007c4a:	47d0      	blx	sl
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d0ab      	beq.n	8007ba8 <_printf_i+0x164>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	079b      	lsls	r3, r3, #30
 8007c54:	d413      	bmi.n	8007c7e <_printf_i+0x23a>
 8007c56:	68e0      	ldr	r0, [r4, #12]
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	bfb8      	it	lt
 8007c5e:	4618      	movlt	r0, r3
 8007c60:	e7a4      	b.n	8007bac <_printf_i+0x168>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4632      	mov	r2, r6
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d09b      	beq.n	8007ba8 <_printf_i+0x164>
 8007c70:	3501      	adds	r5, #1
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	9903      	ldr	r1, [sp, #12]
 8007c76:	1a5b      	subs	r3, r3, r1
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dcf2      	bgt.n	8007c62 <_printf_i+0x21e>
 8007c7c:	e7eb      	b.n	8007c56 <_printf_i+0x212>
 8007c7e:	2500      	movs	r5, #0
 8007c80:	f104 0619 	add.w	r6, r4, #25
 8007c84:	e7f5      	b.n	8007c72 <_printf_i+0x22e>
 8007c86:	bf00      	nop
 8007c88:	0800807d 	.word	0x0800807d
 8007c8c:	0800808e 	.word	0x0800808e

08007c90 <_sbrk_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4d06      	ldr	r5, [pc, #24]	; (8007cac <_sbrk_r+0x1c>)
 8007c94:	2300      	movs	r3, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	f7fa f97a 	bl	8001f94 <_sbrk>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_sbrk_r+0x1a>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_sbrk_r+0x1a>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	20000a10 	.word	0x20000a10

08007cb0 <__sread>:
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb8:	f000 f8f8 	bl	8007eac <_read_r>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	bfab      	itete	ge
 8007cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cc4:	181b      	addge	r3, r3, r0
 8007cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cca:	bfac      	ite	ge
 8007ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cce:	81a3      	strhlt	r3, [r4, #12]
 8007cd0:	bd10      	pop	{r4, pc}

08007cd2 <__swrite>:
 8007cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd6:	461f      	mov	r7, r3
 8007cd8:	898b      	ldrh	r3, [r1, #12]
 8007cda:	05db      	lsls	r3, r3, #23
 8007cdc:	4605      	mov	r5, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	d505      	bpl.n	8007cf0 <__swrite+0x1e>
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	2302      	movs	r3, #2
 8007cea:	2200      	movs	r2, #0
 8007cec:	f000 f868 	bl	8007dc0 <_lseek_r>
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	463b      	mov	r3, r7
 8007d00:	4628      	mov	r0, r5
 8007d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	f000 b817 	b.w	8007d38 <_write_r>

08007d0a <__sseek>:
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d12:	f000 f855 	bl	8007dc0 <_lseek_r>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	bf15      	itete	ne
 8007d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d26:	81a3      	strheq	r3, [r4, #12]
 8007d28:	bf18      	it	ne
 8007d2a:	81a3      	strhne	r3, [r4, #12]
 8007d2c:	bd10      	pop	{r4, pc}

08007d2e <__sclose>:
 8007d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d32:	f000 b813 	b.w	8007d5c <_close_r>
	...

08007d38 <_write_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	; (8007d58 <_write_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7fa f8d3 	bl	8001ef2 <_write>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_write_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_write_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20000a10 	.word	0x20000a10

08007d5c <_close_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_close_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7fa f8df 	bl	8001f2a <_close>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_close_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_close_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20000a10 	.word	0x20000a10

08007d7c <_fstat_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_fstat_r+0x20>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	f7fa f8da 	bl	8001f42 <_fstat>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d102      	bne.n	8007d98 <_fstat_r+0x1c>
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	b103      	cbz	r3, 8007d98 <_fstat_r+0x1c>
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000a10 	.word	0x20000a10

08007da0 <_isatty_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	; (8007dbc <_isatty_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7fa f8d9 	bl	8001f62 <_isatty>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_isatty_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_isatty_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20000a10 	.word	0x20000a10

08007dc0 <_lseek_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_lseek_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7fa f8d2 	bl	8001f78 <_lseek>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_lseek_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_lseek_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	20000a10 	.word	0x20000a10

08007de4 <memcpy>:
 8007de4:	440a      	add	r2, r1
 8007de6:	4291      	cmp	r1, r2
 8007de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dec:	d100      	bne.n	8007df0 <memcpy+0xc>
 8007dee:	4770      	bx	lr
 8007df0:	b510      	push	{r4, lr}
 8007df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dfa:	4291      	cmp	r1, r2
 8007dfc:	d1f9      	bne.n	8007df2 <memcpy+0xe>
 8007dfe:	bd10      	pop	{r4, pc}

08007e00 <memmove>:
 8007e00:	4288      	cmp	r0, r1
 8007e02:	b510      	push	{r4, lr}
 8007e04:	eb01 0402 	add.w	r4, r1, r2
 8007e08:	d902      	bls.n	8007e10 <memmove+0x10>
 8007e0a:	4284      	cmp	r4, r0
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	d807      	bhi.n	8007e20 <memmove+0x20>
 8007e10:	1e43      	subs	r3, r0, #1
 8007e12:	42a1      	cmp	r1, r4
 8007e14:	d008      	beq.n	8007e28 <memmove+0x28>
 8007e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1e:	e7f8      	b.n	8007e12 <memmove+0x12>
 8007e20:	4402      	add	r2, r0
 8007e22:	4601      	mov	r1, r0
 8007e24:	428a      	cmp	r2, r1
 8007e26:	d100      	bne.n	8007e2a <memmove+0x2a>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e32:	e7f7      	b.n	8007e24 <memmove+0x24>

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_lock+0x8>)
 8007e36:	f7ff b999 	b.w	800716c <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	20000a04 	.word	0x20000a04

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f7ff b994 	b.w	800716e <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	20000a04 	.word	0x20000a04

08007e4c <_realloc_r>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	4680      	mov	r8, r0
 8007e52:	4614      	mov	r4, r2
 8007e54:	460e      	mov	r6, r1
 8007e56:	b921      	cbnz	r1, 8007e62 <_realloc_r+0x16>
 8007e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	f7ff ba59 	b.w	8007314 <_malloc_r>
 8007e62:	b92a      	cbnz	r2, 8007e70 <_realloc_r+0x24>
 8007e64:	f7ff f9ea 	bl	800723c <_free_r>
 8007e68:	4625      	mov	r5, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e70:	f000 f82e 	bl	8007ed0 <_malloc_usable_size_r>
 8007e74:	4284      	cmp	r4, r0
 8007e76:	4607      	mov	r7, r0
 8007e78:	d802      	bhi.n	8007e80 <_realloc_r+0x34>
 8007e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e7e:	d812      	bhi.n	8007ea6 <_realloc_r+0x5a>
 8007e80:	4621      	mov	r1, r4
 8007e82:	4640      	mov	r0, r8
 8007e84:	f7ff fa46 	bl	8007314 <_malloc_r>
 8007e88:	4605      	mov	r5, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0ed      	beq.n	8007e6a <_realloc_r+0x1e>
 8007e8e:	42bc      	cmp	r4, r7
 8007e90:	4622      	mov	r2, r4
 8007e92:	4631      	mov	r1, r6
 8007e94:	bf28      	it	cs
 8007e96:	463a      	movcs	r2, r7
 8007e98:	f7ff ffa4 	bl	8007de4 <memcpy>
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	f7ff f9cc 	bl	800723c <_free_r>
 8007ea4:	e7e1      	b.n	8007e6a <_realloc_r+0x1e>
 8007ea6:	4635      	mov	r5, r6
 8007ea8:	e7df      	b.n	8007e6a <_realloc_r+0x1e>
	...

08007eac <_read_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d07      	ldr	r5, [pc, #28]	; (8007ecc <_read_r+0x20>)
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f7f9 fffc 	bl	8001eb8 <_read>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_read_r+0x1e>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_read_r+0x1e>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	20000a10 	.word	0x20000a10

08007ed0 <_malloc_usable_size_r>:
 8007ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed4:	1f18      	subs	r0, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfbc      	itt	lt
 8007eda:	580b      	ldrlt	r3, [r1, r0]
 8007edc:	18c0      	addlt	r0, r0, r3
 8007ede:	4770      	bx	lr

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr
