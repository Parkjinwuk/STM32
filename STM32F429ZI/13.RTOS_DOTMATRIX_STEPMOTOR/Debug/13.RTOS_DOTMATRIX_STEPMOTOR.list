
13.RTOS_DOTMATRIX_STEPMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800dd2c  0800dd2c  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e08c  0800e08c  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e094  0800e094  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e094  0800e094  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e098  0800e098  0001e098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800e09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b4  2**0
                  CONTENTS
 10 .bss          00005728  200001b4  200001b4  000201b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200058dc  200058dc  000201b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ce7a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c6e  00000000  00000000  0004d05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002300  00000000  00000000  00052cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020c0  00000000  00000000  00054fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cdb4  00000000  00000000  00057090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ad06  00000000  00000000  00083e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104f4c  00000000  00000000  000aeb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b3a96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009dbc  00000000  00000000  001b3ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dd14 	.word	0x0800dd14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	0800dd14 	.word	0x0800dd14

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <get_button>:
	}
}
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 ff51 	bl	8004450 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <get_button+0x40>
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <get_button+0x6c>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d108      	bne.n	80005d4 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 80005c2:	2050      	movs	r0, #80	; 0x50
 80005c4:	f002 fc4c 	bl	8002e60 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <get_button+0x6c>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 80005d0:	2301      	movs	r3, #1
 80005d2:	e011      	b.n	80005f8 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10d      	bne.n	80005f6 <get_button+0x62>
 80005da:	787b      	ldrb	r3, [r7, #1]
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <get_button+0x6c>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d108      	bne.n	80005f6 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 80005e4:	201e      	movs	r0, #30
 80005e6:	f002 fc3b 	bl	8002e60 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <get_button+0x6c>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000004 	.word	0x20000004

08000604 <init_dotmatrix>:
// 초기화 작업
// 1. display_data에 number_data[0]에 있는 내용 복사
// 2. number_data를 scroll_buffer에 복사
// 3. dotmaxrix의 led를 off
void init_dotmatrix(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	for (int i=0; i<8; i++)
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e00f      	b.n	8000630 <init_dotmatrix+0x2c>
	{
		display_data[i] = number_data[i];
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <init_dotmatrix+0xb4>)
 800061c:	4413      	add	r3, r2
 800061e:	b2d9      	uxtb	r1, r3
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <init_dotmatrix+0xb8>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4413      	add	r3, r2
 8000626:	460a      	mov	r2, r1
 8000628:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3301      	adds	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b07      	cmp	r3, #7
 8000634:	ddec      	ble.n	8000610 <init_dotmatrix+0xc>

	}
	for (int i=1; i < number_of_character+1; i++)
 8000636:	2301      	movs	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	e01e      	b.n	800067a <init_dotmatrix+0x76>
	{
		for (int j=0; j<8; j++)	// scroll_buffer[0] = blank
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e015      	b.n	800066e <init_dotmatrix+0x6a>
		{
			scroll_buffer[i][j] = number_data[i-1][j];
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	1e5a      	subs	r2, r3, #1
 8000646:	491c      	ldr	r1, [pc, #112]	; (80006b8 <init_dotmatrix+0xb4>)
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	18ca      	adds	r2, r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <init_dotmatrix+0xbc>)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	441a      	add	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	460a      	mov	r2, r1
 8000666:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<8; j++)	// scroll_buffer[0] = blank
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b07      	cmp	r3, #7
 8000672:	dde6      	ble.n	8000642 <init_dotmatrix+0x3e>
	for (int i=1; i < number_of_character+1; i++)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <init_dotmatrix+0xc0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	429a      	cmp	r2, r3
 8000682:	dddb      	ble.n	800063c <init_dotmatrix+0x38>
		}
	}
	for (int i=0; i<8; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	e00e      	b.n	80006a8 <init_dotmatrix+0xa4>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);	// led all off
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <init_dotmatrix+0xc4>)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <init_dotmatrix+0xc8>)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	f003 feef 	bl	8004480 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	dded      	ble.n	800068a <init_dotmatrix+0x86>
	}
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000006c 	.word	0x2000006c
 80006bc:	200001d0 	.word	0x200001d0
 80006c0:	200001d8 	.word	0x200001d8
 80006c4:	20000134 	.word	0x20000134
 80006c8:	2000000c 	.word	0x2000000c
 80006cc:	2000004c 	.word	0x2000004c

080006d0 <write_column_data>:


void write_column_data(int column)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<8; i++)
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e01f      	b.n	800071e <write_column_data+0x4e>
	{
		if (i == column)
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d10c      	bne.n	8000700 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0); // on
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <write_column_data+0x60>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006ee:	4a11      	ldr	r2, [pc, #68]	; (8000734 <write_column_data+0x64>)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f003 fec1 	bl	8004480 <HAL_GPIO_WritePin>
 80006fe:	e00b      	b.n	8000718 <write_column_data+0x48>
		else
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // off
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <write_column_data+0x60>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <write_column_data+0x64>)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	f003 feb4 	bl	8004480 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b07      	cmp	r3, #7
 8000722:	dddc      	ble.n	80006de <write_column_data+0xe>
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000000c 	.word	0x2000000c
 8000734:	2000004c 	.word	0x2000004c

08000738 <write_row_data>:

//0b00111100
void write_row_data(unsigned char data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	unsigned char d = data;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	72fb      	strb	r3, [r7, #11]

	for (int i=0; i<8; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e023      	b.n	8000794 <write_row_data+0x5c>
	{
		if ( d & (1 << i)) // 1인 경우
 800074c:	7afa      	ldrb	r2, [r7, #11]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	fa42 f303 	asr.w	r3, r2, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00c      	beq.n	8000776 <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <write_row_data+0x6c>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <write_row_data+0x70>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	f003 fe86 	bl	8004480 <HAL_GPIO_WritePin>
 8000774:	e00b      	b.n	800078e <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <write_row_data+0x6c>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <write_row_data+0x70>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	f003 fe79 	bl	8004480 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b07      	cmp	r3, #7
 8000798:	ddd8      	ble.n	800074c <write_row_data+0x14>
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000002c 	.word	0x2000002c
 80007a8:	2000005c 	.word	0x2000005c

080007ac <dotmatrix_main_test>:

#if 1
// scroll 문자 출력 프로그램
int dotmatrix_main_test(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0

//	init_dotmatrix();

//	while(1)
//	{
		uint32_t now = HAL_GetTick();	// 1ms
 80007b2:	f002 fb49 	bl	8002e48 <HAL_GetTick>
 80007b6:	62f8      	str	r0, [r7, #44]	; 0x2c
		// 1. 처음시작시 past_time = 0; now: 500 --> past_time = 500
		if (now - past_time >= 500)	// 100ms scroll
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <dotmatrix_main_test+0x128>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007c4:	d36a      	bcc.n	800089c <dotmatrix_main_test+0xf0>
		{
			sprintf(lcd_buff,"now: %d", now);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ca:	4943      	ldr	r1, [pc, #268]	; (80008d8 <dotmatrix_main_test+0x12c>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00c fa47 	bl	800cc60 <siprintf>
			// 기존에 lock이 걸려 있으면 풀릴때 까지 기다린다.
			// control이 다른 task로 넘어 가지 않도록 lock을 건다.
			if (osMutexWait(myMutex01Handle, 1000) == osOK)	//Acquire이 원래 맞는데 Wait으로 재정의 했었음
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <dotmatrix_main_test+0x130>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007da:	4618      	mov	r0, r3
 80007dc:	f008 ff39 	bl	8009652 <osMutexAcquire>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10c      	bne.n	8000800 <dotmatrix_main_test+0x54>
			{
				move_cursor(0,0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f919 	bl	8000a20 <move_cursor>
				lcd_string(lcd_buff);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f900 	bl	80009f6 <lcd_string>
				osMutexRelease(myMutex01Handle);
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <dotmatrix_main_test+0x130>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 ff74 	bl	80096e8 <osMutexRelease>
				// unlock control이 다른 task로 넘어 가도록 한다.
			}
			past_time = now;
 8000800:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <dotmatrix_main_test+0x128>)
 8000802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000804:	6013      	str	r3, [r2, #0]
			for (int i=0; i<8; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
 800080a:	e029      	b.n	8000860 <dotmatrix_main_test+0xb4>
			{
				display_data[i] = (scroll_buffer[index][i] >> count) | (scroll_buffer[index+1][i] << (8 - count));
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <dotmatrix_main_test+0x134>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a34      	ldr	r2, [pc, #208]	; (80008e4 <dotmatrix_main_test+0x138>)
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	441a      	add	r2, r3
 8000816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <dotmatrix_main_test+0x13c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	fa42 f303 	asr.w	r3, r2, r3
 8000826:	b25a      	sxtb	r2, r3
 8000828:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <dotmatrix_main_test+0x134>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	492d      	ldr	r1, [pc, #180]	; (80008e4 <dotmatrix_main_test+0x138>)
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	4419      	add	r1, r3
 8000834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000836:	440b      	add	r3, r1
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4619      	mov	r1, r3
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <dotmatrix_main_test+0x13c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f1c3 0308 	rsb	r3, r3, #8
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	b25b      	sxtb	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	b2d9      	uxtb	r1, r3
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <dotmatrix_main_test+0x140>)
 8000852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000854:	4413      	add	r3, r2
 8000856:	460a      	mov	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<8; i++)
 800085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085c:	3301      	adds	r3, #1
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
 8000860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000862:	2b07      	cmp	r3, #7
 8000864:	ddd2      	ble.n	800080c <dotmatrix_main_test+0x60>
			}
			if (++count == 8)	// 8칼럼을 다 처리 했으면 다음 scroll_buffer로 이동
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <dotmatrix_main_test+0x13c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <dotmatrix_main_test+0x13c>)
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <dotmatrix_main_test+0x13c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b08      	cmp	r3, #8
 8000876:	d111      	bne.n	800089c <dotmatrix_main_test+0xf0>
			{
				count = 0;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <dotmatrix_main_test+0x13c>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
				index++;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <dotmatrix_main_test+0x134>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <dotmatrix_main_test+0x134>)
 8000886:	6013      	str	r3, [r2, #0]
				if (index == number_of_character+1) index = 0;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <dotmatrix_main_test+0x144>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <dotmatrix_main_test+0x134>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d102      	bne.n	800089c <dotmatrix_main_test+0xf0>
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <dotmatrix_main_test+0x134>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				// 11개의 문자를 다 처리 했으면 0번 scroll_buffer를 처리 하기위해 이동
			}
		}
		for(int i=0; i<8; i++)
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
 80008a0:	e00f      	b.n	80008c2 <dotmatrix_main_test+0x116>
		{
			// common anode 방식
			// column 에는 low, row 에는 high 를 출력해야 해당 LED 가 켜진다.
			write_column_data(i);
 80008a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008a4:	f7ff ff14 	bl	80006d0 <write_column_data>
			write_row_data(display_data[i]);
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <dotmatrix_main_test+0x140>)
 80008aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff41 	bl	8000738 <write_row_data>
			HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f002 fad2 	bl	8002e60 <HAL_Delay>
		for(int i=0; i<8; i++)
 80008bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008be:	3301      	adds	r3, #1
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
 80008c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	ddec      	ble.n	80008a2 <dotmatrix_main_test+0xf6>
		}
//	}

	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3738      	adds	r7, #56	; 0x38
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000368 	.word	0x20000368
 80008d8:	0800dd2c 	.word	0x0800dd2c
 80008dc:	20000dd0 	.word	0x20000dd0
 80008e0:	2000036c 	.word	0x2000036c
 80008e4:	200001d8 	.word	0x200001d8
 80008e8:	20000370 	.word	0x20000370
 80008ec:	200001d0 	.word	0x200001d0
 80008f0:	20000134 	.word	0x20000134

080008f4 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f023 030f 	bic.w	r3, r3, #15
 8000904:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f043 030c 	orr.w	r3, r3, #12
 8000912:	b2db      	uxtb	r3, r3
 8000914:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	b2db      	uxtb	r3, r3
 800091e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	f043 030c 	orr.w	r3, r3, #12
 8000926:	b2db      	uxtb	r3, r3
 8000928:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	b2db      	uxtb	r3, r3
 8000932:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000934:	bf00      	nop
 8000936:	f107 0208 	add.w	r2, r7, #8
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2304      	movs	r3, #4
 8000940:	214e      	movs	r1, #78	; 0x4e
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <lcd_command+0x64>)
 8000944:	f003 ff2c 	bl	80047a0 <HAL_I2C_Master_Transmit>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f3      	bne.n	8000936 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800094e:	bf00      	nop
}
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000608 	.word	0x20000608

0800095c <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af02      	add	r7, sp, #8
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f023 030f 	bic.w	r3, r3, #15
 800096c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	f043 030d 	orr.w	r3, r3, #13
 800097a:	b2db      	uxtb	r3, r3
 800097c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	f043 0309 	orr.w	r3, r3, #9
 8000984:	b2db      	uxtb	r3, r3
 8000986:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	f043 030d 	orr.w	r3, r3, #13
 800098e:	b2db      	uxtb	r3, r3
 8000990:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	f043 0309 	orr.w	r3, r3, #9
 8000998:	b2db      	uxtb	r3, r3
 800099a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800099c:	bf00      	nop
 800099e:	f107 0208 	add.w	r2, r7, #8
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2304      	movs	r3, #4
 80009a8:	214e      	movs	r1, #78	; 0x4e
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <lcd_data+0x64>)
 80009ac:	f003 fef8 	bl	80047a0 <HAL_I2C_Master_Transmit>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f3      	bne.n	800099e <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80009b6:	bf00      	nop
}
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000608 	.word	0x20000608

080009c4 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80009c8:	2033      	movs	r0, #51	; 0x33
 80009ca:	f7ff ff93 	bl	80008f4 <lcd_command>
	lcd_command(0x32);
 80009ce:	2032      	movs	r0, #50	; 0x32
 80009d0:	f7ff ff90 	bl	80008f4 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80009d4:	2028      	movs	r0, #40	; 0x28
 80009d6:	f7ff ff8d 	bl	80008f4 <lcd_command>
	lcd_command(DISPLAY_ON);
 80009da:	200c      	movs	r0, #12
 80009dc:	f7ff ff8a 	bl	80008f4 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80009e0:	2006      	movs	r0, #6
 80009e2:	f7ff ff87 	bl	80008f4 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff ff84 	bl	80008f4 <lcd_command>
	HAL_Delay(2);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f002 fa37 	bl	8002e60 <HAL_Delay>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	while(*str)
 80009fe:	e006      	b.n	8000a0e <lcd_string+0x18>
	{
		lcd_data(*str++);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ffa7 	bl	800095c <lcd_data>
	while(*str)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f4      	bne.n	8000a00 <lcd_string+0xa>
	}
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	019b      	lsls	r3, r3, #6
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff56 	bl	80008f4 <lcd_command>
	return;
 8000a48:	bf00      	nop
}
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <dec2bin>:

	return high + low;
}
// decimal --> BCD  ex) 23: 001 0111
unsigned char dec2bin(unsigned char byte)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <dec2bin+0x44>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <dec2bin+0x44>)
 8000a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a72:	08d9      	lsrs	r1, r3, #3
 8000a74:	460b      	mov	r3, r1
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000a80:	7bfa      	ldrb	r2, [r7, #15]
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	4413      	add	r3, r2
 8000a86:	b2db      	uxtb	r3, r3

}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	cccccccd 	.word	0xcccccccd

08000a98 <set_rtc>:
	 oldTime.Seconds=sTime.Seconds;
}
// setrtc231016103800
//       678901234567
void set_rtc(char *date_time)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4];  // date
	char hh[4], min[4], ss[4];  // time

	strncpy(yy, date_time+6, 2); // yy[0] = '2' yy[1]='3' yy[2]=0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1d99      	adds	r1, r3, #6
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f00c f94f 	bl	800cd4e <strncpy>
	strncpy(mm, date_time+8, 2);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f103 0108 	add.w	r1, r3, #8
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2202      	movs	r2, #2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f00c f946 	bl	800cd4e <strncpy>
	strncpy(dd, date_time+10, 2);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f103 010a 	add.w	r1, r3, #10
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2202      	movs	r2, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00c f93d 	bl	800cd4e <strncpy>

	strncpy(hh, date_time+12, 2);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f103 010c 	add.w	r1, r3, #12
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f00c f934 	bl	800cd4e <strncpy>
	strncpy(min, date_time+14, 2);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f103 010e 	add.w	r1, r3, #14
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2202      	movs	r2, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00c f92b 	bl	800cd4e <strncpy>
	strncpy(ss, date_time+16, 2);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f103 0110 	add.w	r1, r3, #16
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	2202      	movs	r2, #2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00c f922 	bl	800cd4e <strncpy>

	// ascii --> int --> bcd
	sDate.Year=dec2bin(atoi(yy));
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b fdcc 	bl	800c6ac <atoi>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff99 	bl	8000a50 <dec2bin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <set_rtc+0x138>)
 8000b24:	70da      	strb	r2, [r3, #3]
	sDate.Month=dec2bin(atoi(mm));
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00b fdbe 	bl	800c6ac <atoi>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff8b 	bl	8000a50 <dec2bin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <set_rtc+0x138>)
 8000b40:	705a      	strb	r2, [r3, #1]
	sDate.Date=dec2bin(atoi(dd));
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00b fdb0 	bl	800c6ac <atoi>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff7d 	bl	8000a50 <dec2bin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <set_rtc+0x138>)
 8000b5c:	709a      	strb	r2, [r3, #2]

	sTime.Hours=dec2bin(atoi(hh));
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00b fda2 	bl	800c6ac <atoi>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff6f 	bl	8000a50 <dec2bin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <set_rtc+0x13c>)
 8000b78:	701a      	strb	r2, [r3, #0]
	sTime.Minutes=dec2bin(atoi(min));
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00b fd94 	bl	800c6ac <atoi>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff61 	bl	8000a50 <dec2bin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <set_rtc+0x13c>)
 8000b94:	705a      	strb	r2, [r3, #1]
	sTime.Seconds=dec2bin(atoi(ss));
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00b fd86 	bl	800c6ac <atoi>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff53 	bl	8000a50 <dec2bin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <set_rtc+0x13c>)
 8000bb0:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <set_rtc+0x138>)
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <set_rtc+0x140>)
 8000bb8:	f005 fa2c 	bl	8006014 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <set_rtc+0x13c>)
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <set_rtc+0x140>)
 8000bc2:	f005 f98d 	bl	8005ee0 <HAL_RTC_SetTime>
}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000388 	.word	0x20000388
 8000bd4:	20000374 	.word	0x20000374
 8000bd8:	2000065c 	.word	0x2000065c

08000bdc <flower_on>:
#endif
	}
}

void flower_on()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	21ff      	movs	r1, #255	; 0xff
 8000be6:	4814      	ldr	r0, [pc, #80]	; (8000c38 <flower_on+0x5c>)
 8000be8:	f003 fc4a 	bl	8004480 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	e01a      	b.n	8000c28 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8000bf2:	2210      	movs	r2, #16
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <flower_on+0x5c>)
 8000c02:	f003 fc3d 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8000c06:	2208      	movs	r2, #8
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	fa42 f303 	asr.w	r3, r2, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	4619      	mov	r1, r3
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <flower_on+0x5c>)
 8000c16:	f003 fc33 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000c1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c1e:	f002 f91f 	bl	8002e60 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3301      	adds	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	dde1      	ble.n	8000bf2 <flower_on+0x16>
	}
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40020c00 	.word	0x40020c00

08000c3c <flower_off>:


void flower_off()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	21ff      	movs	r1, #255	; 0xff
 8000c46:	4814      	ldr	r0, [pc, #80]	; (8000c98 <flower_off+0x5c>)
 8000c48:	f003 fc1a 	bl	8004480 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	e01a      	b.n	8000c88 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	fa42 f303 	asr.w	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <flower_off+0x5c>)
 8000c62:	f003 fc0d 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <flower_off+0x5c>)
 8000c76:	f003 fc03 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000c7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c7e:	f002 f8ef 	bl	8002e60 <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	dde1      	ble.n	8000c52 <flower_off+0x16>
	}
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <led_keepon_up>:

void led_keepon_up()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e00f      	b.n	8000cc8 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <led_keepon_up+0x3c>)
 8000cb8:	f003 fbe2 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000cbc:	20c8      	movs	r0, #200	; 0xc8
 8000cbe:	f002 f8cf 	bl	8002e60 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	ddec      	ble.n	8000ca8 <led_keepon_up+0xc>
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <led_keepon_down>:

void led_keepon_down()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	e00f      	b.n	8000d08 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	fa42 f303 	asr.w	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <led_keepon_down+0x3c>)
 8000cf8:	f003 fbc2 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000cfc:	20c8      	movs	r0, #200	; 0xc8
 8000cfe:	f002 f8af 	bl	8002e60 <HAL_Delay>
	for (int i=0; i < 8; i++)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	ddec      	ble.n	8000ce8 <led_keepon_down+0xc>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <led_on_up+0x50>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2bc7      	cmp	r3, #199	; 0xc7
 8000d26:	dd1e      	ble.n	8000d66 <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <led_on_up+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000d2e:	f000 f861 	bl	8000df4 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <led_on_up+0x54>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2201      	movs	r2, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <led_on_up+0x58>)
 8000d44:	f003 fb9c 	bl	8004480 <HAL_GPIO_WritePin>
		i++;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <led_on_up+0x54>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <led_on_up+0x54>)
 8000d50:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <led_on_up+0x54>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	dd05      	ble.n	8000d66 <led_on_up+0x4a>
		{
			i=0;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <led_on_up+0x54>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <led_on_up+0x5c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000de0 	.word	0x20000de0
 8000d70:	20000390 	.word	0x20000390
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	2000038c 	.word	0x2000038c

08000d7c <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <led_on_down+0x50>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2bc7      	cmp	r3, #199	; 0xc7
 8000d86:	dd1e      	ble.n	8000dc6 <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <led_on_down+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
		led_all_off();
 8000d8e:	f000 f831 	bl	8000df4 <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <led_on_down+0x54>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	fa42 f303 	asr.w	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <led_on_down+0x58>)
 8000da4:	f003 fb6c 	bl	8004480 <HAL_GPIO_WritePin>
		i++;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <led_on_down+0x54>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <led_on_down+0x54>)
 8000db0:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <led_on_down+0x54>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b07      	cmp	r3, #7
 8000db8:	dd05      	ble.n	8000dc6 <led_on_down+0x4a>
		{
			i=0;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <led_on_down+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <led_on_down+0x5c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000de0 	.word	0x20000de0
 8000dd0:	20000394 	.word	0x20000394
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	2000038c 	.word	0x2000038c

08000ddc <led_all_on>:

void led_all_on(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <led_all_on+0x14>)
 8000de6:	f003 fb4b 	bl	8004480 <HAL_GPIO_WritePin>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <led_all_off>:

void led_all_off(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <led_all_off+0x14>)
 8000dfe:	f003 fb3f 	bl	8004480 <HAL_GPIO_WritePin>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e14:	1d39      	adds	r1, r7, #4
 8000e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <__io_putchar+0x20>)
 8000e1e:	f006 ff2a 	bl	8007c76 <HAL_UART_Transmit>

  return ch;
 8000e22:	687b      	ldr	r3, [r7, #4]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000082c 	.word	0x2000082c

08000e30 <HAL_ADC_ConvCpltCallback>:
//----------  printf end ----------

uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_ADC_ConvCpltCallback+0x30>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <HAL_ADC_ConvCpltCallback+0x34>)
 8000e44:	f002 fa62 	bl	800330c <HAL_ADC_GetValue>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_ADC_ConvCpltCallback+0x38>)
 8000e4e:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <HAL_ADC_ConvCpltCallback+0x34>)
 8000e52:	f002 f86d 	bl	8002f30 <HAL_ADC_Start_IT>
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40012000 	.word	0x40012000
 8000e64:	20000510 	.word	0x20000510
 8000e68:	20000de4 	.word	0x20000de4

08000e6c <delay_us>:
void delay_us(unsigned long us)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <delay_us+0x2c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8000e7c:	bf00      	nop
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <delay_us+0x2c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d8f9      	bhi.n	8000e7e <delay_us+0x12>
		;
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	200007e4 	.word	0x200007e4

08000e9c <HAL_GPIO_EXTI_Callback>:
// 1. move from Driver/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio
// 2. enter here every external interrupt
volatile int ext_int_no = -1;	// GPIO_Pin?�� 0번도 존재?��?���?? 구분?���?? ?��?��?�� -1�?? 집어?��?��
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d016      	beq.n	8000eda <HAL_GPIO_EXTI_Callback+0x3e>
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	dc1d      	bgt.n	8000eec <HAL_GPIO_EXTI_Callback+0x50>
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d002      	beq.n	8000eba <HAL_GPIO_EXTI_Callback+0x1e>
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d008      	beq.n	8000eca <HAL_GPIO_EXTI_Callback+0x2e>
	case PHOTO2_Pin:
		ext_int_no=GPIO_Pin;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED3
		break;
	}
}
 8000eb8:	e018      	b.n	8000eec <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no=GPIO_Pin;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ebe:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);	// LED1
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ec4:	f003 faf5 	bl	80044b2 <HAL_GPIO_TogglePin>
		break;
 8000ec8:	e010      	b.n	8000eec <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no=GPIO_Pin;
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ece:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	// LED2
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ed4:	f003 faed 	bl	80044b2 <HAL_GPIO_TogglePin>
		break;
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_EXTI_Callback+0x50>
		ext_int_no=GPIO_Pin;
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ede:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED3
 8000ee0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ee6:	f003 fae4 	bl	80044b2 <HAL_GPIO_TogglePin>
		break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000138 	.word	0x20000138
 8000ef8:	40020400 	.word	0x40020400

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f001 ff6c 	bl	8002ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f8b2 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f000 fc92 	bl	8001830 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0c:	f000 fc0e 	bl	800172c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f10:	f000 fc60 	bl	80017d4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000f14:	f000 fc34 	bl	8001780 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000f18:	f000 fbc0 	bl	800169c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000f1c:	f000 fbe2 	bl	80016e4 <MX_TIM11_Init>
  MX_TIM3_Init();
 8000f20:	f000 faa4 	bl	800146c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f24:	f000 faf6 	bl	8001514 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000f28:	f000 fa46 	bl	80013b8 <MX_TIM2_Init>
  MX_RTC_Init();
 8000f2c:	f000 f9ea 	bl	8001304 <MX_RTC_Init>
  MX_TIM5_Init();
 8000f30:	f000 fb3e 	bl	80015b0 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000f34:	f000 f9a6 	bl	8001284 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f38:	f000 f904 	bl	8001144 <MX_ADC1_Init>
  MX_ETH_Init();
 8000f3c:	f000 f954 	bl	80011e8 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000f40:	2201      	movs	r2, #1
 8000f42:	492e      	ldr	r1, [pc, #184]	; (8000ffc <main+0x100>)
 8000f44:	482e      	ldr	r0, [pc, #184]	; (8001000 <main+0x104>)
 8000f46:	f006 ff28 	bl	8007d9a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	492d      	ldr	r1, [pc, #180]	; (8001004 <main+0x108>)
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <main+0x10c>)
 8000f50:	f006 ff23 	bl	8007d9a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000f54:	482d      	ldr	r0, [pc, #180]	; (800100c <main+0x110>)
 8000f56:	f005 f9d1 	bl	80062fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <main+0x114>)
 8000f5c:	f005 f9ce 	bl	80062fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000f60:	2100      	movs	r1, #0
 8000f62:	482c      	ldr	r0, [pc, #176]	; (8001014 <main+0x118>)
 8000f64:	f005 fcb8 	bl	80068d8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000f68:	2100      	movs	r1, #0
 8000f6a:	482b      	ldr	r0, [pc, #172]	; (8001018 <main+0x11c>)
 8000f6c:	f005 fb4e 	bl	800660c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000f70:	2100      	movs	r1, #0
 8000f72:	482a      	ldr	r0, [pc, #168]	; (800101c <main+0x120>)
 8000f74:	f005 fa82 	bl	800647c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000f78:	210c      	movs	r1, #12
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <main+0x124>)
 8000f7c:	f005 fa7e 	bl	800647c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000f80:	4828      	ldr	r0, [pc, #160]	; (8001024 <main+0x128>)
 8000f82:	f001 ffd5 	bl	8002f30 <HAL_ADC_Start_IT>

//  DHT11_Init();
  i2c_lcd_init();
 8000f86:	f7ff fd1d 	bl	80009c4 <i2c_lcd_init>
  init_dotmatrix();
 8000f8a:	f7ff fb3b 	bl	8000604 <init_dotmatrix>
  TIM10_10ms_counter=0;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <main+0x12c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
//    buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f94:	f008 f9e0 	bl	8009358 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000f98:	4824      	ldr	r0, [pc, #144]	; (800102c <main+0x130>)
 8000f9a:	f008 fad4 	bl	8009546 <osMutexNew>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a23      	ldr	r2, [pc, #140]	; (8001030 <main+0x134>)
 8000fa2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fa4:	4a23      	ldr	r2, [pc, #140]	; (8001034 <main+0x138>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4823      	ldr	r0, [pc, #140]	; (8001038 <main+0x13c>)
 8000faa:	f008 fa1f 	bl	80093ec <osThreadNew>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <main+0x140>)
 8000fb2:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <main+0x144>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <main+0x148>)
 8000fba:	f008 fa17 	bl	80093ec <osThreadNew>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <main+0x14c>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <main+0x150>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <main+0x154>)
 8000fca:	f008 fa0f 	bl	80093ec <osThreadNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <main+0x158>)
 8000fd2:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 8000fd4:	4a20      	ldr	r2, [pc, #128]	; (8001058 <main+0x15c>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4820      	ldr	r0, [pc, #128]	; (800105c <main+0x160>)
 8000fda:	f008 fa07 	bl	80093ec <osThreadNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <main+0x164>)
 8000fe2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fe4:	f008 f9dc 	bl	80093a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("cds sensor: %d\n", adcValue[0]);
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <main+0x168>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	481e      	ldr	r0, [pc, #120]	; (8001068 <main+0x16c>)
 8000ff0:	f00b fd2e 	bl	800ca50 <iprintf>
	if (adcValue[0] < 2500)
	{
		nucleo_stm32f429zi_led_on();
	}
	*/
	HAL_Delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f001 ff33 	bl	8002e60 <HAL_Delay>
  {
 8000ffa:	e7f5      	b.n	8000fe8 <main+0xec>
 8000ffc:	20000dd4 	.word	0x20000dd4
 8001000:	2000082c 	.word	0x2000082c
 8001004:	20000dd5 	.word	0x20000dd5
 8001008:	20000870 	.word	0x20000870
 800100c:	2000079c 	.word	0x2000079c
 8001010:	200007e4 	.word	0x200007e4
 8001014:	200006c4 	.word	0x200006c4
 8001018:	2000070c 	.word	0x2000070c
 800101c:	2000067c 	.word	0x2000067c
 8001020:	20000754 	.word	0x20000754
 8001024:	20000510 	.word	0x20000510
 8001028:	20000dd8 	.word	0x20000dd8
 800102c:	0800decc 	.word	0x0800decc
 8001030:	20000dd0 	.word	0x20000dd0
 8001034:	0800de3c 	.word	0x0800de3c
 8001038:	08001ac1 	.word	0x08001ac1
 800103c:	20000dc0 	.word	0x20000dc0
 8001040:	0800de60 	.word	0x0800de60
 8001044:	08001ad1 	.word	0x08001ad1
 8001048:	20000dc4 	.word	0x20000dc4
 800104c:	0800de84 	.word	0x0800de84
 8001050:	08001ae5 	.word	0x08001ae5
 8001054:	20000dc8 	.word	0x20000dc8
 8001058:	0800dea8 	.word	0x0800dea8
 800105c:	08001af9 	.word	0x08001af9
 8001060:	20000dcc 	.word	0x20000dcc
 8001064:	20000de4 	.word	0x20000de4
 8001068:	0800dd64 	.word	0x0800dd64

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00b fc4b 	bl	800c916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <SystemClock_Config+0xd0>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <SystemClock_Config+0xd0>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <SystemClock_Config+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <SystemClock_Config+0xd4>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <SystemClock_Config+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010c8:	2309      	movs	r3, #9
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e4:	23a8      	movs	r3, #168	; 0xa8
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ec:	2307      	movs	r3, #7
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fff3 	bl	80050e0 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001100:	f000 fd2c 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2105      	movs	r1, #5
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fa54 	bl	80055d0 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800112e:	f000 fd15 	bl	8001b5c <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0x98>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_ADC1_Init+0x98>)
 8001172:	2201      	movs	r2, #1
 8001174:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_ADC1_Init+0x98>)
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xa0>)
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a6:	f001 fe7f 	bl	8002ea8 <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 fcd4 	bl	8001b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011bc:	2307      	movs	r3, #7
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0x98>)
 80011c6:	f002 f8c3 	bl	8003350 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 fcc4 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000510 	.word	0x20000510
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_ETH_Init+0x84>)
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <MX_ETH_Init+0x88>)
 80011f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_ETH_Init+0x8c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_ETH_Init+0x8c>)
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_ETH_Init+0x8c>)
 8001200:	22e1      	movs	r2, #225	; 0xe1
 8001202:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_ETH_Init+0x8c>)
 8001206:	2200      	movs	r2, #0
 8001208:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_ETH_Init+0x8c>)
 800120c:	2200      	movs	r2, #0
 800120e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_ETH_Init+0x8c>)
 8001212:	2200      	movs	r2, #0
 8001214:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_ETH_Init+0x84>)
 8001218:	4a16      	ldr	r2, [pc, #88]	; (8001274 <MX_ETH_Init+0x8c>)
 800121a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_ETH_Init+0x84>)
 800121e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001222:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_ETH_Init+0x84>)
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <MX_ETH_Init+0x90>)
 8001228:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_ETH_Init+0x84>)
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_ETH_Init+0x94>)
 800122e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_ETH_Init+0x84>)
 8001232:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001236:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_ETH_Init+0x84>)
 800123a:	f002 fc35 	bl	8003aa8 <HAL_ETH_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001244:	f000 fc8a 	bl	8001b5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001248:	2238      	movs	r2, #56	; 0x38
 800124a:	2100      	movs	r1, #0
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_ETH_Init+0x98>)
 800124e:	f00b fb62 	bl	800c916 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_ETH_Init+0x98>)
 8001254:	2221      	movs	r2, #33	; 0x21
 8001256:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_ETH_Init+0x98>)
 800125a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800125e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_ETH_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000558 	.word	0x20000558
 8001270:	40028000 	.word	0x40028000
 8001274:	20000dec 	.word	0x20000dec
 8001278:	20000470 	.word	0x20000470
 800127c:	200003d0 	.word	0x200003d0
 8001280:	20000398 	.word	0x20000398

08001284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_I2C1_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <MX_I2C1_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_I2C1_Init+0x74>)
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <MX_I2C1_Init+0x7c>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012c2:	f003 f929 	bl	8004518 <HAL_I2C_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012cc:	f000 fc46 	bl	8001b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012d4:	f003 fd6b 	bl	8004dae <HAL_I2CEx_ConfigAnalogFilter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012de:	f000 fc3d 	bl	8001b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_I2C1_Init+0x74>)
 80012e6:	f003 fd9e 	bl	8004e26 <HAL_I2CEx_ConfigDigitalFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012f0:	f000 fc34 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000608 	.word	0x20000608
 80012fc:	40005400 	.word	0x40005400
 8001300:	000186a0 	.word	0x000186a0

08001304 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_RTC_Init+0xac>)
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <MX_RTC_Init+0xb0>)
 8001320:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_RTC_Init+0xac>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_RTC_Init+0xac>)
 800132a:	227f      	movs	r2, #127	; 0x7f
 800132c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_RTC_Init+0xac>)
 8001330:	22ff      	movs	r2, #255	; 0xff
 8001332:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_RTC_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_RTC_Init+0xac>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_RTC_Init+0xac>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_RTC_Init+0xac>)
 8001348:	f004 fd54 	bl	8005df4 <HAL_RTC_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 fc03 	bl	8001b5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001356:	2309      	movs	r3, #9
 8001358:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 800135a:	2338      	movs	r3, #56	; 0x38
 800135c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <MX_RTC_Init+0xac>)
 8001372:	f004 fdb5 	bl	8005ee0 <HAL_RTC_SetTime>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 fbee 	bl	8001b5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001380:	2301      	movs	r3, #1
 8001382:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001384:	2310      	movs	r3, #16
 8001386:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001388:	2316      	movs	r3, #22
 800138a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800138c:	2323      	movs	r3, #35	; 0x23
 800138e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	2201      	movs	r2, #1
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_RTC_Init+0xac>)
 8001398:	f004 fe3c 	bl	8006014 <HAL_RTC_SetDate>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013a2:	f000 fbdb 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000065c 	.word	0x2000065c
 80013b4:	40002800 	.word	0x40002800

080013b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <MX_TIM2_Init+0xb0>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_TIM2_Init+0xb0>)
 80013e4:	f240 628f 	movw	r2, #1679	; 0x68f
 80013e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_TIM2_Init+0xb0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_TIM2_Init+0xb0>)
 80013f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_TIM2_Init+0xb0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_TIM2_Init+0xb0>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001404:	4818      	ldr	r0, [pc, #96]	; (8001468 <MX_TIM2_Init+0xb0>)
 8001406:	f004 ffe9 	bl	80063dc <HAL_TIM_PWM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001410:	f000 fba4 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4619      	mov	r1, r3
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_TIM2_Init+0xb0>)
 8001424:	f006 fb4a 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800142e:	f000 fb95 	bl	8001b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2360      	movs	r3, #96	; 0x60
 8001434:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001436:	f240 13f3 	movw	r3, #499	; 0x1f3
 800143a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_TIM2_Init+0xb0>)
 800144c:	f005 fd10 	bl	8006e70 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001456:	f000 fb81 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <MX_TIM2_Init+0xb0>)
 800145c:	f000 ffbc 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000067c 	.word	0x2000067c

0800146c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_TIM3_Init+0xa0>)
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <MX_TIM3_Init+0xa4>)
 800148c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_TIM3_Init+0xa0>)
 8001490:	2253      	movs	r2, #83	; 0x53
 8001492:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_TIM3_Init+0xa0>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM3_Init+0xa0>)
 800149c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM3_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_TIM3_Init+0xa0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <MX_TIM3_Init+0xa0>)
 80014b0:	f005 f9c2 	bl	8006838 <HAL_TIM_IC_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014ba:	f000 fb4f 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <MX_TIM3_Init+0xa0>)
 80014ce:	f006 faf5 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014d8:	f000 fb40 	bl	8001b5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014dc:	230a      	movs	r3, #10
 80014de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM3_Init+0xa0>)
 80014f4:	f005 fc20 	bl	8006d38 <HAL_TIM_IC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014fe:	f000 fb2d 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200006c4 	.word	0x200006c4
 8001510:	40000400 	.word	0x40000400

08001514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <MX_TIM4_Init+0x98>)
 8001534:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001538:	f240 3247 	movw	r2, #839	; 0x347
 800153c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001546:	2263      	movs	r2, #99	; 0x63
 8001548:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_TIM4_Init+0x94>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001558:	f004 fe81 	bl	800625e <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 fafb 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001574:	f005 fd3e 	bl	8006ff4 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 faed 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001590:	f006 fa94 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800159a:	f000 fadf 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000070c 	.word	0x2000070c
 80015ac:	40000800 	.word	0x40000800

080015b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <MX_TIM5_Init+0xe4>)
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <MX_TIM5_Init+0xe8>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <MX_TIM5_Init+0xe4>)
 80015e8:	2233      	movs	r2, #51	; 0x33
 80015ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <MX_TIM5_Init+0xe4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_TIM5_Init+0xe4>)
 80015f4:	f240 128f 	movw	r2, #399	; 0x18f
 80015f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_TIM5_Init+0xe4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001606:	4823      	ldr	r0, [pc, #140]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001608:	f004 fe29 	bl	800625e <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001612:	f000 faa3 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001620:	4619      	mov	r1, r3
 8001622:	481c      	ldr	r0, [pc, #112]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001624:	f005 fce6 	bl	8006ff4 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800162e:	f000 fa95 	bl	8001b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001634:	f004 fed2 	bl	80063dc <HAL_TIM_PWM_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800163e:	f000 fa8d 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	4619      	mov	r1, r3
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001652:	f006 fa33 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800165c:	f000 fa7e 	bl	8001b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001660:	2360      	movs	r3, #96	; 0x60
 8001662:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001664:	23c7      	movs	r3, #199	; 0xc7
 8001666:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	220c      	movs	r2, #12
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001678:	f005 fbfa 	bl	8006e70 <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001682:	f000 fa6b 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM5_Init+0xe4>)
 8001688:	f000 fea6 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000754 	.word	0x20000754
 8001698:	40000c00 	.word	0x40000c00

0800169c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_TIM10_Init+0x40>)
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <MX_TIM10_Init+0x44>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_TIM10_Init+0x40>)
 80016a8:	22a7      	movs	r2, #167	; 0xa7
 80016aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_TIM10_Init+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_TIM10_Init+0x40>)
 80016b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80016b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_TIM10_Init+0x40>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_TIM10_Init+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM10_Init+0x40>)
 80016c8:	f004 fdc9 	bl	800625e <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80016d2:	f000 fa43 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000079c 	.word	0x2000079c
 80016e0:	40014400 	.word	0x40014400

080016e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_TIM11_Init+0x40>)
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <MX_TIM11_Init+0x44>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <MX_TIM11_Init+0x40>)
 80016f0:	22a7      	movs	r2, #167	; 0xa7
 80016f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_TIM11_Init+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_TIM11_Init+0x40>)
 80016fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001700:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_TIM11_Init+0x40>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_TIM11_Init+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_TIM11_Init+0x40>)
 8001710:	f004 fda5 	bl	800625e <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800171a:	f000 fa1f 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200007e4 	.word	0x200007e4
 8001728:	40014800 	.word	0x40014800

0800172c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART3_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001764:	f006 fa3a 	bl	8007bdc <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 f9f5 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000082c 	.word	0x2000082c
 800177c:	40004800 	.word	0x40004800

08001780 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART6_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 800178c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001790:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART6_UART_Init+0x4c>)
 80017b8:	f006 fa10 	bl	8007bdc <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f9cb 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000870 	.word	0x20000870
 80017d0:	40011400 	.word	0x40011400

080017d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f4:	2202      	movs	r2, #2
 80017f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180c:	2201      	movs	r2, #1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001818:	f003 fb44 	bl	8004ea4 <HAL_PCD_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001822:	f000 f99b 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200008b4 	.word	0x200008b4

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	4b95      	ldr	r3, [pc, #596]	; (8001aa0 <MX_GPIO_Init+0x270>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001850:	f043 0310 	orr.w	r3, r3, #16
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <MX_GPIO_Init+0x270>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a86      	ldr	r2, [pc, #536]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b84      	ldr	r3, [pc, #528]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a7f      	ldr	r2, [pc, #508]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a78      	ldr	r2, [pc, #480]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b6b      	ldr	r3, [pc, #428]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a6a      	ldr	r2, [pc, #424]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a63      	ldr	r2, [pc, #396]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <MX_GPIO_Init+0x270>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800192c:	485d      	ldr	r0, [pc, #372]	; (8001aa4 <MX_GPIO_Init+0x274>)
 800192e:	f002 fda7 	bl	8004480 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2101      	movs	r1, #1
 8001936:	485c      	ldr	r0, [pc, #368]	; (8001aa8 <MX_GPIO_Init+0x278>)
 8001938:	f002 fda2 	bl	8004480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001942:	485a      	ldr	r0, [pc, #360]	; (8001aac <MX_GPIO_Init+0x27c>)
 8001944:	f002 fd9c 	bl	8004480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194e:	4858      	ldr	r0, [pc, #352]	; (8001ab0 <MX_GPIO_Init+0x280>)
 8001950:	f002 fd96 	bl	8004480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001954:	2200      	movs	r2, #0
 8001956:	f647 01ff 	movw	r1, #30975	; 0x78ff
 800195a:	4856      	ldr	r0, [pc, #344]	; (8001ab4 <MX_GPIO_Init+0x284>)
 800195c:	f002 fd90 	bl	8004480 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	4854      	ldr	r0, [pc, #336]	; (8001ab8 <MX_GPIO_Init+0x288>)
 8001966:	f002 fd8b 	bl	8004480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 800196a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	4848      	ldr	r0, [pc, #288]	; (8001aa4 <MX_GPIO_Init+0x274>)
 8001984:	f002 fbb8 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 8001988:	f242 030d 	movw	r3, #8205	; 0x200d
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	4847      	ldr	r0, [pc, #284]	; (8001abc <MX_GPIO_Init+0x28c>)
 80019a0:	f002 fbaa 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80019a4:	2301      	movs	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	483b      	ldr	r0, [pc, #236]	; (8001aa8 <MX_GPIO_Init+0x278>)
 80019bc:	f002 fb9c 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4834      	ldr	r0, [pc, #208]	; (8001aac <MX_GPIO_Init+0x27c>)
 80019da:	f002 fb8d 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	482e      	ldr	r0, [pc, #184]	; (8001ab0 <MX_GPIO_Init+0x280>)
 80019f8:	f002 fb7e 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80019fc:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4824      	ldr	r0, [pc, #144]	; (8001aa4 <MX_GPIO_Init+0x274>)
 8001a12:	f002 fb71 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001a16:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4821      	ldr	r0, [pc, #132]	; (8001ab4 <MX_GPIO_Init+0x284>)
 8001a30:	f002 fb62 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a34:	2340      	movs	r3, #64	; 0x40
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <MX_GPIO_Init+0x288>)
 8001a4c:	f002 fb54 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <MX_GPIO_Init+0x288>)
 8001a64:	f002 fb48 	bl	80040f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2105      	movs	r1, #5
 8001a6c:	2006      	movs	r0, #6
 8001a6e:	f001 ff5f 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a72:	2006      	movs	r0, #6
 8001a74:	f001 ff78 	bl	8003968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	2008      	movs	r0, #8
 8001a7e:	f001 ff57 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a82:	2008      	movs	r0, #8
 8001a84:	f001 ff70 	bl	8003968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	2009      	movs	r0, #9
 8001a8e:	f001 ff4f 	bl	8003930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a92:	2009      	movs	r0, #9
 8001a94:	f001 ff68 	bl	8003968 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a98:	bf00      	nop
 8001a9a:	3738      	adds	r7, #56	; 0x38
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40020800 	.word	0x40020800

08001ac0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f007 fd21 	bl	8009510 <osDelay>
 8001ace:	e7fb      	b.n	8001ac8 <StartDefaultTask+0x8>

08001ad0 <Task1_func>:
* @retval None
*/
extern void init_dotmatrix(void);
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
  /* Infinite loop */
  for(;;)
  {
	dotmatrix_main_test();
 8001ad8:	f7fe fe68 	bl	80007ac <dotmatrix_main_test>
    osDelay(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f007 fd17 	bl	8009510 <osDelay>
	dotmatrix_main_test();
 8001ae2:	e7f9      	b.n	8001ad8 <Task1_func+0x8>

08001ae4 <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main_test();
 8001aec:	f000 f84c 	bl	8001b88 <stepmotor_main_test>
    osDelay(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f007 fd0d 	bl	8009510 <osDelay>
	stepmotor_main_test();
 8001af6:	e7f9      	b.n	8001aec <Task2_func+0x8>

08001af8 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
 	pc_command_processing();
 8001b00:	f000 fff4 	bl	8002aec <pc_command_processing>
 	bt_command_processing();
 8001b04:	f001 f890 	bl	8002c28 <bt_command_processing>
    osDelay(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f007 fd01 	bl	8009510 <osDelay>
 	pc_command_processing();
 8001b0e:	e7f7      	b.n	8001b00 <Task3_func+0x8>

08001b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b22:	f001 f97d 	bl	8002e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM10)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d109      	bne.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b38:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b42:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40001000 	.word	0x40001000
 8001b50:	40014400 	.word	0x40014400
 8001b54:	20000dd8 	.word	0x20000dd8
 8001b58:	20000ddc 	.word	0x20000ddc

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>

08001b66 <set_rpm>:
//							   = 4612ms
//							   = 4.6초
// 60초 / 4.6(1회전시 소요시간 초) ==> 13회전
// 시계방향으로 1회전 <---> 반시계방향으로 1회전
void set_rpm(int rpm) // rpm 1~13
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
	delay_us(60000000/4096/rpm);
 8001b6e:	f643 1238 	movw	r2, #14648	; 0x3938
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f977 	bl	8000e6c <delay_us>
	// 최대 speed 기준(13) : delay_us(1126);
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <stepmotor_main_test>:
int idle = 1;
int forward = 0;
int backward = 0;

void stepmotor_main_test(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
#if 1
	//버튼 처리에 의한
//	while(1)
//	{
		if(idle)
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <stepmotor_main_test+0xd0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00e      	beq.n	8001bb2 <stepmotor_main_test+0x2a>
		{
			if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9a:	4830      	ldr	r0, [pc, #192]	; (8001c5c <stepmotor_main_test+0xd4>)
 8001b9c:	f7fe fcfa 	bl	8000594 <get_button>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <stepmotor_main_test+0x2a>
			{
				forward = 1;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <stepmotor_main_test+0xd8>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
				idle = 0;
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <stepmotor_main_test+0xd0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
				//backward = 0;
			}
		}
		if(forward)
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <stepmotor_main_test+0xd8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d023      	beq.n	8001c02 <stepmotor_main_test+0x7a>
		{
			stepmotor_drive(0);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f854 	bl	8001c68 <stepmotor_drive>
			set_rpm(13);
 8001bc0:	200d      	movs	r0, #13
 8001bc2:	f7ff ffd0 	bl	8001b66 <set_rpm>

			if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bcc:	4823      	ldr	r0, [pc, #140]	; (8001c5c <stepmotor_main_test+0xd4>)
 8001bce:	f7fe fce1 	bl	8000594 <get_button>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <stepmotor_main_test+0x5c>
			{
				backward = 1;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <stepmotor_main_test+0xdc>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
				forward = 0;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <stepmotor_main_test+0xd8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
			}
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bea:	481c      	ldr	r0, [pc, #112]	; (8001c5c <stepmotor_main_test+0xd4>)
 8001bec:	f7fe fcd2 	bl	8000594 <get_button>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <stepmotor_main_test+0x7a>
			{
				idle = 1;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <stepmotor_main_test+0xd0>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
				forward = 0;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <stepmotor_main_test+0xd8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
			}
		}
		if(backward)
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <stepmotor_main_test+0xdc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d023      	beq.n	8001c52 <stepmotor_main_test+0xca>
		{
			stepmotor_drive(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 f82c 	bl	8001c68 <stepmotor_drive>
			set_rpm(10);
 8001c10:	200a      	movs	r0, #10
 8001c12:	f7ff ffa8 	bl	8001b66 <set_rpm>

			if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <stepmotor_main_test+0xd4>)
 8001c1e:	f7fe fcb9 	bl	8000594 <get_button>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <stepmotor_main_test+0xac>
			{
				forward = 1;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <stepmotor_main_test+0xd8>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
				backward = 0;
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <stepmotor_main_test+0xdc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
			}
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3a:	4808      	ldr	r0, [pc, #32]	; (8001c5c <stepmotor_main_test+0xd4>)
 8001c3c:	f7fe fcaa 	bl	8000594 <get_button>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <stepmotor_main_test+0xca>
			{
				idle = 1;
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <stepmotor_main_test+0xd0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
				backward = 0;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <stepmotor_main_test+0xdc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
				set_rpm(13);	// rpm값 만큼 wait
			}
		}
//	}
#endif
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000013c 	.word	0x2000013c
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	20000df4 	.word	0x20000df4
 8001c64:	20000df8 	.word	0x20000df8

08001c68 <stepmotor_drive>:
//
// direction : 1 == 시계방향 회전
//			   2 ---> 반시계
//			   0 : idle
void stepmotor_drive(int direction)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	static int step = 0;	// static을 쓰면 전역변수처럼 동작
	switch(step){
 8001c70:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <stepmotor_drive+0x218>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b07      	cmp	r3, #7
 8001c76:	f200 80db 	bhi.w	8001e30 <stepmotor_drive+0x1c8>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <stepmotor_drive+0x18>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001ca1 	.word	0x08001ca1
 8001c84:	08001cd3 	.word	0x08001cd3
 8001c88:	08001d05 	.word	0x08001d05
 8001c8c:	08001d37 	.word	0x08001d37
 8001c90:	08001d69 	.word	0x08001d69
 8001c94:	08001d9b 	.word	0x08001d9b
 8001c98:	08001dcd 	.word	0x08001dcd
 8001c9c:	08001dff 	.word	0x08001dff
	case 0:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca6:	4877      	ldr	r0, [pc, #476]	; (8001e84 <stepmotor_drive+0x21c>)
 8001ca8:	f002 fbea 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb2:	4874      	ldr	r0, [pc, #464]	; (8001e84 <stepmotor_drive+0x21c>)
 8001cb4:	f002 fbe4 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbe:	4871      	ldr	r0, [pc, #452]	; (8001e84 <stepmotor_drive+0x21c>)
 8001cc0:	f002 fbde 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cca:	486e      	ldr	r0, [pc, #440]	; (8001e84 <stepmotor_drive+0x21c>)
 8001ccc:	f002 fbd8 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001cd0:	e0ae      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 1:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd8:	486a      	ldr	r0, [pc, #424]	; (8001e84 <stepmotor_drive+0x21c>)
 8001cda:	f002 fbd1 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce4:	4867      	ldr	r0, [pc, #412]	; (8001e84 <stepmotor_drive+0x21c>)
 8001ce6:	f002 fbcb 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf0:	4864      	ldr	r0, [pc, #400]	; (8001e84 <stepmotor_drive+0x21c>)
 8001cf2:	f002 fbc5 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfc:	4861      	ldr	r0, [pc, #388]	; (8001e84 <stepmotor_drive+0x21c>)
 8001cfe:	f002 fbbf 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001d02:	e095      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 2:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0a:	485e      	ldr	r0, [pc, #376]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d0c:	f002 fbb8 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	485b      	ldr	r0, [pc, #364]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d18:	f002 fbb2 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d22:	4858      	ldr	r0, [pc, #352]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d24:	f002 fbac 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2e:	4855      	ldr	r0, [pc, #340]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d30:	f002 fba6 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001d34:	e07c      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 3:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3c:	4851      	ldr	r0, [pc, #324]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d3e:	f002 fb9f 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	484e      	ldr	r0, [pc, #312]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d4a:	f002 fb99 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d54:	484b      	ldr	r0, [pc, #300]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d56:	f002 fb93 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d60:	4848      	ldr	r0, [pc, #288]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d62:	f002 fb8d 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001d66:	e063      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 4:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6e:	4845      	ldr	r0, [pc, #276]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d70:	f002 fb86 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7a:	4842      	ldr	r0, [pc, #264]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d7c:	f002 fb80 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	483f      	ldr	r0, [pc, #252]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d88:	f002 fb7a 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d92:	483c      	ldr	r0, [pc, #240]	; (8001e84 <stepmotor_drive+0x21c>)
 8001d94:	f002 fb74 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001d98:	e04a      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 5:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da0:	4838      	ldr	r0, [pc, #224]	; (8001e84 <stepmotor_drive+0x21c>)
 8001da2:	f002 fb6d 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dac:	4835      	ldr	r0, [pc, #212]	; (8001e84 <stepmotor_drive+0x21c>)
 8001dae:	f002 fb67 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db8:	4832      	ldr	r0, [pc, #200]	; (8001e84 <stepmotor_drive+0x21c>)
 8001dba:	f002 fb61 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc4:	482f      	ldr	r0, [pc, #188]	; (8001e84 <stepmotor_drive+0x21c>)
 8001dc6:	f002 fb5b 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001dca:	e031      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 6:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd2:	482c      	ldr	r0, [pc, #176]	; (8001e84 <stepmotor_drive+0x21c>)
 8001dd4:	f002 fb54 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dde:	4829      	ldr	r0, [pc, #164]	; (8001e84 <stepmotor_drive+0x21c>)
 8001de0:	f002 fb4e 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dea:	4826      	ldr	r0, [pc, #152]	; (8001e84 <stepmotor_drive+0x21c>)
 8001dec:	f002 fb48 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df6:	4823      	ldr	r0, [pc, #140]	; (8001e84 <stepmotor_drive+0x21c>)
 8001df8:	f002 fb42 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001dfc:	e018      	b.n	8001e30 <stepmotor_drive+0x1c8>
	case 7:
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e04:	481f      	ldr	r0, [pc, #124]	; (8001e84 <stepmotor_drive+0x21c>)
 8001e06:	f002 fb3b 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <stepmotor_drive+0x21c>)
 8001e12:	f002 fb35 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1c:	4819      	ldr	r0, [pc, #100]	; (8001e84 <stepmotor_drive+0x21c>)
 8001e1e:	f002 fb2f 	bl	8004480 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <stepmotor_drive+0x21c>)
 8001e2a:	f002 fb29 	bl	8004480 <HAL_GPIO_WritePin>
		break;
 8001e2e:	bf00      	nop
	}
	if(direction == 0)	// 정회전
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d110      	bne.n	8001e58 <stepmotor_drive+0x1f0>
	{
		step++;	// for(step = 0; step<8; step++)
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <stepmotor_drive+0x218>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <stepmotor_drive+0x218>)
 8001e3e:	6013      	str	r3, [r2, #0]
		step %= 8;	// 다음 진행할 step 준비
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <stepmotor_drive+0x218>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	425a      	negs	r2, r3
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	f002 0207 	and.w	r2, r2, #7
 8001e4e:	bf58      	it	pl
 8001e50:	4253      	negpl	r3, r2
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <stepmotor_drive+0x218>)
 8001e54:	6013      	str	r3, [r2, #0]
	else if(direction == 1)	// 역회전
	{
		step--;
		if(step<0) step=7;
	}
}
 8001e56:	e00e      	b.n	8001e76 <stepmotor_drive+0x20e>
	else if(direction == 1)	// 역회전
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10b      	bne.n	8001e76 <stepmotor_drive+0x20e>
		step--;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <stepmotor_drive+0x218>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <stepmotor_drive+0x218>)
 8001e66:	6013      	str	r3, [r2, #0]
		if(step<0) step=7;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <stepmotor_drive+0x218>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da02      	bge.n	8001e76 <stepmotor_drive+0x20e>
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <stepmotor_drive+0x218>)
 8001e72:	2207      	movs	r2, #7
 8001e74:	601a      	str	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000dfc 	.word	0x20000dfc
 8001e84:	40020c00 	.word	0x40020c00

08001e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_MspInit+0x54>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <HAL_MspInit+0x54>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x54>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_MspInit+0x54>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_MspInit+0x54>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_MspInit+0x54>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	210f      	movs	r1, #15
 8001eca:	f06f 0001 	mvn.w	r0, #1
 8001ece:	f001 fd2f 	bl	8003930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_ADC_MspInit+0x8c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12f      	bne.n	8001f62 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_ADC_MspInit+0x90>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_ADC_MspInit+0x90>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_ADC_MspInit+0x90>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_ADC_MspInit+0x90>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_ADC_MspInit+0x90>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_ADC_MspInit+0x90>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f3a:	2310      	movs	r3, #16
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <HAL_ADC_MspInit+0x94>)
 8001f4e:	f002 f8d3 	bl	80040f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2105      	movs	r1, #5
 8001f56:	2012      	movs	r0, #18
 8001f58:	f001 fcea 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f5c:	2012      	movs	r0, #18
 8001f5e:	f001 fd03 	bl	8003968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012000 	.word	0x40012000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a55      	ldr	r2, [pc, #340]	; (80020ec <HAL_ETH_MspInit+0x174>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	f040 80a4 	bne.w	80020e4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a4b      	ldr	r2, [pc, #300]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a44      	ldr	r2, [pc, #272]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a36      	ldr	r2, [pc, #216]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 800204e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_ETH_MspInit+0x178>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002060:	2332      	movs	r3, #50	; 0x32
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002070:	230b      	movs	r3, #11
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	4619      	mov	r1, r3
 800207a:	481e      	ldr	r0, [pc, #120]	; (80020f4 <HAL_ETH_MspInit+0x17c>)
 800207c:	f002 f83c 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002080:	2386      	movs	r3, #134	; 0x86
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002090:	230b      	movs	r3, #11
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4817      	ldr	r0, [pc, #92]	; (80020f8 <HAL_ETH_MspInit+0x180>)
 800209c:	f002 f82c 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b2:	230b      	movs	r3, #11
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	480f      	ldr	r0, [pc, #60]	; (80020fc <HAL_ETH_MspInit+0x184>)
 80020be:	f002 f81b 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80020c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d4:	230b      	movs	r3, #11
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_ETH_MspInit+0x188>)
 80020e0:	f002 f80a 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80020e4:	bf00      	nop
 80020e6:	3738      	adds	r7, #56	; 0x38
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40028000 	.word	0x40028000
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020400 	.word	0x40020400
 8002100:	40021800 	.word	0x40021800

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_I2C_MspInit+0x84>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12c      	bne.n	8002180 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_I2C_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_I2C_MspInit+0x88>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_I2C_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002148:	2312      	movs	r3, #18
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002154:	2304      	movs	r3, #4
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	480c      	ldr	r0, [pc, #48]	; (8002190 <HAL_I2C_MspInit+0x8c>)
 8002160:	f001 ffca 	bl	80040f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_I2C_MspInit+0x88>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_I2C_MspInit+0x88>)
 800216e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002172:	6413      	str	r3, [r2, #64]	; 0x40
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_I2C_MspInit+0x88>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40005400 	.word	0x40005400
 800218c:	40023800 	.word	0x40023800
 8002190:	40020400 	.word	0x40020400

08002194 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	2230      	movs	r2, #48	; 0x30
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00a fbb6 	bl	800c916 <memset>
  if(hrtc->Instance==RTC)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RTC_MspInit+0x4c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d111      	bne.n	80021d8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021b4:	2320      	movs	r3, #32
 80021b6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fc56 	bl	8005a74 <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021ce:	f7ff fcc5 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_RTC_MspInit+0x50>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021d8:	bf00      	nop
 80021da:	3738      	adds	r7, #56	; 0x38
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40002800 	.word	0x40002800
 80021e4:	42470e3c 	.word	0x42470e3c

080021e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d115      	bne.n	8002226 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_TIM_PWM_MspInit+0x48>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <HAL_TIM_PWM_MspInit+0x48>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_TIM_PWM_MspInit+0x48>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2105      	movs	r1, #5
 800221a:	201c      	movs	r0, #28
 800221c:	f001 fb88 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002220:	201c      	movs	r0, #28
 8002222:	f001 fba1 	bl	8003968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_TIM_IC_MspInit+0x94>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d133      	bne.n	80022be <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_TIM_IC_MspInit+0x98>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_TIM_IC_MspInit+0x98>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_TIM_IC_MspInit+0x98>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_TIM_IC_MspInit+0x98>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_TIM_IC_MspInit+0x98>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_TIM_IC_MspInit+0x98>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800228e:	2340      	movs	r3, #64	; 0x40
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800229e:	2302      	movs	r3, #2
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <HAL_TIM_IC_MspInit+0x9c>)
 80022aa:	f001 ff25 	bl	80040f8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2105      	movs	r1, #5
 80022b2:	201d      	movs	r0, #29
 80022b4:	f001 fb3c 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022b8:	201d      	movs	r0, #29
 80022ba:	f001 fb55 	bl	8003968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000

080022d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <HAL_TIM_Base_MspInit+0xf0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d116      	bne.n	8002314 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a36      	ldr	r2, [pc, #216]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2105      	movs	r1, #5
 8002306:	201e      	movs	r0, #30
 8002308:	f001 fb12 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800230c:	201e      	movs	r0, #30
 800230e:	f001 fb2b 	bl	8003968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002312:	e052      	b.n	80023ba <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2c      	ldr	r2, [pc, #176]	; (80023cc <HAL_TIM_Base_MspInit+0xf8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d116      	bne.n	800234c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	2032      	movs	r0, #50	; 0x32
 8002340:	f001 faf6 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002344:	2032      	movs	r0, #50	; 0x32
 8002346:	f001 fb0f 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 800234a:	e036      	b.n	80023ba <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <HAL_TIM_Base_MspInit+0xfc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d116      	bne.n	8002384 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2105      	movs	r1, #5
 8002376:	2019      	movs	r0, #25
 8002378:	f001 fada 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800237c:	2019      	movs	r0, #25
 800237e:	f001 faf3 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 8002382:	e01a      	b.n	80023ba <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_TIM_Base_MspInit+0x100>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d115      	bne.n	80023ba <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_TIM_Base_MspInit+0xf4>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2105      	movs	r1, #5
 80023ae:	201a      	movs	r0, #26
 80023b0:	f001 fabe 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023b4:	201a      	movs	r0, #26
 80023b6:	f001 fad7 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800

080023d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f8:	d11e      	bne.n	8002438 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002416:	2320      	movs	r3, #32
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002426:	2301      	movs	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4816      	ldr	r0, [pc, #88]	; (800248c <HAL_TIM_MspPostInit+0xb4>)
 8002432:	f001 fe61 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002436:	e022      	b.n	800247e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_TIM_MspPostInit+0xb8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d11d      	bne.n	800247e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_TIM_MspPostInit+0xb0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800245e:	2308      	movs	r3, #8
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800246e:	2302      	movs	r3, #2
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <HAL_TIM_MspPostInit+0xb4>)
 800247a:	f001 fe3d 	bl	80040f8 <HAL_GPIO_Init>
}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000
 8002490:	40000c00 	.word	0x40000c00

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_UART_MspInit+0x108>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d135      	bne.n	8002522 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002500:	2307      	movs	r3, #7
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4826      	ldr	r0, [pc, #152]	; (80025a4 <HAL_UART_MspInit+0x110>)
 800250c:	f001 fdf4 	bl	80040f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2105      	movs	r1, #5
 8002514:	2027      	movs	r0, #39	; 0x27
 8002516:	f001 fa0b 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800251a:	2027      	movs	r0, #39	; 0x27
 800251c:	f001 fa24 	bl	8003968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002520:	e038      	b.n	8002594 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_UART_MspInit+0x114>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d133      	bne.n	8002594 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6453      	str	r3, [r2, #68]	; 0x44
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_UART_MspInit+0x10c>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002564:	23c0      	movs	r3, #192	; 0xc0
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002574:	2308      	movs	r3, #8
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	480b      	ldr	r0, [pc, #44]	; (80025ac <HAL_UART_MspInit+0x118>)
 8002580:	f001 fdba 	bl	80040f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2105      	movs	r1, #5
 8002588:	2047      	movs	r0, #71	; 0x47
 800258a:	f001 f9d1 	bl	8003930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800258e:	2047      	movs	r0, #71	; 0x47
 8002590:	f001 f9ea 	bl	8003968 <HAL_NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40004800 	.word	0x40004800
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40011400 	.word	0x40011400
 80025ac:	40020800 	.word	0x40020800

080025b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d0:	d13f      	bne.n	8002652 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_PCD_MspInit+0xac>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a20      	ldr	r2, [pc, #128]	; (800265c <HAL_PCD_MspInit+0xac>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_PCD_MspInit+0xac>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002600:	230a      	movs	r3, #10
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4815      	ldr	r0, [pc, #84]	; (8002660 <HAL_PCD_MspInit+0xb0>)
 800260c:	f001 fd74 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	480e      	ldr	r0, [pc, #56]	; (8002660 <HAL_PCD_MspInit+0xb0>)
 8002626:	f001 fd67 	bl	80040f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_PCD_MspInit+0xac>)
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_PCD_MspInit+0xac>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002634:	6353      	str	r3, [r2, #52]	; 0x34
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_PCD_MspInit+0xac>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_PCD_MspInit+0xac>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_PCD_MspInit+0xac>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000

08002664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08e      	sub	sp, #56	; 0x38
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_InitTick+0xe4>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	4a32      	ldr	r2, [pc, #200]	; (8002748 <HAL_InitTick+0xe4>)
 800267e:	f043 0310 	orr.w	r3, r3, #16
 8002682:	6413      	str	r3, [r2, #64]	; 0x40
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_InitTick+0xe4>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002690:	f107 0210 	add.w	r2, r7, #16
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f003 f9b8 	bl	8005a10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026aa:	f003 f989 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 80026ae:	6378      	str	r0, [r7, #52]	; 0x34
 80026b0:	e004      	b.n	80026bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026b2:	f003 f985 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 80026b6:	4603      	mov	r3, r0
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026be:	4a23      	ldr	r2, [pc, #140]	; (800274c <HAL_InitTick+0xe8>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	3b01      	subs	r3, #1
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_InitTick+0xec>)
 80026cc:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_InitTick+0xf0>)
 80026ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_InitTick+0xec>)
 80026d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_InitTick+0xec>)
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_InitTick+0xec>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_InitTick+0xec>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_InitTick+0xec>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80026f0:	4817      	ldr	r0, [pc, #92]	; (8002750 <HAL_InitTick+0xec>)
 80026f2:	f003 fdb4 	bl	800625e <HAL_TIM_Base_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80026fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11b      	bne.n	800273c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002704:	4812      	ldr	r0, [pc, #72]	; (8002750 <HAL_InitTick+0xec>)
 8002706:	f003 fdf9 	bl	80062fc <HAL_TIM_Base_Start_IT>
 800270a:	4603      	mov	r3, r0
 800270c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002718:	2036      	movs	r0, #54	; 0x36
 800271a:	f001 f925 	bl	8003968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d808      	bhi.n	8002736 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	2036      	movs	r0, #54	; 0x36
 800272a:	f001 f901 	bl	8003930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_InitTick+0xf4>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e002      	b.n	800273c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800273c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002740:	4618      	mov	r0, r3
 8002742:	3738      	adds	r7, #56	; 0x38
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	431bde83 	.word	0x431bde83
 8002750:	20000e00 	.word	0x20000e00
 8002754:	40001000 	.word	0x40001000
 8002758:	20000144 	.word	0x20000144

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <NMI_Handler+0x4>

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 800278c:	2001      	movs	r0, #1
 800278e:	f001 feab 	bl	80044e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}

08002796 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 800279a:	2004      	movs	r0, #4
 800279c:	f001 fea4 	bl	80044e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 80027a8:	2008      	movs	r0, #8
 80027aa:	f001 fe9d 	bl	80044e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <ADC_IRQHandler+0x10>)
 80027ba:	f000 fc97 	bl	80030ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000510 	.word	0x20000510

080027c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027ce:	f004 f9ab 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000079c 	.word	0x2000079c

080027dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80027e2:	f004 f9a1 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200007e4 	.word	0x200007e4

080027f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <TIM2_IRQHandler+0x10>)
 80027f6:	f004 f997 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000067c 	.word	0x2000067c

08002804 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <TIM3_IRQHandler+0x10>)
 800280a:	f004 f98d 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200006c4 	.word	0x200006c4

08002818 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <TIM4_IRQHandler+0x10>)
 800281e:	f004 f983 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2000070c 	.word	0x2000070c

0800282c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <USART3_IRQHandler+0x10>)
 8002832:	f005 fae3 	bl	8007dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000082c 	.word	0x2000082c

08002840 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <TIM5_IRQHandler+0x10>)
 8002846:	f004 f96f 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000754 	.word	0x20000754

08002854 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002858:	4802      	ldr	r0, [pc, #8]	; (8002864 <TIM6_DAC_IRQHandler+0x10>)
 800285a:	f004 f965 	bl	8006b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000e00 	.word	0x20000e00

08002868 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <USART6_IRQHandler+0x10>)
 800286e:	f005 fac5 	bl	8007dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000870 	.word	0x20000870

0800287c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e00a      	b.n	80028a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800288e:	f3af 8000 	nop.w
 8002892:	4601      	mov	r1, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbf0      	blt.n	800288e <_read+0x12>
  }

  return len;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e009      	b.n	80028dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	60ba      	str	r2, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fa9b 	bl	8000e0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbf1      	blt.n	80028c8 <_write+0x12>
  }
  return len;
 80028e4:	687b      	ldr	r3, [r7, #4]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_close>:

int _close(int file)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002916:	605a      	str	r2, [r3, #4]
  return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_isatty>:

int _isatty(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <_sbrk+0x5c>)
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <_sbrk+0x60>)
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <_sbrk+0x64>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <_sbrk+0x68>)
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d207      	bcs.n	8002998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002988:	f009 fe94 	bl	800c6b4 <__errno>
 800298c:	4603      	mov	r3, r0
 800298e:	220c      	movs	r2, #12
 8002990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e009      	b.n	80029ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <_sbrk+0x64>)
 80029a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20030000 	.word	0x20030000
 80029b8:	00000400 	.word	0x00000400
 80029bc:	20000e48 	.word	0x20000e48
 80029c0:	200058e0 	.word	0x200058e0

080029c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <SystemInit+0x20>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <SystemInit+0x20>)
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a32      	ldr	r2, [pc, #200]	; (8002abc <HAL_UART_RxCpltCallback+0xd4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d12c      	bne.n	8002a52 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b27      	cmp	r3, #39	; 0x27
 80029fe:	dc1d      	bgt.n	8002a3c <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_UART_RxCpltCallback+0xdc>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b0a      	cmp	r3, #10
 8002a06:	d003      	beq.n	8002a10 <HAL_UART_RxCpltCallback+0x28>
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_UART_RxCpltCallback+0xdc>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b0d      	cmp	r3, #13
 8002a0e:	d10b      	bne.n	8002a28 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <HAL_UART_RxCpltCallback+0xe0>)
 8002a16:	2100      	movs	r1, #0
 8002a18:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <HAL_UART_RxCpltCallback+0xe4>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e00f      	b.n	8002a48 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	4924      	ldr	r1, [pc, #144]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 8002a30:	600a      	str	r2, [r1, #0]
 8002a32:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_UART_RxCpltCallback+0xdc>)
 8002a34:	7811      	ldrb	r1, [r2, #0]
 8002a36:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <HAL_UART_RxCpltCallback+0xe0>)
 8002a38:	54d1      	strb	r1, [r2, r3]
 8002a3a:	e005      	b.n	8002a48 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 8002a42:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <HAL_UART_RxCpltCallback+0xe8>)
 8002a44:	f00a f88a 	bl	800cb5c <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	491e      	ldr	r1, [pc, #120]	; (8002ac4 <HAL_UART_RxCpltCallback+0xdc>)
 8002a4c:	481b      	ldr	r0, [pc, #108]	; (8002abc <HAL_UART_RxCpltCallback+0xd4>)
 8002a4e:	f005 f9a4 	bl	8007d9a <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_UART_RxCpltCallback+0xec>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_UART_RxCpltCallback+0xf0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b27      	cmp	r3, #39	; 0x27
 8002a60:	dc1d      	bgt.n	8002a9e <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 8002a62:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_UART_RxCpltCallback+0xf4>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b0a      	cmp	r3, #10
 8002a68:	d003      	beq.n	8002a72 <HAL_UART_RxCpltCallback+0x8a>
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_UART_RxCpltCallback+0xf4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b0d      	cmp	r3, #13
 8002a70:	d10b      	bne.n	8002a8a <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_UART_RxCpltCallback+0xd8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <HAL_UART_RxCpltCallback+0xf8>)
 8002a78:	2100      	movs	r1, #0
 8002a7a:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_UART_RxCpltCallback+0xfc>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_UART_RxCpltCallback+0xf0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e00f      	b.n	8002aaa <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_UART_RxCpltCallback+0xf0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4911      	ldr	r1, [pc, #68]	; (8002ad8 <HAL_UART_RxCpltCallback+0xf0>)
 8002a92:	600a      	str	r2, [r1, #0]
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_UART_RxCpltCallback+0xf4>)
 8002a96:	7811      	ldrb	r1, [r2, #0]
 8002a98:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_UART_RxCpltCallback+0xf8>)
 8002a9a:	54d1      	strb	r1, [r2, r3]
 8002a9c:	e005      	b.n	8002aaa <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_UART_RxCpltCallback+0xf0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <HAL_UART_RxCpltCallback+0x100>)
 8002aa6:	f00a f859 	bl	800cb5c <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	490b      	ldr	r1, [pc, #44]	; (8002adc <HAL_UART_RxCpltCallback+0xf4>)
 8002aae:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <HAL_UART_RxCpltCallback+0xec>)
 8002ab0:	f005 f973 	bl	8007d9a <HAL_UART_Receive_IT>
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	2000082c 	.word	0x2000082c
 8002ac0:	20000e74 	.word	0x20000e74
 8002ac4:	20000dd4 	.word	0x20000dd4
 8002ac8:	20000e4c 	.word	0x20000e4c
 8002acc:	20000e78 	.word	0x20000e78
 8002ad0:	0800dd74 	.word	0x0800dd74
 8002ad4:	20000870 	.word	0x20000870
 8002ad8:	20000ea4 	.word	0x20000ea4
 8002adc:	20000dd5 	.word	0x20000dd5
 8002ae0:	20000e7c 	.word	0x20000e7c
 8002ae4:	20000ea8 	.word	0x20000ea8
 8002ae8:	0800dd8c 	.word	0x0800dd8c

08002aec <pc_command_processing>:

void pc_command_processing(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002af0:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <pc_command_processing+0x104>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d079      	beq.n	8002bec <pc_command_processing+0x100>
	{
		newline_detect_flag=0;
 8002af8:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <pc_command_processing+0x104>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 8002afe:	483d      	ldr	r0, [pc, #244]	; (8002bf4 <pc_command_processing+0x108>)
 8002b00:	f00a f82c 	bl	800cb5c <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b04:	220a      	movs	r2, #10
 8002b06:	493c      	ldr	r1, [pc, #240]	; (8002bf8 <pc_command_processing+0x10c>)
 8002b08:	483a      	ldr	r0, [pc, #232]	; (8002bf4 <pc_command_processing+0x108>)
 8002b0a:	f00a f90c 	bl	800cd26 <strncmp>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <pc_command_processing+0x2e>
		{
			led_all_on();
 8002b14:	f7fe f962 	bl	8000ddc <led_all_on>
			return;
 8002b18:	e068      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b1a:	220b      	movs	r2, #11
 8002b1c:	4937      	ldr	r1, [pc, #220]	; (8002bfc <pc_command_processing+0x110>)
 8002b1e:	4835      	ldr	r0, [pc, #212]	; (8002bf4 <pc_command_processing+0x108>)
 8002b20:	f00a f901 	bl	800cd26 <strncmp>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <pc_command_processing+0x44>
		{
			led_all_off();
 8002b2a:	f7fe f963 	bl	8000df4 <led_all_off>
			return;
 8002b2e:	e05d      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b30:	220b      	movs	r2, #11
 8002b32:	4933      	ldr	r1, [pc, #204]	; (8002c00 <pc_command_processing+0x114>)
 8002b34:	482f      	ldr	r0, [pc, #188]	; (8002bf4 <pc_command_processing+0x108>)
 8002b36:	f00a f8f6 	bl	800cd26 <strncmp>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <pc_command_processing+0x5a>
		{
			led_on_down();
 8002b40:	f7fe f91c 	bl	8000d7c <led_on_down>
			return;
 8002b44:	e052      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b46:	2209      	movs	r2, #9
 8002b48:	492e      	ldr	r1, [pc, #184]	; (8002c04 <pc_command_processing+0x118>)
 8002b4a:	482a      	ldr	r0, [pc, #168]	; (8002bf4 <pc_command_processing+0x108>)
 8002b4c:	f00a f8eb 	bl	800cd26 <strncmp>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <pc_command_processing+0x70>
		{
			led_on_up();
 8002b56:	f7fe f8e1 	bl	8000d1c <led_on_up>
			return;
 8002b5a:	e047      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b5c:	2209      	movs	r2, #9
 8002b5e:	492a      	ldr	r1, [pc, #168]	; (8002c08 <pc_command_processing+0x11c>)
 8002b60:	4824      	ldr	r0, [pc, #144]	; (8002bf4 <pc_command_processing+0x108>)
 8002b62:	f00a f8e0 	bl	800cd26 <strncmp>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <pc_command_processing+0x86>
		{
			flower_on();
 8002b6c:	f7fe f836 	bl	8000bdc <flower_on>
			return;
 8002b70:	e03c      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b72:	220a      	movs	r2, #10
 8002b74:	4925      	ldr	r1, [pc, #148]	; (8002c0c <pc_command_processing+0x120>)
 8002b76:	481f      	ldr	r0, [pc, #124]	; (8002bf4 <pc_command_processing+0x108>)
 8002b78:	f00a f8d5 	bl	800cd26 <strncmp>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <pc_command_processing+0x9c>
		{
			flower_off();
 8002b82:	f7fe f85b 	bl	8000c3c <flower_off>
			return;
 8002b86:	e031      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b88:	220d      	movs	r2, #13
 8002b8a:	4921      	ldr	r1, [pc, #132]	; (8002c10 <pc_command_processing+0x124>)
 8002b8c:	4819      	ldr	r0, [pc, #100]	; (8002bf4 <pc_command_processing+0x108>)
 8002b8e:	f00a f8ca 	bl	800cd26 <strncmp>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <pc_command_processing+0xb2>
		{
			led_keepon_up();
 8002b98:	f7fe f880 	bl	8000c9c <led_keepon_up>
			return;
 8002b9c:	e026      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	491c      	ldr	r1, [pc, #112]	; (8002c14 <pc_command_processing+0x128>)
 8002ba2:	4814      	ldr	r0, [pc, #80]	; (8002bf4 <pc_command_processing+0x108>)
 8002ba4:	f00a f8bf 	bl	800cd26 <strncmp>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <pc_command_processing+0xc8>
		{
			led_keepon_down();
 8002bae:	f7fe f895 	bl	8000cdc <led_keepon_down>
			return;
 8002bb2:	e01b      	b.n	8002bec <pc_command_processing+0x100>
		}
		//dht11time150
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002bb4:	2209      	movs	r2, #9
 8002bb6:	4918      	ldr	r1, [pc, #96]	; (8002c18 <pc_command_processing+0x12c>)
 8002bb8:	480e      	ldr	r0, [pc, #56]	; (8002bf4 <pc_command_processing+0x108>)
 8002bba:	f00a f8b4 	bl	800cd26 <strncmp>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff+9);
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <pc_command_processing+0x130>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f009 fd70 	bl	800c6ac <atoi>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <pc_command_processing+0x134>)
 8002bd0:	6013      	str	r3, [r2, #0]
			return;
 8002bd2:	e00b      	b.n	8002bec <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	4913      	ldr	r1, [pc, #76]	; (8002c24 <pc_command_processing+0x138>)
 8002bd8:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <pc_command_processing+0x108>)
 8002bda:	f00a f8a4 	bl	800cd26 <strncmp>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <pc_command_processing+0x100>
		{
			set_rtc(rx_buff);
 8002be4:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <pc_command_processing+0x108>)
 8002be6:	f7fd ff57 	bl	8000a98 <set_rtc>
			return;
 8002bea:	bf00      	nop
		}

	}
}
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000e78 	.word	0x20000e78
 8002bf4:	20000e4c 	.word	0x20000e4c
 8002bf8:	0800dda8 	.word	0x0800dda8
 8002bfc:	0800ddb4 	.word	0x0800ddb4
 8002c00:	0800ddc0 	.word	0x0800ddc0
 8002c04:	0800ddcc 	.word	0x0800ddcc
 8002c08:	0800ddd8 	.word	0x0800ddd8
 8002c0c:	0800dde4 	.word	0x0800dde4
 8002c10:	0800ddf0 	.word	0x0800ddf0
 8002c14:	0800de00 	.word	0x0800de00
 8002c18:	0800de10 	.word	0x0800de10
 8002c1c:	20000e55 	.word	0x20000e55
 8002c20:	20000000 	.word	0x20000000
 8002c24:	0800de1c 	.word	0x0800de1c

08002c28 <bt_command_processing>:

void bt_command_processing(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8002c2c:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <bt_command_processing+0xcc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05d      	beq.n	8002cf0 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 8002c34:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <bt_command_processing+0xcc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8002c3a:	482f      	ldr	r0, [pc, #188]	; (8002cf8 <bt_command_processing+0xd0>)
 8002c3c:	f009 ff8e 	bl	800cb5c <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002c40:	220a      	movs	r2, #10
 8002c42:	492e      	ldr	r1, [pc, #184]	; (8002cfc <bt_command_processing+0xd4>)
 8002c44:	482c      	ldr	r0, [pc, #176]	; (8002cf8 <bt_command_processing+0xd0>)
 8002c46:	f00a f86e 	bl	800cd26 <strncmp>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <bt_command_processing+0x2e>
		{
			led_all_on();
 8002c50:	f7fe f8c4 	bl	8000ddc <led_all_on>
			return;
 8002c54:	e04c      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002c56:	220b      	movs	r2, #11
 8002c58:	4929      	ldr	r1, [pc, #164]	; (8002d00 <bt_command_processing+0xd8>)
 8002c5a:	4827      	ldr	r0, [pc, #156]	; (8002cf8 <bt_command_processing+0xd0>)
 8002c5c:	f00a f863 	bl	800cd26 <strncmp>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <bt_command_processing+0x44>
		{
			led_all_off();
 8002c66:	f7fe f8c5 	bl	8000df4 <led_all_off>
			return;
 8002c6a:	e041      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002c6c:	220b      	movs	r2, #11
 8002c6e:	4925      	ldr	r1, [pc, #148]	; (8002d04 <bt_command_processing+0xdc>)
 8002c70:	4821      	ldr	r0, [pc, #132]	; (8002cf8 <bt_command_processing+0xd0>)
 8002c72:	f00a f858 	bl	800cd26 <strncmp>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <bt_command_processing+0x5a>
		{
			led_on_down();
 8002c7c:	f7fe f87e 	bl	8000d7c <led_on_down>
			return;
 8002c80:	e036      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002c82:	2209      	movs	r2, #9
 8002c84:	4920      	ldr	r1, [pc, #128]	; (8002d08 <bt_command_processing+0xe0>)
 8002c86:	481c      	ldr	r0, [pc, #112]	; (8002cf8 <bt_command_processing+0xd0>)
 8002c88:	f00a f84d 	bl	800cd26 <strncmp>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <bt_command_processing+0x70>
		{
			led_on_up();
 8002c92:	f7fe f843 	bl	8000d1c <led_on_up>
			return;
 8002c96:	e02b      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002c98:	2209      	movs	r2, #9
 8002c9a:	491c      	ldr	r1, [pc, #112]	; (8002d0c <bt_command_processing+0xe4>)
 8002c9c:	4816      	ldr	r0, [pc, #88]	; (8002cf8 <bt_command_processing+0xd0>)
 8002c9e:	f00a f842 	bl	800cd26 <strncmp>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <bt_command_processing+0x86>
		{
			flower_on();
 8002ca8:	f7fd ff98 	bl	8000bdc <flower_on>
			return;
 8002cac:	e020      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002cae:	220a      	movs	r2, #10
 8002cb0:	4917      	ldr	r1, [pc, #92]	; (8002d10 <bt_command_processing+0xe8>)
 8002cb2:	4811      	ldr	r0, [pc, #68]	; (8002cf8 <bt_command_processing+0xd0>)
 8002cb4:	f00a f837 	bl	800cd26 <strncmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <bt_command_processing+0x9c>
		{
			flower_off();
 8002cbe:	f7fd ffbd 	bl	8000c3c <flower_off>
			return;
 8002cc2:	e015      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002cc4:	220d      	movs	r2, #13
 8002cc6:	4913      	ldr	r1, [pc, #76]	; (8002d14 <bt_command_processing+0xec>)
 8002cc8:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <bt_command_processing+0xd0>)
 8002cca:	f00a f82c 	bl	800cd26 <strncmp>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <bt_command_processing+0xb2>
		{
			led_keepon_up();
 8002cd4:	f7fd ffe2 	bl	8000c9c <led_keepon_up>
			return;
 8002cd8:	e00a      	b.n	8002cf0 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8002cda:	220f      	movs	r2, #15
 8002cdc:	490e      	ldr	r1, [pc, #56]	; (8002d18 <bt_command_processing+0xf0>)
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <bt_command_processing+0xd0>)
 8002ce0:	f00a f821 	bl	800cd26 <strncmp>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 8002cea:	f7fd fff7 	bl	8000cdc <led_keepon_down>
			return;
 8002cee:	bf00      	nop
		}
	}
}
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000ea8 	.word	0x20000ea8
 8002cf8:	20000e7c 	.word	0x20000e7c
 8002cfc:	0800dda8 	.word	0x0800dda8
 8002d00:	0800ddb4 	.word	0x0800ddb4
 8002d04:	0800ddc0 	.word	0x0800ddc0
 8002d08:	0800ddcc 	.word	0x0800ddcc
 8002d0c:	0800ddd8 	.word	0x0800ddd8
 8002d10:	0800dde4 	.word	0x0800dde4
 8002d14:	0800ddf0 	.word	0x0800ddf0
 8002d18:	0800de00 	.word	0x0800de00

08002d1c <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d11f      	bne.n	8002d6e <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d107      	bne.n	8002d48 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002d46:	e012      	b.n	8002d6e <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10d      	bne.n	8002d6e <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_TIM_IC_CaptureCallback+0x60>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002d58:	2100      	movs	r1, #0
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f004 fa12 	bl	8007184 <HAL_TIM_ReadCapturedValue>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002d66:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	20000eb4 	.word	0x20000eb4
 8002d80:	20000eac 	.word	0x20000eac
 8002d84:	20000eb0 	.word	0x20000eb0

08002d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d8c:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d8e:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d90:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d94:	e002      	b.n	8002d9c <LoopCopyDataInit>

08002d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9a:	3304      	adds	r3, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da0:	d3f9      	bcc.n	8002d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002da4:	4c0b      	ldr	r4, [pc, #44]	; (8002dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da8:	e001      	b.n	8002dae <LoopFillZerobss>

08002daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dac:	3204      	adds	r2, #4

08002dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db0:	d3fb      	bcc.n	8002daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002db2:	f7ff fe07 	bl	80029c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f009 fd79 	bl	800c8ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dba:	f7fe f89f 	bl	8000efc <main>
  bx  lr    
 8002dbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002dc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc8:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002dcc:	0800e09c 	.word	0x0800e09c
  ldr r2, =_sbss
 8002dd0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002dd4:	200058dc 	.word	0x200058dc

08002dd8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <CAN1_RX0_IRQHandler>
	...

08002ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_Init+0x40>)
 8002de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <HAL_Init+0x40>)
 8002df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_Init+0x40>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e04:	2003      	movs	r0, #3
 8002e06:	f000 fd88 	bl	800391a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e0a:	200f      	movs	r0, #15
 8002e0c:	f7ff fc2a 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e10:	f7ff f83a 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000148 	.word	0x20000148
 8002e44:	20000eb8 	.word	0x20000eb8

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000eb8 	.word	0x20000eb8

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000148 	.word	0x20000148

08002ea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e033      	b.n	8002f26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f80a 	bl	8001ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eee:	f023 0302 	bic.w	r3, r3, #2
 8002ef2:	f043 0202 	orr.w	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fb5a 	bl	80035b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
 8002f16:	e001      	b.n	8002f1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start_IT+0x1a>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0bd      	b.n	80030c6 <HAL_ADC_Start_IT+0x196>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d018      	beq.n	8002f92 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f70:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <HAL_ADC_Start_IT+0x1a4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_ADC_Start_IT+0x1a8>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9a      	lsrs	r2, r3, #18
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 8085 	bne.w	80030ac <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f023 0206 	bic.w	r2, r3, #6
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
 8002fee:	e002      	b.n	8002ff6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <HAL_ADC_Start_IT+0x1ac>)
 8003000:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800300a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800301a:	f043 0320 	orr.w	r3, r3, #32
 800301e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2b00      	cmp	r3, #0
 800302a:	d12a      	bne.n	8003082 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <HAL_ADC_Start_IT+0x1b0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d015      	beq.n	8003062 <HAL_ADC_Start_IT+0x132>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <HAL_ADC_Start_IT+0x1b4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d105      	bne.n	800304c <HAL_ADC_Start_IT+0x11c>
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_ADC_Start_IT+0x1ac>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <HAL_ADC_Start_IT+0x1b8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d136      	bne.n	80030c4 <HAL_ADC_Start_IT+0x194>
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_ADC_Start_IT+0x1ac>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d130      	bne.n	80030c4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d129      	bne.n	80030c4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e020      	b.n	80030c4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_ADC_Start_IT+0x1b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d11b      	bne.n	80030c4 <HAL_ADC_Start_IT+0x194>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d114      	bne.n	80030c4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	e00b      	b.n	80030c4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000140 	.word	0x20000140
 80030d8:	431bde83 	.word	0x431bde83
 80030dc:	40012300 	.word	0x40012300
 80030e0:	40012000 	.word	0x40012000
 80030e4:	40012100 	.word	0x40012100
 80030e8:	40012200 	.word	0x40012200

080030ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d049      	beq.n	80031b6 <HAL_ADC_IRQHandler+0xca>
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d046      	beq.n	80031b6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12b      	bne.n	80031a6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	d127      	bne.n	80031a6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800316e:	2b00      	cmp	r3, #0
 8003170:	d119      	bne.n	80031a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0220 	bic.w	r2, r2, #32
 8003180:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fe42 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0212 	mvn.w	r2, #18
 80031b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d057      	beq.n	800327c <HAL_ADC_IRQHandler+0x190>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d054      	beq.n	800327c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d139      	bne.n	800326c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12b      	bne.n	800326c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d124      	bne.n	800326c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11d      	bne.n	800326c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003234:	2b00      	cmp	r3, #0
 8003236:	d119      	bne.n	800326c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003246:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fa9d 	bl	80037ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 020c 	mvn.w	r2, #12
 800327a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d017      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x1d6>
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d014      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d10d      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f837 	bl	8003326 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0201 	mvn.w	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_ADC_IRQHandler+0x218>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0220 	mvn.w	r2, #32
 80032f2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f820 	bl	800333a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0220 	mvn.w	r2, #32
 8003302:	601a      	str	r2, [r3, #0]
  }
}
 8003304:	bf00      	nop
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1c>
 8003368:	2302      	movs	r3, #2
 800336a:	e113      	b.n	8003594 <HAL_ADC_ConfigChannel+0x244>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b09      	cmp	r3, #9
 800337a:	d925      	bls.n	80033c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	3b1e      	subs	r3, #30
 8003392:	2207      	movs	r2, #7
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4403      	add	r3, r0
 80033ba:	3b1e      	subs	r3, #30
 80033bc:	409a      	lsls	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e022      	b.n	800340e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6919      	ldr	r1, [r3, #16]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	2207      	movs	r2, #7
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	400a      	ands	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4403      	add	r3, r0
 8003404:	409a      	lsls	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d824      	bhi.n	8003460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b05      	subs	r3, #5
 8003428:	221f      	movs	r2, #31
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	400a      	ands	r2, r1
 8003436:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	3b05      	subs	r3, #5
 8003452:	fa00 f203 	lsl.w	r2, r0, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	635a      	str	r2, [r3, #52]	; 0x34
 800345e:	e04c      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d824      	bhi.n	80034b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b23      	subs	r3, #35	; 0x23
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43da      	mvns	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3b23      	subs	r3, #35	; 0x23
 80034a4:	fa00 f203 	lsl.w	r2, r0, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
 80034b0:	e023      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b41      	subs	r3, #65	; 0x41
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b41      	subs	r3, #65	; 0x41
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_ADC_ConfigChannel+0x250>)
 80034fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a28      	ldr	r2, [pc, #160]	; (80035a4 <HAL_ADC_ConfigChannel+0x254>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10f      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d8>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b12      	cmp	r3, #18
 800350e:	d10b      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_ADC_ConfigChannel+0x254>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12b      	bne.n	800358a <HAL_ADC_ConfigChannel+0x23a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_ADC_ConfigChannel+0x258>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x1f4>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b11      	cmp	r3, #17
 8003542:	d122      	bne.n	800358a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_ADC_ConfigChannel+0x258>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d111      	bne.n	800358a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_ADC_ConfigChannel+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <HAL_ADC_ConfigChannel+0x260>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	0c9a      	lsrs	r2, r3, #18
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800357c:	e002      	b.n	8003584 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3b01      	subs	r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f9      	bne.n	800357e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40012300 	.word	0x40012300
 80035a4:	40012000 	.word	0x40012000
 80035a8:	10000012 	.word	0x10000012
 80035ac:	20000140 	.word	0x20000140
 80035b0:	431bde83 	.word	0x431bde83

080035b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035bc:	4b79      	ldr	r3, [pc, #484]	; (80037a4 <ADC_Init+0x1f0>)
 80035be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800360c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <ADC_Init+0x1f4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800365a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6899      	ldr	r1, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800367c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6899      	ldr	r1, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e00f      	b.n	80036b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0202 	bic.w	r2, r2, #2
 80036c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6899      	ldr	r1, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7e1b      	ldrb	r3, [r3, #24]
 80036cc:	005a      	lsls	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	3b01      	subs	r3, #1
 800370c:	035a      	lsls	r2, r3, #13
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	e007      	b.n	8003728 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	3b01      	subs	r3, #1
 8003744:	051a      	lsls	r2, r3, #20
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800375c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800376a:	025a      	lsls	r2, r3, #9
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	029a      	lsls	r2, r3, #10
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40012300 	.word	0x40012300
 80037a8:	0f000001 	.word	0x0f000001

080037ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	; (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	; (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff4c 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003942:	f7ff ff61 	bl	8003808 <__NVIC_GetPriorityGrouping>
 8003946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f7ff ffb1 	bl	80038b4 <NVIC_EncodePriority>
 8003952:	4602      	mov	r2, r0
 8003954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff80 	bl	8003860 <__NVIC_SetPriority>
}
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff54 	bl	8003824 <__NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003992:	f7ff fa59 	bl	8002e48 <HAL_GetTick>
 8003996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d008      	beq.n	80039b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e052      	b.n	8003a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0216 	bic.w	r2, r2, #22
 80039c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_DMA_Abort+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0208 	bic.w	r2, r2, #8
 80039f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a06:	e013      	b.n	8003a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a08:	f7ff fa1e 	bl	8002e48 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d90c      	bls.n	8003a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e015      	b.n	8003a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e4      	bne.n	8003a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	223f      	movs	r2, #63	; 0x3f
 8003a44:	409a      	lsls	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d004      	beq.n	8003a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00c      	b.n	8003a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2205      	movs	r2, #5
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06c      	b.n	8003b94 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2223      	movs	r2, #35	; 0x23
 8003ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fe fa53 	bl	8001f78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <HAL_ETH_Init+0xf4>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_ETH_Init+0xf4>)
 8003adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae2:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_ETH_Init+0xf4>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003aee:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_ETH_Init+0xf8>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <HAL_ETH_Init+0xf8>)
 8003af4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003af8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_ETH_Init+0xf8>)
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4927      	ldr	r1, [pc, #156]	; (8003ba0 <HAL_ETH_Init+0xf8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_ETH_Init+0xf8>)
 8003b0a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b24:	f7ff f990 	bl	8002e48 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b2a:	e011      	b.n	8003b50 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b2c:	f7ff f98c 	bl	8002e48 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b3a:	d909      	bls.n	8003b50 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	22e0      	movs	r2, #224	; 0xe0
 8003b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e021      	b.n	8003b94 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e4      	bne.n	8003b2c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f958 	bl	8003e18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f9ff 	bl	8003f6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa55 	bl	800401e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9bd 	bl	8003efc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40013800 	.word	0x40013800

08003ba4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4b51      	ldr	r3, [pc, #324]	; (8003d00 <ETH_SetMACConfig+0x15c>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	7c1b      	ldrb	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <ETH_SetMACConfig+0x28>
 8003bc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003bca:	e000      	b.n	8003bce <ETH_SetMACConfig+0x2a>
 8003bcc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	7c5b      	ldrb	r3, [r3, #17]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <ETH_SetMACConfig+0x38>
 8003bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bda:	e000      	b.n	8003bde <ETH_SetMACConfig+0x3a>
 8003bdc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bde:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003be4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	7fdb      	ldrb	r3, [r3, #31]
 8003bea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003bec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003bf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	7f92      	ldrb	r2, [r2, #30]
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	d102      	bne.n	8003c02 <ETH_SetMACConfig+0x5e>
 8003bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c00:	e000      	b.n	8003c04 <ETH_SetMACConfig+0x60>
 8003c02:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	7f1b      	ldrb	r3, [r3, #28]
 8003c0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	791b      	ldrb	r3, [r3, #4]
 8003c18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003c1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	d102      	bne.n	8003c2c <ETH_SetMACConfig+0x88>
 8003c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2a:	e000      	b.n	8003c2e <ETH_SetMACConfig+0x8a>
 8003c2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7bdb      	ldrb	r3, [r3, #15]
 8003c34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003c36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003c3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c46:	4313      	orrs	r3, r2
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f7ff f8fe 	bl	8002e60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d101      	bne.n	8003c92 <ETH_SetMACConfig+0xee>
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	e000      	b.n	8003c94 <ETH_SetMACConfig+0xf0>
 8003c92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003ca2:	2a01      	cmp	r2, #1
 8003ca4:	d101      	bne.n	8003caa <ETH_SetMACConfig+0x106>
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	e000      	b.n	8003cac <ETH_SetMACConfig+0x108>
 8003caa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003cac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003cb4:	2a01      	cmp	r2, #1
 8003cb6:	d101      	bne.n	8003cbc <ETH_SetMACConfig+0x118>
 8003cb8:	2204      	movs	r2, #4
 8003cba:	e000      	b.n	8003cbe <ETH_SetMACConfig+0x11a>
 8003cbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003cbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003cc6:	2a01      	cmp	r2, #1
 8003cc8:	d101      	bne.n	8003cce <ETH_SetMACConfig+0x12a>
 8003cca:	2202      	movs	r2, #2
 8003ccc:	e000      	b.n	8003cd0 <ETH_SetMACConfig+0x12c>
 8003cce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff f8b9 	bl	8002e60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	ff20810f 	.word	0xff20810f

08003d04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	; (8003e14 <ETH_SetDMAConfig+0x110>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	7b1b      	ldrb	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <ETH_SetDMAConfig+0x2c>
 8003d2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d2e:	e000      	b.n	8003d32 <ETH_SetDMAConfig+0x2e>
 8003d30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	7b5b      	ldrb	r3, [r3, #13]
 8003d36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	7f52      	ldrb	r2, [r2, #29]
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	d102      	bne.n	8003d48 <ETH_SetDMAConfig+0x44>
 8003d42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d46:	e000      	b.n	8003d4a <ETH_SetDMAConfig+0x46>
 8003d48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003d4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	7b9b      	ldrb	r3, [r3, #14]
 8003d50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003d52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003d58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	7f1b      	ldrb	r3, [r3, #28]
 8003d5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003d60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	7f9b      	ldrb	r3, [r3, #30]
 8003d66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003d68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f7ff f860 	bl	8002e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003db8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003dbe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003dc4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dcc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003dce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003dd6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ddc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7ff f831 	bl	8002e60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	f8de3f23 	.word	0xf8de3f23

08003e18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b0a6      	sub	sp, #152	; 0x98
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e54:	2300      	movs	r3, #0
 8003e56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe86 	bl	8003ba4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ecc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ed2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ff08 	bl	8003d04 <ETH_SetDMAConfig>
}
 8003ef4:	bf00      	nop
 8003ef6:	3798      	adds	r7, #152	; 0x98
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3305      	adds	r3, #5
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	3204      	adds	r2, #4
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <ETH_MACAddressConfig+0x68>)
 8003f1e:	4413      	add	r3, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3303      	adds	r3, #3
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	061a      	lsls	r2, r3, #24
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3302      	adds	r3, #2
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	4313      	orrs	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	7812      	ldrb	r2, [r2, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <ETH_MACAddressConfig+0x6c>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6013      	str	r3, [r2, #0]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40028040 	.word	0x40028040
 8003f68:	40028044 	.word	0x40028044

08003f6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e03e      	b.n	8003ff8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68d9      	ldr	r1, [r3, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	3206      	adds	r2, #6
 8003fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d80c      	bhi.n	8003fdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	e004      	b.n	8003fe6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d9bd      	bls.n	8003f7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004010:	611a      	str	r2, [r3, #16]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e046      	b.n	80040ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6919      	ldr	r1, [r3, #16]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004068:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004070:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	3212      	adds	r2, #18
 8004086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d80c      	bhi.n	80040aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6919      	ldr	r1, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	461a      	mov	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	e004      	b.n	80040b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d9b5      	bls.n	800402c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ea:	60da      	str	r2, [r3, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e177      	b.n	8004404 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004114:	2201      	movs	r2, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	f040 8166 	bne.w	80043fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d005      	beq.n	800414a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004146:	2b02      	cmp	r3, #2
 8004148:	d130      	bne.n	80041ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0201 	and.w	r2, r3, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d017      	beq.n	80041e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d123      	bne.n	800423c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3208      	adds	r2, #8
 80041fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	2203      	movs	r2, #3
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0203 	and.w	r2, r3, #3
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80c0 	beq.w	80043fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_GPIO_Init+0x324>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_GPIO_Init+0x324>)
 8004288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428c:	6453      	str	r3, [r2, #68]	; 0x44
 800428e:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_GPIO_Init+0x324>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800429a:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_GPIO_Init+0x328>)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	3302      	adds	r3, #2
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	220f      	movs	r2, #15
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a58      	ldr	r2, [pc, #352]	; (8004424 <HAL_GPIO_Init+0x32c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d037      	beq.n	8004336 <HAL_GPIO_Init+0x23e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a57      	ldr	r2, [pc, #348]	; (8004428 <HAL_GPIO_Init+0x330>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d031      	beq.n	8004332 <HAL_GPIO_Init+0x23a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a56      	ldr	r2, [pc, #344]	; (800442c <HAL_GPIO_Init+0x334>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d02b      	beq.n	800432e <HAL_GPIO_Init+0x236>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a55      	ldr	r2, [pc, #340]	; (8004430 <HAL_GPIO_Init+0x338>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d025      	beq.n	800432a <HAL_GPIO_Init+0x232>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a54      	ldr	r2, [pc, #336]	; (8004434 <HAL_GPIO_Init+0x33c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01f      	beq.n	8004326 <HAL_GPIO_Init+0x22e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a53      	ldr	r2, [pc, #332]	; (8004438 <HAL_GPIO_Init+0x340>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x22a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a52      	ldr	r2, [pc, #328]	; (800443c <HAL_GPIO_Init+0x344>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x226>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a51      	ldr	r2, [pc, #324]	; (8004440 <HAL_GPIO_Init+0x348>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x222>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a50      	ldr	r2, [pc, #320]	; (8004444 <HAL_GPIO_Init+0x34c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x21e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a4f      	ldr	r2, [pc, #316]	; (8004448 <HAL_GPIO_Init+0x350>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x21a>
 800430e:	2309      	movs	r3, #9
 8004310:	e012      	b.n	8004338 <HAL_GPIO_Init+0x240>
 8004312:	230a      	movs	r3, #10
 8004314:	e010      	b.n	8004338 <HAL_GPIO_Init+0x240>
 8004316:	2308      	movs	r3, #8
 8004318:	e00e      	b.n	8004338 <HAL_GPIO_Init+0x240>
 800431a:	2307      	movs	r3, #7
 800431c:	e00c      	b.n	8004338 <HAL_GPIO_Init+0x240>
 800431e:	2306      	movs	r3, #6
 8004320:	e00a      	b.n	8004338 <HAL_GPIO_Init+0x240>
 8004322:	2305      	movs	r3, #5
 8004324:	e008      	b.n	8004338 <HAL_GPIO_Init+0x240>
 8004326:	2304      	movs	r3, #4
 8004328:	e006      	b.n	8004338 <HAL_GPIO_Init+0x240>
 800432a:	2303      	movs	r3, #3
 800432c:	e004      	b.n	8004338 <HAL_GPIO_Init+0x240>
 800432e:	2302      	movs	r3, #2
 8004330:	e002      	b.n	8004338 <HAL_GPIO_Init+0x240>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_GPIO_Init+0x240>
 8004336:	2300      	movs	r3, #0
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	f002 0203 	and.w	r2, r2, #3
 800433e:	0092      	lsls	r2, r2, #2
 8004340:	4093      	lsls	r3, r2
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004348:	4935      	ldr	r1, [pc, #212]	; (8004420 <HAL_GPIO_Init+0x328>)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	3302      	adds	r3, #2
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_GPIO_Init+0x354>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800437a:	4a34      	ldr	r2, [pc, #208]	; (800444c <HAL_GPIO_Init+0x354>)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_GPIO_Init+0x354>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043a4:	4a29      	ldr	r2, [pc, #164]	; (800444c <HAL_GPIO_Init+0x354>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043aa:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_GPIO_Init+0x354>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ce:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_GPIO_Init+0x354>)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	; (800444c <HAL_GPIO_Init+0x354>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <HAL_GPIO_Init+0x354>)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3301      	adds	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	f67f ae84 	bls.w	8004114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	3724      	adds	r7, #36	; 0x24
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800
 8004420:	40013800 	.word	0x40013800
 8004424:	40020000 	.word	0x40020000
 8004428:	40020400 	.word	0x40020400
 800442c:	40020800 	.word	0x40020800
 8004430:	40020c00 	.word	0x40020c00
 8004434:	40021000 	.word	0x40021000
 8004438:	40021400 	.word	0x40021400
 800443c:	40021800 	.word	0x40021800
 8004440:	40021c00 	.word	0x40021c00
 8004444:	40022000 	.word	0x40022000
 8004448:	40022400 	.word	0x40022400
 800444c:	40013c00 	.word	0x40013c00

08004450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
 800446c:	e001      	b.n	8004472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
 800448c:	4613      	mov	r3, r2
 800448e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004490:	787b      	ldrb	r3, [r7, #1]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800449c:	e003      	b.n	80044a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	041a      	lsls	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	619a      	str	r2, [r3, #24]
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044c4:	887a      	ldrh	r2, [r7, #2]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4013      	ands	r3, r2
 80044ca:	041a      	lsls	r2, r3, #16
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	43d9      	mvns	r1, r3
 80044d0:	887b      	ldrh	r3, [r7, #2]
 80044d2:	400b      	ands	r3, r1
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	619a      	str	r2, [r3, #24]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044fe:	4a05      	ldr	r2, [pc, #20]	; (8004514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc fcc8 	bl	8000e9c <HAL_GPIO_EXTI_Callback>
  }
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40013c00 	.word	0x40013c00

08004518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e12b      	b.n	8004782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd fde0 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800456a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800457c:	f001 fa20 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8004580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4a81      	ldr	r2, [pc, #516]	; (800478c <HAL_I2C_Init+0x274>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d807      	bhi.n	800459c <HAL_I2C_Init+0x84>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a80      	ldr	r2, [pc, #512]	; (8004790 <HAL_I2C_Init+0x278>)
 8004590:	4293      	cmp	r3, r2
 8004592:	bf94      	ite	ls
 8004594:	2301      	movls	r3, #1
 8004596:	2300      	movhi	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e006      	b.n	80045aa <HAL_I2C_Init+0x92>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a7d      	ldr	r2, [pc, #500]	; (8004794 <HAL_I2C_Init+0x27c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0e7      	b.n	8004782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4a78      	ldr	r2, [pc, #480]	; (8004798 <HAL_I2C_Init+0x280>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0c9b      	lsrs	r3, r3, #18
 80045bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a6a      	ldr	r2, [pc, #424]	; (800478c <HAL_I2C_Init+0x274>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d802      	bhi.n	80045ec <HAL_I2C_Init+0xd4>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	3301      	adds	r3, #1
 80045ea:	e009      	b.n	8004600 <HAL_I2C_Init+0xe8>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	4a69      	ldr	r2, [pc, #420]	; (800479c <HAL_I2C_Init+0x284>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	3301      	adds	r3, #1
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	430b      	orrs	r3, r1
 8004606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	495c      	ldr	r1, [pc, #368]	; (800478c <HAL_I2C_Init+0x274>)
 800461c:	428b      	cmp	r3, r1
 800461e:	d819      	bhi.n	8004654 <HAL_I2C_Init+0x13c>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e59      	subs	r1, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fbb1 f3f3 	udiv	r3, r1, r3
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004634:	400b      	ands	r3, r1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_I2C_Init+0x138>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1e59      	subs	r1, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fbb1 f3f3 	udiv	r3, r1, r3
 8004648:	3301      	adds	r3, #1
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	e051      	b.n	80046f4 <HAL_I2C_Init+0x1dc>
 8004650:	2304      	movs	r3, #4
 8004652:	e04f      	b.n	80046f4 <HAL_I2C_Init+0x1dc>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d111      	bne.n	8004680 <HAL_I2C_Init+0x168>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1e58      	subs	r0, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	440b      	add	r3, r1
 800466a:	fbb0 f3f3 	udiv	r3, r0, r3
 800466e:	3301      	adds	r3, #1
 8004670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e012      	b.n	80046a6 <HAL_I2C_Init+0x18e>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1e58      	subs	r0, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	0099      	lsls	r1, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	fbb0 f3f3 	udiv	r3, r0, r3
 8004696:	3301      	adds	r3, #1
 8004698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_Init+0x196>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e022      	b.n	80046f4 <HAL_I2C_Init+0x1dc>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10e      	bne.n	80046d4 <HAL_I2C_Init+0x1bc>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1e58      	subs	r0, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	440b      	add	r3, r1
 80046c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c8:	3301      	adds	r3, #1
 80046ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	e00f      	b.n	80046f4 <HAL_I2C_Init+0x1dc>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1e58      	subs	r0, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	0099      	lsls	r1, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ea:	3301      	adds	r3, #1
 80046ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	6809      	ldr	r1, [r1, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6911      	ldr	r1, [r2, #16]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68d2      	ldr	r2, [r2, #12]
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	430b      	orrs	r3, r1
 8004736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	000186a0 	.word	0x000186a0
 8004790:	001e847f 	.word	0x001e847f
 8004794:	003d08ff 	.word	0x003d08ff
 8004798:	431bde83 	.word	0x431bde83
 800479c:	10624dd3 	.word	0x10624dd3

080047a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	461a      	mov	r2, r3
 80047ac:	460b      	mov	r3, r1
 80047ae:	817b      	strh	r3, [r7, #10]
 80047b0:	4613      	mov	r3, r2
 80047b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b4:	f7fe fb48 	bl	8002e48 <HAL_GetTick>
 80047b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	f040 80e0 	bne.w	8004988 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2319      	movs	r3, #25
 80047ce:	2201      	movs	r2, #1
 80047d0:	4970      	ldr	r1, [pc, #448]	; (8004994 <HAL_I2C_Master_Transmit+0x1f4>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f964 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	e0d3      	b.n	800498a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_I2C_Master_Transmit+0x50>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0cc      	b.n	800498a <HAL_I2C_Master_Transmit+0x1ea>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d007      	beq.n	8004816 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004824:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2221      	movs	r2, #33	; 0x21
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2210      	movs	r2, #16
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	893a      	ldrh	r2, [r7, #8]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a50      	ldr	r2, [pc, #320]	; (8004998 <HAL_I2C_Master_Transmit+0x1f8>)
 8004856:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004858:	8979      	ldrh	r1, [r7, #10]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f89c 	bl	800499c <I2C_MasterRequestWrite>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e08d      	b.n	800498a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004884:	e066      	b.n	8004954 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f9de 	bl	8004c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06b      	b.n	800498a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_I2C_Master_Transmit+0x188>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	6a39      	ldr	r1, [r7, #32]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f9ce 	bl	8004cce <I2C_WaitOnBTFFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b04      	cmp	r3, #4
 800493e:	d107      	bne.n	8004950 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e01a      	b.n	800498a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d194      	bne.n	8004886 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00100002 	.word	0x00100002
 8004998:	ffff0000 	.word	0xffff0000

0800499c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	460b      	mov	r3, r1
 80049aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d006      	beq.n	80049c6 <I2C_MasterRequestWrite+0x2a>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d003      	beq.n	80049c6 <I2C_MasterRequestWrite+0x2a>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049c4:	d108      	bne.n	80049d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e00b      	b.n	80049f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b12      	cmp	r3, #18
 80049de:	d107      	bne.n	80049f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f84f 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d103      	bne.n	8004a20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e035      	b.n	8004a90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2c:	d108      	bne.n	8004a40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a3c:	611a      	str	r2, [r3, #16]
 8004a3e:	e01b      	b.n	8004a78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a40:	897b      	ldrh	r3, [r7, #10]
 8004a42:	11db      	asrs	r3, r3, #7
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0306 	and.w	r3, r3, #6
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f063 030f 	orn	r3, r3, #15
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	490e      	ldr	r1, [pc, #56]	; (8004a98 <I2C_MasterRequestWrite+0xfc>)
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f875 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e010      	b.n	8004a90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4907      	ldr	r1, [pc, #28]	; (8004a9c <I2C_MasterRequestWrite+0x100>)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f865 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	00010008 	.word	0x00010008
 8004a9c:	00010002 	.word	0x00010002

08004aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ab0:	e025      	b.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d021      	beq.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fe f9c5 	bl	8002e48 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e023      	b.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10d      	bne.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4013      	ands	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf0c      	ite	eq
 8004b1a:	2301      	moveq	r3, #1
 8004b1c:	2300      	movne	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	e00c      	b.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d0b6      	beq.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5c:	e051      	b.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d123      	bne.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e046      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d021      	beq.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe f943 	bl	8002e48 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d116      	bne.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e020      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10c      	bne.n	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf14      	ite	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	2300      	moveq	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e00b      	b.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	43da      	mvns	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d18d      	bne.n	8004b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c58:	e02d      	b.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f878 	bl	8004d50 <I2C_IsAcknowledgeFailed>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e02d      	b.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d021      	beq.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7fe f8e9 	bl	8002e48 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d302      	bcc.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d116      	bne.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e007      	b.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d1ca      	bne.n	8004c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cda:	e02d      	b.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f837 	bl	8004d50 <I2C_IsAcknowledgeFailed>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e02d      	b.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d021      	beq.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf4:	f7fe f8a8 	bl	8002e48 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d302      	bcc.n	8004d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d116      	bne.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e007      	b.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d1ca      	bne.n	8004cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d11b      	bne.n	8004da0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d129      	bne.n	8004e18 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0210 	bic.w	r2, r2, #16
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d12a      	bne.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004e60:	89fb      	ldrh	r3, [r7, #14]
 8004e62:	f023 030f 	bic.w	r3, r3, #15
 8004e66:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	89fa      	ldrh	r2, [r7, #14]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea6:	b08f      	sub	sp, #60	; 0x3c
 8004ea8:	af0a      	add	r7, sp, #40	; 0x28
 8004eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e10f      	b.n	80050d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd fb6d 	bl	80025b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f003 ff4a 	bl	8008d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	687e      	ldr	r6, [r7, #4]
 8004f02:	466d      	mov	r5, sp
 8004f04:	f106 0410 	add.w	r4, r6, #16
 8004f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f18:	1d33      	adds	r3, r6, #4
 8004f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f1c:	6838      	ldr	r0, [r7, #0]
 8004f1e:	f003 fed5 	bl	8008ccc <USB_CoreInit>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0d0      	b.n	80050d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f003 ff38 	bl	8008db0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e04a      	b.n	8004fdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	333d      	adds	r3, #61	; 0x3d
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	333c      	adds	r3, #60	; 0x3c
 8004f6a:	7bfa      	ldrb	r2, [r7, #15]
 8004f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	b298      	uxth	r0, r3
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3344      	adds	r3, #68	; 0x44
 8004f82:	4602      	mov	r2, r0
 8004f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	3340      	adds	r3, #64	; 0x40
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f9a:	7bfa      	ldrb	r2, [r7, #15]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3348      	adds	r3, #72	; 0x48
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	334c      	adds	r3, #76	; 0x4c
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3354      	adds	r3, #84	; 0x54
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d3af      	bcc.n	8004f46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e044      	b.n	8005076 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800505a:	7bfa      	ldrb	r2, [r7, #15]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	3301      	adds	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d3b5      	bcc.n	8004fec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	687e      	ldr	r6, [r7, #4]
 8005088:	466d      	mov	r5, sp
 800508a:	f106 0410 	add.w	r4, r6, #16
 800508e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005096:	e894 0003 	ldmia.w	r4, {r0, r1}
 800509a:	e885 0003 	stmia.w	r5, {r0, r1}
 800509e:	1d33      	adds	r3, r6, #4
 80050a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050a2:	6838      	ldr	r0, [r7, #0]
 80050a4:	f003 fed0 	bl	8008e48 <USB_DevInit>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e00d      	b.n	80050d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f004 f89b 	bl	800920a <USB_DevDisconnect>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080050e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e267      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d075      	beq.n	80051ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fe:	4b88      	ldr	r3, [pc, #544]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b04      	cmp	r3, #4
 8005108:	d00c      	beq.n	8005124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510a:	4b85      	ldr	r3, [pc, #532]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005112:	2b08      	cmp	r3, #8
 8005114:	d112      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b82      	ldr	r3, [pc, #520]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005122:	d10b      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	4b7e      	ldr	r3, [pc, #504]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x108>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d157      	bne.n	80051e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e242      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d106      	bne.n	8005154 <HAL_RCC_OscConfig+0x74>
 8005146:	4b76      	ldr	r3, [pc, #472]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a75      	ldr	r2, [pc, #468]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e01d      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x98>
 800515e:	4b70      	ldr	r3, [pc, #448]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a6f      	ldr	r2, [pc, #444]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b6d      	ldr	r3, [pc, #436]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6c      	ldr	r2, [pc, #432]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005178:	4b69      	ldr	r3, [pc, #420]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a68      	ldr	r2, [pc, #416]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b66      	ldr	r3, [pc, #408]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a65      	ldr	r2, [pc, #404]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd fe56 	bl	8002e48 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd fe52 	bl	8002e48 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e207      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b5b      	ldr	r3, [pc, #364]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0xc0>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fd fe42 	bl	8002e48 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd fe3e 	bl	8002e48 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1f3      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	4b51      	ldr	r3, [pc, #324]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0xe8>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11c      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520e:	4b44      	ldr	r3, [pc, #272]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	4b41      	ldr	r3, [pc, #260]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1c7      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4937      	ldr	r1, [pc, #220]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005246:	e03a      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d020      	beq.n	8005292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <HAL_RCC_OscConfig+0x244>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fd fdf7 	bl	8002e48 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800525e:	f7fd fdf3 	bl	8002e48 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1a8      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b28      	ldr	r3, [pc, #160]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4925      	ldr	r1, [pc, #148]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]
 8005290:	e015      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005292:	4b24      	ldr	r3, [pc, #144]	; (8005324 <HAL_RCC_OscConfig+0x244>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd fdd6 	bl	8002e48 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fd fdd2 	bl	8002e48 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e187      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d036      	beq.n	8005338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <HAL_RCC_OscConfig+0x248>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fd fdb6 	bl	8002e48 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e0:	f7fd fdb2 	bl	8002e48 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e167      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_OscConfig+0x240>)
 80052f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x200>
 80052fe:	e01b      	b.n	8005338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_RCC_OscConfig+0x248>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fd fd9f 	bl	8002e48 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530c:	e00e      	b.n	800532c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530e:	f7fd fd9b 	bl	8002e48 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d907      	bls.n	800532c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e150      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
 8005320:	40023800 	.word	0x40023800
 8005324:	42470000 	.word	0x42470000
 8005328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800532c:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ea      	bne.n	800530e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8097 	beq.w	8005474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534a:	4b81      	ldr	r3, [pc, #516]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	4b7d      	ldr	r3, [pc, #500]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	4a7c      	ldr	r2, [pc, #496]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6413      	str	r3, [r2, #64]	; 0x40
 8005366:	4b7a      	ldr	r3, [pc, #488]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005372:	2301      	movs	r3, #1
 8005374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b77      	ldr	r3, [pc, #476]	; (8005554 <HAL_RCC_OscConfig+0x474>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d118      	bne.n	80053b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005382:	4b74      	ldr	r3, [pc, #464]	; (8005554 <HAL_RCC_OscConfig+0x474>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a73      	ldr	r2, [pc, #460]	; (8005554 <HAL_RCC_OscConfig+0x474>)
 8005388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538e:	f7fd fd5b 	bl	8002e48 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005396:	f7fd fd57 	bl	8002e48 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e10c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	4b6a      	ldr	r3, [pc, #424]	; (8005554 <HAL_RCC_OscConfig+0x474>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x2ea>
 80053bc:	4b64      	ldr	r3, [pc, #400]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	4a63      	ldr	r2, [pc, #396]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	; 0x70
 80053c8:	e01c      	b.n	8005404 <HAL_RCC_OscConfig+0x324>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x30c>
 80053d2:	4b5f      	ldr	r3, [pc, #380]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	4a5e      	ldr	r2, [pc, #376]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	6713      	str	r3, [r2, #112]	; 0x70
 80053de:	4b5c      	ldr	r3, [pc, #368]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4a5b      	ldr	r2, [pc, #364]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0x324>
 80053ec:	4b58      	ldr	r3, [pc, #352]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4a57      	ldr	r2, [pc, #348]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	; 0x70
 80053f8:	4b55      	ldr	r3, [pc, #340]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a54      	ldr	r2, [pc, #336]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fd fd1c 	bl	8002e48 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	e00a      	b.n	800542a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fd fd18 	bl	8002e48 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0cb      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542a:	4b49      	ldr	r3, [pc, #292]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ee      	beq.n	8005414 <HAL_RCC_OscConfig+0x334>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005438:	f7fd fd06 	bl	8002e48 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	e00a      	b.n	8005456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005440:	f7fd fd02 	bl	8002e48 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f241 3288 	movw	r2, #5000	; 0x1388
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e0b5      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ee      	bne.n	8005440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b39      	ldr	r3, [pc, #228]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	4a38      	ldr	r2, [pc, #224]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80a1 	beq.w	80055c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547e:	4b34      	ldr	r3, [pc, #208]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b08      	cmp	r3, #8
 8005488:	d05c      	beq.n	8005544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d141      	bne.n	8005516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b31      	ldr	r3, [pc, #196]	; (8005558 <HAL_RCC_OscConfig+0x478>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fd fcd6 	bl	8002e48 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fd fcd2 	bl	8002e48 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e087      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	491b      	ldr	r1, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCC_OscConfig+0x478>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fd fcab 	bl	8002e48 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fd fca7 	bl	8002e48 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e05c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x416>
 8005514:	e054      	b.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <HAL_RCC_OscConfig+0x478>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd fc94 	bl	8002e48 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005524:	f7fd fc90 	bl	8002e48 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e045      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCC_OscConfig+0x470>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x444>
 8005542:	e03d      	b.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e038      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
 8005550:	40023800 	.word	0x40023800
 8005554:	40007000 	.word	0x40007000
 8005558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800555c:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <HAL_RCC_OscConfig+0x4ec>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d028      	beq.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d121      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d11a      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005594:	4293      	cmp	r3, r2
 8005596:	d111      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	3b01      	subs	r3, #1
 80055a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800

080055d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0cc      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b68      	ldr	r3, [pc, #416]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d90c      	bls.n	800560c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b65      	ldr	r3, [pc, #404]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b63      	ldr	r3, [pc, #396]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d001      	beq.n	800560c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b8      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d020      	beq.n	800565a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005624:	4b59      	ldr	r3, [pc, #356]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a58      	ldr	r2, [pc, #352]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800562e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800563c:	4b53      	ldr	r3, [pc, #332]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a52      	ldr	r2, [pc, #328]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b50      	ldr	r3, [pc, #320]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	494d      	ldr	r1, [pc, #308]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d044      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d119      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e07f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d003      	beq.n	800568e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	2b03      	cmp	r3, #3
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3b      	ldr	r3, [pc, #236]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e067      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b37      	ldr	r3, [pc, #220]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4934      	ldr	r1, [pc, #208]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fd fbc2 	bl	8002e48 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fd fbbe 	bl	8002e48 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e04f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b25      	ldr	r3, [pc, #148]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d20c      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b20      	ldr	r3, [pc, #128]	; (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e032      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4916      	ldr	r1, [pc, #88]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	490e      	ldr	r1, [pc, #56]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005756:	f000 f821 	bl	800579c <HAL_RCC_GetSysClockFreq>
 800575a:	4602      	mov	r2, r0
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	490a      	ldr	r1, [pc, #40]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	5ccb      	ldrb	r3, [r1, r3]
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fc ff74 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40023c00 	.word	0x40023c00
 800578c:	40023800 	.word	0x40023800
 8005790:	0800dedc 	.word	0x0800dedc
 8005794:	20000140 	.word	0x20000140
 8005798:	20000144 	.word	0x20000144

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a0:	b094      	sub	sp, #80	; 0x50
 80057a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44
 80057a8:	2300      	movs	r3, #0
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ac:	2300      	movs	r3, #0
 80057ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b4:	4b79      	ldr	r3, [pc, #484]	; (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d00d      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x40>
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	f200 80e1 	bhi.w	8005988 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ce:	e0db      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b73      	ldr	r3, [pc, #460]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057d4:	e0db      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d6:	4b73      	ldr	r3, [pc, #460]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057da:	e0d8      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057dc:	4b6f      	ldr	r3, [pc, #444]	; (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e6:	4b6d      	ldr	r3, [pc, #436]	; (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d063      	beq.n	80058ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f2:	4b6a      	ldr	r3, [pc, #424]	; (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	2200      	movs	r2, #0
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80057fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	633b      	str	r3, [r7, #48]	; 0x30
 8005806:	2300      	movs	r3, #0
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
 800580a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800580e:	4622      	mov	r2, r4
 8005810:	462b      	mov	r3, r5
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	0159      	lsls	r1, r3, #5
 800581c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005820:	0150      	lsls	r0, r2, #5
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4621      	mov	r1, r4
 8005828:	1a51      	subs	r1, r2, r1
 800582a:	6139      	str	r1, [r7, #16]
 800582c:	4629      	mov	r1, r5
 800582e:	eb63 0301 	sbc.w	r3, r3, r1
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005840:	4659      	mov	r1, fp
 8005842:	018b      	lsls	r3, r1, #6
 8005844:	4651      	mov	r1, sl
 8005846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800584a:	4651      	mov	r1, sl
 800584c:	018a      	lsls	r2, r1, #6
 800584e:	4651      	mov	r1, sl
 8005850:	ebb2 0801 	subs.w	r8, r2, r1
 8005854:	4659      	mov	r1, fp
 8005856:	eb63 0901 	sbc.w	r9, r3, r1
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800586a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800586e:	4690      	mov	r8, r2
 8005870:	4699      	mov	r9, r3
 8005872:	4623      	mov	r3, r4
 8005874:	eb18 0303 	adds.w	r3, r8, r3
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	462b      	mov	r3, r5
 800587c:	eb49 0303 	adc.w	r3, r9, r3
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800588e:	4629      	mov	r1, r5
 8005890:	024b      	lsls	r3, r1, #9
 8005892:	4621      	mov	r1, r4
 8005894:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005898:	4621      	mov	r1, r4
 800589a:	024a      	lsls	r2, r1, #9
 800589c:	4610      	mov	r0, r2
 800589e:	4619      	mov	r1, r3
 80058a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a2:	2200      	movs	r2, #0
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ac:	f7fa fcf0 	bl	8000290 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4613      	mov	r3, r2
 80058b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b8:	e058      	b.n	800596c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ba:	4b38      	ldr	r3, [pc, #224]	; (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	099b      	lsrs	r3, r3, #6
 80058c0:	2200      	movs	r2, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	4611      	mov	r1, r2
 80058c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
 80058d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	f04f 0000 	mov.w	r0, #0
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	0159      	lsls	r1, r3, #5
 80058e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e6:	0150      	lsls	r0, r2, #5
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4641      	mov	r1, r8
 80058ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80058f2:	4649      	mov	r1, r9
 80058f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800590c:	ebb2 040a 	subs.w	r4, r2, sl
 8005910:	eb63 050b 	sbc.w	r5, r3, fp
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	00eb      	lsls	r3, r5, #3
 800591e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005922:	00e2      	lsls	r2, r4, #3
 8005924:	4614      	mov	r4, r2
 8005926:	461d      	mov	r5, r3
 8005928:	4643      	mov	r3, r8
 800592a:	18e3      	adds	r3, r4, r3
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	464b      	mov	r3, r9
 8005930:	eb45 0303 	adc.w	r3, r5, r3
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005942:	4629      	mov	r1, r5
 8005944:	028b      	lsls	r3, r1, #10
 8005946:	4621      	mov	r1, r4
 8005948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800594c:	4621      	mov	r1, r4
 800594e:	028a      	lsls	r2, r1, #10
 8005950:	4610      	mov	r0, r2
 8005952:	4619      	mov	r1, r3
 8005954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005956:	2200      	movs	r2, #0
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	61fa      	str	r2, [r7, #28]
 800595c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005960:	f7fa fc96 	bl	8000290 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4613      	mov	r3, r2
 800596a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	3301      	adds	r3, #1
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800597c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800597e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005986:	e002      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800598a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800598c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800598e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005990:	4618      	mov	r0, r3
 8005992:	3750      	adds	r7, #80	; 0x50
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
 80059a0:	00f42400 	.word	0x00f42400
 80059a4:	007a1200 	.word	0x007a1200

080059a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059ac:	4b03      	ldr	r3, [pc, #12]	; (80059bc <HAL_RCC_GetHCLKFreq+0x14>)
 80059ae:	681b      	ldr	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000140 	.word	0x20000140

080059c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059c4:	f7ff fff0 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0a9b      	lsrs	r3, r3, #10
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4903      	ldr	r1, [pc, #12]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	0800deec 	.word	0x0800deec

080059e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059ec:	f7ff ffdc 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0b5b      	lsrs	r3, r3, #13
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4903      	ldr	r1, [pc, #12]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	0800deec 	.word	0x0800deec

08005a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	220f      	movs	r2, #15
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0203 	and.w	r2, r3, #3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	08db      	lsrs	r3, r3, #3
 8005a4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <HAL_RCC_GetClockConfig+0x60>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40023c00 	.word	0x40023c00

08005a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d075      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005aa8:	4b91      	ldr	r3, [pc, #580]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aae:	f7fd f9cb 	bl	8002e48 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ab6:	f7fd f9c7 	bl	8002e48 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e189      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ac8:	4b8a      	ldr	r3, [pc, #552]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	019a      	lsls	r2, r3, #6
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	071b      	lsls	r3, r3, #28
 8005aec:	4981      	ldr	r1, [pc, #516]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01f      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b00:	4b7c      	ldr	r3, [pc, #496]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b06:	0f1b      	lsrs	r3, r3, #28
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	019a      	lsls	r2, r3, #6
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	071b      	lsls	r3, r3, #28
 8005b20:	4974      	ldr	r1, [pc, #464]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b28:	4b72      	ldr	r3, [pc, #456]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2e:	f023 021f 	bic.w	r2, r3, #31
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	496e      	ldr	r1, [pc, #440]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	019a      	lsls	r2, r3, #6
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	061b      	lsls	r3, r3, #24
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	071b      	lsls	r3, r3, #28
 8005b60:	4964      	ldr	r1, [pc, #400]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b68:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b6e:	f7fd f96b 	bl	8002e48 <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b76:	f7fd f967 	bl	8002e48 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e129      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b88:	4b5a      	ldr	r3, [pc, #360]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d079      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bac:	4b52      	ldr	r3, [pc, #328]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb2:	f7fd f949 	bl	8002e48 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bba:	f7fd f945 	bl	8002e48 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e107      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bcc:	4b49      	ldr	r3, [pc, #292]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd8:	d0ef      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d020      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005be6:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bec:	0f1b      	lsrs	r3, r3, #28
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	019a      	lsls	r2, r3, #6
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	431a      	orrs	r2, r3
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	071b      	lsls	r3, r3, #28
 8005c06:	493b      	ldr	r1, [pc, #236]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c0e:	4b39      	ldr	r3, [pc, #228]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	4934      	ldr	r1, [pc, #208]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01e      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c34:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	0e1b      	lsrs	r3, r3, #24
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	019a      	lsls	r2, r3, #6
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	071b      	lsls	r3, r3, #28
 8005c54:	4927      	ldr	r1, [pc, #156]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	4922      	ldr	r1, [pc, #136]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c72:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c78:	f7fd f8e6 	bl	8002e48 <HAL_GetTick>
 8005c7c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c80:	f7fd f8e2 	bl	8002e48 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e0a4      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9e:	d1ef      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 808b 	beq.w	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a0b      	ldr	r2, [pc, #44]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd6:	f7fd f8b7 	bl	8002e48 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cdc:	e010      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fd f8b3 	bl	8002e48 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d909      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e075      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005cf0:	42470068 	.word	0x42470068
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	42470070 	.word	0x42470070
 8005cfc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d00:	4b38      	ldr	r3, [pc, #224]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0e8      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02f      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d028      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d34:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d3a:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d40:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d46:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d114      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d52:	f7fd f879 	bl	8002e48 <HAL_GetTick>
 8005d56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d5a:	f7fd f875 	bl	8002e48 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e035      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d70:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ee      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d88:	d10d      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9e:	4912      	ldr	r1, [pc, #72]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	608b      	str	r3, [r1, #8]
 8005da4:	e005      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4a0f      	ldr	r2, [pc, #60]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005db0:	6093      	str	r3, [r2, #8]
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbe:	490a      	ldr	r1, [pc, #40]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005dd8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40007000 	.word	0x40007000
 8005de8:	40023800 	.word	0x40023800
 8005dec:	42470e40 	.word	0x42470e40
 8005df0:	424711e0 	.word	0x424711e0

08005df4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e066      	b.n	8005ed8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7f5b      	ldrb	r3, [r3, #29]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fc f9ba 	bl	8002194 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	22ca      	movs	r2, #202	; 0xca
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2253      	movs	r2, #83	; 0x53
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f998 	bl	800616c <RTC_EnterInitMode>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d12c      	bne.n	8005ea0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e58:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6899      	ldr	r1, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68d2      	ldr	r2, [r2, #12]
 8005e80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6919      	ldr	r1, [r3, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	041a      	lsls	r2, r3, #16
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f99f 	bl	80061da <RTC_ExitInitMode>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d113      	bne.n	8005ece <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	22ff      	movs	r2, #255	; 0xff
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	7f1b      	ldrb	r3, [r3, #28]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_RTC_SetTime+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e087      	b.n	800600c <HAL_RTC_SetTime+0x12c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2202      	movs	r2, #2
 8005f06:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d126      	bne.n	8005f5c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f97c 	bl	8006224 <RTC_ByteToBcd2>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f975 	bl	8006224 <RTC_ByteToBcd2>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f3e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	789b      	ldrb	r3, [r3, #2]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 f96d 	bl	8006224 <RTC_ByteToBcd2>
 8005f4a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	78db      	ldrb	r3, [r3, #3]
 8005f54:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e018      	b.n	8005f8e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f7c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f82:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	78db      	ldrb	r3, [r3, #3]
 8005f88:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ca      	movs	r2, #202	; 0xca
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2253      	movs	r2, #83	; 0x53
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f8e4 	bl	800616c <RTC_EnterInitMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d120      	bne.n	8005ff0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fb8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6899      	ldr	r1, [r3, #8]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f8f7 	bl	80061da <RTC_ExitInitMode>
 8005fec:	4603      	mov	r3, r0
 8005fee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	22ff      	movs	r2, #255	; 0xff
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	771a      	strb	r2, [r3, #28]

  return status;
 800600a:	7cfb      	ldrb	r3, [r7, #19]
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bd90      	pop	{r4, r7, pc}

08006014 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	7f1b      	ldrb	r3, [r3, #28]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_RTC_SetDate+0x1c>
 800602c:	2302      	movs	r3, #2
 800602e:	e071      	b.n	8006114 <HAL_RTC_SetDate+0x100>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2202      	movs	r2, #2
 800603a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10e      	bne.n	8006060 <HAL_RTC_SetDate+0x4c>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	b2db      	uxtb	r3, r3
 8006058:	330a      	adds	r3, #10
 800605a:	b2da      	uxtb	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11c      	bne.n	80060a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	78db      	ldrb	r3, [r3, #3]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f8da 	bl	8006224 <RTC_ByteToBcd2>
 8006070:	4603      	mov	r3, r0
 8006072:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 f8d3 	bl	8006224 <RTC_ByteToBcd2>
 800607e:	4603      	mov	r3, r0
 8006080:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006082:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	789b      	ldrb	r3, [r3, #2]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f8cb 	bl	8006224 <RTC_ByteToBcd2>
 800608e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006090:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e00e      	b.n	80060be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	78db      	ldrb	r3, [r3, #3]
 80060a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060ac:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	22ca      	movs	r2, #202	; 0xca
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2253      	movs	r2, #83	; 0x53
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f84c 	bl	800616c <RTC_EnterInitMode>
 80060d4:	4603      	mov	r3, r0
 80060d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060d8:	7cfb      	ldrb	r3, [r7, #19]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10c      	bne.n	80060f8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f873 	bl	80061da <RTC_ExitInitMode>
 80060f4:	4603      	mov	r3, r0
 80060f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060f8:	7cfb      	ldrb	r3, [r7, #19]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	771a      	strb	r2, [r3, #28]

  return status;
 8006112:	7cfb      	ldrb	r3, [r7, #19]
}
 8006114:	4618      	mov	r0, r3
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd90      	pop	{r4, r7, pc}

0800611c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006136:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006138:	f7fc fe86 	bl	8002e48 <HAL_GetTick>
 800613c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800613e:	e009      	b.n	8006154 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006140:	f7fc fe82 	bl	8002e48 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800614e:	d901      	bls.n	8006154 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e007      	b.n	8006164 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ee      	beq.n	8006140 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d122      	bne.n	80061d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006198:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800619a:	f7fc fe55 	bl	8002e48 <HAL_GetTick>
 800619e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061a0:	e00c      	b.n	80061bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061a2:	f7fc fe51 	bl	8002e48 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b0:	d904      	bls.n	80061bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <RTC_EnterInitMode+0x64>
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d1e8      	bne.n	80061a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff89 	bl	800611c <HAL_RTC_WaitForSynchro>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2204      	movs	r2, #4
 8006214:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006232:	e005      	b.n	8006240 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	3301      	adds	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	3b0a      	subs	r3, #10
 800623e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	2b09      	cmp	r3, #9
 8006244:	d8f6      	bhi.n	8006234 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	b2da      	uxtb	r2, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	4313      	orrs	r3, r2
 8006250:	b2db      	uxtb	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e041      	b.n	80062f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7fc f825 	bl	80022d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f000 ffd3 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b01      	cmp	r3, #1
 800630e:	d001      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e04e      	b.n	80063b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d022      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d01d      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d018      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d013      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_TIM_Base_Start_IT+0xd0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00e      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a19      	ldr	r2, [pc, #100]	; (80063d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x80>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d111      	bne.n	80063a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b06      	cmp	r3, #6
 800638c:	d010      	beq.n	80063b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639e:	e007      	b.n	80063b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e041      	b.n	8006472 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fb fef0 	bl	80021e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f000 ff14 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <HAL_TIM_PWM_Start+0x24>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e022      	b.n	80064e6 <HAL_TIM_PWM_Start+0x6a>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d109      	bne.n	80064ba <HAL_TIM_PWM_Start+0x3e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2300      	moveq	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	e015      	b.n	80064e6 <HAL_TIM_PWM_Start+0x6a>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d109      	bne.n	80064d4 <HAL_TIM_PWM_Start+0x58>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e008      	b.n	80064e6 <HAL_TIM_PWM_Start+0x6a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e07c      	b.n	80065e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_PWM_Start+0x82>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fc:	e013      	b.n	8006526 <HAL_TIM_PWM_Start+0xaa>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d104      	bne.n	800650e <HAL_TIM_PWM_Start+0x92>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800650c:	e00b      	b.n	8006526 <HAL_TIM_PWM_Start+0xaa>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d104      	bne.n	800651e <HAL_TIM_PWM_Start+0xa2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651c:	e003      	b.n	8006526 <HAL_TIM_PWM_Start+0xaa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2201      	movs	r2, #1
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fa9e 	bl	8007a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <HAL_TIM_PWM_Start+0x174>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_TIM_PWM_Start+0xcc>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <HAL_TIM_PWM_Start+0x178>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_TIM_PWM_Start+0xd0>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_TIM_PWM_Start+0xd2>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <HAL_TIM_PWM_Start+0x174>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d022      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006574:	d01d      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <HAL_TIM_PWM_Start+0x17c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d018      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_TIM_PWM_Start+0x180>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d013      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <HAL_TIM_PWM_Start+0x184>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00e      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a16      	ldr	r2, [pc, #88]	; (80065f4 <HAL_TIM_PWM_Start+0x178>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d009      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a18      	ldr	r2, [pc, #96]	; (8006604 <HAL_TIM_PWM_Start+0x188>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x136>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a16      	ldr	r2, [pc, #88]	; (8006608 <HAL_TIM_PWM_Start+0x18c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d111      	bne.n	80065d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b06      	cmp	r3, #6
 80065c2:	d010      	beq.n	80065e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	e007      	b.n	80065e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40010400 	.word	0x40010400
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40000800 	.word	0x40000800
 8006600:	40000c00 	.word	0x40000c00
 8006604:	40014000 	.word	0x40014000
 8006608:	40001800 	.word	0x40001800

0800660c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <HAL_TIM_PWM_Start_IT+0x28>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	e022      	b.n	800667a <HAL_TIM_PWM_Start_IT+0x6e>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b04      	cmp	r3, #4
 8006638:	d109      	bne.n	800664e <HAL_TIM_PWM_Start_IT+0x42>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	bf14      	ite	ne
 8006646:	2301      	movne	r3, #1
 8006648:	2300      	moveq	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	e015      	b.n	800667a <HAL_TIM_PWM_Start_IT+0x6e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b08      	cmp	r3, #8
 8006652:	d109      	bne.n	8006668 <HAL_TIM_PWM_Start_IT+0x5c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e008      	b.n	800667a <HAL_TIM_PWM_Start_IT+0x6e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e0c7      	b.n	8006812 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <HAL_TIM_PWM_Start_IT+0x86>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006690:	e013      	b.n	80066ba <HAL_TIM_PWM_Start_IT+0xae>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b04      	cmp	r3, #4
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_PWM_Start_IT+0x96>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a0:	e00b      	b.n	80066ba <HAL_TIM_PWM_Start_IT+0xae>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_PWM_Start_IT+0xa6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b0:	e003      	b.n	80066ba <HAL_TIM_PWM_Start_IT+0xae>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	d841      	bhi.n	8006744 <HAL_TIM_PWM_Start_IT+0x138>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	08006745 	.word	0x08006745
 80066d0:	08006745 	.word	0x08006745
 80066d4:	08006745 	.word	0x08006745
 80066d8:	0800670f 	.word	0x0800670f
 80066dc:	08006745 	.word	0x08006745
 80066e0:	08006745 	.word	0x08006745
 80066e4:	08006745 	.word	0x08006745
 80066e8:	08006721 	.word	0x08006721
 80066ec:	08006745 	.word	0x08006745
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006745 	.word	0x08006745
 80066f8:	08006733 	.word	0x08006733
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0202 	orr.w	r2, r2, #2
 800670a:	60da      	str	r2, [r3, #12]
      break;
 800670c:	e01d      	b.n	800674a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0204 	orr.w	r2, r2, #4
 800671c:	60da      	str	r2, [r3, #12]
      break;
 800671e:	e014      	b.n	800674a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0208 	orr.w	r2, r2, #8
 800672e:	60da      	str	r2, [r3, #12]
      break;
 8006730:	e00b      	b.n	800674a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0210 	orr.w	r2, r2, #16
 8006740:	60da      	str	r2, [r3, #12]
      break;
 8006742:	e002      	b.n	800674a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
      break;
 8006748:	bf00      	nop
  }

  if (status == HAL_OK)
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d15f      	bne.n	8006810 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2201      	movs	r2, #1
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f001 f989 	bl	8007a70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a2e      	ldr	r2, [pc, #184]	; (800681c <HAL_TIM_PWM_Start_IT+0x210>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_TIM_PWM_Start_IT+0x166>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <HAL_TIM_PWM_Start_IT+0x214>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_TIM_PWM_Start_IT+0x16a>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_TIM_PWM_Start_IT+0x16c>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800678a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a22      	ldr	r2, [pc, #136]	; (800681c <HAL_TIM_PWM_Start_IT+0x210>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d022      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679e:	d01d      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	; (8006824 <HAL_TIM_PWM_Start_IT+0x218>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d018      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_TIM_PWM_Start_IT+0x21c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_TIM_PWM_Start_IT+0x220>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a17      	ldr	r2, [pc, #92]	; (8006820 <HAL_TIM_PWM_Start_IT+0x214>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <HAL_TIM_PWM_Start_IT+0x224>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_TIM_PWM_Start_IT+0x1d0>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a17      	ldr	r2, [pc, #92]	; (8006834 <HAL_TIM_PWM_Start_IT+0x228>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d111      	bne.n	8006800 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b06      	cmp	r3, #6
 80067ec:	d010      	beq.n	8006810 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fe:	e007      	b.n	8006810 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40010400 	.word	0x40010400
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40014000 	.word	0x40014000
 8006834:	40001800 	.word	0x40001800

08006838 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e041      	b.n	80068ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb fce8 	bl	8002234 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 fce6 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_IC_Start_IT+0x1e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e013      	b.n	800691e <HAL_TIM_IC_Start_IT+0x46>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_IC_Start_IT+0x2e>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e00b      	b.n	800691e <HAL_TIM_IC_Start_IT+0x46>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d104      	bne.n	8006916 <HAL_TIM_IC_Start_IT+0x3e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e003      	b.n	800691e <HAL_TIM_IC_Start_IT+0x46>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691c:	b2db      	uxtb	r3, r3
 800691e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <HAL_TIM_IC_Start_IT+0x58>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800692c:	b2db      	uxtb	r3, r3
 800692e:	e013      	b.n	8006958 <HAL_TIM_IC_Start_IT+0x80>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b04      	cmp	r3, #4
 8006934:	d104      	bne.n	8006940 <HAL_TIM_IC_Start_IT+0x68>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e00b      	b.n	8006958 <HAL_TIM_IC_Start_IT+0x80>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b08      	cmp	r3, #8
 8006944:	d104      	bne.n	8006950 <HAL_TIM_IC_Start_IT+0x78>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e003      	b.n	8006958 <HAL_TIM_IC_Start_IT+0x80>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006956:	b2db      	uxtb	r3, r3
 8006958:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d102      	bne.n	8006966 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006960:	7b7b      	ldrb	r3, [r7, #13]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d001      	beq.n	800696a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e0cc      	b.n	8006b04 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <HAL_TIM_IC_Start_IT+0xa2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006978:	e013      	b.n	80069a2 <HAL_TIM_IC_Start_IT+0xca>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d104      	bne.n	800698a <HAL_TIM_IC_Start_IT+0xb2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006988:	e00b      	b.n	80069a2 <HAL_TIM_IC_Start_IT+0xca>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d104      	bne.n	800699a <HAL_TIM_IC_Start_IT+0xc2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006998:	e003      	b.n	80069a2 <HAL_TIM_IC_Start_IT+0xca>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_IC_Start_IT+0xda>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b0:	e013      	b.n	80069da <HAL_TIM_IC_Start_IT+0x102>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_IC_Start_IT+0xea>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069c0:	e00b      	b.n	80069da <HAL_TIM_IC_Start_IT+0x102>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_IC_Start_IT+0xfa>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d0:	e003      	b.n	80069da <HAL_TIM_IC_Start_IT+0x102>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d841      	bhi.n	8006a64 <HAL_TIM_IC_Start_IT+0x18c>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_TIM_IC_Start_IT+0x110>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006a65 	.word	0x08006a65
 80069f0:	08006a65 	.word	0x08006a65
 80069f4:	08006a65 	.word	0x08006a65
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a65 	.word	0x08006a65
 8006a00:	08006a65 	.word	0x08006a65
 8006a04:	08006a65 	.word	0x08006a65
 8006a08:	08006a41 	.word	0x08006a41
 8006a0c:	08006a65 	.word	0x08006a65
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	08006a65 	.word	0x08006a65
 8006a18:	08006a53 	.word	0x08006a53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0202 	orr.w	r2, r2, #2
 8006a2a:	60da      	str	r2, [r3, #12]
      break;
 8006a2c:	e01d      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0204 	orr.w	r2, r2, #4
 8006a3c:	60da      	str	r2, [r3, #12]
      break;
 8006a3e:	e014      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0208 	orr.w	r2, r2, #8
 8006a4e:	60da      	str	r2, [r3, #12]
      break;
 8006a50:	e00b      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0210 	orr.w	r2, r2, #16
 8006a60:	60da      	str	r2, [r3, #12]
      break;
 8006a62:	e002      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d148      	bne.n	8006b02 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fff9 	bl	8007a70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <HAL_TIM_IC_Start_IT+0x234>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d01d      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <HAL_TIM_IC_Start_IT+0x238>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <HAL_TIM_IC_Start_IT+0x23c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <HAL_TIM_IC_Start_IT+0x240>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <HAL_TIM_IC_Start_IT+0x244>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <HAL_TIM_IC_Start_IT+0x248>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_TIM_IC_Start_IT+0x1f6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_TIM_IC_Start_IT+0x24c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d111      	bne.n	8006af2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b06      	cmp	r3, #6
 8006ade:	d010      	beq.n	8006b02 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	e007      	b.n	8006b02 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40010400 	.word	0x40010400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40001800 	.word	0x40001800

08006b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d122      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d11b      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0202 	mvn.w	r2, #2
 8006b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fc f8d6 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fb4a 	bl	800720c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb51 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d122      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0204 	mvn.w	r2, #4
 8006ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fc f8ac 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fb20 	bl	800720c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fb27 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d122      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d11b      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0208 	mvn.w	r2, #8
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2204      	movs	r2, #4
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fc f882 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 faf6 	bl	800720c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fafd 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d122      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d11b      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0210 	mvn.w	r2, #16
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2208      	movs	r2, #8
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fc f858 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 facc 	bl	800720c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fad3 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d107      	bne.n	8006cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0201 	mvn.w	r2, #1
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa ff32 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b80      	cmp	r3, #128	; 0x80
 8006cc6:	d107      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 ff78 	bl	8007bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d10e      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d107      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa98 	bl	8007234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d10e      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d107      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0220 	mvn.w	r2, #32
 8006d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 ff42 	bl	8007bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e088      	b.n	8006e68 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11b      	bne.n	8006d9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f000 fcb8 	bl	80076e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 020c 	bic.w	r2, r2, #12
 8006d86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6999      	ldr	r1, [r3, #24]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	619a      	str	r2, [r3, #24]
 8006d9a:	e060      	b.n	8006e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d11c      	bne.n	8006ddc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6819      	ldr	r1, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f000 fd3c 	bl	800782e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006dc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6999      	ldr	r1, [r3, #24]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	021a      	lsls	r2, r3, #8
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	619a      	str	r2, [r3, #24]
 8006dda:	e040      	b.n	8006e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d11b      	bne.n	8006e1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f000 fd89 	bl	8007908 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 020c 	bic.w	r2, r2, #12
 8006e04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69d9      	ldr	r1, [r3, #28]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	61da      	str	r2, [r3, #28]
 8006e18:	e021      	b.n	8006e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d11c      	bne.n	8006e5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6819      	ldr	r1, [r3, #0]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f000 fda6 	bl	8007980 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69da      	ldr	r2, [r3, #28]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69d9      	ldr	r1, [r3, #28]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	61da      	str	r2, [r3, #28]
 8006e58:	e001      	b.n	8006e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e0ae      	b.n	8006fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	f200 809f 	bhi.w	8006fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006fdd 	.word	0x08006fdd
 8006eac:	08006fdd 	.word	0x08006fdd
 8006eb0:	08006fdd 	.word	0x08006fdd
 8006eb4:	08006f19 	.word	0x08006f19
 8006eb8:	08006fdd 	.word	0x08006fdd
 8006ebc:	08006fdd 	.word	0x08006fdd
 8006ec0:	08006fdd 	.word	0x08006fdd
 8006ec4:	08006f5b 	.word	0x08006f5b
 8006ec8:	08006fdd 	.word	0x08006fdd
 8006ecc:	08006fdd 	.word	0x08006fdd
 8006ed0:	08006fdd 	.word	0x08006fdd
 8006ed4:	08006f9b 	.word	0x08006f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa52 	bl	8007388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0208 	orr.w	r2, r2, #8
 8006ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0204 	bic.w	r2, r2, #4
 8006f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	619a      	str	r2, [r3, #24]
      break;
 8006f16:	e064      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 faa2 	bl	8007468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6999      	ldr	r1, [r3, #24]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	619a      	str	r2, [r3, #24]
      break;
 8006f58:	e043      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 faf7 	bl	8007554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0208 	orr.w	r2, r2, #8
 8006f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0204 	bic.w	r2, r2, #4
 8006f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	61da      	str	r2, [r3, #28]
      break;
 8006f98:	e023      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fb4b 	bl	800763c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69d9      	ldr	r1, [r3, #28]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	021a      	lsls	r2, r3, #8
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	61da      	str	r2, [r3, #28]
      break;
 8006fda:	e002      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_TIM_ConfigClockSource+0x1c>
 800700c:	2302      	movs	r3, #2
 800700e:	e0b4      	b.n	800717a <HAL_TIM_ConfigClockSource+0x186>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800702e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007048:	d03e      	beq.n	80070c8 <HAL_TIM_ConfigClockSource+0xd4>
 800704a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704e:	f200 8087 	bhi.w	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007056:	f000 8086 	beq.w	8007166 <HAL_TIM_ConfigClockSource+0x172>
 800705a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705e:	d87f      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b70      	cmp	r3, #112	; 0x70
 8007062:	d01a      	beq.n	800709a <HAL_TIM_ConfigClockSource+0xa6>
 8007064:	2b70      	cmp	r3, #112	; 0x70
 8007066:	d87b      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b60      	cmp	r3, #96	; 0x60
 800706a:	d050      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x11a>
 800706c:	2b60      	cmp	r3, #96	; 0x60
 800706e:	d877      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007070:	2b50      	cmp	r3, #80	; 0x50
 8007072:	d03c      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0xfa>
 8007074:	2b50      	cmp	r3, #80	; 0x50
 8007076:	d873      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d058      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x13a>
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d86f      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007080:	2b30      	cmp	r3, #48	; 0x30
 8007082:	d064      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 8007084:	2b30      	cmp	r3, #48	; 0x30
 8007086:	d86b      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007088:	2b20      	cmp	r3, #32
 800708a:	d060      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 800708c:	2b20      	cmp	r3, #32
 800708e:	d867      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d05c      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 8007094:	2b10      	cmp	r3, #16
 8007096:	d05a      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 8007098:	e062      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6899      	ldr	r1, [r3, #8]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f000 fcc1 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	609a      	str	r2, [r3, #8]
      break;
 80070c6:	e04f      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	6899      	ldr	r1, [r3, #8]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f000 fcaa 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070ea:	609a      	str	r2, [r3, #8]
      break;
 80070ec:	e03c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fb68 	bl	80077d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2150      	movs	r1, #80	; 0x50
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fc77 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 800710c:	e02c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	461a      	mov	r2, r3
 800711c:	f000 fbc4 	bl	80078a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2160      	movs	r1, #96	; 0x60
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fc67 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 800712c:	e01c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6859      	ldr	r1, [r3, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	461a      	mov	r2, r3
 800713c:	f000 fb48 	bl	80077d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2140      	movs	r1, #64	; 0x40
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fc57 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 800714c:	e00c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f000 fc4e 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 800715e:	e003      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
      break;
 8007164:	e000      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b0c      	cmp	r3, #12
 8007196:	d831      	bhi.n	80071fc <HAL_TIM_ReadCapturedValue+0x78>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071fd 	.word	0x080071fd
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	080071fd 	.word	0x080071fd
 80071b0:	080071df 	.word	0x080071df
 80071b4:	080071fd 	.word	0x080071fd
 80071b8:	080071fd 	.word	0x080071fd
 80071bc:	080071fd 	.word	0x080071fd
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071fd 	.word	0x080071fd
 80071c8:	080071fd 	.word	0x080071fd
 80071cc:	080071fd 	.word	0x080071fd
 80071d0:	080071f3 	.word	0x080071f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	60fb      	str	r3, [r7, #12]

      break;
 80071dc:	e00f      	b.n	80071fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	60fb      	str	r3, [r7, #12]

      break;
 80071e6:	e00a      	b.n	80071fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	60fb      	str	r3, [r7, #12]

      break;
 80071f0:	e005      	b.n	80071fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	60fb      	str	r3, [r7, #12]

      break;
 80071fa:	e000      	b.n	80071fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80071fc:	bf00      	nop
  }

  return tmpreg;
 80071fe:	68fb      	ldr	r3, [r7, #12]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a40      	ldr	r2, [pc, #256]	; (800735c <TIM_Base_SetConfig+0x114>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d013      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d00f      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3d      	ldr	r2, [pc, #244]	; (8007360 <TIM_Base_SetConfig+0x118>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00b      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <TIM_Base_SetConfig+0x11c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3b      	ldr	r2, [pc, #236]	; (8007368 <TIM_Base_SetConfig+0x120>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3a      	ldr	r2, [pc, #232]	; (800736c <TIM_Base_SetConfig+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2f      	ldr	r2, [pc, #188]	; (800735c <TIM_Base_SetConfig+0x114>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d02b      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d027      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <TIM_Base_SetConfig+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d023      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2b      	ldr	r2, [pc, #172]	; (8007364 <TIM_Base_SetConfig+0x11c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d01f      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2a      	ldr	r2, [pc, #168]	; (8007368 <TIM_Base_SetConfig+0x120>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01b      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a29      	ldr	r2, [pc, #164]	; (800736c <TIM_Base_SetConfig+0x124>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d017      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a28      	ldr	r2, [pc, #160]	; (8007370 <TIM_Base_SetConfig+0x128>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a27      	ldr	r2, [pc, #156]	; (8007374 <TIM_Base_SetConfig+0x12c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00f      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <TIM_Base_SetConfig+0x130>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00b      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a25      	ldr	r2, [pc, #148]	; (800737c <TIM_Base_SetConfig+0x134>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d007      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a24      	ldr	r2, [pc, #144]	; (8007380 <TIM_Base_SetConfig+0x138>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a23      	ldr	r2, [pc, #140]	; (8007384 <TIM_Base_SetConfig+0x13c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d108      	bne.n	800730c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a0a      	ldr	r2, [pc, #40]	; (800735c <TIM_Base_SetConfig+0x114>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0c      	ldr	r2, [pc, #48]	; (800736c <TIM_Base_SetConfig+0x124>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d103      	bne.n	8007348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	615a      	str	r2, [r3, #20]
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40010000 	.word	0x40010000
 8007360:	40000400 	.word	0x40000400
 8007364:	40000800 	.word	0x40000800
 8007368:	40000c00 	.word	0x40000c00
 800736c:	40010400 	.word	0x40010400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800
 800737c:	40001800 	.word	0x40001800
 8007380:	40001c00 	.word	0x40001c00
 8007384:	40002000 	.word	0x40002000

08007388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f023 0201 	bic.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f023 0302 	bic.w	r3, r3, #2
 80073d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a20      	ldr	r2, [pc, #128]	; (8007460 <TIM_OC1_SetConfig+0xd8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_OC1_SetConfig+0x64>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <TIM_OC1_SetConfig+0xdc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d10c      	bne.n	8007406 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f023 0308 	bic.w	r3, r3, #8
 80073f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f023 0304 	bic.w	r3, r3, #4
 8007404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a15      	ldr	r2, [pc, #84]	; (8007460 <TIM_OC1_SetConfig+0xd8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_OC1_SetConfig+0x8e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a14      	ldr	r2, [pc, #80]	; (8007464 <TIM_OC1_SetConfig+0xdc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d111      	bne.n	800743a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800741c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	40010000 	.word	0x40010000
 8007464:	40010400 	.word	0x40010400

08007468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0210 	bic.w	r2, r3, #16
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f023 0320 	bic.w	r3, r3, #32
 80074b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a22      	ldr	r2, [pc, #136]	; (800754c <TIM_OC2_SetConfig+0xe4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d003      	beq.n	80074d0 <TIM_OC2_SetConfig+0x68>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <TIM_OC2_SetConfig+0xe8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10d      	bne.n	80074ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a17      	ldr	r2, [pc, #92]	; (800754c <TIM_OC2_SetConfig+0xe4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_OC2_SetConfig+0x94>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <TIM_OC2_SetConfig+0xe8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d113      	bne.n	8007524 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800750a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40010400 	.word	0x40010400

08007554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800759c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a21      	ldr	r2, [pc, #132]	; (8007634 <TIM_OC3_SetConfig+0xe0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_OC3_SetConfig+0x66>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a20      	ldr	r2, [pc, #128]	; (8007638 <TIM_OC3_SetConfig+0xe4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10d      	bne.n	80075d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <TIM_OC3_SetConfig+0xe0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC3_SetConfig+0x92>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <TIM_OC3_SetConfig+0xe4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d113      	bne.n	800760e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	621a      	str	r2, [r3, #32]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40010000 	.word	0x40010000
 8007638:	40010400 	.word	0x40010400

0800763c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <TIM_OC4_SetConfig+0xa4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC4_SetConfig+0x68>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <TIM_OC4_SetConfig+0xa8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d109      	bne.n	80076b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	019b      	lsls	r3, r3, #6
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400

080076e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0201 	bic.w	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a28      	ldr	r2, [pc, #160]	; (80077b4 <TIM_TI1_SetConfig+0xcc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01b      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d017      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <TIM_TI1_SetConfig+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a24      	ldr	r2, [pc, #144]	; (80077bc <TIM_TI1_SetConfig+0xd4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00f      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a23      	ldr	r2, [pc, #140]	; (80077c0 <TIM_TI1_SetConfig+0xd8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00b      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <TIM_TI1_SetConfig+0xdc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a21      	ldr	r2, [pc, #132]	; (80077c8 <TIM_TI1_SetConfig+0xe0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d003      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <TIM_TI1_SetConfig+0xe4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d101      	bne.n	8007752 <TIM_TI1_SetConfig+0x6a>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <TIM_TI1_SetConfig+0x6c>
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d008      	beq.n	800776a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e003      	b.n	8007772 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	b2db      	uxtb	r3, r3
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f023 030a 	bic.w	r3, r3, #10
 800778c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f003 030a 	and.w	r3, r3, #10
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40010400 	.word	0x40010400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40001800 	.word	0x40001800

080077d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f023 0201 	bic.w	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 030a 	bic.w	r3, r3, #10
 800780c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	621a      	str	r2, [r3, #32]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800782e:	b480      	push	{r7}
 8007830:	b087      	sub	sp, #28
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f023 0210 	bic.w	r2, r3, #16
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800786c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	031b      	lsls	r3, r3, #12
 8007872:	b29b      	uxth	r3, r3
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007880:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f023 0210 	bic.w	r2, r3, #16
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	031b      	lsls	r3, r3, #12
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	621a      	str	r2, [r3, #32]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007944:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	b2db      	uxtb	r3, r3
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007958:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	621a      	str	r2, [r3, #32]
}
 8007974:	bf00      	nop
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	031b      	lsls	r3, r3, #12
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	031b      	lsls	r3, r3, #12
 80079d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f043 0307 	orr.w	r3, r3, #7
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	609a      	str	r2, [r3, #8]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	021a      	lsls	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 031f 	and.w	r3, r3, #31
 8007a82:	2201      	movs	r2, #1
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1a      	ldr	r2, [r3, #32]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e05a      	b.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b20:	d01d      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10c      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40010400 	.word	0x40010400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40001800 	.word	0x40001800

08007bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e03f      	b.n	8007c6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fa fc46 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fddf 	bl	80087e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b08a      	sub	sp, #40	; 0x28
 8007c7a:	af02      	add	r7, sp, #8
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	603b      	str	r3, [r7, #0]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d17c      	bne.n	8007d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_UART_Transmit+0x2c>
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e075      	b.n	8007d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_UART_Transmit+0x3e>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e06e      	b.n	8007d92 <HAL_UART_Transmit+0x11c>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2221      	movs	r2, #33	; 0x21
 8007cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cca:	f7fb f8bd 	bl	8002e48 <HAL_GetTick>
 8007cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	88fa      	ldrh	r2, [r7, #6]
 8007cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce4:	d108      	bne.n	8007cf8 <HAL_UART_Transmit+0x82>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	e003      	b.n	8007d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d08:	e02a      	b.n	8007d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2180      	movs	r1, #128	; 0x80
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fb1f 	bl	8008358 <UART_WaitOnFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e036      	b.n	8007d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	e007      	b.n	8007d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1cf      	bne.n	8007d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2140      	movs	r1, #64	; 0x40
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 faef 	bl	8008358 <UART_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e006      	b.n	8007d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d90:	2302      	movs	r3, #2
  }
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3720      	adds	r7, #32
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d11d      	bne.n	8007df0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_UART_Receive_IT+0x26>
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e016      	b.n	8007df2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_UART_Receive_IT+0x38>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e00f      	b.n	8007df2 <HAL_UART_Receive_IT+0x58>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	461a      	mov	r2, r3
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fb24 	bl	8008434 <UART_Start_Receive_IT>
 8007dec:	4603      	mov	r3, r0
 8007dee:	e000      	b.n	8007df2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b0ba      	sub	sp, #232	; 0xe8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <HAL_UART_IRQHandler+0x66>
 8007e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fc07 	bl	800866e <UART_Receive_IT>
      return;
 8007e60:	e256      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80de 	beq.w	8008028 <HAL_UART_IRQHandler+0x22c>
 8007e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80d1 	beq.w	8008028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <HAL_UART_IRQHandler+0xae>
 8007e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f043 0201 	orr.w	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <HAL_UART_IRQHandler+0xd2>
 8007eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	f043 0202 	orr.w	r2, r3, #2
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xf6>
 8007eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f043 0204 	orr.w	r2, r3, #4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef6:	f003 0308 	and.w	r3, r3, #8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d011      	beq.n	8007f22 <HAL_UART_IRQHandler+0x126>
 8007efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d105      	bne.n	8007f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	f043 0208 	orr.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 81ed 	beq.w	8008306 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_UART_IRQHandler+0x14e>
 8007f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fb92 	bl	800866e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <HAL_UART_IRQHandler+0x17a>
 8007f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d04f      	beq.n	8008016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa9a 	bl	80084b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d141      	bne.n	800800e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1d9      	bne.n	8007f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d013      	beq.n	8008006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	4a7d      	ldr	r2, [pc, #500]	; (80081d8 <HAL_UART_IRQHandler+0x3dc>)
 8007fe4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fb fd3a 	bl	8003a64 <HAL_DMA_Abort_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d016      	beq.n	8008024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	e00e      	b.n	8008024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f990 	bl	800832c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e00a      	b.n	8008024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f98c 	bl	800832c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	e006      	b.n	8008024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f988 	bl	800832c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008022:	e170      	b.n	8008306 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	bf00      	nop
    return;
 8008026:	e16e      	b.n	8008306 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 814a 	bne.w	80082c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8143 	beq.w	80082c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 813c 	beq.w	80082c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800804e:	2300      	movs	r3, #0
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	f040 80b4 	bne.w	80081dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8140 	beq.w	800830a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800808e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008092:	429a      	cmp	r2, r3
 8008094:	f080 8139 	bcs.w	800830a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800809e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	f000 8088 	beq.w	80081be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1d9      	bne.n	80080ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3314      	adds	r3, #20
 8008100:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800810a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3314      	adds	r3, #20
 800811a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800811e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008122:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008126:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e1      	bne.n	80080fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3314      	adds	r3, #20
 8008156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800815a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800815c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008160:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e3      	bne.n	8008136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800818c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80081a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e3      	bne.n	800817c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fb fbe3 	bl	8003984 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f8b6 	bl	8008340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081d4:	e099      	b.n	800830a <HAL_UART_IRQHandler+0x50e>
 80081d6:	bf00      	nop
 80081d8:	08008577 	.word	0x08008577
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 808b 	beq.w	800830e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8086 	beq.w	800830e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	330c      	adds	r3, #12
 8008208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008226:	647a      	str	r2, [r7, #68]	; 0x44
 8008228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800822c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e3      	bne.n	8008202 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3314      	adds	r3, #20
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	623b      	str	r3, [r7, #32]
   return(result);
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3314      	adds	r3, #20
 800825a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800825e:	633a      	str	r2, [r7, #48]	; 0x30
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e3      	bne.n	800823a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0310 	bic.w	r3, r3, #16
 8008296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082a4:	61fa      	str	r2, [r7, #28]
 80082a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	69b9      	ldr	r1, [r7, #24]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	617b      	str	r3, [r7, #20]
   return(result);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e3      	bne.n	8008280 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f83e 	bl	8008340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082c4:	e023      	b.n	800830e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <HAL_UART_IRQHandler+0x4ea>
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f95d 	bl	800859e <UART_Transmit_IT>
    return;
 80082e4:	e014      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00e      	beq.n	8008310 <HAL_UART_IRQHandler+0x514>
 80082f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f99d 	bl	800863e <UART_EndTransmit_IT>
    return;
 8008304:	e004      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
    return;
 8008306:	bf00      	nop
 8008308:	e002      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
      return;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <HAL_UART_IRQHandler+0x514>
      return;
 800830e:	bf00      	nop
  }
}
 8008310:	37e8      	adds	r7, #232	; 0xe8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop

08008318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b090      	sub	sp, #64	; 0x40
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008368:	e050      	b.n	800840c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d04c      	beq.n	800840c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008374:	2b00      	cmp	r3, #0
 8008376:	d007      	beq.n	8008388 <UART_WaitOnFlagUntilTimeout+0x30>
 8008378:	f7fa fd66 	bl	8002e48 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008384:	429a      	cmp	r2, r3
 8008386:	d241      	bcs.n	800840c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083a8:	637a      	str	r2, [r7, #52]	; 0x34
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e5      	bne.n	8008388 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3314      	adds	r3, #20
 80083c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	613b      	str	r3, [r7, #16]
   return(result);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3314      	adds	r3, #20
 80083da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083dc:	623a      	str	r2, [r7, #32]
 80083de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	69f9      	ldr	r1, [r7, #28]
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e00f      	b.n	800842c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4013      	ands	r3, r2
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	429a      	cmp	r2, r3
 800841a:	bf0c      	ite	eq
 800841c:	2301      	moveq	r3, #1
 800841e:	2300      	movne	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	429a      	cmp	r2, r3
 8008428:	d09f      	beq.n	800836a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3740      	adds	r7, #64	; 0x40
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2222      	movs	r2, #34	; 0x22
 800845e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008480:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	695a      	ldr	r2, [r3, #20]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0201 	orr.w	r2, r2, #1
 8008490:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0220 	orr.w	r2, r2, #32
 80084a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b095      	sub	sp, #84	; 0x54
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	330c      	adds	r3, #12
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084d8:	643a      	str	r2, [r7, #64]	; 0x40
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e5      	bne.n	80084b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3314      	adds	r3, #20
 80084f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	64bb      	str	r3, [r7, #72]	; 0x48
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3314      	adds	r3, #20
 800850a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800850c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008514:	e841 2300 	strex	r3, r2, [r1]
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e5      	bne.n	80084ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	2b01      	cmp	r3, #1
 8008526:	d119      	bne.n	800855c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	60bb      	str	r3, [r7, #8]
   return(result);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 0310 	bic.w	r3, r3, #16
 800853e:	647b      	str	r3, [r7, #68]	; 0x44
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008548:	61ba      	str	r2, [r7, #24]
 800854a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6979      	ldr	r1, [r7, #20]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	613b      	str	r3, [r7, #16]
   return(result);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800856a:	bf00      	nop
 800856c:	3754      	adds	r7, #84	; 0x54
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff fecb 	bl	800832c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b21      	cmp	r3, #33	; 0x21
 80085b0:	d13e      	bne.n	8008630 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	d114      	bne.n	80085e6 <UART_Transmit_IT+0x48>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d110      	bne.n	80085e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	1c9a      	adds	r2, r3, #2
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	621a      	str	r2, [r3, #32]
 80085e4:	e008      	b.n	80085f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	1c59      	adds	r1, r3, #1
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6211      	str	r1, [r2, #32]
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29b      	uxth	r3, r3
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4619      	mov	r1, r3
 8008606:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10f      	bne.n	800862c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800861a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800862a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	e000      	b.n	8008632 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008630:	2302      	movs	r3, #2
  }
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008654:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff fe5a 	bl	8008318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b08c      	sub	sp, #48	; 0x30
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b22      	cmp	r3, #34	; 0x22
 8008680:	f040 80ab 	bne.w	80087da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868c:	d117      	bne.n	80086be <UART_Receive_IT+0x50>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d113      	bne.n	80086be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	1c9a      	adds	r2, r3, #2
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	629a      	str	r2, [r3, #40]	; 0x28
 80086bc:	e026      	b.n	800870c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d0:	d007      	beq.n	80086e2 <UART_Receive_IT+0x74>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <UART_Receive_IT+0x82>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e008      	b.n	8008702 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29b      	uxth	r3, r3
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4619      	mov	r1, r3
 800871a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800871c:	2b00      	cmp	r3, #0
 800871e:	d15a      	bne.n	80087d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0220 	bic.w	r2, r2, #32
 800872e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800873e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	2b01      	cmp	r3, #1
 800875e:	d135      	bne.n	80087cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	330c      	adds	r3, #12
 800876c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	613b      	str	r3, [r7, #16]
   return(result);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f023 0310 	bic.w	r3, r3, #16
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	330c      	adds	r3, #12
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	623a      	str	r2, [r7, #32]
 8008788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	69f9      	ldr	r1, [r7, #28]
 800878c:	6a3a      	ldr	r2, [r7, #32]
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	61bb      	str	r3, [r7, #24]
   return(result);
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0310 	and.w	r3, r3, #16
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d10a      	bne.n	80087be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff fdbb 	bl	8008340 <HAL_UARTEx_RxEventCallback>
 80087ca:	e002      	b.n	80087d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7fa f90b 	bl	80029e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e002      	b.n	80087dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	e000      	b.n	80087dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087da:	2302      	movs	r3, #2
  }
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3730      	adds	r7, #48	; 0x30
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e8:	b0c0      	sub	sp, #256	; 0x100
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	68d9      	ldr	r1, [r3, #12]
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	ea40 0301 	orr.w	r3, r0, r1
 800880c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	431a      	orrs	r2, r3
 800881c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	431a      	orrs	r2, r3
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800883c:	f021 010c 	bic.w	r1, r1, #12
 8008840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800884a:	430b      	orrs	r3, r1
 800884c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800884e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800885a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885e:	6999      	ldr	r1, [r3, #24]
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	ea40 0301 	orr.w	r3, r0, r1
 800886a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b8f      	ldr	r3, [pc, #572]	; (8008ab0 <UART_SetConfig+0x2cc>)
 8008874:	429a      	cmp	r2, r3
 8008876:	d005      	beq.n	8008884 <UART_SetConfig+0xa0>
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	4b8d      	ldr	r3, [pc, #564]	; (8008ab4 <UART_SetConfig+0x2d0>)
 8008880:	429a      	cmp	r2, r3
 8008882:	d104      	bne.n	800888e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008884:	f7fd f8b0 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 8008888:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800888c:	e003      	b.n	8008896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800888e:	f7fd f897 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8008892:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a0:	f040 810c 	bne.w	8008abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80088b6:	4622      	mov	r2, r4
 80088b8:	462b      	mov	r3, r5
 80088ba:	1891      	adds	r1, r2, r2
 80088bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80088be:	415b      	adcs	r3, r3
 80088c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088c6:	4621      	mov	r1, r4
 80088c8:	eb12 0801 	adds.w	r8, r2, r1
 80088cc:	4629      	mov	r1, r5
 80088ce:	eb43 0901 	adc.w	r9, r3, r1
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088e6:	4690      	mov	r8, r2
 80088e8:	4699      	mov	r9, r3
 80088ea:	4623      	mov	r3, r4
 80088ec:	eb18 0303 	adds.w	r3, r8, r3
 80088f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088f4:	462b      	mov	r3, r5
 80088f6:	eb49 0303 	adc.w	r3, r9, r3
 80088fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800890a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800890e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008912:	460b      	mov	r3, r1
 8008914:	18db      	adds	r3, r3, r3
 8008916:	653b      	str	r3, [r7, #80]	; 0x50
 8008918:	4613      	mov	r3, r2
 800891a:	eb42 0303 	adc.w	r3, r2, r3
 800891e:	657b      	str	r3, [r7, #84]	; 0x54
 8008920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008928:	f7f7 fcb2 	bl	8000290 <__aeabi_uldivmod>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4b61      	ldr	r3, [pc, #388]	; (8008ab8 <UART_SetConfig+0x2d4>)
 8008932:	fba3 2302 	umull	r2, r3, r3, r2
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	011c      	lsls	r4, r3, #4
 800893a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800893e:	2200      	movs	r2, #0
 8008940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008944:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	1891      	adds	r1, r2, r2
 8008952:	64b9      	str	r1, [r7, #72]	; 0x48
 8008954:	415b      	adcs	r3, r3
 8008956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800895c:	4641      	mov	r1, r8
 800895e:	eb12 0a01 	adds.w	sl, r2, r1
 8008962:	4649      	mov	r1, r9
 8008964:	eb43 0b01 	adc.w	fp, r3, r1
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800897c:	4692      	mov	sl, r2
 800897e:	469b      	mov	fp, r3
 8008980:	4643      	mov	r3, r8
 8008982:	eb1a 0303 	adds.w	r3, sl, r3
 8008986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800898a:	464b      	mov	r3, r9
 800898c:	eb4b 0303 	adc.w	r3, fp, r3
 8008990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80089a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80089a8:	460b      	mov	r3, r1
 80089aa:	18db      	adds	r3, r3, r3
 80089ac:	643b      	str	r3, [r7, #64]	; 0x40
 80089ae:	4613      	mov	r3, r2
 80089b0:	eb42 0303 	adc.w	r3, r2, r3
 80089b4:	647b      	str	r3, [r7, #68]	; 0x44
 80089b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80089be:	f7f7 fc67 	bl	8000290 <__aeabi_uldivmod>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	4b3b      	ldr	r3, [pc, #236]	; (8008ab8 <UART_SetConfig+0x2d4>)
 80089ca:	fba3 2301 	umull	r2, r3, r3, r1
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	2264      	movs	r2, #100	; 0x64
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	1acb      	subs	r3, r1, r3
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089de:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <UART_SetConfig+0x2d4>)
 80089e0:	fba3 2302 	umull	r2, r3, r3, r2
 80089e4:	095b      	lsrs	r3, r3, #5
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089ec:	441c      	add	r4, r3
 80089ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a00:	4642      	mov	r2, r8
 8008a02:	464b      	mov	r3, r9
 8008a04:	1891      	adds	r1, r2, r2
 8008a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a08:	415b      	adcs	r3, r3
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a10:	4641      	mov	r1, r8
 8008a12:	1851      	adds	r1, r2, r1
 8008a14:	6339      	str	r1, [r7, #48]	; 0x30
 8008a16:	4649      	mov	r1, r9
 8008a18:	414b      	adcs	r3, r1
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a28:	4659      	mov	r1, fp
 8008a2a:	00cb      	lsls	r3, r1, #3
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a32:	4651      	mov	r1, sl
 8008a34:	00ca      	lsls	r2, r1, #3
 8008a36:	4610      	mov	r0, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	189b      	adds	r3, r3, r2
 8008a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a44:	464b      	mov	r3, r9
 8008a46:	460a      	mov	r2, r1
 8008a48:	eb42 0303 	adc.w	r3, r2, r3
 8008a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a64:	460b      	mov	r3, r1
 8008a66:	18db      	adds	r3, r3, r3
 8008a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	eb42 0303 	adc.w	r3, r2, r3
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a7a:	f7f7 fc09 	bl	8000290 <__aeabi_uldivmod>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <UART_SetConfig+0x2d4>)
 8008a84:	fba3 1302 	umull	r1, r3, r3, r2
 8008a88:	095b      	lsrs	r3, r3, #5
 8008a8a:	2164      	movs	r1, #100	; 0x64
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	3332      	adds	r3, #50	; 0x32
 8008a96:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <UART_SetConfig+0x2d4>)
 8008a98:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9c:	095b      	lsrs	r3, r3, #5
 8008a9e:	f003 0207 	and.w	r2, r3, #7
 8008aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4422      	add	r2, r4
 8008aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008aac:	e105      	b.n	8008cba <UART_SetConfig+0x4d6>
 8008aae:	bf00      	nop
 8008ab0:	40011000 	.word	0x40011000
 8008ab4:	40011400 	.word	0x40011400
 8008ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ace:	4642      	mov	r2, r8
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	1891      	adds	r1, r2, r2
 8008ad4:	6239      	str	r1, [r7, #32]
 8008ad6:	415b      	adcs	r3, r3
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8008ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ade:	4641      	mov	r1, r8
 8008ae0:	1854      	adds	r4, r2, r1
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	eb43 0501 	adc.w	r5, r3, r1
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	00eb      	lsls	r3, r5, #3
 8008af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008af6:	00e2      	lsls	r2, r4, #3
 8008af8:	4614      	mov	r4, r2
 8008afa:	461d      	mov	r5, r3
 8008afc:	4643      	mov	r3, r8
 8008afe:	18e3      	adds	r3, r4, r3
 8008b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b04:	464b      	mov	r3, r9
 8008b06:	eb45 0303 	adc.w	r3, r5, r3
 8008b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	008b      	lsls	r3, r1, #2
 8008b2e:	4621      	mov	r1, r4
 8008b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b34:	4621      	mov	r1, r4
 8008b36:	008a      	lsls	r2, r1, #2
 8008b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b3c:	f7f7 fba8 	bl	8000290 <__aeabi_uldivmod>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4b60      	ldr	r3, [pc, #384]	; (8008cc8 <UART_SetConfig+0x4e4>)
 8008b46:	fba3 2302 	umull	r2, r3, r3, r2
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	011c      	lsls	r4, r3, #4
 8008b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	1891      	adds	r1, r2, r2
 8008b66:	61b9      	str	r1, [r7, #24]
 8008b68:	415b      	adcs	r3, r3
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b70:	4641      	mov	r1, r8
 8008b72:	1851      	adds	r1, r2, r1
 8008b74:	6139      	str	r1, [r7, #16]
 8008b76:	4649      	mov	r1, r9
 8008b78:	414b      	adcs	r3, r1
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b88:	4659      	mov	r1, fp
 8008b8a:	00cb      	lsls	r3, r1, #3
 8008b8c:	4651      	mov	r1, sl
 8008b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b92:	4651      	mov	r1, sl
 8008b94:	00ca      	lsls	r2, r1, #3
 8008b96:	4610      	mov	r0, r2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	189b      	adds	r3, r3, r2
 8008ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	460a      	mov	r2, r1
 8008ba8:	eb42 0303 	adc.w	r3, r2, r3
 8008bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008bc8:	4649      	mov	r1, r9
 8008bca:	008b      	lsls	r3, r1, #2
 8008bcc:	4641      	mov	r1, r8
 8008bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	008a      	lsls	r2, r1, #2
 8008bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bda:	f7f7 fb59 	bl	8000290 <__aeabi_uldivmod>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4b39      	ldr	r3, [pc, #228]	; (8008cc8 <UART_SetConfig+0x4e4>)
 8008be4:	fba3 1302 	umull	r1, r3, r3, r2
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	2164      	movs	r1, #100	; 0x64
 8008bec:	fb01 f303 	mul.w	r3, r1, r3
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	3332      	adds	r3, #50	; 0x32
 8008bf6:	4a34      	ldr	r2, [pc, #208]	; (8008cc8 <UART_SetConfig+0x4e4>)
 8008bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfc:	095b      	lsrs	r3, r3, #5
 8008bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c02:	441c      	add	r4, r3
 8008c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c08:	2200      	movs	r2, #0
 8008c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c0c:	677a      	str	r2, [r7, #116]	; 0x74
 8008c0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c12:	4642      	mov	r2, r8
 8008c14:	464b      	mov	r3, r9
 8008c16:	1891      	adds	r1, r2, r2
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	415b      	adcs	r3, r3
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c22:	4641      	mov	r1, r8
 8008c24:	1851      	adds	r1, r2, r1
 8008c26:	6039      	str	r1, [r7, #0]
 8008c28:	4649      	mov	r1, r9
 8008c2a:	414b      	adcs	r3, r1
 8008c2c:	607b      	str	r3, [r7, #4]
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	00cb      	lsls	r3, r1, #3
 8008c3e:	4651      	mov	r1, sl
 8008c40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c44:	4651      	mov	r1, sl
 8008c46:	00ca      	lsls	r2, r1, #3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4642      	mov	r2, r8
 8008c50:	189b      	adds	r3, r3, r2
 8008c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c54:	464b      	mov	r3, r9
 8008c56:	460a      	mov	r2, r1
 8008c58:	eb42 0303 	adc.w	r3, r2, r3
 8008c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	663b      	str	r3, [r7, #96]	; 0x60
 8008c68:	667a      	str	r2, [r7, #100]	; 0x64
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c76:	4649      	mov	r1, r9
 8008c78:	008b      	lsls	r3, r1, #2
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c80:	4641      	mov	r1, r8
 8008c82:	008a      	lsls	r2, r1, #2
 8008c84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c88:	f7f7 fb02 	bl	8000290 <__aeabi_uldivmod>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <UART_SetConfig+0x4e4>)
 8008c92:	fba3 1302 	umull	r1, r3, r3, r2
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	2164      	movs	r1, #100	; 0x64
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	3332      	adds	r3, #50	; 0x32
 8008ca4:	4a08      	ldr	r2, [pc, #32]	; (8008cc8 <UART_SetConfig+0x4e4>)
 8008ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	f003 020f 	and.w	r2, r3, #15
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4422      	add	r2, r4
 8008cb8:	609a      	str	r2, [r3, #8]
}
 8008cba:	bf00      	nop
 8008cbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cc6:	bf00      	nop
 8008cc8:	51eb851f 	.word	0x51eb851f

08008ccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ccc:	b084      	sub	sp, #16
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	f107 001c 	add.w	r0, r7, #28
 8008cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d122      	bne.n	8008d2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 faa2 	bl	8009268 <USB_CoreReset>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
 8008d28:	e01a      	b.n	8008d60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa96 	bl	8009268 <USB_CoreReset>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	639a      	str	r2, [r3, #56]	; 0x38
 8008d52:	e005      	b.n	8008d60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d10b      	bne.n	8008d7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f043 0206 	orr.w	r2, r3, #6
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f043 0220 	orr.w	r2, r3, #32
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d8a:	b004      	add	sp, #16
 8008d8c:	4770      	bx	lr

08008d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f023 0201 	bic.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d115      	bne.n	8008dfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008dde:	2001      	movs	r0, #1
 8008de0:	f7fa f83e 	bl	8002e60 <HAL_Delay>
      ms++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa2e 	bl	800924c <USB_GetMode>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d01e      	beq.n	8008e34 <USB_SetCurrentMode+0x84>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b31      	cmp	r3, #49	; 0x31
 8008dfa:	d9f0      	bls.n	8008dde <USB_SetCurrentMode+0x2e>
 8008dfc:	e01a      	b.n	8008e34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d115      	bne.n	8008e30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e10:	2001      	movs	r0, #1
 8008e12:	f7fa f825 	bl	8002e60 <HAL_Delay>
      ms++;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fa15 	bl	800924c <USB_GetMode>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <USB_SetCurrentMode+0x84>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b31      	cmp	r3, #49	; 0x31
 8008e2c:	d9f0      	bls.n	8008e10 <USB_SetCurrentMode+0x60>
 8008e2e:	e001      	b.n	8008e34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e005      	b.n	8008e40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b32      	cmp	r3, #50	; 0x32
 8008e38:	d101      	bne.n	8008e3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e48:	b084      	sub	sp, #16
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e009      	b.n	8008e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	3340      	adds	r3, #64	; 0x40
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	2200      	movs	r2, #0
 8008e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	613b      	str	r3, [r7, #16]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	2b0e      	cmp	r3, #14
 8008e80:	d9f2      	bls.n	8008e68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11c      	bne.n	8008ec2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e96:	f043 0302 	orr.w	r3, r3, #2
 8008e9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8008ec0:	e00b      	b.n	8008eda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eec:	4619      	mov	r1, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	680b      	ldr	r3, [r1, #0]
 8008ef8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d10c      	bne.n	8008f1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d104      	bne.n	8008f10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f06:	2100      	movs	r1, #0
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f965 	bl	80091d8 <USB_SetDevSpeed>
 8008f0e:	e008      	b.n	8008f22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f10:	2101      	movs	r1, #1
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f960 	bl	80091d8 <USB_SetDevSpeed>
 8008f18:	e003      	b.n	8008f22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f1a:	2103      	movs	r1, #3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f95b 	bl	80091d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f22:	2110      	movs	r1, #16
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f8f3 	bl	8009110 <USB_FlushTxFifo>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f91f 	bl	8009178 <USB_FlushRxFifo>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f56:	461a      	mov	r2, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f62:	461a      	mov	r2, r3
 8008f64:	2300      	movs	r3, #0
 8008f66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	e043      	b.n	8008ff6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f84:	d118      	bne.n	8008fb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f98:	461a      	mov	r2, r3
 8008f9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	e013      	b.n	8008fca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	e008      	b.n	8008fca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2300      	movs	r3, #0
 8008fda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	613b      	str	r3, [r7, #16]
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d3b7      	bcc.n	8008f6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ffe:	2300      	movs	r3, #0
 8009000:	613b      	str	r3, [r7, #16]
 8009002:	e043      	b.n	800908c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800901a:	d118      	bne.n	800904e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	461a      	mov	r2, r3
 8009030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e013      	b.n	8009060 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009044:	461a      	mov	r2, r3
 8009046:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	e008      	b.n	8009060 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	461a      	mov	r2, r3
 800905c:	2300      	movs	r3, #0
 800905e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906c:	461a      	mov	r2, r3
 800906e:	2300      	movs	r3, #0
 8009070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907e:	461a      	mov	r2, r3
 8009080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	429a      	cmp	r2, r3
 8009092:	d3b7      	bcc.n	8009004 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	f043 0210 	orr.w	r2, r3, #16
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	4b0f      	ldr	r3, [pc, #60]	; (800910c <USB_DevInit+0x2c4>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f043 0208 	orr.w	r2, r3, #8
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d107      	bne.n	80090fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f4:	f043 0304 	orr.w	r3, r3, #4
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009108:	b004      	add	sp, #16
 800910a:	4770      	bx	lr
 800910c:	803c3800 	.word	0x803c3800

08009110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4a13      	ldr	r2, [pc, #76]	; (8009174 <USB_FlushTxFifo+0x64>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d901      	bls.n	8009130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e01b      	b.n	8009168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	daf2      	bge.n	800911e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	019b      	lsls	r3, r3, #6
 8009140:	f043 0220 	orr.w	r2, r3, #32
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4a08      	ldr	r2, [pc, #32]	; (8009174 <USB_FlushTxFifo+0x64>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d901      	bls.n	800915a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e006      	b.n	8009168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b20      	cmp	r3, #32
 8009164:	d0f0      	beq.n	8009148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	00030d40 	.word	0x00030d40

08009178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4a11      	ldr	r2, [pc, #68]	; (80091d4 <USB_FlushRxFifo+0x5c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d901      	bls.n	8009196 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e018      	b.n	80091c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	daf2      	bge.n	8009184 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2210      	movs	r2, #16
 80091a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4a08      	ldr	r2, [pc, #32]	; (80091d4 <USB_FlushRxFifo+0x5c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d901      	bls.n	80091ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e006      	b.n	80091c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d0f0      	beq.n	80091a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	00030d40 	.word	0x00030d40

080091d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f8:	4313      	orrs	r3, r2
 80091fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009224:	f023 0303 	bic.w	r3, r3, #3
 8009228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009238:	f043 0302 	orr.w	r3, r3, #2
 800923c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f003 0301 	and.w	r3, r3, #1
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4a13      	ldr	r2, [pc, #76]	; (80092cc <USB_CoreReset+0x64>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e01b      	b.n	80092be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	daf2      	bge.n	8009274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f043 0201 	orr.w	r2, r3, #1
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a09      	ldr	r2, [pc, #36]	; (80092cc <USB_CoreReset+0x64>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d901      	bls.n	80092b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e006      	b.n	80092be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d0f0      	beq.n	800929e <USB_CoreReset+0x36>

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	00030d40 	.word	0x00030d40

080092d0 <__NVIC_SetPriority>:
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db0a      	blt.n	80092fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	490c      	ldr	r1, [pc, #48]	; (800931c <__NVIC_SetPriority+0x4c>)
 80092ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ee:	0112      	lsls	r2, r2, #4
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	440b      	add	r3, r1
 80092f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092f8:	e00a      	b.n	8009310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	4908      	ldr	r1, [pc, #32]	; (8009320 <__NVIC_SetPriority+0x50>)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	3b04      	subs	r3, #4
 8009308:	0112      	lsls	r2, r2, #4
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	440b      	add	r3, r1
 800930e:	761a      	strb	r2, [r3, #24]
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	e000e100 	.word	0xe000e100
 8009320:	e000ed00 	.word	0xe000ed00

08009324 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009328:	4b05      	ldr	r3, [pc, #20]	; (8009340 <SysTick_Handler+0x1c>)
 800932a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800932c:	f002 f85a 	bl	800b3e4 <xTaskGetSchedulerState>
 8009330:	4603      	mov	r3, r0
 8009332:	2b01      	cmp	r3, #1
 8009334:	d001      	beq.n	800933a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009336:	f002 ff3f 	bl	800c1b8 <xPortSysTickHandler>
  }
}
 800933a:	bf00      	nop
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	e000e010 	.word	0xe000e010

08009344 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009348:	2100      	movs	r1, #0
 800934a:	f06f 0004 	mvn.w	r0, #4
 800934e:	f7ff ffbf 	bl	80092d0 <__NVIC_SetPriority>
#endif
}
 8009352:	bf00      	nop
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800935e:	f3ef 8305 	mrs	r3, IPSR
 8009362:	603b      	str	r3, [r7, #0]
  return(result);
 8009364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800936a:	f06f 0305 	mvn.w	r3, #5
 800936e:	607b      	str	r3, [r7, #4]
 8009370:	e00c      	b.n	800938c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <osKernelInitialize+0x44>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800937a:	4b08      	ldr	r3, [pc, #32]	; (800939c <osKernelInitialize+0x44>)
 800937c:	2201      	movs	r2, #1
 800937e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009380:	2300      	movs	r3, #0
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	e002      	b.n	800938c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800938c:	687b      	ldr	r3, [r7, #4]
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000ebc 	.word	0x20000ebc

080093a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a6:	f3ef 8305 	mrs	r3, IPSR
 80093aa:	603b      	str	r3, [r7, #0]
  return(result);
 80093ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80093b2:	f06f 0305 	mvn.w	r3, #5
 80093b6:	607b      	str	r3, [r7, #4]
 80093b8:	e010      	b.n	80093dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093ba:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <osKernelStart+0x48>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d109      	bne.n	80093d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093c2:	f7ff ffbf 	bl	8009344 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093c6:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <osKernelStart+0x48>)
 80093c8:	2202      	movs	r2, #2
 80093ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093cc:	f001 fb9e 	bl	800ab0c <vTaskStartScheduler>
      stat = osOK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	e002      	b.n	80093dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093dc:	687b      	ldr	r3, [r7, #4]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000ebc 	.word	0x20000ebc

080093ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08e      	sub	sp, #56	; 0x38
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093fc:	f3ef 8305 	mrs	r3, IPSR
 8009400:	617b      	str	r3, [r7, #20]
  return(result);
 8009402:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009404:	2b00      	cmp	r3, #0
 8009406:	d17e      	bne.n	8009506 <osThreadNew+0x11a>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d07b      	beq.n	8009506 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800940e:	2380      	movs	r3, #128	; 0x80
 8009410:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009412:	2318      	movs	r3, #24
 8009414:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295
 800941e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d045      	beq.n	80094b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <osThreadNew+0x48>
        name = attr->name;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d008      	beq.n	800945a <osThreadNew+0x6e>
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b38      	cmp	r3, #56	; 0x38
 800944c:	d805      	bhi.n	800945a <osThreadNew+0x6e>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <osThreadNew+0x72>
        return (NULL);
 800945a:	2300      	movs	r3, #0
 800945c:	e054      	b.n	8009508 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	089b      	lsrs	r3, r3, #2
 800946c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00e      	beq.n	8009494 <osThreadNew+0xa8>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	2bbb      	cmp	r3, #187	; 0xbb
 800947c:	d90a      	bls.n	8009494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009482:	2b00      	cmp	r3, #0
 8009484:	d006      	beq.n	8009494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <osThreadNew+0xa8>
        mem = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e010      	b.n	80094b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10c      	bne.n	80094b6 <osThreadNew+0xca>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d108      	bne.n	80094b6 <osThreadNew+0xca>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <osThreadNew+0xca>
          mem = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	e001      	b.n	80094b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d110      	bne.n	80094de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094c4:	9202      	str	r2, [sp, #8]
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f001 f92e 	bl	800a734 <xTaskCreateStatic>
 80094d8:	4603      	mov	r3, r0
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	e013      	b.n	8009506 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d110      	bne.n	8009506 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	f107 0310 	add.w	r3, r7, #16
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f001 f979 	bl	800a7ee <xTaskCreate>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d001      	beq.n	8009506 <osThreadNew+0x11a>
            hTask = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009506:	693b      	ldr	r3, [r7, #16]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3728      	adds	r7, #40	; 0x28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009518:	f3ef 8305 	mrs	r3, IPSR
 800951c:	60bb      	str	r3, [r7, #8]
  return(result);
 800951e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <osDelay+0x1c>
    stat = osErrorISR;
 8009524:	f06f 0305 	mvn.w	r3, #5
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e007      	b.n	800953c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fab4 	bl	800aaa4 <vTaskDelay>
    }
  }

  return (stat);
 800953c:	68fb      	ldr	r3, [r7, #12]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009546:	b580      	push	{r7, lr}
 8009548:	b088      	sub	sp, #32
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009552:	f3ef 8305 	mrs	r3, IPSR
 8009556:	60bb      	str	r3, [r7, #8]
  return(result);
 8009558:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800955a:	2b00      	cmp	r3, #0
 800955c:	d174      	bne.n	8009648 <osMutexNew+0x102>
    if (attr != NULL) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <osMutexNew+0x26>
      type = attr->attr_bits;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e001      	b.n	8009570 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <osMutexNew+0x3a>
      rmtx = 1U;
 800957a:	2301      	movs	r3, #1
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e001      	b.n	8009584 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d15c      	bne.n	8009648 <osMutexNew+0x102>
      mem = -1;
 800958e:	f04f 33ff 	mov.w	r3, #4294967295
 8009592:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d015      	beq.n	80095c6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <osMutexNew+0x6a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b4f      	cmp	r3, #79	; 0x4f
 80095a8:	d902      	bls.n	80095b0 <osMutexNew+0x6a>
          mem = 1;
 80095aa:	2301      	movs	r3, #1
 80095ac:	613b      	str	r3, [r7, #16]
 80095ae:	e00c      	b.n	80095ca <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d108      	bne.n	80095ca <osMutexNew+0x84>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d104      	bne.n	80095ca <osMutexNew+0x84>
            mem = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	613b      	str	r3, [r7, #16]
 80095c4:	e001      	b.n	80095ca <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d112      	bne.n	80095f6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	4619      	mov	r1, r3
 80095dc:	2004      	movs	r0, #4
 80095de:	f000 fb18 	bl	8009c12 <xQueueCreateMutexStatic>
 80095e2:	61f8      	str	r0, [r7, #28]
 80095e4:	e016      	b.n	8009614 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	4619      	mov	r1, r3
 80095ec:	2001      	movs	r0, #1
 80095ee:	f000 fb10 	bl	8009c12 <xQueueCreateMutexStatic>
 80095f2:	61f8      	str	r0, [r7, #28]
 80095f4:	e00e      	b.n	8009614 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10b      	bne.n	8009614 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009602:	2004      	movs	r0, #4
 8009604:	f000 faed 	bl	8009be2 <xQueueCreateMutex>
 8009608:	61f8      	str	r0, [r7, #28]
 800960a:	e003      	b.n	8009614 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800960c:	2001      	movs	r0, #1
 800960e:	f000 fae8 	bl	8009be2 <xQueueCreateMutex>
 8009612:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00c      	beq.n	8009634 <osMutexNew+0xee>
        if (attr != NULL) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <osMutexNew+0xe2>
          name = attr->name;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	e001      	b.n	800962c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800962c:	68f9      	ldr	r1, [r7, #12]
 800962e:	69f8      	ldr	r0, [r7, #28]
 8009630:	f001 f822 	bl	800a678 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d006      	beq.n	8009648 <osMutexNew+0x102>
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f043 0301 	orr.w	r3, r3, #1
 8009646:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009648:	69fb      	ldr	r3, [r7, #28]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f023 0301 	bic.w	r3, r3, #1
 8009662:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009670:	f3ef 8305 	mrs	r3, IPSR
 8009674:	60bb      	str	r3, [r7, #8]
  return(result);
 8009676:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800967c:	f06f 0305 	mvn.w	r3, #5
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e02c      	b.n	80096de <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d103      	bne.n	8009692 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800968a:	f06f 0303 	mvn.w	r3, #3
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	e025      	b.n	80096de <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d011      	beq.n	80096bc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f000 fb08 	bl	8009cb0 <xQueueTakeMutexRecursive>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d01b      	beq.n	80096de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80096ac:	f06f 0301 	mvn.w	r3, #1
 80096b0:	617b      	str	r3, [r7, #20]
 80096b2:	e014      	b.n	80096de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80096b4:	f06f 0302 	mvn.w	r3, #2
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e010      	b.n	80096de <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6938      	ldr	r0, [r7, #16]
 80096c0:	f000 fda6 	bl	800a210 <xQueueSemaphoreTake>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d009      	beq.n	80096de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80096d0:	f06f 0301 	mvn.w	r3, #1
 80096d4:	617b      	str	r3, [r7, #20]
 80096d6:	e002      	b.n	80096de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80096d8:	f06f 0302 	mvn.w	r3, #2
 80096dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80096de:	697b      	ldr	r3, [r7, #20]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009704:	f3ef 8305 	mrs	r3, IPSR
 8009708:	60bb      	str	r3, [r7, #8]
  return(result);
 800970a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <osMutexRelease+0x30>
    stat = osErrorISR;
 8009710:	f06f 0305 	mvn.w	r3, #5
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e01f      	b.n	8009758 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d103      	bne.n	8009726 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800971e:	f06f 0303 	mvn.w	r3, #3
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e018      	b.n	8009758 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800972c:	6938      	ldr	r0, [r7, #16]
 800972e:	f000 fa8b 	bl	8009c48 <xQueueGiveMutexRecursive>
 8009732:	4603      	mov	r3, r0
 8009734:	2b01      	cmp	r3, #1
 8009736:	d00f      	beq.n	8009758 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009738:	f06f 0302 	mvn.w	r3, #2
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e00b      	b.n	8009758 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009740:	2300      	movs	r3, #0
 8009742:	2200      	movs	r2, #0
 8009744:	2100      	movs	r1, #0
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f000 fae8 	bl	8009d1c <xQueueGenericSend>
 800974c:	4603      	mov	r3, r0
 800974e:	2b01      	cmp	r3, #1
 8009750:	d002      	beq.n	8009758 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009752:	f06f 0302 	mvn.w	r3, #2
 8009756:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009758:	697b      	ldr	r3, [r7, #20]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a07      	ldr	r2, [pc, #28]	; (8009790 <vApplicationGetIdleTaskMemory+0x2c>)
 8009774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4a06      	ldr	r2, [pc, #24]	; (8009794 <vApplicationGetIdleTaskMemory+0x30>)
 800977a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2280      	movs	r2, #128	; 0x80
 8009780:	601a      	str	r2, [r3, #0]
}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000ec0 	.word	0x20000ec0
 8009794:	20000f7c 	.word	0x20000f7c

08009798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4a07      	ldr	r2, [pc, #28]	; (80097c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80097a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4a06      	ldr	r2, [pc, #24]	; (80097c8 <vApplicationGetTimerTaskMemory+0x30>)
 80097ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097b6:	601a      	str	r2, [r3, #0]
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	2000117c 	.word	0x2000117c
 80097c8:	20001238 	.word	0x20001238

080097cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f103 0208 	add.w	r2, r3, #8
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f04f 32ff 	mov.w	r2, #4294967295
 80097e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f103 0208 	add.w	r2, r3, #8
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f103 0208 	add.w	r2, r3, #8
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800981a:	bf00      	nop
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	601a      	str	r2, [r3, #0]
}
 8009862:	bf00      	nop
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009884:	d103      	bne.n	800988e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	e00c      	b.n	80098a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3308      	adds	r3, #8
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	e002      	b.n	800989c <vListInsert+0x2e>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d2f6      	bcs.n	8009896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6892      	ldr	r2, [r2, #8]
 80098f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6852      	ldr	r2, [r2, #4]
 8009900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d103      	bne.n	8009914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	1e5a      	subs	r2, r3, #1
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800995e:	f002 fb99 	bl	800c094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	441a      	add	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998e:	3b01      	subs	r3, #1
 8009990:	68f9      	ldr	r1, [r7, #12]
 8009992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009994:	fb01 f303 	mul.w	r3, r1, r3
 8009998:	441a      	add	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	22ff      	movs	r2, #255	; 0xff
 80099a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	22ff      	movs	r2, #255	; 0xff
 80099aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d114      	bne.n	80099de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01a      	beq.n	80099f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3310      	adds	r3, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 fb3d 	bl	800b040 <xTaskRemoveFromEventList>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d012      	beq.n	80099f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099cc:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <xQueueGenericReset+0xcc>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	e009      	b.n	80099f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3310      	adds	r3, #16
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fef2 	bl	80097cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3324      	adds	r3, #36	; 0x24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff feed 	bl	80097cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099f2:	f002 fb7f 	bl	800c0f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099f6:	2301      	movs	r3, #1
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08e      	sub	sp, #56	; 0x38
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10a      	bne.n	8009a2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a2a:	bf00      	nop
 8009a2c:	e7fe      	b.n	8009a2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <xQueueGenericCreateStatic+0x52>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <xQueueGenericCreateStatic+0x56>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <xQueueGenericCreateStatic+0x58>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	623b      	str	r3, [r7, #32]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <xQueueGenericCreateStatic+0x7e>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <xQueueGenericCreateStatic+0x82>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <xQueueGenericCreateStatic+0x84>
 8009a86:	2300      	movs	r3, #0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	61fb      	str	r3, [r7, #28]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009aa2:	2350      	movs	r3, #80	; 0x50
 8009aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b50      	cmp	r3, #80	; 0x50
 8009aaa:	d00a      	beq.n	8009ac2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61bb      	str	r3, [r7, #24]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ac2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00d      	beq.n	8009aea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ad6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f83f 	bl	8009b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3730      	adds	r7, #48	; 0x30
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08a      	sub	sp, #40	; 0x28
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	4613      	mov	r3, r2
 8009b00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10a      	bne.n	8009b1e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	613b      	str	r3, [r7, #16]
}
 8009b1a:	bf00      	nop
 8009b1c:	e7fe      	b.n	8009b1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	fb02 f303 	mul.w	r3, r2, r3
 8009b26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	3350      	adds	r3, #80	; 0x50
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 fbd3 	bl	800c2d8 <pvPortMalloc>
 8009b32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d011      	beq.n	8009b5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	3350      	adds	r3, #80	; 0x50
 8009b42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b4c:	79fa      	ldrb	r2, [r7, #7]
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	4613      	mov	r3, r2
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f805 	bl	8009b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3720      	adds	r7, #32
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d103      	bne.n	8009b84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e002      	b.n	8009b8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b96:	2101      	movs	r1, #1
 8009b98:	69b8      	ldr	r0, [r7, #24]
 8009b9a:	f7ff fecb 	bl	8009934 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	78fa      	ldrb	r2, [r7, #3]
 8009ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00e      	beq.n	8009bda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f8a1 	bl	8009d1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	4603      	mov	r3, r0
 8009bea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009bec:	2301      	movs	r3, #1
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6939      	ldr	r1, [r7, #16]
 8009bfa:	6978      	ldr	r0, [r7, #20]
 8009bfc:	f7ff ff7a 	bl	8009af4 <xQueueGenericCreate>
 8009c00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff ffd3 	bl	8009bae <prvInitialiseMutex>

		return xNewQueue;
 8009c08:	68fb      	ldr	r3, [r7, #12]
	}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b088      	sub	sp, #32
 8009c16:	af02      	add	r7, sp, #8
 8009c18:	4603      	mov	r3, r0
 8009c1a:	6039      	str	r1, [r7, #0]
 8009c1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	2300      	movs	r3, #0
 8009c24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	6939      	ldr	r1, [r7, #16]
 8009c30:	6978      	ldr	r0, [r7, #20]
 8009c32:	f7ff fee7 	bl	8009a04 <xQueueGenericCreateStatic>
 8009c36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f7ff ffb8 	bl	8009bae <prvInitialiseMutex>

		return xNewQueue;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009c48:	b590      	push	{r4, r7, lr}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	60fb      	str	r3, [r7, #12]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	689c      	ldr	r4, [r3, #8]
 8009c74:	f001 fba6 	bl	800b3c4 <xTaskGetCurrentTaskHandle>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	429c      	cmp	r4, r3
 8009c7c:	d111      	bne.n	8009ca2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	1e5a      	subs	r2, r3, #1
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d105      	bne.n	8009c9c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009c90:	2300      	movs	r3, #0
 8009c92:	2200      	movs	r2, #0
 8009c94:	2100      	movs	r1, #0
 8009c96:	6938      	ldr	r0, [r7, #16]
 8009c98:	f000 f840 	bl	8009d1c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e001      	b.n	8009ca6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009ca6:	697b      	ldr	r3, [r7, #20]
	}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	371c      	adds	r7, #28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd90      	pop	{r4, r7, pc}

08009cb0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	60fb      	str	r3, [r7, #12]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	689c      	ldr	r4, [r3, #8]
 8009cde:	f001 fb71 	bl	800b3c4 <xTaskGetCurrentTaskHandle>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d107      	bne.n	8009cf8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	617b      	str	r3, [r7, #20]
 8009cf6:	e00c      	b.n	8009d12 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6938      	ldr	r0, [r7, #16]
 8009cfc:	f000 fa88 	bl	800a210 <xQueueSemaphoreTake>
 8009d00:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009d12:	697b      	ldr	r3, [r7, #20]
	}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08e      	sub	sp, #56	; 0x38
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <xQueueGenericSend+0x32>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <xQueueGenericSend+0x40>
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <xQueueGenericSend+0x44>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <xQueueGenericSend+0x46>
 8009d60:	2300      	movs	r3, #0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <xQueueGenericSend+0x60>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d103      	bne.n	8009d8a <xQueueGenericSend+0x6e>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d101      	bne.n	8009d8e <xQueueGenericSend+0x72>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <xQueueGenericSend+0x74>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <xQueueGenericSend+0x8e>
	__asm volatile
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	623b      	str	r3, [r7, #32]
}
 8009da6:	bf00      	nop
 8009da8:	e7fe      	b.n	8009da8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009daa:	f001 fb1b 	bl	800b3e4 <xTaskGetSchedulerState>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <xQueueGenericSend+0x9e>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <xQueueGenericSend+0xa2>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <xQueueGenericSend+0xa4>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xQueueGenericSend+0xbe>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	61fb      	str	r3, [r7, #28]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dda:	f002 f95b 	bl	800c094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d302      	bcc.n	8009df0 <xQueueGenericSend+0xd4>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d129      	bne.n	8009e44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df6:	f000 fb2f 	bl	800a458 <prvCopyDataToQueue>
 8009dfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d010      	beq.n	8009e26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	3324      	adds	r3, #36	; 0x24
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 f919 	bl	800b040 <xTaskRemoveFromEventList>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d013      	beq.n	8009e3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e14:	4b3f      	ldr	r3, [pc, #252]	; (8009f14 <xQueueGenericSend+0x1f8>)
 8009e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	e00a      	b.n	8009e3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e2c:	4b39      	ldr	r3, [pc, #228]	; (8009f14 <xQueueGenericSend+0x1f8>)
 8009e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e3c:	f002 f95a 	bl	800c0f4 <vPortExitCritical>
				return pdPASS;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e063      	b.n	8009f0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d103      	bne.n	8009e52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e4a:	f002 f953 	bl	800c0f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e05c      	b.n	8009f0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 f953 	bl	800b108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e62:	2301      	movs	r3, #1
 8009e64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e66:	f002 f945 	bl	800c0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e6a:	f000 febf 	bl	800abec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e6e:	f002 f911 	bl	800c094 <vPortEnterCritical>
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e78:	b25b      	sxtb	r3, r3
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7e:	d103      	bne.n	8009e88 <xQueueGenericSend+0x16c>
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e8e:	b25b      	sxtb	r3, r3
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	d103      	bne.n	8009e9e <xQueueGenericSend+0x182>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e9e:	f002 f929 	bl	800c0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ea2:	1d3a      	adds	r2, r7, #4
 8009ea4:	f107 0314 	add.w	r3, r7, #20
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 f942 	bl	800b134 <xTaskCheckForTimeOut>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d124      	bne.n	8009f00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb8:	f000 fbc6 	bl	800a648 <prvIsQueueFull>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d018      	beq.n	8009ef4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	3310      	adds	r3, #16
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 f868 	bl	800afa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ed2:	f000 fb51 	bl	800a578 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ed6:	f000 fe97 	bl	800ac08 <xTaskResumeAll>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f47f af7c 	bne.w	8009dda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009ee2:	4b0c      	ldr	r3, [pc, #48]	; (8009f14 <xQueueGenericSend+0x1f8>)
 8009ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	e772      	b.n	8009dda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef6:	f000 fb3f 	bl	800a578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009efa:	f000 fe85 	bl	800ac08 <xTaskResumeAll>
 8009efe:	e76c      	b.n	8009dda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f02:	f000 fb39 	bl	800a578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f06:	f000 fe7f 	bl	800ac08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3738      	adds	r7, #56	; 0x38
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	e000ed04 	.word	0xe000ed04

08009f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b090      	sub	sp, #64	; 0x40
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10a      	bne.n	8009f46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f42:	bf00      	nop
 8009f44:	e7fe      	b.n	8009f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d103      	bne.n	8009f54 <xQueueGenericSendFromISR+0x3c>
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <xQueueGenericSendFromISR+0x40>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <xQueueGenericSendFromISR+0x42>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10a      	bne.n	8009f74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d103      	bne.n	8009f82 <xQueueGenericSendFromISR+0x6a>
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <xQueueGenericSendFromISR+0x6e>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e000      	b.n	8009f88 <xQueueGenericSendFromISR+0x70>
 8009f86:	2300      	movs	r3, #0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	623b      	str	r3, [r7, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	e7fe      	b.n	8009fa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fa2:	f002 f959 	bl	800c258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	61fa      	str	r2, [r7, #28]
 8009fbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d302      	bcc.n	8009fd4 <xQueueGenericSendFromISR+0xbc>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d12f      	bne.n	800a034 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fea:	f000 fa35 	bl	800a458 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff6:	d112      	bne.n	800a01e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d016      	beq.n	800a02e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	3324      	adds	r3, #36	; 0x24
 800a004:	4618      	mov	r0, r3
 800a006:	f001 f81b 	bl	800b040 <xTaskRemoveFromEventList>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00e      	beq.n	800a02e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e007      	b.n	800a02e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a01e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a022:	3301      	adds	r3, #1
 800a024:	b2db      	uxtb	r3, r3
 800a026:	b25a      	sxtb	r2, r3
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a02e:	2301      	movs	r3, #1
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a032:	e001      	b.n	800a038 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a034:	2300      	movs	r3, #0
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a042:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a046:	4618      	mov	r0, r3
 800a048:	3740      	adds	r7, #64	; 0x40
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08c      	sub	sp, #48	; 0x30
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <xQueueReceive+0x30>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	623b      	str	r3, [r7, #32]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d103      	bne.n	800a08e <xQueueReceive+0x3e>
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <xQueueReceive+0x42>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueReceive+0x44>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueReceive+0x5e>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	61fb      	str	r3, [r7, #28]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ae:	f001 f999 	bl	800b3e4 <xTaskGetSchedulerState>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <xQueueReceive+0x6e>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <xQueueReceive+0x72>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <xQueueReceive+0x74>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <xQueueReceive+0x8e>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	61bb      	str	r3, [r7, #24]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0de:	f001 ffd9 	bl	800c094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01f      	beq.n	800a12e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f2:	f000 fa1b 	bl	800a52c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	1e5a      	subs	r2, r3, #1
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00f      	beq.n	800a126 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	3310      	adds	r3, #16
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 ff98 	bl	800b040 <xTaskRemoveFromEventList>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d007      	beq.n	800a126 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a116:	4b3d      	ldr	r3, [pc, #244]	; (800a20c <xQueueReceive+0x1bc>)
 800a118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a126:	f001 ffe5 	bl	800c0f4 <vPortExitCritical>
				return pdPASS;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e069      	b.n	800a202 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d103      	bne.n	800a13c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a134:	f001 ffde 	bl	800c0f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a138:	2300      	movs	r3, #0
 800a13a:	e062      	b.n	800a202 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d106      	bne.n	800a150 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a142:	f107 0310 	add.w	r3, r7, #16
 800a146:	4618      	mov	r0, r3
 800a148:	f000 ffde 	bl	800b108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a14c:	2301      	movs	r3, #1
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a150:	f001 ffd0 	bl	800c0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a154:	f000 fd4a 	bl	800abec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a158:	f001 ff9c 	bl	800c094 <vPortEnterCritical>
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a162:	b25b      	sxtb	r3, r3
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d103      	bne.n	800a172 <xQueueReceive+0x122>
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a178:	b25b      	sxtb	r3, r3
 800a17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17e:	d103      	bne.n	800a188 <xQueueReceive+0x138>
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a188:	f001 ffb4 	bl	800c0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a18c:	1d3a      	adds	r2, r7, #4
 800a18e:	f107 0310 	add.w	r3, r7, #16
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f000 ffcd 	bl	800b134 <xTaskCheckForTimeOut>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d123      	bne.n	800a1e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a2:	f000 fa3b 	bl	800a61c <prvIsQueueEmpty>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d017      	beq.n	800a1dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	3324      	adds	r3, #36	; 0x24
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fef3 	bl	800afa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1bc:	f000 f9dc 	bl	800a578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1c0:	f000 fd22 	bl	800ac08 <xTaskResumeAll>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d189      	bne.n	800a0de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1ca:	4b10      	ldr	r3, [pc, #64]	; (800a20c <xQueueReceive+0x1bc>)
 800a1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	e780      	b.n	800a0de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1de:	f000 f9cb 	bl	800a578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1e2:	f000 fd11 	bl	800ac08 <xTaskResumeAll>
 800a1e6:	e77a      	b.n	800a0de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ea:	f000 f9c5 	bl	800a578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1ee:	f000 fd0b 	bl	800ac08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f4:	f000 fa12 	bl	800a61c <prvIsQueueEmpty>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f43f af6f 	beq.w	800a0de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a200:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a202:	4618      	mov	r0, r3
 800a204:	3730      	adds	r7, #48	; 0x30
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	e000ed04 	.word	0xe000ed04

0800a210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08e      	sub	sp, #56	; 0x38
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a222:	2300      	movs	r3, #0
 800a224:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	623b      	str	r3, [r7, #32]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fb      	str	r3, [r7, #28]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a260:	f001 f8c0 	bl	800b3e4 <xTaskGetSchedulerState>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d102      	bne.n	800a270 <xQueueSemaphoreTake+0x60>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <xQueueSemaphoreTake+0x64>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <xQueueSemaphoreTake+0x66>
 800a274:	2300      	movs	r3, #0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	61bb      	str	r3, [r7, #24]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a290:	f001 ff00 	bl	800c094 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d024      	beq.n	800a2ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	1e5a      	subs	r2, r3, #1
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d104      	bne.n	800a2ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2b0:	f001 fa0e 	bl	800b6d0 <pvTaskIncrementMutexHeldCount>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00f      	beq.n	800a2e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	3310      	adds	r3, #16
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 feba 	bl	800b040 <xTaskRemoveFromEventList>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2d2:	4b54      	ldr	r3, [pc, #336]	; (800a424 <xQueueSemaphoreTake+0x214>)
 800a2d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2e2:	f001 ff07 	bl	800c0f4 <vPortExitCritical>
				return pdPASS;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e097      	b.n	800a41a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d111      	bne.n	800a314 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	617b      	str	r3, [r7, #20]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a30c:	f001 fef2 	bl	800c0f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a310:	2300      	movs	r3, #0
 800a312:	e082      	b.n	800a41a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a316:	2b00      	cmp	r3, #0
 800a318:	d106      	bne.n	800a328 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fef2 	bl	800b108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a328:	f001 fee4 	bl	800c0f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a32c:	f000 fc5e 	bl	800abec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a330:	f001 feb0 	bl	800c094 <vPortEnterCritical>
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a33a:	b25b      	sxtb	r3, r3
 800a33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a340:	d103      	bne.n	800a34a <xQueueSemaphoreTake+0x13a>
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a350:	b25b      	sxtb	r3, r3
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d103      	bne.n	800a360 <xQueueSemaphoreTake+0x150>
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a360:	f001 fec8 	bl	800c0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a364:	463a      	mov	r2, r7
 800a366:	f107 030c 	add.w	r3, r7, #12
 800a36a:	4611      	mov	r1, r2
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fee1 	bl	800b134 <xTaskCheckForTimeOut>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d132      	bne.n	800a3de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a37a:	f000 f94f 	bl	800a61c <prvIsQueueEmpty>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d026      	beq.n	800a3d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d109      	bne.n	800a3a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a38c:	f001 fe82 	bl	800c094 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	4618      	mov	r0, r3
 800a396:	f001 f843 	bl	800b420 <xTaskPriorityInherit>
 800a39a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a39c:	f001 feaa 	bl	800c0f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fdf9 	bl	800afa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b0:	f000 f8e2 	bl	800a578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3b4:	f000 fc28 	bl	800ac08 <xTaskResumeAll>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f47f af68 	bne.w	800a290 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a3c0:	4b18      	ldr	r3, [pc, #96]	; (800a424 <xQueueSemaphoreTake+0x214>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	e75e      	b.n	800a290 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d4:	f000 f8d0 	bl	800a578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3d8:	f000 fc16 	bl	800ac08 <xTaskResumeAll>
 800a3dc:	e758      	b.n	800a290 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a3de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3e0:	f000 f8ca 	bl	800a578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3e4:	f000 fc10 	bl	800ac08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ea:	f000 f917 	bl	800a61c <prvIsQueueEmpty>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f43f af4d 	beq.w	800a290 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00d      	beq.n	800a418 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3fc:	f001 fe4a 	bl	800c094 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a402:	f000 f811 	bl	800a428 <prvGetDisinheritPriorityAfterTimeout>
 800a406:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 f8dc 	bl	800b5cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a414:	f001 fe6e 	bl	800c0f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3738      	adds	r7, #56	; 0x38
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	e000ed04 	.word	0xe000ed04

0800a428 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e001      	b.n	800a44a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a44a:	68fb      	ldr	r3, [r7, #12]
	}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10d      	bne.n	800a492 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d14d      	bne.n	800a51a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	4618      	mov	r0, r3
 800a484:	f001 f834 	bl	800b4f0 <xTaskPriorityDisinherit>
 800a488:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	609a      	str	r2, [r3, #8]
 800a490:	e043      	b.n	800a51a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d119      	bne.n	800a4cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6858      	ldr	r0, [r3, #4]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	f002 fa29 	bl	800c8fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	441a      	add	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d32b      	bcc.n	800a51a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	e026      	b.n	800a51a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68d8      	ldr	r0, [r3, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	f002 fa0f 	bl	800c8fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e4:	425b      	negs	r3, r3
 800a4e6:	441a      	add	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d207      	bcs.n	800a508 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	425b      	negs	r3, r3
 800a502:	441a      	add	r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d105      	bne.n	800a51a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	3b01      	subs	r3, #1
 800a518:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a522:	697b      	ldr	r3, [r7, #20]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d018      	beq.n	800a570 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68da      	ldr	r2, [r3, #12]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	441a      	add	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68da      	ldr	r2, [r3, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	d303      	bcc.n	800a560 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	68d9      	ldr	r1, [r3, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	461a      	mov	r2, r3
 800a56a:	6838      	ldr	r0, [r7, #0]
 800a56c:	f002 f9c5 	bl	800c8fa <memcpy>
	}
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a580:	f001 fd88 	bl	800c094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a58a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a58c:	e011      	b.n	800a5b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d012      	beq.n	800a5bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3324      	adds	r3, #36	; 0x24
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fd50 	bl	800b040 <xTaskRemoveFromEventList>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5a6:	f000 fe27 	bl	800b1f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dce9      	bgt.n	800a58e <prvUnlockQueue+0x16>
 800a5ba:	e000      	b.n	800a5be <prvUnlockQueue+0x46>
					break;
 800a5bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	22ff      	movs	r2, #255	; 0xff
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5c6:	f001 fd95 	bl	800c0f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5ca:	f001 fd63 	bl	800c094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5d6:	e011      	b.n	800a5fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d012      	beq.n	800a606 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3310      	adds	r3, #16
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 fd2b 	bl	800b040 <xTaskRemoveFromEventList>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5f0:	f000 fe02 	bl	800b1f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a600:	2b00      	cmp	r3, #0
 800a602:	dce9      	bgt.n	800a5d8 <prvUnlockQueue+0x60>
 800a604:	e000      	b.n	800a608 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a606:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	22ff      	movs	r2, #255	; 0xff
 800a60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a610:	f001 fd70 	bl	800c0f4 <vPortExitCritical>
}
 800a614:	bf00      	nop
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a624:	f001 fd36 	bl	800c094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a630:	2301      	movs	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e001      	b.n	800a63a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a63a:	f001 fd5b 	bl	800c0f4 <vPortExitCritical>

	return xReturn;
 800a63e:	68fb      	ldr	r3, [r7, #12]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a650:	f001 fd20 	bl	800c094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d102      	bne.n	800a666 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a660:	2301      	movs	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	e001      	b.n	800a66a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a66a:	f001 fd43 	bl	800c0f4 <vPortExitCritical>

	return xReturn;
 800a66e:	68fb      	ldr	r3, [r7, #12]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	e014      	b.n	800a6b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a688:	4a0f      	ldr	r2, [pc, #60]	; (800a6c8 <vQueueAddToRegistry+0x50>)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10b      	bne.n	800a6ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a694:	490c      	ldr	r1, [pc, #48]	; (800a6c8 <vQueueAddToRegistry+0x50>)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a69e:	4a0a      	ldr	r2, [pc, #40]	; (800a6c8 <vQueueAddToRegistry+0x50>)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	4413      	add	r3, r2
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6aa:	e006      	b.n	800a6ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b07      	cmp	r3, #7
 800a6b6:	d9e7      	bls.n	800a688 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	20001638 	.word	0x20001638

0800a6cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6dc:	f001 fcda 	bl	800c094 <vPortEnterCritical>
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6e6:	b25b      	sxtb	r3, r3
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ec:	d103      	bne.n	800a6f6 <vQueueWaitForMessageRestricted+0x2a>
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6fc:	b25b      	sxtb	r3, r3
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a702:	d103      	bne.n	800a70c <vQueueWaitForMessageRestricted+0x40>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a70c:	f001 fcf2 	bl	800c0f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d106      	bne.n	800a726 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	3324      	adds	r3, #36	; 0x24
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 fc61 	bl	800afe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7ff ff26 	bl	800a578 <prvUnlockQueue>
	}
 800a72c:	bf00      	nop
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08e      	sub	sp, #56	; 0x38
 800a738:	af04      	add	r7, sp, #16
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	623b      	str	r3, [r7, #32]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xTaskCreateStatic+0x46>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	61fb      	str	r3, [r7, #28]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a77a:	23bc      	movs	r3, #188	; 0xbc
 800a77c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2bbc      	cmp	r3, #188	; 0xbc
 800a782:	d00a      	beq.n	800a79a <xTaskCreateStatic+0x66>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	61bb      	str	r3, [r7, #24]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a79a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d01e      	beq.n	800a7e0 <xTaskCreateStatic+0xac>
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01b      	beq.n	800a7e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9303      	str	r3, [sp, #12]
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	9302      	str	r3, [sp, #8]
 800a7c2:	f107 0314 	add.w	r3, r7, #20
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f850 	bl	800a878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7da:	f000 f8f3 	bl	800a9c4 <prvAddNewTaskToReadyList>
 800a7de:	e001      	b.n	800a7e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7e4:	697b      	ldr	r3, [r7, #20]
	}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3728      	adds	r7, #40	; 0x28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b08c      	sub	sp, #48	; 0x30
 800a7f2:	af04      	add	r7, sp, #16
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	603b      	str	r3, [r7, #0]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7fe:	88fb      	ldrh	r3, [r7, #6]
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4618      	mov	r0, r3
 800a804:	f001 fd68 	bl	800c2d8 <pvPortMalloc>
 800a808:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00e      	beq.n	800a82e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a810:	20bc      	movs	r0, #188	; 0xbc
 800a812:	f001 fd61 	bl	800c2d8 <pvPortMalloc>
 800a816:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	631a      	str	r2, [r3, #48]	; 0x30
 800a824:	e005      	b.n	800a832 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a826:	6978      	ldr	r0, [r7, #20]
 800a828:	f001 fe22 	bl	800c470 <vPortFree>
 800a82c:	e001      	b.n	800a832 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d017      	beq.n	800a868 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	2300      	movs	r3, #0
 800a844:	9303      	str	r3, [sp, #12]
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	9302      	str	r3, [sp, #8]
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f80e 	bl	800a878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a85c:	69f8      	ldr	r0, [r7, #28]
 800a85e:	f000 f8b1 	bl	800a9c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a862:	2301      	movs	r3, #1
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	e002      	b.n	800a86e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a868:	f04f 33ff 	mov.w	r3, #4294967295
 800a86c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a86e:	69bb      	ldr	r3, [r7, #24]
	}
 800a870:	4618      	mov	r0, r3
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
 800a884:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	461a      	mov	r2, r3
 800a890:	21a5      	movs	r1, #165	; 0xa5
 800a892:	f002 f840 	bl	800c916 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	f023 0307 	bic.w	r3, r3, #7
 800a8ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	617b      	str	r3, [r7, #20]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d01f      	beq.n	800a916 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	e012      	b.n	800a902 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	7819      	ldrb	r1, [r3, #0]
 800a8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	3334      	adds	r3, #52	; 0x34
 800a8ec:	460a      	mov	r2, r1
 800a8ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d006      	beq.n	800a90a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	3301      	adds	r3, #1
 800a900:	61fb      	str	r3, [r7, #28]
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	2b0f      	cmp	r3, #15
 800a906:	d9e9      	bls.n	800a8dc <prvInitialiseNewTask+0x64>
 800a908:	e000      	b.n	800a90c <prvInitialiseNewTask+0x94>
			{
				break;
 800a90a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a914:	e003      	b.n	800a91e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	2b37      	cmp	r3, #55	; 0x37
 800a922:	d901      	bls.n	800a928 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a924:	2337      	movs	r3, #55	; 0x37
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a92c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a932:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	2200      	movs	r2, #0
 800a938:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	3304      	adds	r3, #4
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe ff64 	bl	800980c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	3318      	adds	r3, #24
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe ff5f 	bl	800980c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a952:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	3354      	adds	r3, #84	; 0x54
 800a978:	2260      	movs	r2, #96	; 0x60
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 ffca 	bl	800c916 <memset>
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	4a0c      	ldr	r2, [pc, #48]	; (800a9b8 <prvInitialiseNewTask+0x140>)
 800a986:	659a      	str	r2, [r3, #88]	; 0x58
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	4a0c      	ldr	r2, [pc, #48]	; (800a9bc <prvInitialiseNewTask+0x144>)
 800a98c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	4a0b      	ldr	r2, [pc, #44]	; (800a9c0 <prvInitialiseNewTask+0x148>)
 800a992:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	69b8      	ldr	r0, [r7, #24]
 800a99a:	f001 fa4f 	bl	800be3c <pxPortInitialiseStack>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d002      	beq.n	800a9b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	3720      	adds	r7, #32
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	0800df14 	.word	0x0800df14
 800a9bc:	0800df34 	.word	0x0800df34
 800a9c0:	0800def4 	.word	0x0800def4

0800a9c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9cc:	f001 fb62 	bl	800c094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9d0:	4b2d      	ldr	r3, [pc, #180]	; (800aa88 <prvAddNewTaskToReadyList+0xc4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	4a2c      	ldr	r2, [pc, #176]	; (800aa88 <prvAddNewTaskToReadyList+0xc4>)
 800a9d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9da:	4b2c      	ldr	r3, [pc, #176]	; (800aa8c <prvAddNewTaskToReadyList+0xc8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d109      	bne.n	800a9f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9e2:	4a2a      	ldr	r2, [pc, #168]	; (800aa8c <prvAddNewTaskToReadyList+0xc8>)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9e8:	4b27      	ldr	r3, [pc, #156]	; (800aa88 <prvAddNewTaskToReadyList+0xc4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d110      	bne.n	800aa12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9f0:	f000 fc26 	bl	800b240 <prvInitialiseTaskLists>
 800a9f4:	e00d      	b.n	800aa12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9f6:	4b26      	ldr	r3, [pc, #152]	; (800aa90 <prvAddNewTaskToReadyList+0xcc>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d109      	bne.n	800aa12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9fe:	4b23      	ldr	r3, [pc, #140]	; (800aa8c <prvAddNewTaskToReadyList+0xc8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d802      	bhi.n	800aa12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa0c:	4a1f      	ldr	r2, [pc, #124]	; (800aa8c <prvAddNewTaskToReadyList+0xc8>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa12:	4b20      	ldr	r3, [pc, #128]	; (800aa94 <prvAddNewTaskToReadyList+0xd0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3301      	adds	r3, #1
 800aa18:	4a1e      	ldr	r2, [pc, #120]	; (800aa94 <prvAddNewTaskToReadyList+0xd0>)
 800aa1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa1c:	4b1d      	ldr	r3, [pc, #116]	; (800aa94 <prvAddNewTaskToReadyList+0xd0>)
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa28:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <prvAddNewTaskToReadyList+0xd4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d903      	bls.n	800aa38 <prvAddNewTaskToReadyList+0x74>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	4a18      	ldr	r2, [pc, #96]	; (800aa98 <prvAddNewTaskToReadyList+0xd4>)
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4a15      	ldr	r2, [pc, #84]	; (800aa9c <prvAddNewTaskToReadyList+0xd8>)
 800aa46:	441a      	add	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f7fe fee9 	bl	8009826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa54:	f001 fb4e 	bl	800c0f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa58:	4b0d      	ldr	r3, [pc, #52]	; (800aa90 <prvAddNewTaskToReadyList+0xcc>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00e      	beq.n	800aa7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa60:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <prvAddNewTaskToReadyList+0xc8>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d207      	bcs.n	800aa7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <prvAddNewTaskToReadyList+0xdc>)
 800aa70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20001b4c 	.word	0x20001b4c
 800aa8c:	20001678 	.word	0x20001678
 800aa90:	20001b58 	.word	0x20001b58
 800aa94:	20001b68 	.word	0x20001b68
 800aa98:	20001b54 	.word	0x20001b54
 800aa9c:	2000167c 	.word	0x2000167c
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d017      	beq.n	800aae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aab6:	4b13      	ldr	r3, [pc, #76]	; (800ab04 <vTaskDelay+0x60>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <vTaskDelay+0x30>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	60bb      	str	r3, [r7, #8]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aad4:	f000 f88a 	bl	800abec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aad8:	2100      	movs	r1, #0
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fe0c 	bl	800b6f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aae0:	f000 f892 	bl	800ac08 <xTaskResumeAll>
 800aae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d107      	bne.n	800aafc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <vTaskDelay+0x64>)
 800aaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20001b74 	.word	0x20001b74
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08a      	sub	sp, #40	; 0x28
 800ab10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab1a:	463a      	mov	r2, r7
 800ab1c:	1d39      	adds	r1, r7, #4
 800ab1e:	f107 0308 	add.w	r3, r7, #8
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fe1e 	bl	8009764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	9202      	str	r2, [sp, #8]
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	2300      	movs	r3, #0
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	2300      	movs	r3, #0
 800ab38:	460a      	mov	r2, r1
 800ab3a:	4924      	ldr	r1, [pc, #144]	; (800abcc <vTaskStartScheduler+0xc0>)
 800ab3c:	4824      	ldr	r0, [pc, #144]	; (800abd0 <vTaskStartScheduler+0xc4>)
 800ab3e:	f7ff fdf9 	bl	800a734 <xTaskCreateStatic>
 800ab42:	4603      	mov	r3, r0
 800ab44:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <vTaskStartScheduler+0xc8>)
 800ab46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab48:	4b22      	ldr	r3, [pc, #136]	; (800abd4 <vTaskStartScheduler+0xc8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab50:	2301      	movs	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
 800ab54:	e001      	b.n	800ab5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d102      	bne.n	800ab66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab60:	f000 fe1e 	bl	800b7a0 <xTimerCreateTimerTask>
 800ab64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d11b      	bne.n	800aba4 <vTaskStartScheduler+0x98>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	613b      	str	r3, [r7, #16]
}
 800ab7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab80:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <vTaskStartScheduler+0xcc>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3354      	adds	r3, #84	; 0x54
 800ab86:	4a15      	ldr	r2, [pc, #84]	; (800abdc <vTaskStartScheduler+0xd0>)
 800ab88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab8a:	4b15      	ldr	r3, [pc, #84]	; (800abe0 <vTaskStartScheduler+0xd4>)
 800ab8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab92:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <vTaskStartScheduler+0xd8>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab98:	4b13      	ldr	r3, [pc, #76]	; (800abe8 <vTaskStartScheduler+0xdc>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab9e:	f001 f9d7 	bl	800bf50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aba2:	e00e      	b.n	800abc2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abaa:	d10a      	bne.n	800abc2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	60fb      	str	r3, [r7, #12]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <vTaskStartScheduler+0xb4>
}
 800abc2:	bf00      	nop
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	0800de24 	.word	0x0800de24
 800abd0:	0800b211 	.word	0x0800b211
 800abd4:	20001b70 	.word	0x20001b70
 800abd8:	20001678 	.word	0x20001678
 800abdc:	20000150 	.word	0x20000150
 800abe0:	20001b6c 	.word	0x20001b6c
 800abe4:	20001b58 	.word	0x20001b58
 800abe8:	20001b50 	.word	0x20001b50

0800abec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <vTaskSuspendAll+0x18>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3301      	adds	r3, #1
 800abf6:	4a03      	ldr	r2, [pc, #12]	; (800ac04 <vTaskSuspendAll+0x18>)
 800abf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abfa:	bf00      	nop
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	20001b74 	.word	0x20001b74

0800ac08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac16:	4b42      	ldr	r3, [pc, #264]	; (800ad20 <xTaskResumeAll+0x118>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10a      	bne.n	800ac34 <xTaskResumeAll+0x2c>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	603b      	str	r3, [r7, #0]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac34:	f001 fa2e 	bl	800c094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac38:	4b39      	ldr	r3, [pc, #228]	; (800ad20 <xTaskResumeAll+0x118>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4a38      	ldr	r2, [pc, #224]	; (800ad20 <xTaskResumeAll+0x118>)
 800ac40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac42:	4b37      	ldr	r3, [pc, #220]	; (800ad20 <xTaskResumeAll+0x118>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d162      	bne.n	800ad10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac4a:	4b36      	ldr	r3, [pc, #216]	; (800ad24 <xTaskResumeAll+0x11c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d05e      	beq.n	800ad10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac52:	e02f      	b.n	800acb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac54:	4b34      	ldr	r3, [pc, #208]	; (800ad28 <xTaskResumeAll+0x120>)
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3318      	adds	r3, #24
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fe fe3d 	bl	80098e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fe38 	bl	80098e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac74:	4b2d      	ldr	r3, [pc, #180]	; (800ad2c <xTaskResumeAll+0x124>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d903      	bls.n	800ac84 <xTaskResumeAll+0x7c>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	4a2a      	ldr	r2, [pc, #168]	; (800ad2c <xTaskResumeAll+0x124>)
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4a27      	ldr	r2, [pc, #156]	; (800ad30 <xTaskResumeAll+0x128>)
 800ac92:	441a      	add	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f7fe fdc3 	bl	8009826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca4:	4b23      	ldr	r3, [pc, #140]	; (800ad34 <xTaskResumeAll+0x12c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	429a      	cmp	r2, r3
 800acac:	d302      	bcc.n	800acb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800acae:	4b22      	ldr	r3, [pc, #136]	; (800ad38 <xTaskResumeAll+0x130>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acb4:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <xTaskResumeAll+0x120>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1cb      	bne.n	800ac54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800acc2:	f000 fb5f 	bl	800b384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800acc6:	4b1d      	ldr	r3, [pc, #116]	; (800ad3c <xTaskResumeAll+0x134>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d010      	beq.n	800acf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acd2:	f000 f847 	bl	800ad64 <xTaskIncrementTick>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800acdc:	4b16      	ldr	r3, [pc, #88]	; (800ad38 <xTaskResumeAll+0x130>)
 800acde:	2201      	movs	r2, #1
 800ace0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1f1      	bne.n	800acd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <xTaskResumeAll+0x134>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acf4:	4b10      	ldr	r3, [pc, #64]	; (800ad38 <xTaskResumeAll+0x130>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d009      	beq.n	800ad10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad00:	4b0f      	ldr	r3, [pc, #60]	; (800ad40 <xTaskResumeAll+0x138>)
 800ad02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad06:	601a      	str	r2, [r3, #0]
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad10:	f001 f9f0 	bl	800c0f4 <vPortExitCritical>

	return xAlreadyYielded;
 800ad14:	68bb      	ldr	r3, [r7, #8]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001b74 	.word	0x20001b74
 800ad24:	20001b4c 	.word	0x20001b4c
 800ad28:	20001b0c 	.word	0x20001b0c
 800ad2c:	20001b54 	.word	0x20001b54
 800ad30:	2000167c 	.word	0x2000167c
 800ad34:	20001678 	.word	0x20001678
 800ad38:	20001b60 	.word	0x20001b60
 800ad3c:	20001b5c 	.word	0x20001b5c
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <xTaskGetTickCount+0x1c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad50:	687b      	ldr	r3, [r7, #4]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20001b50 	.word	0x20001b50

0800ad64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6e:	4b4f      	ldr	r3, [pc, #316]	; (800aeac <xTaskIncrementTick+0x148>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 808f 	bne.w	800ae96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad78:	4b4d      	ldr	r3, [pc, #308]	; (800aeb0 <xTaskIncrementTick+0x14c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad80:	4a4b      	ldr	r2, [pc, #300]	; (800aeb0 <xTaskIncrementTick+0x14c>)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d120      	bne.n	800adce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad8c:	4b49      	ldr	r3, [pc, #292]	; (800aeb4 <xTaskIncrementTick+0x150>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <xTaskIncrementTick+0x48>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	603b      	str	r3, [r7, #0]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xTaskIncrementTick+0x46>
 800adac:	4b41      	ldr	r3, [pc, #260]	; (800aeb4 <xTaskIncrementTick+0x150>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	4b41      	ldr	r3, [pc, #260]	; (800aeb8 <xTaskIncrementTick+0x154>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a3f      	ldr	r2, [pc, #252]	; (800aeb4 <xTaskIncrementTick+0x150>)
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	4a3f      	ldr	r2, [pc, #252]	; (800aeb8 <xTaskIncrementTick+0x154>)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	4b3e      	ldr	r3, [pc, #248]	; (800aebc <xTaskIncrementTick+0x158>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3301      	adds	r3, #1
 800adc6:	4a3d      	ldr	r2, [pc, #244]	; (800aebc <xTaskIncrementTick+0x158>)
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	f000 fadb 	bl	800b384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adce:	4b3c      	ldr	r3, [pc, #240]	; (800aec0 <xTaskIncrementTick+0x15c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	429a      	cmp	r2, r3
 800add6:	d349      	bcc.n	800ae6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <xTaskIncrementTick+0x150>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d104      	bne.n	800adec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade2:	4b37      	ldr	r3, [pc, #220]	; (800aec0 <xTaskIncrementTick+0x15c>)
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	601a      	str	r2, [r3, #0]
					break;
 800adea:	e03f      	b.n	800ae6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adec:	4b31      	ldr	r3, [pc, #196]	; (800aeb4 <xTaskIncrementTick+0x150>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d203      	bcs.n	800ae0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae04:	4a2e      	ldr	r2, [pc, #184]	; (800aec0 <xTaskIncrementTick+0x15c>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae0a:	e02f      	b.n	800ae6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fd65 	bl	80098e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	3318      	adds	r3, #24
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fe fd5c 	bl	80098e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2c:	4b25      	ldr	r3, [pc, #148]	; (800aec4 <xTaskIncrementTick+0x160>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d903      	bls.n	800ae3c <xTaskIncrementTick+0xd8>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	4a22      	ldr	r2, [pc, #136]	; (800aec4 <xTaskIncrementTick+0x160>)
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4a1f      	ldr	r2, [pc, #124]	; (800aec8 <xTaskIncrementTick+0x164>)
 800ae4a:	441a      	add	r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7fe fce7 	bl	8009826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5c:	4b1b      	ldr	r3, [pc, #108]	; (800aecc <xTaskIncrementTick+0x168>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d3b8      	bcc.n	800add8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae66:	2301      	movs	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae6a:	e7b5      	b.n	800add8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae6c:	4b17      	ldr	r3, [pc, #92]	; (800aecc <xTaskIncrementTick+0x168>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae72:	4915      	ldr	r1, [pc, #84]	; (800aec8 <xTaskIncrementTick+0x164>)
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d901      	bls.n	800ae88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <xTaskIncrementTick+0x16c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d007      	beq.n	800aea0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	e004      	b.n	800aea0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae96:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <xTaskIncrementTick+0x170>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	4a0d      	ldr	r2, [pc, #52]	; (800aed4 <xTaskIncrementTick+0x170>)
 800ae9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aea0:	697b      	ldr	r3, [r7, #20]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20001b74 	.word	0x20001b74
 800aeb0:	20001b50 	.word	0x20001b50
 800aeb4:	20001b04 	.word	0x20001b04
 800aeb8:	20001b08 	.word	0x20001b08
 800aebc:	20001b64 	.word	0x20001b64
 800aec0:	20001b6c 	.word	0x20001b6c
 800aec4:	20001b54 	.word	0x20001b54
 800aec8:	2000167c 	.word	0x2000167c
 800aecc:	20001678 	.word	0x20001678
 800aed0:	20001b60 	.word	0x20001b60
 800aed4:	20001b5c 	.word	0x20001b5c

0800aed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aede:	4b2a      	ldr	r3, [pc, #168]	; (800af88 <vTaskSwitchContext+0xb0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aee6:	4b29      	ldr	r3, [pc, #164]	; (800af8c <vTaskSwitchContext+0xb4>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aeec:	e046      	b.n	800af7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800aeee:	4b27      	ldr	r3, [pc, #156]	; (800af8c <vTaskSwitchContext+0xb4>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef4:	4b26      	ldr	r3, [pc, #152]	; (800af90 <vTaskSwitchContext+0xb8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]
 800aefa:	e010      	b.n	800af1e <vTaskSwitchContext+0x46>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <vTaskSwitchContext+0x40>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	607b      	str	r3, [r7, #4]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <vTaskSwitchContext+0x3e>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	491d      	ldr	r1, [pc, #116]	; (800af94 <vTaskSwitchContext+0xbc>)
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4613      	mov	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	440b      	add	r3, r1
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0e4      	beq.n	800aefc <vTaskSwitchContext+0x24>
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4a15      	ldr	r2, [pc, #84]	; (800af94 <vTaskSwitchContext+0xbc>)
 800af3e:	4413      	add	r3, r2
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	605a      	str	r2, [r3, #4]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	3308      	adds	r3, #8
 800af54:	429a      	cmp	r2, r3
 800af56:	d104      	bne.n	800af62 <vTaskSwitchContext+0x8a>
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	4a0b      	ldr	r2, [pc, #44]	; (800af98 <vTaskSwitchContext+0xc0>)
 800af6a:	6013      	str	r3, [r2, #0]
 800af6c:	4a08      	ldr	r2, [pc, #32]	; (800af90 <vTaskSwitchContext+0xb8>)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <vTaskSwitchContext+0xc0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3354      	adds	r3, #84	; 0x54
 800af78:	4a08      	ldr	r2, [pc, #32]	; (800af9c <vTaskSwitchContext+0xc4>)
 800af7a:	6013      	str	r3, [r2, #0]
}
 800af7c:	bf00      	nop
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	20001b74 	.word	0x20001b74
 800af8c:	20001b60 	.word	0x20001b60
 800af90:	20001b54 	.word	0x20001b54
 800af94:	2000167c 	.word	0x2000167c
 800af98:	20001678 	.word	0x20001678
 800af9c:	20000150 	.word	0x20000150

0800afa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	60fb      	str	r3, [r7, #12]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afc6:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <vTaskPlaceOnEventList+0x44>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3318      	adds	r3, #24
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7fe fc4d 	bl	800986e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afd4:	2101      	movs	r1, #1
 800afd6:	6838      	ldr	r0, [r7, #0]
 800afd8:	f000 fb8e 	bl	800b6f8 <prvAddCurrentTaskToDelayedList>
}
 800afdc:	bf00      	nop
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20001678 	.word	0x20001678

0800afe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10a      	bne.n	800b010 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	617b      	str	r3, [r7, #20]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b010:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <vTaskPlaceOnEventListRestricted+0x54>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3318      	adds	r3, #24
 800b016:	4619      	mov	r1, r3
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7fe fc04 	bl	8009826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	68b8      	ldr	r0, [r7, #8]
 800b02e:	f000 fb63 	bl	800b6f8 <prvAddCurrentTaskToDelayedList>
	}
 800b032:	bf00      	nop
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20001678 	.word	0x20001678

0800b040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	60fb      	str	r3, [r7, #12]
}
 800b068:	bf00      	nop
 800b06a:	e7fe      	b.n	800b06a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	3318      	adds	r3, #24
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe fc35 	bl	80098e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b076:	4b1e      	ldr	r3, [pc, #120]	; (800b0f0 <xTaskRemoveFromEventList+0xb0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d11d      	bne.n	800b0ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	3304      	adds	r3, #4
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fc2c 	bl	80098e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	4b19      	ldr	r3, [pc, #100]	; (800b0f4 <xTaskRemoveFromEventList+0xb4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d903      	bls.n	800b09c <xTaskRemoveFromEventList+0x5c>
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	4a16      	ldr	r2, [pc, #88]	; (800b0f4 <xTaskRemoveFromEventList+0xb4>)
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4a13      	ldr	r2, [pc, #76]	; (800b0f8 <xTaskRemoveFromEventList+0xb8>)
 800b0aa:	441a      	add	r2, r3
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fe fbb7 	bl	8009826 <vListInsertEnd>
 800b0b8:	e005      	b.n	800b0c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3318      	adds	r3, #24
 800b0be:	4619      	mov	r1, r3
 800b0c0:	480e      	ldr	r0, [pc, #56]	; (800b0fc <xTaskRemoveFromEventList+0xbc>)
 800b0c2:	f7fe fbb0 	bl	8009826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <xTaskRemoveFromEventList+0xc0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d905      	bls.n	800b0e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <xTaskRemoveFromEventList+0xc4>)
 800b0da:	2201      	movs	r2, #1
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e001      	b.n	800b0e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b0e4:	697b      	ldr	r3, [r7, #20]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3718      	adds	r7, #24
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20001b74 	.word	0x20001b74
 800b0f4:	20001b54 	.word	0x20001b54
 800b0f8:	2000167c 	.word	0x2000167c
 800b0fc:	20001b0c 	.word	0x20001b0c
 800b100:	20001678 	.word	0x20001678
 800b104:	20001b60 	.word	0x20001b60

0800b108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <vTaskInternalSetTimeOutState+0x24>)
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <vTaskInternalSetTimeOutState+0x28>)
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	605a      	str	r2, [r3, #4]
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	20001b64 	.word	0x20001b64
 800b130:	20001b50 	.word	0x20001b50

0800b134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	613b      	str	r3, [r7, #16]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	60fb      	str	r3, [r7, #12]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b176:	f000 ff8d 	bl	800c094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b17a:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <xTaskCheckForTimeOut+0xbc>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b192:	d102      	bne.n	800b19a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b194:	2300      	movs	r3, #0
 800b196:	61fb      	str	r3, [r7, #28]
 800b198:	e023      	b.n	800b1e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <xTaskCheckForTimeOut+0xc0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d007      	beq.n	800b1b6 <xTaskCheckForTimeOut+0x82>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d302      	bcc.n	800b1b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	e015      	b.n	800b1e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d20b      	bcs.n	800b1d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	1ad2      	subs	r2, r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff ff9b 	bl	800b108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	61fb      	str	r3, [r7, #28]
 800b1d6:	e004      	b.n	800b1e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b1e2:	f000 ff87 	bl	800c0f4 <vPortExitCritical>

	return xReturn;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3720      	adds	r7, #32
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20001b50 	.word	0x20001b50
 800b1f4:	20001b64 	.word	0x20001b64

0800b1f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1fc:	4b03      	ldr	r3, [pc, #12]	; (800b20c <vTaskMissedYield+0x14>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	601a      	str	r2, [r3, #0]
}
 800b202:	bf00      	nop
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	20001b60 	.word	0x20001b60

0800b210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b218:	f000 f852 	bl	800b2c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b21c:	4b06      	ldr	r3, [pc, #24]	; (800b238 <prvIdleTask+0x28>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d9f9      	bls.n	800b218 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <prvIdleTask+0x2c>)
 800b226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b234:	e7f0      	b.n	800b218 <prvIdleTask+0x8>
 800b236:	bf00      	nop
 800b238:	2000167c 	.word	0x2000167c
 800b23c:	e000ed04 	.word	0xe000ed04

0800b240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b246:	2300      	movs	r3, #0
 800b248:	607b      	str	r3, [r7, #4]
 800b24a:	e00c      	b.n	800b266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	4613      	mov	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4a12      	ldr	r2, [pc, #72]	; (800b2a0 <prvInitialiseTaskLists+0x60>)
 800b258:	4413      	add	r3, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fab6 	bl	80097cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3301      	adds	r3, #1
 800b264:	607b      	str	r3, [r7, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b37      	cmp	r3, #55	; 0x37
 800b26a:	d9ef      	bls.n	800b24c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b26c:	480d      	ldr	r0, [pc, #52]	; (800b2a4 <prvInitialiseTaskLists+0x64>)
 800b26e:	f7fe faad 	bl	80097cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b272:	480d      	ldr	r0, [pc, #52]	; (800b2a8 <prvInitialiseTaskLists+0x68>)
 800b274:	f7fe faaa 	bl	80097cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b278:	480c      	ldr	r0, [pc, #48]	; (800b2ac <prvInitialiseTaskLists+0x6c>)
 800b27a:	f7fe faa7 	bl	80097cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b27e:	480c      	ldr	r0, [pc, #48]	; (800b2b0 <prvInitialiseTaskLists+0x70>)
 800b280:	f7fe faa4 	bl	80097cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b284:	480b      	ldr	r0, [pc, #44]	; (800b2b4 <prvInitialiseTaskLists+0x74>)
 800b286:	f7fe faa1 	bl	80097cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b28a:	4b0b      	ldr	r3, [pc, #44]	; (800b2b8 <prvInitialiseTaskLists+0x78>)
 800b28c:	4a05      	ldr	r2, [pc, #20]	; (800b2a4 <prvInitialiseTaskLists+0x64>)
 800b28e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b290:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <prvInitialiseTaskLists+0x7c>)
 800b292:	4a05      	ldr	r2, [pc, #20]	; (800b2a8 <prvInitialiseTaskLists+0x68>)
 800b294:	601a      	str	r2, [r3, #0]
}
 800b296:	bf00      	nop
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	2000167c 	.word	0x2000167c
 800b2a4:	20001adc 	.word	0x20001adc
 800b2a8:	20001af0 	.word	0x20001af0
 800b2ac:	20001b0c 	.word	0x20001b0c
 800b2b0:	20001b20 	.word	0x20001b20
 800b2b4:	20001b38 	.word	0x20001b38
 800b2b8:	20001b04 	.word	0x20001b04
 800b2bc:	20001b08 	.word	0x20001b08

0800b2c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2c6:	e019      	b.n	800b2fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2c8:	f000 fee4 	bl	800c094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2cc:	4b10      	ldr	r3, [pc, #64]	; (800b310 <prvCheckTasksWaitingTermination+0x50>)
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fb01 	bl	80098e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2de:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <prvCheckTasksWaitingTermination+0x54>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	4a0b      	ldr	r2, [pc, #44]	; (800b314 <prvCheckTasksWaitingTermination+0x54>)
 800b2e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2e8:	4b0b      	ldr	r3, [pc, #44]	; (800b318 <prvCheckTasksWaitingTermination+0x58>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	4a0a      	ldr	r2, [pc, #40]	; (800b318 <prvCheckTasksWaitingTermination+0x58>)
 800b2f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2f2:	f000 feff 	bl	800c0f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f810 	bl	800b31c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2fc:	4b06      	ldr	r3, [pc, #24]	; (800b318 <prvCheckTasksWaitingTermination+0x58>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1e1      	bne.n	800b2c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20001b20 	.word	0x20001b20
 800b314:	20001b4c 	.word	0x20001b4c
 800b318:	20001b34 	.word	0x20001b34

0800b31c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3354      	adds	r3, #84	; 0x54
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 fc2d 	bl	800cb88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b334:	2b00      	cmp	r3, #0
 800b336:	d108      	bne.n	800b34a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33c:	4618      	mov	r0, r3
 800b33e:	f001 f897 	bl	800c470 <vPortFree>
				vPortFree( pxTCB );
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 f894 	bl	800c470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b348:	e018      	b.n	800b37c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b350:	2b01      	cmp	r3, #1
 800b352:	d103      	bne.n	800b35c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 f88b 	bl	800c470 <vPortFree>
	}
 800b35a:	e00f      	b.n	800b37c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b362:	2b02      	cmp	r3, #2
 800b364:	d00a      	beq.n	800b37c <prvDeleteTCB+0x60>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	60fb      	str	r3, [r7, #12]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <prvDeleteTCB+0x5e>
	}
 800b37c:	bf00      	nop
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <prvResetNextTaskUnblockTime+0x38>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d104      	bne.n	800b39e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b394:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <prvResetNextTaskUnblockTime+0x3c>)
 800b396:	f04f 32ff 	mov.w	r2, #4294967295
 800b39a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b39c:	e008      	b.n	800b3b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b39e:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <prvResetNextTaskUnblockTime+0x38>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	4a04      	ldr	r2, [pc, #16]	; (800b3c0 <prvResetNextTaskUnblockTime+0x3c>)
 800b3ae:	6013      	str	r3, [r2, #0]
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20001b04 	.word	0x20001b04
 800b3c0:	20001b6c 	.word	0x20001b6c

0800b3c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b3ca:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <xTaskGetCurrentTaskHandle+0x1c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b3d0:	687b      	ldr	r3, [r7, #4]
	}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	20001678 	.word	0x20001678

0800b3e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3ea:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <xTaskGetSchedulerState+0x34>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d102      	bne.n	800b3f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	607b      	str	r3, [r7, #4]
 800b3f6:	e008      	b.n	800b40a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3f8:	4b08      	ldr	r3, [pc, #32]	; (800b41c <xTaskGetSchedulerState+0x38>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d102      	bne.n	800b406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b400:	2302      	movs	r3, #2
 800b402:	607b      	str	r3, [r7, #4]
 800b404:	e001      	b.n	800b40a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b406:	2300      	movs	r3, #0
 800b408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b40a:	687b      	ldr	r3, [r7, #4]
	}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20001b58 	.word	0x20001b58
 800b41c:	20001b74 	.word	0x20001b74

0800b420 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b42c:	2300      	movs	r3, #0
 800b42e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d051      	beq.n	800b4da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b43a:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <xTaskPriorityInherit+0xc4>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	429a      	cmp	r2, r3
 800b442:	d241      	bcs.n	800b4c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	db06      	blt.n	800b45a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b44c:	4b25      	ldr	r3, [pc, #148]	; (800b4e4 <xTaskPriorityInherit+0xc4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6959      	ldr	r1, [r3, #20]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b462:	4613      	mov	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4a1f      	ldr	r2, [pc, #124]	; (800b4e8 <xTaskPriorityInherit+0xc8>)
 800b46c:	4413      	add	r3, r2
 800b46e:	4299      	cmp	r1, r3
 800b470:	d122      	bne.n	800b4b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	3304      	adds	r3, #4
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe fa32 	bl	80098e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b47c:	4b19      	ldr	r3, [pc, #100]	; (800b4e4 <xTaskPriorityInherit+0xc4>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48a:	4b18      	ldr	r3, [pc, #96]	; (800b4ec <xTaskPriorityInherit+0xcc>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d903      	bls.n	800b49a <xTaskPriorityInherit+0x7a>
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b496:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <xTaskPriorityInherit+0xcc>)
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49e:	4613      	mov	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4a10      	ldr	r2, [pc, #64]	; (800b4e8 <xTaskPriorityInherit+0xc8>)
 800b4a8:	441a      	add	r2, r3
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	f7fe f9b8 	bl	8009826 <vListInsertEnd>
 800b4b6:	e004      	b.n	800b4c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	; (800b4e4 <xTaskPriorityInherit+0xc4>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	e008      	b.n	800b4da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4cc:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <xTaskPriorityInherit+0xc4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d201      	bcs.n	800b4da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4da:	68fb      	ldr	r3, [r7, #12]
	}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20001678 	.word	0x20001678
 800b4e8:	2000167c 	.word	0x2000167c
 800b4ec:	20001b54 	.word	0x20001b54

0800b4f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d056      	beq.n	800b5b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b506:	4b2e      	ldr	r3, [pc, #184]	; (800b5c0 <xTaskPriorityDisinherit+0xd0>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d00a      	beq.n	800b526 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	60bb      	str	r3, [r7, #8]
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b556:	429a      	cmp	r2, r3
 800b558:	d02c      	beq.n	800b5b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d128      	bne.n	800b5b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	3304      	adds	r3, #4
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe f9ba 	bl	80098e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b584:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <xTaskPriorityDisinherit+0xd4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d903      	bls.n	800b594 <xTaskPriorityDisinherit+0xa4>
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	4a0c      	ldr	r2, [pc, #48]	; (800b5c4 <xTaskPriorityDisinherit+0xd4>)
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <xTaskPriorityDisinherit+0xd8>)
 800b5a2:	441a      	add	r2, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f7fe f93b 	bl	8009826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5b4:	697b      	ldr	r3, [r7, #20]
	}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20001678 	.word	0x20001678
 800b5c4:	20001b54 	.word	0x20001b54
 800b5c8:	2000167c 	.word	0x2000167c

0800b5cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d06a      	beq.n	800b6ba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	60fb      	str	r3, [r7, #12]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d902      	bls.n	800b612 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	61fb      	str	r3, [r7, #28]
 800b610:	e002      	b.n	800b618 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b616:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61c:	69fa      	ldr	r2, [r7, #28]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d04b      	beq.n	800b6ba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d146      	bne.n	800b6ba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b62c:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	429a      	cmp	r2, r3
 800b634:	d10a      	bne.n	800b64c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	60bb      	str	r3, [r7, #8]
}
 800b648:	bf00      	nop
 800b64a:	e7fe      	b.n	800b64a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	69fa      	ldr	r2, [r7, #28]
 800b656:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	db04      	blt.n	800b66a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	6959      	ldr	r1, [r3, #20]
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4a13      	ldr	r2, [pc, #76]	; (800b6c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b67a:	4413      	add	r3, r2
 800b67c:	4299      	cmp	r1, r3
 800b67e:	d11c      	bne.n	800b6ba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	3304      	adds	r3, #4
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe f92b 	bl	80098e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68e:	4b0f      	ldr	r3, [pc, #60]	; (800b6cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d903      	bls.n	800b69e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69a:	4a0c      	ldr	r2, [pc, #48]	; (800b6cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a07      	ldr	r2, [pc, #28]	; (800b6c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b6ac:	441a      	add	r2, r3
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f7fe f8b6 	bl	8009826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6ba:	bf00      	nop
 800b6bc:	3720      	adds	r7, #32
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20001678 	.word	0x20001678
 800b6c8:	2000167c 	.word	0x2000167c
 800b6cc:	20001b54 	.word	0x20001b54

0800b6d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b6d0:	b480      	push	{r7}
 800b6d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b6d4:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6e2:	3201      	adds	r2, #1
 800b6e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b6e6:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
	}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	20001678 	.word	0x20001678

0800b6f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b702:	4b21      	ldr	r3, [pc, #132]	; (800b788 <prvAddCurrentTaskToDelayedList+0x90>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b708:	4b20      	ldr	r3, [pc, #128]	; (800b78c <prvAddCurrentTaskToDelayedList+0x94>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3304      	adds	r3, #4
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe f8e6 	bl	80098e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71a:	d10a      	bne.n	800b732 <prvAddCurrentTaskToDelayedList+0x3a>
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d007      	beq.n	800b732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b722:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <prvAddCurrentTaskToDelayedList+0x94>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3304      	adds	r3, #4
 800b728:	4619      	mov	r1, r3
 800b72a:	4819      	ldr	r0, [pc, #100]	; (800b790 <prvAddCurrentTaskToDelayedList+0x98>)
 800b72c:	f7fe f87b 	bl	8009826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b730:	e026      	b.n	800b780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4413      	add	r3, r2
 800b738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b73a:	4b14      	ldr	r3, [pc, #80]	; (800b78c <prvAddCurrentTaskToDelayedList+0x94>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	429a      	cmp	r2, r3
 800b748:	d209      	bcs.n	800b75e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <prvAddCurrentTaskToDelayedList+0x94>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3304      	adds	r3, #4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fe f889 	bl	800986e <vListInsert>
}
 800b75c:	e010      	b.n	800b780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b75e:	4b0e      	ldr	r3, [pc, #56]	; (800b798 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <prvAddCurrentTaskToDelayedList+0x94>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3304      	adds	r3, #4
 800b768:	4619      	mov	r1, r3
 800b76a:	4610      	mov	r0, r2
 800b76c:	f7fe f87f 	bl	800986e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b770:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	429a      	cmp	r2, r3
 800b778:	d202      	bcs.n	800b780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b77a:	4a08      	ldr	r2, [pc, #32]	; (800b79c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	6013      	str	r3, [r2, #0]
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20001b50 	.word	0x20001b50
 800b78c:	20001678 	.word	0x20001678
 800b790:	20001b38 	.word	0x20001b38
 800b794:	20001b08 	.word	0x20001b08
 800b798:	20001b04 	.word	0x20001b04
 800b79c:	20001b6c 	.word	0x20001b6c

0800b7a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7aa:	f000 fb07 	bl	800bdbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7ae:	4b1c      	ldr	r3, [pc, #112]	; (800b820 <xTimerCreateTimerTask+0x80>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d021      	beq.n	800b7fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7be:	1d3a      	adds	r2, r7, #4
 800b7c0:	f107 0108 	add.w	r1, r7, #8
 800b7c4:	f107 030c 	add.w	r3, r7, #12
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fd ffe5 	bl	8009798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	9202      	str	r2, [sp, #8]
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	2302      	movs	r3, #2
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	460a      	mov	r2, r1
 800b7e0:	4910      	ldr	r1, [pc, #64]	; (800b824 <xTimerCreateTimerTask+0x84>)
 800b7e2:	4811      	ldr	r0, [pc, #68]	; (800b828 <xTimerCreateTimerTask+0x88>)
 800b7e4:	f7fe ffa6 	bl	800a734 <xTaskCreateStatic>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	4a10      	ldr	r2, [pc, #64]	; (800b82c <xTimerCreateTimerTask+0x8c>)
 800b7ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b7ee:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <xTimerCreateTimerTask+0x8c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10a      	bne.n	800b816 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	613b      	str	r3, [r7, #16]
}
 800b812:	bf00      	nop
 800b814:	e7fe      	b.n	800b814 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b816:	697b      	ldr	r3, [r7, #20]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	20001ba8 	.word	0x20001ba8
 800b824:	0800de2c 	.word	0x0800de2c
 800b828:	0800b965 	.word	0x0800b965
 800b82c:	20001bac 	.word	0x20001bac

0800b830 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b08a      	sub	sp, #40	; 0x28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
 800b83c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b83e:	2300      	movs	r3, #0
 800b840:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10a      	bne.n	800b85e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	623b      	str	r3, [r7, #32]
}
 800b85a:	bf00      	nop
 800b85c:	e7fe      	b.n	800b85c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b85e:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <xTimerGenericCommand+0x98>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d02a      	beq.n	800b8bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2b05      	cmp	r3, #5
 800b876:	dc18      	bgt.n	800b8aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b878:	f7ff fdb4 	bl	800b3e4 <xTaskGetSchedulerState>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d109      	bne.n	800b896 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b882:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <xTimerGenericCommand+0x98>)
 800b884:	6818      	ldr	r0, [r3, #0]
 800b886:	f107 0110 	add.w	r1, r7, #16
 800b88a:	2300      	movs	r3, #0
 800b88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b88e:	f7fe fa45 	bl	8009d1c <xQueueGenericSend>
 800b892:	6278      	str	r0, [r7, #36]	; 0x24
 800b894:	e012      	b.n	800b8bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <xTimerGenericCommand+0x98>)
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	f107 0110 	add.w	r1, r7, #16
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f7fe fa3b 	bl	8009d1c <xQueueGenericSend>
 800b8a6:	6278      	str	r0, [r7, #36]	; 0x24
 800b8a8:	e008      	b.n	800b8bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8aa:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <xTimerGenericCommand+0x98>)
 800b8ac:	6818      	ldr	r0, [r3, #0]
 800b8ae:	f107 0110 	add.w	r1, r7, #16
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	f7fe fb2f 	bl	8009f18 <xQueueGenericSendFromISR>
 800b8ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3728      	adds	r7, #40	; 0x28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20001ba8 	.word	0x20001ba8

0800b8cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af02      	add	r7, sp, #8
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d6:	4b22      	ldr	r3, [pc, #136]	; (800b960 <prvProcessExpiredTimer+0x94>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fd fffb 	bl	80098e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8f0:	f003 0304 	and.w	r3, r3, #4
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d022      	beq.n	800b93e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	699a      	ldr	r2, [r3, #24]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	18d1      	adds	r1, r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	6978      	ldr	r0, [r7, #20]
 800b906:	f000 f8d1 	bl	800baac <prvInsertTimerInActiveList>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01f      	beq.n	800b950 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b910:	2300      	movs	r3, #0
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	2300      	movs	r3, #0
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	2100      	movs	r1, #0
 800b91a:	6978      	ldr	r0, [r7, #20]
 800b91c:	f7ff ff88 	bl	800b830 <xTimerGenericCommand>
 800b920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d113      	bne.n	800b950 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	60fb      	str	r3, [r7, #12]
}
 800b93a:	bf00      	nop
 800b93c:	e7fe      	b.n	800b93c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b944:	f023 0301 	bic.w	r3, r3, #1
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	6978      	ldr	r0, [r7, #20]
 800b956:	4798      	blx	r3
}
 800b958:	bf00      	nop
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	20001ba0 	.word	0x20001ba0

0800b964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b96c:	f107 0308 	add.w	r3, r7, #8
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f857 	bl	800ba24 <prvGetNextExpireTime>
 800b976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	4619      	mov	r1, r3
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 f803 	bl	800b988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b982:	f000 f8d5 	bl	800bb30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b986:	e7f1      	b.n	800b96c <prvTimerTask+0x8>

0800b988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b992:	f7ff f92b 	bl	800abec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b996:	f107 0308 	add.w	r3, r7, #8
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f866 	bl	800ba6c <prvSampleTimeNow>
 800b9a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d130      	bne.n	800ba0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10a      	bne.n	800b9c4 <prvProcessTimerOrBlockTask+0x3c>
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d806      	bhi.n	800b9c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9b6:	f7ff f927 	bl	800ac08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff ff85 	bl	800b8cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9c2:	e024      	b.n	800ba0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d008      	beq.n	800b9dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <prvProcessTimerOrBlockTask+0x90>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <prvProcessTimerOrBlockTask+0x50>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e000      	b.n	800b9da <prvProcessTimerOrBlockTask+0x52>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <prvProcessTimerOrBlockTask+0x94>)
 800b9de:	6818      	ldr	r0, [r3, #0]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	f7fe fe6f 	bl	800a6cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b9ee:	f7ff f90b 	bl	800ac08 <xTaskResumeAll>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10a      	bne.n	800ba0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b9f8:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <prvProcessTimerOrBlockTask+0x98>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	f3bf 8f6f 	isb	sy
}
 800ba08:	e001      	b.n	800ba0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba0a:	f7ff f8fd 	bl	800ac08 <xTaskResumeAll>
}
 800ba0e:	bf00      	nop
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20001ba4 	.word	0x20001ba4
 800ba1c:	20001ba8 	.word	0x20001ba8
 800ba20:	e000ed04 	.word	0xe000ed04

0800ba24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba2c:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <prvGetNextExpireTime+0x44>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <prvGetNextExpireTime+0x16>
 800ba36:	2201      	movs	r2, #1
 800ba38:	e000      	b.n	800ba3c <prvGetNextExpireTime+0x18>
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d105      	bne.n	800ba54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <prvGetNextExpireTime+0x44>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	e001      	b.n	800ba58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba58:	68fb      	ldr	r3, [r7, #12]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	20001ba0 	.word	0x20001ba0

0800ba6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba74:	f7ff f966 	bl	800ad44 <xTaskGetTickCount>
 800ba78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba7a:	4b0b      	ldr	r3, [pc, #44]	; (800baa8 <prvSampleTimeNow+0x3c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d205      	bcs.n	800ba90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba84:	f000 f936 	bl	800bcf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	e002      	b.n	800ba96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba96:	4a04      	ldr	r2, [pc, #16]	; (800baa8 <prvSampleTimeNow+0x3c>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20001bb0 	.word	0x20001bb0

0800baac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d812      	bhi.n	800baf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	1ad2      	subs	r2, r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	429a      	cmp	r2, r3
 800bade:	d302      	bcc.n	800bae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bae0:	2301      	movs	r3, #1
 800bae2:	617b      	str	r3, [r7, #20]
 800bae4:	e01b      	b.n	800bb1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bae6:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <prvInsertTimerInActiveList+0x7c>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3304      	adds	r3, #4
 800baee:	4619      	mov	r1, r3
 800baf0:	4610      	mov	r0, r2
 800baf2:	f7fd febc 	bl	800986e <vListInsert>
 800baf6:	e012      	b.n	800bb1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d206      	bcs.n	800bb0e <prvInsertTimerInActiveList+0x62>
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d302      	bcc.n	800bb0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	617b      	str	r3, [r7, #20]
 800bb0c:	e007      	b.n	800bb1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb0e:	4b07      	ldr	r3, [pc, #28]	; (800bb2c <prvInsertTimerInActiveList+0x80>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	3304      	adds	r3, #4
 800bb16:	4619      	mov	r1, r3
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f7fd fea8 	bl	800986e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb1e:	697b      	ldr	r3, [r7, #20]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3718      	adds	r7, #24
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	20001ba4 	.word	0x20001ba4
 800bb2c:	20001ba0 	.word	0x20001ba0

0800bb30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08e      	sub	sp, #56	; 0x38
 800bb34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb36:	e0ca      	b.n	800bcce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	da18      	bge.n	800bb70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb3e:	1d3b      	adds	r3, r7, #4
 800bb40:	3304      	adds	r3, #4
 800bb42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10a      	bne.n	800bb60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	61fb      	str	r3, [r7, #28]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb66:	6850      	ldr	r0, [r2, #4]
 800bb68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb6a:	6892      	ldr	r2, [r2, #8]
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f2c0 80aa 	blt.w	800bccc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d004      	beq.n	800bb8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	3304      	adds	r3, #4
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fd fea9 	bl	80098e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb8e:	463b      	mov	r3, r7
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff ff6b 	bl	800ba6c <prvSampleTimeNow>
 800bb96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b09      	cmp	r3, #9
 800bb9c:	f200 8097 	bhi.w	800bcce <prvProcessReceivedCommands+0x19e>
 800bba0:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <prvProcessReceivedCommands+0x78>)
 800bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba6:	bf00      	nop
 800bba8:	0800bbd1 	.word	0x0800bbd1
 800bbac:	0800bbd1 	.word	0x0800bbd1
 800bbb0:	0800bbd1 	.word	0x0800bbd1
 800bbb4:	0800bc45 	.word	0x0800bc45
 800bbb8:	0800bc59 	.word	0x0800bc59
 800bbbc:	0800bca3 	.word	0x0800bca3
 800bbc0:	0800bbd1 	.word	0x0800bbd1
 800bbc4:	0800bbd1 	.word	0x0800bbd1
 800bbc8:	0800bc45 	.word	0x0800bc45
 800bbcc:	0800bc59 	.word	0x0800bc59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbd6:	f043 0301 	orr.w	r3, r3, #1
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	18d1      	adds	r1, r2, r3
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf0:	f7ff ff5c 	bl	800baac <prvInsertTimerInActiveList>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d069      	beq.n	800bcce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d05e      	beq.n	800bcce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	441a      	add	r2, r3
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	2100      	movs	r1, #0
 800bc20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc22:	f7ff fe05 	bl	800b830 <xTimerGenericCommand>
 800bc26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc28:	6a3b      	ldr	r3, [r7, #32]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d14f      	bne.n	800bcce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	61bb      	str	r3, [r7, #24]
}
 800bc40:	bf00      	nop
 800bc42:	e7fe      	b.n	800bc42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc56:	e03a      	b.n	800bcce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	617b      	str	r3, [r7, #20]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	699a      	ldr	r2, [r3, #24]
 800bc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc94:	18d1      	adds	r1, r2, r3
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc9c:	f7ff ff06 	bl	800baac <prvInsertTimerInActiveList>
					break;
 800bca0:	e015      	b.n	800bcce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bca8:	f003 0302 	and.w	r3, r3, #2
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d103      	bne.n	800bcb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bcb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcb2:	f000 fbdd 	bl	800c470 <vPortFree>
 800bcb6:	e00a      	b.n	800bcce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcbe:	f023 0301 	bic.w	r3, r3, #1
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcca:	e000      	b.n	800bcce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bccc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcce:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <prvProcessReceivedCommands+0x1c0>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	1d39      	adds	r1, r7, #4
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe f9ba 	bl	800a050 <xQueueReceive>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f47f af2a 	bne.w	800bb38 <prvProcessReceivedCommands+0x8>
	}
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	3730      	adds	r7, #48	; 0x30
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20001ba8 	.word	0x20001ba8

0800bcf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcfa:	e048      	b.n	800bd8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcfc:	4b2d      	ldr	r3, [pc, #180]	; (800bdb4 <prvSwitchTimerLists+0xc0>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd06:	4b2b      	ldr	r3, [pc, #172]	; (800bdb4 <prvSwitchTimerLists+0xc0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fd fde3 	bl	80098e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02e      	beq.n	800bd8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4413      	add	r3, r2
 800bd38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d90e      	bls.n	800bd60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd4e:	4b19      	ldr	r3, [pc, #100]	; (800bdb4 <prvSwitchTimerLists+0xc0>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fd fd88 	bl	800986e <vListInsert>
 800bd5e:	e016      	b.n	800bd8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd60:	2300      	movs	r3, #0
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	2300      	movs	r3, #0
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	2100      	movs	r1, #0
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff fd60 	bl	800b830 <xTimerGenericCommand>
 800bd70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10a      	bne.n	800bd8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	603b      	str	r3, [r7, #0]
}
 800bd8a:	bf00      	nop
 800bd8c:	e7fe      	b.n	800bd8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd8e:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <prvSwitchTimerLists+0xc0>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1b1      	bne.n	800bcfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd98:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <prvSwitchTimerLists+0xc0>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd9e:	4b06      	ldr	r3, [pc, #24]	; (800bdb8 <prvSwitchTimerLists+0xc4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a04      	ldr	r2, [pc, #16]	; (800bdb4 <prvSwitchTimerLists+0xc0>)
 800bda4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bda6:	4a04      	ldr	r2, [pc, #16]	; (800bdb8 <prvSwitchTimerLists+0xc4>)
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	6013      	str	r3, [r2, #0]
}
 800bdac:	bf00      	nop
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20001ba0 	.word	0x20001ba0
 800bdb8:	20001ba4 	.word	0x20001ba4

0800bdbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdc2:	f000 f967 	bl	800c094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdc6:	4b15      	ldr	r3, [pc, #84]	; (800be1c <prvCheckForValidListAndQueue+0x60>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d120      	bne.n	800be10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdce:	4814      	ldr	r0, [pc, #80]	; (800be20 <prvCheckForValidListAndQueue+0x64>)
 800bdd0:	f7fd fcfc 	bl	80097cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdd4:	4813      	ldr	r0, [pc, #76]	; (800be24 <prvCheckForValidListAndQueue+0x68>)
 800bdd6:	f7fd fcf9 	bl	80097cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdda:	4b13      	ldr	r3, [pc, #76]	; (800be28 <prvCheckForValidListAndQueue+0x6c>)
 800bddc:	4a10      	ldr	r2, [pc, #64]	; (800be20 <prvCheckForValidListAndQueue+0x64>)
 800bdde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bde0:	4b12      	ldr	r3, [pc, #72]	; (800be2c <prvCheckForValidListAndQueue+0x70>)
 800bde2:	4a10      	ldr	r2, [pc, #64]	; (800be24 <prvCheckForValidListAndQueue+0x68>)
 800bde4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bde6:	2300      	movs	r3, #0
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	4b11      	ldr	r3, [pc, #68]	; (800be30 <prvCheckForValidListAndQueue+0x74>)
 800bdec:	4a11      	ldr	r2, [pc, #68]	; (800be34 <prvCheckForValidListAndQueue+0x78>)
 800bdee:	2110      	movs	r1, #16
 800bdf0:	200a      	movs	r0, #10
 800bdf2:	f7fd fe07 	bl	8009a04 <xQueueGenericCreateStatic>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4a08      	ldr	r2, [pc, #32]	; (800be1c <prvCheckForValidListAndQueue+0x60>)
 800bdfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bdfc:	4b07      	ldr	r3, [pc, #28]	; (800be1c <prvCheckForValidListAndQueue+0x60>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <prvCheckForValidListAndQueue+0x60>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	490b      	ldr	r1, [pc, #44]	; (800be38 <prvCheckForValidListAndQueue+0x7c>)
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe fc34 	bl	800a678 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be10:	f000 f970 	bl	800c0f4 <vPortExitCritical>
}
 800be14:	bf00      	nop
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20001ba8 	.word	0x20001ba8
 800be20:	20001b78 	.word	0x20001b78
 800be24:	20001b8c 	.word	0x20001b8c
 800be28:	20001ba0 	.word	0x20001ba0
 800be2c:	20001ba4 	.word	0x20001ba4
 800be30:	20001c54 	.word	0x20001c54
 800be34:	20001bb4 	.word	0x20001bb4
 800be38:	0800de34 	.word	0x0800de34

0800be3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3b04      	subs	r3, #4
 800be4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3b04      	subs	r3, #4
 800be5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f023 0201 	bic.w	r2, r3, #1
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3b04      	subs	r3, #4
 800be6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be6c:	4a0c      	ldr	r2, [pc, #48]	; (800bea0 <pxPortInitialiseStack+0x64>)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3b14      	subs	r3, #20
 800be76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3b04      	subs	r3, #4
 800be82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f06f 0202 	mvn.w	r2, #2
 800be8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3b20      	subs	r3, #32
 800be90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be92:	68fb      	ldr	r3, [r7, #12]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	0800bea5 	.word	0x0800bea5

0800bea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beae:	4b12      	ldr	r3, [pc, #72]	; (800bef8 <prvTaskExitError+0x54>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb6:	d00a      	beq.n	800bece <prvTaskExitError+0x2a>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	60fb      	str	r3, [r7, #12]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <prvTaskExitError+0x28>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	60bb      	str	r3, [r7, #8]
}
 800bee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bee2:	bf00      	nop
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0fc      	beq.n	800bee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	2000014c 	.word	0x2000014c
 800befc:	00000000 	.word	0x00000000

0800bf00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf00:	4b07      	ldr	r3, [pc, #28]	; (800bf20 <pxCurrentTCBConst2>)
 800bf02:	6819      	ldr	r1, [r3, #0]
 800bf04:	6808      	ldr	r0, [r1, #0]
 800bf06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	f380 8809 	msr	PSP, r0
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8811 	msr	BASEPRI, r0
 800bf1a:	4770      	bx	lr
 800bf1c:	f3af 8000 	nop.w

0800bf20 <pxCurrentTCBConst2>:
 800bf20:	20001678 	.word	0x20001678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop

0800bf28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf28:	4808      	ldr	r0, [pc, #32]	; (800bf4c <prvPortStartFirstTask+0x24>)
 800bf2a:	6800      	ldr	r0, [r0, #0]
 800bf2c:	6800      	ldr	r0, [r0, #0]
 800bf2e:	f380 8808 	msr	MSP, r0
 800bf32:	f04f 0000 	mov.w	r0, #0
 800bf36:	f380 8814 	msr	CONTROL, r0
 800bf3a:	b662      	cpsie	i
 800bf3c:	b661      	cpsie	f
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	df00      	svc	0
 800bf48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf4a:	bf00      	nop
 800bf4c:	e000ed08 	.word	0xe000ed08

0800bf50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf56:	4b46      	ldr	r3, [pc, #280]	; (800c070 <xPortStartScheduler+0x120>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a46      	ldr	r2, [pc, #280]	; (800c074 <xPortStartScheduler+0x124>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d10a      	bne.n	800bf76 <xPortStartScheduler+0x26>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	613b      	str	r3, [r7, #16]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf76:	4b3e      	ldr	r3, [pc, #248]	; (800c070 <xPortStartScheduler+0x120>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a3f      	ldr	r2, [pc, #252]	; (800c078 <xPortStartScheduler+0x128>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d10a      	bne.n	800bf96 <xPortStartScheduler+0x46>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	60fb      	str	r3, [r7, #12]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf96:	4b39      	ldr	r3, [pc, #228]	; (800c07c <xPortStartScheduler+0x12c>)
 800bf98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	22ff      	movs	r2, #255	; 0xff
 800bfa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	4b31      	ldr	r3, [pc, #196]	; (800c080 <xPortStartScheduler+0x130>)
 800bfbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfbe:	4b31      	ldr	r3, [pc, #196]	; (800c084 <xPortStartScheduler+0x134>)
 800bfc0:	2207      	movs	r2, #7
 800bfc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfc4:	e009      	b.n	800bfda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bfc6:	4b2f      	ldr	r3, [pc, #188]	; (800c084 <xPortStartScheduler+0x134>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	4a2d      	ldr	r2, [pc, #180]	; (800c084 <xPortStartScheduler+0x134>)
 800bfce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfda:	78fb      	ldrb	r3, [r7, #3]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe2:	2b80      	cmp	r3, #128	; 0x80
 800bfe4:	d0ef      	beq.n	800bfc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfe6:	4b27      	ldr	r3, [pc, #156]	; (800c084 <xPortStartScheduler+0x134>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f1c3 0307 	rsb	r3, r3, #7
 800bfee:	2b04      	cmp	r3, #4
 800bff0:	d00a      	beq.n	800c008 <xPortStartScheduler+0xb8>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	60bb      	str	r3, [r7, #8]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c008:	4b1e      	ldr	r3, [pc, #120]	; (800c084 <xPortStartScheduler+0x134>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	4a1d      	ldr	r2, [pc, #116]	; (800c084 <xPortStartScheduler+0x134>)
 800c010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c012:	4b1c      	ldr	r3, [pc, #112]	; (800c084 <xPortStartScheduler+0x134>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c01a:	4a1a      	ldr	r2, [pc, #104]	; (800c084 <xPortStartScheduler+0x134>)
 800c01c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	b2da      	uxtb	r2, r3
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c026:	4b18      	ldr	r3, [pc, #96]	; (800c088 <xPortStartScheduler+0x138>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a17      	ldr	r2, [pc, #92]	; (800c088 <xPortStartScheduler+0x138>)
 800c02c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c032:	4b15      	ldr	r3, [pc, #84]	; (800c088 <xPortStartScheduler+0x138>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a14      	ldr	r2, [pc, #80]	; (800c088 <xPortStartScheduler+0x138>)
 800c038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c03c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c03e:	f000 f8dd 	bl	800c1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c042:	4b12      	ldr	r3, [pc, #72]	; (800c08c <xPortStartScheduler+0x13c>)
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c048:	f000 f8fc 	bl	800c244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c04c:	4b10      	ldr	r3, [pc, #64]	; (800c090 <xPortStartScheduler+0x140>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a0f      	ldr	r2, [pc, #60]	; (800c090 <xPortStartScheduler+0x140>)
 800c052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c058:	f7ff ff66 	bl	800bf28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c05c:	f7fe ff3c 	bl	800aed8 <vTaskSwitchContext>
	prvTaskExitError();
 800c060:	f7ff ff20 	bl	800bea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	e000ed00 	.word	0xe000ed00
 800c074:	410fc271 	.word	0x410fc271
 800c078:	410fc270 	.word	0x410fc270
 800c07c:	e000e400 	.word	0xe000e400
 800c080:	20001ca4 	.word	0x20001ca4
 800c084:	20001ca8 	.word	0x20001ca8
 800c088:	e000ed20 	.word	0xe000ed20
 800c08c:	2000014c 	.word	0x2000014c
 800c090:	e000ef34 	.word	0xe000ef34

0800c094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	607b      	str	r3, [r7, #4]
}
 800c0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <vPortEnterCritical+0x58>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	4a0d      	ldr	r2, [pc, #52]	; (800c0ec <vPortEnterCritical+0x58>)
 800c0b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0b8:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <vPortEnterCritical+0x58>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d10f      	bne.n	800c0e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0c0:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <vPortEnterCritical+0x5c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00a      	beq.n	800c0e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	603b      	str	r3, [r7, #0]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <vPortEnterCritical+0x4a>
	}
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	2000014c 	.word	0x2000014c
 800c0f0:	e000ed04 	.word	0xe000ed04

0800c0f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0fa:	4b12      	ldr	r3, [pc, #72]	; (800c144 <vPortExitCritical+0x50>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10a      	bne.n	800c118 <vPortExitCritical+0x24>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	607b      	str	r3, [r7, #4]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c118:	4b0a      	ldr	r3, [pc, #40]	; (800c144 <vPortExitCritical+0x50>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	4a09      	ldr	r2, [pc, #36]	; (800c144 <vPortExitCritical+0x50>)
 800c120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c122:	4b08      	ldr	r3, [pc, #32]	; (800c144 <vPortExitCritical+0x50>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <vPortExitCritical+0x42>
 800c12a:	2300      	movs	r3, #0
 800c12c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f383 8811 	msr	BASEPRI, r3
}
 800c134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c136:	bf00      	nop
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	2000014c 	.word	0x2000014c
	...

0800c150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c150:	f3ef 8009 	mrs	r0, PSP
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	4b15      	ldr	r3, [pc, #84]	; (800c1b0 <pxCurrentTCBConst>)
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	f01e 0f10 	tst.w	lr, #16
 800c160:	bf08      	it	eq
 800c162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16a:	6010      	str	r0, [r2, #0]
 800c16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c170:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c174:	f380 8811 	msr	BASEPRI, r0
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f7fe feaa 	bl	800aed8 <vTaskSwitchContext>
 800c184:	f04f 0000 	mov.w	r0, #0
 800c188:	f380 8811 	msr	BASEPRI, r0
 800c18c:	bc09      	pop	{r0, r3}
 800c18e:	6819      	ldr	r1, [r3, #0]
 800c190:	6808      	ldr	r0, [r1, #0]
 800c192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c196:	f01e 0f10 	tst.w	lr, #16
 800c19a:	bf08      	it	eq
 800c19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1a0:	f380 8809 	msr	PSP, r0
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	f3af 8000 	nop.w

0800c1b0 <pxCurrentTCBConst>:
 800c1b0:	20001678 	.word	0x20001678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop

0800c1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	607b      	str	r3, [r7, #4]
}
 800c1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1d2:	f7fe fdc7 	bl	800ad64 <xTaskIncrementTick>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <xPortSysTickHandler+0x40>)
 800c1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f383 8811 	msr	BASEPRI, r3
}
 800c1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <vPortSetupTimerInterrupt+0x34>)
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c206:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <vPortSetupTimerInterrupt+0x38>)
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c20c:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <vPortSetupTimerInterrupt+0x3c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a0a      	ldr	r2, [pc, #40]	; (800c23c <vPortSetupTimerInterrupt+0x40>)
 800c212:	fba2 2303 	umull	r2, r3, r2, r3
 800c216:	099b      	lsrs	r3, r3, #6
 800c218:	4a09      	ldr	r2, [pc, #36]	; (800c240 <vPortSetupTimerInterrupt+0x44>)
 800c21a:	3b01      	subs	r3, #1
 800c21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c21e:	4b04      	ldr	r3, [pc, #16]	; (800c230 <vPortSetupTimerInterrupt+0x34>)
 800c220:	2207      	movs	r2, #7
 800c222:	601a      	str	r2, [r3, #0]
}
 800c224:	bf00      	nop
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	e000e010 	.word	0xe000e010
 800c234:	e000e018 	.word	0xe000e018
 800c238:	20000140 	.word	0x20000140
 800c23c:	10624dd3 	.word	0x10624dd3
 800c240:	e000e014 	.word	0xe000e014

0800c244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c254 <vPortEnableVFP+0x10>
 800c248:	6801      	ldr	r1, [r0, #0]
 800c24a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c24e:	6001      	str	r1, [r0, #0]
 800c250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c252:	bf00      	nop
 800c254:	e000ed88 	.word	0xe000ed88

0800c258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c25e:	f3ef 8305 	mrs	r3, IPSR
 800c262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b0f      	cmp	r3, #15
 800c268:	d914      	bls.n	800c294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c26a:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <vPortValidateInterruptPriority+0x70>)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4413      	add	r3, r2
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c274:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <vPortValidateInterruptPriority+0x74>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	7afa      	ldrb	r2, [r7, #11]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d20a      	bcs.n	800c294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	607b      	str	r3, [r7, #4]
}
 800c290:	bf00      	nop
 800c292:	e7fe      	b.n	800c292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c294:	4b0e      	ldr	r3, [pc, #56]	; (800c2d0 <vPortValidateInterruptPriority+0x78>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c29c:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <vPortValidateInterruptPriority+0x7c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d90a      	bls.n	800c2ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	603b      	str	r3, [r7, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <vPortValidateInterruptPriority+0x60>
	}
 800c2ba:	bf00      	nop
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	e000e3f0 	.word	0xe000e3f0
 800c2cc:	20001ca4 	.word	0x20001ca4
 800c2d0:	e000ed0c 	.word	0xe000ed0c
 800c2d4:	20001ca8 	.word	0x20001ca8

0800c2d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2e4:	f7fe fc82 	bl	800abec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2e8:	4b5b      	ldr	r3, [pc, #364]	; (800c458 <pvPortMalloc+0x180>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2f0:	f000 f920 	bl	800c534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2f4:	4b59      	ldr	r3, [pc, #356]	; (800c45c <pvPortMalloc+0x184>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f040 8093 	bne.w	800c428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d01d      	beq.n	800c344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c308:	2208      	movs	r2, #8
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4413      	add	r3, r2
 800c30e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f003 0307 	and.w	r3, r3, #7
 800c316:	2b00      	cmp	r3, #0
 800c318:	d014      	beq.n	800c344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f023 0307 	bic.w	r3, r3, #7
 800c320:	3308      	adds	r3, #8
 800c322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f003 0307 	and.w	r3, r3, #7
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <pvPortMalloc+0x6c>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	617b      	str	r3, [r7, #20]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d06e      	beq.n	800c428 <pvPortMalloc+0x150>
 800c34a:	4b45      	ldr	r3, [pc, #276]	; (800c460 <pvPortMalloc+0x188>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	d869      	bhi.n	800c428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c354:	4b43      	ldr	r3, [pc, #268]	; (800c464 <pvPortMalloc+0x18c>)
 800c356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c358:	4b42      	ldr	r3, [pc, #264]	; (800c464 <pvPortMalloc+0x18c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c35e:	e004      	b.n	800c36a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	429a      	cmp	r2, r3
 800c372:	d903      	bls.n	800c37c <pvPortMalloc+0xa4>
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f1      	bne.n	800c360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c37c:	4b36      	ldr	r3, [pc, #216]	; (800c458 <pvPortMalloc+0x180>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c382:	429a      	cmp	r2, r3
 800c384:	d050      	beq.n	800c428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2208      	movs	r2, #8
 800c38c:	4413      	add	r3, r2
 800c38e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d91f      	bls.n	800c3e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00a      	beq.n	800c3d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	613b      	str	r3, [r7, #16]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	1ad2      	subs	r2, r2, r3
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3e2:	69b8      	ldr	r0, [r7, #24]
 800c3e4:	f000 f908 	bl	800c5f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3e8:	4b1d      	ldr	r3, [pc, #116]	; (800c460 <pvPortMalloc+0x188>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	4a1b      	ldr	r2, [pc, #108]	; (800c460 <pvPortMalloc+0x188>)
 800c3f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3f6:	4b1a      	ldr	r3, [pc, #104]	; (800c460 <pvPortMalloc+0x188>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4b1b      	ldr	r3, [pc, #108]	; (800c468 <pvPortMalloc+0x190>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d203      	bcs.n	800c40a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c402:	4b17      	ldr	r3, [pc, #92]	; (800c460 <pvPortMalloc+0x188>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a18      	ldr	r2, [pc, #96]	; (800c468 <pvPortMalloc+0x190>)
 800c408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	4b13      	ldr	r3, [pc, #76]	; (800c45c <pvPortMalloc+0x184>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	431a      	orrs	r2, r3
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c41e:	4b13      	ldr	r3, [pc, #76]	; (800c46c <pvPortMalloc+0x194>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3301      	adds	r3, #1
 800c424:	4a11      	ldr	r2, [pc, #68]	; (800c46c <pvPortMalloc+0x194>)
 800c426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c428:	f7fe fbee 	bl	800ac08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00a      	beq.n	800c44c <pvPortMalloc+0x174>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	60fb      	str	r3, [r7, #12]
}
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <pvPortMalloc+0x172>
	return pvReturn;
 800c44c:	69fb      	ldr	r3, [r7, #28]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3728      	adds	r7, #40	; 0x28
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	200058b4 	.word	0x200058b4
 800c45c:	200058c8 	.word	0x200058c8
 800c460:	200058b8 	.word	0x200058b8
 800c464:	200058ac 	.word	0x200058ac
 800c468:	200058bc 	.word	0x200058bc
 800c46c:	200058c0 	.word	0x200058c0

0800c470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d04d      	beq.n	800c51e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c482:	2308      	movs	r3, #8
 800c484:	425b      	negs	r3, r3
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4413      	add	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	4b24      	ldr	r3, [pc, #144]	; (800c528 <vPortFree+0xb8>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4013      	ands	r3, r2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10a      	bne.n	800c4b4 <vPortFree+0x44>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	60fb      	str	r3, [r7, #12]
}
 800c4b0:	bf00      	nop
 800c4b2:	e7fe      	b.n	800c4b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00a      	beq.n	800c4d2 <vPortFree+0x62>
	__asm volatile
 800c4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	60bb      	str	r3, [r7, #8]
}
 800c4ce:	bf00      	nop
 800c4d0:	e7fe      	b.n	800c4d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	4b14      	ldr	r3, [pc, #80]	; (800c528 <vPortFree+0xb8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4013      	ands	r3, r2
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d01e      	beq.n	800c51e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d11a      	bne.n	800c51e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	4b0e      	ldr	r3, [pc, #56]	; (800c528 <vPortFree+0xb8>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	43db      	mvns	r3, r3
 800c4f2:	401a      	ands	r2, r3
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4f8:	f7fe fb78 	bl	800abec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <vPortFree+0xbc>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4413      	add	r3, r2
 800c506:	4a09      	ldr	r2, [pc, #36]	; (800c52c <vPortFree+0xbc>)
 800c508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c50a:	6938      	ldr	r0, [r7, #16]
 800c50c:	f000 f874 	bl	800c5f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <vPortFree+0xc0>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3301      	adds	r3, #1
 800c516:	4a06      	ldr	r2, [pc, #24]	; (800c530 <vPortFree+0xc0>)
 800c518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c51a:	f7fe fb75 	bl	800ac08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c51e:	bf00      	nop
 800c520:	3718      	adds	r7, #24
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	200058c8 	.word	0x200058c8
 800c52c:	200058b8 	.word	0x200058b8
 800c530:	200058c4 	.word	0x200058c4

0800c534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c53a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c53e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c540:	4b27      	ldr	r3, [pc, #156]	; (800c5e0 <prvHeapInit+0xac>)
 800c542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f003 0307 	and.w	r3, r3, #7
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00c      	beq.n	800c568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3307      	adds	r3, #7
 800c552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0307 	bic.w	r3, r3, #7
 800c55a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	4a1f      	ldr	r2, [pc, #124]	; (800c5e0 <prvHeapInit+0xac>)
 800c564:	4413      	add	r3, r2
 800c566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c56c:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <prvHeapInit+0xb0>)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c572:	4b1c      	ldr	r3, [pc, #112]	; (800c5e4 <prvHeapInit+0xb0>)
 800c574:	2200      	movs	r2, #0
 800c576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	4413      	add	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c580:	2208      	movs	r2, #8
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	1a9b      	subs	r3, r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f023 0307 	bic.w	r3, r3, #7
 800c58e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4a15      	ldr	r2, [pc, #84]	; (800c5e8 <prvHeapInit+0xb4>)
 800c594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c596:	4b14      	ldr	r3, [pc, #80]	; (800c5e8 <prvHeapInit+0xb4>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2200      	movs	r2, #0
 800c59c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c59e:	4b12      	ldr	r3, [pc, #72]	; (800c5e8 <prvHeapInit+0xb4>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	1ad2      	subs	r2, r2, r3
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5b4:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <prvHeapInit+0xb4>)
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	4a0a      	ldr	r2, [pc, #40]	; (800c5ec <prvHeapInit+0xb8>)
 800c5c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	4a09      	ldr	r2, [pc, #36]	; (800c5f0 <prvHeapInit+0xbc>)
 800c5ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5cc:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <prvHeapInit+0xc0>)
 800c5ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5d2:	601a      	str	r2, [r3, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	20001cac 	.word	0x20001cac
 800c5e4:	200058ac 	.word	0x200058ac
 800c5e8:	200058b4 	.word	0x200058b4
 800c5ec:	200058bc 	.word	0x200058bc
 800c5f0:	200058b8 	.word	0x200058b8
 800c5f4:	200058c8 	.word	0x200058c8

0800c5f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c600:	4b28      	ldr	r3, [pc, #160]	; (800c6a4 <prvInsertBlockIntoFreeList+0xac>)
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	e002      	b.n	800c60c <prvInsertBlockIntoFreeList+0x14>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	429a      	cmp	r2, r3
 800c614:	d8f7      	bhi.n	800c606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	4413      	add	r3, r2
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d108      	bne.n	800c63a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	441a      	add	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	441a      	add	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d118      	bne.n	800c680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	429a      	cmp	r2, r3
 800c658:	d00d      	beq.n	800c676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	441a      	add	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	e008      	b.n	800c688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c676:	4b0c      	ldr	r3, [pc, #48]	; (800c6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	e003      	b.n	800c688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d002      	beq.n	800c696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c696:	bf00      	nop
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	200058ac 	.word	0x200058ac
 800c6a8:	200058b4 	.word	0x200058b4

0800c6ac <atoi>:
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	f000 bbe2 	b.w	800ce78 <strtol>

0800c6b4 <__errno>:
 800c6b4:	4b01      	ldr	r3, [pc, #4]	; (800c6bc <__errno+0x8>)
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20000150 	.word	0x20000150

0800c6c0 <std>:
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	b510      	push	{r4, lr}
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	e9c0 3300 	strd	r3, r3, [r0]
 800c6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6ce:	6083      	str	r3, [r0, #8]
 800c6d0:	8181      	strh	r1, [r0, #12]
 800c6d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c6d4:	81c2      	strh	r2, [r0, #14]
 800c6d6:	6183      	str	r3, [r0, #24]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	2208      	movs	r2, #8
 800c6dc:	305c      	adds	r0, #92	; 0x5c
 800c6de:	f000 f91a 	bl	800c916 <memset>
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <std+0x38>)
 800c6e4:	6263      	str	r3, [r4, #36]	; 0x24
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <std+0x3c>)
 800c6e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <std+0x40>)
 800c6ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6ee:	4b05      	ldr	r3, [pc, #20]	; (800c704 <std+0x44>)
 800c6f0:	6224      	str	r4, [r4, #32]
 800c6f2:	6323      	str	r3, [r4, #48]	; 0x30
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0800cca1 	.word	0x0800cca1
 800c6fc:	0800ccc3 	.word	0x0800ccc3
 800c700:	0800ccfb 	.word	0x0800ccfb
 800c704:	0800cd1f 	.word	0x0800cd1f

0800c708 <_cleanup_r>:
 800c708:	4901      	ldr	r1, [pc, #4]	; (800c710 <_cleanup_r+0x8>)
 800c70a:	f000 b8af 	b.w	800c86c <_fwalk_reent>
 800c70e:	bf00      	nop
 800c710:	0800d15d 	.word	0x0800d15d

0800c714 <__sfmoreglue>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	2268      	movs	r2, #104	; 0x68
 800c718:	1e4d      	subs	r5, r1, #1
 800c71a:	4355      	muls	r5, r2
 800c71c:	460e      	mov	r6, r1
 800c71e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c722:	f000 f921 	bl	800c968 <_malloc_r>
 800c726:	4604      	mov	r4, r0
 800c728:	b140      	cbz	r0, 800c73c <__sfmoreglue+0x28>
 800c72a:	2100      	movs	r1, #0
 800c72c:	e9c0 1600 	strd	r1, r6, [r0]
 800c730:	300c      	adds	r0, #12
 800c732:	60a0      	str	r0, [r4, #8]
 800c734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c738:	f000 f8ed 	bl	800c916 <memset>
 800c73c:	4620      	mov	r0, r4
 800c73e:	bd70      	pop	{r4, r5, r6, pc}

0800c740 <__sfp_lock_acquire>:
 800c740:	4801      	ldr	r0, [pc, #4]	; (800c748 <__sfp_lock_acquire+0x8>)
 800c742:	f000 b8d8 	b.w	800c8f6 <__retarget_lock_acquire_recursive>
 800c746:	bf00      	nop
 800c748:	200058cd 	.word	0x200058cd

0800c74c <__sfp_lock_release>:
 800c74c:	4801      	ldr	r0, [pc, #4]	; (800c754 <__sfp_lock_release+0x8>)
 800c74e:	f000 b8d3 	b.w	800c8f8 <__retarget_lock_release_recursive>
 800c752:	bf00      	nop
 800c754:	200058cd 	.word	0x200058cd

0800c758 <__sinit_lock_acquire>:
 800c758:	4801      	ldr	r0, [pc, #4]	; (800c760 <__sinit_lock_acquire+0x8>)
 800c75a:	f000 b8cc 	b.w	800c8f6 <__retarget_lock_acquire_recursive>
 800c75e:	bf00      	nop
 800c760:	200058ce 	.word	0x200058ce

0800c764 <__sinit_lock_release>:
 800c764:	4801      	ldr	r0, [pc, #4]	; (800c76c <__sinit_lock_release+0x8>)
 800c766:	f000 b8c7 	b.w	800c8f8 <__retarget_lock_release_recursive>
 800c76a:	bf00      	nop
 800c76c:	200058ce 	.word	0x200058ce

0800c770 <__sinit>:
 800c770:	b510      	push	{r4, lr}
 800c772:	4604      	mov	r4, r0
 800c774:	f7ff fff0 	bl	800c758 <__sinit_lock_acquire>
 800c778:	69a3      	ldr	r3, [r4, #24]
 800c77a:	b11b      	cbz	r3, 800c784 <__sinit+0x14>
 800c77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c780:	f7ff bff0 	b.w	800c764 <__sinit_lock_release>
 800c784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c788:	6523      	str	r3, [r4, #80]	; 0x50
 800c78a:	4b13      	ldr	r3, [pc, #76]	; (800c7d8 <__sinit+0x68>)
 800c78c:	4a13      	ldr	r2, [pc, #76]	; (800c7dc <__sinit+0x6c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	62a2      	str	r2, [r4, #40]	; 0x28
 800c792:	42a3      	cmp	r3, r4
 800c794:	bf04      	itt	eq
 800c796:	2301      	moveq	r3, #1
 800c798:	61a3      	streq	r3, [r4, #24]
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 f820 	bl	800c7e0 <__sfp>
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 f81c 	bl	800c7e0 <__sfp>
 800c7a8:	60a0      	str	r0, [r4, #8]
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 f818 	bl	800c7e0 <__sfp>
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	60e0      	str	r0, [r4, #12]
 800c7b4:	2104      	movs	r1, #4
 800c7b6:	6860      	ldr	r0, [r4, #4]
 800c7b8:	f7ff ff82 	bl	800c6c0 <std>
 800c7bc:	68a0      	ldr	r0, [r4, #8]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	2109      	movs	r1, #9
 800c7c2:	f7ff ff7d 	bl	800c6c0 <std>
 800c7c6:	68e0      	ldr	r0, [r4, #12]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	2112      	movs	r1, #18
 800c7cc:	f7ff ff78 	bl	800c6c0 <std>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	61a3      	str	r3, [r4, #24]
 800c7d4:	e7d2      	b.n	800c77c <__sinit+0xc>
 800c7d6:	bf00      	nop
 800c7d8:	0800df54 	.word	0x0800df54
 800c7dc:	0800c709 	.word	0x0800c709

0800c7e0 <__sfp>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	4607      	mov	r7, r0
 800c7e4:	f7ff ffac 	bl	800c740 <__sfp_lock_acquire>
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <__sfp+0x84>)
 800c7ea:	681e      	ldr	r6, [r3, #0]
 800c7ec:	69b3      	ldr	r3, [r6, #24]
 800c7ee:	b913      	cbnz	r3, 800c7f6 <__sfp+0x16>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7ff ffbd 	bl	800c770 <__sinit>
 800c7f6:	3648      	adds	r6, #72	; 0x48
 800c7f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	d503      	bpl.n	800c808 <__sfp+0x28>
 800c800:	6833      	ldr	r3, [r6, #0]
 800c802:	b30b      	cbz	r3, 800c848 <__sfp+0x68>
 800c804:	6836      	ldr	r6, [r6, #0]
 800c806:	e7f7      	b.n	800c7f8 <__sfp+0x18>
 800c808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c80c:	b9d5      	cbnz	r5, 800c844 <__sfp+0x64>
 800c80e:	4b16      	ldr	r3, [pc, #88]	; (800c868 <__sfp+0x88>)
 800c810:	60e3      	str	r3, [r4, #12]
 800c812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c816:	6665      	str	r5, [r4, #100]	; 0x64
 800c818:	f000 f86c 	bl	800c8f4 <__retarget_lock_init_recursive>
 800c81c:	f7ff ff96 	bl	800c74c <__sfp_lock_release>
 800c820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c828:	6025      	str	r5, [r4, #0]
 800c82a:	61a5      	str	r5, [r4, #24]
 800c82c:	2208      	movs	r2, #8
 800c82e:	4629      	mov	r1, r5
 800c830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c834:	f000 f86f 	bl	800c916 <memset>
 800c838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c83c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c840:	4620      	mov	r0, r4
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	3468      	adds	r4, #104	; 0x68
 800c846:	e7d9      	b.n	800c7fc <__sfp+0x1c>
 800c848:	2104      	movs	r1, #4
 800c84a:	4638      	mov	r0, r7
 800c84c:	f7ff ff62 	bl	800c714 <__sfmoreglue>
 800c850:	4604      	mov	r4, r0
 800c852:	6030      	str	r0, [r6, #0]
 800c854:	2800      	cmp	r0, #0
 800c856:	d1d5      	bne.n	800c804 <__sfp+0x24>
 800c858:	f7ff ff78 	bl	800c74c <__sfp_lock_release>
 800c85c:	230c      	movs	r3, #12
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	e7ee      	b.n	800c840 <__sfp+0x60>
 800c862:	bf00      	nop
 800c864:	0800df54 	.word	0x0800df54
 800c868:	ffff0001 	.word	0xffff0001

0800c86c <_fwalk_reent>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	4606      	mov	r6, r0
 800c872:	4688      	mov	r8, r1
 800c874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c878:	2700      	movs	r7, #0
 800c87a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c87e:	f1b9 0901 	subs.w	r9, r9, #1
 800c882:	d505      	bpl.n	800c890 <_fwalk_reent+0x24>
 800c884:	6824      	ldr	r4, [r4, #0]
 800c886:	2c00      	cmp	r4, #0
 800c888:	d1f7      	bne.n	800c87a <_fwalk_reent+0xe>
 800c88a:	4638      	mov	r0, r7
 800c88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d907      	bls.n	800c8a6 <_fwalk_reent+0x3a>
 800c896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c89a:	3301      	adds	r3, #1
 800c89c:	d003      	beq.n	800c8a6 <_fwalk_reent+0x3a>
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	47c0      	blx	r8
 800c8a4:	4307      	orrs	r7, r0
 800c8a6:	3568      	adds	r5, #104	; 0x68
 800c8a8:	e7e9      	b.n	800c87e <_fwalk_reent+0x12>
	...

0800c8ac <__libc_init_array>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	4d0d      	ldr	r5, [pc, #52]	; (800c8e4 <__libc_init_array+0x38>)
 800c8b0:	4c0d      	ldr	r4, [pc, #52]	; (800c8e8 <__libc_init_array+0x3c>)
 800c8b2:	1b64      	subs	r4, r4, r5
 800c8b4:	10a4      	asrs	r4, r4, #2
 800c8b6:	2600      	movs	r6, #0
 800c8b8:	42a6      	cmp	r6, r4
 800c8ba:	d109      	bne.n	800c8d0 <__libc_init_array+0x24>
 800c8bc:	4d0b      	ldr	r5, [pc, #44]	; (800c8ec <__libc_init_array+0x40>)
 800c8be:	4c0c      	ldr	r4, [pc, #48]	; (800c8f0 <__libc_init_array+0x44>)
 800c8c0:	f001 fa28 	bl	800dd14 <_init>
 800c8c4:	1b64      	subs	r4, r4, r5
 800c8c6:	10a4      	asrs	r4, r4, #2
 800c8c8:	2600      	movs	r6, #0
 800c8ca:	42a6      	cmp	r6, r4
 800c8cc:	d105      	bne.n	800c8da <__libc_init_array+0x2e>
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
 800c8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d4:	4798      	blx	r3
 800c8d6:	3601      	adds	r6, #1
 800c8d8:	e7ee      	b.n	800c8b8 <__libc_init_array+0xc>
 800c8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8de:	4798      	blx	r3
 800c8e0:	3601      	adds	r6, #1
 800c8e2:	e7f2      	b.n	800c8ca <__libc_init_array+0x1e>
 800c8e4:	0800e094 	.word	0x0800e094
 800c8e8:	0800e094 	.word	0x0800e094
 800c8ec:	0800e094 	.word	0x0800e094
 800c8f0:	0800e098 	.word	0x0800e098

0800c8f4 <__retarget_lock_init_recursive>:
 800c8f4:	4770      	bx	lr

0800c8f6 <__retarget_lock_acquire_recursive>:
 800c8f6:	4770      	bx	lr

0800c8f8 <__retarget_lock_release_recursive>:
 800c8f8:	4770      	bx	lr

0800c8fa <memcpy>:
 800c8fa:	440a      	add	r2, r1
 800c8fc:	4291      	cmp	r1, r2
 800c8fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800c902:	d100      	bne.n	800c906 <memcpy+0xc>
 800c904:	4770      	bx	lr
 800c906:	b510      	push	{r4, lr}
 800c908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c910:	4291      	cmp	r1, r2
 800c912:	d1f9      	bne.n	800c908 <memcpy+0xe>
 800c914:	bd10      	pop	{r4, pc}

0800c916 <memset>:
 800c916:	4402      	add	r2, r0
 800c918:	4603      	mov	r3, r0
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d100      	bne.n	800c920 <memset+0xa>
 800c91e:	4770      	bx	lr
 800c920:	f803 1b01 	strb.w	r1, [r3], #1
 800c924:	e7f9      	b.n	800c91a <memset+0x4>
	...

0800c928 <sbrk_aligned>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	4e0e      	ldr	r6, [pc, #56]	; (800c964 <sbrk_aligned+0x3c>)
 800c92c:	460c      	mov	r4, r1
 800c92e:	6831      	ldr	r1, [r6, #0]
 800c930:	4605      	mov	r5, r0
 800c932:	b911      	cbnz	r1, 800c93a <sbrk_aligned+0x12>
 800c934:	f000 f984 	bl	800cc40 <_sbrk_r>
 800c938:	6030      	str	r0, [r6, #0]
 800c93a:	4621      	mov	r1, r4
 800c93c:	4628      	mov	r0, r5
 800c93e:	f000 f97f 	bl	800cc40 <_sbrk_r>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	d00a      	beq.n	800c95c <sbrk_aligned+0x34>
 800c946:	1cc4      	adds	r4, r0, #3
 800c948:	f024 0403 	bic.w	r4, r4, #3
 800c94c:	42a0      	cmp	r0, r4
 800c94e:	d007      	beq.n	800c960 <sbrk_aligned+0x38>
 800c950:	1a21      	subs	r1, r4, r0
 800c952:	4628      	mov	r0, r5
 800c954:	f000 f974 	bl	800cc40 <_sbrk_r>
 800c958:	3001      	adds	r0, #1
 800c95a:	d101      	bne.n	800c960 <sbrk_aligned+0x38>
 800c95c:	f04f 34ff 	mov.w	r4, #4294967295
 800c960:	4620      	mov	r0, r4
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	200058d4 	.word	0x200058d4

0800c968 <_malloc_r>:
 800c968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c96c:	1ccd      	adds	r5, r1, #3
 800c96e:	f025 0503 	bic.w	r5, r5, #3
 800c972:	3508      	adds	r5, #8
 800c974:	2d0c      	cmp	r5, #12
 800c976:	bf38      	it	cc
 800c978:	250c      	movcc	r5, #12
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	4607      	mov	r7, r0
 800c97e:	db01      	blt.n	800c984 <_malloc_r+0x1c>
 800c980:	42a9      	cmp	r1, r5
 800c982:	d905      	bls.n	800c990 <_malloc_r+0x28>
 800c984:	230c      	movs	r3, #12
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	2600      	movs	r6, #0
 800c98a:	4630      	mov	r0, r6
 800c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c990:	4e2e      	ldr	r6, [pc, #184]	; (800ca4c <_malloc_r+0xe4>)
 800c992:	f000 fc97 	bl	800d2c4 <__malloc_lock>
 800c996:	6833      	ldr	r3, [r6, #0]
 800c998:	461c      	mov	r4, r3
 800c99a:	bb34      	cbnz	r4, 800c9ea <_malloc_r+0x82>
 800c99c:	4629      	mov	r1, r5
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f7ff ffc2 	bl	800c928 <sbrk_aligned>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	d14d      	bne.n	800ca46 <_malloc_r+0xde>
 800c9aa:	6834      	ldr	r4, [r6, #0]
 800c9ac:	4626      	mov	r6, r4
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	d140      	bne.n	800ca34 <_malloc_r+0xcc>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	eb04 0803 	add.w	r8, r4, r3
 800c9bc:	f000 f940 	bl	800cc40 <_sbrk_r>
 800c9c0:	4580      	cmp	r8, r0
 800c9c2:	d13a      	bne.n	800ca3a <_malloc_r+0xd2>
 800c9c4:	6821      	ldr	r1, [r4, #0]
 800c9c6:	3503      	adds	r5, #3
 800c9c8:	1a6d      	subs	r5, r5, r1
 800c9ca:	f025 0503 	bic.w	r5, r5, #3
 800c9ce:	3508      	adds	r5, #8
 800c9d0:	2d0c      	cmp	r5, #12
 800c9d2:	bf38      	it	cc
 800c9d4:	250c      	movcc	r5, #12
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7ff ffa5 	bl	800c928 <sbrk_aligned>
 800c9de:	3001      	adds	r0, #1
 800c9e0:	d02b      	beq.n	800ca3a <_malloc_r+0xd2>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	442b      	add	r3, r5
 800c9e6:	6023      	str	r3, [r4, #0]
 800c9e8:	e00e      	b.n	800ca08 <_malloc_r+0xa0>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	1b52      	subs	r2, r2, r5
 800c9ee:	d41e      	bmi.n	800ca2e <_malloc_r+0xc6>
 800c9f0:	2a0b      	cmp	r2, #11
 800c9f2:	d916      	bls.n	800ca22 <_malloc_r+0xba>
 800c9f4:	1961      	adds	r1, r4, r5
 800c9f6:	42a3      	cmp	r3, r4
 800c9f8:	6025      	str	r5, [r4, #0]
 800c9fa:	bf18      	it	ne
 800c9fc:	6059      	strne	r1, [r3, #4]
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	bf08      	it	eq
 800ca02:	6031      	streq	r1, [r6, #0]
 800ca04:	5162      	str	r2, [r4, r5]
 800ca06:	604b      	str	r3, [r1, #4]
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f104 060b 	add.w	r6, r4, #11
 800ca0e:	f000 fc5f 	bl	800d2d0 <__malloc_unlock>
 800ca12:	f026 0607 	bic.w	r6, r6, #7
 800ca16:	1d23      	adds	r3, r4, #4
 800ca18:	1af2      	subs	r2, r6, r3
 800ca1a:	d0b6      	beq.n	800c98a <_malloc_r+0x22>
 800ca1c:	1b9b      	subs	r3, r3, r6
 800ca1e:	50a3      	str	r3, [r4, r2]
 800ca20:	e7b3      	b.n	800c98a <_malloc_r+0x22>
 800ca22:	6862      	ldr	r2, [r4, #4]
 800ca24:	42a3      	cmp	r3, r4
 800ca26:	bf0c      	ite	eq
 800ca28:	6032      	streq	r2, [r6, #0]
 800ca2a:	605a      	strne	r2, [r3, #4]
 800ca2c:	e7ec      	b.n	800ca08 <_malloc_r+0xa0>
 800ca2e:	4623      	mov	r3, r4
 800ca30:	6864      	ldr	r4, [r4, #4]
 800ca32:	e7b2      	b.n	800c99a <_malloc_r+0x32>
 800ca34:	4634      	mov	r4, r6
 800ca36:	6876      	ldr	r6, [r6, #4]
 800ca38:	e7b9      	b.n	800c9ae <_malloc_r+0x46>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	603b      	str	r3, [r7, #0]
 800ca3e:	4638      	mov	r0, r7
 800ca40:	f000 fc46 	bl	800d2d0 <__malloc_unlock>
 800ca44:	e7a1      	b.n	800c98a <_malloc_r+0x22>
 800ca46:	6025      	str	r5, [r4, #0]
 800ca48:	e7de      	b.n	800ca08 <_malloc_r+0xa0>
 800ca4a:	bf00      	nop
 800ca4c:	200058d0 	.word	0x200058d0

0800ca50 <iprintf>:
 800ca50:	b40f      	push	{r0, r1, r2, r3}
 800ca52:	4b0a      	ldr	r3, [pc, #40]	; (800ca7c <iprintf+0x2c>)
 800ca54:	b513      	push	{r0, r1, r4, lr}
 800ca56:	681c      	ldr	r4, [r3, #0]
 800ca58:	b124      	cbz	r4, 800ca64 <iprintf+0x14>
 800ca5a:	69a3      	ldr	r3, [r4, #24]
 800ca5c:	b913      	cbnz	r3, 800ca64 <iprintf+0x14>
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7ff fe86 	bl	800c770 <__sinit>
 800ca64:	ab05      	add	r3, sp, #20
 800ca66:	9a04      	ldr	r2, [sp, #16]
 800ca68:	68a1      	ldr	r1, [r4, #8]
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 fe07 	bl	800d680 <_vfiprintf_r>
 800ca72:	b002      	add	sp, #8
 800ca74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca78:	b004      	add	sp, #16
 800ca7a:	4770      	bx	lr
 800ca7c:	20000150 	.word	0x20000150

0800ca80 <_puts_r>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	460e      	mov	r6, r1
 800ca84:	4605      	mov	r5, r0
 800ca86:	b118      	cbz	r0, 800ca90 <_puts_r+0x10>
 800ca88:	6983      	ldr	r3, [r0, #24]
 800ca8a:	b90b      	cbnz	r3, 800ca90 <_puts_r+0x10>
 800ca8c:	f7ff fe70 	bl	800c770 <__sinit>
 800ca90:	69ab      	ldr	r3, [r5, #24]
 800ca92:	68ac      	ldr	r4, [r5, #8]
 800ca94:	b913      	cbnz	r3, 800ca9c <_puts_r+0x1c>
 800ca96:	4628      	mov	r0, r5
 800ca98:	f7ff fe6a 	bl	800c770 <__sinit>
 800ca9c:	4b2c      	ldr	r3, [pc, #176]	; (800cb50 <_puts_r+0xd0>)
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d120      	bne.n	800cae4 <_puts_r+0x64>
 800caa2:	686c      	ldr	r4, [r5, #4]
 800caa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caa6:	07db      	lsls	r3, r3, #31
 800caa8:	d405      	bmi.n	800cab6 <_puts_r+0x36>
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	0598      	lsls	r0, r3, #22
 800caae:	d402      	bmi.n	800cab6 <_puts_r+0x36>
 800cab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cab2:	f7ff ff20 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	0719      	lsls	r1, r3, #28
 800caba:	d51d      	bpl.n	800caf8 <_puts_r+0x78>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	b1db      	cbz	r3, 800caf8 <_puts_r+0x78>
 800cac0:	3e01      	subs	r6, #1
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cac8:	3b01      	subs	r3, #1
 800caca:	60a3      	str	r3, [r4, #8]
 800cacc:	bb39      	cbnz	r1, 800cb1e <_puts_r+0x9e>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da38      	bge.n	800cb44 <_puts_r+0xc4>
 800cad2:	4622      	mov	r2, r4
 800cad4:	210a      	movs	r1, #10
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 f9d8 	bl	800ce8c <__swbuf_r>
 800cadc:	3001      	adds	r0, #1
 800cade:	d011      	beq.n	800cb04 <_puts_r+0x84>
 800cae0:	250a      	movs	r5, #10
 800cae2:	e011      	b.n	800cb08 <_puts_r+0x88>
 800cae4:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <_puts_r+0xd4>)
 800cae6:	429c      	cmp	r4, r3
 800cae8:	d101      	bne.n	800caee <_puts_r+0x6e>
 800caea:	68ac      	ldr	r4, [r5, #8]
 800caec:	e7da      	b.n	800caa4 <_puts_r+0x24>
 800caee:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <_puts_r+0xd8>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	bf08      	it	eq
 800caf4:	68ec      	ldreq	r4, [r5, #12]
 800caf6:	e7d5      	b.n	800caa4 <_puts_r+0x24>
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 fa2a 	bl	800cf54 <__swsetup_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d0dd      	beq.n	800cac0 <_puts_r+0x40>
 800cb04:	f04f 35ff 	mov.w	r5, #4294967295
 800cb08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb0a:	07da      	lsls	r2, r3, #31
 800cb0c:	d405      	bmi.n	800cb1a <_puts_r+0x9a>
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	059b      	lsls	r3, r3, #22
 800cb12:	d402      	bmi.n	800cb1a <_puts_r+0x9a>
 800cb14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb16:	f7ff feef 	bl	800c8f8 <__retarget_lock_release_recursive>
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da04      	bge.n	800cb2c <_puts_r+0xac>
 800cb22:	69a2      	ldr	r2, [r4, #24]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	dc06      	bgt.n	800cb36 <_puts_r+0xb6>
 800cb28:	290a      	cmp	r1, #10
 800cb2a:	d004      	beq.n	800cb36 <_puts_r+0xb6>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	6022      	str	r2, [r4, #0]
 800cb32:	7019      	strb	r1, [r3, #0]
 800cb34:	e7c5      	b.n	800cac2 <_puts_r+0x42>
 800cb36:	4622      	mov	r2, r4
 800cb38:	4628      	mov	r0, r5
 800cb3a:	f000 f9a7 	bl	800ce8c <__swbuf_r>
 800cb3e:	3001      	adds	r0, #1
 800cb40:	d1bf      	bne.n	800cac2 <_puts_r+0x42>
 800cb42:	e7df      	b.n	800cb04 <_puts_r+0x84>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	250a      	movs	r5, #10
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	6022      	str	r2, [r4, #0]
 800cb4c:	701d      	strb	r5, [r3, #0]
 800cb4e:	e7db      	b.n	800cb08 <_puts_r+0x88>
 800cb50:	0800df14 	.word	0x0800df14
 800cb54:	0800df34 	.word	0x0800df34
 800cb58:	0800def4 	.word	0x0800def4

0800cb5c <puts>:
 800cb5c:	4b02      	ldr	r3, [pc, #8]	; (800cb68 <puts+0xc>)
 800cb5e:	4601      	mov	r1, r0
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	f7ff bf8d 	b.w	800ca80 <_puts_r>
 800cb66:	bf00      	nop
 800cb68:	20000150 	.word	0x20000150

0800cb6c <cleanup_glue>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	460c      	mov	r4, r1
 800cb70:	6809      	ldr	r1, [r1, #0]
 800cb72:	4605      	mov	r5, r0
 800cb74:	b109      	cbz	r1, 800cb7a <cleanup_glue+0xe>
 800cb76:	f7ff fff9 	bl	800cb6c <cleanup_glue>
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb82:	f000 bbab 	b.w	800d2dc <_free_r>
	...

0800cb88 <_reclaim_reent>:
 800cb88:	4b2c      	ldr	r3, [pc, #176]	; (800cc3c <_reclaim_reent+0xb4>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4283      	cmp	r3, r0
 800cb8e:	b570      	push	{r4, r5, r6, lr}
 800cb90:	4604      	mov	r4, r0
 800cb92:	d051      	beq.n	800cc38 <_reclaim_reent+0xb0>
 800cb94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb96:	b143      	cbz	r3, 800cbaa <_reclaim_reent+0x22>
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d14a      	bne.n	800cc34 <_reclaim_reent+0xac>
 800cb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cba0:	6819      	ldr	r1, [r3, #0]
 800cba2:	b111      	cbz	r1, 800cbaa <_reclaim_reent+0x22>
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 fb99 	bl	800d2dc <_free_r>
 800cbaa:	6961      	ldr	r1, [r4, #20]
 800cbac:	b111      	cbz	r1, 800cbb4 <_reclaim_reent+0x2c>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 fb94 	bl	800d2dc <_free_r>
 800cbb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cbb6:	b111      	cbz	r1, 800cbbe <_reclaim_reent+0x36>
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 fb8f 	bl	800d2dc <_free_r>
 800cbbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cbc0:	b111      	cbz	r1, 800cbc8 <_reclaim_reent+0x40>
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f000 fb8a 	bl	800d2dc <_free_r>
 800cbc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cbca:	b111      	cbz	r1, 800cbd2 <_reclaim_reent+0x4a>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 fb85 	bl	800d2dc <_free_r>
 800cbd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cbd4:	b111      	cbz	r1, 800cbdc <_reclaim_reent+0x54>
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 fb80 	bl	800d2dc <_free_r>
 800cbdc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cbde:	b111      	cbz	r1, 800cbe6 <_reclaim_reent+0x5e>
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f000 fb7b 	bl	800d2dc <_free_r>
 800cbe6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cbe8:	b111      	cbz	r1, 800cbf0 <_reclaim_reent+0x68>
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 fb76 	bl	800d2dc <_free_r>
 800cbf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbf2:	b111      	cbz	r1, 800cbfa <_reclaim_reent+0x72>
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 fb71 	bl	800d2dc <_free_r>
 800cbfa:	69a3      	ldr	r3, [r4, #24]
 800cbfc:	b1e3      	cbz	r3, 800cc38 <_reclaim_reent+0xb0>
 800cbfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc00:	4620      	mov	r0, r4
 800cc02:	4798      	blx	r3
 800cc04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cc06:	b1b9      	cbz	r1, 800cc38 <_reclaim_reent+0xb0>
 800cc08:	4620      	mov	r0, r4
 800cc0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc0e:	f7ff bfad 	b.w	800cb6c <cleanup_glue>
 800cc12:	5949      	ldr	r1, [r1, r5]
 800cc14:	b941      	cbnz	r1, 800cc28 <_reclaim_reent+0xa0>
 800cc16:	3504      	adds	r5, #4
 800cc18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc1a:	2d80      	cmp	r5, #128	; 0x80
 800cc1c:	68d9      	ldr	r1, [r3, #12]
 800cc1e:	d1f8      	bne.n	800cc12 <_reclaim_reent+0x8a>
 800cc20:	4620      	mov	r0, r4
 800cc22:	f000 fb5b 	bl	800d2dc <_free_r>
 800cc26:	e7ba      	b.n	800cb9e <_reclaim_reent+0x16>
 800cc28:	680e      	ldr	r6, [r1, #0]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fb56 	bl	800d2dc <_free_r>
 800cc30:	4631      	mov	r1, r6
 800cc32:	e7ef      	b.n	800cc14 <_reclaim_reent+0x8c>
 800cc34:	2500      	movs	r5, #0
 800cc36:	e7ef      	b.n	800cc18 <_reclaim_reent+0x90>
 800cc38:	bd70      	pop	{r4, r5, r6, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000150 	.word	0x20000150

0800cc40 <_sbrk_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d06      	ldr	r5, [pc, #24]	; (800cc5c <_sbrk_r+0x1c>)
 800cc44:	2300      	movs	r3, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	4608      	mov	r0, r1
 800cc4a:	602b      	str	r3, [r5, #0]
 800cc4c:	f7f5 fe84 	bl	8002958 <_sbrk>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	d102      	bne.n	800cc5a <_sbrk_r+0x1a>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	b103      	cbz	r3, 800cc5a <_sbrk_r+0x1a>
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	200058d8 	.word	0x200058d8

0800cc60 <siprintf>:
 800cc60:	b40e      	push	{r1, r2, r3}
 800cc62:	b500      	push	{lr}
 800cc64:	b09c      	sub	sp, #112	; 0x70
 800cc66:	ab1d      	add	r3, sp, #116	; 0x74
 800cc68:	9002      	str	r0, [sp, #8]
 800cc6a:	9006      	str	r0, [sp, #24]
 800cc6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc70:	4809      	ldr	r0, [pc, #36]	; (800cc98 <siprintf+0x38>)
 800cc72:	9107      	str	r1, [sp, #28]
 800cc74:	9104      	str	r1, [sp, #16]
 800cc76:	4909      	ldr	r1, [pc, #36]	; (800cc9c <siprintf+0x3c>)
 800cc78:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc7c:	9105      	str	r1, [sp, #20]
 800cc7e:	6800      	ldr	r0, [r0, #0]
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	a902      	add	r1, sp, #8
 800cc84:	f000 fbd2 	bl	800d42c <_svfiprintf_r>
 800cc88:	9b02      	ldr	r3, [sp, #8]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	701a      	strb	r2, [r3, #0]
 800cc8e:	b01c      	add	sp, #112	; 0x70
 800cc90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc94:	b003      	add	sp, #12
 800cc96:	4770      	bx	lr
 800cc98:	20000150 	.word	0x20000150
 800cc9c:	ffff0208 	.word	0xffff0208

0800cca0 <__sread>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	460c      	mov	r4, r1
 800cca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca8:	f000 ffae 	bl	800dc08 <_read_r>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	bfab      	itete	ge
 800ccb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccb2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccb4:	181b      	addge	r3, r3, r0
 800ccb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccba:	bfac      	ite	ge
 800ccbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccbe:	81a3      	strhlt	r3, [r4, #12]
 800ccc0:	bd10      	pop	{r4, pc}

0800ccc2 <__swrite>:
 800ccc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc6:	461f      	mov	r7, r3
 800ccc8:	898b      	ldrh	r3, [r1, #12]
 800ccca:	05db      	lsls	r3, r3, #23
 800cccc:	4605      	mov	r5, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	4616      	mov	r6, r2
 800ccd2:	d505      	bpl.n	800cce0 <__swrite+0x1e>
 800ccd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd8:	2302      	movs	r3, #2
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f000 fa7a 	bl	800d1d4 <_lseek_r>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	4632      	mov	r2, r6
 800ccee:	463b      	mov	r3, r7
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf6:	f000 b91b 	b.w	800cf30 <_write_r>

0800ccfa <__sseek>:
 800ccfa:	b510      	push	{r4, lr}
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd02:	f000 fa67 	bl	800d1d4 <_lseek_r>
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	bf15      	itete	ne
 800cd0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd16:	81a3      	strheq	r3, [r4, #12]
 800cd18:	bf18      	it	ne
 800cd1a:	81a3      	strhne	r3, [r4, #12]
 800cd1c:	bd10      	pop	{r4, pc}

0800cd1e <__sclose>:
 800cd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd22:	f000 b985 	b.w	800d030 <_close_r>

0800cd26 <strncmp>:
 800cd26:	b510      	push	{r4, lr}
 800cd28:	b17a      	cbz	r2, 800cd4a <strncmp+0x24>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	3901      	subs	r1, #1
 800cd2e:	1884      	adds	r4, r0, r2
 800cd30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd38:	4290      	cmp	r0, r2
 800cd3a:	d101      	bne.n	800cd40 <strncmp+0x1a>
 800cd3c:	42a3      	cmp	r3, r4
 800cd3e:	d101      	bne.n	800cd44 <strncmp+0x1e>
 800cd40:	1a80      	subs	r0, r0, r2
 800cd42:	bd10      	pop	{r4, pc}
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d1f3      	bne.n	800cd30 <strncmp+0xa>
 800cd48:	e7fa      	b.n	800cd40 <strncmp+0x1a>
 800cd4a:	4610      	mov	r0, r2
 800cd4c:	e7f9      	b.n	800cd42 <strncmp+0x1c>

0800cd4e <strncpy>:
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	3901      	subs	r1, #1
 800cd52:	4603      	mov	r3, r0
 800cd54:	b132      	cbz	r2, 800cd64 <strncpy+0x16>
 800cd56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd5a:	f803 4b01 	strb.w	r4, [r3], #1
 800cd5e:	3a01      	subs	r2, #1
 800cd60:	2c00      	cmp	r4, #0
 800cd62:	d1f7      	bne.n	800cd54 <strncpy+0x6>
 800cd64:	441a      	add	r2, r3
 800cd66:	2100      	movs	r1, #0
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d100      	bne.n	800cd6e <strncpy+0x20>
 800cd6c:	bd10      	pop	{r4, pc}
 800cd6e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd72:	e7f9      	b.n	800cd68 <strncpy+0x1a>

0800cd74 <_strtol_l.constprop.0>:
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd7a:	d001      	beq.n	800cd80 <_strtol_l.constprop.0+0xc>
 800cd7c:	2b24      	cmp	r3, #36	; 0x24
 800cd7e:	d906      	bls.n	800cd8e <_strtol_l.constprop.0+0x1a>
 800cd80:	f7ff fc98 	bl	800c6b4 <__errno>
 800cd84:	2316      	movs	r3, #22
 800cd86:	6003      	str	r3, [r0, #0]
 800cd88:	2000      	movs	r0, #0
 800cd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ce74 <_strtol_l.constprop.0+0x100>
 800cd92:	460d      	mov	r5, r1
 800cd94:	462e      	mov	r6, r5
 800cd96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cd9e:	f017 0708 	ands.w	r7, r7, #8
 800cda2:	d1f7      	bne.n	800cd94 <_strtol_l.constprop.0+0x20>
 800cda4:	2c2d      	cmp	r4, #45	; 0x2d
 800cda6:	d132      	bne.n	800ce0e <_strtol_l.constprop.0+0x9a>
 800cda8:	782c      	ldrb	r4, [r5, #0]
 800cdaa:	2701      	movs	r7, #1
 800cdac:	1cb5      	adds	r5, r6, #2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d05b      	beq.n	800ce6a <_strtol_l.constprop.0+0xf6>
 800cdb2:	2b10      	cmp	r3, #16
 800cdb4:	d109      	bne.n	800cdca <_strtol_l.constprop.0+0x56>
 800cdb6:	2c30      	cmp	r4, #48	; 0x30
 800cdb8:	d107      	bne.n	800cdca <_strtol_l.constprop.0+0x56>
 800cdba:	782c      	ldrb	r4, [r5, #0]
 800cdbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cdc0:	2c58      	cmp	r4, #88	; 0x58
 800cdc2:	d14d      	bne.n	800ce60 <_strtol_l.constprop.0+0xec>
 800cdc4:	786c      	ldrb	r4, [r5, #1]
 800cdc6:	2310      	movs	r3, #16
 800cdc8:	3502      	adds	r5, #2
 800cdca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cdce:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdd2:	f04f 0c00 	mov.w	ip, #0
 800cdd6:	fbb8 f9f3 	udiv	r9, r8, r3
 800cdda:	4666      	mov	r6, ip
 800cddc:	fb03 8a19 	mls	sl, r3, r9, r8
 800cde0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cde4:	f1be 0f09 	cmp.w	lr, #9
 800cde8:	d816      	bhi.n	800ce18 <_strtol_l.constprop.0+0xa4>
 800cdea:	4674      	mov	r4, lr
 800cdec:	42a3      	cmp	r3, r4
 800cdee:	dd24      	ble.n	800ce3a <_strtol_l.constprop.0+0xc6>
 800cdf0:	f1bc 0f00 	cmp.w	ip, #0
 800cdf4:	db1e      	blt.n	800ce34 <_strtol_l.constprop.0+0xc0>
 800cdf6:	45b1      	cmp	r9, r6
 800cdf8:	d31c      	bcc.n	800ce34 <_strtol_l.constprop.0+0xc0>
 800cdfa:	d101      	bne.n	800ce00 <_strtol_l.constprop.0+0x8c>
 800cdfc:	45a2      	cmp	sl, r4
 800cdfe:	db19      	blt.n	800ce34 <_strtol_l.constprop.0+0xc0>
 800ce00:	fb06 4603 	mla	r6, r6, r3, r4
 800ce04:	f04f 0c01 	mov.w	ip, #1
 800ce08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce0c:	e7e8      	b.n	800cde0 <_strtol_l.constprop.0+0x6c>
 800ce0e:	2c2b      	cmp	r4, #43	; 0x2b
 800ce10:	bf04      	itt	eq
 800ce12:	782c      	ldrbeq	r4, [r5, #0]
 800ce14:	1cb5      	addeq	r5, r6, #2
 800ce16:	e7ca      	b.n	800cdae <_strtol_l.constprop.0+0x3a>
 800ce18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ce1c:	f1be 0f19 	cmp.w	lr, #25
 800ce20:	d801      	bhi.n	800ce26 <_strtol_l.constprop.0+0xb2>
 800ce22:	3c37      	subs	r4, #55	; 0x37
 800ce24:	e7e2      	b.n	800cdec <_strtol_l.constprop.0+0x78>
 800ce26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ce2a:	f1be 0f19 	cmp.w	lr, #25
 800ce2e:	d804      	bhi.n	800ce3a <_strtol_l.constprop.0+0xc6>
 800ce30:	3c57      	subs	r4, #87	; 0x57
 800ce32:	e7db      	b.n	800cdec <_strtol_l.constprop.0+0x78>
 800ce34:	f04f 3cff 	mov.w	ip, #4294967295
 800ce38:	e7e6      	b.n	800ce08 <_strtol_l.constprop.0+0x94>
 800ce3a:	f1bc 0f00 	cmp.w	ip, #0
 800ce3e:	da05      	bge.n	800ce4c <_strtol_l.constprop.0+0xd8>
 800ce40:	2322      	movs	r3, #34	; 0x22
 800ce42:	6003      	str	r3, [r0, #0]
 800ce44:	4646      	mov	r6, r8
 800ce46:	b942      	cbnz	r2, 800ce5a <_strtol_l.constprop.0+0xe6>
 800ce48:	4630      	mov	r0, r6
 800ce4a:	e79e      	b.n	800cd8a <_strtol_l.constprop.0+0x16>
 800ce4c:	b107      	cbz	r7, 800ce50 <_strtol_l.constprop.0+0xdc>
 800ce4e:	4276      	negs	r6, r6
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	d0f9      	beq.n	800ce48 <_strtol_l.constprop.0+0xd4>
 800ce54:	f1bc 0f00 	cmp.w	ip, #0
 800ce58:	d000      	beq.n	800ce5c <_strtol_l.constprop.0+0xe8>
 800ce5a:	1e69      	subs	r1, r5, #1
 800ce5c:	6011      	str	r1, [r2, #0]
 800ce5e:	e7f3      	b.n	800ce48 <_strtol_l.constprop.0+0xd4>
 800ce60:	2430      	movs	r4, #48	; 0x30
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1b1      	bne.n	800cdca <_strtol_l.constprop.0+0x56>
 800ce66:	2308      	movs	r3, #8
 800ce68:	e7af      	b.n	800cdca <_strtol_l.constprop.0+0x56>
 800ce6a:	2c30      	cmp	r4, #48	; 0x30
 800ce6c:	d0a5      	beq.n	800cdba <_strtol_l.constprop.0+0x46>
 800ce6e:	230a      	movs	r3, #10
 800ce70:	e7ab      	b.n	800cdca <_strtol_l.constprop.0+0x56>
 800ce72:	bf00      	nop
 800ce74:	0800df59 	.word	0x0800df59

0800ce78 <strtol>:
 800ce78:	4613      	mov	r3, r2
 800ce7a:	460a      	mov	r2, r1
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	4802      	ldr	r0, [pc, #8]	; (800ce88 <strtol+0x10>)
 800ce80:	6800      	ldr	r0, [r0, #0]
 800ce82:	f7ff bf77 	b.w	800cd74 <_strtol_l.constprop.0>
 800ce86:	bf00      	nop
 800ce88:	20000150 	.word	0x20000150

0800ce8c <__swbuf_r>:
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	460e      	mov	r6, r1
 800ce90:	4614      	mov	r4, r2
 800ce92:	4605      	mov	r5, r0
 800ce94:	b118      	cbz	r0, 800ce9e <__swbuf_r+0x12>
 800ce96:	6983      	ldr	r3, [r0, #24]
 800ce98:	b90b      	cbnz	r3, 800ce9e <__swbuf_r+0x12>
 800ce9a:	f7ff fc69 	bl	800c770 <__sinit>
 800ce9e:	4b21      	ldr	r3, [pc, #132]	; (800cf24 <__swbuf_r+0x98>)
 800cea0:	429c      	cmp	r4, r3
 800cea2:	d12b      	bne.n	800cefc <__swbuf_r+0x70>
 800cea4:	686c      	ldr	r4, [r5, #4]
 800cea6:	69a3      	ldr	r3, [r4, #24]
 800cea8:	60a3      	str	r3, [r4, #8]
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	071a      	lsls	r2, r3, #28
 800ceae:	d52f      	bpl.n	800cf10 <__swbuf_r+0x84>
 800ceb0:	6923      	ldr	r3, [r4, #16]
 800ceb2:	b36b      	cbz	r3, 800cf10 <__swbuf_r+0x84>
 800ceb4:	6923      	ldr	r3, [r4, #16]
 800ceb6:	6820      	ldr	r0, [r4, #0]
 800ceb8:	1ac0      	subs	r0, r0, r3
 800ceba:	6963      	ldr	r3, [r4, #20]
 800cebc:	b2f6      	uxtb	r6, r6
 800cebe:	4283      	cmp	r3, r0
 800cec0:	4637      	mov	r7, r6
 800cec2:	dc04      	bgt.n	800cece <__swbuf_r+0x42>
 800cec4:	4621      	mov	r1, r4
 800cec6:	4628      	mov	r0, r5
 800cec8:	f000 f948 	bl	800d15c <_fflush_r>
 800cecc:	bb30      	cbnz	r0, 800cf1c <__swbuf_r+0x90>
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	60a3      	str	r3, [r4, #8]
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	6022      	str	r2, [r4, #0]
 800ceda:	701e      	strb	r6, [r3, #0]
 800cedc:	6963      	ldr	r3, [r4, #20]
 800cede:	3001      	adds	r0, #1
 800cee0:	4283      	cmp	r3, r0
 800cee2:	d004      	beq.n	800ceee <__swbuf_r+0x62>
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	07db      	lsls	r3, r3, #31
 800cee8:	d506      	bpl.n	800cef8 <__swbuf_r+0x6c>
 800ceea:	2e0a      	cmp	r6, #10
 800ceec:	d104      	bne.n	800cef8 <__swbuf_r+0x6c>
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f000 f933 	bl	800d15c <_fflush_r>
 800cef6:	b988      	cbnz	r0, 800cf1c <__swbuf_r+0x90>
 800cef8:	4638      	mov	r0, r7
 800cefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <__swbuf_r+0x9c>)
 800cefe:	429c      	cmp	r4, r3
 800cf00:	d101      	bne.n	800cf06 <__swbuf_r+0x7a>
 800cf02:	68ac      	ldr	r4, [r5, #8]
 800cf04:	e7cf      	b.n	800cea6 <__swbuf_r+0x1a>
 800cf06:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <__swbuf_r+0xa0>)
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	bf08      	it	eq
 800cf0c:	68ec      	ldreq	r4, [r5, #12]
 800cf0e:	e7ca      	b.n	800cea6 <__swbuf_r+0x1a>
 800cf10:	4621      	mov	r1, r4
 800cf12:	4628      	mov	r0, r5
 800cf14:	f000 f81e 	bl	800cf54 <__swsetup_r>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d0cb      	beq.n	800ceb4 <__swbuf_r+0x28>
 800cf1c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf20:	e7ea      	b.n	800cef8 <__swbuf_r+0x6c>
 800cf22:	bf00      	nop
 800cf24:	0800df14 	.word	0x0800df14
 800cf28:	0800df34 	.word	0x0800df34
 800cf2c:	0800def4 	.word	0x0800def4

0800cf30 <_write_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d07      	ldr	r5, [pc, #28]	; (800cf50 <_write_r+0x20>)
 800cf34:	4604      	mov	r4, r0
 800cf36:	4608      	mov	r0, r1
 800cf38:	4611      	mov	r1, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	602a      	str	r2, [r5, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f7f5 fcb9 	bl	80028b6 <_write>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d102      	bne.n	800cf4e <_write_r+0x1e>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	b103      	cbz	r3, 800cf4e <_write_r+0x1e>
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	200058d8 	.word	0x200058d8

0800cf54 <__swsetup_r>:
 800cf54:	4b32      	ldr	r3, [pc, #200]	; (800d020 <__swsetup_r+0xcc>)
 800cf56:	b570      	push	{r4, r5, r6, lr}
 800cf58:	681d      	ldr	r5, [r3, #0]
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	b125      	cbz	r5, 800cf6a <__swsetup_r+0x16>
 800cf60:	69ab      	ldr	r3, [r5, #24]
 800cf62:	b913      	cbnz	r3, 800cf6a <__swsetup_r+0x16>
 800cf64:	4628      	mov	r0, r5
 800cf66:	f7ff fc03 	bl	800c770 <__sinit>
 800cf6a:	4b2e      	ldr	r3, [pc, #184]	; (800d024 <__swsetup_r+0xd0>)
 800cf6c:	429c      	cmp	r4, r3
 800cf6e:	d10f      	bne.n	800cf90 <__swsetup_r+0x3c>
 800cf70:	686c      	ldr	r4, [r5, #4]
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf78:	0719      	lsls	r1, r3, #28
 800cf7a:	d42c      	bmi.n	800cfd6 <__swsetup_r+0x82>
 800cf7c:	06dd      	lsls	r5, r3, #27
 800cf7e:	d411      	bmi.n	800cfa4 <__swsetup_r+0x50>
 800cf80:	2309      	movs	r3, #9
 800cf82:	6033      	str	r3, [r6, #0]
 800cf84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf88:	81a3      	strh	r3, [r4, #12]
 800cf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8e:	e03e      	b.n	800d00e <__swsetup_r+0xba>
 800cf90:	4b25      	ldr	r3, [pc, #148]	; (800d028 <__swsetup_r+0xd4>)
 800cf92:	429c      	cmp	r4, r3
 800cf94:	d101      	bne.n	800cf9a <__swsetup_r+0x46>
 800cf96:	68ac      	ldr	r4, [r5, #8]
 800cf98:	e7eb      	b.n	800cf72 <__swsetup_r+0x1e>
 800cf9a:	4b24      	ldr	r3, [pc, #144]	; (800d02c <__swsetup_r+0xd8>)
 800cf9c:	429c      	cmp	r4, r3
 800cf9e:	bf08      	it	eq
 800cfa0:	68ec      	ldreq	r4, [r5, #12]
 800cfa2:	e7e6      	b.n	800cf72 <__swsetup_r+0x1e>
 800cfa4:	0758      	lsls	r0, r3, #29
 800cfa6:	d512      	bpl.n	800cfce <__swsetup_r+0x7a>
 800cfa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfaa:	b141      	cbz	r1, 800cfbe <__swsetup_r+0x6a>
 800cfac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfb0:	4299      	cmp	r1, r3
 800cfb2:	d002      	beq.n	800cfba <__swsetup_r+0x66>
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f000 f991 	bl	800d2dc <_free_r>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	6363      	str	r3, [r4, #52]	; 0x34
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	6063      	str	r3, [r4, #4]
 800cfca:	6923      	ldr	r3, [r4, #16]
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	89a3      	ldrh	r3, [r4, #12]
 800cfd0:	f043 0308 	orr.w	r3, r3, #8
 800cfd4:	81a3      	strh	r3, [r4, #12]
 800cfd6:	6923      	ldr	r3, [r4, #16]
 800cfd8:	b94b      	cbnz	r3, 800cfee <__swsetup_r+0x9a>
 800cfda:	89a3      	ldrh	r3, [r4, #12]
 800cfdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfe4:	d003      	beq.n	800cfee <__swsetup_r+0x9a>
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f000 f92b 	bl	800d244 <__smakebuf_r>
 800cfee:	89a0      	ldrh	r0, [r4, #12]
 800cff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cff4:	f010 0301 	ands.w	r3, r0, #1
 800cff8:	d00a      	beq.n	800d010 <__swsetup_r+0xbc>
 800cffa:	2300      	movs	r3, #0
 800cffc:	60a3      	str	r3, [r4, #8]
 800cffe:	6963      	ldr	r3, [r4, #20]
 800d000:	425b      	negs	r3, r3
 800d002:	61a3      	str	r3, [r4, #24]
 800d004:	6923      	ldr	r3, [r4, #16]
 800d006:	b943      	cbnz	r3, 800d01a <__swsetup_r+0xc6>
 800d008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d00c:	d1ba      	bne.n	800cf84 <__swsetup_r+0x30>
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	0781      	lsls	r1, r0, #30
 800d012:	bf58      	it	pl
 800d014:	6963      	ldrpl	r3, [r4, #20]
 800d016:	60a3      	str	r3, [r4, #8]
 800d018:	e7f4      	b.n	800d004 <__swsetup_r+0xb0>
 800d01a:	2000      	movs	r0, #0
 800d01c:	e7f7      	b.n	800d00e <__swsetup_r+0xba>
 800d01e:	bf00      	nop
 800d020:	20000150 	.word	0x20000150
 800d024:	0800df14 	.word	0x0800df14
 800d028:	0800df34 	.word	0x0800df34
 800d02c:	0800def4 	.word	0x0800def4

0800d030 <_close_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4d06      	ldr	r5, [pc, #24]	; (800d04c <_close_r+0x1c>)
 800d034:	2300      	movs	r3, #0
 800d036:	4604      	mov	r4, r0
 800d038:	4608      	mov	r0, r1
 800d03a:	602b      	str	r3, [r5, #0]
 800d03c:	f7f5 fc57 	bl	80028ee <_close>
 800d040:	1c43      	adds	r3, r0, #1
 800d042:	d102      	bne.n	800d04a <_close_r+0x1a>
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	b103      	cbz	r3, 800d04a <_close_r+0x1a>
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	bd38      	pop	{r3, r4, r5, pc}
 800d04c:	200058d8 	.word	0x200058d8

0800d050 <__sflush_r>:
 800d050:	898a      	ldrh	r2, [r1, #12]
 800d052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	4605      	mov	r5, r0
 800d058:	0710      	lsls	r0, r2, #28
 800d05a:	460c      	mov	r4, r1
 800d05c:	d458      	bmi.n	800d110 <__sflush_r+0xc0>
 800d05e:	684b      	ldr	r3, [r1, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	dc05      	bgt.n	800d070 <__sflush_r+0x20>
 800d064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d066:	2b00      	cmp	r3, #0
 800d068:	dc02      	bgt.n	800d070 <__sflush_r+0x20>
 800d06a:	2000      	movs	r0, #0
 800d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d072:	2e00      	cmp	r6, #0
 800d074:	d0f9      	beq.n	800d06a <__sflush_r+0x1a>
 800d076:	2300      	movs	r3, #0
 800d078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d07c:	682f      	ldr	r7, [r5, #0]
 800d07e:	602b      	str	r3, [r5, #0]
 800d080:	d032      	beq.n	800d0e8 <__sflush_r+0x98>
 800d082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	075a      	lsls	r2, r3, #29
 800d088:	d505      	bpl.n	800d096 <__sflush_r+0x46>
 800d08a:	6863      	ldr	r3, [r4, #4]
 800d08c:	1ac0      	subs	r0, r0, r3
 800d08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d090:	b10b      	cbz	r3, 800d096 <__sflush_r+0x46>
 800d092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d094:	1ac0      	subs	r0, r0, r3
 800d096:	2300      	movs	r3, #0
 800d098:	4602      	mov	r2, r0
 800d09a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d09c:	6a21      	ldr	r1, [r4, #32]
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b0      	blx	r6
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	d106      	bne.n	800d0b6 <__sflush_r+0x66>
 800d0a8:	6829      	ldr	r1, [r5, #0]
 800d0aa:	291d      	cmp	r1, #29
 800d0ac:	d82c      	bhi.n	800d108 <__sflush_r+0xb8>
 800d0ae:	4a2a      	ldr	r2, [pc, #168]	; (800d158 <__sflush_r+0x108>)
 800d0b0:	40ca      	lsrs	r2, r1
 800d0b2:	07d6      	lsls	r6, r2, #31
 800d0b4:	d528      	bpl.n	800d108 <__sflush_r+0xb8>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	6062      	str	r2, [r4, #4]
 800d0ba:	04d9      	lsls	r1, r3, #19
 800d0bc:	6922      	ldr	r2, [r4, #16]
 800d0be:	6022      	str	r2, [r4, #0]
 800d0c0:	d504      	bpl.n	800d0cc <__sflush_r+0x7c>
 800d0c2:	1c42      	adds	r2, r0, #1
 800d0c4:	d101      	bne.n	800d0ca <__sflush_r+0x7a>
 800d0c6:	682b      	ldr	r3, [r5, #0]
 800d0c8:	b903      	cbnz	r3, 800d0cc <__sflush_r+0x7c>
 800d0ca:	6560      	str	r0, [r4, #84]	; 0x54
 800d0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ce:	602f      	str	r7, [r5, #0]
 800d0d0:	2900      	cmp	r1, #0
 800d0d2:	d0ca      	beq.n	800d06a <__sflush_r+0x1a>
 800d0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d8:	4299      	cmp	r1, r3
 800d0da:	d002      	beq.n	800d0e2 <__sflush_r+0x92>
 800d0dc:	4628      	mov	r0, r5
 800d0de:	f000 f8fd 	bl	800d2dc <_free_r>
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	6360      	str	r0, [r4, #52]	; 0x34
 800d0e6:	e7c1      	b.n	800d06c <__sflush_r+0x1c>
 800d0e8:	6a21      	ldr	r1, [r4, #32]
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	47b0      	blx	r6
 800d0f0:	1c41      	adds	r1, r0, #1
 800d0f2:	d1c7      	bne.n	800d084 <__sflush_r+0x34>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0c4      	beq.n	800d084 <__sflush_r+0x34>
 800d0fa:	2b1d      	cmp	r3, #29
 800d0fc:	d001      	beq.n	800d102 <__sflush_r+0xb2>
 800d0fe:	2b16      	cmp	r3, #22
 800d100:	d101      	bne.n	800d106 <__sflush_r+0xb6>
 800d102:	602f      	str	r7, [r5, #0]
 800d104:	e7b1      	b.n	800d06a <__sflush_r+0x1a>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	e7ad      	b.n	800d06c <__sflush_r+0x1c>
 800d110:	690f      	ldr	r7, [r1, #16]
 800d112:	2f00      	cmp	r7, #0
 800d114:	d0a9      	beq.n	800d06a <__sflush_r+0x1a>
 800d116:	0793      	lsls	r3, r2, #30
 800d118:	680e      	ldr	r6, [r1, #0]
 800d11a:	bf08      	it	eq
 800d11c:	694b      	ldreq	r3, [r1, #20]
 800d11e:	600f      	str	r7, [r1, #0]
 800d120:	bf18      	it	ne
 800d122:	2300      	movne	r3, #0
 800d124:	eba6 0807 	sub.w	r8, r6, r7
 800d128:	608b      	str	r3, [r1, #8]
 800d12a:	f1b8 0f00 	cmp.w	r8, #0
 800d12e:	dd9c      	ble.n	800d06a <__sflush_r+0x1a>
 800d130:	6a21      	ldr	r1, [r4, #32]
 800d132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d134:	4643      	mov	r3, r8
 800d136:	463a      	mov	r2, r7
 800d138:	4628      	mov	r0, r5
 800d13a:	47b0      	blx	r6
 800d13c:	2800      	cmp	r0, #0
 800d13e:	dc06      	bgt.n	800d14e <__sflush_r+0xfe>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	f04f 30ff 	mov.w	r0, #4294967295
 800d14c:	e78e      	b.n	800d06c <__sflush_r+0x1c>
 800d14e:	4407      	add	r7, r0
 800d150:	eba8 0800 	sub.w	r8, r8, r0
 800d154:	e7e9      	b.n	800d12a <__sflush_r+0xda>
 800d156:	bf00      	nop
 800d158:	20400001 	.word	0x20400001

0800d15c <_fflush_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	690b      	ldr	r3, [r1, #16]
 800d160:	4605      	mov	r5, r0
 800d162:	460c      	mov	r4, r1
 800d164:	b913      	cbnz	r3, 800d16c <_fflush_r+0x10>
 800d166:	2500      	movs	r5, #0
 800d168:	4628      	mov	r0, r5
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	b118      	cbz	r0, 800d176 <_fflush_r+0x1a>
 800d16e:	6983      	ldr	r3, [r0, #24]
 800d170:	b90b      	cbnz	r3, 800d176 <_fflush_r+0x1a>
 800d172:	f7ff fafd 	bl	800c770 <__sinit>
 800d176:	4b14      	ldr	r3, [pc, #80]	; (800d1c8 <_fflush_r+0x6c>)
 800d178:	429c      	cmp	r4, r3
 800d17a:	d11b      	bne.n	800d1b4 <_fflush_r+0x58>
 800d17c:	686c      	ldr	r4, [r5, #4]
 800d17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d0ef      	beq.n	800d166 <_fflush_r+0xa>
 800d186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d188:	07d0      	lsls	r0, r2, #31
 800d18a:	d404      	bmi.n	800d196 <_fflush_r+0x3a>
 800d18c:	0599      	lsls	r1, r3, #22
 800d18e:	d402      	bmi.n	800d196 <_fflush_r+0x3a>
 800d190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d192:	f7ff fbb0 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800d196:	4628      	mov	r0, r5
 800d198:	4621      	mov	r1, r4
 800d19a:	f7ff ff59 	bl	800d050 <__sflush_r>
 800d19e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1a0:	07da      	lsls	r2, r3, #31
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	d4e0      	bmi.n	800d168 <_fflush_r+0xc>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	059b      	lsls	r3, r3, #22
 800d1aa:	d4dd      	bmi.n	800d168 <_fflush_r+0xc>
 800d1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ae:	f7ff fba3 	bl	800c8f8 <__retarget_lock_release_recursive>
 800d1b2:	e7d9      	b.n	800d168 <_fflush_r+0xc>
 800d1b4:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <_fflush_r+0x70>)
 800d1b6:	429c      	cmp	r4, r3
 800d1b8:	d101      	bne.n	800d1be <_fflush_r+0x62>
 800d1ba:	68ac      	ldr	r4, [r5, #8]
 800d1bc:	e7df      	b.n	800d17e <_fflush_r+0x22>
 800d1be:	4b04      	ldr	r3, [pc, #16]	; (800d1d0 <_fflush_r+0x74>)
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	bf08      	it	eq
 800d1c4:	68ec      	ldreq	r4, [r5, #12]
 800d1c6:	e7da      	b.n	800d17e <_fflush_r+0x22>
 800d1c8:	0800df14 	.word	0x0800df14
 800d1cc:	0800df34 	.word	0x0800df34
 800d1d0:	0800def4 	.word	0x0800def4

0800d1d4 <_lseek_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d07      	ldr	r5, [pc, #28]	; (800d1f4 <_lseek_r+0x20>)
 800d1d8:	4604      	mov	r4, r0
 800d1da:	4608      	mov	r0, r1
 800d1dc:	4611      	mov	r1, r2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	602a      	str	r2, [r5, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f7f5 fbaa 	bl	800293c <_lseek>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_lseek_r+0x1e>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_lseek_r+0x1e>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	200058d8 	.word	0x200058d8

0800d1f8 <__swhatbuf_r>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	460e      	mov	r6, r1
 800d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d200:	2900      	cmp	r1, #0
 800d202:	b096      	sub	sp, #88	; 0x58
 800d204:	4614      	mov	r4, r2
 800d206:	461d      	mov	r5, r3
 800d208:	da08      	bge.n	800d21c <__swhatbuf_r+0x24>
 800d20a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	602a      	str	r2, [r5, #0]
 800d212:	061a      	lsls	r2, r3, #24
 800d214:	d410      	bmi.n	800d238 <__swhatbuf_r+0x40>
 800d216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d21a:	e00e      	b.n	800d23a <__swhatbuf_r+0x42>
 800d21c:	466a      	mov	r2, sp
 800d21e:	f000 fd05 	bl	800dc2c <_fstat_r>
 800d222:	2800      	cmp	r0, #0
 800d224:	dbf1      	blt.n	800d20a <__swhatbuf_r+0x12>
 800d226:	9a01      	ldr	r2, [sp, #4]
 800d228:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d22c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d230:	425a      	negs	r2, r3
 800d232:	415a      	adcs	r2, r3
 800d234:	602a      	str	r2, [r5, #0]
 800d236:	e7ee      	b.n	800d216 <__swhatbuf_r+0x1e>
 800d238:	2340      	movs	r3, #64	; 0x40
 800d23a:	2000      	movs	r0, #0
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	b016      	add	sp, #88	; 0x58
 800d240:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d244 <__smakebuf_r>:
 800d244:	898b      	ldrh	r3, [r1, #12]
 800d246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d248:	079d      	lsls	r5, r3, #30
 800d24a:	4606      	mov	r6, r0
 800d24c:	460c      	mov	r4, r1
 800d24e:	d507      	bpl.n	800d260 <__smakebuf_r+0x1c>
 800d250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	6123      	str	r3, [r4, #16]
 800d258:	2301      	movs	r3, #1
 800d25a:	6163      	str	r3, [r4, #20]
 800d25c:	b002      	add	sp, #8
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
 800d260:	ab01      	add	r3, sp, #4
 800d262:	466a      	mov	r2, sp
 800d264:	f7ff ffc8 	bl	800d1f8 <__swhatbuf_r>
 800d268:	9900      	ldr	r1, [sp, #0]
 800d26a:	4605      	mov	r5, r0
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff fb7b 	bl	800c968 <_malloc_r>
 800d272:	b948      	cbnz	r0, 800d288 <__smakebuf_r+0x44>
 800d274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d278:	059a      	lsls	r2, r3, #22
 800d27a:	d4ef      	bmi.n	800d25c <__smakebuf_r+0x18>
 800d27c:	f023 0303 	bic.w	r3, r3, #3
 800d280:	f043 0302 	orr.w	r3, r3, #2
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	e7e3      	b.n	800d250 <__smakebuf_r+0xc>
 800d288:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <__smakebuf_r+0x7c>)
 800d28a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	6020      	str	r0, [r4, #0]
 800d290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	9b00      	ldr	r3, [sp, #0]
 800d298:	6163      	str	r3, [r4, #20]
 800d29a:	9b01      	ldr	r3, [sp, #4]
 800d29c:	6120      	str	r0, [r4, #16]
 800d29e:	b15b      	cbz	r3, 800d2b8 <__smakebuf_r+0x74>
 800d2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f000 fcd3 	bl	800dc50 <_isatty_r>
 800d2aa:	b128      	cbz	r0, 800d2b8 <__smakebuf_r+0x74>
 800d2ac:	89a3      	ldrh	r3, [r4, #12]
 800d2ae:	f023 0303 	bic.w	r3, r3, #3
 800d2b2:	f043 0301 	orr.w	r3, r3, #1
 800d2b6:	81a3      	strh	r3, [r4, #12]
 800d2b8:	89a0      	ldrh	r0, [r4, #12]
 800d2ba:	4305      	orrs	r5, r0
 800d2bc:	81a5      	strh	r5, [r4, #12]
 800d2be:	e7cd      	b.n	800d25c <__smakebuf_r+0x18>
 800d2c0:	0800c709 	.word	0x0800c709

0800d2c4 <__malloc_lock>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__malloc_lock+0x8>)
 800d2c6:	f7ff bb16 	b.w	800c8f6 <__retarget_lock_acquire_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	200058cc 	.word	0x200058cc

0800d2d0 <__malloc_unlock>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__malloc_unlock+0x8>)
 800d2d2:	f7ff bb11 	b.w	800c8f8 <__retarget_lock_release_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	200058cc 	.word	0x200058cc

0800d2dc <_free_r>:
 800d2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2de:	2900      	cmp	r1, #0
 800d2e0:	d044      	beq.n	800d36c <_free_r+0x90>
 800d2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e6:	9001      	str	r0, [sp, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d2ee:	bfb8      	it	lt
 800d2f0:	18e4      	addlt	r4, r4, r3
 800d2f2:	f7ff ffe7 	bl	800d2c4 <__malloc_lock>
 800d2f6:	4a1e      	ldr	r2, [pc, #120]	; (800d370 <_free_r+0x94>)
 800d2f8:	9801      	ldr	r0, [sp, #4]
 800d2fa:	6813      	ldr	r3, [r2, #0]
 800d2fc:	b933      	cbnz	r3, 800d30c <_free_r+0x30>
 800d2fe:	6063      	str	r3, [r4, #4]
 800d300:	6014      	str	r4, [r2, #0]
 800d302:	b003      	add	sp, #12
 800d304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d308:	f7ff bfe2 	b.w	800d2d0 <__malloc_unlock>
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	d908      	bls.n	800d322 <_free_r+0x46>
 800d310:	6825      	ldr	r5, [r4, #0]
 800d312:	1961      	adds	r1, r4, r5
 800d314:	428b      	cmp	r3, r1
 800d316:	bf01      	itttt	eq
 800d318:	6819      	ldreq	r1, [r3, #0]
 800d31a:	685b      	ldreq	r3, [r3, #4]
 800d31c:	1949      	addeq	r1, r1, r5
 800d31e:	6021      	streq	r1, [r4, #0]
 800d320:	e7ed      	b.n	800d2fe <_free_r+0x22>
 800d322:	461a      	mov	r2, r3
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	b10b      	cbz	r3, 800d32c <_free_r+0x50>
 800d328:	42a3      	cmp	r3, r4
 800d32a:	d9fa      	bls.n	800d322 <_free_r+0x46>
 800d32c:	6811      	ldr	r1, [r2, #0]
 800d32e:	1855      	adds	r5, r2, r1
 800d330:	42a5      	cmp	r5, r4
 800d332:	d10b      	bne.n	800d34c <_free_r+0x70>
 800d334:	6824      	ldr	r4, [r4, #0]
 800d336:	4421      	add	r1, r4
 800d338:	1854      	adds	r4, r2, r1
 800d33a:	42a3      	cmp	r3, r4
 800d33c:	6011      	str	r1, [r2, #0]
 800d33e:	d1e0      	bne.n	800d302 <_free_r+0x26>
 800d340:	681c      	ldr	r4, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	6053      	str	r3, [r2, #4]
 800d346:	4421      	add	r1, r4
 800d348:	6011      	str	r1, [r2, #0]
 800d34a:	e7da      	b.n	800d302 <_free_r+0x26>
 800d34c:	d902      	bls.n	800d354 <_free_r+0x78>
 800d34e:	230c      	movs	r3, #12
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	e7d6      	b.n	800d302 <_free_r+0x26>
 800d354:	6825      	ldr	r5, [r4, #0]
 800d356:	1961      	adds	r1, r4, r5
 800d358:	428b      	cmp	r3, r1
 800d35a:	bf04      	itt	eq
 800d35c:	6819      	ldreq	r1, [r3, #0]
 800d35e:	685b      	ldreq	r3, [r3, #4]
 800d360:	6063      	str	r3, [r4, #4]
 800d362:	bf04      	itt	eq
 800d364:	1949      	addeq	r1, r1, r5
 800d366:	6021      	streq	r1, [r4, #0]
 800d368:	6054      	str	r4, [r2, #4]
 800d36a:	e7ca      	b.n	800d302 <_free_r+0x26>
 800d36c:	b003      	add	sp, #12
 800d36e:	bd30      	pop	{r4, r5, pc}
 800d370:	200058d0 	.word	0x200058d0

0800d374 <__ssputs_r>:
 800d374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d378:	688e      	ldr	r6, [r1, #8]
 800d37a:	429e      	cmp	r6, r3
 800d37c:	4682      	mov	sl, r0
 800d37e:	460c      	mov	r4, r1
 800d380:	4690      	mov	r8, r2
 800d382:	461f      	mov	r7, r3
 800d384:	d838      	bhi.n	800d3f8 <__ssputs_r+0x84>
 800d386:	898a      	ldrh	r2, [r1, #12]
 800d388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d38c:	d032      	beq.n	800d3f4 <__ssputs_r+0x80>
 800d38e:	6825      	ldr	r5, [r4, #0]
 800d390:	6909      	ldr	r1, [r1, #16]
 800d392:	eba5 0901 	sub.w	r9, r5, r1
 800d396:	6965      	ldr	r5, [r4, #20]
 800d398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	444b      	add	r3, r9
 800d3a4:	106d      	asrs	r5, r5, #1
 800d3a6:	429d      	cmp	r5, r3
 800d3a8:	bf38      	it	cc
 800d3aa:	461d      	movcc	r5, r3
 800d3ac:	0553      	lsls	r3, r2, #21
 800d3ae:	d531      	bpl.n	800d414 <__ssputs_r+0xa0>
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	f7ff fad9 	bl	800c968 <_malloc_r>
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	b950      	cbnz	r0, 800d3d0 <__ssputs_r+0x5c>
 800d3ba:	230c      	movs	r3, #12
 800d3bc:	f8ca 3000 	str.w	r3, [sl]
 800d3c0:	89a3      	ldrh	r3, [r4, #12]
 800d3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d0:	6921      	ldr	r1, [r4, #16]
 800d3d2:	464a      	mov	r2, r9
 800d3d4:	f7ff fa91 	bl	800c8fa <memcpy>
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e2:	81a3      	strh	r3, [r4, #12]
 800d3e4:	6126      	str	r6, [r4, #16]
 800d3e6:	6165      	str	r5, [r4, #20]
 800d3e8:	444e      	add	r6, r9
 800d3ea:	eba5 0509 	sub.w	r5, r5, r9
 800d3ee:	6026      	str	r6, [r4, #0]
 800d3f0:	60a5      	str	r5, [r4, #8]
 800d3f2:	463e      	mov	r6, r7
 800d3f4:	42be      	cmp	r6, r7
 800d3f6:	d900      	bls.n	800d3fa <__ssputs_r+0x86>
 800d3f8:	463e      	mov	r6, r7
 800d3fa:	6820      	ldr	r0, [r4, #0]
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	4641      	mov	r1, r8
 800d400:	f000 fc36 	bl	800dc70 <memmove>
 800d404:	68a3      	ldr	r3, [r4, #8]
 800d406:	1b9b      	subs	r3, r3, r6
 800d408:	60a3      	str	r3, [r4, #8]
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	4433      	add	r3, r6
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	2000      	movs	r0, #0
 800d412:	e7db      	b.n	800d3cc <__ssputs_r+0x58>
 800d414:	462a      	mov	r2, r5
 800d416:	f000 fc45 	bl	800dca4 <_realloc_r>
 800d41a:	4606      	mov	r6, r0
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d1e1      	bne.n	800d3e4 <__ssputs_r+0x70>
 800d420:	6921      	ldr	r1, [r4, #16]
 800d422:	4650      	mov	r0, sl
 800d424:	f7ff ff5a 	bl	800d2dc <_free_r>
 800d428:	e7c7      	b.n	800d3ba <__ssputs_r+0x46>
	...

0800d42c <_svfiprintf_r>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	4698      	mov	r8, r3
 800d432:	898b      	ldrh	r3, [r1, #12]
 800d434:	061b      	lsls	r3, r3, #24
 800d436:	b09d      	sub	sp, #116	; 0x74
 800d438:	4607      	mov	r7, r0
 800d43a:	460d      	mov	r5, r1
 800d43c:	4614      	mov	r4, r2
 800d43e:	d50e      	bpl.n	800d45e <_svfiprintf_r+0x32>
 800d440:	690b      	ldr	r3, [r1, #16]
 800d442:	b963      	cbnz	r3, 800d45e <_svfiprintf_r+0x32>
 800d444:	2140      	movs	r1, #64	; 0x40
 800d446:	f7ff fa8f 	bl	800c968 <_malloc_r>
 800d44a:	6028      	str	r0, [r5, #0]
 800d44c:	6128      	str	r0, [r5, #16]
 800d44e:	b920      	cbnz	r0, 800d45a <_svfiprintf_r+0x2e>
 800d450:	230c      	movs	r3, #12
 800d452:	603b      	str	r3, [r7, #0]
 800d454:	f04f 30ff 	mov.w	r0, #4294967295
 800d458:	e0d1      	b.n	800d5fe <_svfiprintf_r+0x1d2>
 800d45a:	2340      	movs	r3, #64	; 0x40
 800d45c:	616b      	str	r3, [r5, #20]
 800d45e:	2300      	movs	r3, #0
 800d460:	9309      	str	r3, [sp, #36]	; 0x24
 800d462:	2320      	movs	r3, #32
 800d464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d468:	f8cd 800c 	str.w	r8, [sp, #12]
 800d46c:	2330      	movs	r3, #48	; 0x30
 800d46e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d618 <_svfiprintf_r+0x1ec>
 800d472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d476:	f04f 0901 	mov.w	r9, #1
 800d47a:	4623      	mov	r3, r4
 800d47c:	469a      	mov	sl, r3
 800d47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d482:	b10a      	cbz	r2, 800d488 <_svfiprintf_r+0x5c>
 800d484:	2a25      	cmp	r2, #37	; 0x25
 800d486:	d1f9      	bne.n	800d47c <_svfiprintf_r+0x50>
 800d488:	ebba 0b04 	subs.w	fp, sl, r4
 800d48c:	d00b      	beq.n	800d4a6 <_svfiprintf_r+0x7a>
 800d48e:	465b      	mov	r3, fp
 800d490:	4622      	mov	r2, r4
 800d492:	4629      	mov	r1, r5
 800d494:	4638      	mov	r0, r7
 800d496:	f7ff ff6d 	bl	800d374 <__ssputs_r>
 800d49a:	3001      	adds	r0, #1
 800d49c:	f000 80aa 	beq.w	800d5f4 <_svfiprintf_r+0x1c8>
 800d4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a2:	445a      	add	r2, fp
 800d4a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 80a2 	beq.w	800d5f4 <_svfiprintf_r+0x1c8>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ba:	f10a 0a01 	add.w	sl, sl, #1
 800d4be:	9304      	str	r3, [sp, #16]
 800d4c0:	9307      	str	r3, [sp, #28]
 800d4c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4c6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4c8:	4654      	mov	r4, sl
 800d4ca:	2205      	movs	r2, #5
 800d4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d0:	4851      	ldr	r0, [pc, #324]	; (800d618 <_svfiprintf_r+0x1ec>)
 800d4d2:	f7f2 fe8d 	bl	80001f0 <memchr>
 800d4d6:	9a04      	ldr	r2, [sp, #16]
 800d4d8:	b9d8      	cbnz	r0, 800d512 <_svfiprintf_r+0xe6>
 800d4da:	06d0      	lsls	r0, r2, #27
 800d4dc:	bf44      	itt	mi
 800d4de:	2320      	movmi	r3, #32
 800d4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e4:	0711      	lsls	r1, r2, #28
 800d4e6:	bf44      	itt	mi
 800d4e8:	232b      	movmi	r3, #43	; 0x2b
 800d4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4f4:	d015      	beq.n	800d522 <_svfiprintf_r+0xf6>
 800d4f6:	9a07      	ldr	r2, [sp, #28]
 800d4f8:	4654      	mov	r4, sl
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	f04f 0c0a 	mov.w	ip, #10
 800d500:	4621      	mov	r1, r4
 800d502:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d506:	3b30      	subs	r3, #48	; 0x30
 800d508:	2b09      	cmp	r3, #9
 800d50a:	d94e      	bls.n	800d5aa <_svfiprintf_r+0x17e>
 800d50c:	b1b0      	cbz	r0, 800d53c <_svfiprintf_r+0x110>
 800d50e:	9207      	str	r2, [sp, #28]
 800d510:	e014      	b.n	800d53c <_svfiprintf_r+0x110>
 800d512:	eba0 0308 	sub.w	r3, r0, r8
 800d516:	fa09 f303 	lsl.w	r3, r9, r3
 800d51a:	4313      	orrs	r3, r2
 800d51c:	9304      	str	r3, [sp, #16]
 800d51e:	46a2      	mov	sl, r4
 800d520:	e7d2      	b.n	800d4c8 <_svfiprintf_r+0x9c>
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	1d19      	adds	r1, r3, #4
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	9103      	str	r1, [sp, #12]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	bfbb      	ittet	lt
 800d52e:	425b      	neglt	r3, r3
 800d530:	f042 0202 	orrlt.w	r2, r2, #2
 800d534:	9307      	strge	r3, [sp, #28]
 800d536:	9307      	strlt	r3, [sp, #28]
 800d538:	bfb8      	it	lt
 800d53a:	9204      	strlt	r2, [sp, #16]
 800d53c:	7823      	ldrb	r3, [r4, #0]
 800d53e:	2b2e      	cmp	r3, #46	; 0x2e
 800d540:	d10c      	bne.n	800d55c <_svfiprintf_r+0x130>
 800d542:	7863      	ldrb	r3, [r4, #1]
 800d544:	2b2a      	cmp	r3, #42	; 0x2a
 800d546:	d135      	bne.n	800d5b4 <_svfiprintf_r+0x188>
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	1d1a      	adds	r2, r3, #4
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	9203      	str	r2, [sp, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	bfb8      	it	lt
 800d554:	f04f 33ff 	movlt.w	r3, #4294967295
 800d558:	3402      	adds	r4, #2
 800d55a:	9305      	str	r3, [sp, #20]
 800d55c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d628 <_svfiprintf_r+0x1fc>
 800d560:	7821      	ldrb	r1, [r4, #0]
 800d562:	2203      	movs	r2, #3
 800d564:	4650      	mov	r0, sl
 800d566:	f7f2 fe43 	bl	80001f0 <memchr>
 800d56a:	b140      	cbz	r0, 800d57e <_svfiprintf_r+0x152>
 800d56c:	2340      	movs	r3, #64	; 0x40
 800d56e:	eba0 000a 	sub.w	r0, r0, sl
 800d572:	fa03 f000 	lsl.w	r0, r3, r0
 800d576:	9b04      	ldr	r3, [sp, #16]
 800d578:	4303      	orrs	r3, r0
 800d57a:	3401      	adds	r4, #1
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d582:	4826      	ldr	r0, [pc, #152]	; (800d61c <_svfiprintf_r+0x1f0>)
 800d584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d588:	2206      	movs	r2, #6
 800d58a:	f7f2 fe31 	bl	80001f0 <memchr>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d038      	beq.n	800d604 <_svfiprintf_r+0x1d8>
 800d592:	4b23      	ldr	r3, [pc, #140]	; (800d620 <_svfiprintf_r+0x1f4>)
 800d594:	bb1b      	cbnz	r3, 800d5de <_svfiprintf_r+0x1b2>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	3307      	adds	r3, #7
 800d59a:	f023 0307 	bic.w	r3, r3, #7
 800d59e:	3308      	adds	r3, #8
 800d5a0:	9303      	str	r3, [sp, #12]
 800d5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a4:	4433      	add	r3, r6
 800d5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a8:	e767      	b.n	800d47a <_svfiprintf_r+0x4e>
 800d5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	2001      	movs	r0, #1
 800d5b2:	e7a5      	b.n	800d500 <_svfiprintf_r+0xd4>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	3401      	adds	r4, #1
 800d5b8:	9305      	str	r3, [sp, #20]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f04f 0c0a 	mov.w	ip, #10
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5c6:	3a30      	subs	r2, #48	; 0x30
 800d5c8:	2a09      	cmp	r2, #9
 800d5ca:	d903      	bls.n	800d5d4 <_svfiprintf_r+0x1a8>
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d0c5      	beq.n	800d55c <_svfiprintf_r+0x130>
 800d5d0:	9105      	str	r1, [sp, #20]
 800d5d2:	e7c3      	b.n	800d55c <_svfiprintf_r+0x130>
 800d5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5d8:	4604      	mov	r4, r0
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e7f0      	b.n	800d5c0 <_svfiprintf_r+0x194>
 800d5de:	ab03      	add	r3, sp, #12
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	462a      	mov	r2, r5
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	; (800d624 <_svfiprintf_r+0x1f8>)
 800d5e6:	a904      	add	r1, sp, #16
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f3af 8000 	nop.w
 800d5ee:	1c42      	adds	r2, r0, #1
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	d1d6      	bne.n	800d5a2 <_svfiprintf_r+0x176>
 800d5f4:	89ab      	ldrh	r3, [r5, #12]
 800d5f6:	065b      	lsls	r3, r3, #25
 800d5f8:	f53f af2c 	bmi.w	800d454 <_svfiprintf_r+0x28>
 800d5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5fe:	b01d      	add	sp, #116	; 0x74
 800d600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d604:	ab03      	add	r3, sp, #12
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	462a      	mov	r2, r5
 800d60a:	4b06      	ldr	r3, [pc, #24]	; (800d624 <_svfiprintf_r+0x1f8>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	4638      	mov	r0, r7
 800d610:	f000 f9d4 	bl	800d9bc <_printf_i>
 800d614:	e7eb      	b.n	800d5ee <_svfiprintf_r+0x1c2>
 800d616:	bf00      	nop
 800d618:	0800e059 	.word	0x0800e059
 800d61c:	0800e063 	.word	0x0800e063
 800d620:	00000000 	.word	0x00000000
 800d624:	0800d375 	.word	0x0800d375
 800d628:	0800e05f 	.word	0x0800e05f

0800d62c <__sfputc_r>:
 800d62c:	6893      	ldr	r3, [r2, #8]
 800d62e:	3b01      	subs	r3, #1
 800d630:	2b00      	cmp	r3, #0
 800d632:	b410      	push	{r4}
 800d634:	6093      	str	r3, [r2, #8]
 800d636:	da08      	bge.n	800d64a <__sfputc_r+0x1e>
 800d638:	6994      	ldr	r4, [r2, #24]
 800d63a:	42a3      	cmp	r3, r4
 800d63c:	db01      	blt.n	800d642 <__sfputc_r+0x16>
 800d63e:	290a      	cmp	r1, #10
 800d640:	d103      	bne.n	800d64a <__sfputc_r+0x1e>
 800d642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d646:	f7ff bc21 	b.w	800ce8c <__swbuf_r>
 800d64a:	6813      	ldr	r3, [r2, #0]
 800d64c:	1c58      	adds	r0, r3, #1
 800d64e:	6010      	str	r0, [r2, #0]
 800d650:	7019      	strb	r1, [r3, #0]
 800d652:	4608      	mov	r0, r1
 800d654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <__sfputs_r>:
 800d65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65c:	4606      	mov	r6, r0
 800d65e:	460f      	mov	r7, r1
 800d660:	4614      	mov	r4, r2
 800d662:	18d5      	adds	r5, r2, r3
 800d664:	42ac      	cmp	r4, r5
 800d666:	d101      	bne.n	800d66c <__sfputs_r+0x12>
 800d668:	2000      	movs	r0, #0
 800d66a:	e007      	b.n	800d67c <__sfputs_r+0x22>
 800d66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d670:	463a      	mov	r2, r7
 800d672:	4630      	mov	r0, r6
 800d674:	f7ff ffda 	bl	800d62c <__sfputc_r>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d1f3      	bne.n	800d664 <__sfputs_r+0xa>
 800d67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d680 <_vfiprintf_r>:
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	460d      	mov	r5, r1
 800d686:	b09d      	sub	sp, #116	; 0x74
 800d688:	4614      	mov	r4, r2
 800d68a:	4698      	mov	r8, r3
 800d68c:	4606      	mov	r6, r0
 800d68e:	b118      	cbz	r0, 800d698 <_vfiprintf_r+0x18>
 800d690:	6983      	ldr	r3, [r0, #24]
 800d692:	b90b      	cbnz	r3, 800d698 <_vfiprintf_r+0x18>
 800d694:	f7ff f86c 	bl	800c770 <__sinit>
 800d698:	4b89      	ldr	r3, [pc, #548]	; (800d8c0 <_vfiprintf_r+0x240>)
 800d69a:	429d      	cmp	r5, r3
 800d69c:	d11b      	bne.n	800d6d6 <_vfiprintf_r+0x56>
 800d69e:	6875      	ldr	r5, [r6, #4]
 800d6a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6a2:	07d9      	lsls	r1, r3, #31
 800d6a4:	d405      	bmi.n	800d6b2 <_vfiprintf_r+0x32>
 800d6a6:	89ab      	ldrh	r3, [r5, #12]
 800d6a8:	059a      	lsls	r2, r3, #22
 800d6aa:	d402      	bmi.n	800d6b2 <_vfiprintf_r+0x32>
 800d6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ae:	f7ff f922 	bl	800c8f6 <__retarget_lock_acquire_recursive>
 800d6b2:	89ab      	ldrh	r3, [r5, #12]
 800d6b4:	071b      	lsls	r3, r3, #28
 800d6b6:	d501      	bpl.n	800d6bc <_vfiprintf_r+0x3c>
 800d6b8:	692b      	ldr	r3, [r5, #16]
 800d6ba:	b9eb      	cbnz	r3, 800d6f8 <_vfiprintf_r+0x78>
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f7ff fc48 	bl	800cf54 <__swsetup_r>
 800d6c4:	b1c0      	cbz	r0, 800d6f8 <_vfiprintf_r+0x78>
 800d6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6c8:	07dc      	lsls	r4, r3, #31
 800d6ca:	d50e      	bpl.n	800d6ea <_vfiprintf_r+0x6a>
 800d6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d0:	b01d      	add	sp, #116	; 0x74
 800d6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d6:	4b7b      	ldr	r3, [pc, #492]	; (800d8c4 <_vfiprintf_r+0x244>)
 800d6d8:	429d      	cmp	r5, r3
 800d6da:	d101      	bne.n	800d6e0 <_vfiprintf_r+0x60>
 800d6dc:	68b5      	ldr	r5, [r6, #8]
 800d6de:	e7df      	b.n	800d6a0 <_vfiprintf_r+0x20>
 800d6e0:	4b79      	ldr	r3, [pc, #484]	; (800d8c8 <_vfiprintf_r+0x248>)
 800d6e2:	429d      	cmp	r5, r3
 800d6e4:	bf08      	it	eq
 800d6e6:	68f5      	ldreq	r5, [r6, #12]
 800d6e8:	e7da      	b.n	800d6a0 <_vfiprintf_r+0x20>
 800d6ea:	89ab      	ldrh	r3, [r5, #12]
 800d6ec:	0598      	lsls	r0, r3, #22
 800d6ee:	d4ed      	bmi.n	800d6cc <_vfiprintf_r+0x4c>
 800d6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6f2:	f7ff f901 	bl	800c8f8 <__retarget_lock_release_recursive>
 800d6f6:	e7e9      	b.n	800d6cc <_vfiprintf_r+0x4c>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d6fc:	2320      	movs	r3, #32
 800d6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d702:	f8cd 800c 	str.w	r8, [sp, #12]
 800d706:	2330      	movs	r3, #48	; 0x30
 800d708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8cc <_vfiprintf_r+0x24c>
 800d70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d710:	f04f 0901 	mov.w	r9, #1
 800d714:	4623      	mov	r3, r4
 800d716:	469a      	mov	sl, r3
 800d718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d71c:	b10a      	cbz	r2, 800d722 <_vfiprintf_r+0xa2>
 800d71e:	2a25      	cmp	r2, #37	; 0x25
 800d720:	d1f9      	bne.n	800d716 <_vfiprintf_r+0x96>
 800d722:	ebba 0b04 	subs.w	fp, sl, r4
 800d726:	d00b      	beq.n	800d740 <_vfiprintf_r+0xc0>
 800d728:	465b      	mov	r3, fp
 800d72a:	4622      	mov	r2, r4
 800d72c:	4629      	mov	r1, r5
 800d72e:	4630      	mov	r0, r6
 800d730:	f7ff ff93 	bl	800d65a <__sfputs_r>
 800d734:	3001      	adds	r0, #1
 800d736:	f000 80aa 	beq.w	800d88e <_vfiprintf_r+0x20e>
 800d73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d73c:	445a      	add	r2, fp
 800d73e:	9209      	str	r2, [sp, #36]	; 0x24
 800d740:	f89a 3000 	ldrb.w	r3, [sl]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 80a2 	beq.w	800d88e <_vfiprintf_r+0x20e>
 800d74a:	2300      	movs	r3, #0
 800d74c:	f04f 32ff 	mov.w	r2, #4294967295
 800d750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d754:	f10a 0a01 	add.w	sl, sl, #1
 800d758:	9304      	str	r3, [sp, #16]
 800d75a:	9307      	str	r3, [sp, #28]
 800d75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d760:	931a      	str	r3, [sp, #104]	; 0x68
 800d762:	4654      	mov	r4, sl
 800d764:	2205      	movs	r2, #5
 800d766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d76a:	4858      	ldr	r0, [pc, #352]	; (800d8cc <_vfiprintf_r+0x24c>)
 800d76c:	f7f2 fd40 	bl	80001f0 <memchr>
 800d770:	9a04      	ldr	r2, [sp, #16]
 800d772:	b9d8      	cbnz	r0, 800d7ac <_vfiprintf_r+0x12c>
 800d774:	06d1      	lsls	r1, r2, #27
 800d776:	bf44      	itt	mi
 800d778:	2320      	movmi	r3, #32
 800d77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d77e:	0713      	lsls	r3, r2, #28
 800d780:	bf44      	itt	mi
 800d782:	232b      	movmi	r3, #43	; 0x2b
 800d784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d788:	f89a 3000 	ldrb.w	r3, [sl]
 800d78c:	2b2a      	cmp	r3, #42	; 0x2a
 800d78e:	d015      	beq.n	800d7bc <_vfiprintf_r+0x13c>
 800d790:	9a07      	ldr	r2, [sp, #28]
 800d792:	4654      	mov	r4, sl
 800d794:	2000      	movs	r0, #0
 800d796:	f04f 0c0a 	mov.w	ip, #10
 800d79a:	4621      	mov	r1, r4
 800d79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7a0:	3b30      	subs	r3, #48	; 0x30
 800d7a2:	2b09      	cmp	r3, #9
 800d7a4:	d94e      	bls.n	800d844 <_vfiprintf_r+0x1c4>
 800d7a6:	b1b0      	cbz	r0, 800d7d6 <_vfiprintf_r+0x156>
 800d7a8:	9207      	str	r2, [sp, #28]
 800d7aa:	e014      	b.n	800d7d6 <_vfiprintf_r+0x156>
 800d7ac:	eba0 0308 	sub.w	r3, r0, r8
 800d7b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	9304      	str	r3, [sp, #16]
 800d7b8:	46a2      	mov	sl, r4
 800d7ba:	e7d2      	b.n	800d762 <_vfiprintf_r+0xe2>
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	1d19      	adds	r1, r3, #4
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	9103      	str	r1, [sp, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bfbb      	ittet	lt
 800d7c8:	425b      	neglt	r3, r3
 800d7ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d7ce:	9307      	strge	r3, [sp, #28]
 800d7d0:	9307      	strlt	r3, [sp, #28]
 800d7d2:	bfb8      	it	lt
 800d7d4:	9204      	strlt	r2, [sp, #16]
 800d7d6:	7823      	ldrb	r3, [r4, #0]
 800d7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d7da:	d10c      	bne.n	800d7f6 <_vfiprintf_r+0x176>
 800d7dc:	7863      	ldrb	r3, [r4, #1]
 800d7de:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e0:	d135      	bne.n	800d84e <_vfiprintf_r+0x1ce>
 800d7e2:	9b03      	ldr	r3, [sp, #12]
 800d7e4:	1d1a      	adds	r2, r3, #4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	9203      	str	r2, [sp, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	bfb8      	it	lt
 800d7ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7f2:	3402      	adds	r4, #2
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8dc <_vfiprintf_r+0x25c>
 800d7fa:	7821      	ldrb	r1, [r4, #0]
 800d7fc:	2203      	movs	r2, #3
 800d7fe:	4650      	mov	r0, sl
 800d800:	f7f2 fcf6 	bl	80001f0 <memchr>
 800d804:	b140      	cbz	r0, 800d818 <_vfiprintf_r+0x198>
 800d806:	2340      	movs	r3, #64	; 0x40
 800d808:	eba0 000a 	sub.w	r0, r0, sl
 800d80c:	fa03 f000 	lsl.w	r0, r3, r0
 800d810:	9b04      	ldr	r3, [sp, #16]
 800d812:	4303      	orrs	r3, r0
 800d814:	3401      	adds	r4, #1
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d81c:	482c      	ldr	r0, [pc, #176]	; (800d8d0 <_vfiprintf_r+0x250>)
 800d81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d822:	2206      	movs	r2, #6
 800d824:	f7f2 fce4 	bl	80001f0 <memchr>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d03f      	beq.n	800d8ac <_vfiprintf_r+0x22c>
 800d82c:	4b29      	ldr	r3, [pc, #164]	; (800d8d4 <_vfiprintf_r+0x254>)
 800d82e:	bb1b      	cbnz	r3, 800d878 <_vfiprintf_r+0x1f8>
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	3307      	adds	r3, #7
 800d834:	f023 0307 	bic.w	r3, r3, #7
 800d838:	3308      	adds	r3, #8
 800d83a:	9303      	str	r3, [sp, #12]
 800d83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83e:	443b      	add	r3, r7
 800d840:	9309      	str	r3, [sp, #36]	; 0x24
 800d842:	e767      	b.n	800d714 <_vfiprintf_r+0x94>
 800d844:	fb0c 3202 	mla	r2, ip, r2, r3
 800d848:	460c      	mov	r4, r1
 800d84a:	2001      	movs	r0, #1
 800d84c:	e7a5      	b.n	800d79a <_vfiprintf_r+0x11a>
 800d84e:	2300      	movs	r3, #0
 800d850:	3401      	adds	r4, #1
 800d852:	9305      	str	r3, [sp, #20]
 800d854:	4619      	mov	r1, r3
 800d856:	f04f 0c0a 	mov.w	ip, #10
 800d85a:	4620      	mov	r0, r4
 800d85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d860:	3a30      	subs	r2, #48	; 0x30
 800d862:	2a09      	cmp	r2, #9
 800d864:	d903      	bls.n	800d86e <_vfiprintf_r+0x1ee>
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0c5      	beq.n	800d7f6 <_vfiprintf_r+0x176>
 800d86a:	9105      	str	r1, [sp, #20]
 800d86c:	e7c3      	b.n	800d7f6 <_vfiprintf_r+0x176>
 800d86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d872:	4604      	mov	r4, r0
 800d874:	2301      	movs	r3, #1
 800d876:	e7f0      	b.n	800d85a <_vfiprintf_r+0x1da>
 800d878:	ab03      	add	r3, sp, #12
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	462a      	mov	r2, r5
 800d87e:	4b16      	ldr	r3, [pc, #88]	; (800d8d8 <_vfiprintf_r+0x258>)
 800d880:	a904      	add	r1, sp, #16
 800d882:	4630      	mov	r0, r6
 800d884:	f3af 8000 	nop.w
 800d888:	4607      	mov	r7, r0
 800d88a:	1c78      	adds	r0, r7, #1
 800d88c:	d1d6      	bne.n	800d83c <_vfiprintf_r+0x1bc>
 800d88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d890:	07d9      	lsls	r1, r3, #31
 800d892:	d405      	bmi.n	800d8a0 <_vfiprintf_r+0x220>
 800d894:	89ab      	ldrh	r3, [r5, #12]
 800d896:	059a      	lsls	r2, r3, #22
 800d898:	d402      	bmi.n	800d8a0 <_vfiprintf_r+0x220>
 800d89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d89c:	f7ff f82c 	bl	800c8f8 <__retarget_lock_release_recursive>
 800d8a0:	89ab      	ldrh	r3, [r5, #12]
 800d8a2:	065b      	lsls	r3, r3, #25
 800d8a4:	f53f af12 	bmi.w	800d6cc <_vfiprintf_r+0x4c>
 800d8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8aa:	e711      	b.n	800d6d0 <_vfiprintf_r+0x50>
 800d8ac:	ab03      	add	r3, sp, #12
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <_vfiprintf_r+0x258>)
 800d8b4:	a904      	add	r1, sp, #16
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f000 f880 	bl	800d9bc <_printf_i>
 800d8bc:	e7e4      	b.n	800d888 <_vfiprintf_r+0x208>
 800d8be:	bf00      	nop
 800d8c0:	0800df14 	.word	0x0800df14
 800d8c4:	0800df34 	.word	0x0800df34
 800d8c8:	0800def4 	.word	0x0800def4
 800d8cc:	0800e059 	.word	0x0800e059
 800d8d0:	0800e063 	.word	0x0800e063
 800d8d4:	00000000 	.word	0x00000000
 800d8d8:	0800d65b 	.word	0x0800d65b
 800d8dc:	0800e05f 	.word	0x0800e05f

0800d8e0 <_printf_common>:
 800d8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e4:	4616      	mov	r6, r2
 800d8e6:	4699      	mov	r9, r3
 800d8e8:	688a      	ldr	r2, [r1, #8]
 800d8ea:	690b      	ldr	r3, [r1, #16]
 800d8ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	bfb8      	it	lt
 800d8f4:	4613      	movlt	r3, r2
 800d8f6:	6033      	str	r3, [r6, #0]
 800d8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8fc:	4607      	mov	r7, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	b10a      	cbz	r2, 800d906 <_printf_common+0x26>
 800d902:	3301      	adds	r3, #1
 800d904:	6033      	str	r3, [r6, #0]
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	0699      	lsls	r1, r3, #26
 800d90a:	bf42      	ittt	mi
 800d90c:	6833      	ldrmi	r3, [r6, #0]
 800d90e:	3302      	addmi	r3, #2
 800d910:	6033      	strmi	r3, [r6, #0]
 800d912:	6825      	ldr	r5, [r4, #0]
 800d914:	f015 0506 	ands.w	r5, r5, #6
 800d918:	d106      	bne.n	800d928 <_printf_common+0x48>
 800d91a:	f104 0a19 	add.w	sl, r4, #25
 800d91e:	68e3      	ldr	r3, [r4, #12]
 800d920:	6832      	ldr	r2, [r6, #0]
 800d922:	1a9b      	subs	r3, r3, r2
 800d924:	42ab      	cmp	r3, r5
 800d926:	dc26      	bgt.n	800d976 <_printf_common+0x96>
 800d928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d92c:	1e13      	subs	r3, r2, #0
 800d92e:	6822      	ldr	r2, [r4, #0]
 800d930:	bf18      	it	ne
 800d932:	2301      	movne	r3, #1
 800d934:	0692      	lsls	r2, r2, #26
 800d936:	d42b      	bmi.n	800d990 <_printf_common+0xb0>
 800d938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d93c:	4649      	mov	r1, r9
 800d93e:	4638      	mov	r0, r7
 800d940:	47c0      	blx	r8
 800d942:	3001      	adds	r0, #1
 800d944:	d01e      	beq.n	800d984 <_printf_common+0xa4>
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	68e5      	ldr	r5, [r4, #12]
 800d94a:	6832      	ldr	r2, [r6, #0]
 800d94c:	f003 0306 	and.w	r3, r3, #6
 800d950:	2b04      	cmp	r3, #4
 800d952:	bf08      	it	eq
 800d954:	1aad      	subeq	r5, r5, r2
 800d956:	68a3      	ldr	r3, [r4, #8]
 800d958:	6922      	ldr	r2, [r4, #16]
 800d95a:	bf0c      	ite	eq
 800d95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d960:	2500      	movne	r5, #0
 800d962:	4293      	cmp	r3, r2
 800d964:	bfc4      	itt	gt
 800d966:	1a9b      	subgt	r3, r3, r2
 800d968:	18ed      	addgt	r5, r5, r3
 800d96a:	2600      	movs	r6, #0
 800d96c:	341a      	adds	r4, #26
 800d96e:	42b5      	cmp	r5, r6
 800d970:	d11a      	bne.n	800d9a8 <_printf_common+0xc8>
 800d972:	2000      	movs	r0, #0
 800d974:	e008      	b.n	800d988 <_printf_common+0xa8>
 800d976:	2301      	movs	r3, #1
 800d978:	4652      	mov	r2, sl
 800d97a:	4649      	mov	r1, r9
 800d97c:	4638      	mov	r0, r7
 800d97e:	47c0      	blx	r8
 800d980:	3001      	adds	r0, #1
 800d982:	d103      	bne.n	800d98c <_printf_common+0xac>
 800d984:	f04f 30ff 	mov.w	r0, #4294967295
 800d988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98c:	3501      	adds	r5, #1
 800d98e:	e7c6      	b.n	800d91e <_printf_common+0x3e>
 800d990:	18e1      	adds	r1, r4, r3
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	2030      	movs	r0, #48	; 0x30
 800d996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d99a:	4422      	add	r2, r4
 800d99c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9a4:	3302      	adds	r3, #2
 800d9a6:	e7c7      	b.n	800d938 <_printf_common+0x58>
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	4649      	mov	r1, r9
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	47c0      	blx	r8
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	d0e6      	beq.n	800d984 <_printf_common+0xa4>
 800d9b6:	3601      	adds	r6, #1
 800d9b8:	e7d9      	b.n	800d96e <_printf_common+0x8e>
	...

0800d9bc <_printf_i>:
 800d9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c0:	7e0f      	ldrb	r7, [r1, #24]
 800d9c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9c4:	2f78      	cmp	r7, #120	; 0x78
 800d9c6:	4691      	mov	r9, r2
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	469a      	mov	sl, r3
 800d9ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9d2:	d807      	bhi.n	800d9e4 <_printf_i+0x28>
 800d9d4:	2f62      	cmp	r7, #98	; 0x62
 800d9d6:	d80a      	bhi.n	800d9ee <_printf_i+0x32>
 800d9d8:	2f00      	cmp	r7, #0
 800d9da:	f000 80d8 	beq.w	800db8e <_printf_i+0x1d2>
 800d9de:	2f58      	cmp	r7, #88	; 0x58
 800d9e0:	f000 80a3 	beq.w	800db2a <_printf_i+0x16e>
 800d9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9ec:	e03a      	b.n	800da64 <_printf_i+0xa8>
 800d9ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9f2:	2b15      	cmp	r3, #21
 800d9f4:	d8f6      	bhi.n	800d9e4 <_printf_i+0x28>
 800d9f6:	a101      	add	r1, pc, #4	; (adr r1, 800d9fc <_printf_i+0x40>)
 800d9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9fc:	0800da55 	.word	0x0800da55
 800da00:	0800da69 	.word	0x0800da69
 800da04:	0800d9e5 	.word	0x0800d9e5
 800da08:	0800d9e5 	.word	0x0800d9e5
 800da0c:	0800d9e5 	.word	0x0800d9e5
 800da10:	0800d9e5 	.word	0x0800d9e5
 800da14:	0800da69 	.word	0x0800da69
 800da18:	0800d9e5 	.word	0x0800d9e5
 800da1c:	0800d9e5 	.word	0x0800d9e5
 800da20:	0800d9e5 	.word	0x0800d9e5
 800da24:	0800d9e5 	.word	0x0800d9e5
 800da28:	0800db75 	.word	0x0800db75
 800da2c:	0800da99 	.word	0x0800da99
 800da30:	0800db57 	.word	0x0800db57
 800da34:	0800d9e5 	.word	0x0800d9e5
 800da38:	0800d9e5 	.word	0x0800d9e5
 800da3c:	0800db97 	.word	0x0800db97
 800da40:	0800d9e5 	.word	0x0800d9e5
 800da44:	0800da99 	.word	0x0800da99
 800da48:	0800d9e5 	.word	0x0800d9e5
 800da4c:	0800d9e5 	.word	0x0800d9e5
 800da50:	0800db5f 	.word	0x0800db5f
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	1d1a      	adds	r2, r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	602a      	str	r2, [r5, #0]
 800da5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da64:	2301      	movs	r3, #1
 800da66:	e0a3      	b.n	800dbb0 <_printf_i+0x1f4>
 800da68:	6820      	ldr	r0, [r4, #0]
 800da6a:	6829      	ldr	r1, [r5, #0]
 800da6c:	0606      	lsls	r6, r0, #24
 800da6e:	f101 0304 	add.w	r3, r1, #4
 800da72:	d50a      	bpl.n	800da8a <_printf_i+0xce>
 800da74:	680e      	ldr	r6, [r1, #0]
 800da76:	602b      	str	r3, [r5, #0]
 800da78:	2e00      	cmp	r6, #0
 800da7a:	da03      	bge.n	800da84 <_printf_i+0xc8>
 800da7c:	232d      	movs	r3, #45	; 0x2d
 800da7e:	4276      	negs	r6, r6
 800da80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da84:	485e      	ldr	r0, [pc, #376]	; (800dc00 <_printf_i+0x244>)
 800da86:	230a      	movs	r3, #10
 800da88:	e019      	b.n	800dabe <_printf_i+0x102>
 800da8a:	680e      	ldr	r6, [r1, #0]
 800da8c:	602b      	str	r3, [r5, #0]
 800da8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da92:	bf18      	it	ne
 800da94:	b236      	sxthne	r6, r6
 800da96:	e7ef      	b.n	800da78 <_printf_i+0xbc>
 800da98:	682b      	ldr	r3, [r5, #0]
 800da9a:	6820      	ldr	r0, [r4, #0]
 800da9c:	1d19      	adds	r1, r3, #4
 800da9e:	6029      	str	r1, [r5, #0]
 800daa0:	0601      	lsls	r1, r0, #24
 800daa2:	d501      	bpl.n	800daa8 <_printf_i+0xec>
 800daa4:	681e      	ldr	r6, [r3, #0]
 800daa6:	e002      	b.n	800daae <_printf_i+0xf2>
 800daa8:	0646      	lsls	r6, r0, #25
 800daaa:	d5fb      	bpl.n	800daa4 <_printf_i+0xe8>
 800daac:	881e      	ldrh	r6, [r3, #0]
 800daae:	4854      	ldr	r0, [pc, #336]	; (800dc00 <_printf_i+0x244>)
 800dab0:	2f6f      	cmp	r7, #111	; 0x6f
 800dab2:	bf0c      	ite	eq
 800dab4:	2308      	moveq	r3, #8
 800dab6:	230a      	movne	r3, #10
 800dab8:	2100      	movs	r1, #0
 800daba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dabe:	6865      	ldr	r5, [r4, #4]
 800dac0:	60a5      	str	r5, [r4, #8]
 800dac2:	2d00      	cmp	r5, #0
 800dac4:	bfa2      	ittt	ge
 800dac6:	6821      	ldrge	r1, [r4, #0]
 800dac8:	f021 0104 	bicge.w	r1, r1, #4
 800dacc:	6021      	strge	r1, [r4, #0]
 800dace:	b90e      	cbnz	r6, 800dad4 <_printf_i+0x118>
 800dad0:	2d00      	cmp	r5, #0
 800dad2:	d04d      	beq.n	800db70 <_printf_i+0x1b4>
 800dad4:	4615      	mov	r5, r2
 800dad6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dada:	fb03 6711 	mls	r7, r3, r1, r6
 800dade:	5dc7      	ldrb	r7, [r0, r7]
 800dae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dae4:	4637      	mov	r7, r6
 800dae6:	42bb      	cmp	r3, r7
 800dae8:	460e      	mov	r6, r1
 800daea:	d9f4      	bls.n	800dad6 <_printf_i+0x11a>
 800daec:	2b08      	cmp	r3, #8
 800daee:	d10b      	bne.n	800db08 <_printf_i+0x14c>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	07de      	lsls	r6, r3, #31
 800daf4:	d508      	bpl.n	800db08 <_printf_i+0x14c>
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	6861      	ldr	r1, [r4, #4]
 800dafa:	4299      	cmp	r1, r3
 800dafc:	bfde      	ittt	le
 800dafe:	2330      	movle	r3, #48	; 0x30
 800db00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db08:	1b52      	subs	r2, r2, r5
 800db0a:	6122      	str	r2, [r4, #16]
 800db0c:	f8cd a000 	str.w	sl, [sp]
 800db10:	464b      	mov	r3, r9
 800db12:	aa03      	add	r2, sp, #12
 800db14:	4621      	mov	r1, r4
 800db16:	4640      	mov	r0, r8
 800db18:	f7ff fee2 	bl	800d8e0 <_printf_common>
 800db1c:	3001      	adds	r0, #1
 800db1e:	d14c      	bne.n	800dbba <_printf_i+0x1fe>
 800db20:	f04f 30ff 	mov.w	r0, #4294967295
 800db24:	b004      	add	sp, #16
 800db26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2a:	4835      	ldr	r0, [pc, #212]	; (800dc00 <_printf_i+0x244>)
 800db2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db30:	6829      	ldr	r1, [r5, #0]
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	f851 6b04 	ldr.w	r6, [r1], #4
 800db38:	6029      	str	r1, [r5, #0]
 800db3a:	061d      	lsls	r5, r3, #24
 800db3c:	d514      	bpl.n	800db68 <_printf_i+0x1ac>
 800db3e:	07df      	lsls	r7, r3, #31
 800db40:	bf44      	itt	mi
 800db42:	f043 0320 	orrmi.w	r3, r3, #32
 800db46:	6023      	strmi	r3, [r4, #0]
 800db48:	b91e      	cbnz	r6, 800db52 <_printf_i+0x196>
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	f023 0320 	bic.w	r3, r3, #32
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	2310      	movs	r3, #16
 800db54:	e7b0      	b.n	800dab8 <_printf_i+0xfc>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	f043 0320 	orr.w	r3, r3, #32
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	2378      	movs	r3, #120	; 0x78
 800db60:	4828      	ldr	r0, [pc, #160]	; (800dc04 <_printf_i+0x248>)
 800db62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db66:	e7e3      	b.n	800db30 <_printf_i+0x174>
 800db68:	0659      	lsls	r1, r3, #25
 800db6a:	bf48      	it	mi
 800db6c:	b2b6      	uxthmi	r6, r6
 800db6e:	e7e6      	b.n	800db3e <_printf_i+0x182>
 800db70:	4615      	mov	r5, r2
 800db72:	e7bb      	b.n	800daec <_printf_i+0x130>
 800db74:	682b      	ldr	r3, [r5, #0]
 800db76:	6826      	ldr	r6, [r4, #0]
 800db78:	6961      	ldr	r1, [r4, #20]
 800db7a:	1d18      	adds	r0, r3, #4
 800db7c:	6028      	str	r0, [r5, #0]
 800db7e:	0635      	lsls	r5, r6, #24
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	d501      	bpl.n	800db88 <_printf_i+0x1cc>
 800db84:	6019      	str	r1, [r3, #0]
 800db86:	e002      	b.n	800db8e <_printf_i+0x1d2>
 800db88:	0670      	lsls	r0, r6, #25
 800db8a:	d5fb      	bpl.n	800db84 <_printf_i+0x1c8>
 800db8c:	8019      	strh	r1, [r3, #0]
 800db8e:	2300      	movs	r3, #0
 800db90:	6123      	str	r3, [r4, #16]
 800db92:	4615      	mov	r5, r2
 800db94:	e7ba      	b.n	800db0c <_printf_i+0x150>
 800db96:	682b      	ldr	r3, [r5, #0]
 800db98:	1d1a      	adds	r2, r3, #4
 800db9a:	602a      	str	r2, [r5, #0]
 800db9c:	681d      	ldr	r5, [r3, #0]
 800db9e:	6862      	ldr	r2, [r4, #4]
 800dba0:	2100      	movs	r1, #0
 800dba2:	4628      	mov	r0, r5
 800dba4:	f7f2 fb24 	bl	80001f0 <memchr>
 800dba8:	b108      	cbz	r0, 800dbae <_printf_i+0x1f2>
 800dbaa:	1b40      	subs	r0, r0, r5
 800dbac:	6060      	str	r0, [r4, #4]
 800dbae:	6863      	ldr	r3, [r4, #4]
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbb8:	e7a8      	b.n	800db0c <_printf_i+0x150>
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	47d0      	blx	sl
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d0ab      	beq.n	800db20 <_printf_i+0x164>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	079b      	lsls	r3, r3, #30
 800dbcc:	d413      	bmi.n	800dbf6 <_printf_i+0x23a>
 800dbce:	68e0      	ldr	r0, [r4, #12]
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	4298      	cmp	r0, r3
 800dbd4:	bfb8      	it	lt
 800dbd6:	4618      	movlt	r0, r3
 800dbd8:	e7a4      	b.n	800db24 <_printf_i+0x168>
 800dbda:	2301      	movs	r3, #1
 800dbdc:	4632      	mov	r2, r6
 800dbde:	4649      	mov	r1, r9
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	47d0      	blx	sl
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	d09b      	beq.n	800db20 <_printf_i+0x164>
 800dbe8:	3501      	adds	r5, #1
 800dbea:	68e3      	ldr	r3, [r4, #12]
 800dbec:	9903      	ldr	r1, [sp, #12]
 800dbee:	1a5b      	subs	r3, r3, r1
 800dbf0:	42ab      	cmp	r3, r5
 800dbf2:	dcf2      	bgt.n	800dbda <_printf_i+0x21e>
 800dbf4:	e7eb      	b.n	800dbce <_printf_i+0x212>
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	f104 0619 	add.w	r6, r4, #25
 800dbfc:	e7f5      	b.n	800dbea <_printf_i+0x22e>
 800dbfe:	bf00      	nop
 800dc00:	0800e06a 	.word	0x0800e06a
 800dc04:	0800e07b 	.word	0x0800e07b

0800dc08 <_read_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4d07      	ldr	r5, [pc, #28]	; (800dc28 <_read_r+0x20>)
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	4608      	mov	r0, r1
 800dc10:	4611      	mov	r1, r2
 800dc12:	2200      	movs	r2, #0
 800dc14:	602a      	str	r2, [r5, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	f7f4 fe30 	bl	800287c <_read>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_read_r+0x1e>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_read_r+0x1e>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	200058d8 	.word	0x200058d8

0800dc2c <_fstat_r>:
 800dc2c:	b538      	push	{r3, r4, r5, lr}
 800dc2e:	4d07      	ldr	r5, [pc, #28]	; (800dc4c <_fstat_r+0x20>)
 800dc30:	2300      	movs	r3, #0
 800dc32:	4604      	mov	r4, r0
 800dc34:	4608      	mov	r0, r1
 800dc36:	4611      	mov	r1, r2
 800dc38:	602b      	str	r3, [r5, #0]
 800dc3a:	f7f4 fe64 	bl	8002906 <_fstat>
 800dc3e:	1c43      	adds	r3, r0, #1
 800dc40:	d102      	bne.n	800dc48 <_fstat_r+0x1c>
 800dc42:	682b      	ldr	r3, [r5, #0]
 800dc44:	b103      	cbz	r3, 800dc48 <_fstat_r+0x1c>
 800dc46:	6023      	str	r3, [r4, #0]
 800dc48:	bd38      	pop	{r3, r4, r5, pc}
 800dc4a:	bf00      	nop
 800dc4c:	200058d8 	.word	0x200058d8

0800dc50 <_isatty_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4d06      	ldr	r5, [pc, #24]	; (800dc6c <_isatty_r+0x1c>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4604      	mov	r4, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	602b      	str	r3, [r5, #0]
 800dc5c:	f7f4 fe63 	bl	8002926 <_isatty>
 800dc60:	1c43      	adds	r3, r0, #1
 800dc62:	d102      	bne.n	800dc6a <_isatty_r+0x1a>
 800dc64:	682b      	ldr	r3, [r5, #0]
 800dc66:	b103      	cbz	r3, 800dc6a <_isatty_r+0x1a>
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	bd38      	pop	{r3, r4, r5, pc}
 800dc6c:	200058d8 	.word	0x200058d8

0800dc70 <memmove>:
 800dc70:	4288      	cmp	r0, r1
 800dc72:	b510      	push	{r4, lr}
 800dc74:	eb01 0402 	add.w	r4, r1, r2
 800dc78:	d902      	bls.n	800dc80 <memmove+0x10>
 800dc7a:	4284      	cmp	r4, r0
 800dc7c:	4623      	mov	r3, r4
 800dc7e:	d807      	bhi.n	800dc90 <memmove+0x20>
 800dc80:	1e43      	subs	r3, r0, #1
 800dc82:	42a1      	cmp	r1, r4
 800dc84:	d008      	beq.n	800dc98 <memmove+0x28>
 800dc86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc8e:	e7f8      	b.n	800dc82 <memmove+0x12>
 800dc90:	4402      	add	r2, r0
 800dc92:	4601      	mov	r1, r0
 800dc94:	428a      	cmp	r2, r1
 800dc96:	d100      	bne.n	800dc9a <memmove+0x2a>
 800dc98:	bd10      	pop	{r4, pc}
 800dc9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dca2:	e7f7      	b.n	800dc94 <memmove+0x24>

0800dca4 <_realloc_r>:
 800dca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca8:	4680      	mov	r8, r0
 800dcaa:	4614      	mov	r4, r2
 800dcac:	460e      	mov	r6, r1
 800dcae:	b921      	cbnz	r1, 800dcba <_realloc_r+0x16>
 800dcb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	f7fe be57 	b.w	800c968 <_malloc_r>
 800dcba:	b92a      	cbnz	r2, 800dcc8 <_realloc_r+0x24>
 800dcbc:	f7ff fb0e 	bl	800d2dc <_free_r>
 800dcc0:	4625      	mov	r5, r4
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc8:	f000 f81b 	bl	800dd02 <_malloc_usable_size_r>
 800dccc:	4284      	cmp	r4, r0
 800dcce:	4607      	mov	r7, r0
 800dcd0:	d802      	bhi.n	800dcd8 <_realloc_r+0x34>
 800dcd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcd6:	d812      	bhi.n	800dcfe <_realloc_r+0x5a>
 800dcd8:	4621      	mov	r1, r4
 800dcda:	4640      	mov	r0, r8
 800dcdc:	f7fe fe44 	bl	800c968 <_malloc_r>
 800dce0:	4605      	mov	r5, r0
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d0ed      	beq.n	800dcc2 <_realloc_r+0x1e>
 800dce6:	42bc      	cmp	r4, r7
 800dce8:	4622      	mov	r2, r4
 800dcea:	4631      	mov	r1, r6
 800dcec:	bf28      	it	cs
 800dcee:	463a      	movcs	r2, r7
 800dcf0:	f7fe fe03 	bl	800c8fa <memcpy>
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	f7ff faf0 	bl	800d2dc <_free_r>
 800dcfc:	e7e1      	b.n	800dcc2 <_realloc_r+0x1e>
 800dcfe:	4635      	mov	r5, r6
 800dd00:	e7df      	b.n	800dcc2 <_realloc_r+0x1e>

0800dd02 <_malloc_usable_size_r>:
 800dd02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd06:	1f18      	subs	r0, r3, #4
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	bfbc      	itt	lt
 800dd0c:	580b      	ldrlt	r3, [r1, r0]
 800dd0e:	18c0      	addlt	r0, r0, r3
 800dd10:	4770      	bx	lr
	...

0800dd14 <_init>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr

0800dd20 <_fini>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr
