
10.FND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a930  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae0c  0800ae0c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae0c  0800ae0c  0001ae0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae14  0800ae14  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae18  0800ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800ae1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000b14  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc0  20000bc0  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e635  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd7  00000000  00000000  0003e711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  000426e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001740  00000000  00000000  00043fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028dba  00000000  00000000  00045708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3c8  00000000  00000000  0006e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed653  00000000  00000000  0008d88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017aedd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007418  00000000  00000000  0017af30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aac8 	.word	0x0800aac8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	0800aac8 	.word	0x0800aac8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DHT11_processing>:

}

int dht11time=150;
void DHT11_processing(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;
	char lcd_buff[20];

	if (TIM10_10ms_counter >= dht11time)  //1500ms
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <DHT11_processing+0x94>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <DHT11_processing+0x98>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	db3b      	blt.n	8000e0a <DHT11_processing+0x8a>
	{
		TIM10_10ms_counter=0;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <DHT11_processing+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		DHT11_trriger();
 8000d98:	f000 f85a 	bl	8000e50 <DHT11_trriger>
		DHT11_DataLine_Input();
 8000d9c:	f000 f86e 	bl	8000e7c <DHT11_DataLine_Input>
		DHT11_dumi_read();
 8000da0:	f000 f8dc 	bl	8000f5c <DHT11_dumi_read>

		i_RH = DHT11_rx_Data();
 8000da4:	f000 f8a4 	bl	8000ef0 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
		d_RH = DHT11_rx_Data();
 8000dac:	f000 f8a0 	bl	8000ef0 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75bb      	strb	r3, [r7, #22]
		i_Tmp = DHT11_rx_Data();
 8000db4:	f000 f89c 	bl	8000ef0 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	757b      	strb	r3, [r7, #21]
		d_Tmp = DHT11_rx_Data();
 8000dbc:	f000 f898 	bl	8000ef0 <DHT11_rx_Data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	753b      	strb	r3, [r7, #20]

		DHT11_DataLine_Output();
 8000dc4:	f000 f876 	bl	8000eb4 <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <DHT11_processing+0x9c>)
 8000dce:	f003 fb99 	bl	8004504 <HAL_GPIO_WritePin>
		printf("[Tmp]%d\n",(int)i_Tmp);
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <DHT11_processing+0xa0>)
 8000dd8:	f008 fbe2 	bl	80095a0 <iprintf>
		printf("[Wet]%d\n",(int)i_RH);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <DHT11_processing+0xa4>)
 8000de2:	f008 fbdd 	bl	80095a0 <iprintf>
		if (lcd_display_mode_flag == 1)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <DHT11_processing+0xa8>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10d      	bne.n	8000e0a <DHT11_processing+0x8a>
		{
			sprintf(lcd_buff,"Tmp:%d Wet:%d", (int)i_Tmp, (int)i_RH);
 8000dee:	7d7a      	ldrb	r2, [r7, #21]
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	4638      	mov	r0, r7
 8000df4:	490d      	ldr	r1, [pc, #52]	; (8000e2c <DHT11_processing+0xac>)
 8000df6:	f008 fc61 	bl	80096bc <siprintf>
			move_cursor(0,0);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 fb7b 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fb62 	bl	80014ce <lcd_string>
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000b24 	.word	0x20000b24
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	0800aaf0 	.word	0x0800aaf0
 8000e24:	0800aafc 	.word	0x0800aafc
 8000e28:	200000c8 	.word	0x200000c8
 8000e2c:	0800ab08 	.word	0x0800ab08

08000e30 <DHT11_Init>:

void DHT11_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2101      	movs	r1, #1
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <DHT11_Init+0x1c>)
 8000e3a:	f003 fb63 	bl	8004504 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e42:	f002 fcab 	bl	800379c <HAL_Delay>
	return;
 8000e46:	bf00      	nop
}
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000

08000e50 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <DHT11_trriger+0x28>)
 8000e5a:	f003 fb53 	bl	8004504 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f002 fc9c 	bl	800379c <HAL_Delay>

	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2101      	movs	r1, #1
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <DHT11_trriger+0x28>)
 8000e6a:	f003 fb4b 	bl	8004504 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f000 ff30 	bl	8001cd4 <delay_us>
	return;
 8000e74:	bf00      	nop
}
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020000 	.word	0x40020000

08000e7c <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e90:	2301      	movs	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <DHT11_DataLine_Input+0x34>)
 8000ea2:	f003 f96b 	bl	800417c <HAL_GPIO_Init>

	return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <DHT11_DataLine_Output+0x38>)
 8000ede:	f003 f94d 	bl	800417c <HAL_GPIO_Init>

	return;
 8000ee2:	bf00      	nop
}
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020000 	.word	0x40020000

08000ef0 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	e023      	b.n	8000f48 <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f00:	bf00      	nop
 8000f02:	2101      	movs	r1, #1
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f06:	f003 fae5 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f8      	beq.n	8000f02 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);
 8000f10:	2028      	movs	r0, #40	; 0x28
 8000f12:	f000 fedf 	bl	8001cd4 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]

		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f20:	f003 fad8 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f32:	bf00      	nop
 8000f34:	2101      	movs	r1, #1
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <DHT11_rx_Data+0x68>)
 8000f38:	f003 facc 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d0f8      	beq.n	8000f34 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	ddd8      	ble.n	8000f00 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020000 	.word	0x40020000

08000f5c <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f60:	bf00      	nop
 8000f62:	2101      	movs	r1, #1
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f66:	f003 fab5 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d0f8      	beq.n	8000f62 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f70:	bf00      	nop
 8000f72:	2101      	movs	r1, #1
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f76:	f003 faad 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f8      	beq.n	8000f72 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f80:	bf00      	nop
 8000f82:	2101      	movs	r1, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <DHT11_dumi_read+0x38>)
 8000f86:	f003 faa5 	bl	80044d4 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d0f8      	beq.n	8000f82 <DHT11_dumi_read+0x26>
	return;
 8000f90:	bf00      	nop
}
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020000 	.word	0x40020000

08000f98 <lcd_display_mode_select>:

extern RTC_HandleTypeDef hrtc;
RTC_TimeTypeDef mTime;	// time information

void lcd_display_mode_select(void)
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af02      	add	r7, sp, #8
	char lcd_buff[40];

	if (get_button(GPIOC, GPIO_PIN_13, 4) == BUTTON_PRESS)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	4823      	ldr	r0, [pc, #140]	; (8001034 <lcd_display_mode_select+0x9c>)
 8000fa6:	f000 f84f 	bl	8001048 <get_button>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d13d      	bne.n	800102c <lcd_display_mode_select+0x94>
	{
		lcd_command(CLEAR_DISPLAY);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fa0b 	bl	80013cc <lcd_command>
		lcd_display_mode_flag++;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fc0:	701a      	strb	r2, [r3, #0]
		lcd_display_mode_flag %= 4;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fce:	701a      	strb	r2, [r3, #0]
		if (lcd_display_mode_flag == 3)
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <lcd_display_mode_select+0xa0>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d129      	bne.n	800102c <lcd_display_mode_select+0x94>
		{
			HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BCD);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4918      	ldr	r1, [pc, #96]	; (800103c <lcd_display_mode_select+0xa4>)
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <lcd_display_mode_select+0xa8>)
 8000fde:	f005 f811 	bl	8006004 <HAL_RTC_GetTime>
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <lcd_display_mode_select+0xa4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fa9e 	bl	8001528 <bin2dec>
 8000fec:	4604      	mov	r4, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <lcd_display_mode_select+0xa4>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fa98 	bl	8001528 <bin2dec>
 8000ff8:	4605      	mov	r5, r0
					bin2dec(mTime.Hours), bin2dec(mTime.Minutes), bin2dec(mTime.Seconds));
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <lcd_display_mode_select+0xa4>)
 8000ffc:	789b      	ldrb	r3, [r3, #2]
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fa92 	bl	8001528 <bin2dec>
 8001004:	4603      	mov	r3, r0
 8001006:	4638      	mov	r0, r7
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	462b      	mov	r3, r5
 800100c:	4622      	mov	r2, r4
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <lcd_display_mode_select+0xac>)
 8001010:	f008 fb54 	bl	80096bc <siprintf>
			move_cursor(1,0);
 8001014:	2100      	movs	r1, #0
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fa6e 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 800101c:	463b      	mov	r3, r7
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fa55 	bl	80014ce <lcd_string>
			move_cursor(1,6);	// 시간 정보 field 로 커서를 이동
 8001024:	2106      	movs	r1, #6
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fa66 	bl	80014f8 <move_cursor>
		}
	}
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	40020800 	.word	0x40020800
 8001038:	200000c8 	.word	0x200000c8
 800103c:	200000cc 	.word	0x200000cc
 8001040:	200003bc 	.word	0x200003bc
 8001044:	0800ab18 	.word	0x0800ab18

08001048 <get_button>:
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f003 fa39 	bl	80044d4 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10d      	bne.n	8001088 <get_button+0x40>
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <get_button+0x6c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 8001076:	2050      	movs	r0, #80	; 0x50
 8001078:	f002 fb90 	bl	800379c <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <get_button+0x6c>)
 8001080:	2100      	movs	r1, #0
 8001082:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8001084:	2301      	movs	r3, #1
 8001086:	e011      	b.n	80010ac <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d10d      	bne.n	80010aa <get_button+0x62>
 800108e:	787b      	ldrb	r3, [r7, #1]
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <get_button+0x6c>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 8001098:	201e      	movs	r0, #30
 800109a:	f002 fb7f 	bl	800379c <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 800109e:	787b      	ldrb	r3, [r7, #1]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <get_button+0x6c>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <get_button+0x64>
	}
	return BUTTON_RELEASE;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000004 	.word	0x20000004

080010b8 <dcmotor_pwm_control>:
uint16_t CCR_UP_Value = 0;	// PWM UP control
uint16_t CCR_DOWN_Value = 0;	// PWM DOWN control
uint16_t forward_back_dcmotor = 0;	//

void dcmotor_pwm_control(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// start/stop : button0
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c2:	4851      	ldr	r0, [pc, #324]	; (8001208 <dcmotor_pwm_control+0x150>)
 80010c4:	f7ff ffc0 	bl	8001048 <get_button>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d122      	bne.n	8001114 <dcmotor_pwm_control+0x5c>
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);	// LD1
 80010ce:	2101      	movs	r1, #1
 80010d0:	484e      	ldr	r0, [pc, #312]	; (800120c <dcmotor_pwm_control+0x154>)
 80010d2:	f003 fa30 	bl	8004536 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	484a      	ldr	r0, [pc, #296]	; (8001208 <dcmotor_pwm_control+0x150>)
 80010de:	f003 fa11 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4847      	ldr	r0, [pc, #284]	; (8001208 <dcmotor_pwm_control+0x150>)
 80010ea:	f003 fa0b 	bl	8004504 <HAL_GPIO_WritePin>

		if (!pwm_start_flag)
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <dcmotor_pwm_control+0x158>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d107      	bne.n	8001106 <dcmotor_pwm_control+0x4e>
		{
			pwm_start_flag = 1;
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <dcmotor_pwm_control+0x158>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010fc:	2100      	movs	r1, #0
 80010fe:	4845      	ldr	r0, [pc, #276]	; (8001214 <dcmotor_pwm_control+0x15c>)
 8001100:	f005 fa7e 	bl	8006600 <HAL_TIM_PWM_Start>
 8001104:	e006      	b.n	8001114 <dcmotor_pwm_control+0x5c>
		}
		else
		{
			pwm_start_flag = 0;
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <dcmotor_pwm_control+0x158>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800110c:	2100      	movs	r1, #0
 800110e:	4841      	ldr	r0, [pc, #260]	; (8001214 <dcmotor_pwm_control+0x15c>)
 8001110:	f005 fb3e 	bl	8006790 <HAL_TIM_PWM_Stop>
		}

	}
	// speed-up : button1
	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111a:	483b      	ldr	r0, [pc, #236]	; (8001208 <dcmotor_pwm_control+0x150>)
 800111c:	f7ff ff94 	bl	8001048 <get_button>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <dcmotor_pwm_control+0xa6>
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);	// LED2
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	4838      	ldr	r0, [pc, #224]	; (800120c <dcmotor_pwm_control+0x154>)
 800112a:	f003 fa04 	bl	8004536 <HAL_GPIO_TogglePin>
		CCR_UP_Value = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <dcmotor_pwm_control+0x15c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <dcmotor_pwm_control+0x160>)
 8001138:	801a      	strh	r2, [r3, #0]
		CCR_UP_Value += 10;
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <dcmotor_pwm_control+0x160>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	330a      	adds	r3, #10
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b35      	ldr	r3, [pc, #212]	; (8001218 <dcmotor_pwm_control+0x160>)
 8001144:	801a      	strh	r2, [r3, #0]
		if (CCR_UP_Value > 100) CCR_UP_Value = 100;
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <dcmotor_pwm_control+0x160>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d902      	bls.n	8001154 <dcmotor_pwm_control+0x9c>
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <dcmotor_pwm_control+0x160>)
 8001150:	2264      	movs	r2, #100	; 0x64
 8001152:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR_UP_Value);
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <dcmotor_pwm_control+0x160>)
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <dcmotor_pwm_control+0x15c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	635a      	str	r2, [r3, #52]	; 0x34

	}

	// speed-down : button1
	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800115e:	2202      	movs	r2, #2
 8001160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001164:	4828      	ldr	r0, [pc, #160]	; (8001208 <dcmotor_pwm_control+0x150>)
 8001166:	f7ff ff6f 	bl	8001048 <get_button>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d11c      	bne.n	80011aa <dcmotor_pwm_control+0xf2>
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);	// LED14
 8001170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001174:	4825      	ldr	r0, [pc, #148]	; (800120c <dcmotor_pwm_control+0x154>)
 8001176:	f003 f9de 	bl	8004536 <HAL_GPIO_TogglePin>
		CCR_DOWN_Value = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_1);
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <dcmotor_pwm_control+0x15c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <dcmotor_pwm_control+0x164>)
 8001184:	801a      	strh	r2, [r3, #0]
		CCR_DOWN_Value -= 10;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <dcmotor_pwm_control+0x164>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3b0a      	subs	r3, #10
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <dcmotor_pwm_control+0x164>)
 8001190:	801a      	strh	r2, [r3, #0]
		if (CCR_DOWN_Value < 60) CCR_DOWN_Value = 60;
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <dcmotor_pwm_control+0x164>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	2b3b      	cmp	r3, #59	; 0x3b
 8001198:	d802      	bhi.n	80011a0 <dcmotor_pwm_control+0xe8>
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <dcmotor_pwm_control+0x164>)
 800119c:	223c      	movs	r2, #60	; 0x3c
 800119e:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR_DOWN_Value);
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <dcmotor_pwm_control+0x164>)
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <dcmotor_pwm_control+0x15c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34

	}

	// forward_back : button3
	if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80011aa:	2203      	movs	r2, #3
 80011ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <dcmotor_pwm_control+0x150>)
 80011b2:	f7ff ff49 	bl	8001048 <get_button>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d122      	bne.n	8001202 <dcmotor_pwm_control+0x14a>
	{
		if(!forward_back_dcmotor)
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <dcmotor_pwm_control+0x168>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10f      	bne.n	80011e4 <dcmotor_pwm_control+0x12c>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	480f      	ldr	r0, [pc, #60]	; (8001208 <dcmotor_pwm_control+0x150>)
 80011cc:	f003 f99a 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <dcmotor_pwm_control+0x150>)
 80011d8:	f003 f994 	bl	8004504 <HAL_GPIO_WritePin>
			forward_back_dcmotor = 1;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <dcmotor_pwm_control+0x168>)
 80011de:	2201      	movs	r2, #1
 80011e0:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
			forward_back_dcmotor = 0;
		}
	}
}
 80011e2:	e00e      	b.n	8001202 <dcmotor_pwm_control+0x14a>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <dcmotor_pwm_control+0x150>)
 80011ec:	f003 f98a 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <dcmotor_pwm_control+0x150>)
 80011f8:	f003 f984 	bl	8004504 <HAL_GPIO_WritePin>
			forward_back_dcmotor = 0;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <dcmotor_pwm_control+0x168>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	40020400 	.word	0x40020400
 8001210:	200000e0 	.word	0x200000e0
 8001214:	2000046c 	.word	0x2000046c
 8001218:	200000e2 	.word	0x200000e2
 800121c:	200000e4 	.word	0x200000e4
 8001220:	200000e6 	.word	0x200000e6

08001224 <FND_update>:
#endif
	}
}

void FND_update(unsigned int value)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <FND_update+0xac>)
 8001230:	fba3 2301 	umull	r2, r3, r3, r1
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	1aca      	subs	r2, r1, r3
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <FND_update+0xb0>)
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <FND_update+0xb4>)
 800124a:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10];
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <FND_update+0xac>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	08d9      	lsrs	r1, r3, #3
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <FND_update+0xac>)
 8001258:	fba3 2301 	umull	r2, r3, r3, r1
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	1aca      	subs	r2, r1, r3
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <FND_update+0xb0>)
 800126a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <FND_update+0xb4>)
 8001272:	805a      	strh	r2, [r3, #2]
	FND[2] = FND_font[value / 100 % 10];
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <FND_update+0xb8>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0959      	lsrs	r1, r3, #5
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <FND_update+0xac>)
 8001280:	fba3 2301 	umull	r2, r3, r3, r1
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	1aca      	subs	r2, r1, r3
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <FND_update+0xb0>)
 8001292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <FND_update+0xb4>)
 800129a:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[value / 1000 % 10];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <FND_update+0xbc>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	0999      	lsrs	r1, r3, #6
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <FND_update+0xac>)
 80012a8:	fba3 2301 	umull	r2, r3, r3, r1
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	1aca      	subs	r2, r1, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <FND_update+0xb0>)
 80012ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <FND_update+0xb4>)
 80012c2:	80da      	strh	r2, [r3, #6]

	return;
 80012c4:	bf00      	nop
}
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	20000014 	.word	0x20000014
 80012d8:	200000e8 	.word	0x200000e8
 80012dc:	51eb851f 	.word	0x51eb851f
 80012e0:	10624dd3 	.word	0x10624dd3

080012e4 <FND4digit_off>:
void FND4digit_off(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80012ee:	4808      	ldr	r0, [pc, #32]	; (8001310 <FND4digit_off+0x2c>)
 80012f0:	f003 f908 	bl	8004504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <FND4digit_off+0x30>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <FND4digit_off+0x34>)
 8001306:	f003 f8fd 	bl	8004504 <HAL_GPIO_WritePin>
#endif
	return;
 800130a:	bf00      	nop
}
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020800 	.word	0x40020800
 8001314:	20000014 	.word	0x20000014
 8001318:	40020400 	.word	0x40020400

0800131c <fnd4digit_sec_clock>:
#endif
	return;
}

void fnd4digit_sec_clock(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	static unsigned int value=0;   // 1초가 되었을때 up count
	static unsigned int msec=0;    // ms counter
	static int i=0;     // FND position indicator

	if (fnd1ms_counter >= 2)   // 2ms reached
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <fnd4digit_sec_clock+0x90>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	dd3f      	ble.n	80013a8 <fnd4digit_sec_clock+0x8c>
	{
		fnd1ms_counter=0;
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <fnd4digit_sec_clock+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
		msec += 2;   // 2ms
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <fnd4digit_sec_clock+0x94>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3302      	adds	r3, #2
 8001334:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <fnd4digit_sec_clock+0x94>)
 8001336:	6013      	str	r3, [r2, #0]

		if (msec > 1000)   // 1000ms reached
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <fnd4digit_sec_clock+0x94>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001340:	d90c      	bls.n	800135c <fnd4digit_sec_clock+0x40>
		{
			msec = 0;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <fnd4digit_sec_clock+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
			value++;       // sec count를 증가
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <fnd4digit_sec_clock+0x98>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <fnd4digit_sec_clock+0x98>)
 8001350:	6013      	str	r3, [r2, #0]
			FND_update(value);
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <fnd4digit_sec_clock+0x98>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff64 	bl	8001224 <FND_update>
		}

		FND4digit_off();
 800135c:	f7ff ffc2 	bl	80012e4 <FND4digit_off>

#if 0 // common 애노우드  WCN4-
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
#else // common 캐소우드 CL5642AH30
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <fnd4digit_sec_clock+0x9c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <fnd4digit_sec_clock+0xa0>)
 8001366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <fnd4digit_sec_clock+0xa4>)
 8001370:	f003 f8c8 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <fnd4digit_sec_clock+0x9c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <fnd4digit_sec_clock+0xa8>)
 800137a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800137e:	2201      	movs	r2, #1
 8001380:	4619      	mov	r1, r3
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <fnd4digit_sec_clock+0xac>)
 8001384:	f003 f8be 	bl	8004504 <HAL_GPIO_WritePin>
#endif
			i++;   // 다음 display할 FND를 가리킨다.
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <fnd4digit_sec_clock+0x9c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <fnd4digit_sec_clock+0x9c>)
 8001390:	6013      	str	r3, [r2, #0]
			i %= 4;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <fnd4digit_sec_clock+0x9c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	425a      	negs	r2, r3
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	bf58      	it	pl
 80013a2:	4253      	negpl	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <fnd4digit_sec_clock+0x9c>)
 80013a6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
			HAL_Delay(2);
		}
#endif
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000b30 	.word	0x20000b30
 80013b0:	200000f0 	.word	0x200000f0
 80013b4:	200000f4 	.word	0x200000f4
 80013b8:	200000f8 	.word	0x200000f8
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	40020800 	.word	0x40020800
 80013c4:	200000e8 	.word	0x200000e8
 80013c8:	40020400 	.word	0x40020400

080013cc <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f023 030f 	bic.w	r3, r3, #15
 80013dc:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	f043 030c 	orr.w	r3, r3, #12
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	f043 030c 	orr.w	r3, r3, #12
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	b2db      	uxtb	r3, r3
 800140a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800140c:	bf00      	nop
 800140e:	f107 0208 	add.w	r2, r7, #8
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2304      	movs	r3, #4
 8001418:	214e      	movs	r1, #78	; 0x4e
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <lcd_command+0x64>)
 800141c:	f003 f9ea 	bl	80047f4 <HAL_I2C_Master_Transmit>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f3      	bne.n	800140e <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8001426:	bf00      	nop
}
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000368 	.word	0x20000368

08001434 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af02      	add	r7, sp, #8
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f023 030f 	bic.w	r3, r3, #15
 8001444:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	f043 030d 	orr.w	r3, r3, #13
 8001452:	b2db      	uxtb	r3, r3
 8001454:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	f043 0309 	orr.w	r3, r3, #9
 800145c:	b2db      	uxtb	r3, r3
 800145e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	f043 030d 	orr.w	r3, r3, #13
 8001466:	b2db      	uxtb	r3, r3
 8001468:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	f043 0309 	orr.w	r3, r3, #9
 8001470:	b2db      	uxtb	r3, r3
 8001472:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001474:	bf00      	nop
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	2364      	movs	r3, #100	; 0x64
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2304      	movs	r3, #4
 8001480:	214e      	movs	r1, #78	; 0x4e
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <lcd_data+0x64>)
 8001484:	f003 f9b6 	bl	80047f4 <HAL_I2C_Master_Transmit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f3      	bne.n	8001476 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800148e:	bf00      	nop
}
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000368 	.word	0x20000368

0800149c <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80014a0:	2033      	movs	r0, #51	; 0x33
 80014a2:	f7ff ff93 	bl	80013cc <lcd_command>
	lcd_command(0x32);
 80014a6:	2032      	movs	r0, #50	; 0x32
 80014a8:	f7ff ff90 	bl	80013cc <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80014ac:	2028      	movs	r0, #40	; 0x28
 80014ae:	f7ff ff8d 	bl	80013cc <lcd_command>
	lcd_command(DISPLAY_ON);
 80014b2:	200c      	movs	r0, #12
 80014b4:	f7ff ff8a 	bl	80013cc <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80014b8:	2006      	movs	r0, #6
 80014ba:	f7ff ff87 	bl	80013cc <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff ff84 	bl	80013cc <lcd_command>
	HAL_Delay(2);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f002 f969 	bl	800379c <HAL_Delay>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}

080014ce <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	while(*str)
 80014d6:	e006      	b.n	80014e6 <lcd_string+0x18>
	{
		lcd_data(*str++);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ffa7 	bl	8001434 <lcd_data>
	while(*str)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f4      	bne.n	80014d8 <lcd_string+0xa>
	}
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	b2da      	uxtb	r2, r3
 800150e:	79bb      	ldrb	r3, [r7, #6]
 8001510:	4313      	orrs	r3, r2
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff56 	bl	80013cc <lcd_command>
	return;
 8001520:	bf00      	nop
}
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <bin2dec>:
// 7654 3210
// 0010 0011
// 00000010
// STM32의 RTC로 부터 날짜 & 시각 정보를 읽어 오는 함수
unsigned char bin2dec(unsigned char byte)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;
	low = byte & 0x0f;	// 하위 4bit(low nibble)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10;	// 상위 4bit(high nibble)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4413      	add	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	73bb      	strb	r3, [r7, #14]

	return high + low;
 800154a:	7bba      	ldrb	r2, [r7, #14]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	4413      	add	r3, r2
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <dec2bin>:
// decimal --> BCD ex) 23: 0001 0111
unsigned char dec2bin(unsigned char byte)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	unsigned char high, low;

	high = (byte / 10) << 4;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <dec2bin+0x44>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	73fb      	strb	r3, [r7, #15]
	low = byte % 10;
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <dec2bin+0x44>)
 800157e:	fba3 1302 	umull	r1, r3, r3, r2
 8001582:	08d9      	lsrs	r1, r3, #3
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	4413      	add	r3, r2
 8001596:	b2db      	uxtb	r3, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	cccccccd 	.word	0xcccccccd

080015a8 <get_rtc>:
void get_rtc(void)
{
 80015a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015ac:	b08f      	sub	sp, #60	; 0x3c
 80015ae:	af04      	add	r7, sp, #16
	static RTC_TimeTypeDef oldTime;	// 이전 시각 정보를 가지고 있기 위함이다.
	char lcd_buff[40];

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80015b0:	2201      	movs	r2, #1
 80015b2:	494b      	ldr	r1, [pc, #300]	; (80016e0 <get_rtc+0x138>)
 80015b4:	484b      	ldr	r0, [pc, #300]	; (80016e4 <get_rtc+0x13c>)
 80015b6:	f004 fe07 	bl	80061c8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80015ba:	2201      	movs	r2, #1
 80015bc:	494a      	ldr	r1, [pc, #296]	; (80016e8 <get_rtc+0x140>)
 80015be:	4849      	ldr	r0, [pc, #292]	; (80016e4 <get_rtc+0x13c>)
 80015c0:	f004 fd20 	bl	8006004 <HAL_RTC_GetTime>

	if (oldTime.Seconds != sTime.Seconds)
 80015c4:	4b49      	ldr	r3, [pc, #292]	; (80016ec <get_rtc+0x144>)
 80015c6:	789a      	ldrb	r2, [r3, #2]
 80015c8:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <get_rtc+0x140>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d07d      	beq.n	80016cc <get_rtc+0x124>
	{
		// YYYY-MM-DD HH:mm:ss
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 80015d0:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <get_rtc+0x138>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ffa7 	bl	8001528 <bin2dec>
 80015da:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015dc:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <get_rtc+0x138>)
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff9f 	bl	8001528 <bin2dec>
 80015ea:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015ec:	4698      	mov	r8, r3
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 80015ee:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <get_rtc+0x138>)
 80015f0:	789b      	ldrb	r3, [r3, #2]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff98 	bl	8001528 <bin2dec>
 80015f8:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015fa:	4699      	mov	r9, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <get_rtc+0x140>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff91 	bl	8001528 <bin2dec>
 8001606:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001608:	461d      	mov	r5, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <get_rtc+0x140>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff8a 	bl	8001528 <bin2dec>
 8001614:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001616:	461e      	mov	r6, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <get_rtc+0x140>)
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff83 	bl	8001528 <bin2dec>
 8001622:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	9601      	str	r6, [sp, #4]
 8001628:	9500      	str	r5, [sp, #0]
 800162a:	464b      	mov	r3, r9
 800162c:	4642      	mov	r2, r8
 800162e:	4621      	mov	r1, r4
 8001630:	482f      	ldr	r0, [pc, #188]	; (80016f0 <get_rtc+0x148>)
 8001632:	f007 ffb5 	bl	80095a0 <iprintf>

		if (lcd_display_mode_flag==0)
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <get_rtc+0x14c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d146      	bne.n	80016cc <get_rtc+0x124>
		{
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <get_rtc+0x138>)
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff70 	bl	8001528 <bin2dec>
 8001648:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800164a:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <get_rtc+0x138>)
 8001650:	785b      	ldrb	r3, [r3, #1]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff68 	bl	8001528 <bin2dec>
 8001658:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 800165a:	461d      	mov	r5, r3
					bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date));
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <get_rtc+0x138>)
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff61 	bl	8001528 <bin2dec>
 8001666:	4603      	mov	r3, r0
			sprintf(lcd_buff, "DATE:%04d-%02d-%02d",
 8001668:	4638      	mov	r0, r7
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	462b      	mov	r3, r5
 800166e:	4622      	mov	r2, r4
 8001670:	4921      	ldr	r1, [pc, #132]	; (80016f8 <get_rtc+0x150>)
 8001672:	f008 f823 	bl	80096bc <siprintf>
			move_cursor(0, 0);
 8001676:	2100      	movs	r1, #0
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff ff3d 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 800167e:	463b      	mov	r3, r7
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff24 	bl	80014ce <lcd_string>
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <get_rtc+0x140>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff4c 	bl	8001528 <bin2dec>
 8001690:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 8001692:	461c      	mov	r4, r3
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <get_rtc+0x140>)
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff45 	bl	8001528 <bin2dec>
 800169e:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80016a0:	461d      	mov	r5, r3
					bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <get_rtc+0x140>)
 80016a4:	789b      	ldrb	r3, [r3, #2]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff3e 	bl	8001528 <bin2dec>
 80016ac:	4603      	mov	r3, r0
			sprintf(lcd_buff, "TIME:%02d:%02d:%02d",
 80016ae:	4638      	mov	r0, r7
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	462b      	mov	r3, r5
 80016b4:	4622      	mov	r2, r4
 80016b6:	4911      	ldr	r1, [pc, #68]	; (80016fc <get_rtc+0x154>)
 80016b8:	f008 f800 	bl	80096bc <siprintf>
			move_cursor(1, 0);
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ff1a 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 80016c4:	463b      	mov	r3, r7
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff01 	bl	80014ce <lcd_string>
		}
	}
	oldTime.Seconds=sTime.Seconds;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <get_rtc+0x140>)
 80016ce:	789a      	ldrb	r2, [r3, #2]
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <get_rtc+0x144>)
 80016d2:	709a      	strb	r2, [r3, #2]
}
 80016d4:	bf00      	nop
 80016d6:	372c      	adds	r7, #44	; 0x2c
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016de:	bf00      	nop
 80016e0:	20000110 	.word	0x20000110
 80016e4:	200003bc 	.word	0x200003bc
 80016e8:	200000fc 	.word	0x200000fc
 80016ec:	20000114 	.word	0x20000114
 80016f0:	0800ab2c 	.word	0x0800ab2c
 80016f4:	200000c8 	.word	0x200000c8
 80016f8:	0800ab4c 	.word	0x0800ab4c
 80016fc:	0800ab60 	.word	0x0800ab60

08001700 <set_rtc>:
// setrtc231016103800
//       678901234567 번방
void set_rtc(char *date_time)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4];	// date
	char hh[4], min[4], ss[4];	// time

	strncpy(yy, date_time+6, 2);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	1d99      	adds	r1, r3, #6
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2202      	movs	r2, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f008 f806 	bl	8009724 <strncpy>
	strncpy(mm, date_time+8, 2);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0108 	add.w	r1, r3, #8
 800171e:	f107 0318 	add.w	r3, r7, #24
 8001722:	2202      	movs	r2, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f007 fffd 	bl	8009724 <strncpy>
	strncpy(dd, date_time+10, 2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 010a 	add.w	r1, r3, #10
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2202      	movs	r2, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fff4 	bl	8009724 <strncpy>

	strncpy(hh, date_time+12, 2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f103 010c 	add.w	r1, r3, #12
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2202      	movs	r2, #2
 8001748:	4618      	mov	r0, r3
 800174a:	f007 ffeb 	bl	8009724 <strncpy>
	strncpy(min, date_time+14, 2);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f103 010e 	add.w	r1, r3, #14
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2202      	movs	r2, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f007 ffe2 	bl	8009724 <strncpy>
	strncpy(ss, date_time+16, 2);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f103 0110 	add.w	r1, r3, #16
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2202      	movs	r2, #2
 800176c:	4618      	mov	r0, r3
 800176e:	f007 ffd9 	bl	8009724 <strncpy>

	// ascii --> int --> bcd
	sDate.Year = dec2bin(atoi(yy));
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4618      	mov	r0, r3
 8001778:	f007 fedc 	bl	8009534 <atoi>
 800177c:	4603      	mov	r3, r0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff feed 	bl	8001560 <dec2bin>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <set_rtc+0x138>)
 800178c:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	4618      	mov	r0, r3
 8001794:	f007 fece 	bl	8009534 <atoi>
 8001798:	4603      	mov	r3, r0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fedf 	bl	8001560 <dec2bin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <set_rtc+0x138>)
 80017a8:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 fec0 	bl	8009534 <atoi>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fed1 	bl	8001560 <dec2bin>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <set_rtc+0x138>)
 80017c4:	709a      	strb	r2, [r3, #2]

	sTime.Hours = dec2bin(atoi(hh));
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 feb2 	bl	8009534 <atoi>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fec3 	bl	8001560 <dec2bin>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <set_rtc+0x13c>)
 80017e0:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fea4 	bl	8009534 <atoi>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff feb5 	bl	8001560 <dec2bin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <set_rtc+0x13c>)
 80017fc:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f007 fe96 	bl	8009534 <atoi>
 8001808:	4603      	mov	r3, r0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fea7 	bl	8001560 <dec2bin>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <set_rtc+0x13c>)
 8001818:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800181a:	2201      	movs	r2, #1
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <set_rtc+0x138>)
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <set_rtc+0x140>)
 8001820:	f004 fc4e 	bl	80060c0 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001824:	2201      	movs	r2, #1
 8001826:	4905      	ldr	r1, [pc, #20]	; (800183c <set_rtc+0x13c>)
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <set_rtc+0x140>)
 800182a:	f004 fb51 	bl	8005ed0 <HAL_RTC_SetTime>

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000110 	.word	0x20000110
 800183c:	200000fc 	.word	0x200000fc
 8001840:	200003bc 	.word	0x200003bc

08001844 <set_time_button_ui>:
// button2 : 초를 변경 하는 버튼 00~59 (up counter)
// button3 : 변경 완료 현재까지 변경된 내용을 저장
//           HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);

void set_time_button_ui(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af02      	add	r7, sp, #8
	char lcd_buff[40];
	static int sel_hour=0, sel_min=0, sel_sec=0;



	if (lcd_display_mode_flag == 3)
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <set_time_button_ui+0x1a4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b03      	cmp	r3, #3
 8001850:	f040 80c6 	bne.w	80019e0 <set_time_button_ui+0x19c>
	{
		sprintf(lcd_buff," SET:%02d:%02d:%02d",sel_hour,sel_min,sel_sec);
 8001854:	4b65      	ldr	r3, [pc, #404]	; (80019ec <set_time_button_ui+0x1a8>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <set_time_button_ui+0x1ac>)
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <set_time_button_ui+0x1b0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4638      	mov	r0, r7
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	460b      	mov	r3, r1
 8001866:	4964      	ldr	r1, [pc, #400]	; (80019f8 <set_time_button_ui+0x1b4>)
 8001868:	f007 ff28 	bl	80096bc <siprintf>
		move_cursor(0,0);
 800186c:	2100      	movs	r1, #0
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fe42 	bl	80014f8 <move_cursor>
		lcd_string(lcd_buff);
 8001874:	463b      	mov	r3, r7
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe29 	bl	80014ce <lcd_string>

		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001882:	485e      	ldr	r0, [pc, #376]	; (80019fc <set_time_button_ui+0x1b8>)
 8001884:	f7ff fbe0 	bl	8001048 <get_button>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d122      	bne.n	80018d4 <set_time_button_ui+0x90>
		{
			// 시간정보 modify
			sel_hour++;
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <set_time_button_ui+0x1a8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a55      	ldr	r2, [pc, #340]	; (80019ec <set_time_button_ui+0x1a8>)
 8001896:	6013      	str	r3, [r2, #0]
			sel_hour %= 24;
 8001898:	4b54      	ldr	r3, [pc, #336]	; (80019ec <set_time_button_ui+0x1a8>)
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <set_time_button_ui+0x1bc>)
 800189e:	fb83 2301 	smull	r2, r3, r3, r1
 80018a2:	109a      	asrs	r2, r3, #2
 80018a4:	17cb      	asrs	r3, r1, #31
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1aca      	subs	r2, r1, r3
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <set_time_button_ui+0x1a8>)
 80018b4:	601a      	str	r2, [r3, #0]
			sprintf(lcd_buff, "%02d", sel_hour);
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <set_time_button_ui+0x1a8>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	463b      	mov	r3, r7
 80018bc:	4951      	ldr	r1, [pc, #324]	; (8001a04 <set_time_button_ui+0x1c0>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f007 fefc 	bl	80096bc <siprintf>
			move_cursor(0, 5);
 80018c4:	2105      	movs	r1, #5
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff fe16 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 80018cc:	463b      	mov	r3, r7
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fdfd 	bl	80014ce <lcd_string>
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	4848      	ldr	r0, [pc, #288]	; (80019fc <set_time_button_ui+0x1b8>)
 80018dc:	f7ff fbb4 	bl	8001048 <get_button>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d123      	bne.n	800192e <set_time_button_ui+0xea>
		{
			// 분 정보 modify
			sel_min++;
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <set_time_button_ui+0x1ac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a40      	ldr	r2, [pc, #256]	; (80019f0 <set_time_button_ui+0x1ac>)
 80018ee:	6013      	str	r3, [r2, #0]
			sel_min %= 60;
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <set_time_button_ui+0x1ac>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <set_time_button_ui+0x1c4>)
 80018f6:	fb83 1302 	smull	r1, r3, r3, r2
 80018fa:	4413      	add	r3, r2
 80018fc:	1159      	asrs	r1, r3, #5
 80018fe:	17d3      	asrs	r3, r2, #31
 8001900:	1ac9      	subs	r1, r1, r3
 8001902:	460b      	mov	r3, r1
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	1ad1      	subs	r1, r2, r3
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <set_time_button_ui+0x1ac>)
 800190e:	6019      	str	r1, [r3, #0]
			sprintf(lcd_buff, "%02d", sel_min);
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <set_time_button_ui+0x1ac>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	463b      	mov	r3, r7
 8001916:	493b      	ldr	r1, [pc, #236]	; (8001a04 <set_time_button_ui+0x1c0>)
 8001918:	4618      	mov	r0, r3
 800191a:	f007 fecf 	bl	80096bc <siprintf>
			move_cursor(0, 8);
 800191e:	2108      	movs	r1, #8
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fde9 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 8001926:	463b      	mov	r3, r7
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fdd0 	bl	80014ce <lcd_string>
		}
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 800192e:	2202      	movs	r2, #2
 8001930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001934:	4831      	ldr	r0, [pc, #196]	; (80019fc <set_time_button_ui+0x1b8>)
 8001936:	f7ff fb87 	bl	8001048 <get_button>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d123      	bne.n	8001988 <set_time_button_ui+0x144>
		{
			// 초 정보 modify
			sel_sec++;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <set_time_button_ui+0x1b0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <set_time_button_ui+0x1b0>)
 8001948:	6013      	str	r3, [r2, #0]
			sel_sec %= 60;
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <set_time_button_ui+0x1b0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <set_time_button_ui+0x1c4>)
 8001950:	fb83 1302 	smull	r1, r3, r3, r2
 8001954:	4413      	add	r3, r2
 8001956:	1159      	asrs	r1, r3, #5
 8001958:	17d3      	asrs	r3, r2, #31
 800195a:	1ac9      	subs	r1, r1, r3
 800195c:	460b      	mov	r3, r1
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a5b      	subs	r3, r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	1ad1      	subs	r1, r2, r3
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <set_time_button_ui+0x1b0>)
 8001968:	6019      	str	r1, [r3, #0]
			sprintf(lcd_buff, "%02d", sel_sec);
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <set_time_button_ui+0x1b0>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	463b      	mov	r3, r7
 8001970:	4924      	ldr	r1, [pc, #144]	; (8001a04 <set_time_button_ui+0x1c0>)
 8001972:	4618      	mov	r0, r3
 8001974:	f007 fea2 	bl	80096bc <siprintf>
			move_cursor(0, 11);
 8001978:	210b      	movs	r1, #11
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fdbc 	bl	80014f8 <move_cursor>
			lcd_string(lcd_buff);
 8001980:	463b      	mov	r3, r7
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fda3 	bl	80014ce <lcd_string>
		}
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8001988:	2203      	movs	r2, #3
 800198a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198e:	481b      	ldr	r0, [pc, #108]	; (80019fc <set_time_button_ui+0x1b8>)
 8001990:	f7ff fb5a 	bl	8001048 <get_button>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d122      	bne.n	80019e0 <set_time_button_ui+0x19c>
		{
			// 완료 버튼
			sTime.Hours = dec2bin(sel_hour);
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <set_time_button_ui+0x1a8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fddd 	bl	8001560 <dec2bin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <set_time_button_ui+0x1c8>)
 80019ac:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = dec2bin(sel_min);
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <set_time_button_ui+0x1ac>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fdd3 	bl	8001560 <dec2bin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <set_time_button_ui+0x1c8>)
 80019c0:	705a      	strb	r2, [r3, #1]
			sTime.Seconds = dec2bin(sel_sec);
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <set_time_button_ui+0x1b0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fdc9 	bl	8001560 <dec2bin>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <set_time_button_ui+0x1c8>)
 80019d4:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80019d6:	2201      	movs	r2, #1
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <set_time_button_ui+0x1c8>)
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <set_time_button_ui+0x1cc>)
 80019dc:	f004 fa78 	bl	8005ed0 <HAL_RTC_SetTime>
			lcd_display_mode_flag == 0;
		}

	}
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200000c8 	.word	0x200000c8
 80019ec:	20000128 	.word	0x20000128
 80019f0:	2000012c 	.word	0x2000012c
 80019f4:	20000130 	.word	0x20000130
 80019f8:	0800ab74 	.word	0x0800ab74
 80019fc:	40021000 	.word	0x40021000
 8001a00:	2aaaaaab 	.word	0x2aaaaaab
 8001a04:	0800ab88 	.word	0x0800ab88
 8001a08:	88888889 	.word	0x88888889
 8001a0c:	200000fc 	.word	0x200000fc
 8001a10:	200003bc 	.word	0x200003bc

08001a14 <flower_on>:
#endif
	}
}

void flower_on()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	21ff      	movs	r1, #255	; 0xff
 8001a1e:	4814      	ldr	r0, [pc, #80]	; (8001a70 <flower_on+0x5c>)
 8001a20:	f002 fd70 	bl	8004504 <HAL_GPIO_WritePin>

	for(int i=0; i < 4 ; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	e01a      	b.n	8001a60 <flower_on+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, GPIO_PIN_SET);
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2201      	movs	r2, #1
 8001a36:	4619      	mov	r1, r3
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <flower_on+0x5c>)
 8001a3a:	f002 fd63 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, GPIO_PIN_SET);
 8001a3e:	2208      	movs	r2, #8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	fa42 f303 	asr.w	r3, r2, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <flower_on+0x5c>)
 8001a4e:	f002 fd59 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001a52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a56:	f001 fea1 	bl	800379c <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	dde1      	ble.n	8001a2a <flower_on+0x16>
	}
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40020c00 	.word	0x40020c00

08001a74 <flower_off>:


void flower_off()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	21ff      	movs	r1, #255	; 0xff
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <flower_off+0x5c>)
 8001a80:	f002 fd40 	bl	8004504 <HAL_GPIO_WritePin>


	for(int i=0; i < 4 ; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	e01a      	b.n	8001ac0 <flower_off+0x4c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, GPIO_PIN_RESET);
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	fa42 f303 	asr.w	r3, r2, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <flower_off+0x5c>)
 8001a9a:	f002 fd33 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, GPIO_PIN_RESET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <flower_off+0x5c>)
 8001aae:	f002 fd29 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8001ab2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ab6:	f001 fe71 	bl	800379c <HAL_Delay>
	for(int i=0; i < 4 ; i++)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	dde1      	ble.n	8001a8a <flower_off+0x16>
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40020c00 	.word	0x40020c00

08001ad4 <led_keepon_up>:

void led_keepon_up()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	e00f      	b.n	8001b00 <led_keepon_up+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2201      	movs	r2, #1
 8001aec:	4619      	mov	r1, r3
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <led_keepon_up+0x3c>)
 8001af0:	f002 fd08 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001af4:	20c8      	movs	r0, #200	; 0xc8
 8001af6:	f001 fe51 	bl	800379c <HAL_Delay>
	for (int i=0; i < 8; i++)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3301      	adds	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	ddec      	ble.n	8001ae0 <led_keepon_up+0xc>
	}
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40020c00 	.word	0x40020c00

08001b14 <led_keepon_down>:

void led_keepon_down()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
	for (int i=0; i < 8; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e00f      	b.n	8001b40 <led_keepon_down+0x2c>
	{
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	fa42 f303 	asr.w	r3, r2, r3
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <led_keepon_down+0x3c>)
 8001b30:	f002 fce8 	bl	8004504 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001b34:	20c8      	movs	r0, #200	; 0xc8
 8001b36:	f001 fe31 	bl	800379c <HAL_Delay>
	for (int i=0; i < 8; i++)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	ddec      	ble.n	8001b20 <led_keepon_down+0xc>
	}
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <led_on_up>:

// 0->1->2->3->4->5->6->7
// 해당 되는 bit의 LED만 ON
void led_on_up()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	static int i=0;

#if 1
	if (t1ms_counter >= 200)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <led_on_up+0x50>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2bc7      	cmp	r3, #199	; 0xc7
 8001b5e:	dd1e      	ble.n	8001b9e <led_on_up+0x4a>
	{
		t1ms_counter=0;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <led_on_up+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
		led_all_off();
 8001b66:	f000 f861 	bl	8001c2c <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <led_on_up+0x54>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2201      	movs	r2, #1
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480c      	ldr	r0, [pc, #48]	; (8001bac <led_on_up+0x58>)
 8001b7c:	f002 fcc2 	bl	8004504 <HAL_GPIO_WritePin>
		i++;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <led_on_up+0x54>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <led_on_up+0x54>)
 8001b88:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <led_on_up+0x54>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	dd05      	ble.n	8001b9e <led_on_up+0x4a>
		{
			i=0;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <led_on_up+0x54>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_DOWN;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <led_on_up+0x5c>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x01 << i, 1);
		HAL_Delay(200);
	}
#endif
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000b2c 	.word	0x20000b2c
 8001ba8:	20000138 	.word	0x20000138
 8001bac:	40020c00 	.word	0x40020c00
 8001bb0:	20000134 	.word	0x20000134

08001bb4 <led_on_down>:

// 7->6->5->4->3->2->1->0
void led_on_down()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	static int i=0;
#if 1
	if (t1ms_counter >= 200)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <led_on_down+0x50>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2bc7      	cmp	r3, #199	; 0xc7
 8001bbe:	dd1e      	ble.n	8001bfe <led_on_down+0x4a>
	{
		t1ms_counter=0;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <led_on_down+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
		led_all_off();
 8001bc6:	f000 f831 	bl	8001c2c <led_all_off>
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <led_on_down+0x54>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	fa42 f303 	asr.w	r3, r2, r3
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <led_on_down+0x58>)
 8001bdc:	f002 fc92 	bl	8004504 <HAL_GPIO_WritePin>
		i++;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <led_on_down+0x54>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <led_on_down+0x54>)
 8001be8:	6013      	str	r3, [r2, #0]
		if (i >= 8)
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <led_on_down+0x54>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b07      	cmp	r3, #7
 8001bf0:	dd05      	ble.n	8001bfe <led_on_down+0x4a>
		{
			i=0;
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <led_on_down+0x54>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
			func_index=LED_ON_UP;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <led_on_down+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
		led_all_off();
		HAL_GPIO_WritePin(GPIOD, 0x80 >> i, 1);
		HAL_Delay(200);
	}
#endif
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000b2c 	.word	0x20000b2c
 8001c08:	2000013c 	.word	0x2000013c
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	20000134 	.word	0x20000134

08001c14 <led_all_on>:

void led_all_on(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 1);
	HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	21ff      	movs	r1, #255	; 0xff
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <led_all_on+0x14>)
 8001c1e:	f002 fc71 	bl	8004504 <HAL_GPIO_WritePin>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40020c00 	.word	0x40020c00

08001c2c <led_all_off>:

void led_all_off(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|
//			GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	21ff      	movs	r1, #255	; 0xff
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <led_all_off+0x14>)
 8001c36:	f002 fc65 	bl	8004504 <HAL_GPIO_WritePin>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020c00 	.word	0x40020c00

08001c44 <HAL_SYSTICK_Handler>:
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter=0;  // volatile : for disable optimize
volatile int fnd1ms_counter=0;	// fnd1ms
void HAL_SYSTICK_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	t1ms_counter++;   // 1ms timer
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_SYSTICK_Handler+0x24>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_SYSTICK_Handler+0x24>)
 8001c50:	6013      	str	r3, [r2, #0]
	fnd1ms_counter++;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_SYSTICK_Handler+0x28>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_SYSTICK_Handler+0x28>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000b2c 	.word	0x20000b2c
 8001c6c:	20000b30 	.word	0x20000b30

08001c70 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <__io_putchar+0x20>)
 8001c82:	f006 f92a 	bl	8007eda <HAL_UART_Transmit>

  return ch;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000058c 	.word	0x2000058c

08001c94 <HAL_TIM_PeriodElapsedCallback>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d109      	bne.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cae:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;  // ultrasonic trigger timer
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cb8:	6013      	str	r3, [r2, #0]
	}
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40014400 	.word	0x40014400
 8001ccc:	20000b24 	.word	0x20000b24
 8001cd0:	20000b28 	.word	0x20000b28

08001cd4 <delay_us>:

void delay_us(unsigned long us)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <delay_us+0x2c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001ce4:	bf00      	nop
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <delay_us+0x2c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d8f9      	bhi.n	8001ce6 <delay_us+0x12>
		;
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20000544 	.word	0x20000544

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d08:	f001 fcd6 	bl	80036b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0c:	f000 f866 	bl	8001ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d10:	f000 fc1c 	bl	800254c <MX_GPIO_Init>
  MX_ETH_Init();
 8001d14:	f000 f8ce 	bl	8001eb4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d18:	f000 fb96 	bl	8002448 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d1c:	f000 fbe8 	bl	80024f0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001d20:	f000 fbbc 	bl	800249c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001d24:	f000 fb48 	bl	80023b8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001d28:	f000 fb6a 	bl	8002400 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001d2c:	f000 fa04 	bl	8002138 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001d30:	f000 f90e 	bl	8001f50 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001d34:	f000 fa54 	bl	80021e0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001d38:	f000 f9a4 	bl	8002084 <MX_TIM2_Init>
  MX_RTC_Init();
 8001d3c:	f000 f948 	bl	8001fd0 <MX_RTC_Init>
  MX_TIM5_Init();
 8001d40:	f000 fac4 	bl	80022cc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8001d44:	2201      	movs	r2, #1
 8001d46:	491b      	ldr	r1, [pc, #108]	; (8001db4 <main+0xb0>)
 8001d48:	481b      	ldr	r0, [pc, #108]	; (8001db8 <main+0xb4>)
 8001d4a:	f006 f958 	bl	8007ffe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8001d4e:	2201      	movs	r2, #1
 8001d50:	491a      	ldr	r1, [pc, #104]	; (8001dbc <main+0xb8>)
 8001d52:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <main+0xbc>)
 8001d54:	f006 f953 	bl	8007ffe <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8001d58:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <main+0xc0>)
 8001d5a:	f004 fb91 	bl	8006480 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8001d5e:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <main+0xc4>)
 8001d60:	f004 fb8e 	bl	8006480 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8001d64:	2100      	movs	r1, #0
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <main+0xc8>)
 8001d68:	f004 fee8 	bl	8006b3c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);	// for DC motor PWM cont
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <main+0xcc>)
 8001d70:	f004 fd7e 	bl	8006870 <HAL_TIM_PWM_Start_IT>
 // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001d74:	210c      	movs	r1, #12
 8001d76:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <main+0xd0>)
 8001d78:	f004 fc42 	bl	8006600 <HAL_TIM_PWM_Start>

  DHT11_Init();
 8001d7c:	f7ff f858 	bl	8000e30 <DHT11_Init>
  i2c_lcd_init();
 8001d80:	f7ff fb8c 	bl	800149c <i2c_lcd_init>
  FND4digit_off();
 8001d84:	f7ff faae 	bl	80012e4 <FND4digit_off>

  TIM10_10ms_counter=0;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <main+0xd4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	DHT11_processing();
 8001d8e:	f7fe fff7 	bl	8000d80 <DHT11_processing>
 	pc_command_processing();
 8001d92:	f001 fa9f 	bl	80032d4 <pc_command_processing>
 	bt_command_processing();
 8001d96:	f001 fb3b 	bl	8003410 <bt_command_processing>
 	ultrasonic_processing();
 8001d9a:	f001 fbe9 	bl	8003570 <ultrasonic_processing>
 	dcmotor_pwm_control();
 8001d9e:	f7ff f98b 	bl	80010b8 <dcmotor_pwm_control>
 	get_rtc();
 8001da2:	f7ff fc01 	bl	80015a8 <get_rtc>
 	lcd_display_mode_select();
 8001da6:	f7ff f8f7 	bl	8000f98 <lcd_display_mode_select>
 	set_time_button_ui();
 8001daa:	f7ff fd4b 	bl	8001844 <set_time_button_ui>
 	fnd4digit_sec_clock();
 8001dae:	f7ff fab5 	bl	800131c <fnd4digit_sec_clock>
	DHT11_processing();
 8001db2:	e7ec      	b.n	8001d8e <main+0x8a>
 8001db4:	20000b20 	.word	0x20000b20
 8001db8:	2000058c 	.word	0x2000058c
 8001dbc:	20000b21 	.word	0x20000b21
 8001dc0:	200005d0 	.word	0x200005d0
 8001dc4:	200004fc 	.word	0x200004fc
 8001dc8:	20000544 	.word	0x20000544
 8001dcc:	20000424 	.word	0x20000424
 8001dd0:	2000046c 	.word	0x2000046c
 8001dd4:	200004b4 	.word	0x200004b4
 8001dd8:	20000b24 	.word	0x20000b24

08001ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b094      	sub	sp, #80	; 0x50
 8001de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de2:	f107 0320 	add.w	r3, r7, #32
 8001de6:	2230      	movs	r2, #48	; 0x30
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f007 fbd0 	bl	8009590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <SystemClock_Config+0xd0>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <SystemClock_Config+0xd0>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e10:	4b26      	ldr	r3, [pc, #152]	; (8001eac <SystemClock_Config+0xd0>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <SystemClock_Config+0xd4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <SystemClock_Config+0xd4>)
 8001e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <SystemClock_Config+0xd4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e38:	2309      	movs	r3, #9
 8001e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e42:	2301      	movs	r3, #1
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e46:	2302      	movs	r3, #2
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e50:	2304      	movs	r3, #4
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e54:	23a8      	movs	r3, #168	; 0xa8
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f965 	bl	8005134 <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e70:	f000 fcb0 	bl	80027d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2105      	movs	r1, #5
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fbc6 	bl	8005624 <HAL_RCC_ClockConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e9e:	f000 fc99 	bl	80027d4 <Error_Handler>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3750      	adds	r7, #80	; 0x50
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <MX_ETH_Init+0x84>)
 8001eba:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <MX_ETH_Init+0x88>)
 8001ebc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ecc:	22e1      	movs	r2, #225	; 0xe1
 8001ece:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_ETH_Init+0x84>)
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <MX_ETH_Init+0x8c>)
 8001ee6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_ETH_Init+0x84>)
 8001eea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_ETH_Init+0x84>)
 8001ef2:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <MX_ETH_Init+0x90>)
 8001ef4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_ETH_Init+0x84>)
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <MX_ETH_Init+0x94>)
 8001efa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_ETH_Init+0x84>)
 8001efe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <MX_ETH_Init+0x84>)
 8001f06:	f001 fe11 	bl	8003b2c <HAL_ETH_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f10:	f000 fc60 	bl	80027d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f14:	2238      	movs	r2, #56	; 0x38
 8001f16:	2100      	movs	r1, #0
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <MX_ETH_Init+0x98>)
 8001f1a:	f007 fb39 	bl	8009590 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <MX_ETH_Init+0x98>)
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_ETH_Init+0x98>)
 8001f26:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001f2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <MX_ETH_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200002b8 	.word	0x200002b8
 8001f3c:	40028000 	.word	0x40028000
 8001f40:	20000b34 	.word	0x20000b34
 8001f44:	20000218 	.word	0x20000218
 8001f48:	20000178 	.word	0x20000178
 8001f4c:	20000140 	.word	0x20000140

08001f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f56:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <MX_I2C1_Init+0x78>)
 8001f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <MX_I2C1_Init+0x7c>)
 8001f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001f8e:	f002 faed 	bl	800456c <HAL_I2C_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f98:	f000 fc1c 	bl	80027d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4809      	ldr	r0, [pc, #36]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001fa0:	f002 ff2f 	bl	8004e02 <HAL_I2CEx_ConfigAnalogFilter>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001faa:	f000 fc13 	bl	80027d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <MX_I2C1_Init+0x74>)
 8001fb2:	f002 ff62 	bl	8004e7a <HAL_I2CEx_ConfigDigitalFilter>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001fbc:	f000 fc0a 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000368 	.word	0x20000368
 8001fc8:	40005400 	.word	0x40005400
 8001fcc:	000186a0 	.word	0x000186a0

08001fd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <MX_RTC_Init+0xac>)
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <MX_RTC_Init+0xb0>)
 8001fec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <MX_RTC_Init+0xac>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <MX_RTC_Init+0xac>)
 8001ff6:	227f      	movs	r2, #127	; 0x7f
 8001ff8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <MX_RTC_Init+0xac>)
 8001ffc:	22ff      	movs	r2, #255	; 0xff
 8001ffe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <MX_RTC_Init+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <MX_RTC_Init+0xac>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_RTC_Init+0xac>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002012:	481a      	ldr	r0, [pc, #104]	; (800207c <MX_RTC_Init+0xac>)
 8002014:	f003 fee6 	bl	8005de4 <HAL_RTC_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800201e:	f000 fbd9 	bl	80027d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8002022:	2309      	movs	r3, #9
 8002024:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x39;
 8002026:	2339      	movs	r3, #57	; 0x39
 8002028:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800202a:	2300      	movs	r3, #0
 800202c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2201      	movs	r2, #1
 800203a:	4619      	mov	r1, r3
 800203c:	480f      	ldr	r0, [pc, #60]	; (800207c <MX_RTC_Init+0xac>)
 800203e:	f003 ff47 	bl	8005ed0 <HAL_RTC_SetTime>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002048:	f000 fbc4 	bl	80027d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800204c:	2301      	movs	r3, #1
 800204e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8002050:	2310      	movs	r3, #16
 8002052:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8002054:	2316      	movs	r3, #22
 8002056:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8002058:	2323      	movs	r3, #35	; 0x23
 800205a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_RTC_Init+0xac>)
 8002064:	f004 f82c 	bl	80060c0 <HAL_RTC_SetDate>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800206e:	f000 fbb1 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200003bc 	.word	0x200003bc
 8002080:	40002800 	.word	0x40002800

08002084 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208a:	f107 0320 	add.w	r3, r7, #32
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020b0:	f240 628f 	movw	r2, #1679	; 0x68f
 80020b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020d0:	4818      	ldr	r0, [pc, #96]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020d2:	f004 fa45 	bl	8006560 <HAL_TIM_PWM_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80020dc:	f000 fb7a 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	4619      	mov	r1, r3
 80020ee:	4811      	ldr	r0, [pc, #68]	; (8002134 <MX_TIM2_Init+0xb0>)
 80020f0:	f005 fe16 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80020fa:	f000 fb6b 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fe:	2360      	movs	r3, #96	; 0x60
 8002100:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002102:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	4807      	ldr	r0, [pc, #28]	; (8002134 <MX_TIM2_Init+0xb0>)
 8002118:	f004 ffdc 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002122:	f000 fb57 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <MX_TIM2_Init+0xb0>)
 8002128:	f000 fdb2 	bl	8002c90 <HAL_TIM_MspPostInit>

}
 800212c:	bf00      	nop
 800212e:	3728      	adds	r7, #40	; 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200003dc 	.word	0x200003dc

08002138 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_TIM3_Init+0xa0>)
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <MX_TIM3_Init+0xa4>)
 8002158:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_TIM3_Init+0xa0>)
 800215c:	2253      	movs	r2, #83	; 0x53
 800215e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_TIM3_Init+0xa0>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_TIM3_Init+0xa0>)
 8002168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800216c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_TIM3_Init+0xa0>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_TIM3_Init+0xa0>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800217a:	4817      	ldr	r0, [pc, #92]	; (80021d8 <MX_TIM3_Init+0xa0>)
 800217c:	f004 fc8e 	bl	8006a9c <HAL_TIM_IC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002186:	f000 fb25 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	4619      	mov	r1, r3
 8002198:	480f      	ldr	r0, [pc, #60]	; (80021d8 <MX_TIM3_Init+0xa0>)
 800219a:	f005 fdc1 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80021a4:	f000 fb16 	bl	80027d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80021a8:	230a      	movs	r3, #10
 80021aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ac:	2301      	movs	r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <MX_TIM3_Init+0xa0>)
 80021c0:	f004 feec 	bl	8006f9c <HAL_TIM_IC_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80021ca:	f000 fb03 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000424 	.word	0x20000424
 80021dc:	40000400 	.word	0x40000400

080021e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	; 0x38
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	f107 0320 	add.w	r3, r7, #32
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
 800220c:	615a      	str	r2, [r3, #20]
 800220e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <MX_TIM4_Init+0xe8>)
 8002214:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002218:	f240 3247 	movw	r2, #839	; 0x347
 800221c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002226:	2263      	movs	r2, #99	; 0x63
 8002228:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <MX_TIM4_Init+0xe4>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002232:	2200      	movs	r2, #0
 8002234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002236:	4823      	ldr	r0, [pc, #140]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002238:	f004 f8d2 	bl	80063e0 <HAL_TIM_Base_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002242:	f000 fac7 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800224c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002250:	4619      	mov	r1, r3
 8002252:	481c      	ldr	r0, [pc, #112]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002254:	f005 f800 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800225e:	f000 fab9 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002262:	4818      	ldr	r0, [pc, #96]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002264:	f004 f97c 	bl	8006560 <HAL_TIM_PWM_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800226e:	f000 fab1 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	4619      	mov	r1, r3
 8002280:	4810      	ldr	r0, [pc, #64]	; (80022c4 <MX_TIM4_Init+0xe4>)
 8002282:	f005 fd4d 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800228c:	f000 faa2 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002290:	2360      	movs	r3, #96	; 0x60
 8002292:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8002294:	2345      	movs	r3, #69	; 0x45
 8002296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800229c:	2304      	movs	r3, #4
 800229e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	4619      	mov	r1, r3
 80022a6:	4807      	ldr	r0, [pc, #28]	; (80022c4 <MX_TIM4_Init+0xe4>)
 80022a8:	f004 ff14 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022b2:	f000 fa8f 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022b6:	4803      	ldr	r0, [pc, #12]	; (80022c4 <MX_TIM4_Init+0xe4>)
 80022b8:	f000 fcea 	bl	8002c90 <HAL_TIM_MspPostInit>

}
 80022bc:	bf00      	nop
 80022be:	3738      	adds	r7, #56	; 0x38
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000046c 	.word	0x2000046c
 80022c8:	40000800 	.word	0x40000800

080022cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	615a      	str	r2, [r3, #20]
 80022fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <MX_TIM5_Init+0xe4>)
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <MX_TIM5_Init+0xe8>)
 8002300:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002304:	2233      	movs	r2, #51	; 0x33
 8002306:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <MX_TIM5_Init+0xe4>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002310:	f240 128f 	movw	r2, #399	; 0x18f
 8002314:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <MX_TIM5_Init+0xe4>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002322:	4823      	ldr	r0, [pc, #140]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002324:	f004 f85c 	bl	80063e0 <HAL_TIM_Base_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800232e:	f000 fa51 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233c:	4619      	mov	r1, r3
 800233e:	481c      	ldr	r0, [pc, #112]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002340:	f004 ff8a 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800234a:	f000 fa43 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800234e:	4818      	ldr	r0, [pc, #96]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002350:	f004 f906 	bl	8006560 <HAL_TIM_PWM_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800235a:	f000 fa3b 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002366:	f107 0320 	add.w	r3, r7, #32
 800236a:	4619      	mov	r1, r3
 800236c:	4810      	ldr	r0, [pc, #64]	; (80023b0 <MX_TIM5_Init+0xe4>)
 800236e:	f005 fcd7 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002378:	f000 fa2c 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237c:	2360      	movs	r3, #96	; 0x60
 800237e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8002380:	23c7      	movs	r3, #199	; 0xc7
 8002382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	220c      	movs	r2, #12
 8002390:	4619      	mov	r1, r3
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM5_Init+0xe4>)
 8002394:	f004 fe9e 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800239e:	f000 fa19 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023a2:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM5_Init+0xe4>)
 80023a4:	f000 fc74 	bl	8002c90 <HAL_TIM_MspPostInit>

}
 80023a8:	bf00      	nop
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200004b4 	.word	0x200004b4
 80023b4:	40000c00 	.word	0x40000c00

080023b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <MX_TIM10_Init+0x44>)
 80023c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023c4:	22a7      	movs	r2, #167	; 0xa7
 80023c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80023d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_TIM10_Init+0x40>)
 80023e4:	f003 fffc 	bl	80063e0 <HAL_TIM_Base_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80023ee:	f000 f9f1 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200004fc 	.word	0x200004fc
 80023fc:	40014400 	.word	0x40014400

08002400 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_TIM11_Init+0x40>)
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <MX_TIM11_Init+0x44>)
 8002408:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MX_TIM11_Init+0x40>)
 800240c:	22a7      	movs	r2, #167	; 0xa7
 800240e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_TIM11_Init+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <MX_TIM11_Init+0x40>)
 8002418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <MX_TIM11_Init+0x40>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_TIM11_Init+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_TIM11_Init+0x40>)
 800242c:	f003 ffd8 	bl	80063e0 <HAL_TIM_Base_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002436:	f000 f9cd 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000544 	.word	0x20000544
 8002444:	40014800 	.word	0x40014800

08002448 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <MX_USART3_UART_Init+0x50>)
 8002450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002454:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_USART3_UART_Init+0x4c>)
 8002480:	f005 fcde 	bl	8007e40 <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800248a:	f000 f9a3 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000058c 	.word	0x2000058c
 8002498:	40004800 	.word	0x40004800

0800249c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <MX_USART6_UART_Init+0x50>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_USART6_UART_Init+0x4c>)
 80024d4:	f005 fcb4 	bl	8007e40 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024de:	f000 f979 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200005d0 	.word	0x200005d0
 80024ec:	40011400 	.word	0x40011400

080024f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fe:	2204      	movs	r2, #4
 8002500:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002504:	2202      	movs	r2, #2
 8002506:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002510:	2202      	movs	r2, #2
 8002512:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002516:	2201      	movs	r2, #1
 8002518:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	2201      	movs	r2, #1
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002534:	f002 fce0 	bl	8004ef8 <HAL_PCD_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800253e:	f000 f949 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000614 	.word	0x20000614

0800254c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	; 0x38
 8002550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
 8002566:	4b93      	ldr	r3, [pc, #588]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a92      	ldr	r2, [pc, #584]	; (80027b4 <MX_GPIO_Init+0x268>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b90      	ldr	r3, [pc, #576]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a8b      	ldr	r2, [pc, #556]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	4b85      	ldr	r3, [pc, #532]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a84      	ldr	r2, [pc, #528]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b82      	ldr	r3, [pc, #520]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a7d      	ldr	r2, [pc, #500]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b77      	ldr	r3, [pc, #476]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a76      	ldr	r2, [pc, #472]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a6f      	ldr	r2, [pc, #444]	; (80027b4 <MX_GPIO_Init+0x268>)
 80025f8:	f043 0310 	orr.w	r3, r3, #16
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b69      	ldr	r3, [pc, #420]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a68      	ldr	r2, [pc, #416]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <MX_GPIO_Init+0x268>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <MX_GPIO_Init+0x268>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a61      	ldr	r2, [pc, #388]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b5f      	ldr	r3, [pc, #380]	; (80027b4 <MX_GPIO_Init+0x268>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	2101      	movs	r1, #1
 8002646:	485c      	ldr	r0, [pc, #368]	; (80027b8 <MX_GPIO_Init+0x26c>)
 8002648:	f001 ff5c 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800264c:	2200      	movs	r2, #0
 800264e:	f644 41ff 	movw	r1, #19711	; 0x4cff
 8002652:	485a      	ldr	r0, [pc, #360]	; (80027bc <MX_GPIO_Init+0x270>)
 8002654:	f001 ff56 	bl	8004504 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265e:	4858      	ldr	r0, [pc, #352]	; (80027c0 <MX_GPIO_Init+0x274>)
 8002660:	f001 ff50 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 7140 	mov.w	r1, #768	; 0x300
 800266a:	4856      	ldr	r0, [pc, #344]	; (80027c4 <MX_GPIO_Init+0x278>)
 800266c:	f001 ff4a 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	2140      	movs	r1, #64	; 0x40
 8002674:	4854      	ldr	r0, [pc, #336]	; (80027c8 <MX_GPIO_Init+0x27c>)
 8002676:	f001 ff45 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002680:	4852      	ldr	r0, [pc, #328]	; (80027cc <MX_GPIO_Init+0x280>)
 8002682:	f001 ff3f 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002686:	2200      	movs	r2, #0
 8002688:	21ff      	movs	r1, #255	; 0xff
 800268a:	4851      	ldr	r0, [pc, #324]	; (80027d0 <MX_GPIO_Init+0x284>)
 800268c:	f001 ff3a 	bl	8004504 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002696:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	4849      	ldr	r0, [pc, #292]	; (80027cc <MX_GPIO_Init+0x280>)
 80026a8:	f001 fd68 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80026ac:	2301      	movs	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c0:	4619      	mov	r1, r3
 80026c2:	483d      	ldr	r0, [pc, #244]	; (80027b8 <MX_GPIO_Init+0x26c>)
 80026c4:	f001 fd5a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 LD3_Pin PB3 PB4
                           PB5 PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80026c8:	f644 43ff 	movw	r3, #19711	; 0x4cff
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026de:	4619      	mov	r1, r3
 80026e0:	4836      	ldr	r0, [pc, #216]	; (80027bc <MX_GPIO_Init+0x270>)
 80026e2:	f001 fd4b 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80026e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80026f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fc:	4619      	mov	r1, r3
 80026fe:	4830      	ldr	r0, [pc, #192]	; (80027c0 <MX_GPIO_Init+0x274>)
 8002700:	f001 fd3c 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin;
 8002704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271a:	4619      	mov	r1, r3
 800271c:	4829      	ldr	r0, [pc, #164]	; (80027c4 <MX_GPIO_Init+0x278>)
 800271e:	f001 fd2d 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8002722:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002728:	2300      	movs	r3, #0
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002734:	4619      	mov	r1, r3
 8002736:	4823      	ldr	r0, [pc, #140]	; (80027c4 <MX_GPIO_Init+0x278>)
 8002738:	f001 fd20 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800273c:	2340      	movs	r3, #64	; 0x40
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800274c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002750:	4619      	mov	r1, r3
 8002752:	481d      	ldr	r0, [pc, #116]	; (80027c8 <MX_GPIO_Init+0x27c>)
 8002754:	f001 fd12 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	4817      	ldr	r0, [pc, #92]	; (80027c8 <MX_GPIO_Init+0x27c>)
 800276c:	f001 fd06 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002770:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002786:	4619      	mov	r1, r3
 8002788:	4810      	ldr	r0, [pc, #64]	; (80027cc <MX_GPIO_Init+0x280>)
 800278a:	f001 fcf7 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800278e:	23ff      	movs	r3, #255	; 0xff
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	4619      	mov	r1, r3
 80027a4:	480a      	ldr	r0, [pc, #40]	; (80027d0 <MX_GPIO_Init+0x284>)
 80027a6:	f001 fce9 	bl	800417c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027aa:	bf00      	nop
 80027ac:	3738      	adds	r7, #56	; 0x38
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40021400 	.word	0x40021400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027dc:	e7fe      	b.n	80027dc <Error_Handler+0x8>
	...

080027e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_MspInit+0x4c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_MspInit+0x4c>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_MspInit+0x4c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_MspInit+0x4c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_MspInit+0x4c>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08e      	sub	sp, #56	; 0x38
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a55      	ldr	r2, [pc, #340]	; (80029a4 <HAL_ETH_MspInit+0x174>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 80a4 	bne.w	800299c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 800285e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 800287a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a44      	ldr	r2, [pc, #272]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4a3d      	ldr	r2, [pc, #244]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30
 80028b8:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	4a36      	ldr	r2, [pc, #216]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6313      	str	r3, [r2, #48]	; 0x30
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 8002906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290a:	6313      	str	r3, [r2, #48]	; 0x30
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_ETH_MspInit+0x178>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002918:	2332      	movs	r3, #50	; 0x32
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002928:	230b      	movs	r3, #11
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	481e      	ldr	r0, [pc, #120]	; (80029ac <HAL_ETH_MspInit+0x17c>)
 8002934:	f001 fc22 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002938:	2386      	movs	r3, #134	; 0x86
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002948:	230b      	movs	r3, #11
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4817      	ldr	r0, [pc, #92]	; (80029b0 <HAL_ETH_MspInit+0x180>)
 8002954:	f001 fc12 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800296a:	230b      	movs	r3, #11
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	480f      	ldr	r0, [pc, #60]	; (80029b4 <HAL_ETH_MspInit+0x184>)
 8002976:	f001 fc01 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800297a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800298c:	230b      	movs	r3, #11
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4808      	ldr	r0, [pc, #32]	; (80029b8 <HAL_ETH_MspInit+0x188>)
 8002998:	f001 fbf0 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800299c:	bf00      	nop
 800299e:	3738      	adds	r7, #56	; 0x38
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40028000 	.word	0x40028000
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40021800 	.word	0x40021800

080029bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_I2C_MspInit+0x84>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12c      	bne.n	8002a38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_I2C_MspInit+0x88>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_I2C_MspInit+0x88>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_I2C_MspInit+0x88>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a00:	2312      	movs	r3, #18
 8002a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <HAL_I2C_MspInit+0x8c>)
 8002a18:	f001 fbb0 	bl	800417c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_I2C_MspInit+0x88>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_I2C_MspInit+0x88>)
 8002a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_I2C_MspInit+0x88>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40005400 	.word	0x40005400
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020400 	.word	0x40020400

08002a4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08e      	sub	sp, #56	; 0x38
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	2230      	movs	r2, #48	; 0x30
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f006 fd97 	bl	8009590 <memset>
  if(hrtc->Instance==RTC)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_RTC_MspInit+0x4c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d111      	bne.n	8002a90 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fff2 	bl	8005a64 <HAL_RCCEx_PeriphCLKConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a86:	f7ff fea5 	bl	80027d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RTC_MspInit+0x50>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3738      	adds	r7, #56	; 0x38
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40002800 	.word	0x40002800
 8002a9c:	42470e3c 	.word	0x42470e3c

08002aa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d115      	bne.n	8002ade <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_TIM_PWM_MspInit+0x48>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_TIM_PWM_MspInit+0x48>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_TIM_PWM_MspInit+0x48>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	201c      	movs	r0, #28
 8002ad4:	f000 ff61 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ad8:	201c      	movs	r0, #28
 8002ada:	f000 ff7a 	bl	80039d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_TIM_IC_MspInit+0x94>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d133      	bne.n	8002b76 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_TIM_IC_MspInit+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_TIM_IC_MspInit+0x98>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_TIM_IC_MspInit+0x98>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_TIM_IC_MspInit+0x98>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_TIM_IC_MspInit+0x98>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_TIM_IC_MspInit+0x98>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8002b46:	2340      	movs	r3, #64	; 0x40
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b56:	2302      	movs	r3, #2
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4809      	ldr	r0, [pc, #36]	; (8002b88 <HAL_TIM_IC_MspInit+0x9c>)
 8002b62:	f001 fb0b 	bl	800417c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	201d      	movs	r0, #29
 8002b6c:	f000 ff15 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b70:	201d      	movs	r0, #29
 8002b72:	f000 ff2e 	bl	80039d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b76:	bf00      	nop
 8002b78:	3728      	adds	r7, #40	; 0x28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020000 	.word	0x40020000

08002b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <HAL_TIM_Base_MspInit+0xf0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d116      	bne.n	8002bcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a36      	ldr	r2, [pc, #216]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	201e      	movs	r0, #30
 8002bc0:	f000 feeb 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bc4:	201e      	movs	r0, #30
 8002bc6:	f000 ff04 	bl	80039d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002bca:	e052      	b.n	8002c72 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	; (8002c84 <HAL_TIM_Base_MspInit+0xf8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d116      	bne.n	8002c04 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002be0:	f043 0308 	orr.w	r3, r3, #8
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2032      	movs	r0, #50	; 0x32
 8002bf8:	f000 fecf 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002bfc:	2032      	movs	r0, #50	; 0x32
 8002bfe:	f000 fee8 	bl	80039d2 <HAL_NVIC_EnableIRQ>
}
 8002c02:	e036      	b.n	8002c72 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_TIM_Base_MspInit+0xfc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d116      	bne.n	8002c3c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2019      	movs	r0, #25
 8002c30:	f000 feb3 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c34:	2019      	movs	r0, #25
 8002c36:	f000 fecc 	bl	80039d2 <HAL_NVIC_EnableIRQ>
}
 8002c3a:	e01a      	b.n	8002c72 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_TIM_Base_MspInit+0x100>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_TIM_Base_MspInit+0xf4>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	201a      	movs	r0, #26
 8002c68:	f000 fe97 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c6c:	201a      	movs	r0, #26
 8002c6e:	f000 feb0 	bl	80039d2 <HAL_NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800

08002c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb0:	d11e      	bne.n	8002cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4828      	ldr	r0, [pc, #160]	; (8002d8c <HAL_TIM_MspPostInit+0xfc>)
 8002cea:	f001 fa47 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002cee:	e047      	b.n	8002d80 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_TIM_MspPostInit+0x100>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d11f      	bne.n	8002d3a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4818      	ldr	r0, [pc, #96]	; (8002d94 <HAL_TIM_MspPostInit+0x104>)
 8002d34:	f001 fa22 	bl	800417c <HAL_GPIO_Init>
}
 8002d38:	e022      	b.n	8002d80 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <HAL_TIM_MspPostInit+0x108>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d11d      	bne.n	8002d80 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6313      	str	r3, [r2, #48]	; 0x30
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_TIM_MspPostInit+0xf8>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d60:	2308      	movs	r3, #8
 8002d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d70:	2302      	movs	r3, #2
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4804      	ldr	r0, [pc, #16]	; (8002d8c <HAL_TIM_MspPostInit+0xfc>)
 8002d7c:	f001 f9fe 	bl	800417c <HAL_GPIO_Init>
}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40000c00 	.word	0x40000c00

08002d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <HAL_UART_MspInit+0x108>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d135      	bne.n	8002e2a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a38      	ldr	r2, [pc, #224]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e08:	2307      	movs	r3, #7
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	4826      	ldr	r0, [pc, #152]	; (8002eac <HAL_UART_MspInit+0x110>)
 8002e14:	f001 f9b2 	bl	800417c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2027      	movs	r0, #39	; 0x27
 8002e1e:	f000 fdbc 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e22:	2027      	movs	r0, #39	; 0x27
 8002e24:	f000 fdd5 	bl	80039d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e28:	e038      	b.n	8002e9c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <HAL_UART_MspInit+0x114>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d133      	bne.n	8002e9c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	6453      	str	r3, [r2, #68]	; 0x44
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_UART_MspInit+0x10c>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e6c:	23c0      	movs	r3, #192	; 0xc0
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <HAL_UART_MspInit+0x118>)
 8002e88:	f001 f978 	bl	800417c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2047      	movs	r0, #71	; 0x47
 8002e92:	f000 fd82 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e96:	2047      	movs	r0, #71	; 0x47
 8002e98:	f000 fd9b 	bl	80039d2 <HAL_NVIC_EnableIRQ>
}
 8002e9c:	bf00      	nop
 8002e9e:	3730      	adds	r7, #48	; 0x30
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40004800 	.word	0x40004800
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	40020800 	.word	0x40020800

08002eb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed8:	d13f      	bne.n	8002f5a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ef6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f08:	230a      	movs	r3, #10
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	4815      	ldr	r0, [pc, #84]	; (8002f68 <HAL_PCD_MspInit+0xb0>)
 8002f14:	f001 f932 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480e      	ldr	r0, [pc, #56]	; (8002f68 <HAL_PCD_MspInit+0xb0>)
 8002f2e:	f001 f925 	bl	800417c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3c:	6353      	str	r3, [r2, #52]	; 0x34
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_PCD_MspInit+0xac>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 fbd0 	bl	800375c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();  // ADD_SIKWON_231006
 8002fbc:	f7fe fe42 	bl	8001c44 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fca:	f003 fedf 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200004fc 	.word	0x200004fc

08002fd8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002fde:	f003 fed5 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000544 	.word	0x20000544

08002fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <TIM2_IRQHandler+0x10>)
 8002ff2:	f003 fecb 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200003dc 	.word	0x200003dc

08003000 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <TIM3_IRQHandler+0x10>)
 8003006:	f003 fec1 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000424 	.word	0x20000424

08003014 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <TIM4_IRQHandler+0x10>)
 800301a:	f003 feb7 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000046c 	.word	0x2000046c

08003028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <USART3_IRQHandler+0x10>)
 800302e:	f005 f817 	bl	8008060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000058c 	.word	0x2000058c

0800303c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM5_IRQHandler+0x10>)
 8003042:	f003 fea3 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200004b4 	.word	0x200004b4

08003050 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <USART6_IRQHandler+0x10>)
 8003056:	f005 f803 	bl	8008060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200005d0 	.word	0x200005d0

08003064 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e00a      	b.n	800308c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003076:	f3af 8000 	nop.w
 800307a:	4601      	mov	r1, r0
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	60ba      	str	r2, [r7, #8]
 8003082:	b2ca      	uxtb	r2, r1
 8003084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	dbf0      	blt.n	8003076 <_read+0x12>
  }

  return len;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e009      	b.n	80030c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	60ba      	str	r2, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fdd9 	bl	8001c70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3301      	adds	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	dbf1      	blt.n	80030b0 <_write+0x12>
  }
  return len;
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_close>:

int _close(int file)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <_isatty>:

int _isatty(int file)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f006 f9e4 	bl	800953c <__errno>
 8003174:	4603      	mov	r3, r0
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20030000 	.word	0x20030000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	20000b3c 	.word	0x20000b3c
 80031a8:	20000bc0 	.word	0x20000bc0

080031ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <SystemInit+0x20>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <SystemInit+0x20>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a32      	ldr	r2, [pc, #200]	; (80032a4 <HAL_UART_RxCpltCallback+0xd4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d12c      	bne.n	800323a <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b27      	cmp	r3, #39	; 0x27
 80031e6:	dc1d      	bgt.n	8003224 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 80031e8:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_UART_RxCpltCallback+0xdc>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b0a      	cmp	r3, #10
 80031ee:	d003      	beq.n	80031f8 <HAL_UART_RxCpltCallback+0x28>
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <HAL_UART_RxCpltCallback+0xdc>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b0d      	cmp	r3, #13
 80031f6:	d10b      	bne.n	8003210 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <HAL_UART_RxCpltCallback+0xe0>)
 80031fe:	2100      	movs	r1, #0
 8003200:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_UART_RxCpltCallback+0xe4>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00f      	b.n	8003230 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	4924      	ldr	r1, [pc, #144]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 8003218:	600a      	str	r2, [r1, #0]
 800321a:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_UART_RxCpltCallback+0xdc>)
 800321c:	7811      	ldrb	r1, [r2, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_UART_RxCpltCallback+0xe0>)
 8003220:	54d1      	strb	r1, [r2, r3]
 8003222:	e005      	b.n	8003230 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 800322a:	4823      	ldr	r0, [pc, #140]	; (80032b8 <HAL_UART_RxCpltCallback+0xe8>)
 800322c:	f006 fa3e 	bl	80096ac <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8003230:	2201      	movs	r2, #1
 8003232:	491e      	ldr	r1, [pc, #120]	; (80032ac <HAL_UART_RxCpltCallback+0xdc>)
 8003234:	481b      	ldr	r0, [pc, #108]	; (80032a4 <HAL_UART_RxCpltCallback+0xd4>)
 8003236:	f004 fee2 	bl	8007ffe <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_UART_RxCpltCallback+0xec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d12c      	bne.n	800329c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <HAL_UART_RxCpltCallback+0xf0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b27      	cmp	r3, #39	; 0x27
 8003248:	dc1d      	bgt.n	8003286 <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HAL_UART_RxCpltCallback+0xf4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b0a      	cmp	r3, #10
 8003250:	d003      	beq.n	800325a <HAL_UART_RxCpltCallback+0x8a>
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_UART_RxCpltCallback+0xf4>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b0d      	cmp	r3, #13
 8003258:	d10b      	bne.n	8003272 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_UART_RxCpltCallback+0xd8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_UART_RxCpltCallback+0xf8>)
 8003260:	2100      	movs	r1, #0
 8003262:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_UART_RxCpltCallback+0xfc>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_UART_RxCpltCallback+0xf0>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e00f      	b.n	8003292 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_UART_RxCpltCallback+0xf0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	4911      	ldr	r1, [pc, #68]	; (80032c0 <HAL_UART_RxCpltCallback+0xf0>)
 800327a:	600a      	str	r2, [r1, #0]
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_UART_RxCpltCallback+0xf4>)
 800327e:	7811      	ldrb	r1, [r2, #0]
 8003280:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_UART_RxCpltCallback+0xf8>)
 8003282:	54d1      	strb	r1, [r2, r3]
 8003284:	e005      	b.n	8003292 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_UART_RxCpltCallback+0xf0>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 800328c:	4810      	ldr	r0, [pc, #64]	; (80032d0 <HAL_UART_RxCpltCallback+0x100>)
 800328e:	f006 fa0d 	bl	80096ac <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8003292:	2201      	movs	r2, #1
 8003294:	490b      	ldr	r1, [pc, #44]	; (80032c4 <HAL_UART_RxCpltCallback+0xf4>)
 8003296:	4809      	ldr	r0, [pc, #36]	; (80032bc <HAL_UART_RxCpltCallback+0xec>)
 8003298:	f004 feb1 	bl	8007ffe <HAL_UART_Receive_IT>
	}
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	2000058c 	.word	0x2000058c
 80032a8:	20000b68 	.word	0x20000b68
 80032ac:	20000b20 	.word	0x20000b20
 80032b0:	20000b40 	.word	0x20000b40
 80032b4:	20000b6c 	.word	0x20000b6c
 80032b8:	0800ab90 	.word	0x0800ab90
 80032bc:	200005d0 	.word	0x200005d0
 80032c0:	20000b98 	.word	0x20000b98
 80032c4:	20000b21 	.word	0x20000b21
 80032c8:	20000b70 	.word	0x20000b70
 80032cc:	20000b9c 	.word	0x20000b9c
 80032d0:	0800aba8 	.word	0x0800aba8

080032d4 <pc_command_processing>:

void pc_command_processing(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	if (newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 80032d8:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <pc_command_processing+0x104>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d079      	beq.n	80033d4 <pc_command_processing+0x100>
	{
		newline_detect_flag=0;
 80032e0:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <pc_command_processing+0x104>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
		printf("%s\n", rx_buff);
 80032e6:	483d      	ldr	r0, [pc, #244]	; (80033dc <pc_command_processing+0x108>)
 80032e8:	f006 f9e0 	bl	80096ac <puts>
		if (!strncmp(rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80032ec:	220a      	movs	r2, #10
 80032ee:	493c      	ldr	r1, [pc, #240]	; (80033e0 <pc_command_processing+0x10c>)
 80032f0:	483a      	ldr	r0, [pc, #232]	; (80033dc <pc_command_processing+0x108>)
 80032f2:	f006 fa03 	bl	80096fc <strncmp>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <pc_command_processing+0x2e>
		{
			led_all_on();
 80032fc:	f7fe fc8a 	bl	8001c14 <led_all_on>
			return;
 8003300:	e068      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003302:	220b      	movs	r2, #11
 8003304:	4937      	ldr	r1, [pc, #220]	; (80033e4 <pc_command_processing+0x110>)
 8003306:	4835      	ldr	r0, [pc, #212]	; (80033dc <pc_command_processing+0x108>)
 8003308:	f006 f9f8 	bl	80096fc <strncmp>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <pc_command_processing+0x44>
		{
			led_all_off();
 8003312:	f7fe fc8b 	bl	8001c2c <led_all_off>
			return;
 8003316:	e05d      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003318:	220b      	movs	r2, #11
 800331a:	4933      	ldr	r1, [pc, #204]	; (80033e8 <pc_command_processing+0x114>)
 800331c:	482f      	ldr	r0, [pc, #188]	; (80033dc <pc_command_processing+0x108>)
 800331e:	f006 f9ed 	bl	80096fc <strncmp>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <pc_command_processing+0x5a>
		{
			led_on_down();
 8003328:	f7fe fc44 	bl	8001bb4 <led_on_down>
			return;
 800332c:	e052      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800332e:	2209      	movs	r2, #9
 8003330:	492e      	ldr	r1, [pc, #184]	; (80033ec <pc_command_processing+0x118>)
 8003332:	482a      	ldr	r0, [pc, #168]	; (80033dc <pc_command_processing+0x108>)
 8003334:	f006 f9e2 	bl	80096fc <strncmp>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <pc_command_processing+0x70>
		{
			led_on_up();
 800333e:	f7fe fc09 	bl	8001b54 <led_on_up>
			return;
 8003342:	e047      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003344:	2209      	movs	r2, #9
 8003346:	492a      	ldr	r1, [pc, #168]	; (80033f0 <pc_command_processing+0x11c>)
 8003348:	4824      	ldr	r0, [pc, #144]	; (80033dc <pc_command_processing+0x108>)
 800334a:	f006 f9d7 	bl	80096fc <strncmp>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <pc_command_processing+0x86>
		{
			flower_on();
 8003354:	f7fe fb5e 	bl	8001a14 <flower_on>
			return;
 8003358:	e03c      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800335a:	220a      	movs	r2, #10
 800335c:	4925      	ldr	r1, [pc, #148]	; (80033f4 <pc_command_processing+0x120>)
 800335e:	481f      	ldr	r0, [pc, #124]	; (80033dc <pc_command_processing+0x108>)
 8003360:	f006 f9cc 	bl	80096fc <strncmp>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <pc_command_processing+0x9c>
		{
			flower_off();
 800336a:	f7fe fb83 	bl	8001a74 <flower_off>
			return;
 800336e:	e031      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003370:	220d      	movs	r2, #13
 8003372:	4921      	ldr	r1, [pc, #132]	; (80033f8 <pc_command_processing+0x124>)
 8003374:	4819      	ldr	r0, [pc, #100]	; (80033dc <pc_command_processing+0x108>)
 8003376:	f006 f9c1 	bl	80096fc <strncmp>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <pc_command_processing+0xb2>
		{
			led_keepon_up();
 8003380:	f7fe fba8 	bl	8001ad4 <led_keepon_up>
			return;
 8003384:	e026      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003386:	220f      	movs	r2, #15
 8003388:	491c      	ldr	r1, [pc, #112]	; (80033fc <pc_command_processing+0x128>)
 800338a:	4814      	ldr	r0, [pc, #80]	; (80033dc <pc_command_processing+0x108>)
 800338c:	f006 f9b6 	bl	80096fc <strncmp>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <pc_command_processing+0xc8>
		{
			led_keepon_down();
 8003396:	f7fe fbbd 	bl	8001b14 <led_keepon_down>
			return;
 800339a:	e01b      	b.n	80033d4 <pc_command_processing+0x100>
		}
		//dht11time150
		if (!strncmp(rx_buff, "dht11time", strlen("dht11time")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800339c:	2209      	movs	r2, #9
 800339e:	4918      	ldr	r1, [pc, #96]	; (8003400 <pc_command_processing+0x12c>)
 80033a0:	480e      	ldr	r0, [pc, #56]	; (80033dc <pc_command_processing+0x108>)
 80033a2:	f006 f9ab 	bl	80096fc <strncmp>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <pc_command_processing+0xe8>
		{
			dht11time = atoi(rx_buff+9);
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <pc_command_processing+0x130>)
 80033ae:	4618      	mov	r0, r3
 80033b0:	f006 f8c0 	bl	8009534 <atoi>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <pc_command_processing+0x134>)
 80033b8:	6013      	str	r3, [r2, #0]
			return;
 80033ba:	e00b      	b.n	80033d4 <pc_command_processing+0x100>
		}
		if (!strncmp(rx_buff, "setrtc", strlen("setrtc")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80033bc:	2206      	movs	r2, #6
 80033be:	4913      	ldr	r1, [pc, #76]	; (800340c <pc_command_processing+0x138>)
 80033c0:	4806      	ldr	r0, [pc, #24]	; (80033dc <pc_command_processing+0x108>)
 80033c2:	f006 f99b 	bl	80096fc <strncmp>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <pc_command_processing+0x100>
			{
				set_rtc(rx_buff);
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <pc_command_processing+0x108>)
 80033ce:	f7fe f997 	bl	8001700 <set_rtc>
				return;
 80033d2:	bf00      	nop
			}
	}
}
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000b6c 	.word	0x20000b6c
 80033dc:	20000b40 	.word	0x20000b40
 80033e0:	0800abc4 	.word	0x0800abc4
 80033e4:	0800abd0 	.word	0x0800abd0
 80033e8:	0800abdc 	.word	0x0800abdc
 80033ec:	0800abe8 	.word	0x0800abe8
 80033f0:	0800abf4 	.word	0x0800abf4
 80033f4:	0800ac00 	.word	0x0800ac00
 80033f8:	0800ac0c 	.word	0x0800ac0c
 80033fc:	0800ac1c 	.word	0x0800ac1c
 8003400:	0800ac2c 	.word	0x0800ac2c
 8003404:	20000b49 	.word	0x20000b49
 8003408:	20000000 	.word	0x20000000
 800340c:	0800ac38 	.word	0x0800ac38

08003410 <bt_command_processing>:

void bt_command_processing(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	if (bt_newline_detect_flag)   // comport master로 부터 완전한 문장이 들어 오면 (\n을 만나면)
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <bt_command_processing+0xcc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05d      	beq.n	80034d8 <bt_command_processing+0xc8>
	{
		bt_newline_detect_flag=0;
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <bt_command_processing+0xcc>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
		printf("%s\n", bt_rx_buff);
 8003422:	482f      	ldr	r0, [pc, #188]	; (80034e0 <bt_command_processing+0xd0>)
 8003424:	f006 f942 	bl	80096ac <puts>
		if (!strncmp(bt_rx_buff, "led_all_on", strlen("led_all_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003428:	220a      	movs	r2, #10
 800342a:	492e      	ldr	r1, [pc, #184]	; (80034e4 <bt_command_processing+0xd4>)
 800342c:	482c      	ldr	r0, [pc, #176]	; (80034e0 <bt_command_processing+0xd0>)
 800342e:	f006 f965 	bl	80096fc <strncmp>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <bt_command_processing+0x2e>
		{
			led_all_on();
 8003438:	f7fe fbec 	bl	8001c14 <led_all_on>
			return;
 800343c:	e04c      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_all_off", strlen("led_all_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800343e:	220b      	movs	r2, #11
 8003440:	4929      	ldr	r1, [pc, #164]	; (80034e8 <bt_command_processing+0xd8>)
 8003442:	4827      	ldr	r0, [pc, #156]	; (80034e0 <bt_command_processing+0xd0>)
 8003444:	f006 f95a 	bl	80096fc <strncmp>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <bt_command_processing+0x44>
		{
			led_all_off();
 800344e:	f7fe fbed 	bl	8001c2c <led_all_off>
			return;
 8003452:	e041      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_down", strlen("led_on_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003454:	220b      	movs	r2, #11
 8003456:	4925      	ldr	r1, [pc, #148]	; (80034ec <bt_command_processing+0xdc>)
 8003458:	4821      	ldr	r0, [pc, #132]	; (80034e0 <bt_command_processing+0xd0>)
 800345a:	f006 f94f 	bl	80096fc <strncmp>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <bt_command_processing+0x5a>
		{
			led_on_down();
 8003464:	f7fe fba6 	bl	8001bb4 <led_on_down>
			return;
 8003468:	e036      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_on_up", strlen("led_on_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 800346a:	2209      	movs	r2, #9
 800346c:	4920      	ldr	r1, [pc, #128]	; (80034f0 <bt_command_processing+0xe0>)
 800346e:	481c      	ldr	r0, [pc, #112]	; (80034e0 <bt_command_processing+0xd0>)
 8003470:	f006 f944 	bl	80096fc <strncmp>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <bt_command_processing+0x70>
		{
			led_on_up();
 800347a:	f7fe fb6b 	bl	8001b54 <led_on_up>
			return;
 800347e:	e02b      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_on", strlen("flower_on")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003480:	2209      	movs	r2, #9
 8003482:	491c      	ldr	r1, [pc, #112]	; (80034f4 <bt_command_processing+0xe4>)
 8003484:	4816      	ldr	r0, [pc, #88]	; (80034e0 <bt_command_processing+0xd0>)
 8003486:	f006 f939 	bl	80096fc <strncmp>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <bt_command_processing+0x86>
		{
			flower_on();
 8003490:	f7fe fac0 	bl	8001a14 <flower_on>
			return;
 8003494:	e020      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "flower_off", strlen("flower_off")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 8003496:	220a      	movs	r2, #10
 8003498:	4917      	ldr	r1, [pc, #92]	; (80034f8 <bt_command_processing+0xe8>)
 800349a:	4811      	ldr	r0, [pc, #68]	; (80034e0 <bt_command_processing+0xd0>)
 800349c:	f006 f92e 	bl	80096fc <strncmp>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <bt_command_processing+0x9c>
		{
			flower_off();
 80034a6:	f7fe fae5 	bl	8001a74 <flower_off>
			return;
 80034aa:	e015      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_up", strlen("led_keepon_up")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80034ac:	220d      	movs	r2, #13
 80034ae:	4913      	ldr	r1, [pc, #76]	; (80034fc <bt_command_processing+0xec>)
 80034b0:	480b      	ldr	r0, [pc, #44]	; (80034e0 <bt_command_processing+0xd0>)
 80034b2:	f006 f923 	bl	80096fc <strncmp>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <bt_command_processing+0xb2>
		{
			led_keepon_up();
 80034bc:	f7fe fb0a 	bl	8001ad4 <led_keepon_up>
			return;
 80034c0:	e00a      	b.n	80034d8 <bt_command_processing+0xc8>
		}
		if (!strncmp(bt_rx_buff, "led_keepon_down", strlen("led_keepon_down")))  // if (strncmp(rx_buff, "ledallon", strlen("ledallon") == 0)
 80034c2:	220f      	movs	r2, #15
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <bt_command_processing+0xf0>)
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <bt_command_processing+0xd0>)
 80034c8:	f006 f918 	bl	80096fc <strncmp>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <bt_command_processing+0xc8>
		{
			led_keepon_down();
 80034d2:	f7fe fb1f 	bl	8001b14 <led_keepon_down>
			return;
 80034d6:	bf00      	nop
		}
	}
}
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000b9c 	.word	0x20000b9c
 80034e0:	20000b70 	.word	0x20000b70
 80034e4:	0800abc4 	.word	0x0800abc4
 80034e8:	0800abd0 	.word	0x0800abd0
 80034ec:	0800abdc 	.word	0x0800abdc
 80034f0:	0800abe8 	.word	0x0800abe8
 80034f4:	0800abf4 	.word	0x0800abf4
 80034f8:	0800ac00 	.word	0x0800ac00
 80034fc:	0800ac0c 	.word	0x0800ac0c
 8003500:	0800ac1c 	.word	0x0800ac1c

08003504 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a13      	ldr	r2, [pc, #76]	; (8003560 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d11f      	bne.n	8003556 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <HAL_TIM_IC_CaptureCallback+0x60>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 800352e:	e012      	b.n	8003556 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10d      	bne.n	8003556 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_TIM_IC_CaptureCallback+0x60>)
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f003 ff50 	bl	80073e8 <HAL_TIM_ReadCapturedValue>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_TIM_IC_CaptureCallback+0x64>)
 800354e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_TIM_IC_CaptureCallback+0x68>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40000400 	.word	0x40000400
 8003564:	20000ba8 	.word	0x20000ba8
 8003568:	20000ba0 	.word	0x20000ba0
 800356c:	20000ba4 	.word	0x20000ba4

08003570 <ultrasonic_processing>:

void ultrasonic_processing(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
	int dis; // 거리를 측정한 펄스 갯수를 저장 하는 변수
	char lcd_buff[20];

	if (TIM10_10ms_ultrasonic >= 100)   // 1초
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <ultrasonic_processing+0xa0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b63      	cmp	r3, #99	; 0x63
 800357c:	dd3e      	ble.n	80035fc <ultrasonic_processing+0x8c>
	{
		TIM10_10ms_ultrasonic=0;
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <ultrasonic_processing+0xa0>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
		make_trigger();
 8003584:	f000 f850 	bl	8003628 <make_trigger>
		if (ic_cpt_finish_flag)  // 초음파 측정이 완료 되었으면  if (ic_cpt_finish_flag >= 1)
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <ultrasonic_processing+0xa4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d035      	beq.n	80035fc <ultrasonic_processing+0x8c>
		{
			ic_cpt_finish_flag=0;
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <ultrasonic_processing+0xa4>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
			dis = distance;
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <ultrasonic_processing+0xa8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
			dis = dis * 0.034 / 2;  // 1us가 0.034cm를 이동
 800359c:	6978      	ldr	r0, [r7, #20]
 800359e:	f7fc ffc9 	bl	8000534 <__aeabi_i2d>
 80035a2:	a319      	add	r3, pc, #100	; (adr r3, 8003608 <ultrasonic_processing+0x98>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f7fd f82e 	bl	8000608 <__aeabi_dmul>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035bc:	f7fd f94e 	bl	800085c <__aeabi_ddiv>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f7fd fa30 	bl	8000a2c <__aeabi_d2iz>
 80035cc:	4603      	mov	r3, r0
 80035ce:	617b      	str	r3, [r7, #20]
			// 왕복 거리를 리턴해 주기 떄문에 /2를 해주는 것이다.
			printf("dis: %dcm\n", dis);
 80035d0:	6979      	ldr	r1, [r7, #20]
 80035d2:	4812      	ldr	r0, [pc, #72]	; (800361c <ultrasonic_processing+0xac>)
 80035d4:	f005 ffe4 	bl	80095a0 <iprintf>
			if (lcd_display_mode_flag==1)
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <ultrasonic_processing+0xb0>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10d      	bne.n	80035fc <ultrasonic_processing+0x8c>
			{
				sprintf(lcd_buff,"dis: %dcm", dis);
 80035e0:	463b      	mov	r3, r7
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	490f      	ldr	r1, [pc, #60]	; (8003624 <ultrasonic_processing+0xb4>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f006 f868 	bl	80096bc <siprintf>
				move_cursor(1,0);
 80035ec:	2100      	movs	r1, #0
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7fd ff82 	bl	80014f8 <move_cursor>
				lcd_string(lcd_buff);
 80035f4:	463b      	mov	r3, r7
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd ff69 	bl	80014ce <lcd_string>
			}
		}
	}
}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	f3af 8000 	nop.w
 8003608:	b020c49c 	.word	0xb020c49c
 800360c:	3fa16872 	.word	0x3fa16872
 8003610:	20000b28 	.word	0x20000b28
 8003614:	20000ba4 	.word	0x20000ba4
 8003618:	20000ba0 	.word	0x20000ba0
 800361c:	0800ac40 	.word	0x0800ac40
 8003620:	200000c8 	.word	0x200000c8
 8003624:	0800ac4c 	.word	0x0800ac4c

08003628 <make_trigger>:

void make_trigger()
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003632:	480b      	ldr	r0, [pc, #44]	; (8003660 <make_trigger+0x38>)
 8003634:	f000 ff66 	bl	8004504 <HAL_GPIO_WritePin>
	delay_us(2);
 8003638:	2002      	movs	r0, #2
 800363a:	f7fe fb4b 	bl	8001cd4 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);
 800363e:	2201      	movs	r2, #1
 8003640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003644:	4806      	ldr	r0, [pc, #24]	; (8003660 <make_trigger+0x38>)
 8003646:	f000 ff5d 	bl	8004504 <HAL_GPIO_WritePin>
	delay_us(10);
 800364a:	200a      	movs	r0, #10
 800364c:	f7fe fb42 	bl	8001cd4 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003656:	4802      	ldr	r0, [pc, #8]	; (8003660 <make_trigger+0x38>)
 8003658:	f000 ff54 	bl	8004504 <HAL_GPIO_WritePin>
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021400 	.word	0x40021400

08003664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800369c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800366a:	490e      	ldr	r1, [pc, #56]	; (80036a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800366c:	4a0e      	ldr	r2, [pc, #56]	; (80036a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003670:	e002      	b.n	8003678 <LoopCopyDataInit>

08003672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003676:	3304      	adds	r3, #4

08003678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800367c:	d3f9      	bcc.n	8003672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003680:	4c0b      	ldr	r4, [pc, #44]	; (80036b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003684:	e001      	b.n	800368a <LoopFillZerobss>

08003686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003688:	3204      	adds	r2, #4

0800368a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800368c:	d3fb      	bcc.n	8003686 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800368e:	f7ff fd8d 	bl	80031ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003692:	f005 ff59 	bl	8009548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003696:	f7fe fb35 	bl	8001d04 <main>
  bx  lr    
 800369a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800369c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80036a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80036a8:	0800ae1c 	.word	0x0800ae1c
  ldr r2, =_sbss
 80036ac:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80036b0:	20000bc0 	.word	0x20000bc0

080036b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b4:	e7fe      	b.n	80036b4 <ADC_IRQHandler>
	...

080036b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <HAL_Init+0x40>)
 80036c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <HAL_Init+0x40>)
 80036ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_Init+0x40>)
 80036da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e0:	2003      	movs	r0, #3
 80036e2:	f000 f94f 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e6:	2000      	movs	r0, #0
 80036e8:	f000 f808 	bl	80036fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036ec:	f7ff f878 	bl	80027e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00

080036fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x54>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_InitTick+0x58>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003712:	fbb3 f3f1 	udiv	r3, r3, r1
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f967 	bl	80039ee <HAL_SYSTICK_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e00e      	b.n	8003748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d80a      	bhi.n	8003746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003730:	2200      	movs	r2, #0
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f000 f92f 	bl	800399a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800373c:	4a06      	ldr	r2, [pc, #24]	; (8003758 <HAL_InitTick+0x5c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000003c 	.word	0x2000003c
 8003754:	20000044 	.word	0x20000044
 8003758:	20000040 	.word	0x20000040

0800375c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_IncTick+0x20>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_IncTick+0x24>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4413      	add	r3, r2
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HAL_IncTick+0x24>)
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000044 	.word	0x20000044
 8003780:	20000bac 	.word	0x20000bac

08003784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return uwTick;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_GetTick+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000bac 	.word	0x20000bac

0800379c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a4:	f7ff ffee 	bl	8003784 <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d005      	beq.n	80037c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_Delay+0x44>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037c2:	bf00      	nop
 80037c4:	f7ff ffde 	bl	8003784 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d8f7      	bhi.n	80037c4 <HAL_Delay+0x28>
  {
  }
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000044 	.word	0x20000044

080037e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003800:	4013      	ands	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800380c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	60d3      	str	r3, [r2, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <__NVIC_GetPriorityGrouping+0x18>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 0307 	and.w	r3, r3, #7
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	db0b      	blt.n	8003872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	f003 021f 	and.w	r2, r3, #31
 8003860:	4907      	ldr	r1, [pc, #28]	; (8003880 <__NVIC_EnableIRQ+0x38>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2001      	movs	r0, #1
 800386a:	fa00 f202 	lsl.w	r2, r0, r2
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	; (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	; (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003950:	d301      	bcc.n	8003956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <SysTick_Config+0x40>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395e:	210f      	movs	r1, #15
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f7ff ff8e 	bl	8003884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <SysTick_Config+0x40>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <SysTick_Config+0x40>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010

08003984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ff29 	bl	80037e4 <__NVIC_SetPriorityGrouping>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ac:	f7ff ff3e 	bl	800382c <__NVIC_GetPriorityGrouping>
 80039b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	6978      	ldr	r0, [r7, #20]
 80039b8:	f7ff ff8e 	bl	80038d8 <NVIC_EncodePriority>
 80039bc:	4602      	mov	r2, r0
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff5d 	bl	8003884 <__NVIC_SetPriority>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff31 	bl	8003848 <__NVIC_EnableIRQ>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ffa2 	bl	8003940 <SysTick_Config>
 80039fc:	4603      	mov	r3, r0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff feb6 	bl	8003784 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d008      	beq.n	8003a38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e052      	b.n	8003ade <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0216 	bic.w	r2, r2, #22
 8003a46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_DMA_Abort+0x62>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0208 	bic.w	r2, r2, #8
 8003a76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a88:	e013      	b.n	8003ab2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8a:	f7ff fe7b 	bl	8003784 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d90c      	bls.n	8003ab2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e015      	b.n	8003ade <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e4      	bne.n	8003a8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	223f      	movs	r2, #63	; 0x3f
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00c      	b.n	8003b1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06c      	b.n	8003c18 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2223      	movs	r2, #35	; 0x23
 8003b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fe fe6d 	bl	8002830 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_ETH_Init+0xf4>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <HAL_ETH_Init+0xf4>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	; 0x44
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_ETH_Init+0xf4>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b72:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_ETH_Init+0xf8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_ETH_Init+0xf8>)
 8003b78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b7c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_ETH_Init+0xf8>)
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4927      	ldr	r1, [pc, #156]	; (8003c24 <HAL_ETH_Init+0xf8>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_ETH_Init+0xf8>)
 8003b8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba8:	f7ff fdec 	bl	8003784 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bae:	e011      	b.n	8003bd4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003bb0:	f7ff fde8 	bl	8003784 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bbe:	d909      	bls.n	8003bd4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22e0      	movs	r2, #224	; 0xe0
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e021      	b.n	8003c18 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e4      	bne.n	8003bb0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f958 	bl	8003e9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9ff 	bl	8003ff0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa55 	bl	80040a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9bd 	bl	8003f80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40013800 	.word	0x40013800

08003c28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <ETH_SetMACConfig+0x15c>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	7c1b      	ldrb	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <ETH_SetMACConfig+0x28>
 8003c4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c4e:	e000      	b.n	8003c52 <ETH_SetMACConfig+0x2a>
 8003c50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	7c5b      	ldrb	r3, [r3, #17]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <ETH_SetMACConfig+0x38>
 8003c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c5e:	e000      	b.n	8003c62 <ETH_SetMACConfig+0x3a>
 8003c60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	7fdb      	ldrb	r3, [r3, #31]
 8003c6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	7f92      	ldrb	r2, [r2, #30]
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	d102      	bne.n	8003c86 <ETH_SetMACConfig+0x5e>
 8003c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c84:	e000      	b.n	8003c88 <ETH_SetMACConfig+0x60>
 8003c86:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7f1b      	ldrb	r3, [r3, #28]
 8003c8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	791b      	ldrb	r3, [r3, #4]
 8003c9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003c9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d102      	bne.n	8003cb0 <ETH_SetMACConfig+0x88>
 8003caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cae:	e000      	b.n	8003cb2 <ETH_SetMACConfig+0x8a>
 8003cb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	7bdb      	ldrb	r3, [r3, #15]
 8003cb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7ff fd5a 	bl	800379c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d101      	bne.n	8003d16 <ETH_SetMACConfig+0xee>
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	e000      	b.n	8003d18 <ETH_SetMACConfig+0xf0>
 8003d16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d26:	2a01      	cmp	r2, #1
 8003d28:	d101      	bne.n	8003d2e <ETH_SetMACConfig+0x106>
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	e000      	b.n	8003d30 <ETH_SetMACConfig+0x108>
 8003d2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d38:	2a01      	cmp	r2, #1
 8003d3a:	d101      	bne.n	8003d40 <ETH_SetMACConfig+0x118>
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	e000      	b.n	8003d42 <ETH_SetMACConfig+0x11a>
 8003d40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d4a:	2a01      	cmp	r2, #1
 8003d4c:	d101      	bne.n	8003d52 <ETH_SetMACConfig+0x12a>
 8003d4e:	2202      	movs	r2, #2
 8003d50:	e000      	b.n	8003d54 <ETH_SetMACConfig+0x12c>
 8003d52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d54:	4313      	orrs	r3, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7ff fd15 	bl	800379c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	ff20810f 	.word	0xff20810f

08003d88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <ETH_SetDMAConfig+0x110>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7b1b      	ldrb	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <ETH_SetDMAConfig+0x2c>
 8003dae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003db2:	e000      	b.n	8003db6 <ETH_SetDMAConfig+0x2e>
 8003db4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	7b5b      	ldrb	r3, [r3, #13]
 8003dba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	7f52      	ldrb	r2, [r2, #29]
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d102      	bne.n	8003dcc <ETH_SetDMAConfig+0x44>
 8003dc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dca:	e000      	b.n	8003dce <ETH_SetDMAConfig+0x46>
 8003dcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7b9b      	ldrb	r3, [r3, #14]
 8003dd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ddc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	7f1b      	ldrb	r3, [r3, #28]
 8003de2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003de4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	7f9b      	ldrb	r3, [r3, #30]
 8003dea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003df2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dfa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7ff fcbc 	bl	800379c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	791b      	ldrb	r3, [r3, #4]
 8003e36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7ff fc8d 	bl	800379c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	f8de3f23 	.word	0xf8de3f23

08003e9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b0a6      	sub	sp, #152	; 0x98
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe86 	bl	8003c28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f6c:	f107 0308 	add.w	r3, r7, #8
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff08 	bl	8003d88 <ETH_SetDMAConfig>
}
 8003f78:	bf00      	nop
 8003f7a:	3798      	adds	r7, #152	; 0x98
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3305      	adds	r3, #5
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	3204      	adds	r2, #4
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <ETH_MACAddressConfig+0x68>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3303      	adds	r3, #3
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	061a      	lsls	r2, r3, #24
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <ETH_MACAddressConfig+0x6c>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	6013      	str	r3, [r2, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40028040 	.word	0x40028040
 8003fec:	40028044 	.word	0x40028044

08003ff0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e03e      	b.n	800407c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	3206      	adds	r2, #6
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d80c      	bhi.n	8004060 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e004      	b.n	800406a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	461a      	mov	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d9bd      	bls.n	8003ffe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004094:	611a      	str	r2, [r3, #16]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e046      	b.n	800413e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6919      	ldr	r1, [r3, #16]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2200      	movs	r2, #0
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80040f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	3212      	adds	r2, #18
 800410a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d80c      	bhi.n	800412e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	60da      	str	r2, [r3, #12]
 800412c:	e004      	b.n	8004138 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d9b5      	bls.n	80040b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	60da      	str	r2, [r3, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e177      	b.n	8004488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f040 8166 	bne.w	8004482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d005      	beq.n	80041ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d130      	bne.n	8004230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 0201 	and.w	r2, r3, #1
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b03      	cmp	r3, #3
 800423a:	d017      	beq.n	800426c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	2203      	movs	r2, #3
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d123      	bne.n	80042c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	08da      	lsrs	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3208      	adds	r2, #8
 8004280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	220f      	movs	r2, #15
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	08da      	lsrs	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3208      	adds	r2, #8
 80042ba:	69b9      	ldr	r1, [r7, #24]
 80042bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	2203      	movs	r2, #3
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0203 	and.w	r2, r3, #3
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80c0 	beq.w	8004482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_GPIO_Init+0x324>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4a65      	ldr	r2, [pc, #404]	; (80044a0 <HAL_GPIO_Init+0x324>)
 800430c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004310:	6453      	str	r3, [r2, #68]	; 0x44
 8004312:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_GPIO_Init+0x324>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800431e:	4a61      	ldr	r2, [pc, #388]	; (80044a4 <HAL_GPIO_Init+0x328>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <HAL_GPIO_Init+0x32c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d037      	beq.n	80043ba <HAL_GPIO_Init+0x23e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a57      	ldr	r2, [pc, #348]	; (80044ac <HAL_GPIO_Init+0x330>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d031      	beq.n	80043b6 <HAL_GPIO_Init+0x23a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a56      	ldr	r2, [pc, #344]	; (80044b0 <HAL_GPIO_Init+0x334>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <HAL_GPIO_Init+0x236>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <HAL_GPIO_Init+0x338>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d025      	beq.n	80043ae <HAL_GPIO_Init+0x232>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a54      	ldr	r2, [pc, #336]	; (80044b8 <HAL_GPIO_Init+0x33c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <HAL_GPIO_Init+0x22e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a53      	ldr	r2, [pc, #332]	; (80044bc <HAL_GPIO_Init+0x340>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x22a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a52      	ldr	r2, [pc, #328]	; (80044c0 <HAL_GPIO_Init+0x344>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x226>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a51      	ldr	r2, [pc, #324]	; (80044c4 <HAL_GPIO_Init+0x348>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x222>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a50      	ldr	r2, [pc, #320]	; (80044c8 <HAL_GPIO_Init+0x34c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x21e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4f      	ldr	r2, [pc, #316]	; (80044cc <HAL_GPIO_Init+0x350>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x21a>
 8004392:	2309      	movs	r3, #9
 8004394:	e012      	b.n	80043bc <HAL_GPIO_Init+0x240>
 8004396:	230a      	movs	r3, #10
 8004398:	e010      	b.n	80043bc <HAL_GPIO_Init+0x240>
 800439a:	2308      	movs	r3, #8
 800439c:	e00e      	b.n	80043bc <HAL_GPIO_Init+0x240>
 800439e:	2307      	movs	r3, #7
 80043a0:	e00c      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043a2:	2306      	movs	r3, #6
 80043a4:	e00a      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e008      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e006      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e004      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e002      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043ba:	2300      	movs	r3, #0
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f002 0203 	and.w	r2, r2, #3
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	4093      	lsls	r3, r2
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043cc:	4935      	ldr	r1, [pc, #212]	; (80044a4 <HAL_GPIO_Init+0x328>)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	3302      	adds	r3, #2
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_GPIO_Init+0x354>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043fe:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004404:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004428:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <HAL_GPIO_Init+0x354>)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_GPIO_Init+0x354>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800447c:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <HAL_GPIO_Init+0x354>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b0f      	cmp	r3, #15
 800448c:	f67f ae84 	bls.w	8004198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3724      	adds	r7, #36	; 0x24
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40013800 	.word	0x40013800
 80044a8:	40020000 	.word	0x40020000
 80044ac:	40020400 	.word	0x40020400
 80044b0:	40020800 	.word	0x40020800
 80044b4:	40020c00 	.word	0x40020c00
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40021400 	.word	0x40021400
 80044c0:	40021800 	.word	0x40021800
 80044c4:	40021c00 	.word	0x40021c00
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40022400 	.word	0x40022400
 80044d0:	40013c00 	.word	0x40013c00

080044d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	e001      	b.n	80044f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004520:	e003      	b.n	800452a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4013      	ands	r3, r2
 800454e:	041a      	lsls	r2, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43d9      	mvns	r1, r3
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	400b      	ands	r3, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	619a      	str	r2, [r3, #24]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e12b      	b.n	80047d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fe fa12 	bl	80029bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	; 0x24
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045d0:	f001 fa20 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 80045d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4a81      	ldr	r2, [pc, #516]	; (80047e0 <HAL_I2C_Init+0x274>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d807      	bhi.n	80045f0 <HAL_I2C_Init+0x84>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a80      	ldr	r2, [pc, #512]	; (80047e4 <HAL_I2C_Init+0x278>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	bf94      	ite	ls
 80045e8:	2301      	movls	r3, #1
 80045ea:	2300      	movhi	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e006      	b.n	80045fe <HAL_I2C_Init+0x92>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a7d      	ldr	r2, [pc, #500]	; (80047e8 <HAL_I2C_Init+0x27c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	bf94      	ite	ls
 80045f8:	2301      	movls	r3, #1
 80045fa:	2300      	movhi	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0e7      	b.n	80047d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a78      	ldr	r2, [pc, #480]	; (80047ec <HAL_I2C_Init+0x280>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0c9b      	lsrs	r3, r3, #18
 8004610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a6a      	ldr	r2, [pc, #424]	; (80047e0 <HAL_I2C_Init+0x274>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <HAL_I2C_Init+0xd4>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3301      	adds	r3, #1
 800463e:	e009      	b.n	8004654 <HAL_I2C_Init+0xe8>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	4a69      	ldr	r2, [pc, #420]	; (80047f0 <HAL_I2C_Init+0x284>)
 800464c:	fba2 2303 	umull	r2, r3, r2, r3
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	3301      	adds	r3, #1
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	430b      	orrs	r3, r1
 800465a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	495c      	ldr	r1, [pc, #368]	; (80047e0 <HAL_I2C_Init+0x274>)
 8004670:	428b      	cmp	r3, r1
 8004672:	d819      	bhi.n	80046a8 <HAL_I2C_Init+0x13c>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e59      	subs	r1, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004682:	1c59      	adds	r1, r3, #1
 8004684:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004688:	400b      	ands	r3, r1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_I2C_Init+0x138>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1e59      	subs	r1, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	fbb1 f3f3 	udiv	r3, r1, r3
 800469c:	3301      	adds	r3, #1
 800469e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a2:	e051      	b.n	8004748 <HAL_I2C_Init+0x1dc>
 80046a4:	2304      	movs	r3, #4
 80046a6:	e04f      	b.n	8004748 <HAL_I2C_Init+0x1dc>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d111      	bne.n	80046d4 <HAL_I2C_Init+0x168>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1e58      	subs	r0, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	440b      	add	r3, r1
 80046be:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c2:	3301      	adds	r3, #1
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e012      	b.n	80046fa <HAL_I2C_Init+0x18e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1e58      	subs	r0, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	0099      	lsls	r1, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ea:	3301      	adds	r3, #1
 80046ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Init+0x196>
 80046fe:	2301      	movs	r3, #1
 8004700:	e022      	b.n	8004748 <HAL_I2C_Init+0x1dc>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10e      	bne.n	8004728 <HAL_I2C_Init+0x1bc>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1e58      	subs	r0, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	440b      	add	r3, r1
 8004718:	fbb0 f3f3 	udiv	r3, r0, r3
 800471c:	3301      	adds	r3, #1
 800471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	e00f      	b.n	8004748 <HAL_I2C_Init+0x1dc>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	0099      	lsls	r1, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	fbb0 f3f3 	udiv	r3, r0, r3
 800473e:	3301      	adds	r3, #1
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	6809      	ldr	r1, [r1, #0]
 800474c:	4313      	orrs	r3, r2
 800474e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6911      	ldr	r1, [r2, #16]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	4311      	orrs	r1, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	430b      	orrs	r3, r1
 800478a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	000186a0 	.word	0x000186a0
 80047e4:	001e847f 	.word	0x001e847f
 80047e8:	003d08ff 	.word	0x003d08ff
 80047ec:	431bde83 	.word	0x431bde83
 80047f0:	10624dd3 	.word	0x10624dd3

080047f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	817b      	strh	r3, [r7, #10]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004808:	f7fe ffbc 	bl	8003784 <HAL_GetTick>
 800480c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	f040 80e0 	bne.w	80049dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2319      	movs	r3, #25
 8004822:	2201      	movs	r2, #1
 8004824:	4970      	ldr	r1, [pc, #448]	; (80049e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f964 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
 8004834:	e0d3      	b.n	80049de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_I2C_Master_Transmit+0x50>
 8004840:	2302      	movs	r3, #2
 8004842:	e0cc      	b.n	80049de <HAL_I2C_Master_Transmit+0x1ea>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d007      	beq.n	800486a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2221      	movs	r2, #33	; 0x21
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2210      	movs	r2, #16
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	893a      	ldrh	r2, [r7, #8]
 800489a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a50      	ldr	r2, [pc, #320]	; (80049ec <HAL_I2C_Master_Transmit+0x1f8>)
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048ac:	8979      	ldrh	r1, [r7, #10]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f89c 	bl	80049f0 <I2C_MasterRequestWrite>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e08d      	b.n	80049de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048d8:	e066      	b.n	80049a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	6a39      	ldr	r1, [r7, #32]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f9de 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d107      	bne.n	8004902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e06b      	b.n	80049de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_I2C_Master_Transmit+0x188>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	d017      	beq.n	800497c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	6a39      	ldr	r1, [r7, #32]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f9ce 	bl	8004d22 <I2C_WaitOnBTFFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	2b04      	cmp	r3, #4
 8004992:	d107      	bne.n	80049a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e01a      	b.n	80049de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d194      	bne.n	80048da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	00100002 	.word	0x00100002
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	460b      	mov	r3, r1
 80049fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d006      	beq.n	8004a1a <I2C_MasterRequestWrite+0x2a>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d003      	beq.n	8004a1a <I2C_MasterRequestWrite+0x2a>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a18:	d108      	bne.n	8004a2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e00b      	b.n	8004a44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	2b12      	cmp	r3, #18
 8004a32:	d107      	bne.n	8004a44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f84f 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	d103      	bne.n	8004a74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e035      	b.n	8004ae4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a80:	d108      	bne.n	8004a94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a90:	611a      	str	r2, [r3, #16]
 8004a92:	e01b      	b.n	8004acc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a94:	897b      	ldrh	r3, [r7, #10]
 8004a96:	11db      	asrs	r3, r3, #7
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0306 	and.w	r3, r3, #6
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f063 030f 	orn	r3, r3, #15
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	490e      	ldr	r1, [pc, #56]	; (8004aec <I2C_MasterRequestWrite+0xfc>)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f875 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e010      	b.n	8004ae4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ac2:	897b      	ldrh	r3, [r7, #10]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4907      	ldr	r1, [pc, #28]	; (8004af0 <I2C_MasterRequestWrite+0x100>)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f865 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	00010008 	.word	0x00010008
 8004af0:	00010002 	.word	0x00010002

08004af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b04:	e025      	b.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d021      	beq.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fe fe39 	bl	8003784 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d116      	bne.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e023      	b.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10d      	bne.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	e00c      	b.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d0b6      	beq.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb0:	e051      	b.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d123      	bne.n	8004c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0204 	orr.w	r2, r3, #4
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e046      	b.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d021      	beq.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fe fdb7 	bl	8003784 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d116      	bne.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e020      	b.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10c      	bne.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e00b      	b.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	43da      	mvns	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d18d      	bne.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cac:	e02d      	b.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f878 	bl	8004da4 <I2C_IsAcknowledgeFailed>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e02d      	b.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d021      	beq.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fe fd5d 	bl	8003784 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d116      	bne.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e007      	b.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d1ca      	bne.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2e:	e02d      	b.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f837 	bl	8004da4 <I2C_IsAcknowledgeFailed>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e02d      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d021      	beq.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fe fd1c 	bl	8003784 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d1ca      	bne.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dba:	d11b      	bne.n	8004df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f043 0204 	orr.w	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d129      	bne.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0210 	bic.w	r2, r2, #16
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d12a      	bne.n	8004eea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	f023 030f 	bic.w	r3, r3, #15
 8004eba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	89fb      	ldrh	r3, [r7, #14]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	89fa      	ldrh	r2, [r7, #14]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efa:	b08f      	sub	sp, #60	; 0x3c
 8004efc:	af0a      	add	r7, sp, #40	; 0x28
 8004efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e10f      	b.n	800512a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fd ffc7 	bl	8002eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f004 f852 	bl	8008ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	687e      	ldr	r6, [r7, #4]
 8004f56:	466d      	mov	r5, sp
 8004f58:	f106 0410 	add.w	r4, r6, #16
 8004f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f6c:	1d33      	adds	r3, r6, #4
 8004f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f70:	6838      	ldr	r0, [r7, #0]
 8004f72:	f003 ffdd 	bl	8008f30 <USB_CoreInit>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0d0      	b.n	800512a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f004 f840 	bl	8009014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]
 8004f98:	e04a      	b.n	8005030 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f9a:	7bfa      	ldrb	r2, [r7, #15]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	333d      	adds	r3, #61	; 0x3d
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	333c      	adds	r3, #60	; 0x3c
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	b298      	uxth	r0, r3
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3344      	adds	r3, #68	; 0x44
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3340      	adds	r3, #64	; 0x40
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fee:	7bfa      	ldrb	r2, [r7, #15]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3348      	adds	r3, #72	; 0x48
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	334c      	adds	r3, #76	; 0x4c
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3354      	adds	r3, #84	; 0x54
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	3301      	adds	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d3af      	bcc.n	8004f9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
 800503e:	e044      	b.n	80050ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	3301      	adds	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d3b5      	bcc.n	8005040 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	687e      	ldr	r6, [r7, #4]
 80050dc:	466d      	mov	r5, sp
 80050de:	f106 0410 	add.w	r4, r6, #16
 80050e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80050f2:	1d33      	adds	r3, r6, #4
 80050f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f6:	6838      	ldr	r0, [r7, #0]
 80050f8:	f003 ffd8 	bl	80090ac <USB_DevInit>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00d      	b.n	800512a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f004 f9a3 	bl	800946e <USB_DevDisconnect>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e267      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d075      	beq.n	800523e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005152:	4b88      	ldr	r3, [pc, #544]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b04      	cmp	r3, #4
 800515c:	d00c      	beq.n	8005178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800515e:	4b85      	ldr	r3, [pc, #532]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005166:	2b08      	cmp	r3, #8
 8005168:	d112      	bne.n	8005190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516a:	4b82      	ldr	r3, [pc, #520]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005176:	d10b      	bne.n	8005190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	4b7e      	ldr	r3, [pc, #504]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05b      	beq.n	800523c <HAL_RCC_OscConfig+0x108>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d157      	bne.n	800523c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e242      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005198:	d106      	bne.n	80051a8 <HAL_RCC_OscConfig+0x74>
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a75      	ldr	r2, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e01d      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x98>
 80051b2:	4b70      	ldr	r3, [pc, #448]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a6f      	ldr	r2, [pc, #444]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b6d      	ldr	r3, [pc, #436]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6c      	ldr	r2, [pc, #432]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
 80051cc:	4b69      	ldr	r3, [pc, #420]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a68      	ldr	r2, [pc, #416]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	4b66      	ldr	r3, [pc, #408]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a65      	ldr	r2, [pc, #404]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80051de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d013      	beq.n	8005214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7fe faca 	bl	8003784 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f4:	f7fe fac6 	bl	8003784 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	; 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e207      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005206:	4b5b      	ldr	r3, [pc, #364]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0xc0>
 8005212:	e014      	b.n	800523e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fe fab6 	bl	8003784 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800521c:	f7fe fab2 	bl	8003784 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	; 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e1f3      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522e:	4b51      	ldr	r3, [pc, #324]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0xe8>
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d063      	beq.n	8005312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800524a:	4b4a      	ldr	r3, [pc, #296]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005256:	4b47      	ldr	r3, [pc, #284]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800525e:	2b08      	cmp	r3, #8
 8005260:	d11c      	bne.n	800529c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005262:	4b44      	ldr	r3, [pc, #272]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d116      	bne.n	800529c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_RCC_OscConfig+0x152>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e1c7      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	4b3b      	ldr	r3, [pc, #236]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4937      	ldr	r1, [pc, #220]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529a:	e03a      	b.n	8005312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a4:	4b34      	ldr	r3, [pc, #208]	; (8005378 <HAL_RCC_OscConfig+0x244>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fe fa6b 	bl	8003784 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b2:	f7fe fa67 	bl	8003784 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e1a8      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b28      	ldr	r3, [pc, #160]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4925      	ldr	r1, [pc, #148]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
 80052e4:	e015      	b.n	8005312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <HAL_RCC_OscConfig+0x244>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fe fa4a 	bl	8003784 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f4:	f7fe fa46 	bl	8003784 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e187      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005306:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d036      	beq.n	800538c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0x248>)
 8005328:	2201      	movs	r2, #1
 800532a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fe fa2a 	bl	8003784 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005334:	f7fe fa26 	bl	8003784 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e167      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCC_OscConfig+0x240>)
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x200>
 8005352:	e01b      	b.n	800538c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x248>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7fe fa13 	bl	8003784 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005360:	e00e      	b.n	8005380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005362:	f7fe fa0f 	bl	8003784 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d907      	bls.n	8005380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e150      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
 8005374:	40023800 	.word	0x40023800
 8005378:	42470000 	.word	0x42470000
 800537c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b88      	ldr	r3, [pc, #544]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ea      	bne.n	8005362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8097 	beq.w	80054c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539e:	4b81      	ldr	r3, [pc, #516]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	4b7d      	ldr	r3, [pc, #500]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	4a7c      	ldr	r2, [pc, #496]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ba:	4b7a      	ldr	r3, [pc, #488]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b77      	ldr	r3, [pc, #476]	; (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d118      	bne.n	8005408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053d6:	4b74      	ldr	r3, [pc, #464]	; (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a73      	ldr	r2, [pc, #460]	; (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e2:	f7fe f9cf 	bl	8003784 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fe f9cb 	bl	8003784 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e10c      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fc:	4b6a      	ldr	r3, [pc, #424]	; (80055a8 <HAL_RCC_OscConfig+0x474>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d106      	bne.n	800541e <HAL_RCC_OscConfig+0x2ea>
 8005410:	4b64      	ldr	r3, [pc, #400]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	4a63      	ldr	r2, [pc, #396]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	6713      	str	r3, [r2, #112]	; 0x70
 800541c:	e01c      	b.n	8005458 <HAL_RCC_OscConfig+0x324>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b05      	cmp	r3, #5
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x30c>
 8005426:	4b5f      	ldr	r3, [pc, #380]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	4a5e      	ldr	r2, [pc, #376]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	6713      	str	r3, [r2, #112]	; 0x70
 8005432:	4b5c      	ldr	r3, [pc, #368]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	4a5b      	ldr	r2, [pc, #364]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6713      	str	r3, [r2, #112]	; 0x70
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0x324>
 8005440:	4b58      	ldr	r3, [pc, #352]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	4a57      	ldr	r2, [pc, #348]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	4b55      	ldr	r3, [pc, #340]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	4a54      	ldr	r2, [pc, #336]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005452:	f023 0304 	bic.w	r3, r3, #4
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fe f990 	bl	8003784 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005466:	e00a      	b.n	800547e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f7fe f98c 	bl	8003784 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	; 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e0cb      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547e:	4b49      	ldr	r3, [pc, #292]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ee      	beq.n	8005468 <HAL_RCC_OscConfig+0x334>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548c:	f7fe f97a 	bl	8003784 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005492:	e00a      	b.n	80054aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fe f976 	bl	8003784 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0b5      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054aa:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1ee      	bne.n	8005494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054bc:	4b39      	ldr	r3, [pc, #228]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	4a38      	ldr	r2, [pc, #224]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a1 	beq.w	8005614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054d2:	4b34      	ldr	r3, [pc, #208]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d05c      	beq.n	8005598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d141      	bne.n	800556a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b31      	ldr	r3, [pc, #196]	; (80055ac <HAL_RCC_OscConfig+0x478>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7fe f94a 	bl	8003784 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f4:	f7fe f946 	bl	8003784 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e087      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	4b27      	ldr	r3, [pc, #156]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	3b01      	subs	r3, #1
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	491b      	ldr	r1, [pc, #108]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <HAL_RCC_OscConfig+0x478>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005542:	f7fe f91f 	bl	8003784 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800554a:	f7fe f91b 	bl	8003784 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e05c      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555c:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x416>
 8005568:	e054      	b.n	8005614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_RCC_OscConfig+0x478>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7fe f908 	bl	8003784 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005578:	f7fe f904 	bl	8003784 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e045      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_OscConfig+0x470>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x444>
 8005596:	e03d      	b.n	8005614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e038      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	40007000 	.word	0x40007000
 80055ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <HAL_RCC_OscConfig+0x4ec>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d028      	beq.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d121      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d11a      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800

08005624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0cc      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005638:	4b68      	ldr	r3, [pc, #416]	; (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d90c      	bls.n	8005660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b65      	ldr	r3, [pc, #404]	; (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b63      	ldr	r3, [pc, #396]	; (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0b8      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005678:	4b59      	ldr	r3, [pc, #356]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a58      	ldr	r2, [pc, #352]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005690:	4b53      	ldr	r3, [pc, #332]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4a52      	ldr	r2, [pc, #328]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800569a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800569c:	4b50      	ldr	r3, [pc, #320]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	494d      	ldr	r1, [pc, #308]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d044      	beq.n	8005744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b47      	ldr	r3, [pc, #284]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d119      	bne.n	8005702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e07f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d003      	beq.n	80056e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e2:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e06f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f2:	4b3b      	ldr	r3, [pc, #236]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e067      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005702:	4b37      	ldr	r3, [pc, #220]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f023 0203 	bic.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4934      	ldr	r1, [pc, #208]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005714:	f7fe f836 	bl	8003784 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	e00a      	b.n	8005732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571c:	f7fe f832 	bl	8003784 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e04f      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 020c 	and.w	r2, r3, #12
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	429a      	cmp	r2, r3
 8005742:	d1eb      	bne.n	800571c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005744:	4b25      	ldr	r3, [pc, #148]	; (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d20c      	bcs.n	800576c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b22      	ldr	r3, [pc, #136]	; (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b20      	ldr	r3, [pc, #128]	; (80057dc <HAL_RCC_ClockConfig+0x1b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e032      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005778:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4916      	ldr	r1, [pc, #88]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005796:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	490e      	ldr	r1, [pc, #56]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057aa:	f000 f821 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 80057ae:	4602      	mov	r2, r0
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	490a      	ldr	r1, [pc, #40]	; (80057e4 <HAL_RCC_ClockConfig+0x1c0>)
 80057bc:	5ccb      	ldrb	r3, [r1, r3]
 80057be:	fa22 f303 	lsr.w	r3, r2, r3
 80057c2:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <HAL_RCC_ClockConfig+0x1c4>)
 80057c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCC_ClockConfig+0x1c8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fd ff96 	bl	80036fc <HAL_InitTick>

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40023c00 	.word	0x40023c00
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0800ac58 	.word	0x0800ac58
 80057e8:	2000003c 	.word	0x2000003c
 80057ec:	20000040 	.word	0x20000040

080057f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f4:	b094      	sub	sp, #80	; 0x50
 80057f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
 80057fc:	2300      	movs	r3, #0
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	2300      	movs	r3, #0
 8005802:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005808:	4b79      	ldr	r3, [pc, #484]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b08      	cmp	r3, #8
 8005812:	d00d      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0x40>
 8005814:	2b08      	cmp	r3, #8
 8005816:	f200 80e1 	bhi.w	80059dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0x34>
 800581e:	2b04      	cmp	r3, #4
 8005820:	d003      	beq.n	800582a <HAL_RCC_GetSysClockFreq+0x3a>
 8005822:	e0db      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005824:	4b73      	ldr	r3, [pc, #460]	; (80059f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005828:	e0db      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800582a:	4b73      	ldr	r3, [pc, #460]	; (80059f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800582c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800582e:	e0d8      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005830:	4b6f      	ldr	r3, [pc, #444]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800583a:	4b6d      	ldr	r3, [pc, #436]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d063      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005846:	4b6a      	ldr	r3, [pc, #424]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	2200      	movs	r2, #0
 800584e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005850:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
 800585e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	f04f 0000 	mov.w	r0, #0
 800586a:	f04f 0100 	mov.w	r1, #0
 800586e:	0159      	lsls	r1, r3, #5
 8005870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005874:	0150      	lsls	r0, r2, #5
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4621      	mov	r1, r4
 800587c:	1a51      	subs	r1, r2, r1
 800587e:	6139      	str	r1, [r7, #16]
 8005880:	4629      	mov	r1, r5
 8005882:	eb63 0301 	sbc.w	r3, r3, r1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005894:	4659      	mov	r1, fp
 8005896:	018b      	lsls	r3, r1, #6
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800589e:	4651      	mov	r1, sl
 80058a0:	018a      	lsls	r2, r1, #6
 80058a2:	4651      	mov	r1, sl
 80058a4:	ebb2 0801 	subs.w	r8, r2, r1
 80058a8:	4659      	mov	r1, fp
 80058aa:	eb63 0901 	sbc.w	r9, r3, r1
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058c2:	4690      	mov	r8, r2
 80058c4:	4699      	mov	r9, r3
 80058c6:	4623      	mov	r3, r4
 80058c8:	eb18 0303 	adds.w	r3, r8, r3
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	462b      	mov	r3, r5
 80058d0:	eb49 0303 	adc.w	r3, r9, r3
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058e2:	4629      	mov	r1, r5
 80058e4:	024b      	lsls	r3, r1, #9
 80058e6:	4621      	mov	r1, r4
 80058e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ec:	4621      	mov	r1, r4
 80058ee:	024a      	lsls	r2, r1, #9
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f6:	2200      	movs	r2, #0
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005900:	f7fb f8bc 	bl	8000a7c <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4613      	mov	r3, r2
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	e058      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590e:	4b38      	ldr	r3, [pc, #224]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	099b      	lsrs	r3, r3, #6
 8005914:	2200      	movs	r2, #0
 8005916:	4618      	mov	r0, r3
 8005918:	4611      	mov	r1, r2
 800591a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	f04f 0000 	mov.w	r0, #0
 8005930:	f04f 0100 	mov.w	r1, #0
 8005934:	0159      	lsls	r1, r3, #5
 8005936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800593a:	0150      	lsls	r0, r2, #5
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4641      	mov	r1, r8
 8005942:	ebb2 0a01 	subs.w	sl, r2, r1
 8005946:	4649      	mov	r1, r9
 8005948:	eb63 0b01 	sbc.w	fp, r3, r1
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800595c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005960:	ebb2 040a 	subs.w	r4, r2, sl
 8005964:	eb63 050b 	sbc.w	r5, r3, fp
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	00eb      	lsls	r3, r5, #3
 8005972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005976:	00e2      	lsls	r2, r4, #3
 8005978:	4614      	mov	r4, r2
 800597a:	461d      	mov	r5, r3
 800597c:	4643      	mov	r3, r8
 800597e:	18e3      	adds	r3, r4, r3
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	464b      	mov	r3, r9
 8005984:	eb45 0303 	adc.w	r3, r5, r3
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005996:	4629      	mov	r1, r5
 8005998:	028b      	lsls	r3, r1, #10
 800599a:	4621      	mov	r1, r4
 800599c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059a0:	4621      	mov	r1, r4
 80059a2:	028a      	lsls	r2, r1, #10
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059aa:	2200      	movs	r2, #0
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	61fa      	str	r2, [r7, #28]
 80059b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059b4:	f7fb f862 	bl	8000a7c <__aeabi_uldivmod>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4613      	mov	r3, r2
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	3301      	adds	r3, #1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059da:	e002      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80059de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3750      	adds	r7, #80	; 0x50
 80059e8:	46bd      	mov	sp, r7
 80059ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800
 80059f4:	00f42400 	.word	0x00f42400
 80059f8:	007a1200 	.word	0x007a1200

080059fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	2000003c 	.word	0x2000003c

08005a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a18:	f7ff fff0 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0a9b      	lsrs	r3, r3, #10
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4903      	ldr	r1, [pc, #12]	; (8005a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40023800 	.word	0x40023800
 8005a38:	0800ac68 	.word	0x0800ac68

08005a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a40:	f7ff ffdc 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	0b5b      	lsrs	r3, r3, #13
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4903      	ldr	r1, [pc, #12]	; (8005a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	0800ac68 	.word	0x0800ac68

08005a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d075      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a98:	4b91      	ldr	r3, [pc, #580]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a9e:	f7fd fe71 	bl	8003784 <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aa6:	f7fd fe6d 	bl	8003784 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e189      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ab8:	4b8a      	ldr	r3, [pc, #552]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	019a      	lsls	r2, r3, #6
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	071b      	lsls	r3, r3, #28
 8005adc:	4981      	ldr	r1, [pc, #516]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005af0:	4b7c      	ldr	r3, [pc, #496]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af6:	0f1b      	lsrs	r3, r3, #28
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	019a      	lsls	r2, r3, #6
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	071b      	lsls	r3, r3, #28
 8005b10:	4974      	ldr	r1, [pc, #464]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b18:	4b72      	ldr	r3, [pc, #456]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1e:	f023 021f 	bic.w	r2, r3, #31
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	496e      	ldr	r1, [pc, #440]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	019a      	lsls	r2, r3, #6
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	071b      	lsls	r3, r3, #28
 8005b50:	4964      	ldr	r1, [pc, #400]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b58:	4b61      	ldr	r3, [pc, #388]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b5e:	f7fd fe11 	bl	8003784 <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b66:	f7fd fe0d 	bl	8003784 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e129      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b78:	4b5a      	ldr	r3, [pc, #360]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d079      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b9c:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fd fdef 	bl	8003784 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005baa:	f7fd fdeb 	bl	8003784 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e107      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc8:	d0ef      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d020      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	0f1b      	lsrs	r3, r3, #28
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	019a      	lsls	r2, r3, #6
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	071b      	lsls	r3, r3, #28
 8005bf6:	493b      	ldr	r1, [pc, #236]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bfe:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	4934      	ldr	r1, [pc, #208]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01e      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c24:	4b2f      	ldr	r3, [pc, #188]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	0e1b      	lsrs	r3, r3, #24
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	019a      	lsls	r2, r3, #6
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	071b      	lsls	r3, r3, #28
 8005c44:	4927      	ldr	r1, [pc, #156]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	4922      	ldr	r1, [pc, #136]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c62:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c68:	f7fd fd8c 	bl	8003784 <HAL_GetTick>
 8005c6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c70:	f7fd fd88 	bl	8003784 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0a4      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c82:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8e:	d1ef      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 808b 	beq.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	6413      	str	r3, [r2, #64]	; 0x40
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc6:	f7fd fd5d 	bl	8003784 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ccc:	e010      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cce:	f7fd fd59 	bl	8003784 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d909      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e075      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ce0:	42470068 	.word	0x42470068
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	42470070 	.word	0x42470070
 8005cec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cf0:	4b38      	ldr	r3, [pc, #224]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0e8      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cfc:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02f      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d028      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d24:	4b2d      	ldr	r3, [pc, #180]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d2a:	4b2c      	ldr	r3, [pc, #176]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d30:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d36:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d114      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fd fd1f 	bl	8003784 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fd fd1b 	bl	8003784 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e035      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ee      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d78:	d10d      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d7a:	4b17      	ldr	r3, [pc, #92]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8e:	4912      	ldr	r1, [pc, #72]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]
 8005d94:	e005      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005da0:	6093      	str	r3, [r2, #8]
 8005da2:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	490a      	ldr	r1, [pc, #40]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005dc8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	42470e40 	.word	0x42470e40
 8005de0:	424711e0 	.word	0x424711e0

08005de4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e066      	b.n	8005ec8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7f5b      	ldrb	r3, [r3, #29]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fc fe1e 	bl	8002a4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	22ca      	movs	r2, #202	; 0xca
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2253      	movs	r2, #83	; 0x53
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa45 	bl	80062b6 <RTC_EnterInitMode>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d12c      	bne.n	8005e90 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6899      	ldr	r1, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68d2      	ldr	r2, [r2, #12]
 8005e70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6919      	ldr	r1, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	041a      	lsls	r2, r3, #16
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa4c 	bl	8006324 <RTC_ExitInitMode>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d113      	bne.n	8005ebe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	22ff      	movs	r2, #255	; 0xff
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	7f1b      	ldrb	r3, [r3, #28]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_RTC_SetTime+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e087      	b.n	8005ffc <HAL_RTC_SetTime+0x12c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d126      	bne.n	8005f4c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fa29 	bl	800636e <RTC_ByteToBcd2>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fa22 	bl	800636e <RTC_ByteToBcd2>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f2e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	789b      	ldrb	r3, [r3, #2]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fa1a 	bl	800636e <RTC_ByteToBcd2>
 8005f3a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f3c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	78db      	ldrb	r3, [r3, #3]
 8005f44:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e018      	b.n	8005f7e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f6c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f72:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	78db      	ldrb	r3, [r3, #3]
 8005f78:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	22ca      	movs	r2, #202	; 0xca
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2253      	movs	r2, #83	; 0x53
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f991 	bl	80062b6 <RTC_EnterInitMode>
 8005f94:	4603      	mov	r3, r0
 8005f96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d120      	bne.n	8005fe0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fa8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6899      	ldr	r1, [r3, #8]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f9a4 	bl	8006324 <RTC_ExitInitMode>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	771a      	strb	r2, [r3, #28]

  return status;
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}

08006004 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006036:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800603a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006064:	b2da      	uxtb	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	0d9b      	lsrs	r3, r3, #22
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d11a      	bne.n	80060b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f98f 	bl	80063a8 <RTC_Bcd2ToByte>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f986 	bl	80063a8 <RTC_Bcd2ToByte>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	789b      	ldrb	r3, [r3, #2]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f97d 	bl	80063a8 <RTC_Bcd2ToByte>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	7f1b      	ldrb	r3, [r3, #28]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_RTC_SetDate+0x1c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e071      	b.n	80061c0 <HAL_RTC_SetDate+0x100>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2202      	movs	r2, #2
 80060e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <HAL_RTC_SetDate+0x4c>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d008      	beq.n	800610c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	b2db      	uxtb	r3, r3
 8006104:	330a      	adds	r3, #10
 8006106:	b2da      	uxtb	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11c      	bne.n	800614c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	78db      	ldrb	r3, [r3, #3]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f929 	bl	800636e <RTC_ByteToBcd2>
 800611c:	4603      	mov	r3, r0
 800611e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 f922 	bl	800636e <RTC_ByteToBcd2>
 800612a:	4603      	mov	r3, r0
 800612c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800612e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	789b      	ldrb	r3, [r3, #2]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f91a 	bl	800636e <RTC_ByteToBcd2>
 800613a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800613c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e00e      	b.n	800616a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	78db      	ldrb	r3, [r3, #3]
 8006150:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006158:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800615e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	22ca      	movs	r2, #202	; 0xca
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2253      	movs	r2, #83	; 0x53
 8006178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f89b 	bl	80062b6 <RTC_EnterInitMode>
 8006180:	4603      	mov	r3, r0
 8006182:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006184:	7cfb      	ldrb	r3, [r7, #19]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006194:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006198:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f8c2 	bl	8006324 <RTC_ExitInitMode>
 80061a0:	4603      	mov	r3, r0
 80061a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	22ff      	movs	r2, #255	; 0xff
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	771a      	strb	r2, [r3, #28]

  return status;
 80061be:	7cfb      	ldrb	r3, [r7, #19]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd90      	pop	{r4, r7, pc}

080061c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620a:	b2da      	uxtb	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	0b5b      	lsrs	r3, r3, #13
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	b2da      	uxtb	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11a      	bne.n	800625c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	78db      	ldrb	r3, [r3, #3]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f8bc 	bl	80063a8 <RTC_Bcd2ToByte>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f8b3 	bl	80063a8 <RTC_Bcd2ToByte>
 8006242:	4603      	mov	r3, r0
 8006244:	461a      	mov	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f8aa 	bl	80063a8 <RTC_Bcd2ToByte>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006280:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006282:	f7fd fa7f 	bl	8003784 <HAL_GetTick>
 8006286:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006288:	e009      	b.n	800629e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800628a:	f7fd fa7b 	bl	8003784 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006298:	d901      	bls.n	800629e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e007      	b.n	80062ae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0ee      	beq.n	800628a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d122      	bne.n	800631a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062e4:	f7fd fa4e 	bl	8003784 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062ea:	e00c      	b.n	8006306 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062ec:	f7fd fa4a 	bl	8003784 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062fa:	d904      	bls.n	8006306 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2204      	movs	r2, #4
 8006300:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <RTC_EnterInitMode+0x64>
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d1e8      	bne.n	80062ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800633e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ff89 	bl	8006266 <HAL_RTC_WaitForSynchro>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800637c:	e005      	b.n	800638a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	3301      	adds	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	3b0a      	subs	r3, #10
 8006388:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	2b09      	cmp	r3, #9
 800638e:	d8f6      	bhi.n	800637e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	b2da      	uxtb	r2, r3
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	4313      	orrs	r3, r2
 800639a:	b2db      	uxtb	r3, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	4413      	add	r3, r2
 80063d2:	b2db      	uxtb	r3, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e041      	b.n	8006476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc fbc0 	bl	8002b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f001 f844 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d001      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e04e      	b.n	8006536 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a23      	ldr	r2, [pc, #140]	; (8006544 <HAL_TIM_Base_Start_IT+0xc4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d022      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d01d      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <HAL_TIM_Base_Start_IT+0xc8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d018      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1e      	ldr	r2, [pc, #120]	; (800654c <HAL_TIM_Base_Start_IT+0xcc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_TIM_Base_Start_IT+0xd0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <HAL_TIM_Base_Start_IT+0xd4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	; (8006558 <HAL_TIM_Base_Start_IT+0xd8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <HAL_TIM_Base_Start_IT+0xdc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d111      	bne.n	8006524 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b06      	cmp	r3, #6
 8006510:	d010      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006522:	e007      	b.n	8006534 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40010400 	.word	0x40010400
 8006558:	40014000 	.word	0x40014000
 800655c:	40001800 	.word	0x40001800

08006560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e041      	b.n	80065f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fc fa8a 	bl	8002aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f000 ff84 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_TIM_PWM_Start+0x24>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e022      	b.n	800666a <HAL_TIM_PWM_Start+0x6a>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b04      	cmp	r3, #4
 8006628:	d109      	bne.n	800663e <HAL_TIM_PWM_Start+0x3e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b01      	cmp	r3, #1
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e015      	b.n	800666a <HAL_TIM_PWM_Start+0x6a>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b08      	cmp	r3, #8
 8006642:	d109      	bne.n	8006658 <HAL_TIM_PWM_Start+0x58>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e008      	b.n	800666a <HAL_TIM_PWM_Start+0x6a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e07c      	b.n	800676c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <HAL_TIM_PWM_Start+0x82>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006680:	e013      	b.n	80066aa <HAL_TIM_PWM_Start+0xaa>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b04      	cmp	r3, #4
 8006686:	d104      	bne.n	8006692 <HAL_TIM_PWM_Start+0x92>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006690:	e00b      	b.n	80066aa <HAL_TIM_PWM_Start+0xaa>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_PWM_Start+0xa2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a0:	e003      	b.n	80066aa <HAL_TIM_PWM_Start+0xaa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2201      	movs	r2, #1
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fb0e 	bl	8007cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <HAL_TIM_PWM_Start+0x174>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_PWM_Start+0xcc>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <HAL_TIM_PWM_Start+0x178>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_PWM_Start+0xd0>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_TIM_PWM_Start+0xd2>
 80066d0:	2300      	movs	r3, #0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a22      	ldr	r2, [pc, #136]	; (8006774 <HAL_TIM_PWM_Start+0x174>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d022      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d01d      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1f      	ldr	r2, [pc, #124]	; (800677c <HAL_TIM_PWM_Start+0x17c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1d      	ldr	r2, [pc, #116]	; (8006780 <HAL_TIM_PWM_Start+0x180>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <HAL_TIM_PWM_Start+0x184>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a16      	ldr	r2, [pc, #88]	; (8006778 <HAL_TIM_PWM_Start+0x178>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_TIM_PWM_Start+0x188>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_TIM_PWM_Start+0x136>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_TIM_PWM_Start+0x18c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d111      	bne.n	800675a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b06      	cmp	r3, #6
 8006746:	d010      	beq.n	800676a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006758:	e007      	b.n	800676a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40014000 	.word	0x40014000
 800678c:	40001800 	.word	0x40001800

08006790 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fa96 	bl	8007cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <HAL_TIM_PWM_Stop+0xd8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIM_PWM_Stop+0x2c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2d      	ldr	r2, [pc, #180]	; (800686c <HAL_TIM_PWM_Stop+0xdc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <HAL_TIM_PWM_Stop+0x30>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <HAL_TIM_PWM_Stop+0x32>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d017      	beq.n	80067f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6a1a      	ldr	r2, [r3, #32]
 80067cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10f      	bne.n	80067f6 <HAL_TIM_PWM_Stop+0x66>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a1a      	ldr	r2, [r3, #32]
 80067dc:	f240 4344 	movw	r3, #1092	; 0x444
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_PWM_Stop+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006800:	4013      	ands	r3, r2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10f      	bne.n	8006826 <HAL_TIM_PWM_Stop+0x96>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	f240 4344 	movw	r3, #1092	; 0x444
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d107      	bne.n	8006826 <HAL_TIM_PWM_Stop+0x96>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Stop+0xa6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	e013      	b.n	800685e <HAL_TIM_PWM_Stop+0xce>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Stop+0xb6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	e00b      	b.n	800685e <HAL_TIM_PWM_Stop+0xce>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Stop+0xc6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	e003      	b.n	800685e <HAL_TIM_PWM_Stop+0xce>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400

08006870 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_TIM_PWM_Start_IT+0x28>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e022      	b.n	80068de <HAL_TIM_PWM_Start_IT+0x6e>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b04      	cmp	r3, #4
 800689c:	d109      	bne.n	80068b2 <HAL_TIM_PWM_Start_IT+0x42>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	bf14      	ite	ne
 80068aa:	2301      	movne	r3, #1
 80068ac:	2300      	moveq	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e015      	b.n	80068de <HAL_TIM_PWM_Start_IT+0x6e>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d109      	bne.n	80068cc <HAL_TIM_PWM_Start_IT+0x5c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	bf14      	ite	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	2300      	moveq	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e008      	b.n	80068de <HAL_TIM_PWM_Start_IT+0x6e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	bf14      	ite	ne
 80068d8:	2301      	movne	r3, #1
 80068da:	2300      	moveq	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0c7      	b.n	8006a76 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Start_IT+0x86>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f4:	e013      	b.n	800691e <HAL_TIM_PWM_Start_IT+0xae>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start_IT+0x96>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006904:	e00b      	b.n	800691e <HAL_TIM_PWM_Start_IT+0xae>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Start_IT+0xa6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006914:	e003      	b.n	800691e <HAL_TIM_PWM_Start_IT+0xae>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d841      	bhi.n	80069a8 <HAL_TIM_PWM_Start_IT+0x138>
 8006924:	a201      	add	r2, pc, #4	; (adr r2, 800692c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006961 	.word	0x08006961
 8006930:	080069a9 	.word	0x080069a9
 8006934:	080069a9 	.word	0x080069a9
 8006938:	080069a9 	.word	0x080069a9
 800693c:	08006973 	.word	0x08006973
 8006940:	080069a9 	.word	0x080069a9
 8006944:	080069a9 	.word	0x080069a9
 8006948:	080069a9 	.word	0x080069a9
 800694c:	08006985 	.word	0x08006985
 8006950:	080069a9 	.word	0x080069a9
 8006954:	080069a9 	.word	0x080069a9
 8006958:	080069a9 	.word	0x080069a9
 800695c:	08006997 	.word	0x08006997
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0202 	orr.w	r2, r2, #2
 800696e:	60da      	str	r2, [r3, #12]
      break;
 8006970:	e01d      	b.n	80069ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0204 	orr.w	r2, r2, #4
 8006980:	60da      	str	r2, [r3, #12]
      break;
 8006982:	e014      	b.n	80069ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0208 	orr.w	r2, r2, #8
 8006992:	60da      	str	r2, [r3, #12]
      break;
 8006994:	e00b      	b.n	80069ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0210 	orr.w	r2, r2, #16
 80069a4:	60da      	str	r2, [r3, #12]
      break;
 80069a6:	e002      	b.n	80069ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
      break;
 80069ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d15f      	bne.n	8006a74 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f989 	bl	8007cd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2e      	ldr	r2, [pc, #184]	; (8006a80 <HAL_TIM_PWM_Start_IT+0x210>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_TIM_PWM_Start_IT+0x166>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2c      	ldr	r2, [pc, #176]	; (8006a84 <HAL_TIM_PWM_Start_IT+0x214>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d101      	bne.n	80069da <HAL_TIM_PWM_Start_IT+0x16a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <HAL_TIM_PWM_Start_IT+0x16c>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_TIM_PWM_Start_IT+0x210>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d022      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d01d      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_TIM_PWM_Start_IT+0x218>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d018      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <HAL_TIM_PWM_Start_IT+0x21c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <HAL_TIM_PWM_Start_IT+0x220>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <HAL_TIM_PWM_Start_IT+0x214>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIM_PWM_Start_IT+0x224>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	; (8006a98 <HAL_TIM_PWM_Start_IT+0x228>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d111      	bne.n	8006a64 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b06      	cmp	r3, #6
 8006a50:	d010      	beq.n	8006a74 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0201 	orr.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	e007      	b.n	8006a74 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40000800 	.word	0x40000800
 8006a90:	40000c00 	.word	0x40000c00
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40001800 	.word	0x40001800

08006a9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e041      	b.n	8006b32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fc f812 	bl	8002aec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 fce6 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_IC_Start_IT+0x1e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	e013      	b.n	8006b82 <HAL_TIM_IC_Start_IT+0x46>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_IC_Start_IT+0x2e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	e00b      	b.n	8006b82 <HAL_TIM_IC_Start_IT+0x46>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_IC_Start_IT+0x3e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	e003      	b.n	8006b82 <HAL_TIM_IC_Start_IT+0x46>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <HAL_TIM_IC_Start_IT+0x58>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	e013      	b.n	8006bbc <HAL_TIM_IC_Start_IT+0x80>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d104      	bne.n	8006ba4 <HAL_TIM_IC_Start_IT+0x68>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e00b      	b.n	8006bbc <HAL_TIM_IC_Start_IT+0x80>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d104      	bne.n	8006bb4 <HAL_TIM_IC_Start_IT+0x78>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	e003      	b.n	8006bbc <HAL_TIM_IC_Start_IT+0x80>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d102      	bne.n	8006bca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bc4:	7b7b      	ldrb	r3, [r7, #13]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d001      	beq.n	8006bce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e0cc      	b.n	8006d68 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_IC_Start_IT+0xa2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bdc:	e013      	b.n	8006c06 <HAL_TIM_IC_Start_IT+0xca>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_IC_Start_IT+0xb2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bec:	e00b      	b.n	8006c06 <HAL_TIM_IC_Start_IT+0xca>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_IC_Start_IT+0xc2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bfc:	e003      	b.n	8006c06 <HAL_TIM_IC_Start_IT+0xca>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0xda>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c14:	e013      	b.n	8006c3e <HAL_TIM_IC_Start_IT+0x102>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIM_IC_Start_IT+0xea>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c24:	e00b      	b.n	8006c3e <HAL_TIM_IC_Start_IT+0x102>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_IC_Start_IT+0xfa>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c34:	e003      	b.n	8006c3e <HAL_TIM_IC_Start_IT+0x102>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b0c      	cmp	r3, #12
 8006c42:	d841      	bhi.n	8006cc8 <HAL_TIM_IC_Start_IT+0x18c>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <HAL_TIM_IC_Start_IT+0x110>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006cc9 	.word	0x08006cc9
 8006c54:	08006cc9 	.word	0x08006cc9
 8006c58:	08006cc9 	.word	0x08006cc9
 8006c5c:	08006c93 	.word	0x08006c93
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	08006ca5 	.word	0x08006ca5
 8006c70:	08006cc9 	.word	0x08006cc9
 8006c74:	08006cc9 	.word	0x08006cc9
 8006c78:	08006cc9 	.word	0x08006cc9
 8006c7c:	08006cb7 	.word	0x08006cb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0202 	orr.w	r2, r2, #2
 8006c8e:	60da      	str	r2, [r3, #12]
      break;
 8006c90:	e01d      	b.n	8006cce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0204 	orr.w	r2, r2, #4
 8006ca0:	60da      	str	r2, [r3, #12]
      break;
 8006ca2:	e014      	b.n	8006cce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	60da      	str	r2, [r3, #12]
      break;
 8006cb4:	e00b      	b.n	8006cce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0210 	orr.w	r2, r2, #16
 8006cc4:	60da      	str	r2, [r3, #12]
      break;
 8006cc6:	e002      	b.n	8006cce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ccc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d148      	bne.n	8006d66 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fff9 	bl	8007cd4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <HAL_TIM_IC_Start_IT+0x234>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf4:	d01d      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <HAL_TIM_IC_Start_IT+0x238>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <HAL_TIM_IC_Start_IT+0x23c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <HAL_TIM_IC_Start_IT+0x240>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <HAL_TIM_IC_Start_IT+0x244>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <HAL_TIM_IC_Start_IT+0x248>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <HAL_TIM_IC_Start_IT+0x24c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d111      	bne.n	8006d56 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b06      	cmp	r3, #6
 8006d42:	d010      	beq.n	8006d66 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	e007      	b.n	8006d66 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40010400 	.word	0x40010400
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40001800 	.word	0x40001800

08006d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d122      	bne.n	8006de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d11b      	bne.n	8006de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0202 	mvn.w	r2, #2
 8006db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fc fb98 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 8006dd4:	e005      	b.n	8006de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb4a 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fb51 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d122      	bne.n	8006e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d11b      	bne.n	8006e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0204 	mvn.w	r2, #4
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fc fb6e 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb20 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb27 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d122      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d11b      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0208 	mvn.w	r2, #8
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2204      	movs	r2, #4
 8006e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc fb44 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 faf6 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fafd 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d122      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d11b      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0210 	mvn.w	r2, #16
 8006eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2208      	movs	r2, #8
 8006eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fc fb1a 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 facc 	bl	8007470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fad3 	bl	8007484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d10e      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d107      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0201 	mvn.w	r2, #1
 8006f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fa fec2 	bl	8001c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b80      	cmp	r3, #128	; 0x80
 8006f1c:	d10e      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d107      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 ff78 	bl	8007e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d10e      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d107      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa98 	bl	8007498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0220 	mvn.w	r2, #32
 8006f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 ff42 	bl	8007e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e088      	b.n	80070cc <HAL_TIM_IC_ConfigChannel+0x130>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11b      	bne.n	8007000 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f000 fcb8 	bl	800794c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 020c 	bic.w	r2, r2, #12
 8006fea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6999      	ldr	r1, [r3, #24]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	619a      	str	r2, [r3, #24]
 8006ffe:	e060      	b.n	80070c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d11c      	bne.n	8007040 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6819      	ldr	r1, [r3, #0]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f000 fd3c 	bl	8007a92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	699a      	ldr	r2, [r3, #24]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007028:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6999      	ldr	r1, [r3, #24]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	021a      	lsls	r2, r3, #8
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	619a      	str	r2, [r3, #24]
 800703e:	e040      	b.n	80070c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d11b      	bne.n	800707e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6819      	ldr	r1, [r3, #0]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f000 fd89 	bl	8007b6c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 020c 	bic.w	r2, r2, #12
 8007068:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69d9      	ldr	r1, [r3, #28]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	61da      	str	r2, [r3, #28]
 800707c:	e021      	b.n	80070c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b0c      	cmp	r3, #12
 8007082:	d11c      	bne.n	80070be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6819      	ldr	r1, [r3, #0]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f000 fda6 	bl	8007be4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69da      	ldr	r2, [r3, #28]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69d9      	ldr	r1, [r3, #28]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	021a      	lsls	r2, r3, #8
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	61da      	str	r2, [r3, #28]
 80070bc:	e001      	b.n	80070c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e0ae      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	f200 809f 	bhi.w	8007240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800713d 	.word	0x0800713d
 800710c:	08007241 	.word	0x08007241
 8007110:	08007241 	.word	0x08007241
 8007114:	08007241 	.word	0x08007241
 8007118:	0800717d 	.word	0x0800717d
 800711c:	08007241 	.word	0x08007241
 8007120:	08007241 	.word	0x08007241
 8007124:	08007241 	.word	0x08007241
 8007128:	080071bf 	.word	0x080071bf
 800712c:	08007241 	.word	0x08007241
 8007130:	08007241 	.word	0x08007241
 8007134:	08007241 	.word	0x08007241
 8007138:	080071ff 	.word	0x080071ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fa52 	bl	80075ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0208 	orr.w	r2, r2, #8
 8007156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6999      	ldr	r1, [r3, #24]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	619a      	str	r2, [r3, #24]
      break;
 800717a:	e064      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 faa2 	bl	80076cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]
      break;
 80071bc:	e043      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 faf7 	bl	80077b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0208 	orr.w	r2, r2, #8
 80071d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0204 	bic.w	r2, r2, #4
 80071e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69d9      	ldr	r1, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	61da      	str	r2, [r3, #28]
      break;
 80071fc:	e023      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fb4b 	bl	80078a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	61da      	str	r2, [r3, #28]
      break;
 800723e:	e002      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIM_ConfigClockSource+0x1c>
 8007270:	2302      	movs	r3, #2
 8007272:	e0b4      	b.n	80073de <HAL_TIM_ConfigClockSource+0x186>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d03e      	beq.n	800732c <HAL_TIM_ConfigClockSource+0xd4>
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b2:	f200 8087 	bhi.w	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ba:	f000 8086 	beq.w	80073ca <HAL_TIM_ConfigClockSource+0x172>
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c2:	d87f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b70      	cmp	r3, #112	; 0x70
 80072c6:	d01a      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0xa6>
 80072c8:	2b70      	cmp	r3, #112	; 0x70
 80072ca:	d87b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b60      	cmp	r3, #96	; 0x60
 80072ce:	d050      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x11a>
 80072d0:	2b60      	cmp	r3, #96	; 0x60
 80072d2:	d877      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b50      	cmp	r3, #80	; 0x50
 80072d6:	d03c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0xfa>
 80072d8:	2b50      	cmp	r3, #80	; 0x50
 80072da:	d873      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	d058      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x13a>
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d86f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b30      	cmp	r3, #48	; 0x30
 80072e6:	d064      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072e8:	2b30      	cmp	r3, #48	; 0x30
 80072ea:	d86b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d060      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d867      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d05c      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d05a      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072fc:	e062      	b.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f000 fcc1 	bl	8007c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	609a      	str	r2, [r3, #8]
      break;
 800732a:	e04f      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6899      	ldr	r1, [r3, #8]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f000 fcaa 	bl	8007c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800734e:	609a      	str	r2, [r3, #8]
      break;
 8007350:	e03c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fb68 	bl	8007a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2150      	movs	r1, #80	; 0x50
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fc77 	bl	8007c5e <TIM_ITRx_SetConfig>
      break;
 8007370:	e02c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fbc4 	bl	8007b0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2160      	movs	r1, #96	; 0x60
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fc67 	bl	8007c5e <TIM_ITRx_SetConfig>
      break;
 8007390:	e01c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fb48 	bl	8007a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2140      	movs	r1, #64	; 0x40
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fc57 	bl	8007c5e <TIM_ITRx_SetConfig>
      break;
 80073b0:	e00c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f000 fc4e 	bl	8007c5e <TIM_ITRx_SetConfig>
      break;
 80073c2:	e003      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e000      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b0c      	cmp	r3, #12
 80073fa:	d831      	bhi.n	8007460 <HAL_TIM_ReadCapturedValue+0x78>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <HAL_TIM_ReadCapturedValue+0x1c>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007439 	.word	0x08007439
 8007408:	08007461 	.word	0x08007461
 800740c:	08007461 	.word	0x08007461
 8007410:	08007461 	.word	0x08007461
 8007414:	08007443 	.word	0x08007443
 8007418:	08007461 	.word	0x08007461
 800741c:	08007461 	.word	0x08007461
 8007420:	08007461 	.word	0x08007461
 8007424:	0800744d 	.word	0x0800744d
 8007428:	08007461 	.word	0x08007461
 800742c:	08007461 	.word	0x08007461
 8007430:	08007461 	.word	0x08007461
 8007434:	08007457 	.word	0x08007457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743e:	60fb      	str	r3, [r7, #12]

      break;
 8007440:	e00f      	b.n	8007462 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	60fb      	str	r3, [r7, #12]

      break;
 800744a:	e00a      	b.n	8007462 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	60fb      	str	r3, [r7, #12]

      break;
 8007454:	e005      	b.n	8007462 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	60fb      	str	r3, [r7, #12]

      break;
 800745e:	e000      	b.n	8007462 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007460:	bf00      	nop
  }

  return tmpreg;
 8007462:	68fb      	ldr	r3, [r7, #12]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a40      	ldr	r2, [pc, #256]	; (80075c0 <TIM_Base_SetConfig+0x114>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d00f      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3d      	ldr	r2, [pc, #244]	; (80075c4 <TIM_Base_SetConfig+0x118>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00b      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a3c      	ldr	r2, [pc, #240]	; (80075c8 <TIM_Base_SetConfig+0x11c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a3b      	ldr	r2, [pc, #236]	; (80075cc <TIM_Base_SetConfig+0x120>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3a      	ldr	r2, [pc, #232]	; (80075d0 <TIM_Base_SetConfig+0x124>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d108      	bne.n	80074fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2f      	ldr	r2, [pc, #188]	; (80075c0 <TIM_Base_SetConfig+0x114>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d02b      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d027      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2c      	ldr	r2, [pc, #176]	; (80075c4 <TIM_Base_SetConfig+0x118>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d023      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2b      	ldr	r2, [pc, #172]	; (80075c8 <TIM_Base_SetConfig+0x11c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01f      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2a      	ldr	r2, [pc, #168]	; (80075cc <TIM_Base_SetConfig+0x120>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d01b      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a29      	ldr	r2, [pc, #164]	; (80075d0 <TIM_Base_SetConfig+0x124>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d017      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a28      	ldr	r2, [pc, #160]	; (80075d4 <TIM_Base_SetConfig+0x128>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d013      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a27      	ldr	r2, [pc, #156]	; (80075d8 <TIM_Base_SetConfig+0x12c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00f      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a26      	ldr	r2, [pc, #152]	; (80075dc <TIM_Base_SetConfig+0x130>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00b      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a25      	ldr	r2, [pc, #148]	; (80075e0 <TIM_Base_SetConfig+0x134>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d007      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a24      	ldr	r2, [pc, #144]	; (80075e4 <TIM_Base_SetConfig+0x138>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d003      	beq.n	800755e <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a23      	ldr	r2, [pc, #140]	; (80075e8 <TIM_Base_SetConfig+0x13c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d108      	bne.n	8007570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a0a      	ldr	r2, [pc, #40]	; (80075c0 <TIM_Base_SetConfig+0x114>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_Base_SetConfig+0xf8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a0c      	ldr	r2, [pc, #48]	; (80075d0 <TIM_Base_SetConfig+0x124>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d103      	bne.n	80075ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	615a      	str	r2, [r3, #20]
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40010400 	.word	0x40010400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800
 80075e0:	40001800 	.word	0x40001800
 80075e4:	40001c00 	.word	0x40001c00
 80075e8:	40002000 	.word	0x40002000

080075ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f023 0201 	bic.w	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0302 	bic.w	r3, r3, #2
 8007634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <TIM_OC1_SetConfig+0xd8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_OC1_SetConfig+0x64>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <TIM_OC1_SetConfig+0xdc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10c      	bne.n	800766a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0308 	bic.w	r3, r3, #8
 8007656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f023 0304 	bic.w	r3, r3, #4
 8007668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a15      	ldr	r2, [pc, #84]	; (80076c4 <TIM_OC1_SetConfig+0xd8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_OC1_SetConfig+0x8e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <TIM_OC1_SetConfig+0xdc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d111      	bne.n	800769e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40010400 	.word	0x40010400

080076cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0210 	bic.w	r2, r3, #16
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0320 	bic.w	r3, r3, #32
 8007716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <TIM_OC2_SetConfig+0xe4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d003      	beq.n	8007734 <TIM_OC2_SetConfig+0x68>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <TIM_OC2_SetConfig+0xe8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d10d      	bne.n	8007750 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800773a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a17      	ldr	r2, [pc, #92]	; (80077b0 <TIM_OC2_SetConfig+0xe4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC2_SetConfig+0x94>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <TIM_OC2_SetConfig+0xe8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d113      	bne.n	8007788 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400

080077b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a21      	ldr	r2, [pc, #132]	; (8007898 <TIM_OC3_SetConfig+0xe0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d003      	beq.n	800781e <TIM_OC3_SetConfig+0x66>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a20      	ldr	r2, [pc, #128]	; (800789c <TIM_OC3_SetConfig+0xe4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d10d      	bne.n	800783a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a16      	ldr	r2, [pc, #88]	; (8007898 <TIM_OC3_SetConfig+0xe0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_OC3_SetConfig+0x92>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a15      	ldr	r2, [pc, #84]	; (800789c <TIM_OC3_SetConfig+0xe4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d113      	bne.n	8007872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	621a      	str	r2, [r3, #32]
}
 800788c:	bf00      	nop
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	40010000 	.word	0x40010000
 800789c:	40010400 	.word	0x40010400

080078a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	031b      	lsls	r3, r3, #12
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a12      	ldr	r2, [pc, #72]	; (8007944 <TIM_OC4_SetConfig+0xa4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_OC4_SetConfig+0x68>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a11      	ldr	r2, [pc, #68]	; (8007948 <TIM_OC4_SetConfig+0xa8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d109      	bne.n	800791c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800790e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	019b      	lsls	r3, r3, #6
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	621a      	str	r2, [r3, #32]
}
 8007936:	bf00      	nop
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	40010000 	.word	0x40010000
 8007948:	40010400 	.word	0x40010400

0800794c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f023 0201 	bic.w	r2, r3, #1
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <TIM_TI1_SetConfig+0xcc>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01b      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d017      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a25      	ldr	r2, [pc, #148]	; (8007a1c <TIM_TI1_SetConfig+0xd0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <TIM_TI1_SetConfig+0xd4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a23      	ldr	r2, [pc, #140]	; (8007a24 <TIM_TI1_SetConfig+0xd8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <TIM_TI1_SetConfig+0xdc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4a21      	ldr	r2, [pc, #132]	; (8007a2c <TIM_TI1_SetConfig+0xe0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_TI1_SetConfig+0x66>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a20      	ldr	r2, [pc, #128]	; (8007a30 <TIM_TI1_SetConfig+0xe4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d101      	bne.n	80079b6 <TIM_TI1_SetConfig+0x6a>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <TIM_TI1_SetConfig+0x6c>
 80079b6:	2300      	movs	r3, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d008      	beq.n	80079ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	e003      	b.n	80079d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f043 0301 	orr.w	r3, r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f023 030a 	bic.w	r3, r3, #10
 80079f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f003 030a 	and.w	r3, r3, #10
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40000400 	.word	0x40000400
 8007a20:	40000800 	.word	0x40000800
 8007a24:	40000c00 	.word	0x40000c00
 8007a28:	40010400 	.word	0x40010400
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40001800 	.word	0x40001800

08007a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	f023 0201 	bic.w	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 030a 	bic.w	r3, r3, #10
 8007a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	621a      	str	r2, [r3, #32]
}
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b087      	sub	sp, #28
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f023 0210 	bic.w	r2, r3, #16
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	031b      	lsls	r3, r3, #12
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	f023 0210 	bic.w	r2, r3, #16
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	031b      	lsls	r3, r3, #12
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	621a      	str	r2, [r3, #32]
}
 8007b60:	bf00      	nop
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 0303 	bic.w	r3, r3, #3
 8007b98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ba8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	031b      	lsls	r3, r3, #12
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	031b      	lsls	r3, r3, #12
 8007c3c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f043 0307 	orr.w	r3, r3, #7
 8007c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	609a      	str	r2, [r3, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	021a      	lsls	r2, r3, #8
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	609a      	str	r2, [r3, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f003 031f 	and.w	r3, r3, #31
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a1a      	ldr	r2, [r3, #32]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	401a      	ands	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e05a      	b.n	8007dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d022      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d84:	d01d      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1d      	ldr	r2, [pc, #116]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d018      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1a      	ldr	r2, [pc, #104]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00e      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d009      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d10c      	bne.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40000400 	.word	0x40000400
 8007e04:	40000800 	.word	0x40000800
 8007e08:	40000c00 	.word	0x40000c00
 8007e0c:	40010400 	.word	0x40010400
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40001800 	.word	0x40001800

08007e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e03f      	b.n	8007ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fa ff98 	bl	8002d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2224      	movs	r2, #36	; 0x24
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fddf 	bl	8008a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695a      	ldr	r2, [r3, #20]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68da      	ldr	r2, [r3, #12]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b08a      	sub	sp, #40	; 0x28
 8007ede:	af02      	add	r7, sp, #8
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	603b      	str	r3, [r7, #0]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d17c      	bne.n	8007ff4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <HAL_UART_Transmit+0x2c>
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e075      	b.n	8007ff6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_UART_Transmit+0x3e>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e06e      	b.n	8007ff6 <HAL_UART_Transmit+0x11c>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2221      	movs	r2, #33	; 0x21
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f2e:	f7fb fc29 	bl	8003784 <HAL_GetTick>
 8007f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	88fa      	ldrh	r2, [r7, #6]
 8007f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f48:	d108      	bne.n	8007f5c <HAL_UART_Transmit+0x82>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	e003      	b.n	8007f64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f6c:	e02a      	b.n	8007fc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	2180      	movs	r1, #128	; 0x80
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fb1f 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e036      	b.n	8007ff6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e007      	b.n	8007fb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1cf      	bne.n	8007f6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2140      	movs	r1, #64	; 0x40
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 faef 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e006      	b.n	8007ff6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e000      	b.n	8007ff6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	4613      	mov	r3, r2
 800800a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b20      	cmp	r3, #32
 8008016:	d11d      	bne.n	8008054 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_UART_Receive_IT+0x26>
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e016      	b.n	8008056 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_UART_Receive_IT+0x38>
 8008032:	2302      	movs	r3, #2
 8008034:	e00f      	b.n	8008056 <HAL_UART_Receive_IT+0x58>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	461a      	mov	r2, r3
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fb24 	bl	8008698 <UART_Start_Receive_IT>
 8008050:	4603      	mov	r3, r0
 8008052:	e000      	b.n	8008056 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b0ba      	sub	sp, #232	; 0xe8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008086:	2300      	movs	r3, #0
 8008088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800808c:	2300      	movs	r3, #0
 800808e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008096:	f003 030f 	and.w	r3, r3, #15
 800809a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800809e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10f      	bne.n	80080c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <HAL_UART_IRQHandler+0x66>
 80080b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fc07 	bl	80088d2 <UART_Receive_IT>
      return;
 80080c4:	e256      	b.n	8008574 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80de 	beq.w	800828c <HAL_UART_IRQHandler+0x22c>
 80080d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 80d1 	beq.w	800828c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00b      	beq.n	800810e <HAL_UART_IRQHandler+0xae>
 80080f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f043 0201 	orr.w	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800810e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <HAL_UART_IRQHandler+0xd2>
 800811a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f043 0202 	orr.w	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <HAL_UART_IRQHandler+0xf6>
 800813e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f043 0204 	orr.w	r2, r3, #4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <HAL_UART_IRQHandler+0x126>
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d105      	bne.n	800817a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800816e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d005      	beq.n	8008186 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f043 0208 	orr.w	r2, r3, #8
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 81ed 	beq.w	800856a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_UART_IRQHandler+0x14e>
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fb92 	bl	80088d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b8:	2b40      	cmp	r3, #64	; 0x40
 80081ba:	bf0c      	ite	eq
 80081bc:	2301      	moveq	r3, #1
 80081be:	2300      	movne	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <HAL_UART_IRQHandler+0x17a>
 80081d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d04f      	beq.n	800827a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa9a 	bl	8008714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d141      	bne.n	8008272 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3314      	adds	r3, #20
 80081f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3314      	adds	r3, #20
 8008216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800821a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800821e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1d9      	bne.n	80081ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d013      	beq.n	800826a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	4a7d      	ldr	r2, [pc, #500]	; (800843c <HAL_UART_IRQHandler+0x3dc>)
 8008248:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	4618      	mov	r0, r3
 8008250:	f7fb fc49 	bl	8003ae6 <HAL_DMA_Abort_IT>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008268:	e00e      	b.n	8008288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f990 	bl	8008590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008270:	e00a      	b.n	8008288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f98c 	bl	8008590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008278:	e006      	b.n	8008288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f988 	bl	8008590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008286:	e170      	b.n	800856a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008288:	bf00      	nop
    return;
 800828a:	e16e      	b.n	800856a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008290:	2b01      	cmp	r3, #1
 8008292:	f040 814a 	bne.w	800852a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829a:	f003 0310 	and.w	r3, r3, #16
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8143 	beq.w	800852a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 813c 	beq.w	800852a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	60bb      	str	r3, [r7, #8]
 80082c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	f040 80b4 	bne.w	8008440 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8140 	beq.w	800856e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082f6:	429a      	cmp	r2, r3
 80082f8:	f080 8139 	bcs.w	800856e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008302:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830e:	f000 8088 	beq.w	8008422 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330c      	adds	r3, #12
 8008318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800832c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	330c      	adds	r3, #12
 800833a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800833e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800834a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1d9      	bne.n	8008312 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3314      	adds	r3, #20
 8008364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800836e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3314      	adds	r3, #20
 800837e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008382:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008386:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800838a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e1      	bne.n	800835e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3314      	adds	r3, #20
 80083a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3314      	adds	r3, #20
 80083ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e3      	bne.n	800839a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f2:	f023 0310 	bic.w	r3, r3, #16
 80083f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008404:	65ba      	str	r2, [r7, #88]	; 0x58
 8008406:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800840a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e3      	bne.n	80083e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	4618      	mov	r0, r3
 800841e:	f7fb faf2 	bl	8003a06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800842a:	b29b      	uxth	r3, r3
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	b29b      	uxth	r3, r3
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f8b6 	bl	80085a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008438:	e099      	b.n	800856e <HAL_UART_IRQHandler+0x50e>
 800843a:	bf00      	nop
 800843c:	080087db 	.word	0x080087db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008448:	b29b      	uxth	r3, r3
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 808b 	beq.w	8008572 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800845c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8086 	beq.w	8008572 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800847c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800848a:	647a      	str	r2, [r7, #68]	; 0x44
 800848c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e3      	bne.n	8008466 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	623b      	str	r3, [r7, #32]
   return(result);
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3314      	adds	r3, #20
 80084be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084c2:	633a      	str	r2, [r7, #48]	; 0x30
 80084c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e3      	bne.n	800849e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	330c      	adds	r3, #12
 80084ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0310 	bic.w	r3, r3, #16
 80084fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	330c      	adds	r3, #12
 8008504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008508:	61fa      	str	r2, [r7, #28]
 800850a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	69b9      	ldr	r1, [r7, #24]
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	617b      	str	r3, [r7, #20]
   return(result);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e3      	bne.n	80084e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800851c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f83e 	bl	80085a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008528:	e023      	b.n	8008572 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800852a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <HAL_UART_IRQHandler+0x4ea>
 8008536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f95d 	bl	8008802 <UART_Transmit_IT>
    return;
 8008548:	e014      	b.n	8008574 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800854a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <HAL_UART_IRQHandler+0x514>
 8008556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d008      	beq.n	8008574 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f99d 	bl	80088a2 <UART_EndTransmit_IT>
    return;
 8008568:	e004      	b.n	8008574 <HAL_UART_IRQHandler+0x514>
    return;
 800856a:	bf00      	nop
 800856c:	e002      	b.n	8008574 <HAL_UART_IRQHandler+0x514>
      return;
 800856e:	bf00      	nop
 8008570:	e000      	b.n	8008574 <HAL_UART_IRQHandler+0x514>
      return;
 8008572:	bf00      	nop
  }
}
 8008574:	37e8      	adds	r7, #232	; 0xe8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop

0800857c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b090      	sub	sp, #64	; 0x40
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085cc:	e050      	b.n	8008670 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d04c      	beq.n	8008670 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <UART_WaitOnFlagUntilTimeout+0x30>
 80085dc:	f7fb f8d2 	bl	8003784 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d241      	bcs.n	8008670 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	330c      	adds	r3, #12
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800860c:	637a      	str	r2, [r7, #52]	; 0x34
 800860e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e5      	bne.n	80085ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	613b      	str	r3, [r7, #16]
   return(result);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	63bb      	str	r3, [r7, #56]	; 0x38
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3314      	adds	r3, #20
 800863e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008640:	623a      	str	r2, [r7, #32]
 8008642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	69f9      	ldr	r1, [r7, #28]
 8008646:	6a3a      	ldr	r2, [r7, #32]
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	61bb      	str	r3, [r7, #24]
   return(result);
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e5      	bne.n	8008620 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e00f      	b.n	8008690 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	d09f      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3740      	adds	r7, #64	; 0x40
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	88fa      	ldrh	r2, [r7, #6]
 80086b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2222      	movs	r2, #34	; 0x22
 80086c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695a      	ldr	r2, [r3, #20]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0201 	orr.w	r2, r2, #1
 80086f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0220 	orr.w	r2, r2, #32
 8008704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b095      	sub	sp, #84	; 0x54
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	330c      	adds	r3, #12
 8008722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800873c:	643a      	str	r2, [r7, #64]	; 0x40
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e5      	bne.n	800871c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3314      	adds	r3, #20
 8008756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	64bb      	str	r3, [r7, #72]	; 0x48
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e5      	bne.n	8008750 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008788:	2b01      	cmp	r3, #1
 800878a:	d119      	bne.n	80087c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	60bb      	str	r3, [r7, #8]
   return(result);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f023 0310 	bic.w	r3, r3, #16
 80087a2:	647b      	str	r3, [r7, #68]	; 0x44
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ac:	61ba      	str	r2, [r7, #24]
 80087ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6979      	ldr	r1, [r7, #20]
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e5      	bne.n	800878c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087ce:	bf00      	nop
 80087d0:	3754      	adds	r7, #84	; 0x54
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7ff fecb 	bl	8008590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b21      	cmp	r3, #33	; 0x21
 8008814:	d13e      	bne.n	8008894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881e:	d114      	bne.n	800884a <UART_Transmit_IT+0x48>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d110      	bne.n	800884a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800883c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	1c9a      	adds	r2, r3, #2
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	621a      	str	r2, [r3, #32]
 8008848:	e008      	b.n	800885c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	1c59      	adds	r1, r3, #1
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6211      	str	r1, [r2, #32]
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008860:	b29b      	uxth	r3, r3
 8008862:	3b01      	subs	r3, #1
 8008864:	b29b      	uxth	r3, r3
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	4619      	mov	r1, r3
 800886a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10f      	bne.n	8008890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800887e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800888e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	e000      	b.n	8008896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008894:	2302      	movs	r3, #2
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff fe5a 	bl	800857c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b08c      	sub	sp, #48	; 0x30
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b22      	cmp	r3, #34	; 0x22
 80088e4:	f040 80ab 	bne.w	8008a3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f0:	d117      	bne.n	8008922 <UART_Receive_IT+0x50>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d113      	bne.n	8008922 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008910:	b29a      	uxth	r2, r3
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	1c9a      	adds	r2, r3, #2
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	629a      	str	r2, [r3, #40]	; 0x28
 8008920:	e026      	b.n	8008970 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008934:	d007      	beq.n	8008946 <UART_Receive_IT+0x74>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <UART_Receive_IT+0x82>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d106      	bne.n	8008954 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	b2da      	uxtb	r2, r3
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e008      	b.n	8008966 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008960:	b2da      	uxtb	r2, r3
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008974:	b29b      	uxth	r3, r3
 8008976:	3b01      	subs	r3, #1
 8008978:	b29b      	uxth	r3, r3
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	4619      	mov	r1, r3
 800897e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008980:	2b00      	cmp	r3, #0
 8008982:	d15a      	bne.n	8008a3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0220 	bic.w	r2, r2, #32
 8008992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	695a      	ldr	r2, [r3, #20]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0201 	bic.w	r2, r2, #1
 80089b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d135      	bne.n	8008a30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	330c      	adds	r3, #12
 80089d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	613b      	str	r3, [r7, #16]
   return(result);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f023 0310 	bic.w	r3, r3, #16
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	330c      	adds	r3, #12
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	623a      	str	r2, [r7, #32]
 80089ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	69f9      	ldr	r1, [r7, #28]
 80089f0:	6a3a      	ldr	r2, [r7, #32]
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e5      	bne.n	80089ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0310 	and.w	r3, r3, #16
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d10a      	bne.n	8008a22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fdbb 	bl	80085a4 <HAL_UARTEx_RxEventCallback>
 8008a2e:	e002      	b.n	8008a36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fa fbcd 	bl	80031d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e002      	b.n	8008a40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e000      	b.n	8008a40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
  }
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3730      	adds	r7, #48	; 0x30
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a4c:	b0c0      	sub	sp, #256	; 0x100
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a64:	68d9      	ldr	r1, [r3, #12]
 8008a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	ea40 0301 	orr.w	r3, r0, r1
 8008a70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008aa0:	f021 010c 	bic.w	r1, r1, #12
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac2:	6999      	ldr	r1, [r3, #24]
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	ea40 0301 	orr.w	r3, r0, r1
 8008ace:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4b8f      	ldr	r3, [pc, #572]	; (8008d14 <UART_SetConfig+0x2cc>)
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d005      	beq.n	8008ae8 <UART_SetConfig+0xa0>
 8008adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b8d      	ldr	r3, [pc, #564]	; (8008d18 <UART_SetConfig+0x2d0>)
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d104      	bne.n	8008af2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ae8:	f7fc ffa8 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 8008aec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008af0:	e003      	b.n	8008afa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008af2:	f7fc ff8f 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 8008af6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b04:	f040 810c 	bne.w	8008d20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	462b      	mov	r3, r5
 8008b1e:	1891      	adds	r1, r2, r2
 8008b20:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b22:	415b      	adcs	r3, r3
 8008b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	eb12 0801 	adds.w	r8, r2, r1
 8008b30:	4629      	mov	r1, r5
 8008b32:	eb43 0901 	adc.w	r9, r3, r1
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b4a:	4690      	mov	r8, r2
 8008b4c:	4699      	mov	r9, r3
 8008b4e:	4623      	mov	r3, r4
 8008b50:	eb18 0303 	adds.w	r3, r8, r3
 8008b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b58:	462b      	mov	r3, r5
 8008b5a:	eb49 0303 	adc.w	r3, r9, r3
 8008b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b76:	460b      	mov	r3, r1
 8008b78:	18db      	adds	r3, r3, r3
 8008b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	eb42 0303 	adc.w	r3, r2, r3
 8008b82:	657b      	str	r3, [r7, #84]	; 0x54
 8008b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b8c:	f7f7 ff76 	bl	8000a7c <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4b61      	ldr	r3, [pc, #388]	; (8008d1c <UART_SetConfig+0x2d4>)
 8008b96:	fba3 2302 	umull	r2, r3, r3, r2
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	011c      	lsls	r4, r3, #4
 8008b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ba8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	1891      	adds	r1, r2, r2
 8008bb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bb8:	415b      	adcs	r3, r3
 8008bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	eb12 0a01 	adds.w	sl, r2, r1
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	eb43 0b01 	adc.w	fp, r3, r1
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008be0:	4692      	mov	sl, r2
 8008be2:	469b      	mov	fp, r3
 8008be4:	4643      	mov	r3, r8
 8008be6:	eb1a 0303 	adds.w	r3, sl, r3
 8008bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bee:	464b      	mov	r3, r9
 8008bf0:	eb4b 0303 	adc.w	r3, fp, r3
 8008bf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	18db      	adds	r3, r3, r3
 8008c10:	643b      	str	r3, [r7, #64]	; 0x40
 8008c12:	4613      	mov	r3, r2
 8008c14:	eb42 0303 	adc.w	r3, r2, r3
 8008c18:	647b      	str	r3, [r7, #68]	; 0x44
 8008c1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c22:	f7f7 ff2b 	bl	8000a7c <__aeabi_uldivmod>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4b3b      	ldr	r3, [pc, #236]	; (8008d1c <UART_SetConfig+0x2d4>)
 8008c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	2264      	movs	r2, #100	; 0x64
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
 8008c3a:	1acb      	subs	r3, r1, r3
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c42:	4b36      	ldr	r3, [pc, #216]	; (8008d1c <UART_SetConfig+0x2d4>)
 8008c44:	fba3 2302 	umull	r2, r3, r3, r2
 8008c48:	095b      	lsrs	r3, r3, #5
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c50:	441c      	add	r4, r3
 8008c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	1891      	adds	r1, r2, r2
 8008c6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c6c:	415b      	adcs	r3, r3
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c74:	4641      	mov	r1, r8
 8008c76:	1851      	adds	r1, r2, r1
 8008c78:	6339      	str	r1, [r7, #48]	; 0x30
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	414b      	adcs	r3, r1
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c80:	f04f 0200 	mov.w	r2, #0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	00cb      	lsls	r3, r1, #3
 8008c90:	4651      	mov	r1, sl
 8008c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c96:	4651      	mov	r1, sl
 8008c98:	00ca      	lsls	r2, r1, #3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	189b      	adds	r3, r3, r2
 8008ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ca8:	464b      	mov	r3, r9
 8008caa:	460a      	mov	r2, r1
 8008cac:	eb42 0303 	adc.w	r3, r2, r3
 8008cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008cc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008cc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008cc8:	460b      	mov	r3, r1
 8008cca:	18db      	adds	r3, r3, r3
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cce:	4613      	mov	r3, r2
 8008cd0:	eb42 0303 	adc.w	r3, r2, r3
 8008cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cde:	f7f7 fecd 	bl	8000a7c <__aeabi_uldivmod>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <UART_SetConfig+0x2d4>)
 8008ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	2164      	movs	r1, #100	; 0x64
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	3332      	adds	r3, #50	; 0x32
 8008cfa:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <UART_SetConfig+0x2d4>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	095b      	lsrs	r3, r3, #5
 8008d02:	f003 0207 	and.w	r2, r3, #7
 8008d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4422      	add	r2, r4
 8008d0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d10:	e105      	b.n	8008f1e <UART_SetConfig+0x4d6>
 8008d12:	bf00      	nop
 8008d14:	40011000 	.word	0x40011000
 8008d18:	40011400 	.word	0x40011400
 8008d1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d32:	4642      	mov	r2, r8
 8008d34:	464b      	mov	r3, r9
 8008d36:	1891      	adds	r1, r2, r2
 8008d38:	6239      	str	r1, [r7, #32]
 8008d3a:	415b      	adcs	r3, r3
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d42:	4641      	mov	r1, r8
 8008d44:	1854      	adds	r4, r2, r1
 8008d46:	4649      	mov	r1, r9
 8008d48:	eb43 0501 	adc.w	r5, r3, r1
 8008d4c:	f04f 0200 	mov.w	r2, #0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	00eb      	lsls	r3, r5, #3
 8008d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d5a:	00e2      	lsls	r2, r4, #3
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	461d      	mov	r5, r3
 8008d60:	4643      	mov	r3, r8
 8008d62:	18e3      	adds	r3, r4, r3
 8008d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d68:	464b      	mov	r3, r9
 8008d6a:	eb45 0303 	adc.w	r3, r5, r3
 8008d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d8e:	4629      	mov	r1, r5
 8008d90:	008b      	lsls	r3, r1, #2
 8008d92:	4621      	mov	r1, r4
 8008d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d98:	4621      	mov	r1, r4
 8008d9a:	008a      	lsls	r2, r1, #2
 8008d9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008da0:	f7f7 fe6c 	bl	8000a7c <__aeabi_uldivmod>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4b60      	ldr	r3, [pc, #384]	; (8008f2c <UART_SetConfig+0x4e4>)
 8008daa:	fba3 2302 	umull	r2, r3, r3, r2
 8008dae:	095b      	lsrs	r3, r3, #5
 8008db0:	011c      	lsls	r4, r3, #4
 8008db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008dc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	1891      	adds	r1, r2, r2
 8008dca:	61b9      	str	r1, [r7, #24]
 8008dcc:	415b      	adcs	r3, r3
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	1851      	adds	r1, r2, r1
 8008dd8:	6139      	str	r1, [r7, #16]
 8008dda:	4649      	mov	r1, r9
 8008ddc:	414b      	adcs	r3, r1
 8008dde:	617b      	str	r3, [r7, #20]
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dec:	4659      	mov	r1, fp
 8008dee:	00cb      	lsls	r3, r1, #3
 8008df0:	4651      	mov	r1, sl
 8008df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008df6:	4651      	mov	r1, sl
 8008df8:	00ca      	lsls	r2, r1, #3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4642      	mov	r2, r8
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e08:	464b      	mov	r3, r9
 8008e0a:	460a      	mov	r2, r1
 8008e0c:	eb42 0303 	adc.w	r3, r2, r3
 8008e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	008b      	lsls	r3, r1, #2
 8008e30:	4641      	mov	r1, r8
 8008e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e36:	4641      	mov	r1, r8
 8008e38:	008a      	lsls	r2, r1, #2
 8008e3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e3e:	f7f7 fe1d 	bl	8000a7c <__aeabi_uldivmod>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4b39      	ldr	r3, [pc, #228]	; (8008f2c <UART_SetConfig+0x4e4>)
 8008e48:	fba3 1302 	umull	r1, r3, r3, r2
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	2164      	movs	r1, #100	; 0x64
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	3332      	adds	r3, #50	; 0x32
 8008e5a:	4a34      	ldr	r2, [pc, #208]	; (8008f2c <UART_SetConfig+0x4e4>)
 8008e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e66:	441c      	add	r4, r3
 8008e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e70:	677a      	str	r2, [r7, #116]	; 0x74
 8008e72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e76:	4642      	mov	r2, r8
 8008e78:	464b      	mov	r3, r9
 8008e7a:	1891      	adds	r1, r2, r2
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	415b      	adcs	r3, r3
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e86:	4641      	mov	r1, r8
 8008e88:	1851      	adds	r1, r2, r1
 8008e8a:	6039      	str	r1, [r7, #0]
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	414b      	adcs	r3, r1
 8008e90:	607b      	str	r3, [r7, #4]
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e9e:	4659      	mov	r1, fp
 8008ea0:	00cb      	lsls	r3, r1, #3
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ea8:	4651      	mov	r1, sl
 8008eaa:	00ca      	lsls	r2, r1, #3
 8008eac:	4610      	mov	r0, r2
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	189b      	adds	r3, r3, r2
 8008eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008eb8:	464b      	mov	r3, r9
 8008eba:	460a      	mov	r2, r1
 8008ebc:	eb42 0303 	adc.w	r3, r2, r3
 8008ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	663b      	str	r3, [r7, #96]	; 0x60
 8008ecc:	667a      	str	r2, [r7, #100]	; 0x64
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008eda:	4649      	mov	r1, r9
 8008edc:	008b      	lsls	r3, r1, #2
 8008ede:	4641      	mov	r1, r8
 8008ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	008a      	lsls	r2, r1, #2
 8008ee8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008eec:	f7f7 fdc6 	bl	8000a7c <__aeabi_uldivmod>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <UART_SetConfig+0x4e4>)
 8008ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	2164      	movs	r1, #100	; 0x64
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	3332      	adds	r3, #50	; 0x32
 8008f08:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <UART_SetConfig+0x4e4>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	f003 020f 	and.w	r2, r3, #15
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4422      	add	r2, r4
 8008f1c:	609a      	str	r2, [r3, #8]
}
 8008f1e:	bf00      	nop
 8008f20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f24:	46bd      	mov	sp, r7
 8008f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f2a:	bf00      	nop
 8008f2c:	51eb851f 	.word	0x51eb851f

08008f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f30:	b084      	sub	sp, #16
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	f107 001c 	add.w	r0, r7, #28
 8008f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d122      	bne.n	8008f8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d105      	bne.n	8008f82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 faa2 	bl	80094cc <USB_CoreReset>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
 8008f8c:	e01a      	b.n	8008fc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa96 	bl	80094cc <USB_CoreReset>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8008fb6:	e005      	b.n	8008fc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d10b      	bne.n	8008fe2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f043 0206 	orr.w	r2, r3, #6
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f043 0220 	orr.w	r2, r3, #32
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fee:	b004      	add	sp, #16
 8008ff0:	4770      	bx	lr

08008ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f023 0201 	bic.w	r2, r3, #1
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d115      	bne.n	8009062 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009042:	2001      	movs	r0, #1
 8009044:	f7fa fbaa 	bl	800379c <HAL_Delay>
      ms++;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa2e 	bl	80094b0 <USB_GetMode>
 8009054:	4603      	mov	r3, r0
 8009056:	2b01      	cmp	r3, #1
 8009058:	d01e      	beq.n	8009098 <USB_SetCurrentMode+0x84>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b31      	cmp	r3, #49	; 0x31
 800905e:	d9f0      	bls.n	8009042 <USB_SetCurrentMode+0x2e>
 8009060:	e01a      	b.n	8009098 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d115      	bne.n	8009094 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009074:	2001      	movs	r0, #1
 8009076:	f7fa fb91 	bl	800379c <HAL_Delay>
      ms++;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3301      	adds	r3, #1
 800907e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fa15 	bl	80094b0 <USB_GetMode>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <USB_SetCurrentMode+0x84>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b31      	cmp	r3, #49	; 0x31
 8009090:	d9f0      	bls.n	8009074 <USB_SetCurrentMode+0x60>
 8009092:	e001      	b.n	8009098 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e005      	b.n	80090a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b32      	cmp	r3, #50	; 0x32
 800909c:	d101      	bne.n	80090a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090ac:	b084      	sub	sp, #16
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090c6:	2300      	movs	r3, #0
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	e009      	b.n	80090e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3340      	adds	r3, #64	; 0x40
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3301      	adds	r3, #1
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b0e      	cmp	r3, #14
 80090e4:	d9f2      	bls.n	80090cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11c      	bne.n	8009126 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
 8009124:	e00b      	b.n	800913e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009144:	461a      	mov	r2, r3
 8009146:	2300      	movs	r3, #0
 8009148:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009150:	4619      	mov	r1, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009158:	461a      	mov	r2, r3
 800915a:	680b      	ldr	r3, [r1, #0]
 800915c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	2b01      	cmp	r3, #1
 8009162:	d10c      	bne.n	800917e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d104      	bne.n	8009174 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800916a:	2100      	movs	r1, #0
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f965 	bl	800943c <USB_SetDevSpeed>
 8009172:	e008      	b.n	8009186 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009174:	2101      	movs	r1, #1
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f960 	bl	800943c <USB_SetDevSpeed>
 800917c:	e003      	b.n	8009186 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800917e:	2103      	movs	r1, #3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f95b 	bl	800943c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009186:	2110      	movs	r1, #16
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8f3 	bl	8009374 <USB_FlushTxFifo>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f91f 	bl	80093dc <USB_FlushRxFifo>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ae:	461a      	mov	r2, r3
 80091b0:	2300      	movs	r3, #0
 80091b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ba:	461a      	mov	r2, r3
 80091bc:	2300      	movs	r3, #0
 80091be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	461a      	mov	r2, r3
 80091c8:	2300      	movs	r3, #0
 80091ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091cc:	2300      	movs	r3, #0
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	e043      	b.n	800925a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e8:	d118      	bne.n	800921c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fc:	461a      	mov	r2, r3
 80091fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	e013      	b.n	800922e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	461a      	mov	r2, r3
 8009214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e008      	b.n	800922e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009228:	461a      	mov	r2, r3
 800922a:	2300      	movs	r3, #0
 800922c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923a:	461a      	mov	r2, r3
 800923c:	2300      	movs	r3, #0
 800923e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	461a      	mov	r2, r3
 800924e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	3301      	adds	r3, #1
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	429a      	cmp	r2, r3
 8009260:	d3b7      	bcc.n	80091d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009262:	2300      	movs	r3, #0
 8009264:	613b      	str	r3, [r7, #16]
 8009266:	e043      	b.n	80092f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800927a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800927e:	d118      	bne.n	80092b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	4413      	add	r3, r2
 800928e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009292:	461a      	mov	r2, r3
 8009294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	e013      	b.n	80092c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a8:	461a      	mov	r2, r3
 80092aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	e008      	b.n	80092c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092be:	461a      	mov	r2, r3
 80092c0:	2300      	movs	r3, #0
 80092c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d0:	461a      	mov	r2, r3
 80092d2:	2300      	movs	r3, #0
 80092d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e2:	461a      	mov	r2, r3
 80092e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	3301      	adds	r3, #1
 80092ee:	613b      	str	r3, [r7, #16]
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d3b7      	bcc.n	8009268 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800930a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009318:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	2b00      	cmp	r3, #0
 800931e:	d105      	bne.n	800932c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f043 0210 	orr.w	r2, r3, #16
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699a      	ldr	r2, [r3, #24]
 8009330:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <USB_DevInit+0x2c4>)
 8009332:	4313      	orrs	r3, r2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	f043 0208 	orr.w	r2, r3, #8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800934a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d107      	bne.n	8009360 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009358:	f043 0304 	orr.w	r3, r3, #4
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800936c:	b004      	add	sp, #16
 800936e:	4770      	bx	lr
 8009370:	803c3800 	.word	0x803c3800

08009374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3301      	adds	r3, #1
 8009386:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a13      	ldr	r2, [pc, #76]	; (80093d8 <USB_FlushTxFifo+0x64>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d901      	bls.n	8009394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e01b      	b.n	80093cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	daf2      	bge.n	8009382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	019b      	lsls	r3, r3, #6
 80093a4:	f043 0220 	orr.w	r2, r3, #32
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <USB_FlushTxFifo+0x64>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d901      	bls.n	80093be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e006      	b.n	80093cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d0f0      	beq.n	80093ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	00030d40 	.word	0x00030d40

080093dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4a11      	ldr	r2, [pc, #68]	; (8009438 <USB_FlushRxFifo+0x5c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d901      	bls.n	80093fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e018      	b.n	800942c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	daf2      	bge.n	80093e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2210      	movs	r2, #16
 800940a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4a08      	ldr	r2, [pc, #32]	; (8009438 <USB_FlushRxFifo+0x5c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d901      	bls.n	800941e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e006      	b.n	800942c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b10      	cmp	r3, #16
 8009428:	d0f0      	beq.n	800940c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	00030d40 	.word	0x00030d40

0800943c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800945c:	4313      	orrs	r3, r2
 800945e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949c:	f043 0302 	orr.w	r3, r3, #2
 80094a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	f003 0301 	and.w	r3, r3, #1
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4a13      	ldr	r2, [pc, #76]	; (8009530 <USB_CoreReset+0x64>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e01b      	b.n	8009522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	daf2      	bge.n	80094d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f043 0201 	orr.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4a09      	ldr	r2, [pc, #36]	; (8009530 <USB_CoreReset+0x64>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d901      	bls.n	8009514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e006      	b.n	8009522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b01      	cmp	r3, #1
 800951e:	d0f0      	beq.n	8009502 <USB_CoreReset+0x36>

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	00030d40 	.word	0x00030d40

08009534 <atoi>:
 8009534:	220a      	movs	r2, #10
 8009536:	2100      	movs	r1, #0
 8009538:	f000 b98a 	b.w	8009850 <strtol>

0800953c <__errno>:
 800953c:	4b01      	ldr	r3, [pc, #4]	; (8009544 <__errno+0x8>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000048 	.word	0x20000048

08009548 <__libc_init_array>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4d0d      	ldr	r5, [pc, #52]	; (8009580 <__libc_init_array+0x38>)
 800954c:	4c0d      	ldr	r4, [pc, #52]	; (8009584 <__libc_init_array+0x3c>)
 800954e:	1b64      	subs	r4, r4, r5
 8009550:	10a4      	asrs	r4, r4, #2
 8009552:	2600      	movs	r6, #0
 8009554:	42a6      	cmp	r6, r4
 8009556:	d109      	bne.n	800956c <__libc_init_array+0x24>
 8009558:	4d0b      	ldr	r5, [pc, #44]	; (8009588 <__libc_init_array+0x40>)
 800955a:	4c0c      	ldr	r4, [pc, #48]	; (800958c <__libc_init_array+0x44>)
 800955c:	f001 fab4 	bl	800aac8 <_init>
 8009560:	1b64      	subs	r4, r4, r5
 8009562:	10a4      	asrs	r4, r4, #2
 8009564:	2600      	movs	r6, #0
 8009566:	42a6      	cmp	r6, r4
 8009568:	d105      	bne.n	8009576 <__libc_init_array+0x2e>
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009570:	4798      	blx	r3
 8009572:	3601      	adds	r6, #1
 8009574:	e7ee      	b.n	8009554 <__libc_init_array+0xc>
 8009576:	f855 3b04 	ldr.w	r3, [r5], #4
 800957a:	4798      	blx	r3
 800957c:	3601      	adds	r6, #1
 800957e:	e7f2      	b.n	8009566 <__libc_init_array+0x1e>
 8009580:	0800ae14 	.word	0x0800ae14
 8009584:	0800ae14 	.word	0x0800ae14
 8009588:	0800ae14 	.word	0x0800ae14
 800958c:	0800ae18 	.word	0x0800ae18

08009590 <memset>:
 8009590:	4402      	add	r2, r0
 8009592:	4603      	mov	r3, r0
 8009594:	4293      	cmp	r3, r2
 8009596:	d100      	bne.n	800959a <memset+0xa>
 8009598:	4770      	bx	lr
 800959a:	f803 1b01 	strb.w	r1, [r3], #1
 800959e:	e7f9      	b.n	8009594 <memset+0x4>

080095a0 <iprintf>:
 80095a0:	b40f      	push	{r0, r1, r2, r3}
 80095a2:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <iprintf+0x2c>)
 80095a4:	b513      	push	{r0, r1, r4, lr}
 80095a6:	681c      	ldr	r4, [r3, #0]
 80095a8:	b124      	cbz	r4, 80095b4 <iprintf+0x14>
 80095aa:	69a3      	ldr	r3, [r4, #24]
 80095ac:	b913      	cbnz	r3, 80095b4 <iprintf+0x14>
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 fb32 	bl	8009c18 <__sinit>
 80095b4:	ab05      	add	r3, sp, #20
 80095b6:	9a04      	ldr	r2, [sp, #16]
 80095b8:	68a1      	ldr	r1, [r4, #8]
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fe97 	bl	800a2f0 <_vfiprintf_r>
 80095c2:	b002      	add	sp, #8
 80095c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c8:	b004      	add	sp, #16
 80095ca:	4770      	bx	lr
 80095cc:	20000048 	.word	0x20000048

080095d0 <_puts_r>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	460e      	mov	r6, r1
 80095d4:	4605      	mov	r5, r0
 80095d6:	b118      	cbz	r0, 80095e0 <_puts_r+0x10>
 80095d8:	6983      	ldr	r3, [r0, #24]
 80095da:	b90b      	cbnz	r3, 80095e0 <_puts_r+0x10>
 80095dc:	f000 fb1c 	bl	8009c18 <__sinit>
 80095e0:	69ab      	ldr	r3, [r5, #24]
 80095e2:	68ac      	ldr	r4, [r5, #8]
 80095e4:	b913      	cbnz	r3, 80095ec <_puts_r+0x1c>
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 fb16 	bl	8009c18 <__sinit>
 80095ec:	4b2c      	ldr	r3, [pc, #176]	; (80096a0 <_puts_r+0xd0>)
 80095ee:	429c      	cmp	r4, r3
 80095f0:	d120      	bne.n	8009634 <_puts_r+0x64>
 80095f2:	686c      	ldr	r4, [r5, #4]
 80095f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095f6:	07db      	lsls	r3, r3, #31
 80095f8:	d405      	bmi.n	8009606 <_puts_r+0x36>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	0598      	lsls	r0, r3, #22
 80095fe:	d402      	bmi.n	8009606 <_puts_r+0x36>
 8009600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009602:	f000 fba7 	bl	8009d54 <__retarget_lock_acquire_recursive>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	0719      	lsls	r1, r3, #28
 800960a:	d51d      	bpl.n	8009648 <_puts_r+0x78>
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	b1db      	cbz	r3, 8009648 <_puts_r+0x78>
 8009610:	3e01      	subs	r6, #1
 8009612:	68a3      	ldr	r3, [r4, #8]
 8009614:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009618:	3b01      	subs	r3, #1
 800961a:	60a3      	str	r3, [r4, #8]
 800961c:	bb39      	cbnz	r1, 800966e <_puts_r+0x9e>
 800961e:	2b00      	cmp	r3, #0
 8009620:	da38      	bge.n	8009694 <_puts_r+0xc4>
 8009622:	4622      	mov	r2, r4
 8009624:	210a      	movs	r1, #10
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f91c 	bl	8009864 <__swbuf_r>
 800962c:	3001      	adds	r0, #1
 800962e:	d011      	beq.n	8009654 <_puts_r+0x84>
 8009630:	250a      	movs	r5, #10
 8009632:	e011      	b.n	8009658 <_puts_r+0x88>
 8009634:	4b1b      	ldr	r3, [pc, #108]	; (80096a4 <_puts_r+0xd4>)
 8009636:	429c      	cmp	r4, r3
 8009638:	d101      	bne.n	800963e <_puts_r+0x6e>
 800963a:	68ac      	ldr	r4, [r5, #8]
 800963c:	e7da      	b.n	80095f4 <_puts_r+0x24>
 800963e:	4b1a      	ldr	r3, [pc, #104]	; (80096a8 <_puts_r+0xd8>)
 8009640:	429c      	cmp	r4, r3
 8009642:	bf08      	it	eq
 8009644:	68ec      	ldreq	r4, [r5, #12]
 8009646:	e7d5      	b.n	80095f4 <_puts_r+0x24>
 8009648:	4621      	mov	r1, r4
 800964a:	4628      	mov	r0, r5
 800964c:	f000 f95c 	bl	8009908 <__swsetup_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	d0dd      	beq.n	8009610 <_puts_r+0x40>
 8009654:	f04f 35ff 	mov.w	r5, #4294967295
 8009658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800965a:	07da      	lsls	r2, r3, #31
 800965c:	d405      	bmi.n	800966a <_puts_r+0x9a>
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	059b      	lsls	r3, r3, #22
 8009662:	d402      	bmi.n	800966a <_puts_r+0x9a>
 8009664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009666:	f000 fb76 	bl	8009d56 <__retarget_lock_release_recursive>
 800966a:	4628      	mov	r0, r5
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	2b00      	cmp	r3, #0
 8009670:	da04      	bge.n	800967c <_puts_r+0xac>
 8009672:	69a2      	ldr	r2, [r4, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	dc06      	bgt.n	8009686 <_puts_r+0xb6>
 8009678:	290a      	cmp	r1, #10
 800967a:	d004      	beq.n	8009686 <_puts_r+0xb6>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	6022      	str	r2, [r4, #0]
 8009682:	7019      	strb	r1, [r3, #0]
 8009684:	e7c5      	b.n	8009612 <_puts_r+0x42>
 8009686:	4622      	mov	r2, r4
 8009688:	4628      	mov	r0, r5
 800968a:	f000 f8eb 	bl	8009864 <__swbuf_r>
 800968e:	3001      	adds	r0, #1
 8009690:	d1bf      	bne.n	8009612 <_puts_r+0x42>
 8009692:	e7df      	b.n	8009654 <_puts_r+0x84>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	250a      	movs	r5, #10
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	6022      	str	r2, [r4, #0]
 800969c:	701d      	strb	r5, [r3, #0]
 800969e:	e7db      	b.n	8009658 <_puts_r+0x88>
 80096a0:	0800ad98 	.word	0x0800ad98
 80096a4:	0800adb8 	.word	0x0800adb8
 80096a8:	0800ad78 	.word	0x0800ad78

080096ac <puts>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	; (80096b8 <puts+0xc>)
 80096ae:	4601      	mov	r1, r0
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f7ff bf8d 	b.w	80095d0 <_puts_r>
 80096b6:	bf00      	nop
 80096b8:	20000048 	.word	0x20000048

080096bc <siprintf>:
 80096bc:	b40e      	push	{r1, r2, r3}
 80096be:	b500      	push	{lr}
 80096c0:	b09c      	sub	sp, #112	; 0x70
 80096c2:	ab1d      	add	r3, sp, #116	; 0x74
 80096c4:	9002      	str	r0, [sp, #8]
 80096c6:	9006      	str	r0, [sp, #24]
 80096c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096cc:	4809      	ldr	r0, [pc, #36]	; (80096f4 <siprintf+0x38>)
 80096ce:	9107      	str	r1, [sp, #28]
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	4909      	ldr	r1, [pc, #36]	; (80096f8 <siprintf+0x3c>)
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f000 fcdc 	bl	800a09c <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	b01c      	add	sp, #112	; 0x70
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	20000048 	.word	0x20000048
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <strncmp>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	b17a      	cbz	r2, 8009720 <strncmp+0x24>
 8009700:	4603      	mov	r3, r0
 8009702:	3901      	subs	r1, #1
 8009704:	1884      	adds	r4, r0, r2
 8009706:	f813 0b01 	ldrb.w	r0, [r3], #1
 800970a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800970e:	4290      	cmp	r0, r2
 8009710:	d101      	bne.n	8009716 <strncmp+0x1a>
 8009712:	42a3      	cmp	r3, r4
 8009714:	d101      	bne.n	800971a <strncmp+0x1e>
 8009716:	1a80      	subs	r0, r0, r2
 8009718:	bd10      	pop	{r4, pc}
 800971a:	2800      	cmp	r0, #0
 800971c:	d1f3      	bne.n	8009706 <strncmp+0xa>
 800971e:	e7fa      	b.n	8009716 <strncmp+0x1a>
 8009720:	4610      	mov	r0, r2
 8009722:	e7f9      	b.n	8009718 <strncmp+0x1c>

08009724 <strncpy>:
 8009724:	b510      	push	{r4, lr}
 8009726:	3901      	subs	r1, #1
 8009728:	4603      	mov	r3, r0
 800972a:	b132      	cbz	r2, 800973a <strncpy+0x16>
 800972c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009730:	f803 4b01 	strb.w	r4, [r3], #1
 8009734:	3a01      	subs	r2, #1
 8009736:	2c00      	cmp	r4, #0
 8009738:	d1f7      	bne.n	800972a <strncpy+0x6>
 800973a:	441a      	add	r2, r3
 800973c:	2100      	movs	r1, #0
 800973e:	4293      	cmp	r3, r2
 8009740:	d100      	bne.n	8009744 <strncpy+0x20>
 8009742:	bd10      	pop	{r4, pc}
 8009744:	f803 1b01 	strb.w	r1, [r3], #1
 8009748:	e7f9      	b.n	800973e <strncpy+0x1a>
	...

0800974c <_strtol_l.constprop.0>:
 800974c:	2b01      	cmp	r3, #1
 800974e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009752:	d001      	beq.n	8009758 <_strtol_l.constprop.0+0xc>
 8009754:	2b24      	cmp	r3, #36	; 0x24
 8009756:	d906      	bls.n	8009766 <_strtol_l.constprop.0+0x1a>
 8009758:	f7ff fef0 	bl	800953c <__errno>
 800975c:	2316      	movs	r3, #22
 800975e:	6003      	str	r3, [r0, #0]
 8009760:	2000      	movs	r0, #0
 8009762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009766:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800984c <_strtol_l.constprop.0+0x100>
 800976a:	460d      	mov	r5, r1
 800976c:	462e      	mov	r6, r5
 800976e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009772:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009776:	f017 0708 	ands.w	r7, r7, #8
 800977a:	d1f7      	bne.n	800976c <_strtol_l.constprop.0+0x20>
 800977c:	2c2d      	cmp	r4, #45	; 0x2d
 800977e:	d132      	bne.n	80097e6 <_strtol_l.constprop.0+0x9a>
 8009780:	782c      	ldrb	r4, [r5, #0]
 8009782:	2701      	movs	r7, #1
 8009784:	1cb5      	adds	r5, r6, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d05b      	beq.n	8009842 <_strtol_l.constprop.0+0xf6>
 800978a:	2b10      	cmp	r3, #16
 800978c:	d109      	bne.n	80097a2 <_strtol_l.constprop.0+0x56>
 800978e:	2c30      	cmp	r4, #48	; 0x30
 8009790:	d107      	bne.n	80097a2 <_strtol_l.constprop.0+0x56>
 8009792:	782c      	ldrb	r4, [r5, #0]
 8009794:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009798:	2c58      	cmp	r4, #88	; 0x58
 800979a:	d14d      	bne.n	8009838 <_strtol_l.constprop.0+0xec>
 800979c:	786c      	ldrb	r4, [r5, #1]
 800979e:	2310      	movs	r3, #16
 80097a0:	3502      	adds	r5, #2
 80097a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80097a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80097aa:	f04f 0c00 	mov.w	ip, #0
 80097ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80097b2:	4666      	mov	r6, ip
 80097b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80097b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80097bc:	f1be 0f09 	cmp.w	lr, #9
 80097c0:	d816      	bhi.n	80097f0 <_strtol_l.constprop.0+0xa4>
 80097c2:	4674      	mov	r4, lr
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	dd24      	ble.n	8009812 <_strtol_l.constprop.0+0xc6>
 80097c8:	f1bc 0f00 	cmp.w	ip, #0
 80097cc:	db1e      	blt.n	800980c <_strtol_l.constprop.0+0xc0>
 80097ce:	45b1      	cmp	r9, r6
 80097d0:	d31c      	bcc.n	800980c <_strtol_l.constprop.0+0xc0>
 80097d2:	d101      	bne.n	80097d8 <_strtol_l.constprop.0+0x8c>
 80097d4:	45a2      	cmp	sl, r4
 80097d6:	db19      	blt.n	800980c <_strtol_l.constprop.0+0xc0>
 80097d8:	fb06 4603 	mla	r6, r6, r3, r4
 80097dc:	f04f 0c01 	mov.w	ip, #1
 80097e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097e4:	e7e8      	b.n	80097b8 <_strtol_l.constprop.0+0x6c>
 80097e6:	2c2b      	cmp	r4, #43	; 0x2b
 80097e8:	bf04      	itt	eq
 80097ea:	782c      	ldrbeq	r4, [r5, #0]
 80097ec:	1cb5      	addeq	r5, r6, #2
 80097ee:	e7ca      	b.n	8009786 <_strtol_l.constprop.0+0x3a>
 80097f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097f4:	f1be 0f19 	cmp.w	lr, #25
 80097f8:	d801      	bhi.n	80097fe <_strtol_l.constprop.0+0xb2>
 80097fa:	3c37      	subs	r4, #55	; 0x37
 80097fc:	e7e2      	b.n	80097c4 <_strtol_l.constprop.0+0x78>
 80097fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009802:	f1be 0f19 	cmp.w	lr, #25
 8009806:	d804      	bhi.n	8009812 <_strtol_l.constprop.0+0xc6>
 8009808:	3c57      	subs	r4, #87	; 0x57
 800980a:	e7db      	b.n	80097c4 <_strtol_l.constprop.0+0x78>
 800980c:	f04f 3cff 	mov.w	ip, #4294967295
 8009810:	e7e6      	b.n	80097e0 <_strtol_l.constprop.0+0x94>
 8009812:	f1bc 0f00 	cmp.w	ip, #0
 8009816:	da05      	bge.n	8009824 <_strtol_l.constprop.0+0xd8>
 8009818:	2322      	movs	r3, #34	; 0x22
 800981a:	6003      	str	r3, [r0, #0]
 800981c:	4646      	mov	r6, r8
 800981e:	b942      	cbnz	r2, 8009832 <_strtol_l.constprop.0+0xe6>
 8009820:	4630      	mov	r0, r6
 8009822:	e79e      	b.n	8009762 <_strtol_l.constprop.0+0x16>
 8009824:	b107      	cbz	r7, 8009828 <_strtol_l.constprop.0+0xdc>
 8009826:	4276      	negs	r6, r6
 8009828:	2a00      	cmp	r2, #0
 800982a:	d0f9      	beq.n	8009820 <_strtol_l.constprop.0+0xd4>
 800982c:	f1bc 0f00 	cmp.w	ip, #0
 8009830:	d000      	beq.n	8009834 <_strtol_l.constprop.0+0xe8>
 8009832:	1e69      	subs	r1, r5, #1
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	e7f3      	b.n	8009820 <_strtol_l.constprop.0+0xd4>
 8009838:	2430      	movs	r4, #48	; 0x30
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1b1      	bne.n	80097a2 <_strtol_l.constprop.0+0x56>
 800983e:	2308      	movs	r3, #8
 8009840:	e7af      	b.n	80097a2 <_strtol_l.constprop.0+0x56>
 8009842:	2c30      	cmp	r4, #48	; 0x30
 8009844:	d0a5      	beq.n	8009792 <_strtol_l.constprop.0+0x46>
 8009846:	230a      	movs	r3, #10
 8009848:	e7ab      	b.n	80097a2 <_strtol_l.constprop.0+0x56>
 800984a:	bf00      	nop
 800984c:	0800ac75 	.word	0x0800ac75

08009850 <strtol>:
 8009850:	4613      	mov	r3, r2
 8009852:	460a      	mov	r2, r1
 8009854:	4601      	mov	r1, r0
 8009856:	4802      	ldr	r0, [pc, #8]	; (8009860 <strtol+0x10>)
 8009858:	6800      	ldr	r0, [r0, #0]
 800985a:	f7ff bf77 	b.w	800974c <_strtol_l.constprop.0>
 800985e:	bf00      	nop
 8009860:	20000048 	.word	0x20000048

08009864 <__swbuf_r>:
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	460e      	mov	r6, r1
 8009868:	4614      	mov	r4, r2
 800986a:	4605      	mov	r5, r0
 800986c:	b118      	cbz	r0, 8009876 <__swbuf_r+0x12>
 800986e:	6983      	ldr	r3, [r0, #24]
 8009870:	b90b      	cbnz	r3, 8009876 <__swbuf_r+0x12>
 8009872:	f000 f9d1 	bl	8009c18 <__sinit>
 8009876:	4b21      	ldr	r3, [pc, #132]	; (80098fc <__swbuf_r+0x98>)
 8009878:	429c      	cmp	r4, r3
 800987a:	d12b      	bne.n	80098d4 <__swbuf_r+0x70>
 800987c:	686c      	ldr	r4, [r5, #4]
 800987e:	69a3      	ldr	r3, [r4, #24]
 8009880:	60a3      	str	r3, [r4, #8]
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	071a      	lsls	r2, r3, #28
 8009886:	d52f      	bpl.n	80098e8 <__swbuf_r+0x84>
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	b36b      	cbz	r3, 80098e8 <__swbuf_r+0x84>
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	6820      	ldr	r0, [r4, #0]
 8009890:	1ac0      	subs	r0, r0, r3
 8009892:	6963      	ldr	r3, [r4, #20]
 8009894:	b2f6      	uxtb	r6, r6
 8009896:	4283      	cmp	r3, r0
 8009898:	4637      	mov	r7, r6
 800989a:	dc04      	bgt.n	80098a6 <__swbuf_r+0x42>
 800989c:	4621      	mov	r1, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	f000 f926 	bl	8009af0 <_fflush_r>
 80098a4:	bb30      	cbnz	r0, 80098f4 <__swbuf_r+0x90>
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	60a3      	str	r3, [r4, #8]
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	6022      	str	r2, [r4, #0]
 80098b2:	701e      	strb	r6, [r3, #0]
 80098b4:	6963      	ldr	r3, [r4, #20]
 80098b6:	3001      	adds	r0, #1
 80098b8:	4283      	cmp	r3, r0
 80098ba:	d004      	beq.n	80098c6 <__swbuf_r+0x62>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	07db      	lsls	r3, r3, #31
 80098c0:	d506      	bpl.n	80098d0 <__swbuf_r+0x6c>
 80098c2:	2e0a      	cmp	r6, #10
 80098c4:	d104      	bne.n	80098d0 <__swbuf_r+0x6c>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 f911 	bl	8009af0 <_fflush_r>
 80098ce:	b988      	cbnz	r0, 80098f4 <__swbuf_r+0x90>
 80098d0:	4638      	mov	r0, r7
 80098d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d4:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <__swbuf_r+0x9c>)
 80098d6:	429c      	cmp	r4, r3
 80098d8:	d101      	bne.n	80098de <__swbuf_r+0x7a>
 80098da:	68ac      	ldr	r4, [r5, #8]
 80098dc:	e7cf      	b.n	800987e <__swbuf_r+0x1a>
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <__swbuf_r+0xa0>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	bf08      	it	eq
 80098e4:	68ec      	ldreq	r4, [r5, #12]
 80098e6:	e7ca      	b.n	800987e <__swbuf_r+0x1a>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	f000 f80c 	bl	8009908 <__swsetup_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d0cb      	beq.n	800988c <__swbuf_r+0x28>
 80098f4:	f04f 37ff 	mov.w	r7, #4294967295
 80098f8:	e7ea      	b.n	80098d0 <__swbuf_r+0x6c>
 80098fa:	bf00      	nop
 80098fc:	0800ad98 	.word	0x0800ad98
 8009900:	0800adb8 	.word	0x0800adb8
 8009904:	0800ad78 	.word	0x0800ad78

08009908 <__swsetup_r>:
 8009908:	4b32      	ldr	r3, [pc, #200]	; (80099d4 <__swsetup_r+0xcc>)
 800990a:	b570      	push	{r4, r5, r6, lr}
 800990c:	681d      	ldr	r5, [r3, #0]
 800990e:	4606      	mov	r6, r0
 8009910:	460c      	mov	r4, r1
 8009912:	b125      	cbz	r5, 800991e <__swsetup_r+0x16>
 8009914:	69ab      	ldr	r3, [r5, #24]
 8009916:	b913      	cbnz	r3, 800991e <__swsetup_r+0x16>
 8009918:	4628      	mov	r0, r5
 800991a:	f000 f97d 	bl	8009c18 <__sinit>
 800991e:	4b2e      	ldr	r3, [pc, #184]	; (80099d8 <__swsetup_r+0xd0>)
 8009920:	429c      	cmp	r4, r3
 8009922:	d10f      	bne.n	8009944 <__swsetup_r+0x3c>
 8009924:	686c      	ldr	r4, [r5, #4]
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800992c:	0719      	lsls	r1, r3, #28
 800992e:	d42c      	bmi.n	800998a <__swsetup_r+0x82>
 8009930:	06dd      	lsls	r5, r3, #27
 8009932:	d411      	bmi.n	8009958 <__swsetup_r+0x50>
 8009934:	2309      	movs	r3, #9
 8009936:	6033      	str	r3, [r6, #0]
 8009938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	f04f 30ff 	mov.w	r0, #4294967295
 8009942:	e03e      	b.n	80099c2 <__swsetup_r+0xba>
 8009944:	4b25      	ldr	r3, [pc, #148]	; (80099dc <__swsetup_r+0xd4>)
 8009946:	429c      	cmp	r4, r3
 8009948:	d101      	bne.n	800994e <__swsetup_r+0x46>
 800994a:	68ac      	ldr	r4, [r5, #8]
 800994c:	e7eb      	b.n	8009926 <__swsetup_r+0x1e>
 800994e:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <__swsetup_r+0xd8>)
 8009950:	429c      	cmp	r4, r3
 8009952:	bf08      	it	eq
 8009954:	68ec      	ldreq	r4, [r5, #12]
 8009956:	e7e6      	b.n	8009926 <__swsetup_r+0x1e>
 8009958:	0758      	lsls	r0, r3, #29
 800995a:	d512      	bpl.n	8009982 <__swsetup_r+0x7a>
 800995c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800995e:	b141      	cbz	r1, 8009972 <__swsetup_r+0x6a>
 8009960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009964:	4299      	cmp	r1, r3
 8009966:	d002      	beq.n	800996e <__swsetup_r+0x66>
 8009968:	4630      	mov	r0, r6
 800996a:	f000 fa5b 	bl	8009e24 <_free_r>
 800996e:	2300      	movs	r3, #0
 8009970:	6363      	str	r3, [r4, #52]	; 0x34
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	2300      	movs	r3, #0
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f043 0308 	orr.w	r3, r3, #8
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	6923      	ldr	r3, [r4, #16]
 800998c:	b94b      	cbnz	r3, 80099a2 <__swsetup_r+0x9a>
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009998:	d003      	beq.n	80099a2 <__swsetup_r+0x9a>
 800999a:	4621      	mov	r1, r4
 800999c:	4630      	mov	r0, r6
 800999e:	f000 fa01 	bl	8009da4 <__smakebuf_r>
 80099a2:	89a0      	ldrh	r0, [r4, #12]
 80099a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a8:	f010 0301 	ands.w	r3, r0, #1
 80099ac:	d00a      	beq.n	80099c4 <__swsetup_r+0xbc>
 80099ae:	2300      	movs	r3, #0
 80099b0:	60a3      	str	r3, [r4, #8]
 80099b2:	6963      	ldr	r3, [r4, #20]
 80099b4:	425b      	negs	r3, r3
 80099b6:	61a3      	str	r3, [r4, #24]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b943      	cbnz	r3, 80099ce <__swsetup_r+0xc6>
 80099bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099c0:	d1ba      	bne.n	8009938 <__swsetup_r+0x30>
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
 80099c4:	0781      	lsls	r1, r0, #30
 80099c6:	bf58      	it	pl
 80099c8:	6963      	ldrpl	r3, [r4, #20]
 80099ca:	60a3      	str	r3, [r4, #8]
 80099cc:	e7f4      	b.n	80099b8 <__swsetup_r+0xb0>
 80099ce:	2000      	movs	r0, #0
 80099d0:	e7f7      	b.n	80099c2 <__swsetup_r+0xba>
 80099d2:	bf00      	nop
 80099d4:	20000048 	.word	0x20000048
 80099d8:	0800ad98 	.word	0x0800ad98
 80099dc:	0800adb8 	.word	0x0800adb8
 80099e0:	0800ad78 	.word	0x0800ad78

080099e4 <__sflush_r>:
 80099e4:	898a      	ldrh	r2, [r1, #12]
 80099e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	0710      	lsls	r0, r2, #28
 80099ee:	460c      	mov	r4, r1
 80099f0:	d458      	bmi.n	8009aa4 <__sflush_r+0xc0>
 80099f2:	684b      	ldr	r3, [r1, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dc05      	bgt.n	8009a04 <__sflush_r+0x20>
 80099f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dc02      	bgt.n	8009a04 <__sflush_r+0x20>
 80099fe:	2000      	movs	r0, #0
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d0f9      	beq.n	80099fe <__sflush_r+0x1a>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a10:	682f      	ldr	r7, [r5, #0]
 8009a12:	602b      	str	r3, [r5, #0]
 8009a14:	d032      	beq.n	8009a7c <__sflush_r+0x98>
 8009a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	075a      	lsls	r2, r3, #29
 8009a1c:	d505      	bpl.n	8009a2a <__sflush_r+0x46>
 8009a1e:	6863      	ldr	r3, [r4, #4]
 8009a20:	1ac0      	subs	r0, r0, r3
 8009a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a24:	b10b      	cbz	r3, 8009a2a <__sflush_r+0x46>
 8009a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a28:	1ac0      	subs	r0, r0, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a30:	6a21      	ldr	r1, [r4, #32]
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b0      	blx	r6
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	d106      	bne.n	8009a4a <__sflush_r+0x66>
 8009a3c:	6829      	ldr	r1, [r5, #0]
 8009a3e:	291d      	cmp	r1, #29
 8009a40:	d82c      	bhi.n	8009a9c <__sflush_r+0xb8>
 8009a42:	4a2a      	ldr	r2, [pc, #168]	; (8009aec <__sflush_r+0x108>)
 8009a44:	40ca      	lsrs	r2, r1
 8009a46:	07d6      	lsls	r6, r2, #31
 8009a48:	d528      	bpl.n	8009a9c <__sflush_r+0xb8>
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	6062      	str	r2, [r4, #4]
 8009a4e:	04d9      	lsls	r1, r3, #19
 8009a50:	6922      	ldr	r2, [r4, #16]
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	d504      	bpl.n	8009a60 <__sflush_r+0x7c>
 8009a56:	1c42      	adds	r2, r0, #1
 8009a58:	d101      	bne.n	8009a5e <__sflush_r+0x7a>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	b903      	cbnz	r3, 8009a60 <__sflush_r+0x7c>
 8009a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8009a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a62:	602f      	str	r7, [r5, #0]
 8009a64:	2900      	cmp	r1, #0
 8009a66:	d0ca      	beq.n	80099fe <__sflush_r+0x1a>
 8009a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d002      	beq.n	8009a76 <__sflush_r+0x92>
 8009a70:	4628      	mov	r0, r5
 8009a72:	f000 f9d7 	bl	8009e24 <_free_r>
 8009a76:	2000      	movs	r0, #0
 8009a78:	6360      	str	r0, [r4, #52]	; 0x34
 8009a7a:	e7c1      	b.n	8009a00 <__sflush_r+0x1c>
 8009a7c:	6a21      	ldr	r1, [r4, #32]
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b0      	blx	r6
 8009a84:	1c41      	adds	r1, r0, #1
 8009a86:	d1c7      	bne.n	8009a18 <__sflush_r+0x34>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0c4      	beq.n	8009a18 <__sflush_r+0x34>
 8009a8e:	2b1d      	cmp	r3, #29
 8009a90:	d001      	beq.n	8009a96 <__sflush_r+0xb2>
 8009a92:	2b16      	cmp	r3, #22
 8009a94:	d101      	bne.n	8009a9a <__sflush_r+0xb6>
 8009a96:	602f      	str	r7, [r5, #0]
 8009a98:	e7b1      	b.n	80099fe <__sflush_r+0x1a>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	e7ad      	b.n	8009a00 <__sflush_r+0x1c>
 8009aa4:	690f      	ldr	r7, [r1, #16]
 8009aa6:	2f00      	cmp	r7, #0
 8009aa8:	d0a9      	beq.n	80099fe <__sflush_r+0x1a>
 8009aaa:	0793      	lsls	r3, r2, #30
 8009aac:	680e      	ldr	r6, [r1, #0]
 8009aae:	bf08      	it	eq
 8009ab0:	694b      	ldreq	r3, [r1, #20]
 8009ab2:	600f      	str	r7, [r1, #0]
 8009ab4:	bf18      	it	ne
 8009ab6:	2300      	movne	r3, #0
 8009ab8:	eba6 0807 	sub.w	r8, r6, r7
 8009abc:	608b      	str	r3, [r1, #8]
 8009abe:	f1b8 0f00 	cmp.w	r8, #0
 8009ac2:	dd9c      	ble.n	80099fe <__sflush_r+0x1a>
 8009ac4:	6a21      	ldr	r1, [r4, #32]
 8009ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ac8:	4643      	mov	r3, r8
 8009aca:	463a      	mov	r2, r7
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b0      	blx	r6
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	dc06      	bgt.n	8009ae2 <__sflush_r+0xfe>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	e78e      	b.n	8009a00 <__sflush_r+0x1c>
 8009ae2:	4407      	add	r7, r0
 8009ae4:	eba8 0800 	sub.w	r8, r8, r0
 8009ae8:	e7e9      	b.n	8009abe <__sflush_r+0xda>
 8009aea:	bf00      	nop
 8009aec:	20400001 	.word	0x20400001

08009af0 <_fflush_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	690b      	ldr	r3, [r1, #16]
 8009af4:	4605      	mov	r5, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	b913      	cbnz	r3, 8009b00 <_fflush_r+0x10>
 8009afa:	2500      	movs	r5, #0
 8009afc:	4628      	mov	r0, r5
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	b118      	cbz	r0, 8009b0a <_fflush_r+0x1a>
 8009b02:	6983      	ldr	r3, [r0, #24]
 8009b04:	b90b      	cbnz	r3, 8009b0a <_fflush_r+0x1a>
 8009b06:	f000 f887 	bl	8009c18 <__sinit>
 8009b0a:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <_fflush_r+0x6c>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	d11b      	bne.n	8009b48 <_fflush_r+0x58>
 8009b10:	686c      	ldr	r4, [r5, #4]
 8009b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0ef      	beq.n	8009afa <_fflush_r+0xa>
 8009b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b1c:	07d0      	lsls	r0, r2, #31
 8009b1e:	d404      	bmi.n	8009b2a <_fflush_r+0x3a>
 8009b20:	0599      	lsls	r1, r3, #22
 8009b22:	d402      	bmi.n	8009b2a <_fflush_r+0x3a>
 8009b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b26:	f000 f915 	bl	8009d54 <__retarget_lock_acquire_recursive>
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f7ff ff59 	bl	80099e4 <__sflush_r>
 8009b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b34:	07da      	lsls	r2, r3, #31
 8009b36:	4605      	mov	r5, r0
 8009b38:	d4e0      	bmi.n	8009afc <_fflush_r+0xc>
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	059b      	lsls	r3, r3, #22
 8009b3e:	d4dd      	bmi.n	8009afc <_fflush_r+0xc>
 8009b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b42:	f000 f908 	bl	8009d56 <__retarget_lock_release_recursive>
 8009b46:	e7d9      	b.n	8009afc <_fflush_r+0xc>
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <_fflush_r+0x70>)
 8009b4a:	429c      	cmp	r4, r3
 8009b4c:	d101      	bne.n	8009b52 <_fflush_r+0x62>
 8009b4e:	68ac      	ldr	r4, [r5, #8]
 8009b50:	e7df      	b.n	8009b12 <_fflush_r+0x22>
 8009b52:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <_fflush_r+0x74>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	bf08      	it	eq
 8009b58:	68ec      	ldreq	r4, [r5, #12]
 8009b5a:	e7da      	b.n	8009b12 <_fflush_r+0x22>
 8009b5c:	0800ad98 	.word	0x0800ad98
 8009b60:	0800adb8 	.word	0x0800adb8
 8009b64:	0800ad78 	.word	0x0800ad78

08009b68 <std>:
 8009b68:	2300      	movs	r3, #0
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b76:	6083      	str	r3, [r0, #8]
 8009b78:	8181      	strh	r1, [r0, #12]
 8009b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b7c:	81c2      	strh	r2, [r0, #14]
 8009b7e:	6183      	str	r3, [r0, #24]
 8009b80:	4619      	mov	r1, r3
 8009b82:	2208      	movs	r2, #8
 8009b84:	305c      	adds	r0, #92	; 0x5c
 8009b86:	f7ff fd03 	bl	8009590 <memset>
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <std+0x38>)
 8009b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <std+0x3c>)
 8009b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <std+0x40>)
 8009b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <std+0x44>)
 8009b98:	6224      	str	r4, [r4, #32]
 8009b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	bf00      	nop
 8009ba0:	0800a899 	.word	0x0800a899
 8009ba4:	0800a8bb 	.word	0x0800a8bb
 8009ba8:	0800a8f3 	.word	0x0800a8f3
 8009bac:	0800a917 	.word	0x0800a917

08009bb0 <_cleanup_r>:
 8009bb0:	4901      	ldr	r1, [pc, #4]	; (8009bb8 <_cleanup_r+0x8>)
 8009bb2:	f000 b8af 	b.w	8009d14 <_fwalk_reent>
 8009bb6:	bf00      	nop
 8009bb8:	08009af1 	.word	0x08009af1

08009bbc <__sfmoreglue>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	2268      	movs	r2, #104	; 0x68
 8009bc0:	1e4d      	subs	r5, r1, #1
 8009bc2:	4355      	muls	r5, r2
 8009bc4:	460e      	mov	r6, r1
 8009bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bca:	f000 f997 	bl	8009efc <_malloc_r>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	b140      	cbz	r0, 8009be4 <__sfmoreglue+0x28>
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009bd8:	300c      	adds	r0, #12
 8009bda:	60a0      	str	r0, [r4, #8]
 8009bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009be0:	f7ff fcd6 	bl	8009590 <memset>
 8009be4:	4620      	mov	r0, r4
 8009be6:	bd70      	pop	{r4, r5, r6, pc}

08009be8 <__sfp_lock_acquire>:
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <__sfp_lock_acquire+0x8>)
 8009bea:	f000 b8b3 	b.w	8009d54 <__retarget_lock_acquire_recursive>
 8009bee:	bf00      	nop
 8009bf0:	20000bb1 	.word	0x20000bb1

08009bf4 <__sfp_lock_release>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__sfp_lock_release+0x8>)
 8009bf6:	f000 b8ae 	b.w	8009d56 <__retarget_lock_release_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20000bb1 	.word	0x20000bb1

08009c00 <__sinit_lock_acquire>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__sinit_lock_acquire+0x8>)
 8009c02:	f000 b8a7 	b.w	8009d54 <__retarget_lock_acquire_recursive>
 8009c06:	bf00      	nop
 8009c08:	20000bb2 	.word	0x20000bb2

08009c0c <__sinit_lock_release>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__sinit_lock_release+0x8>)
 8009c0e:	f000 b8a2 	b.w	8009d56 <__retarget_lock_release_recursive>
 8009c12:	bf00      	nop
 8009c14:	20000bb2 	.word	0x20000bb2

08009c18 <__sinit>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	f7ff fff0 	bl	8009c00 <__sinit_lock_acquire>
 8009c20:	69a3      	ldr	r3, [r4, #24]
 8009c22:	b11b      	cbz	r3, 8009c2c <__sinit+0x14>
 8009c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c28:	f7ff bff0 	b.w	8009c0c <__sinit_lock_release>
 8009c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c30:	6523      	str	r3, [r4, #80]	; 0x50
 8009c32:	4b13      	ldr	r3, [pc, #76]	; (8009c80 <__sinit+0x68>)
 8009c34:	4a13      	ldr	r2, [pc, #76]	; (8009c84 <__sinit+0x6c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c3a:	42a3      	cmp	r3, r4
 8009c3c:	bf04      	itt	eq
 8009c3e:	2301      	moveq	r3, #1
 8009c40:	61a3      	streq	r3, [r4, #24]
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 f820 	bl	8009c88 <__sfp>
 8009c48:	6060      	str	r0, [r4, #4]
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 f81c 	bl	8009c88 <__sfp>
 8009c50:	60a0      	str	r0, [r4, #8]
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f818 	bl	8009c88 <__sfp>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	60e0      	str	r0, [r4, #12]
 8009c5c:	2104      	movs	r1, #4
 8009c5e:	6860      	ldr	r0, [r4, #4]
 8009c60:	f7ff ff82 	bl	8009b68 <std>
 8009c64:	68a0      	ldr	r0, [r4, #8]
 8009c66:	2201      	movs	r2, #1
 8009c68:	2109      	movs	r1, #9
 8009c6a:	f7ff ff7d 	bl	8009b68 <std>
 8009c6e:	68e0      	ldr	r0, [r4, #12]
 8009c70:	2202      	movs	r2, #2
 8009c72:	2112      	movs	r1, #18
 8009c74:	f7ff ff78 	bl	8009b68 <std>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	61a3      	str	r3, [r4, #24]
 8009c7c:	e7d2      	b.n	8009c24 <__sinit+0xc>
 8009c7e:	bf00      	nop
 8009c80:	0800ac70 	.word	0x0800ac70
 8009c84:	08009bb1 	.word	0x08009bb1

08009c88 <__sfp>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	f7ff ffac 	bl	8009be8 <__sfp_lock_acquire>
 8009c90:	4b1e      	ldr	r3, [pc, #120]	; (8009d0c <__sfp+0x84>)
 8009c92:	681e      	ldr	r6, [r3, #0]
 8009c94:	69b3      	ldr	r3, [r6, #24]
 8009c96:	b913      	cbnz	r3, 8009c9e <__sfp+0x16>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff ffbd 	bl	8009c18 <__sinit>
 8009c9e:	3648      	adds	r6, #72	; 0x48
 8009ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	d503      	bpl.n	8009cb0 <__sfp+0x28>
 8009ca8:	6833      	ldr	r3, [r6, #0]
 8009caa:	b30b      	cbz	r3, 8009cf0 <__sfp+0x68>
 8009cac:	6836      	ldr	r6, [r6, #0]
 8009cae:	e7f7      	b.n	8009ca0 <__sfp+0x18>
 8009cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cb4:	b9d5      	cbnz	r5, 8009cec <__sfp+0x64>
 8009cb6:	4b16      	ldr	r3, [pc, #88]	; (8009d10 <__sfp+0x88>)
 8009cb8:	60e3      	str	r3, [r4, #12]
 8009cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8009cc0:	f000 f847 	bl	8009d52 <__retarget_lock_init_recursive>
 8009cc4:	f7ff ff96 	bl	8009bf4 <__sfp_lock_release>
 8009cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cd0:	6025      	str	r5, [r4, #0]
 8009cd2:	61a5      	str	r5, [r4, #24]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cdc:	f7ff fc58 	bl	8009590 <memset>
 8009ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ce8:	4620      	mov	r0, r4
 8009cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cec:	3468      	adds	r4, #104	; 0x68
 8009cee:	e7d9      	b.n	8009ca4 <__sfp+0x1c>
 8009cf0:	2104      	movs	r1, #4
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	f7ff ff62 	bl	8009bbc <__sfmoreglue>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	6030      	str	r0, [r6, #0]
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d1d5      	bne.n	8009cac <__sfp+0x24>
 8009d00:	f7ff ff78 	bl	8009bf4 <__sfp_lock_release>
 8009d04:	230c      	movs	r3, #12
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	e7ee      	b.n	8009ce8 <__sfp+0x60>
 8009d0a:	bf00      	nop
 8009d0c:	0800ac70 	.word	0x0800ac70
 8009d10:	ffff0001 	.word	0xffff0001

08009d14 <_fwalk_reent>:
 8009d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d18:	4606      	mov	r6, r0
 8009d1a:	4688      	mov	r8, r1
 8009d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d20:	2700      	movs	r7, #0
 8009d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d26:	f1b9 0901 	subs.w	r9, r9, #1
 8009d2a:	d505      	bpl.n	8009d38 <_fwalk_reent+0x24>
 8009d2c:	6824      	ldr	r4, [r4, #0]
 8009d2e:	2c00      	cmp	r4, #0
 8009d30:	d1f7      	bne.n	8009d22 <_fwalk_reent+0xe>
 8009d32:	4638      	mov	r0, r7
 8009d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d38:	89ab      	ldrh	r3, [r5, #12]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d907      	bls.n	8009d4e <_fwalk_reent+0x3a>
 8009d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d42:	3301      	adds	r3, #1
 8009d44:	d003      	beq.n	8009d4e <_fwalk_reent+0x3a>
 8009d46:	4629      	mov	r1, r5
 8009d48:	4630      	mov	r0, r6
 8009d4a:	47c0      	blx	r8
 8009d4c:	4307      	orrs	r7, r0
 8009d4e:	3568      	adds	r5, #104	; 0x68
 8009d50:	e7e9      	b.n	8009d26 <_fwalk_reent+0x12>

08009d52 <__retarget_lock_init_recursive>:
 8009d52:	4770      	bx	lr

08009d54 <__retarget_lock_acquire_recursive>:
 8009d54:	4770      	bx	lr

08009d56 <__retarget_lock_release_recursive>:
 8009d56:	4770      	bx	lr

08009d58 <__swhatbuf_r>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	460e      	mov	r6, r1
 8009d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d60:	2900      	cmp	r1, #0
 8009d62:	b096      	sub	sp, #88	; 0x58
 8009d64:	4614      	mov	r4, r2
 8009d66:	461d      	mov	r5, r3
 8009d68:	da08      	bge.n	8009d7c <__swhatbuf_r+0x24>
 8009d6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	602a      	str	r2, [r5, #0]
 8009d72:	061a      	lsls	r2, r3, #24
 8009d74:	d410      	bmi.n	8009d98 <__swhatbuf_r+0x40>
 8009d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7a:	e00e      	b.n	8009d9a <__swhatbuf_r+0x42>
 8009d7c:	466a      	mov	r2, sp
 8009d7e:	f000 fdf1 	bl	800a964 <_fstat_r>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	dbf1      	blt.n	8009d6a <__swhatbuf_r+0x12>
 8009d86:	9a01      	ldr	r2, [sp, #4]
 8009d88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d90:	425a      	negs	r2, r3
 8009d92:	415a      	adcs	r2, r3
 8009d94:	602a      	str	r2, [r5, #0]
 8009d96:	e7ee      	b.n	8009d76 <__swhatbuf_r+0x1e>
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	b016      	add	sp, #88	; 0x58
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009da4 <__smakebuf_r>:
 8009da4:	898b      	ldrh	r3, [r1, #12]
 8009da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009da8:	079d      	lsls	r5, r3, #30
 8009daa:	4606      	mov	r6, r0
 8009dac:	460c      	mov	r4, r1
 8009dae:	d507      	bpl.n	8009dc0 <__smakebuf_r+0x1c>
 8009db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	6123      	str	r3, [r4, #16]
 8009db8:	2301      	movs	r3, #1
 8009dba:	6163      	str	r3, [r4, #20]
 8009dbc:	b002      	add	sp, #8
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	ab01      	add	r3, sp, #4
 8009dc2:	466a      	mov	r2, sp
 8009dc4:	f7ff ffc8 	bl	8009d58 <__swhatbuf_r>
 8009dc8:	9900      	ldr	r1, [sp, #0]
 8009dca:	4605      	mov	r5, r0
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f000 f895 	bl	8009efc <_malloc_r>
 8009dd2:	b948      	cbnz	r0, 8009de8 <__smakebuf_r+0x44>
 8009dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd8:	059a      	lsls	r2, r3, #22
 8009dda:	d4ef      	bmi.n	8009dbc <__smakebuf_r+0x18>
 8009ddc:	f023 0303 	bic.w	r3, r3, #3
 8009de0:	f043 0302 	orr.w	r3, r3, #2
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	e7e3      	b.n	8009db0 <__smakebuf_r+0xc>
 8009de8:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <__smakebuf_r+0x7c>)
 8009dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	6020      	str	r0, [r4, #0]
 8009df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	6163      	str	r3, [r4, #20]
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	6120      	str	r0, [r4, #16]
 8009dfe:	b15b      	cbz	r3, 8009e18 <__smakebuf_r+0x74>
 8009e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e04:	4630      	mov	r0, r6
 8009e06:	f000 fdbf 	bl	800a988 <_isatty_r>
 8009e0a:	b128      	cbz	r0, 8009e18 <__smakebuf_r+0x74>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	f043 0301 	orr.w	r3, r3, #1
 8009e16:	81a3      	strh	r3, [r4, #12]
 8009e18:	89a0      	ldrh	r0, [r4, #12]
 8009e1a:	4305      	orrs	r5, r0
 8009e1c:	81a5      	strh	r5, [r4, #12]
 8009e1e:	e7cd      	b.n	8009dbc <__smakebuf_r+0x18>
 8009e20:	08009bb1 	.word	0x08009bb1

08009e24 <_free_r>:
 8009e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d044      	beq.n	8009eb4 <_free_r+0x90>
 8009e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2e:	9001      	str	r0, [sp, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f1a1 0404 	sub.w	r4, r1, #4
 8009e36:	bfb8      	it	lt
 8009e38:	18e4      	addlt	r4, r4, r3
 8009e3a:	f000 fdef 	bl	800aa1c <__malloc_lock>
 8009e3e:	4a1e      	ldr	r2, [pc, #120]	; (8009eb8 <_free_r+0x94>)
 8009e40:	9801      	ldr	r0, [sp, #4]
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	b933      	cbnz	r3, 8009e54 <_free_r+0x30>
 8009e46:	6063      	str	r3, [r4, #4]
 8009e48:	6014      	str	r4, [r2, #0]
 8009e4a:	b003      	add	sp, #12
 8009e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e50:	f000 bdea 	b.w	800aa28 <__malloc_unlock>
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	d908      	bls.n	8009e6a <_free_r+0x46>
 8009e58:	6825      	ldr	r5, [r4, #0]
 8009e5a:	1961      	adds	r1, r4, r5
 8009e5c:	428b      	cmp	r3, r1
 8009e5e:	bf01      	itttt	eq
 8009e60:	6819      	ldreq	r1, [r3, #0]
 8009e62:	685b      	ldreq	r3, [r3, #4]
 8009e64:	1949      	addeq	r1, r1, r5
 8009e66:	6021      	streq	r1, [r4, #0]
 8009e68:	e7ed      	b.n	8009e46 <_free_r+0x22>
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	b10b      	cbz	r3, 8009e74 <_free_r+0x50>
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d9fa      	bls.n	8009e6a <_free_r+0x46>
 8009e74:	6811      	ldr	r1, [r2, #0]
 8009e76:	1855      	adds	r5, r2, r1
 8009e78:	42a5      	cmp	r5, r4
 8009e7a:	d10b      	bne.n	8009e94 <_free_r+0x70>
 8009e7c:	6824      	ldr	r4, [r4, #0]
 8009e7e:	4421      	add	r1, r4
 8009e80:	1854      	adds	r4, r2, r1
 8009e82:	42a3      	cmp	r3, r4
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	d1e0      	bne.n	8009e4a <_free_r+0x26>
 8009e88:	681c      	ldr	r4, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	6053      	str	r3, [r2, #4]
 8009e8e:	4421      	add	r1, r4
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	e7da      	b.n	8009e4a <_free_r+0x26>
 8009e94:	d902      	bls.n	8009e9c <_free_r+0x78>
 8009e96:	230c      	movs	r3, #12
 8009e98:	6003      	str	r3, [r0, #0]
 8009e9a:	e7d6      	b.n	8009e4a <_free_r+0x26>
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	1961      	adds	r1, r4, r5
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	bf04      	itt	eq
 8009ea4:	6819      	ldreq	r1, [r3, #0]
 8009ea6:	685b      	ldreq	r3, [r3, #4]
 8009ea8:	6063      	str	r3, [r4, #4]
 8009eaa:	bf04      	itt	eq
 8009eac:	1949      	addeq	r1, r1, r5
 8009eae:	6021      	streq	r1, [r4, #0]
 8009eb0:	6054      	str	r4, [r2, #4]
 8009eb2:	e7ca      	b.n	8009e4a <_free_r+0x26>
 8009eb4:	b003      	add	sp, #12
 8009eb6:	bd30      	pop	{r4, r5, pc}
 8009eb8:	20000bb4 	.word	0x20000bb4

08009ebc <sbrk_aligned>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	4e0e      	ldr	r6, [pc, #56]	; (8009ef8 <sbrk_aligned+0x3c>)
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	6831      	ldr	r1, [r6, #0]
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	b911      	cbnz	r1, 8009ece <sbrk_aligned+0x12>
 8009ec8:	f000 fcd6 	bl	800a878 <_sbrk_r>
 8009ecc:	6030      	str	r0, [r6, #0]
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f000 fcd1 	bl	800a878 <_sbrk_r>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d00a      	beq.n	8009ef0 <sbrk_aligned+0x34>
 8009eda:	1cc4      	adds	r4, r0, #3
 8009edc:	f024 0403 	bic.w	r4, r4, #3
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d007      	beq.n	8009ef4 <sbrk_aligned+0x38>
 8009ee4:	1a21      	subs	r1, r4, r0
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 fcc6 	bl	800a878 <_sbrk_r>
 8009eec:	3001      	adds	r0, #1
 8009eee:	d101      	bne.n	8009ef4 <sbrk_aligned+0x38>
 8009ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	20000bb8 	.word	0x20000bb8

08009efc <_malloc_r>:
 8009efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f00:	1ccd      	adds	r5, r1, #3
 8009f02:	f025 0503 	bic.w	r5, r5, #3
 8009f06:	3508      	adds	r5, #8
 8009f08:	2d0c      	cmp	r5, #12
 8009f0a:	bf38      	it	cc
 8009f0c:	250c      	movcc	r5, #12
 8009f0e:	2d00      	cmp	r5, #0
 8009f10:	4607      	mov	r7, r0
 8009f12:	db01      	blt.n	8009f18 <_malloc_r+0x1c>
 8009f14:	42a9      	cmp	r1, r5
 8009f16:	d905      	bls.n	8009f24 <_malloc_r+0x28>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	2600      	movs	r6, #0
 8009f1e:	4630      	mov	r0, r6
 8009f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f24:	4e2e      	ldr	r6, [pc, #184]	; (8009fe0 <_malloc_r+0xe4>)
 8009f26:	f000 fd79 	bl	800aa1c <__malloc_lock>
 8009f2a:	6833      	ldr	r3, [r6, #0]
 8009f2c:	461c      	mov	r4, r3
 8009f2e:	bb34      	cbnz	r4, 8009f7e <_malloc_r+0x82>
 8009f30:	4629      	mov	r1, r5
 8009f32:	4638      	mov	r0, r7
 8009f34:	f7ff ffc2 	bl	8009ebc <sbrk_aligned>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	d14d      	bne.n	8009fda <_malloc_r+0xde>
 8009f3e:	6834      	ldr	r4, [r6, #0]
 8009f40:	4626      	mov	r6, r4
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d140      	bne.n	8009fc8 <_malloc_r+0xcc>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	eb04 0803 	add.w	r8, r4, r3
 8009f50:	f000 fc92 	bl	800a878 <_sbrk_r>
 8009f54:	4580      	cmp	r8, r0
 8009f56:	d13a      	bne.n	8009fce <_malloc_r+0xd2>
 8009f58:	6821      	ldr	r1, [r4, #0]
 8009f5a:	3503      	adds	r5, #3
 8009f5c:	1a6d      	subs	r5, r5, r1
 8009f5e:	f025 0503 	bic.w	r5, r5, #3
 8009f62:	3508      	adds	r5, #8
 8009f64:	2d0c      	cmp	r5, #12
 8009f66:	bf38      	it	cc
 8009f68:	250c      	movcc	r5, #12
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ffa5 	bl	8009ebc <sbrk_aligned>
 8009f72:	3001      	adds	r0, #1
 8009f74:	d02b      	beq.n	8009fce <_malloc_r+0xd2>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	442b      	add	r3, r5
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	e00e      	b.n	8009f9c <_malloc_r+0xa0>
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	1b52      	subs	r2, r2, r5
 8009f82:	d41e      	bmi.n	8009fc2 <_malloc_r+0xc6>
 8009f84:	2a0b      	cmp	r2, #11
 8009f86:	d916      	bls.n	8009fb6 <_malloc_r+0xba>
 8009f88:	1961      	adds	r1, r4, r5
 8009f8a:	42a3      	cmp	r3, r4
 8009f8c:	6025      	str	r5, [r4, #0]
 8009f8e:	bf18      	it	ne
 8009f90:	6059      	strne	r1, [r3, #4]
 8009f92:	6863      	ldr	r3, [r4, #4]
 8009f94:	bf08      	it	eq
 8009f96:	6031      	streq	r1, [r6, #0]
 8009f98:	5162      	str	r2, [r4, r5]
 8009f9a:	604b      	str	r3, [r1, #4]
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f104 060b 	add.w	r6, r4, #11
 8009fa2:	f000 fd41 	bl	800aa28 <__malloc_unlock>
 8009fa6:	f026 0607 	bic.w	r6, r6, #7
 8009faa:	1d23      	adds	r3, r4, #4
 8009fac:	1af2      	subs	r2, r6, r3
 8009fae:	d0b6      	beq.n	8009f1e <_malloc_r+0x22>
 8009fb0:	1b9b      	subs	r3, r3, r6
 8009fb2:	50a3      	str	r3, [r4, r2]
 8009fb4:	e7b3      	b.n	8009f1e <_malloc_r+0x22>
 8009fb6:	6862      	ldr	r2, [r4, #4]
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	bf0c      	ite	eq
 8009fbc:	6032      	streq	r2, [r6, #0]
 8009fbe:	605a      	strne	r2, [r3, #4]
 8009fc0:	e7ec      	b.n	8009f9c <_malloc_r+0xa0>
 8009fc2:	4623      	mov	r3, r4
 8009fc4:	6864      	ldr	r4, [r4, #4]
 8009fc6:	e7b2      	b.n	8009f2e <_malloc_r+0x32>
 8009fc8:	4634      	mov	r4, r6
 8009fca:	6876      	ldr	r6, [r6, #4]
 8009fcc:	e7b9      	b.n	8009f42 <_malloc_r+0x46>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	603b      	str	r3, [r7, #0]
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f000 fd28 	bl	800aa28 <__malloc_unlock>
 8009fd8:	e7a1      	b.n	8009f1e <_malloc_r+0x22>
 8009fda:	6025      	str	r5, [r4, #0]
 8009fdc:	e7de      	b.n	8009f9c <_malloc_r+0xa0>
 8009fde:	bf00      	nop
 8009fe0:	20000bb4 	.word	0x20000bb4

08009fe4 <__ssputs_r>:
 8009fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe8:	688e      	ldr	r6, [r1, #8]
 8009fea:	429e      	cmp	r6, r3
 8009fec:	4682      	mov	sl, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	4690      	mov	r8, r2
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	d838      	bhi.n	800a068 <__ssputs_r+0x84>
 8009ff6:	898a      	ldrh	r2, [r1, #12]
 8009ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ffc:	d032      	beq.n	800a064 <__ssputs_r+0x80>
 8009ffe:	6825      	ldr	r5, [r4, #0]
 800a000:	6909      	ldr	r1, [r1, #16]
 800a002:	eba5 0901 	sub.w	r9, r5, r1
 800a006:	6965      	ldr	r5, [r4, #20]
 800a008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a00c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a010:	3301      	adds	r3, #1
 800a012:	444b      	add	r3, r9
 800a014:	106d      	asrs	r5, r5, #1
 800a016:	429d      	cmp	r5, r3
 800a018:	bf38      	it	cc
 800a01a:	461d      	movcc	r5, r3
 800a01c:	0553      	lsls	r3, r2, #21
 800a01e:	d531      	bpl.n	800a084 <__ssputs_r+0xa0>
 800a020:	4629      	mov	r1, r5
 800a022:	f7ff ff6b 	bl	8009efc <_malloc_r>
 800a026:	4606      	mov	r6, r0
 800a028:	b950      	cbnz	r0, 800a040 <__ssputs_r+0x5c>
 800a02a:	230c      	movs	r3, #12
 800a02c:	f8ca 3000 	str.w	r3, [sl]
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a040:	6921      	ldr	r1, [r4, #16]
 800a042:	464a      	mov	r2, r9
 800a044:	f000 fcc2 	bl	800a9cc <memcpy>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a04e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	6126      	str	r6, [r4, #16]
 800a056:	6165      	str	r5, [r4, #20]
 800a058:	444e      	add	r6, r9
 800a05a:	eba5 0509 	sub.w	r5, r5, r9
 800a05e:	6026      	str	r6, [r4, #0]
 800a060:	60a5      	str	r5, [r4, #8]
 800a062:	463e      	mov	r6, r7
 800a064:	42be      	cmp	r6, r7
 800a066:	d900      	bls.n	800a06a <__ssputs_r+0x86>
 800a068:	463e      	mov	r6, r7
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	4632      	mov	r2, r6
 800a06e:	4641      	mov	r1, r8
 800a070:	f000 fcba 	bl	800a9e8 <memmove>
 800a074:	68a3      	ldr	r3, [r4, #8]
 800a076:	1b9b      	subs	r3, r3, r6
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	4433      	add	r3, r6
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	2000      	movs	r0, #0
 800a082:	e7db      	b.n	800a03c <__ssputs_r+0x58>
 800a084:	462a      	mov	r2, r5
 800a086:	f000 fcd5 	bl	800aa34 <_realloc_r>
 800a08a:	4606      	mov	r6, r0
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d1e1      	bne.n	800a054 <__ssputs_r+0x70>
 800a090:	6921      	ldr	r1, [r4, #16]
 800a092:	4650      	mov	r0, sl
 800a094:	f7ff fec6 	bl	8009e24 <_free_r>
 800a098:	e7c7      	b.n	800a02a <__ssputs_r+0x46>
	...

0800a09c <_svfiprintf_r>:
 800a09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	4698      	mov	r8, r3
 800a0a2:	898b      	ldrh	r3, [r1, #12]
 800a0a4:	061b      	lsls	r3, r3, #24
 800a0a6:	b09d      	sub	sp, #116	; 0x74
 800a0a8:	4607      	mov	r7, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	d50e      	bpl.n	800a0ce <_svfiprintf_r+0x32>
 800a0b0:	690b      	ldr	r3, [r1, #16]
 800a0b2:	b963      	cbnz	r3, 800a0ce <_svfiprintf_r+0x32>
 800a0b4:	2140      	movs	r1, #64	; 0x40
 800a0b6:	f7ff ff21 	bl	8009efc <_malloc_r>
 800a0ba:	6028      	str	r0, [r5, #0]
 800a0bc:	6128      	str	r0, [r5, #16]
 800a0be:	b920      	cbnz	r0, 800a0ca <_svfiprintf_r+0x2e>
 800a0c0:	230c      	movs	r3, #12
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e0d1      	b.n	800a26e <_svfiprintf_r+0x1d2>
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	616b      	str	r3, [r5, #20]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d2:	2320      	movs	r3, #32
 800a0d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0dc:	2330      	movs	r3, #48	; 0x30
 800a0de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a288 <_svfiprintf_r+0x1ec>
 800a0e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0e6:	f04f 0901 	mov.w	r9, #1
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	469a      	mov	sl, r3
 800a0ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0f2:	b10a      	cbz	r2, 800a0f8 <_svfiprintf_r+0x5c>
 800a0f4:	2a25      	cmp	r2, #37	; 0x25
 800a0f6:	d1f9      	bne.n	800a0ec <_svfiprintf_r+0x50>
 800a0f8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0fc:	d00b      	beq.n	800a116 <_svfiprintf_r+0x7a>
 800a0fe:	465b      	mov	r3, fp
 800a100:	4622      	mov	r2, r4
 800a102:	4629      	mov	r1, r5
 800a104:	4638      	mov	r0, r7
 800a106:	f7ff ff6d 	bl	8009fe4 <__ssputs_r>
 800a10a:	3001      	adds	r0, #1
 800a10c:	f000 80aa 	beq.w	800a264 <_svfiprintf_r+0x1c8>
 800a110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a112:	445a      	add	r2, fp
 800a114:	9209      	str	r2, [sp, #36]	; 0x24
 800a116:	f89a 3000 	ldrb.w	r3, [sl]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 80a2 	beq.w	800a264 <_svfiprintf_r+0x1c8>
 800a120:	2300      	movs	r3, #0
 800a122:	f04f 32ff 	mov.w	r2, #4294967295
 800a126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a12a:	f10a 0a01 	add.w	sl, sl, #1
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	9307      	str	r3, [sp, #28]
 800a132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a136:	931a      	str	r3, [sp, #104]	; 0x68
 800a138:	4654      	mov	r4, sl
 800a13a:	2205      	movs	r2, #5
 800a13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a140:	4851      	ldr	r0, [pc, #324]	; (800a288 <_svfiprintf_r+0x1ec>)
 800a142:	f7f6 f855 	bl	80001f0 <memchr>
 800a146:	9a04      	ldr	r2, [sp, #16]
 800a148:	b9d8      	cbnz	r0, 800a182 <_svfiprintf_r+0xe6>
 800a14a:	06d0      	lsls	r0, r2, #27
 800a14c:	bf44      	itt	mi
 800a14e:	2320      	movmi	r3, #32
 800a150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a154:	0711      	lsls	r1, r2, #28
 800a156:	bf44      	itt	mi
 800a158:	232b      	movmi	r3, #43	; 0x2b
 800a15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a15e:	f89a 3000 	ldrb.w	r3, [sl]
 800a162:	2b2a      	cmp	r3, #42	; 0x2a
 800a164:	d015      	beq.n	800a192 <_svfiprintf_r+0xf6>
 800a166:	9a07      	ldr	r2, [sp, #28]
 800a168:	4654      	mov	r4, sl
 800a16a:	2000      	movs	r0, #0
 800a16c:	f04f 0c0a 	mov.w	ip, #10
 800a170:	4621      	mov	r1, r4
 800a172:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a176:	3b30      	subs	r3, #48	; 0x30
 800a178:	2b09      	cmp	r3, #9
 800a17a:	d94e      	bls.n	800a21a <_svfiprintf_r+0x17e>
 800a17c:	b1b0      	cbz	r0, 800a1ac <_svfiprintf_r+0x110>
 800a17e:	9207      	str	r2, [sp, #28]
 800a180:	e014      	b.n	800a1ac <_svfiprintf_r+0x110>
 800a182:	eba0 0308 	sub.w	r3, r0, r8
 800a186:	fa09 f303 	lsl.w	r3, r9, r3
 800a18a:	4313      	orrs	r3, r2
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	46a2      	mov	sl, r4
 800a190:	e7d2      	b.n	800a138 <_svfiprintf_r+0x9c>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	1d19      	adds	r1, r3, #4
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	9103      	str	r1, [sp, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	bfbb      	ittet	lt
 800a19e:	425b      	neglt	r3, r3
 800a1a0:	f042 0202 	orrlt.w	r2, r2, #2
 800a1a4:	9307      	strge	r3, [sp, #28]
 800a1a6:	9307      	strlt	r3, [sp, #28]
 800a1a8:	bfb8      	it	lt
 800a1aa:	9204      	strlt	r2, [sp, #16]
 800a1ac:	7823      	ldrb	r3, [r4, #0]
 800a1ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b0:	d10c      	bne.n	800a1cc <_svfiprintf_r+0x130>
 800a1b2:	7863      	ldrb	r3, [r4, #1]
 800a1b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b6:	d135      	bne.n	800a224 <_svfiprintf_r+0x188>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	1d1a      	adds	r2, r3, #4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	9203      	str	r2, [sp, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	bfb8      	it	lt
 800a1c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1c8:	3402      	adds	r4, #2
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a298 <_svfiprintf_r+0x1fc>
 800a1d0:	7821      	ldrb	r1, [r4, #0]
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	4650      	mov	r0, sl
 800a1d6:	f7f6 f80b 	bl	80001f0 <memchr>
 800a1da:	b140      	cbz	r0, 800a1ee <_svfiprintf_r+0x152>
 800a1dc:	2340      	movs	r3, #64	; 0x40
 800a1de:	eba0 000a 	sub.w	r0, r0, sl
 800a1e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	4303      	orrs	r3, r0
 800a1ea:	3401      	adds	r4, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f2:	4826      	ldr	r0, [pc, #152]	; (800a28c <_svfiprintf_r+0x1f0>)
 800a1f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1f8:	2206      	movs	r2, #6
 800a1fa:	f7f5 fff9 	bl	80001f0 <memchr>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d038      	beq.n	800a274 <_svfiprintf_r+0x1d8>
 800a202:	4b23      	ldr	r3, [pc, #140]	; (800a290 <_svfiprintf_r+0x1f4>)
 800a204:	bb1b      	cbnz	r3, 800a24e <_svfiprintf_r+0x1b2>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	3307      	adds	r3, #7
 800a20a:	f023 0307 	bic.w	r3, r3, #7
 800a20e:	3308      	adds	r3, #8
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a214:	4433      	add	r3, r6
 800a216:	9309      	str	r3, [sp, #36]	; 0x24
 800a218:	e767      	b.n	800a0ea <_svfiprintf_r+0x4e>
 800a21a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a21e:	460c      	mov	r4, r1
 800a220:	2001      	movs	r0, #1
 800a222:	e7a5      	b.n	800a170 <_svfiprintf_r+0xd4>
 800a224:	2300      	movs	r3, #0
 800a226:	3401      	adds	r4, #1
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	4619      	mov	r1, r3
 800a22c:	f04f 0c0a 	mov.w	ip, #10
 800a230:	4620      	mov	r0, r4
 800a232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a236:	3a30      	subs	r2, #48	; 0x30
 800a238:	2a09      	cmp	r2, #9
 800a23a:	d903      	bls.n	800a244 <_svfiprintf_r+0x1a8>
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0c5      	beq.n	800a1cc <_svfiprintf_r+0x130>
 800a240:	9105      	str	r1, [sp, #20]
 800a242:	e7c3      	b.n	800a1cc <_svfiprintf_r+0x130>
 800a244:	fb0c 2101 	mla	r1, ip, r1, r2
 800a248:	4604      	mov	r4, r0
 800a24a:	2301      	movs	r3, #1
 800a24c:	e7f0      	b.n	800a230 <_svfiprintf_r+0x194>
 800a24e:	ab03      	add	r3, sp, #12
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	462a      	mov	r2, r5
 800a254:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <_svfiprintf_r+0x1f8>)
 800a256:	a904      	add	r1, sp, #16
 800a258:	4638      	mov	r0, r7
 800a25a:	f3af 8000 	nop.w
 800a25e:	1c42      	adds	r2, r0, #1
 800a260:	4606      	mov	r6, r0
 800a262:	d1d6      	bne.n	800a212 <_svfiprintf_r+0x176>
 800a264:	89ab      	ldrh	r3, [r5, #12]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	f53f af2c 	bmi.w	800a0c4 <_svfiprintf_r+0x28>
 800a26c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26e:	b01d      	add	sp, #116	; 0x74
 800a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	ab03      	add	r3, sp, #12
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	462a      	mov	r2, r5
 800a27a:	4b06      	ldr	r3, [pc, #24]	; (800a294 <_svfiprintf_r+0x1f8>)
 800a27c:	a904      	add	r1, sp, #16
 800a27e:	4638      	mov	r0, r7
 800a280:	f000 f9d4 	bl	800a62c <_printf_i>
 800a284:	e7eb      	b.n	800a25e <_svfiprintf_r+0x1c2>
 800a286:	bf00      	nop
 800a288:	0800add8 	.word	0x0800add8
 800a28c:	0800ade2 	.word	0x0800ade2
 800a290:	00000000 	.word	0x00000000
 800a294:	08009fe5 	.word	0x08009fe5
 800a298:	0800adde 	.word	0x0800adde

0800a29c <__sfputc_r>:
 800a29c:	6893      	ldr	r3, [r2, #8]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	b410      	push	{r4}
 800a2a4:	6093      	str	r3, [r2, #8]
 800a2a6:	da08      	bge.n	800a2ba <__sfputc_r+0x1e>
 800a2a8:	6994      	ldr	r4, [r2, #24]
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	db01      	blt.n	800a2b2 <__sfputc_r+0x16>
 800a2ae:	290a      	cmp	r1, #10
 800a2b0:	d103      	bne.n	800a2ba <__sfputc_r+0x1e>
 800a2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b6:	f7ff bad5 	b.w	8009864 <__swbuf_r>
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	1c58      	adds	r0, r3, #1
 800a2be:	6010      	str	r0, [r2, #0]
 800a2c0:	7019      	strb	r1, [r3, #0]
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <__sfputs_r>:
 800a2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	18d5      	adds	r5, r2, r3
 800a2d4:	42ac      	cmp	r4, r5
 800a2d6:	d101      	bne.n	800a2dc <__sfputs_r+0x12>
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e007      	b.n	800a2ec <__sfputs_r+0x22>
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	463a      	mov	r2, r7
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f7ff ffda 	bl	800a29c <__sfputc_r>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d1f3      	bne.n	800a2d4 <__sfputs_r+0xa>
 800a2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2f0 <_vfiprintf_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	b09d      	sub	sp, #116	; 0x74
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	4698      	mov	r8, r3
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	b118      	cbz	r0, 800a308 <_vfiprintf_r+0x18>
 800a300:	6983      	ldr	r3, [r0, #24]
 800a302:	b90b      	cbnz	r3, 800a308 <_vfiprintf_r+0x18>
 800a304:	f7ff fc88 	bl	8009c18 <__sinit>
 800a308:	4b89      	ldr	r3, [pc, #548]	; (800a530 <_vfiprintf_r+0x240>)
 800a30a:	429d      	cmp	r5, r3
 800a30c:	d11b      	bne.n	800a346 <_vfiprintf_r+0x56>
 800a30e:	6875      	ldr	r5, [r6, #4]
 800a310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a312:	07d9      	lsls	r1, r3, #31
 800a314:	d405      	bmi.n	800a322 <_vfiprintf_r+0x32>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	059a      	lsls	r2, r3, #22
 800a31a:	d402      	bmi.n	800a322 <_vfiprintf_r+0x32>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f7ff fd19 	bl	8009d54 <__retarget_lock_acquire_recursive>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	071b      	lsls	r3, r3, #28
 800a326:	d501      	bpl.n	800a32c <_vfiprintf_r+0x3c>
 800a328:	692b      	ldr	r3, [r5, #16]
 800a32a:	b9eb      	cbnz	r3, 800a368 <_vfiprintf_r+0x78>
 800a32c:	4629      	mov	r1, r5
 800a32e:	4630      	mov	r0, r6
 800a330:	f7ff faea 	bl	8009908 <__swsetup_r>
 800a334:	b1c0      	cbz	r0, 800a368 <_vfiprintf_r+0x78>
 800a336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a338:	07dc      	lsls	r4, r3, #31
 800a33a:	d50e      	bpl.n	800a35a <_vfiprintf_r+0x6a>
 800a33c:	f04f 30ff 	mov.w	r0, #4294967295
 800a340:	b01d      	add	sp, #116	; 0x74
 800a342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a346:	4b7b      	ldr	r3, [pc, #492]	; (800a534 <_vfiprintf_r+0x244>)
 800a348:	429d      	cmp	r5, r3
 800a34a:	d101      	bne.n	800a350 <_vfiprintf_r+0x60>
 800a34c:	68b5      	ldr	r5, [r6, #8]
 800a34e:	e7df      	b.n	800a310 <_vfiprintf_r+0x20>
 800a350:	4b79      	ldr	r3, [pc, #484]	; (800a538 <_vfiprintf_r+0x248>)
 800a352:	429d      	cmp	r5, r3
 800a354:	bf08      	it	eq
 800a356:	68f5      	ldreq	r5, [r6, #12]
 800a358:	e7da      	b.n	800a310 <_vfiprintf_r+0x20>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	0598      	lsls	r0, r3, #22
 800a35e:	d4ed      	bmi.n	800a33c <_vfiprintf_r+0x4c>
 800a360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a362:	f7ff fcf8 	bl	8009d56 <__retarget_lock_release_recursive>
 800a366:	e7e9      	b.n	800a33c <_vfiprintf_r+0x4c>
 800a368:	2300      	movs	r3, #0
 800a36a:	9309      	str	r3, [sp, #36]	; 0x24
 800a36c:	2320      	movs	r3, #32
 800a36e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a372:	f8cd 800c 	str.w	r8, [sp, #12]
 800a376:	2330      	movs	r3, #48	; 0x30
 800a378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a53c <_vfiprintf_r+0x24c>
 800a37c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a380:	f04f 0901 	mov.w	r9, #1
 800a384:	4623      	mov	r3, r4
 800a386:	469a      	mov	sl, r3
 800a388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a38c:	b10a      	cbz	r2, 800a392 <_vfiprintf_r+0xa2>
 800a38e:	2a25      	cmp	r2, #37	; 0x25
 800a390:	d1f9      	bne.n	800a386 <_vfiprintf_r+0x96>
 800a392:	ebba 0b04 	subs.w	fp, sl, r4
 800a396:	d00b      	beq.n	800a3b0 <_vfiprintf_r+0xc0>
 800a398:	465b      	mov	r3, fp
 800a39a:	4622      	mov	r2, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7ff ff93 	bl	800a2ca <__sfputs_r>
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f000 80aa 	beq.w	800a4fe <_vfiprintf_r+0x20e>
 800a3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ac:	445a      	add	r2, fp
 800a3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 80a2 	beq.w	800a4fe <_vfiprintf_r+0x20e>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c4:	f10a 0a01 	add.w	sl, sl, #1
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	9307      	str	r3, [sp, #28]
 800a3cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d2:	4654      	mov	r4, sl
 800a3d4:	2205      	movs	r2, #5
 800a3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3da:	4858      	ldr	r0, [pc, #352]	; (800a53c <_vfiprintf_r+0x24c>)
 800a3dc:	f7f5 ff08 	bl	80001f0 <memchr>
 800a3e0:	9a04      	ldr	r2, [sp, #16]
 800a3e2:	b9d8      	cbnz	r0, 800a41c <_vfiprintf_r+0x12c>
 800a3e4:	06d1      	lsls	r1, r2, #27
 800a3e6:	bf44      	itt	mi
 800a3e8:	2320      	movmi	r3, #32
 800a3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ee:	0713      	lsls	r3, r2, #28
 800a3f0:	bf44      	itt	mi
 800a3f2:	232b      	movmi	r3, #43	; 0x2b
 800a3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fe:	d015      	beq.n	800a42c <_vfiprintf_r+0x13c>
 800a400:	9a07      	ldr	r2, [sp, #28]
 800a402:	4654      	mov	r4, sl
 800a404:	2000      	movs	r0, #0
 800a406:	f04f 0c0a 	mov.w	ip, #10
 800a40a:	4621      	mov	r1, r4
 800a40c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a410:	3b30      	subs	r3, #48	; 0x30
 800a412:	2b09      	cmp	r3, #9
 800a414:	d94e      	bls.n	800a4b4 <_vfiprintf_r+0x1c4>
 800a416:	b1b0      	cbz	r0, 800a446 <_vfiprintf_r+0x156>
 800a418:	9207      	str	r2, [sp, #28]
 800a41a:	e014      	b.n	800a446 <_vfiprintf_r+0x156>
 800a41c:	eba0 0308 	sub.w	r3, r0, r8
 800a420:	fa09 f303 	lsl.w	r3, r9, r3
 800a424:	4313      	orrs	r3, r2
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	46a2      	mov	sl, r4
 800a42a:	e7d2      	b.n	800a3d2 <_vfiprintf_r+0xe2>
 800a42c:	9b03      	ldr	r3, [sp, #12]
 800a42e:	1d19      	adds	r1, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	9103      	str	r1, [sp, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfbb      	ittet	lt
 800a438:	425b      	neglt	r3, r3
 800a43a:	f042 0202 	orrlt.w	r2, r2, #2
 800a43e:	9307      	strge	r3, [sp, #28]
 800a440:	9307      	strlt	r3, [sp, #28]
 800a442:	bfb8      	it	lt
 800a444:	9204      	strlt	r2, [sp, #16]
 800a446:	7823      	ldrb	r3, [r4, #0]
 800a448:	2b2e      	cmp	r3, #46	; 0x2e
 800a44a:	d10c      	bne.n	800a466 <_vfiprintf_r+0x176>
 800a44c:	7863      	ldrb	r3, [r4, #1]
 800a44e:	2b2a      	cmp	r3, #42	; 0x2a
 800a450:	d135      	bne.n	800a4be <_vfiprintf_r+0x1ce>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	1d1a      	adds	r2, r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	9203      	str	r2, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bfb8      	it	lt
 800a45e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a462:	3402      	adds	r4, #2
 800a464:	9305      	str	r3, [sp, #20]
 800a466:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a54c <_vfiprintf_r+0x25c>
 800a46a:	7821      	ldrb	r1, [r4, #0]
 800a46c:	2203      	movs	r2, #3
 800a46e:	4650      	mov	r0, sl
 800a470:	f7f5 febe 	bl	80001f0 <memchr>
 800a474:	b140      	cbz	r0, 800a488 <_vfiprintf_r+0x198>
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	eba0 000a 	sub.w	r0, r0, sl
 800a47c:	fa03 f000 	lsl.w	r0, r3, r0
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	4303      	orrs	r3, r0
 800a484:	3401      	adds	r4, #1
 800a486:	9304      	str	r3, [sp, #16]
 800a488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48c:	482c      	ldr	r0, [pc, #176]	; (800a540 <_vfiprintf_r+0x250>)
 800a48e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a492:	2206      	movs	r2, #6
 800a494:	f7f5 feac 	bl	80001f0 <memchr>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d03f      	beq.n	800a51c <_vfiprintf_r+0x22c>
 800a49c:	4b29      	ldr	r3, [pc, #164]	; (800a544 <_vfiprintf_r+0x254>)
 800a49e:	bb1b      	cbnz	r3, 800a4e8 <_vfiprintf_r+0x1f8>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	3307      	adds	r3, #7
 800a4a4:	f023 0307 	bic.w	r3, r3, #7
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	9303      	str	r3, [sp, #12]
 800a4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ae:	443b      	add	r3, r7
 800a4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b2:	e767      	b.n	800a384 <_vfiprintf_r+0x94>
 800a4b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	e7a5      	b.n	800a40a <_vfiprintf_r+0x11a>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	3401      	adds	r4, #1
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f04f 0c0a 	mov.w	ip, #10
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d0:	3a30      	subs	r2, #48	; 0x30
 800a4d2:	2a09      	cmp	r2, #9
 800a4d4:	d903      	bls.n	800a4de <_vfiprintf_r+0x1ee>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0c5      	beq.n	800a466 <_vfiprintf_r+0x176>
 800a4da:	9105      	str	r1, [sp, #20]
 800a4dc:	e7c3      	b.n	800a466 <_vfiprintf_r+0x176>
 800a4de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e7f0      	b.n	800a4ca <_vfiprintf_r+0x1da>
 800a4e8:	ab03      	add	r3, sp, #12
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	462a      	mov	r2, r5
 800a4ee:	4b16      	ldr	r3, [pc, #88]	; (800a548 <_vfiprintf_r+0x258>)
 800a4f0:	a904      	add	r1, sp, #16
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f3af 8000 	nop.w
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	1c78      	adds	r0, r7, #1
 800a4fc:	d1d6      	bne.n	800a4ac <_vfiprintf_r+0x1bc>
 800a4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a500:	07d9      	lsls	r1, r3, #31
 800a502:	d405      	bmi.n	800a510 <_vfiprintf_r+0x220>
 800a504:	89ab      	ldrh	r3, [r5, #12]
 800a506:	059a      	lsls	r2, r3, #22
 800a508:	d402      	bmi.n	800a510 <_vfiprintf_r+0x220>
 800a50a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a50c:	f7ff fc23 	bl	8009d56 <__retarget_lock_release_recursive>
 800a510:	89ab      	ldrh	r3, [r5, #12]
 800a512:	065b      	lsls	r3, r3, #25
 800a514:	f53f af12 	bmi.w	800a33c <_vfiprintf_r+0x4c>
 800a518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a51a:	e711      	b.n	800a340 <_vfiprintf_r+0x50>
 800a51c:	ab03      	add	r3, sp, #12
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	462a      	mov	r2, r5
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <_vfiprintf_r+0x258>)
 800a524:	a904      	add	r1, sp, #16
 800a526:	4630      	mov	r0, r6
 800a528:	f000 f880 	bl	800a62c <_printf_i>
 800a52c:	e7e4      	b.n	800a4f8 <_vfiprintf_r+0x208>
 800a52e:	bf00      	nop
 800a530:	0800ad98 	.word	0x0800ad98
 800a534:	0800adb8 	.word	0x0800adb8
 800a538:	0800ad78 	.word	0x0800ad78
 800a53c:	0800add8 	.word	0x0800add8
 800a540:	0800ade2 	.word	0x0800ade2
 800a544:	00000000 	.word	0x00000000
 800a548:	0800a2cb 	.word	0x0800a2cb
 800a54c:	0800adde 	.word	0x0800adde

0800a550 <_printf_common>:
 800a550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	4616      	mov	r6, r2
 800a556:	4699      	mov	r9, r3
 800a558:	688a      	ldr	r2, [r1, #8]
 800a55a:	690b      	ldr	r3, [r1, #16]
 800a55c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a560:	4293      	cmp	r3, r2
 800a562:	bfb8      	it	lt
 800a564:	4613      	movlt	r3, r2
 800a566:	6033      	str	r3, [r6, #0]
 800a568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a56c:	4607      	mov	r7, r0
 800a56e:	460c      	mov	r4, r1
 800a570:	b10a      	cbz	r2, 800a576 <_printf_common+0x26>
 800a572:	3301      	adds	r3, #1
 800a574:	6033      	str	r3, [r6, #0]
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	0699      	lsls	r1, r3, #26
 800a57a:	bf42      	ittt	mi
 800a57c:	6833      	ldrmi	r3, [r6, #0]
 800a57e:	3302      	addmi	r3, #2
 800a580:	6033      	strmi	r3, [r6, #0]
 800a582:	6825      	ldr	r5, [r4, #0]
 800a584:	f015 0506 	ands.w	r5, r5, #6
 800a588:	d106      	bne.n	800a598 <_printf_common+0x48>
 800a58a:	f104 0a19 	add.w	sl, r4, #25
 800a58e:	68e3      	ldr	r3, [r4, #12]
 800a590:	6832      	ldr	r2, [r6, #0]
 800a592:	1a9b      	subs	r3, r3, r2
 800a594:	42ab      	cmp	r3, r5
 800a596:	dc26      	bgt.n	800a5e6 <_printf_common+0x96>
 800a598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a59c:	1e13      	subs	r3, r2, #0
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	bf18      	it	ne
 800a5a2:	2301      	movne	r3, #1
 800a5a4:	0692      	lsls	r2, r2, #26
 800a5a6:	d42b      	bmi.n	800a600 <_printf_common+0xb0>
 800a5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	47c0      	blx	r8
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d01e      	beq.n	800a5f4 <_printf_common+0xa4>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	68e5      	ldr	r5, [r4, #12]
 800a5ba:	6832      	ldr	r2, [r6, #0]
 800a5bc:	f003 0306 	and.w	r3, r3, #6
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	bf08      	it	eq
 800a5c4:	1aad      	subeq	r5, r5, r2
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	6922      	ldr	r2, [r4, #16]
 800a5ca:	bf0c      	ite	eq
 800a5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5d0:	2500      	movne	r5, #0
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	bfc4      	itt	gt
 800a5d6:	1a9b      	subgt	r3, r3, r2
 800a5d8:	18ed      	addgt	r5, r5, r3
 800a5da:	2600      	movs	r6, #0
 800a5dc:	341a      	adds	r4, #26
 800a5de:	42b5      	cmp	r5, r6
 800a5e0:	d11a      	bne.n	800a618 <_printf_common+0xc8>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	e008      	b.n	800a5f8 <_printf_common+0xa8>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	47c0      	blx	r8
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d103      	bne.n	800a5fc <_printf_common+0xac>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	e7c6      	b.n	800a58e <_printf_common+0x3e>
 800a600:	18e1      	adds	r1, r4, r3
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	2030      	movs	r0, #48	; 0x30
 800a606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a60a:	4422      	add	r2, r4
 800a60c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a614:	3302      	adds	r3, #2
 800a616:	e7c7      	b.n	800a5a8 <_printf_common+0x58>
 800a618:	2301      	movs	r3, #1
 800a61a:	4622      	mov	r2, r4
 800a61c:	4649      	mov	r1, r9
 800a61e:	4638      	mov	r0, r7
 800a620:	47c0      	blx	r8
 800a622:	3001      	adds	r0, #1
 800a624:	d0e6      	beq.n	800a5f4 <_printf_common+0xa4>
 800a626:	3601      	adds	r6, #1
 800a628:	e7d9      	b.n	800a5de <_printf_common+0x8e>
	...

0800a62c <_printf_i>:
 800a62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	7e0f      	ldrb	r7, [r1, #24]
 800a632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a634:	2f78      	cmp	r7, #120	; 0x78
 800a636:	4691      	mov	r9, r2
 800a638:	4680      	mov	r8, r0
 800a63a:	460c      	mov	r4, r1
 800a63c:	469a      	mov	sl, r3
 800a63e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a642:	d807      	bhi.n	800a654 <_printf_i+0x28>
 800a644:	2f62      	cmp	r7, #98	; 0x62
 800a646:	d80a      	bhi.n	800a65e <_printf_i+0x32>
 800a648:	2f00      	cmp	r7, #0
 800a64a:	f000 80d8 	beq.w	800a7fe <_printf_i+0x1d2>
 800a64e:	2f58      	cmp	r7, #88	; 0x58
 800a650:	f000 80a3 	beq.w	800a79a <_printf_i+0x16e>
 800a654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a65c:	e03a      	b.n	800a6d4 <_printf_i+0xa8>
 800a65e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a662:	2b15      	cmp	r3, #21
 800a664:	d8f6      	bhi.n	800a654 <_printf_i+0x28>
 800a666:	a101      	add	r1, pc, #4	; (adr r1, 800a66c <_printf_i+0x40>)
 800a668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a66c:	0800a6c5 	.word	0x0800a6c5
 800a670:	0800a6d9 	.word	0x0800a6d9
 800a674:	0800a655 	.word	0x0800a655
 800a678:	0800a655 	.word	0x0800a655
 800a67c:	0800a655 	.word	0x0800a655
 800a680:	0800a655 	.word	0x0800a655
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a655 	.word	0x0800a655
 800a68c:	0800a655 	.word	0x0800a655
 800a690:	0800a655 	.word	0x0800a655
 800a694:	0800a655 	.word	0x0800a655
 800a698:	0800a7e5 	.word	0x0800a7e5
 800a69c:	0800a709 	.word	0x0800a709
 800a6a0:	0800a7c7 	.word	0x0800a7c7
 800a6a4:	0800a655 	.word	0x0800a655
 800a6a8:	0800a655 	.word	0x0800a655
 800a6ac:	0800a807 	.word	0x0800a807
 800a6b0:	0800a655 	.word	0x0800a655
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a655 	.word	0x0800a655
 800a6bc:	0800a655 	.word	0x0800a655
 800a6c0:	0800a7cf 	.word	0x0800a7cf
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	1d1a      	adds	r2, r3, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	602a      	str	r2, [r5, #0]
 800a6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e0a3      	b.n	800a820 <_printf_i+0x1f4>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	6829      	ldr	r1, [r5, #0]
 800a6dc:	0606      	lsls	r6, r0, #24
 800a6de:	f101 0304 	add.w	r3, r1, #4
 800a6e2:	d50a      	bpl.n	800a6fa <_printf_i+0xce>
 800a6e4:	680e      	ldr	r6, [r1, #0]
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	2e00      	cmp	r6, #0
 800a6ea:	da03      	bge.n	800a6f4 <_printf_i+0xc8>
 800a6ec:	232d      	movs	r3, #45	; 0x2d
 800a6ee:	4276      	negs	r6, r6
 800a6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f4:	485e      	ldr	r0, [pc, #376]	; (800a870 <_printf_i+0x244>)
 800a6f6:	230a      	movs	r3, #10
 800a6f8:	e019      	b.n	800a72e <_printf_i+0x102>
 800a6fa:	680e      	ldr	r6, [r1, #0]
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a702:	bf18      	it	ne
 800a704:	b236      	sxthne	r6, r6
 800a706:	e7ef      	b.n	800a6e8 <_printf_i+0xbc>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	6820      	ldr	r0, [r4, #0]
 800a70c:	1d19      	adds	r1, r3, #4
 800a70e:	6029      	str	r1, [r5, #0]
 800a710:	0601      	lsls	r1, r0, #24
 800a712:	d501      	bpl.n	800a718 <_printf_i+0xec>
 800a714:	681e      	ldr	r6, [r3, #0]
 800a716:	e002      	b.n	800a71e <_printf_i+0xf2>
 800a718:	0646      	lsls	r6, r0, #25
 800a71a:	d5fb      	bpl.n	800a714 <_printf_i+0xe8>
 800a71c:	881e      	ldrh	r6, [r3, #0]
 800a71e:	4854      	ldr	r0, [pc, #336]	; (800a870 <_printf_i+0x244>)
 800a720:	2f6f      	cmp	r7, #111	; 0x6f
 800a722:	bf0c      	ite	eq
 800a724:	2308      	moveq	r3, #8
 800a726:	230a      	movne	r3, #10
 800a728:	2100      	movs	r1, #0
 800a72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a72e:	6865      	ldr	r5, [r4, #4]
 800a730:	60a5      	str	r5, [r4, #8]
 800a732:	2d00      	cmp	r5, #0
 800a734:	bfa2      	ittt	ge
 800a736:	6821      	ldrge	r1, [r4, #0]
 800a738:	f021 0104 	bicge.w	r1, r1, #4
 800a73c:	6021      	strge	r1, [r4, #0]
 800a73e:	b90e      	cbnz	r6, 800a744 <_printf_i+0x118>
 800a740:	2d00      	cmp	r5, #0
 800a742:	d04d      	beq.n	800a7e0 <_printf_i+0x1b4>
 800a744:	4615      	mov	r5, r2
 800a746:	fbb6 f1f3 	udiv	r1, r6, r3
 800a74a:	fb03 6711 	mls	r7, r3, r1, r6
 800a74e:	5dc7      	ldrb	r7, [r0, r7]
 800a750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a754:	4637      	mov	r7, r6
 800a756:	42bb      	cmp	r3, r7
 800a758:	460e      	mov	r6, r1
 800a75a:	d9f4      	bls.n	800a746 <_printf_i+0x11a>
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d10b      	bne.n	800a778 <_printf_i+0x14c>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	07de      	lsls	r6, r3, #31
 800a764:	d508      	bpl.n	800a778 <_printf_i+0x14c>
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	6861      	ldr	r1, [r4, #4]
 800a76a:	4299      	cmp	r1, r3
 800a76c:	bfde      	ittt	le
 800a76e:	2330      	movle	r3, #48	; 0x30
 800a770:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a774:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a778:	1b52      	subs	r2, r2, r5
 800a77a:	6122      	str	r2, [r4, #16]
 800a77c:	f8cd a000 	str.w	sl, [sp]
 800a780:	464b      	mov	r3, r9
 800a782:	aa03      	add	r2, sp, #12
 800a784:	4621      	mov	r1, r4
 800a786:	4640      	mov	r0, r8
 800a788:	f7ff fee2 	bl	800a550 <_printf_common>
 800a78c:	3001      	adds	r0, #1
 800a78e:	d14c      	bne.n	800a82a <_printf_i+0x1fe>
 800a790:	f04f 30ff 	mov.w	r0, #4294967295
 800a794:	b004      	add	sp, #16
 800a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79a:	4835      	ldr	r0, [pc, #212]	; (800a870 <_printf_i+0x244>)
 800a79c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7a0:	6829      	ldr	r1, [r5, #0]
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7a8:	6029      	str	r1, [r5, #0]
 800a7aa:	061d      	lsls	r5, r3, #24
 800a7ac:	d514      	bpl.n	800a7d8 <_printf_i+0x1ac>
 800a7ae:	07df      	lsls	r7, r3, #31
 800a7b0:	bf44      	itt	mi
 800a7b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7b6:	6023      	strmi	r3, [r4, #0]
 800a7b8:	b91e      	cbnz	r6, 800a7c2 <_printf_i+0x196>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	f023 0320 	bic.w	r3, r3, #32
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	2310      	movs	r3, #16
 800a7c4:	e7b0      	b.n	800a728 <_printf_i+0xfc>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	f043 0320 	orr.w	r3, r3, #32
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	2378      	movs	r3, #120	; 0x78
 800a7d0:	4828      	ldr	r0, [pc, #160]	; (800a874 <_printf_i+0x248>)
 800a7d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7d6:	e7e3      	b.n	800a7a0 <_printf_i+0x174>
 800a7d8:	0659      	lsls	r1, r3, #25
 800a7da:	bf48      	it	mi
 800a7dc:	b2b6      	uxthmi	r6, r6
 800a7de:	e7e6      	b.n	800a7ae <_printf_i+0x182>
 800a7e0:	4615      	mov	r5, r2
 800a7e2:	e7bb      	b.n	800a75c <_printf_i+0x130>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	6826      	ldr	r6, [r4, #0]
 800a7e8:	6961      	ldr	r1, [r4, #20]
 800a7ea:	1d18      	adds	r0, r3, #4
 800a7ec:	6028      	str	r0, [r5, #0]
 800a7ee:	0635      	lsls	r5, r6, #24
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	d501      	bpl.n	800a7f8 <_printf_i+0x1cc>
 800a7f4:	6019      	str	r1, [r3, #0]
 800a7f6:	e002      	b.n	800a7fe <_printf_i+0x1d2>
 800a7f8:	0670      	lsls	r0, r6, #25
 800a7fa:	d5fb      	bpl.n	800a7f4 <_printf_i+0x1c8>
 800a7fc:	8019      	strh	r1, [r3, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	6123      	str	r3, [r4, #16]
 800a802:	4615      	mov	r5, r2
 800a804:	e7ba      	b.n	800a77c <_printf_i+0x150>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	1d1a      	adds	r2, r3, #4
 800a80a:	602a      	str	r2, [r5, #0]
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	6862      	ldr	r2, [r4, #4]
 800a810:	2100      	movs	r1, #0
 800a812:	4628      	mov	r0, r5
 800a814:	f7f5 fcec 	bl	80001f0 <memchr>
 800a818:	b108      	cbz	r0, 800a81e <_printf_i+0x1f2>
 800a81a:	1b40      	subs	r0, r0, r5
 800a81c:	6060      	str	r0, [r4, #4]
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	2300      	movs	r3, #0
 800a824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a828:	e7a8      	b.n	800a77c <_printf_i+0x150>
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	462a      	mov	r2, r5
 800a82e:	4649      	mov	r1, r9
 800a830:	4640      	mov	r0, r8
 800a832:	47d0      	blx	sl
 800a834:	3001      	adds	r0, #1
 800a836:	d0ab      	beq.n	800a790 <_printf_i+0x164>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	079b      	lsls	r3, r3, #30
 800a83c:	d413      	bmi.n	800a866 <_printf_i+0x23a>
 800a83e:	68e0      	ldr	r0, [r4, #12]
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	4298      	cmp	r0, r3
 800a844:	bfb8      	it	lt
 800a846:	4618      	movlt	r0, r3
 800a848:	e7a4      	b.n	800a794 <_printf_i+0x168>
 800a84a:	2301      	movs	r3, #1
 800a84c:	4632      	mov	r2, r6
 800a84e:	4649      	mov	r1, r9
 800a850:	4640      	mov	r0, r8
 800a852:	47d0      	blx	sl
 800a854:	3001      	adds	r0, #1
 800a856:	d09b      	beq.n	800a790 <_printf_i+0x164>
 800a858:	3501      	adds	r5, #1
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	9903      	ldr	r1, [sp, #12]
 800a85e:	1a5b      	subs	r3, r3, r1
 800a860:	42ab      	cmp	r3, r5
 800a862:	dcf2      	bgt.n	800a84a <_printf_i+0x21e>
 800a864:	e7eb      	b.n	800a83e <_printf_i+0x212>
 800a866:	2500      	movs	r5, #0
 800a868:	f104 0619 	add.w	r6, r4, #25
 800a86c:	e7f5      	b.n	800a85a <_printf_i+0x22e>
 800a86e:	bf00      	nop
 800a870:	0800ade9 	.word	0x0800ade9
 800a874:	0800adfa 	.word	0x0800adfa

0800a878 <_sbrk_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d06      	ldr	r5, [pc, #24]	; (800a894 <_sbrk_r+0x1c>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f8 fc5c 	bl	8003140 <_sbrk>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_sbrk_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_sbrk_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20000bbc 	.word	0x20000bbc

0800a898 <__sread>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	460c      	mov	r4, r1
 800a89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a0:	f000 f8f8 	bl	800aa94 <_read_r>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	bfab      	itete	ge
 800a8a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a8ac:	181b      	addge	r3, r3, r0
 800a8ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8b2:	bfac      	ite	ge
 800a8b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8b6:	81a3      	strhlt	r3, [r4, #12]
 800a8b8:	bd10      	pop	{r4, pc}

0800a8ba <__swrite>:
 800a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8be:	461f      	mov	r7, r3
 800a8c0:	898b      	ldrh	r3, [r1, #12]
 800a8c2:	05db      	lsls	r3, r3, #23
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	d505      	bpl.n	800a8d8 <__swrite+0x1e>
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f000 f868 	bl	800a9a8 <_lseek_r>
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ee:	f000 b817 	b.w	800a920 <_write_r>

0800a8f2 <__sseek>:
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fa:	f000 f855 	bl	800a9a8 <_lseek_r>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	bf15      	itete	ne
 800a904:	6560      	strne	r0, [r4, #84]	; 0x54
 800a906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a90a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a90e:	81a3      	strheq	r3, [r4, #12]
 800a910:	bf18      	it	ne
 800a912:	81a3      	strhne	r3, [r4, #12]
 800a914:	bd10      	pop	{r4, pc}

0800a916 <__sclose>:
 800a916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91a:	f000 b813 	b.w	800a944 <_close_r>
	...

0800a920 <_write_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	; (800a940 <_write_r+0x20>)
 800a924:	4604      	mov	r4, r0
 800a926:	4608      	mov	r0, r1
 800a928:	4611      	mov	r1, r2
 800a92a:	2200      	movs	r2, #0
 800a92c:	602a      	str	r2, [r5, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	f7f8 fbb5 	bl	800309e <_write>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_write_r+0x1e>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_write_r+0x1e>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	20000bbc 	.word	0x20000bbc

0800a944 <_close_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d06      	ldr	r5, [pc, #24]	; (800a960 <_close_r+0x1c>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	f7f8 fbc1 	bl	80030d6 <_close>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_close_r+0x1a>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_close_r+0x1a>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000bbc 	.word	0x20000bbc

0800a964 <_fstat_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	; (800a984 <_fstat_r+0x20>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	f7f8 fbbc 	bl	80030ee <_fstat>
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	d102      	bne.n	800a980 <_fstat_r+0x1c>
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	b103      	cbz	r3, 800a980 <_fstat_r+0x1c>
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	bf00      	nop
 800a984:	20000bbc 	.word	0x20000bbc

0800a988 <_isatty_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d06      	ldr	r5, [pc, #24]	; (800a9a4 <_isatty_r+0x1c>)
 800a98c:	2300      	movs	r3, #0
 800a98e:	4604      	mov	r4, r0
 800a990:	4608      	mov	r0, r1
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	f7f8 fbbb 	bl	800310e <_isatty>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_isatty_r+0x1a>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_isatty_r+0x1a>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000bbc 	.word	0x20000bbc

0800a9a8 <_lseek_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d07      	ldr	r5, [pc, #28]	; (800a9c8 <_lseek_r+0x20>)
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	4608      	mov	r0, r1
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	602a      	str	r2, [r5, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f7f8 fbb4 	bl	8003124 <_lseek>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_lseek_r+0x1e>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_lseek_r+0x1e>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	20000bbc 	.word	0x20000bbc

0800a9cc <memcpy>:
 800a9cc:	440a      	add	r2, r1
 800a9ce:	4291      	cmp	r1, r2
 800a9d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9d4:	d100      	bne.n	800a9d8 <memcpy+0xc>
 800a9d6:	4770      	bx	lr
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e2:	4291      	cmp	r1, r2
 800a9e4:	d1f9      	bne.n	800a9da <memcpy+0xe>
 800a9e6:	bd10      	pop	{r4, pc}

0800a9e8 <memmove>:
 800a9e8:	4288      	cmp	r0, r1
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	eb01 0402 	add.w	r4, r1, r2
 800a9f0:	d902      	bls.n	800a9f8 <memmove+0x10>
 800a9f2:	4284      	cmp	r4, r0
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	d807      	bhi.n	800aa08 <memmove+0x20>
 800a9f8:	1e43      	subs	r3, r0, #1
 800a9fa:	42a1      	cmp	r1, r4
 800a9fc:	d008      	beq.n	800aa10 <memmove+0x28>
 800a9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa06:	e7f8      	b.n	800a9fa <memmove+0x12>
 800aa08:	4402      	add	r2, r0
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	428a      	cmp	r2, r1
 800aa0e:	d100      	bne.n	800aa12 <memmove+0x2a>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1a:	e7f7      	b.n	800aa0c <memmove+0x24>

0800aa1c <__malloc_lock>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	; (800aa24 <__malloc_lock+0x8>)
 800aa1e:	f7ff b999 	b.w	8009d54 <__retarget_lock_acquire_recursive>
 800aa22:	bf00      	nop
 800aa24:	20000bb0 	.word	0x20000bb0

0800aa28 <__malloc_unlock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__malloc_unlock+0x8>)
 800aa2a:	f7ff b994 	b.w	8009d56 <__retarget_lock_release_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000bb0 	.word	0x20000bb0

0800aa34 <_realloc_r>:
 800aa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4614      	mov	r4, r2
 800aa3c:	460e      	mov	r6, r1
 800aa3e:	b921      	cbnz	r1, 800aa4a <_realloc_r+0x16>
 800aa40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa44:	4611      	mov	r1, r2
 800aa46:	f7ff ba59 	b.w	8009efc <_malloc_r>
 800aa4a:	b92a      	cbnz	r2, 800aa58 <_realloc_r+0x24>
 800aa4c:	f7ff f9ea 	bl	8009e24 <_free_r>
 800aa50:	4625      	mov	r5, r4
 800aa52:	4628      	mov	r0, r5
 800aa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa58:	f000 f82e 	bl	800aab8 <_malloc_usable_size_r>
 800aa5c:	4284      	cmp	r4, r0
 800aa5e:	4607      	mov	r7, r0
 800aa60:	d802      	bhi.n	800aa68 <_realloc_r+0x34>
 800aa62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa66:	d812      	bhi.n	800aa8e <_realloc_r+0x5a>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	f7ff fa46 	bl	8009efc <_malloc_r>
 800aa70:	4605      	mov	r5, r0
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0ed      	beq.n	800aa52 <_realloc_r+0x1e>
 800aa76:	42bc      	cmp	r4, r7
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	bf28      	it	cs
 800aa7e:	463a      	movcs	r2, r7
 800aa80:	f7ff ffa4 	bl	800a9cc <memcpy>
 800aa84:	4631      	mov	r1, r6
 800aa86:	4640      	mov	r0, r8
 800aa88:	f7ff f9cc 	bl	8009e24 <_free_r>
 800aa8c:	e7e1      	b.n	800aa52 <_realloc_r+0x1e>
 800aa8e:	4635      	mov	r5, r6
 800aa90:	e7df      	b.n	800aa52 <_realloc_r+0x1e>
	...

0800aa94 <_read_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_read_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f8 fade 	bl	8003064 <_read>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_read_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_read_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20000bbc 	.word	0x20000bbc

0800aab8 <_malloc_usable_size_r>:
 800aab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aabc:	1f18      	subs	r0, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bfbc      	itt	lt
 800aac2:	580b      	ldrlt	r3, [r1, r0]
 800aac4:	18c0      	addlt	r0, r0, r3
 800aac6:	4770      	bx	lr

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
